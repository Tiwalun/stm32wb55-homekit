
target/thumbv7em-none-eabihf/release/stm32wb55-homekit:	file format ELF32-arm-little


Disassembly of section .text:

0800013c bluetooth_hci::host::uart::read_event::h9c6168d178c9a2df:
; fn read_event<E, T, Vendor, VE>(
 800013c: f0 b5                        	push	{r4, r5, r6, r7, lr}
 800013e: 03 af                        	add	r7, sp, #12
 8000140: 2d e9 00 0f                  	push.w	{r8, r9, r10, r11}
 8000144: ad f2 44 6d                  	subw	sp, sp, #1604
;         if n >= self.evt_buf.size() {
 8000148: 40 f2 28 29                  	movw	r9, #552
 800014c: 80 46                        	mov	r8, r0
 800014e: c2 f2 00 09                  	movt	r9, #8192
 8000152: 09 f1 90 02                  	add.w	r2, r9, #144
 8000156: 07 ca                        	ldm	r2, {r0, r1, r2}
;         if self.write_index >= self.read_index {
 8000158: b2 eb 01 0b                  	subs.w	r11, r2, r1
 800015c: 38 bf                        	it	lo
 800015e: 83 44                        	addlo	r11, r0
;         if n >= self.evt_buf.size() {
 8000160: bb f1 03 0f                  	cmp.w	r11, #3
 8000164: 0d d3                        	blo	#26 <_ZN13bluetooth_hci4host4uart10read_event17h9c6168d178c9a2dfE+0x4a>
;         self.buffer[(self.read_index + n) % self.buffer.len()]
 8000166: 00 28                        	cmp	r0, #0
 8000168: 0c f0 93 81                  	beq.w	#49958 <$t.42+0x2d8>
 800016c: 02 31                        	adds	r1, #2
 800016e: 4f f0 00 0c                  	mov.w	r12, #0
 8000172: b1 fb f0 f2                  	udiv	r2, r1, r0
 8000176: 02 fb 10 10                  	mls	r0, r2, r0, r1
 800017a: d9 f8 8c 10                  	ldr.w	r1, [r9, #140]
 800017e: 08 5c                        	ldrb	r0, [r1, r0]
 8000180: 16 e0                        	b	#44 <_ZN13bluetooth_hci4host4uart10read_event17h9c6168d178c9a2dfE+0x78>
 8000182: 00 20                        	movs	r0, #0
 8000184: 4f f0 01 0c                  	mov.w	r12, #1
;             Err(e) => Err(op(e)),
 8000188: cd f8 28 04                  	str.w	r0, [sp, #1064]
 800018c: cd f8 18 04                  	str.w	r0, [sp, #1048]
 8000190: cd f8 1c 04                  	str.w	r0, [sp, #1052]
 8000194: cd f8 20 04                  	str.w	r0, [sp, #1056]
 8000198: cd f8 24 04                  	str.w	r0, [sp, #1060]
 800019c: cd f8 2b 04                  	str.w	r0, [sp, #1067]
 80001a0: 47 f8 48 0c                  	str	r0, [r7, #-72]
 80001a4: 27 f8 44 0c                  	strh	r0, [r7, #-68]
 80001a8: fc 90                        	str	r0, [sp, #1008]
 80001aa: ad f8 f4 03                  	strh.w	r0, [sp, #1012]
 80001ae: 01 20                        	movs	r0, #1
 80001b0: a9 90                        	str	r0, [sp, #676]
 80001b2: 0d f5 83 61                  	add.w	r1, sp, #1048
 80001b6: 0d f5 2a 7a                  	add.w	r10, sp, #680
;     let param_len = controller.peek(PARAM_LEN_BYTE).map_err(rewrap_error)? as usize;
 80001ba: bc f1 00 0f                  	cmp.w	r12, #0
;         self
 80001be: 79 c9                        	ldm	r1!, {r0, r3, r4, r5, r6}
 80001c0: 52 46                        	mov	r2, r10
 80001c2: 79 c2                        	stm	r2!, {r0, r3, r4, r5, r6}
 80001c4: 08 88                        	ldrh	r0, [r1]
 80001c6: 89 78                        	ldrb	r1, [r1, #2]
 80001c8: 57 f8 48 3c                  	ldr	r3, [r7, #-72]
 80001cc: 37 f8 44 6c                  	ldrh	r6, [r7, #-68]
 80001d0: fc 9d                        	ldr	r5, [sp, #1008]
 80001d2: bd f8 f4 43                  	ldrh.w	r4, [sp, #1012]
 80001d6: 10 80                        	strh	r0, [r2]
 80001d8: 91 70                        	strb	r1, [r2, #2]
 80001da: f8 93                        	str	r3, [sp, #992]
 80001dc: ad f8 e4 63                  	strh.w	r6, [sp, #996]
 80001e0: cd f8 00 54                  	str.w	r5, [sp, #1024]
 80001e4: ad f8 04 44                  	strh.w	r4, [sp, #1028]
;     let param_len = controller.peek(PARAM_LEN_BYTE).map_err(rewrap_error)? as usize;
 80001e8: 32 d0                        	beq	#100 <_ZN13bluetooth_hci4host4uart10read_event17h9c6168d178c9a2dfE+0x118>
 80001ea: 03 20                        	movs	r0, #3
 80001ec: aa a9                        	add	r1, sp, #680
;         Err(v)
 80001ee: 88 f8 08 00                  	strb.w	r0, [r8, #8]
 80001f2: 08 f1 09 00                  	add.w	r0, r8, #9
 80001f6: 17 22                        	movs	r2, #23
 80001f8: 1c f0 8f f8                  	bl	#114974
 80001fc: 00 22                        	movs	r2, #0
 80001fe: bd f8 04 04                  	ldrh.w	r0, [sp, #1028]
 8000202: dd f8 00 14                  	ldr.w	r1, [sp, #1024]
 8000206: 01 25                        	movs	r5, #1
 8000208: bd f8 e4 33                  	ldrh.w	r3, [sp, #996]
 800020c: f8 9e                        	ldr	r6, [sp, #992]
 800020e: c8 f8 24 20                  	str.w	r2, [r8, #36]
 8000212: c8 f8 20 20                  	str.w	r2, [r8, #32]
 8000216: c8 e9 00 52                  	strd	r5, r2, [r8]
 800021a: c8 f8 31 20                  	str.w	r2, [r8, #49]
 800021e: c8 f8 2d 20                  	str.w	r2, [r8, #45]
 8000222: c8 f8 29 20                  	str.w	r2, [r8, #41]
 8000226: 88 f8 28 20                  	strb.w	r2, [r8, #40]
 800022a: c8 f8 34 20                  	str.w	r2, [r8, #52]
 800022e: a8 f8 38 20                  	strh.w	r2, [r8, #56]
 8000232: a8 f8 40 20                  	strh.w	r2, [r8, #64]
 8000236: c8 f8 3a 60                  	str.w	r6, [r8, #58]
 800023a: a8 f8 3e 30                  	strh.w	r3, [r8, #62]
 800023e: c8 f8 42 10                  	str.w	r1, [r8, #66]
 8000242: a8 f8 46 00                  	strh.w	r0, [r8, #70]
; }
 8000246: 0d f2 44 6d                  	addw	sp, sp, #1604
 800024a: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 800024e: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 8000250: cd f8 a0 82                  	str.w	r8, [sp, #672]
 8000254: 0d f5 2a 78                  	add.w	r8, sp, #680
;     let mut buf = [0; MAX_EVENT_LENGTH + EVENT_PACKET_HEADER_LENGTH];
 8000258: 4f f4 81 71                  	mov.w	r1, #258
 800025c: 40 46                        	mov	r0, r8
 800025e: 1c f0 d1 f9                  	bl	#115618
;         .read_into(&mut buf[..EVENT_PACKET_HEADER_LENGTH + param_len])
 8000262: a9 98                        	ldr	r0, [sp, #676]
 8000264: 03 30                        	adds	r0, #3
;         if buffer.len() <= self.evt_buf.size() {
 8000266: 83 45                        	cmp	r11, r0
 8000268: 05 d2                        	bhs	#10 <_ZN13bluetooth_hci4host4uart10read_event17h9c6168d178c9a2dfE+0x13e>
 800026a: 0d f5 83 6e                  	add.w	lr, sp, #1048
 800026e: 00 20                        	movs	r0, #0
 8000270: 4f f0 03 0c                  	mov.w	r12, #3
 8000274: 29 e0                        	b	#82 <_ZN13bluetooth_hci4host4uart10read_event17h9c6168d178c9a2dfE+0x192>
 8000276: 0d f5 83 6e                  	add.w	lr, sp, #1048
 800027a: 00 21                        	movs	r1, #0
;                     if is_empty!(self) {
 800027c: 88 42                        	cmp	r0, r1
 800027e: 13 d0                        	beq	#38 <_ZN13bluetooth_hci4host4uart10read_event17h9c6168d178c9a2dfE+0x170>
;             *byte = self.buffer[(self.read_index + i) % self.buffer.len()];
 8000280: d9 f8 90 20                  	ldr.w	r2, [r9, #144]
 8000284: 00 2a                        	cmp	r2, #0
 8000286: 0c f0 04 81                  	beq.w	#49672 <$t.42+0x2d8>
 800028a: d9 f8 94 60                  	ldr.w	r6, [r9, #148]
 800028e: d9 f8 8c 30                  	ldr.w	r3, [r9, #140]
 8000292: 0e 44                        	add	r6, r1
 8000294: b6 fb f2 f5                  	udiv	r5, r6, r2
 8000298: 05 fb 12 62                  	mls	r2, r5, r2, r6
 800029c: 9a 5c                        	ldrb	r2, [r3, r2]
 800029e: 08 f8 01 20                  	strb.w	r2, [r8, r1]
;             fn add_assign(&mut self, other: $t) { *self += other }
 80002a2: 01 31                        	adds	r1, #1
;         if self.n != 0 {
 80002a4: 88 42                        	cmp	r0, r1
 80002a6: e9 d1                        	bne	#-46 <_ZN13bluetooth_hci4host4uart10read_event17h9c6168d178c9a2dfE+0x144>
;         self.read_index = (self.read_index + n) % self.buffer.len();
 80002a8: d9 f8 90 10                  	ldr.w	r1, [r9, #144]
 80002ac: 00 29                        	cmp	r1, #0
 80002ae: 0c f0 f0 80                  	beq.w	#49632 <$t.42+0x2d8>
 80002b2: d9 f8 94 20                  	ldr.w	r2, [r9, #148]
 80002b6: 4f f0 04 0c                  	mov.w	r12, #4
 80002ba: 10 44                        	add	r0, r2
 80002bc: b0 fb f1 f2                  	udiv	r2, r0, r1
 80002c0: 02 fb 11 00                  	mls	r0, r2, r1, r0
 80002c4: c9 f8 94 00                  	str.w	r0, [r9, #148]
 80002c8: 00 20                        	movs	r0, #0
 80002ca: cd f8 28 04                  	str.w	r0, [sp, #1064]
 80002ce: cd f8 18 04                  	str.w	r0, [sp, #1048]
 80002d2: cd f8 1c 04                  	str.w	r0, [sp, #1052]
 80002d6: cd f8 20 04                  	str.w	r0, [sp, #1056]
 80002da: cd f8 24 04                  	str.w	r0, [sp, #1060]
 80002de: cd f8 2b 04                  	str.w	r0, [sp, #1067]
 80002e2: fc 90                        	str	r0, [sp, #1008]
 80002e4: ad f8 f4 03                  	strh.w	r0, [sp, #1012]
 80002e8: f8 90                        	str	r0, [sp, #992]
 80002ea: ad f8 e4 03                  	strh.w	r0, [sp, #996]
;         self
 80002ee: 71 46                        	mov	r1, lr
 80002f0: a7 f1 48 0b                  	sub.w	r11, r7, #72
 80002f4: 79 c9                        	ldm	r1!, {r0, r3, r4, r5, r6}
;         .map_err(rewrap_error)?;
 80002f6: bc f1 04 0f                  	cmp.w	r12, #4
;         self
 80002fa: 5a 46                        	mov	r2, r11
 80002fc: 79 c2                        	stm	r2!, {r0, r3, r4, r5, r6}
 80002fe: 08 88                        	ldrh	r0, [r1]
 8000300: 89 78                        	ldrb	r1, [r1, #2]
 8000302: fc 9b                        	ldr	r3, [sp, #1008]
 8000304: bd f8 f4 63                  	ldrh.w	r6, [sp, #1012]
 8000308: f8 9d                        	ldr	r5, [sp, #992]
 800030a: bd f8 e4 43                  	ldrh.w	r4, [sp, #996]
 800030e: 10 80                        	strh	r0, [r2]
 8000310: 91 70                        	strb	r1, [r2, #2]
 8000312: cd f8 00 34                  	str.w	r3, [sp, #1024]
 8000316: ad f8 04 64                  	strh.w	r6, [sp, #1028]
 800031a: cd f8 0c 54                  	str.w	r5, [sp, #1036]
 800031e: ad f8 10 44                  	strh.w	r4, [sp, #1040]
;         .map_err(rewrap_error)?;
 8000322: 40 f0 7a 80                  	bne.w	#244 <$t.2+0x5c>
;         PACKET_HEADER_LENGTH + self.0[PARAM_LEN_BYTE] as usize
 8000326: 9d f8 aa 02                  	ldrb.w	r0, [sp, #682]
 800032a: a9 9c                        	ldr	r4, [sp, #676]
;         if $left.len() != $right {
 800032c: a0 42                        	cmp	r0, r4
 800032e: 40 f0 a4 80                  	bne.w	#328 <$t.2+0xbc>
;         let event_type = packet.0[EVENT_TYPE_BYTE];
 8000332: 9d f8 a9 02                  	ldrb.w	r0, [sp, #681]
;             0x03 => Ok(Event::ConnectionComplete(to_connection_complete(payload)?)),
 8000336: c1 1e                        	subs	r1, r0, #3
 8000338: 3b 29                        	cmp	r1, #59
 800033a: 00 f2 28 81                  	bhi.w	#592 <$t.2+0x1d0>
 800033e: 0a f1 06 06                  	add.w	r6, r10, #6
 8000342: 0e f1 30 0b                  	add.w	r11, lr, #48
 8000346: df e8 11 f0                  	tbh	[pc, r1, lsl #1]

0800034a $d.1:
 800034a:	3c 00 98 01	.word	0x0198003c
 800034e:	42 04 98 01	.word	0x01980442
 8000352:	98 01 3b 02	.word	0x023b0198
 8000356:	98 01 98 01	.word	0x01980198
 800035a:	98 01 00 02	.word	0x02000198
 800035e:	98 01 00 04	.word	0x04000198
 8000362:	ce 01 a0 01	.word	0x01a001ce
 8000366:	98 01 98 01	.word	0x01980198
 800036a:	57 02 98 01	.word	0x01980257
 800036e:	98 01 98 01	.word	0x01980198
 8000372:	98 01 98 01	.word	0x01980198
 8000376:	98 01 ae 04	.word	0x04ae0198
 800037a:	98 01 98 01	.word	0x01980198
 800037e:	98 01 98 01	.word	0x01980198
 8000382:	98 01 98 01	.word	0x01980198
 8000386:	98 01 98 01	.word	0x01980198
 800038a:	98 01 98 01	.word	0x01980198
 800038e:	98 01 98 01	.word	0x01980198
 8000392:	98 01 98 01	.word	0x01980198
 8000396:	98 01 98 01	.word	0x01980198
 800039a:	98 01 98 01	.word	0x01980198
 800039e:	98 01 98 01	.word	0x01980198
 80003a2:	98 01 82 04	.word	0x04820198
 80003a6:	98 01 98 01	.word	0x01980198
 80003aa:	98 01 98 01	.word	0x01980198
 80003ae:	98 01 98 01	.word	0x01980198
 80003b2:	98 01 98 01	.word	0x01980198
 80003b6:	98 01 98 01	.word	0x01980198
 80003ba:	98 01 98 01	.word	0x01980198
 80003be:	98 01 0c 04	.word	0x040c0198

080003c2 $t.2:
;         if $left.len() != $right {
 80003c2: 0b 2c                        	cmp	r4, #11
 80003c4: 40 f0 fd 84                  	bne.w	#2554 <$t.4+0x244>
;         status: payload[0].try_into().map_err(rewrap_bad_status)?,
 80003c8: 9d f8 ab 02                  	ldrb.w	r0, [sp, #683]
;     copy_nonoverlapping(src, dst, count)
 80003cc: 9d f8 b0 82                  	ldrb.w	r8, [sp, #688]
 80003d0: 9d f8 b1 b2                  	ldrb.w	r11, [sp, #689]
 80003d4: 9d f8 b2 42                  	ldrb.w	r4, [sp, #690]
 80003d8: 9d f8 b3 52                  	ldrb.w	r5, [sp, #691]
 80003dc: bd f8 ae 62                  	ldrh.w	r6, [sp, #686]
;         status: payload[0].try_into().map_err(rewrap_bad_status)?,
 80003e0: 12 f0 3e f8                  	bl	#73852
 80003e4: c0 07                        	lsls	r0, r0, #31
 80003e6: 40 f0 e2 86                  	bne.w	#3524 <$t.8+0x2be>
;         link_type: payload[9]
 80003ea: 9d f8 b4 22                  	ldrb.w	r2, [sp, #692]
 80003ee: 0d f5 83 6e                  	add.w	lr, sp, #1048
;     copy_nonoverlapping(src, dst, count)
 80003f2: bd f8 ac c2                  	ldrh.w	r12, [sp, #684]
 80003f6: 00 23                        	movs	r3, #0
;             0 => Ok(LinkType::Sco),
 80003f8: 1a b1                        	cbz	r2, #6
 80003fa: 01 2a                        	cmp	r2, #1
 80003fc: 41 f0 7c 81                  	bne.w	#4856 <$t.12+0x176>
 8000400: 01 23                        	movs	r3, #1
;         encryption_enabled: try_into_encryption_enabled(payload[10])
 8000402: 9d f8 b5 22                  	ldrb.w	r2, [sp, #693]
;         0 => Ok(false),
 8000406: 00 2a                        	cmp	r2, #0
 8000408: 01 f0 88 83                  	beq.w	#5904 <$t.14+0xb6>
 800040c: 01 2a                        	cmp	r2, #1
 800040e: 41 f0 b7 83                  	bne.w	#5998 <$t.14+0x11a>
 8000412: 4f f0 01 0e                  	mov.w	lr, #1
 8000416: 01 f0 83 bb                  	b.w	#5894 <$t.14+0xba>
 800041a: a8 9c                        	ldr	r4, [sp, #672]
 800041c: a7 f1 48 01                  	sub.w	r1, r7, #72
;         Err(v)
 8000420: 17 22                        	movs	r2, #23
 8000422: 04 f1 09 00                  	add.w	r0, r4, #9
 8000426: 84 f8 08 c0                  	strb.w	r12, [r4, #8]
 800042a: 1b f0 76 ff                  	bl	#114412
 800042e: 00 22                        	movs	r2, #0
 8000430: bd f8 10 04                  	ldrh.w	r0, [sp, #1040]
 8000434: dd f8 0c 14                  	ldr.w	r1, [sp, #1036]
 8000438: 01 25                        	movs	r5, #1
 800043a: bd f8 04 34                  	ldrh.w	r3, [sp, #1028]
 800043e: dd f8 00 64                  	ldr.w	r6, [sp, #1024]
 8000442: 62 62                        	str	r2, [r4, #36]
 8000444: 22 62                        	str	r2, [r4, #32]
 8000446: c4 e9 00 52                  	strd	r5, r2, [r4]
 800044a: c4 f8 31 20                  	str.w	r2, [r4, #49]
 800044e: c4 f8 2d 20                  	str.w	r2, [r4, #45]
 8000452: c4 f8 29 20                  	str.w	r2, [r4, #41]
 8000456: 84 f8 28 20                  	strb.w	r2, [r4, #40]
 800045a: 62 63                        	str	r2, [r4, #52]
 800045c: 22 87                        	strh	r2, [r4, #56]
 800045e: a4 f8 40 20                  	strh.w	r2, [r4, #64]
 8000462: c4 f8 3a 60                  	str.w	r6, [r4, #58]
 8000466: e3 87                        	strh	r3, [r4, #62]
 8000468: c4 f8 42 10                  	str.w	r1, [r4, #66]
 800046c: a4 f8 46 00                  	strh.w	r0, [r4, #70]
; }
 8000470: 0d f2 44 6d                  	addw	sp, sp, #1604
 8000474: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 8000478: f0 bd                        	pop	{r4, r5, r6, r7, pc}
;         PACKET_HEADER_LENGTH + self.0[PARAM_LEN_BYTE] as usize
 800047a: 02 30                        	adds	r0, #2
;             return Err($crate::event::Error::BadLength($left.len(), $right));
 800047c: 47 f8 40 0c                  	str	r0, [r7, #-64]
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8000480: a0 1c                        	adds	r0, r4, #2
;             return Err($crate::event::Error::BadLength($left.len(), $right));
 8000482: 47 f8 44 0c                  	str	r0, [r7, #-68]
 8000486: 01 20                        	movs	r0, #1
 8000488: 07 f8 48 0c                  	strb	r0, [r7, #-72]
 800048c: 00 20                        	movs	r0, #0
 800048e: a9 90                        	str	r0, [sp, #676]
 8000490: 00 20                        	movs	r0, #0
 8000492: a6 90                        	str	r0, [sp, #664]
 8000494: 00 20                        	movs	r0, #0
 8000496: a5 90                        	str	r0, [sp, #660]
 8000498: 00 20                        	movs	r0, #0
 800049a: a7 90                        	str	r0, [sp, #668]
;     .map_err(|e| nb::Error::Other(Error::BLE(e)))
 800049c: a7 f1 48 03                  	sub.w	r3, r7, #72
 80004a0: 4f f0 01 09                  	mov.w	r9, #1
 80004a4: 0f cb                        	ldm	r3, {r0, r1, r2, r3}
 80004a6: cd f8 27 05                  	str.w	r0, [sp, #1319]
 80004aa: 0d f5 a4 60                  	add.w	r0, sp, #1312
 80004ae: cd f8 2b 15                  	str.w	r1, [sp, #1323]
 80004b2: 71 46                        	mov	r1, lr
 80004b4: cd f8 33 35                  	str.w	r3, [sp, #1331]
 80004b8: cd f8 2f 25                  	str.w	r2, [sp, #1327]
 80004bc: 7c c8                        	ldm	r0!, {r2, r3, r4, r5, r6}
 80004be: 7c c1                        	stm	r1!, {r2, r3, r4, r5, r6}
 80004c0: a8 9d                        	ldr	r5, [sp, #672]
 80004c2: 02 88                        	ldrh	r2, [r0]
 80004c4: 80 78                        	ldrb	r0, [r0, #2]
 80004c6: 88 70                        	strb	r0, [r1, #2]
;             Err(e) => Err(op(e)),
 80004c8: 05 f1 09 00                  	add.w	r0, r5, #9
;     .map_err(|e| nb::Error::Other(Error::BLE(e)))
 80004cc: 0a 80                        	strh	r2, [r1]
;             Err(e) => Err(op(e)),
 80004ce: 71 46                        	mov	r1, lr
 80004d0: 17 22                        	movs	r2, #23
 80004d2: 85 f8 08 90                  	strb.w	r9, [r5, #8]
 80004d6: 1b f0 20 ff                  	bl	#114240
 80004da: 9f 98                        	ldr	r0, [sp, #636]
 80004dc: 85 f8 2f 00                  	strb.w	r0, [r5, #47]
;     .map_err(|e| nb::Error::Other(Error::BLE(e)))
 80004e0: a0 98                        	ldr	r0, [sp, #640]
 80004e2: 9e 99                        	ldr	r1, [sp, #632]
 80004e4: 97 9b                        	ldr	r3, [sp, #604]
 80004e6: c0 b2                        	uxtb	r0, r0
 80004e8: 9a 9c                        	ldr	r4, [sp, #616]
 80004ea: 40 ea 01 20                  	orr.w	r0, r0, r1, lsl #8
;             Err(e) => Err(op(e)),
 80004ee: a5 f8 2d 00                  	strh.w	r0, [r5, #45]
 80004f2: a4 98                        	ldr	r0, [sp, #656]
;     .map_err(|e| nb::Error::Other(Error::BLE(e)))
 80004f4: db b2                        	uxtb	r3, r3
;             Err(e) => Err(op(e)),
 80004f6: 68 62                        	str	r0, [r5, #36]
;     .map_err(|e| nb::Error::Other(Error::BLE(e)))
 80004f8: 43 ea 04 23                  	orr.w	r3, r3, r4, lsl #8
;             Err(e) => Err(op(e)),
 80004fc: 96 98                        	ldr	r0, [sp, #600]
 80004fe: 28 62                        	str	r0, [r5, #32]
;     .map_err(|e| nb::Error::Other(Error::BLE(e)))
 8000500: 9b 98                        	ldr	r0, [sp, #620]
 8000502: a1 99                        	ldr	r1, [sp, #644]
;             Err(e) => Err(op(e)),
 8000504: bd f8 b0 23                  	ldrh.w	r2, [sp, #944]
;     .map_err(|e| nb::Error::Other(Error::BLE(e)))
 8000508: c0 b2                        	uxtb	r0, r0
;             Err(e) => Err(op(e)),
 800050a: ed 9e                        	ldr	r6, [sp, #948]
;     .map_err(|e| nb::Error::Other(Error::BLE(e)))
 800050c: 40 ea 01 20                  	orr.w	r0, r0, r1, lsl #8
;             Err(e) => Err(op(e)),
 8000510: 28 87                        	strh	r0, [r5, #56]
 8000512: 98 98                        	ldr	r0, [sp, #608]
 8000514: 85 f8 37 00                  	strb.w	r0, [r5, #55]
 8000518: 99 98                        	ldr	r0, [sp, #612]
 800051a: 85 f8 36 00                  	strb.w	r0, [r5, #54]
;     .map_err(|e| nb::Error::Other(Error::BLE(e)))
 800051e: a6 98                        	ldr	r0, [sp, #664]
 8000520: a9 99                        	ldr	r1, [sp, #676]
 8000522: 00 f4 7f 00                  	and	r0, r0, #16711680
;             Err(e) => Err(op(e)),
 8000526: 85 f8 31 80                  	strb.w	r8, [r5, #49]
 800052a: 85 f8 30 b0                  	strb.w	r11, [r5, #48]
;     .map_err(|e| nb::Error::Other(Error::BLE(e)))
 800052e: 40 ea 01 60                  	orr.w	r0, r0, r1, lsl #24
 8000532: a5 99                        	ldr	r1, [sp, #660]
;             Err(e) => Err(op(e)),
 8000534: 85 f8 28 a0                  	strb.w	r10, [r5, #40]
;     .map_err(|e| nb::Error::Other(Error::BLE(e)))
 8000538: 01 f4 7f 41                  	and	r1, r1, #65280
;             Err(e) => Err(op(e)),
 800053c: a5 f8 40 30                  	strh.w	r3, [r5, #64]
;     .map_err(|e| nb::Error::Other(Error::BLE(e)))
 8000540: 08 44                        	add	r0, r1
 8000542: a7 99                        	ldr	r1, [sp, #668]
;             Err(e) => Err(op(e)),
 8000544: c5 f8 3a 60                  	str.w	r6, [r5, #58]
 8000548: a5 f8 46 20                  	strh.w	r2, [r5, #70]
;     .map_err(|e| nb::Error::Other(Error::BLE(e)))
 800054c: c9 b2                        	uxtb	r1, r1
 800054e: 08 44                        	add	r0, r1
;             Err(e) => Err(op(e)),
 8000550: c5 f8 32 00                  	str.w	r0, [r5, #50]
;     .map_err(|e| nb::Error::Other(Error::BLE(e)))
 8000554: a2 98                        	ldr	r0, [sp, #648]
 8000556: a3 99                        	ldr	r1, [sp, #652]
 8000558: c0 b2                        	uxtb	r0, r0
 800055a: 00 04                        	lsls	r0, r0, #16
 800055c: 40 ea 01 60                  	orr.w	r0, r0, r1, lsl #24
 8000560: 9d 99                        	ldr	r1, [sp, #628]
 8000562: c9 b2                        	uxtb	r1, r1
 8000564: 40 ea 01 20                  	orr.w	r0, r0, r1, lsl #8
 8000568: 9c 99                        	ldr	r1, [sp, #624]
 800056a: c9 b2                        	uxtb	r1, r1
 800056c: 08 44                        	add	r0, r1
;             Err(e) => Err(op(e)),
 800056e: c5 f8 29 00                  	str.w	r0, [r5, #41]
 8000572: eb 98                        	ldr	r0, [sp, #940]
 8000574: bd f8 b8 13                  	ldrh.w	r1, [sp, #952]
 8000578: e9 87                        	strh	r1, [r5, #62]
 800057a: c5 f8 42 00                  	str.w	r0, [r5, #66]
 800057e: 00 20                        	movs	r0, #0
 8000580: c5 e9 00 90                  	strd	r9, r0, [r5]
; }
 8000584: 0d f2 44 6d                  	addw	sp, sp, #1604
 8000588: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 800058c: f0 bd                        	pop	{r4, r5, r6, r7, pc}
;             0x03 => Ok(Event::ConnectionComplete(to_connection_complete(payload)?)),
 800058e: ff 28                        	cmp	r0, #255
 8000590: 73 d1                        	bne	#230 <$t.2+0x2bc>
;         require_len_at_least!(buffer, 2);
 8000592: 02 2c                        	cmp	r4, #2
 8000594: 80 f0 7c 84                  	bhs.w	#2296 <$t.6+0x6e>
 8000598: 02 20                        	movs	r0, #2
 800059a: cd e9 fd 40                  	strd	r4, r0, [sp, #1012]
 800059e: 01 20                        	movs	r0, #1
 80005a0: 8d f8 f0 03                  	strb.w	r0, [sp, #1008]
 80005a4: 00 20                        	movs	r0, #0
 80005a6: 99 90                        	str	r0, [sp, #612]
 80005a8: 00 20                        	movs	r0, #0
 80005aa: 98 90                        	str	r0, [sp, #608]
 80005ac: 01 20                        	movs	r0, #1
 80005ae: 95 91                        	str	r1, [sp, #596]
;             0xFF => Ok(Event::Vendor(V::new(payload)?)),
 80005b0: 00 28                        	cmp	r0, #0
;         self
 80005b2: fe 99                        	ldr	r1, [sp, #1016]
 80005b4: a6 91                        	str	r1, [sp, #664]
 80005b6: ff 99                        	ldr	r1, [sp, #1020]
 80005b8: 96 91                        	str	r1, [sp, #600]
 80005ba: c5 ea 09 41                  	pkhbt	r1, r5, r9, lsl #16
 80005be: a4 91                        	str	r1, [sp, #656]
 80005c0: a3 99                        	ldr	r1, [sp, #652]
 80005c2: 9c 94                        	str	r4, [sp, #624]
 80005c4: 8d f8 cc 43                  	strb.w	r4, [sp, #972]
 80005c8: 4f ea 01 44                  	lsl.w	r4, r1, #16
 80005cc: 92 99                        	ldr	r1, [sp, #584]
 80005ce: ad f8 cd 83                  	strh.w	r8, [sp, #973]
 80005d2: a8 46                        	mov	r8, r5
 80005d4: 5f fa 8a f5                  	uxtb.w	r5, r10
 80005d8: dd e9 fc 62                  	ldrd	r6, r2, [sp, #1008]
 80005dc: 44 ea 05 25                  	orr.w	r5, r4, r5, lsl #8
 80005e0: cc b2                        	uxtb	r4, r1
 80005e2: 25 44                        	add	r5, r4
 80005e4: 4f ea 1c 64                  	lsr.w	r4, r12, #24
 80005e8: cd f8 cf e3                  	str.w	lr, [sp, #975]
;             0xFF => Ok(Event::Vendor(V::new(payload)?)),
 80005ec: 00 f0 89 84                  	beq.w	#2322 <$t.8+0x12>
;         Err(v)
 80005f0: a6 98                        	ldr	r0, [sp, #664]
 80005f2: 47 f8 40 0c                  	str	r0, [r7, #-64]
 80005f6: a0 98                        	ldr	r0, [sp, #640]
 80005f8: cd f8 b6 03                  	str.w	r0, [sp, #950]
 80005fc: a2 98                        	ldr	r0, [sp, #648]
 80005fe: ad f8 b4 03                  	strh.w	r0, [sp, #948]
 8000602: 91 98                        	ldr	r0, [sp, #580]
 8000604: cd f8 ae 03                  	str.w	r0, [sp, #942]
 8000608: 96 98                        	ldr	r0, [sp, #600]
 800060a: a7 99                        	ldr	r1, [sp, #668]
 800060c: 47 f8 3c 0c                  	str	r0, [r7, #-60]
;         self
 8000610: 4f ea 1c 40                  	lsr.w	r0, r12, #16
;         Err(v)
 8000614: 8d f8 ac 03                  	strb.w	r0, [sp, #940]
 8000618: 4f f6 ff 70                  	movw	r0, #65535
;     .map_err(|e| nb::Error::Other(Error::BLE(e)))
 800061c: 21 ea 00 00                  	bic.w	r0, r1, r0
;         Err(v)
 8000620: a6 90                        	str	r0, [sp, #664]
 8000622: 08 0e                        	lsrs	r0, r1, #24
 8000624: dd f8 9c a0                  	ldr.w	r10, [sp, #156]
;     .map_err(|e| nb::Error::Other(Error::BLE(e)))
 8000628: a9 90                        	str	r0, [sp, #676]
 800062a: 21 f0 ff 00                  	bic	r0, r1, #255
;         Err(v)
 800062e: a5 90                        	str	r0, [sp, #660]
 8000630: 4f ea 1e 60                  	lsr.w	r0, lr, #24
 8000634: 9f 90                        	str	r0, [sp, #636]
 8000636: 4f ea 1e 40                  	lsr.w	r0, lr, #16
;             0xFF => Ok(Event::Vendor(V::new(payload)?)),
 800063a: 9e 90                        	str	r0, [sp, #632]
 800063c: 4f ea 1e 20                  	lsr.w	r0, lr, #8
;         self
 8000640: a0 90                        	str	r0, [sp, #640]
 8000642: 1f fa 8c f0                  	uxth.w	r0, r12
;         Err(v)
 8000646: 00 0a                        	lsrs	r0, r0, #8
 8000648: dd f8 8c b0                  	ldr.w	r11, [sp, #140]
 800064c: 9a 90                        	str	r0, [sp, #616]
 800064e: 0d f5 83 6e                  	add.w	lr, sp, #1048
 8000652: f3 98                        	ldr	r0, [sp, #972]
 8000654: a7 91                        	str	r1, [sp, #668]
 8000656: 9c 90                        	str	r0, [sp, #624]
 8000658: 01 0e                        	lsrs	r1, r0, #24
 800065a: 47 f8 48 6c                  	str	r6, [r7, #-72]
 800065e: a3 91                        	str	r1, [sp, #652]
 8000660: 01 0c                        	lsrs	r1, r0, #16
 8000662: 00 0a                        	lsrs	r0, r0, #8
 8000664: 8d f8 ad 43                  	strb.w	r4, [sp, #941]
 8000668: 47 f8 44 2c                  	str	r2, [r7, #-68]
 800066c: a2 91                        	str	r1, [sp, #648]
 800066e: 9d 90                        	str	r0, [sp, #628]
 8000670: 96 95                        	str	r5, [sp, #600]
 8000672: cd f8 5c c2                  	str.w	r12, [sp, #604]
 8000676: 05 f0 2e b9                  	b.w	#21084 <$t.24+0x1754>
;             _ => Err(Error::UnknownEvent(event_type)),
 800067a: 07 f8 47 0c                  	strb	r0, [r7, #-71]
 800067e: 00 21                        	movs	r1, #0
 8000680: 00 20                        	movs	r0, #0
 8000682: a9 90                        	str	r0, [sp, #676]
 8000684: 07 f8 48 1c                  	strb	r1, [r7, #-72]
 8000688: 02 e7                        	b	#-508 <$t.2+0xd2>
;         self
 800068a: bd f8 f4 43                  	ldrh.w	r4, [sp, #1012]
 800068e: ad f8 04 44                  	strh.w	r4, [sp, #1028]
 8000692: a9 9c                        	ldr	r4, [sp, #676]
;     Ok(HardwareError { code: payload[0] })
 8000694: 9d f8 ab 02                  	ldrb.w	r0, [sp, #683]
;         self
 8000698: 9d f8 0e 14                  	ldrb.w	r1, [sp, #1038]
;             0x10 => Ok(Event::HardwareError(to_hardware_error(payload)?)),
 800069c: 01 2c                        	cmp	r4, #1
;         self
 800069e: bd f8 0c 24                  	ldrh.w	r2, [sp, #1036]
 80006a2: 37 f8 44 3c                  	ldrh	r3, [r7, #-68]
 80006a6: 57 f8 48 6c                  	ldr	r6, [r7, #-72]
 80006aa: fc 9d                        	ldr	r5, [sp, #1008]
 80006ac: ad f8 bc 23                  	strh.w	r2, [sp, #956]
 80006b0: 8d f8 be 13                  	strb.w	r1, [sp, #958]
 80006b4: f8 96                        	str	r6, [sp, #992]
 80006b6: ad f8 e4 33                  	strh.w	r3, [sp, #996]
 80006ba: cd f8 00 54                  	str.w	r5, [sp, #1024]
;             0x10 => Ok(Event::HardwareError(to_hardware_error(payload)?)),
 80006be: 40 f0 46 83                  	bne.w	#1676 <$t.4+0x1d0>
 80006c2: 0d f5 83 63                  	add.w	r3, sp, #1048
 80006c6: 07 f8 47 0c                  	strb	r0, [r7, #-71]
 80006ca: 06 20                        	movs	r0, #6
 80006cc: f3 9e                        	ldr	r6, [sp, #972]
 80006ce: 07 f8 48 0c                  	strb	r0, [r7, #-72]
 80006d2: bd f8 d0 53                  	ldrh.w	r5, [sp, #976]
 80006d6: dd f8 c4 c3                  	ldr.w	r12, [sp, #964]
 80006da: bd f8 24 44                  	ldrh.w	r4, [sp, #1060]
 80006de: bd f8 c8 03                  	ldrh.w	r0, [sp, #968]
 80006e2: 0e cb                        	ldm	r3, {r1, r2, r3}
 80006e4: fb e2                        	b	#1526 <$t.4+0x160>
;         if $left.len() != $right {
 80006e6: 04 2c                        	cmp	r4, #4
 80006e8: 40 f0 64 83                  	bne.w	#1736 <$t.4+0x236>
;         status: buffer[0].try_into().map_err(rewrap_bad_status)?,
 80006ec: 9d f8 ab 02                  	ldrb.w	r0, [sp, #683]
 80006f0: 11 f0 b6 fe                  	bl	#73068
 80006f4: c0 07                        	lsls	r0, r0, #31
 80006f6: 40 f0 45 85                  	bne.w	#2698 <$t.8+0x294>
; }
 80006fa: 9d f8 ac c2                  	ldrb.w	r12, [sp, #684]
 80006fe: 05 23                        	movs	r3, #5
;             0x0F => Ok(Event::CommandStatus(to_command_status(payload)?)),
 8000700: dd f8 18 04                  	ldr.w	r0, [sp, #1048]
; }
 8000704: c9 b2                        	uxtb	r1, r1
;             0x0F => Ok(Event::CommandStatus(to_command_status(payload)?)),
 8000706: dd f8 1c 24                  	ldr.w	r2, [sp, #1052]
 800070a: 47 f8 42 0c                  	str	r0, [r7, #-66]
;     copy_nonoverlapping(src, dst, count)
 800070e: bd f8 ad 02                  	ldrh.w	r0, [sp, #685]
;             0x0F => Ok(Event::CommandStatus(to_command_status(payload)?)),
 8000712: bd f8 f4 e3                  	ldrh.w	lr, [sp, #1012]
 8000716: f8 9e                        	ldr	r6, [sp, #992]
 8000718: fc 9c                        	ldr	r4, [sp, #1008]
 800071a: bd f8 20 54                  	ldrh.w	r5, [sp, #1056]
 800071e: 07 f8 48 3c                  	strb	r3, [r7, #-72]
 8000722: bd f8 e4 33                  	ldrh.w	r3, [sp, #996]
 8000726: 47 f8 3e 2c                  	str	r2, [r7, #-62]
; }
 800072a: 4f ea 0c 62                  	lsl.w	r2, r12, #24
;         self
 800072e: 42 ea 01 41                  	orr.w	r1, r2, r1, lsl #16
;             0x0F => Ok(Event::CommandStatus(to_command_status(payload)?)),
 8000732: 27 f8 3a 5c                  	strh	r5, [r7, #-58]
;         self
 8000736: 08 44                        	add	r0, r1
;             0x0F => Ok(Event::CommandStatus(to_command_status(payload)?)),
 8000738: ed 94                        	str	r4, [sp, #948]
 800073a: ad f8 b8 e3                  	strh.w	lr, [sp, #952]
 800073e: eb 96                        	str	r6, [sp, #940]
 8000740: ad f8 b0 33                  	strh.w	r3, [sp, #944]
 8000744: 47 f8 46 0c                  	str	r0, [r7, #-70]
 8000748: d8 e2                        	b	#1456 <$t.4+0x17e>
;         if $left.len() != $right {
 800074a: 08 2c                        	cmp	r4, #8
 800074c: 40 f0 34 83                  	bne.w	#1640 <$t.4+0x23a>
;         status: payload[0].try_into().map_err(rewrap_bad_status)?,
 8000750: 9d f8 ab 02                  	ldrb.w	r0, [sp, #683]
 8000754: 11 f0 84 fe                  	bl	#72968
 8000758: c0 07                        	lsls	r0, r0, #31
 800075a: 40 f0 18 85                  	bne.w	#2608 <$t.8+0x29e>
;     copy_nonoverlapping(src, dst, count)
 800075e: bd f8 af c2                  	ldrh.w	r12, [sp, #687]
 8000762: 03 20                        	movs	r0, #3
 8000764: bd f8 ac 52                  	ldrh.w	r5, [sp, #684]
;             0x0C => Ok(Event::ReadRemoteVersionInformationComplete(
 8000768: dd f8 20 35                  	ldr.w	r3, [sp, #1312]
 800076c: 07 f8 48 0c                  	strb	r0, [r7, #-72]
 8000770: bd f8 e4 03                  	ldrh.w	r0, [sp, #996]
 8000774: 47 f8 3e 3c                  	str	r3, [r7, #-62]
 8000778: ad f8 b0 03                  	strh.w	r0, [sp, #944]
;         self
 800077c: 45 ea 0c 40                  	orr.w	r0, r5, r12, lsl #16
 8000780: 9d f8 ae 32                  	ldrb.w	r3, [sp, #686]
;             0x0C => Ok(Event::ReadRemoteVersionInformationComplete(
 8000784: bd f8 24 45                  	ldrh.w	r4, [sp, #1316]
 8000788: 47 f8 46 0c                  	str	r0, [r7, #-70]
; }
 800078c: c8 b2                        	uxtb	r0, r1
 800078e: 00 04                        	lsls	r0, r0, #16
;             0x0C => Ok(Event::ReadRemoteVersionInformationComplete(
 8000790: 27 f8 3a 4c                  	strh	r4, [r7, #-58]
;     copy_nonoverlapping(src, dst, count)
 8000794: bd f8 b1 42                  	ldrh.w	r4, [sp, #689]
;         self
 8000798: 40 ea 03 60                  	orr.w	r0, r0, r3, lsl #24
;             0x0C => Ok(Event::ReadRemoteVersionInformationComplete(
 800079c: dd f8 f0 e3                  	ldr.w	lr, [sp, #1008]
 80007a0: bd f8 f4 23                  	ldrh.w	r2, [sp, #1012]
;         self
 80007a4: 20 44                        	add	r0, r4
;             0x0C => Ok(Event::ReadRemoteVersionInformationComplete(
 80007a6: f8 9e                        	ldr	r6, [sp, #992]
 80007a8: 47 f8 42 0c                  	str	r0, [r7, #-66]
 80007ac: cd f8 b4 e3                  	str.w	lr, [sp, #948]
 80007b0: ad f8 b8 23                  	strh.w	r2, [sp, #952]
 80007b4: eb 96                        	str	r6, [sp, #940]
 80007b6: dd f8 18 04                  	ldr.w	r0, [sp, #1048]
 80007ba: dd f8 1b 14                  	ldr.w	r1, [sp, #1051]
 80007be: a1 e2                        	b	#1346 <$t.4+0x186>
;         if $left.len() != $right {
 80007c0: 04 2c                        	cmp	r4, #4
 80007c2: 40 f0 fb 82                  	bne.w	#1526 <$t.4+0x23e>
;         status: payload[0].try_into().map_err(rewrap_bad_status)?,
 80007c6: 9d f8 ab 02                  	ldrb.w	r0, [sp, #683]
 80007ca: 11 f0 49 fe                  	bl	#72850
 80007ce: c0 07                        	lsls	r0, r0, #31
 80007d0: 40 f0 e9 84                  	bne.w	#2514 <$t.8+0x2b6>
;         encryption: payload[3]
 80007d4: 9d f8 ae 32                  	ldrb.w	r3, [sp, #686]
 80007d8: 00 20                        	movs	r0, #0
;     copy_nonoverlapping(src, dst, count)
 80007da: bd f8 ac c2                  	ldrh.w	r12, [sp, #684]
;             0x00 => Ok(Encryption::Off),
 80007de: 00 2b                        	cmp	r3, #0
 80007e0: 01 f0 6b 81                  	beq.w	#4822 <$t.14+0x54>
 80007e4: 02 2b                        	cmp	r3, #2
 80007e6: 01 f0 66 81                  	beq.w	#4812 <$t.14+0x50>
 80007ea: 01 2b                        	cmp	r3, #1
 80007ec: 41 f0 92 81                  	bne.w	#4900 <$t.14+0xae>
 80007f0: 4f f0 80 70                  	mov.w	r0, #16777216
 80007f4: 01 f0 61 b9                  	b.w	#4802 <$t.14+0x54>
;         if $left.len() < $right {
 80007f8: 00 2c                        	cmp	r4, #0
 80007fa: 00 f0 2c 83                  	beq.w	#1624 <$t.6+0x34>
;     let num_pairs = payload[0] as usize;
 80007fe: 9d f8 ab a2                  	ldrb.w	r10, [sp, #683]
;     require_len!(payload, 1 + num_pairs * NUM_COMPLETED_PACKETS_PAIR_LEN);
 8000802: 4f ea 8a 06                  	lsl.w	r6, r10, #2
 8000806: 70 1c                        	adds	r0, r6, #1
;         if $left.len() != $right {
 8000808: a0 42                        	cmp	r0, r4
 800080a: 40 f0 e1 83                  	bne.w	#1986 <$t.8+0xe0>
 800080e: 0d f5 83 60                  	add.w	r0, sp, #1048
;     let mut data_buf = [0; NUMBER_OF_COMPLETED_PACKETS_MAX_LEN];
 8000812: fe 21                        	movs	r1, #254
 8000814: 1b f0 f6 fe                  	bl	#114156
;         } else if self.end > slice.len() {
 8000818: ba f1 40 0f                  	cmp.w	r10, #64
 800081c: 8b f0 4f 86                  	bhs.w	#48286 <$t.42+0x304>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8000820: 62 1e                        	subs	r2, r4, #1
;                 if !(*left_val == *right_val) {
 8000822: 96 42                        	cmp	r6, r2
 8000824: 4b f0 48 86                  	bne.w	#48272 <$t.42+0x2fe>
;         intrinsics::offset(self, count)
 8000828: 08 f1 04 01                  	add.w	r1, r8, #4
 800082c: 0d f5 83 60                  	add.w	r0, sp, #1048
;     copy_nonoverlapping(src, dst, count)
 8000830: 1b f0 b0 fd                  	bl	#113504
;     Ok(NumberOfCompletedPackets {
 8000834: bd f8 19 04                  	ldrh.w	r0, [sp, #1049]
 8000838: dd f8 1c 14                  	ldr.w	r1, [sp, #1052]
 800083c: a9 91                        	str	r1, [sp, #676]
 800083e: dd f8 20 14                  	ldr.w	r1, [sp, #1056]
 8000842: ad f8 0c 04                  	strh.w	r0, [sp, #1036]
 8000846: 9d f8 30 04                  	ldrb.w	r0, [sp, #1072]
 800084a: a6 91                        	str	r1, [sp, #664]
 800084c: dd f8 24 14                  	ldr.w	r1, [sp, #1060]
 8000850: 27 90                        	str	r0, [sp, #156]
 8000852: 9d f8 3e 04                  	ldrb.w	r0, [sp, #1086]
 8000856: 9d f8 1b 24                  	ldrb.w	r2, [sp, #1051]
 800085a: dd f8 31 34                  	ldr.w	r3, [sp, #1073]
 800085e: 96 91                        	str	r1, [sp, #600]
 8000860: 99 90                        	str	r0, [sp, #612]
 8000862: 9d f8 3f 04                  	ldrb.w	r0, [sp, #1087]
 8000866: dd f8 28 14                  	ldr.w	r1, [sp, #1064]
 800086a: 8d f8 0e 24                  	strb.w	r2, [sp, #1038]
 800086e: cd f8 20 35                  	str.w	r3, [sp, #1312]
 8000872: dd f8 34 64                  	ldr.w	r6, [sp, #1076]
 8000876: 98 90                        	str	r0, [sp, #608]
 8000878: bd f8 40 44                  	ldrh.w	r4, [sp, #1088]
 800087c: bd f8 46 24                  	ldrh.w	r2, [sp, #1094]
 8000880: dd f8 2c 04                  	ldr.w	r0, [sp, #1068]
 8000884: 9b f8 cb 30                  	ldrb.w	r3, [r11, #203]
 8000888: cd f8 23 65                  	str.w	r6, [sp, #1315]
 800088c: bd f8 38 54                  	ldrh.w	r5, [sp, #1080]
 8000890: 27 f8 44 2c                  	strh	r2, [r7, #-68]
 8000894: dd f8 42 24                  	ldr.w	r2, [sp, #1090]
 8000898: bb f8 c9 60                  	ldrh.w	r6, [r11, #201]
 800089c: 47 f8 48 2c                  	str	r2, [r7, #-72]
; }
 80008a0: 0a 0a                        	lsrs	r2, r1, #8
 80008a2: 92 91                        	str	r1, [sp, #584]
;     Ok(NumberOfCompletedPackets {
 80008a4: 46 ea 03 41                  	orr.w	r1, r6, r3, lsl #16
; }
 80008a8: 42 ea 00 6c                  	orr.w	r12, r2, r0, lsl #24
;     Ok(NumberOfCompletedPackets {
 80008ac: 9b f8 02 20                  	ldrb.w	r2, [r11, #2]
 80008b0: bb f8 00 30                  	ldrh.w	r3, [r11]
; }
 80008b4: 4f ea 10 2b                  	lsr.w	r11, r0, #8
 80008b8: 20 0a                        	lsrs	r0, r4, #8
;     Ok(NumberOfCompletedPackets {
 80008ba: 2a 91                        	str	r1, [sp, #168]
 80008bc: a1 90                        	str	r0, [sp, #644]
; }
 80008be: 28 0a                        	lsrs	r0, r5, #8
;     Ok(NumberOfCompletedPackets {
 80008c0: 95 90                        	str	r0, [sp, #596]
 80008c2: 43 ea 02 41                  	orr.w	r1, r3, r2, lsl #16
 80008c6: bd f8 14 05                  	ldrh.w	r0, [sp, #1300]
 80008ca: 2b 90                        	str	r0, [sp, #172]
; }
 80008cc: 8a b2                        	uxth	r2, r1
;     Ok(NumberOfCompletedPackets {
 80008ce: 9d f8 10 05                  	ldrb.w	r0, [sp, #1296]
; }
 80008d2: 12 0a                        	lsrs	r2, r2, #8
;     Ok(NumberOfCompletedPackets {
 80008d4: 88 90                        	str	r0, [sp, #544]
 80008d6: dd f8 0c 05                  	ldr.w	r0, [sp, #1292]
 80008da: 87 90                        	str	r0, [sp, #540]
 80008dc: dd f8 08 05                  	ldr.w	r0, [sp, #1288]
 80008e0: 74 90                        	str	r0, [sp, #464]
 80008e2: dd f8 04 05                  	ldr.w	r0, [sp, #1284]
 80008e6: 59 90                        	str	r0, [sp, #356]
 80008e8: 9d f8 03 05                  	ldrb.w	r0, [sp, #1283]
 80008ec: 2d 90                        	str	r0, [sp, #180]
 80008ee: 9d f8 02 05                  	ldrb.w	r0, [sp, #1282]
 80008f2: 2c 90                        	str	r0, [sp, #176]
 80008f4: bd f8 00 05                  	ldrh.w	r0, [sp, #1280]
 80008f8: 32 90                        	str	r0, [sp, #200]
 80008fa: dd f8 fc 04                  	ldr.w	r0, [sp, #1276]
 80008fe: 5a 90                        	str	r0, [sp, #360]
 8000900: 9d f8 fb 04                  	ldrb.w	r0, [sp, #1275]
 8000904: 2f 90                        	str	r0, [sp, #188]
 8000906: 9d f8 fa 04                  	ldrb.w	r0, [sp, #1274]
 800090a: 2e 90                        	str	r0, [sp, #184]
 800090c: bd f8 f8 04                  	ldrh.w	r0, [sp, #1272]
 8000910: 36 90                        	str	r0, [sp, #216]
 8000912: dd f8 f4 04                  	ldr.w	r0, [sp, #1268]
 8000916: 5b 90                        	str	r0, [sp, #364]
 8000918: 9d f8 f3 04                  	ldrb.w	r0, [sp, #1267]
 800091c: 31 90                        	str	r0, [sp, #196]
 800091e: 9d f8 f2 04                  	ldrb.w	r0, [sp, #1266]
 8000922: 30 90                        	str	r0, [sp, #192]
 8000924: bd f8 f0 04                  	ldrh.w	r0, [sp, #1264]
 8000928: 39 90                        	str	r0, [sp, #228]
 800092a: dd f8 ec 04                  	ldr.w	r0, [sp, #1260]
 800092e: 5c 90                        	str	r0, [sp, #368]
 8000930: 9d f8 eb 04                  	ldrb.w	r0, [sp, #1259]
 8000934: 35 90                        	str	r0, [sp, #212]
 8000936: 9d f8 ea 04                  	ldrb.w	r0, [sp, #1258]
 800093a: 33 90                        	str	r0, [sp, #204]
 800093c: bd f8 e8 04                  	ldrh.w	r0, [sp, #1256]
 8000940: 76 90                        	str	r0, [sp, #472]
 8000942: dd f8 e4 04                  	ldr.w	r0, [sp, #1252]
 8000946: 5d 90                        	str	r0, [sp, #372]
 8000948: 9d f8 e3 04                  	ldrb.w	r0, [sp, #1251]
 800094c: 38 90                        	str	r0, [sp, #224]
 800094e: 9d f8 e2 04                  	ldrb.w	r0, [sp, #1250]
 8000952: 37 90                        	str	r0, [sp, #220]
 8000954: bd f8 e0 04                  	ldrh.w	r0, [sp, #1248]
 8000958: 77 90                        	str	r0, [sp, #476]
 800095a: dd f8 dc 04                  	ldr.w	r0, [sp, #1244]
 800095e: 5e 90                        	str	r0, [sp, #376]
 8000960: 9d f8 db 04                  	ldrb.w	r0, [sp, #1243]
 8000964: 3b 90                        	str	r0, [sp, #236]
 8000966: 9d f8 da 04                  	ldrb.w	r0, [sp, #1242]
 800096a: 3a 90                        	str	r0, [sp, #232]
 800096c: bd f8 d8 04                  	ldrh.w	r0, [sp, #1240]
 8000970: 78 90                        	str	r0, [sp, #480]
 8000972: dd f8 d4 04                  	ldr.w	r0, [sp, #1236]
 8000976: 5f 90                        	str	r0, [sp, #380]
 8000978: 9d f8 d3 04                  	ldrb.w	r0, [sp, #1235]
 800097c: 3d 90                        	str	r0, [sp, #244]
 800097e: 9d f8 d2 04                  	ldrb.w	r0, [sp, #1234]
 8000982: 3c 90                        	str	r0, [sp, #240]
 8000984: bd f8 d0 04                  	ldrh.w	r0, [sp, #1232]
 8000988: 79 90                        	str	r0, [sp, #484]
 800098a: dd f8 cc 04                  	ldr.w	r0, [sp, #1228]
 800098e: 60 90                        	str	r0, [sp, #384]
 8000990: 9d f8 cb 04                  	ldrb.w	r0, [sp, #1227]
 8000994: 3f 90                        	str	r0, [sp, #252]
 8000996: 9d f8 ca 04                  	ldrb.w	r0, [sp, #1226]
 800099a: 3e 90                        	str	r0, [sp, #248]
 800099c: bd f8 c8 04                  	ldrh.w	r0, [sp, #1224]
 80009a0: 7a 90                        	str	r0, [sp, #488]
 80009a2: dd f8 c4 04                  	ldr.w	r0, [sp, #1220]
 80009a6: 61 90                        	str	r0, [sp, #388]
 80009a8: 9d f8 c3 04                  	ldrb.w	r0, [sp, #1219]
 80009ac: 41 90                        	str	r0, [sp, #260]
 80009ae: 9d f8 c2 04                  	ldrb.w	r0, [sp, #1218]
 80009b2: 40 90                        	str	r0, [sp, #256]
 80009b4: bd f8 c0 04                  	ldrh.w	r0, [sp, #1216]
 80009b8: 7b 90                        	str	r0, [sp, #492]
 80009ba: dd f8 bc 04                  	ldr.w	r0, [sp, #1212]
 80009be: 62 90                        	str	r0, [sp, #392]
 80009c0: 9d f8 bb 04                  	ldrb.w	r0, [sp, #1211]
 80009c4: 43 90                        	str	r0, [sp, #268]
 80009c6: 9d f8 ba 04                  	ldrb.w	r0, [sp, #1210]
 80009ca: 42 90                        	str	r0, [sp, #264]
 80009cc: bd f8 b8 04                  	ldrh.w	r0, [sp, #1208]
 80009d0: 7c 90                        	str	r0, [sp, #496]
 80009d2: dd f8 b4 04                  	ldr.w	r0, [sp, #1204]
 80009d6: 63 90                        	str	r0, [sp, #396]
 80009d8: 9d f8 b3 04                  	ldrb.w	r0, [sp, #1203]
 80009dc: 45 90                        	str	r0, [sp, #276]
 80009de: 9d f8 b2 04                  	ldrb.w	r0, [sp, #1202]
 80009e2: 44 90                        	str	r0, [sp, #272]
 80009e4: bd f8 b0 04                  	ldrh.w	r0, [sp, #1200]
 80009e8: 7e 90                        	str	r0, [sp, #504]
 80009ea: dd f8 ac 04                  	ldr.w	r0, [sp, #1196]
 80009ee: 64 90                        	str	r0, [sp, #400]
 80009f0: 9d f8 ab 04                  	ldrb.w	r0, [sp, #1195]
 80009f4: 47 90                        	str	r0, [sp, #284]
 80009f6: 9d f8 aa 04                  	ldrb.w	r0, [sp, #1194]
 80009fa: 46 90                        	str	r0, [sp, #280]
 80009fc: bd f8 a8 04                  	ldrh.w	r0, [sp, #1192]
 8000a00: 7f 90                        	str	r0, [sp, #508]
 8000a02: dd f8 a4 04                  	ldr.w	r0, [sp, #1188]
 8000a06: 65 90                        	str	r0, [sp, #404]
 8000a08: 9d f8 a3 04                  	ldrb.w	r0, [sp, #1187]
 8000a0c: 4a 90                        	str	r0, [sp, #296]
 8000a0e: 9d f8 a2 04                  	ldrb.w	r0, [sp, #1186]
 8000a12: 49 90                        	str	r0, [sp, #292]
 8000a14: bd f8 a0 04                  	ldrh.w	r0, [sp, #1184]
 8000a18: 80 90                        	str	r0, [sp, #512]
 8000a1a: dd f8 9c 04                  	ldr.w	r0, [sp, #1180]
 8000a1e: 66 90                        	str	r0, [sp, #408]
 8000a20: 9d f8 9b 04                  	ldrb.w	r0, [sp, #1179]
 8000a24: 4c 90                        	str	r0, [sp, #304]
 8000a26: 9d f8 9a 04                  	ldrb.w	r0, [sp, #1178]
 8000a2a: 4b 90                        	str	r0, [sp, #300]
 8000a2c: bd f8 98 04                  	ldrh.w	r0, [sp, #1176]
 8000a30: 81 90                        	str	r0, [sp, #516]
 8000a32: dd f8 94 04                  	ldr.w	r0, [sp, #1172]
 8000a36: 67 90                        	str	r0, [sp, #412]
 8000a38: 9d f8 93 04                  	ldrb.w	r0, [sp, #1171]
 8000a3c: 4e 90                        	str	r0, [sp, #312]
 8000a3e: 9d f8 92 04                  	ldrb.w	r0, [sp, #1170]
 8000a42: 4d 90                        	str	r0, [sp, #308]
 8000a44: bd f8 90 04                  	ldrh.w	r0, [sp, #1168]
 8000a48: 82 90                        	str	r0, [sp, #520]
 8000a4a: dd f8 8c 04                  	ldr.w	r0, [sp, #1164]
 8000a4e: 68 90                        	str	r0, [sp, #416]
 8000a50: 9d f8 8b 04                  	ldrb.w	r0, [sp, #1163]
 8000a54: 6e 90                        	str	r0, [sp, #440]
 8000a56: 9d f8 8a 04                  	ldrb.w	r0, [sp, #1162]
 8000a5a: 4f 90                        	str	r0, [sp, #316]
 8000a5c: bd f8 88 04                  	ldrh.w	r0, [sp, #1160]
 8000a60: 83 90                        	str	r0, [sp, #524]
 8000a62: dd f8 84 04                  	ldr.w	r0, [sp, #1156]
 8000a66: 69 90                        	str	r0, [sp, #420]
 8000a68: 9d f8 83 04                  	ldrb.w	r0, [sp, #1155]
 8000a6c: 51 90                        	str	r0, [sp, #324]
 8000a6e: 9d f8 82 04                  	ldrb.w	r0, [sp, #1154]
 8000a72: 50 90                        	str	r0, [sp, #320]
 8000a74: bd f8 80 04                  	ldrh.w	r0, [sp, #1152]
 8000a78: 84 90                        	str	r0, [sp, #528]
 8000a7a: dd f8 7c 04                  	ldr.w	r0, [sp, #1148]
 8000a7e: 6a 90                        	str	r0, [sp, #424]
 8000a80: 9d f8 7b 04                  	ldrb.w	r0, [sp, #1147]
 8000a84: 54 90                        	str	r0, [sp, #336]
 8000a86: 9d f8 7a 04                  	ldrb.w	r0, [sp, #1146]
 8000a8a: 52 90                        	str	r0, [sp, #328]
 8000a8c: bd f8 78 04                  	ldrh.w	r0, [sp, #1144]
 8000a90: 70 90                        	str	r0, [sp, #448]
 8000a92: dd f8 74 04                  	ldr.w	r0, [sp, #1140]
 8000a96: 6b 90                        	str	r0, [sp, #428]
 8000a98: 9d f8 73 04                  	ldrb.w	r0, [sp, #1139]
 8000a9c: 55 90                        	str	r0, [sp, #340]
 8000a9e: 9d f8 72 04                  	ldrb.w	r0, [sp, #1138]
 8000aa2: 53 90                        	str	r0, [sp, #332]
 8000aa4: bd f8 70 04                  	ldrh.w	r0, [sp, #1136]
 8000aa8: 85 90                        	str	r0, [sp, #532]
 8000aaa: dd f8 6c 04                  	ldr.w	r0, [sp, #1132]
 8000aae: 6c 90                        	str	r0, [sp, #432]
 8000ab0: 9d f8 6b 04                  	ldrb.w	r0, [sp, #1131]
 8000ab4: 56 90                        	str	r0, [sp, #344]
 8000ab6: 9d f8 6a 04                  	ldrb.w	r0, [sp, #1130]
 8000aba: 48 90                        	str	r0, [sp, #288]
 8000abc: bd f8 68 04                  	ldrh.w	r0, [sp, #1128]
 8000ac0: 7d 90                        	str	r0, [sp, #500]
 8000ac2: dd f8 64 04                  	ldr.w	r0, [sp, #1124]
 8000ac6: 6d 90                        	str	r0, [sp, #436]
 8000ac8: 9d f8 63 04                  	ldrb.w	r0, [sp, #1123]
 8000acc: 57 90                        	str	r0, [sp, #348]
 8000ace: 9d f8 62 04                  	ldrb.w	r0, [sp, #1122]
 8000ad2: 34 90                        	str	r0, [sp, #208]
 8000ad4: bd f8 60 04                  	ldrh.w	r0, [sp, #1120]
 8000ad8: 75 90                        	str	r0, [sp, #468]
 8000ada: dd f8 5c 04                  	ldr.w	r0, [sp, #1116]
 8000ade: 71 90                        	str	r0, [sp, #452]
 8000ae0: 9d f8 5b 04                  	ldrb.w	r0, [sp, #1115]
 8000ae4: 58 90                        	str	r0, [sp, #352]
 8000ae6: 9d f8 5a 04                  	ldrb.w	r0, [sp, #1114]
 8000aea: 6f 90                        	str	r0, [sp, #444]
 8000aec: 9d f8 59 04                  	ldrb.w	r0, [sp, #1113]
 8000af0: 89 90                        	str	r0, [sp, #548]
 8000af2: 9d f8 58 04                  	ldrb.w	r0, [sp, #1112]
 8000af6: 72 90                        	str	r0, [sp, #456]
 8000af8: 9d f8 57 04                  	ldrb.w	r0, [sp, #1111]
 8000afc: 8d 90                        	str	r0, [sp, #564]
 8000afe: 9d f8 56 04                  	ldrb.w	r0, [sp, #1110]
 8000b02: 8c 90                        	str	r0, [sp, #560]
 8000b04: 9d f8 55 04                  	ldrb.w	r0, [sp, #1109]
 8000b08: 8b 90                        	str	r0, [sp, #556]
 8000b0a: 9d f8 54 04                  	ldrb.w	r0, [sp, #1108]
 8000b0e: 8e 90                        	str	r0, [sp, #568]
 8000b10: 9d f8 53 04                  	ldrb.w	r0, [sp, #1107]
 8000b14: 8a 90                        	str	r0, [sp, #552]
 8000b16: 9d f8 52 04                  	ldrb.w	r0, [sp, #1106]
 8000b1a: 86 90                        	str	r0, [sp, #536]
 8000b1c: 9d f8 51 04                  	ldrb.w	r0, [sp, #1105]
 8000b20: 73 90                        	str	r0, [sp, #460]
 8000b22: 9d f8 50 04                  	ldrb.w	r0, [sp, #1104]
 8000b26: 9d f8 18 e4                  	ldrb.w	lr, [sp, #1048]
 8000b2a: dd f8 3a 94                  	ldr.w	r9, [sp, #1082]
 8000b2e: dd f8 4c 84                  	ldr.w	r8, [sp, #1100]
 8000b32: 1e 90                        	str	r0, [sp, #120]
 8000b34: 9d f8 4b 04                  	ldrb.w	r0, [sp, #1099]
; }
 8000b38: 9a 92                        	str	r2, [sp, #616]
 8000b3a: 00 22                        	movs	r2, #0
 8000b3c: 90 90                        	str	r0, [sp, #576]
 8000b3e: 08 0c                        	lsrs	r0, r1, #16
 8000b40: 9b 94                        	str	r4, [sp, #620]
 8000b42: 23 95                        	str	r5, [sp, #140]
 8000b44: 97 91                        	str	r1, [sp, #604]
 8000b46: 1f 90                        	str	r0, [sp, #124]
 8000b48: 52 e2                        	b	#1188 <$t.8+0x100>
;         if $left.len() < $right {
 8000b4a: 03 2c                        	cmp	r4, #3
 8000b4c: 80 f0 3d 81                  	bhs.w	#634 <$t.4+0x24c>
 8000b50: 00 20                        	movs	r0, #0
 8000b52: 4f f0 01 0e                  	mov.w	lr, #1
 8000b56: 96 90                        	str	r0, [sp, #600]
 8000b58: 03 20                        	movs	r0, #3
 8000b5a: a6 90                        	str	r0, [sp, #664]
 8000b5c: 01 21                        	movs	r1, #1
 8000b5e: 04 f0 3b be                  	b.w	#19574 <$t.24+0x1656>
 8000b62: 00 2c                        	cmp	r4, #0
 8000b64: 00 f0 8a 81                  	beq.w	#788 <$t.6+0x5a>
;         0x01 => Ok(Event::LeConnectionComplete(to_le_connection_complete(
 8000b68: 9d f8 ab 12                  	ldrb.w	r1, [sp, #683]
 8000b6c: 48 1e                        	subs	r0, r1, #1
 8000b6e: 04 28                        	cmp	r0, #4
 8000b70: 00 f2 be 85                  	bhi.w	#2940 <$t.12+0x16e>
 8000b74: df e8 10 f0                  	tbh	[pc, r0, lsl #1]

08000b78 $d.3:
 8000b78:	05 00 9e 04	.word	0x049e0005
 8000b7c:	b4 03 70 04	.word	0x047003b4
 8000b80:	a0 03		.short	0x03a0

08000b82 $t.4:
;         if $left.len() != $right {
 8000b82: 13 2c                        	cmp	r4, #19
 8000b84: 41 f0 a6 80                  	bne.w	#4428 <$t.14+0x26e>
;         status: payload[1].try_into().map_err(rewrap_bad_status)?,
 8000b88: 9d f8 ac 02                  	ldrb.w	r0, [sp, #684]
;     copy_nonoverlapping(src, dst, count)
 8000b8c: 9d f8 b4 12                  	ldrb.w	r1, [sp, #692]
 8000b90: 9d f8 b3 62                  	ldrb.w	r6, [sp, #691]
 8000b94: 97 91                        	str	r1, [sp, #604]
 8000b96: 9d f8 b5 42                  	ldrb.w	r4, [sp, #693]
 8000b9a: 9d f8 b6 52                  	ldrb.w	r5, [sp, #694]
 8000b9e: bd f8 b1 82                  	ldrh.w	r8, [sp, #689]
;         status: payload[1].try_into().map_err(rewrap_bad_status)?,
 8000ba2: 11 f0 5d fc                  	bl	#71866
 8000ba6: c0 07                        	lsls	r0, r0, #31
 8000ba8: 41 f0 12 82                  	bne.w	#5156 <$t.14+0x56a>
;         role: payload[4]
 8000bac: 9d f8 af a2                  	ldrb.w	r10, [sp, #687]
;     copy_nonoverlapping(src, dst, count)
 8000bb0: bd f8 ad 92                  	ldrh.w	r9, [sp, #685]
;             0 => Ok(ConnectionRole::Central),
 8000bb4: ba f1 00 0f                  	cmp.w	r10, #0
 8000bb8: 03 f0 7f 80                  	beq.w	#12542 <$t.18+0x9a2>
 8000bbc: ba f1 01 0f                  	cmp.w	r10, #1
 8000bc0: 43 f0 8e 80                  	bne.w	#12572 <$t.18+0x9c8>
 8000bc4: 01 20                        	movs	r0, #1
 8000bc6: cd e9 9a 49                  	strd	r4, r9, [sp, #616]
 8000bca: 03 f0 79 b8                  	b.w	#12530 <$t.18+0x9a8>
;         if $left.len() != $right {
 8000bce: 04 2c                        	cmp	r4, #4
 8000bd0: 40 f0 3a 81                  	bne.w	#628 <$t.6+0x26>
;         status: payload[0].try_into().map_err(rewrap_bad_status)?,
 8000bd4: 9d f8 ab 02                  	ldrb.w	r0, [sp, #683]
 8000bd8: 11 f0 42 fc                  	bl	#71812
 8000bdc: 0d 46                        	mov	r5, r1
 8000bde: c0 07                        	lsls	r0, r0, #31
 8000be0: 40 f0 eb 82                  	bne.w	#1494 <$t.8+0x2ca>
;         reason: payload[3].try_into().map_err(rewrap_bad_reason)?,
 8000be4: 9d f8 ae 02                  	ldrb.w	r0, [sp, #686]
 8000be8: 11 f0 3a fc                  	bl	#71796
;             )?)),
 8000bec: c0 07                        	lsls	r0, r0, #31
 8000bee: 40 f0 58 83                  	bne.w	#1712 <$t.10+0xa>
;             0x05 => Ok(Event::DisconnectionComplete(to_disconnection_complete(
 8000bf2: dd f8 18 04                  	ldr.w	r0, [sp, #1048]
 8000bf6: 01 26                        	movs	r6, #1
 8000bf8: dd f8 1c 24                  	ldr.w	r2, [sp, #1052]
 8000bfc: 07 f8 48 6c                  	strb	r6, [r7, #-72]
 8000c00: 47 f8 42 0c                  	str	r0, [r7, #-66]
 8000c04: dd f8 23 65                  	ldr.w	r6, [sp, #1315]
 8000c08: 47 f8 3e 2c                  	str	r2, [r7, #-62]
 8000c0c: dd f8 20 05                  	ldr.w	r0, [sp, #1312]
;     copy_nonoverlapping(src, dst, count)
 8000c10: bd f8 ac 22                  	ldrh.w	r2, [sp, #684]
;             0x05 => Ok(Event::DisconnectionComplete(to_disconnection_complete(
 8000c14: cd f8 0f 64                  	str.w	r6, [sp, #1039]
 8000c18: cd f8 0c 04                  	str.w	r0, [sp, #1036]
;         reason: payload[3].try_into().map_err(rewrap_bad_reason)?,
 8000c1c: e8 b2                        	uxtb	r0, r5
;         self
 8000c1e: 42 ea 00 40                  	orr.w	r0, r2, r0, lsl #16
;             0x05 => Ok(Event::DisconnectionComplete(to_disconnection_complete(
 8000c22: bd f8 f4 c3                  	ldrh.w	r12, [sp, #1012]
 8000c26: dd f8 e0 83                  	ldr.w	r8, [sp, #992]
;         self
 8000c2a: 40 ea 01 60                  	orr.w	r0, r0, r1, lsl #24
;             0x05 => Ok(Event::DisconnectionComplete(to_disconnection_complete(
 8000c2e: bd f8 e4 e3                  	ldrh.w	lr, [sp, #996]
 8000c32: fc 9b                        	ldr	r3, [sp, #1008]
 8000c34: bd f8 20 44                  	ldrh.w	r4, [sp, #1056]
 8000c38: 27 f8 3a 4c                  	strh	r4, [r7, #-58]
 8000c3c: ed 93                        	str	r3, [sp, #948]
 8000c3e: ad f8 b8 c3                  	strh.w	r12, [sp, #952]
 8000c42: cd f8 ac 83                  	str.w	r8, [sp, #940]
 8000c46: ad f8 b0 e3                  	strh.w	lr, [sp, #944]
 8000c4a: 00 f0 5f bf                  	b.w	#3774 <$t.14+0xa6>
;         if $left.len() != $right {
 8000c4e: 03 2c                        	cmp	r4, #3
 8000c50: 40 f0 fc 80                  	bne.w	#504 <$t.6+0x2a>
;         status: payload[0].try_into().map_err(rewrap_bad_status)?,
 8000c54: 9d f8 ab 02                  	ldrb.w	r0, [sp, #683]
 8000c58: 11 f0 02 fc                  	bl	#71684
 8000c5c: c0 07                        	lsls	r0, r0, #31
 8000c5e: 40 f0 ae 82                  	bne.w	#1372 <$t.8+0x2ce>
;             0x30 => Ok(Event::EncryptionKeyRefreshComplete(
 8000c62: 07 f8 44 1c                  	strb	r1, [r7, #-68]
;     copy_nonoverlapping(src, dst, count)
 8000c66: bd f8 ac 12                  	ldrh.w	r1, [sp, #684]
;             0x30 => Ok(Event::EncryptionKeyRefreshComplete(
 8000c6a: dd f8 18 04                  	ldr.w	r0, [sp, #1048]
 8000c6e: dd f8 1c 24                  	ldr.w	r2, [sp, #1052]
 8000c72: bd f8 f4 63                  	ldrh.w	r6, [sp, #1012]
 8000c76: f8 9d                        	ldr	r5, [sp, #992]
 8000c78: bd f8 e4 c3                  	ldrh.w	r12, [sp, #996]
 8000c7c: fc 9c                        	ldr	r4, [sp, #1008]
 8000c7e: 27 f8 46 1c                  	strh	r1, [r7, #-70]
 8000c82: 09 21                        	movs	r1, #9
 8000c84: dd f8 1f 34                  	ldr.w	r3, [sp, #1055]
 8000c88: 47 f8 3f 2c                  	str	r2, [r7, #-63]
 8000c8c: 07 f8 48 1c                  	strb	r1, [r7, #-72]
 8000c90: 47 f8 43 0c                  	str	r0, [r7, #-67]
 8000c94: 47 f8 3c 3c                  	str	r3, [r7, #-60]
 8000c98: ed 94                        	str	r4, [sp, #948]
 8000c9a: ad f8 b8 63                  	strh.w	r6, [sp, #952]
 8000c9e: eb 95                        	str	r5, [sp, #940]
 8000ca0: ad f8 b0 c3                  	strh.w	r12, [sp, #944]
 8000ca4: 2a e0                        	b	#84 <$t.4+0x17e>
;         if $left.len() != $right {
 8000ca6: 01 2c                        	cmp	r4, #1
 8000ca8: 40 f0 d2 80                  	bne.w	#420 <$t.6+0x2e>
;         link_type: payload[0]
 8000cac: 9d f8 ab 12                  	ldrb.w	r1, [sp, #683]
 8000cb0: 00 20                        	movs	r0, #0
;             0 => Ok(LinkType::Sco),
 8000cb2: 19 b1                        	cbz	r1, #6
 8000cb4: 01 29                        	cmp	r1, #1
 8000cb6: 40 f0 8e 82                  	bne.w	#1308 <$t.8+0x2e6>
 8000cba: 01 20                        	movs	r0, #1
;             0x1A => Ok(Event::DataBufferOverflow(to_data_buffer_overflow(payload)?)),
 8000cbc: 0d f5 83 63                  	add.w	r3, sp, #1048
 8000cc0: 07 f8 47 0c                  	strb	r0, [r7, #-71]
 8000cc4: 08 20                        	movs	r0, #8
 8000cc6: fc 9e                        	ldr	r6, [sp, #1008]
 8000cc8: 0e cb                        	ldm	r3, {r1, r2, r3}
 8000cca: 07 f8 48 0c                  	strb	r0, [r7, #-72]
 8000cce: bd f8 f4 53                  	ldrh.w	r5, [sp, #1012]
 8000cd2: dd f8 e0 c3                  	ldr.w	r12, [sp, #992]
 8000cd6: bd f8 24 44                  	ldrh.w	r4, [sp, #1060]
 8000cda: bd f8 e4 03                  	ldrh.w	r0, [sp, #996]
 8000cde: 47 f8 46 1c                  	str	r1, [r7, #-70]
 8000ce2: 47 f8 42 2c                  	str	r2, [r7, #-66]
 8000ce6: 47 f8 3e 3c                  	str	r3, [r7, #-62]
 8000cea: ed 96                        	str	r6, [sp, #948]
 8000cec: cd f8 ac c3                  	str.w	r12, [sp, #940]
 8000cf0: 27 f8 3a 4c                  	strh	r4, [r7, #-58]
 8000cf4: ad f8 b8 53                  	strh.w	r5, [sp, #952]
 8000cf8: ad f8 b0 03                  	strh.w	r0, [sp, #944]
 8000cfc: dd f8 20 05                  	ldr.w	r0, [sp, #1312]
 8000d00: dd f8 23 15                  	ldr.w	r1, [sp, #1315]
 8000d04: cd f8 0f 14                  	str.w	r1, [sp, #1039]
 8000d08: cd f8 0c 04                  	str.w	r0, [sp, #1036]
 8000d0c: 00 20                        	movs	r0, #0
 8000d0e: a4 90                        	str	r0, [sp, #656]
 8000d10: 00 20                        	movs	r0, #0
 8000d12: 00 22                        	movs	r2, #0
 8000d14: 99 90                        	str	r0, [sp, #612]
 8000d16: 00 20                        	movs	r0, #0
 8000d18: a9 90                        	str	r0, [sp, #676]
 8000d1a: 00 20                        	movs	r0, #0
 8000d1c: a7 90                        	str	r0, [sp, #668]
 8000d1e: 00 20                        	movs	r0, #0
 8000d20: a5 90                        	str	r0, [sp, #660]
 8000d22: 4f f0 00 0a                  	mov.w	r10, #0
 8000d26: 00 20                        	movs	r0, #0
 8000d28: 4f f0 00 0c                  	mov.w	r12, #0
 8000d2c: a0 90                        	str	r0, [sp, #640]
 8000d2e: 00 20                        	movs	r0, #0
 8000d30: a3 90                        	str	r0, [sp, #652]
 8000d32: 00 20                        	movs	r0, #0
 8000d34: a2 90                        	str	r0, [sp, #648]
 8000d36: 00 20                        	movs	r0, #0
 8000d38: 95 90                        	str	r0, [sp, #596]
 8000d3a: 00 20                        	movs	r0, #0
 8000d3c: a1 90                        	str	r0, [sp, #644]
 8000d3e: 00 20                        	movs	r0, #0
 8000d40: 94 90                        	str	r0, [sp, #592]
 8000d42: 00 20                        	movs	r0, #0
 8000d44: 93 90                        	str	r0, [sp, #588]
 8000d46: 00 20                        	movs	r0, #0
 8000d48: 98 90                        	str	r0, [sp, #608]
 8000d4a: 04 f0 03 be                  	b.w	#19462 <$t.24+0x17d2>
;         Err(v)
 8000d4e: f8 98                        	ldr	r0, [sp, #992]
 8000d50: 4f f0 01 0c                  	mov.w	r12, #1
 8000d54: ed 90                        	str	r0, [sp, #948]
 8000d56: 00 20                        	movs	r0, #0
 8000d58: a3 90                        	str	r0, [sp, #652]
 8000d5a: bd f8 e4 13                  	ldrh.w	r1, [sp, #996]
 8000d5e: 00 20                        	movs	r0, #0
 8000d60: dd f8 00 24                  	ldr.w	r2, [sp, #1024]
 8000d64: a2 90                        	str	r0, [sp, #648]
 8000d66: 00 20                        	movs	r0, #0
 8000d68: 9d 90                        	str	r0, [sp, #628]
 8000d6a: 00 20                        	movs	r0, #0
 8000d6c: bd f8 04 34                  	ldrh.w	r3, [sp, #1028]
 8000d70: 9f 90                        	str	r0, [sp, #636]
 8000d72: 00 20                        	movs	r0, #0
 8000d74: 9e 90                        	str	r0, [sp, #632]
 8000d76: 00 20                        	movs	r0, #0
 8000d78: 9d f8 be 63                  	ldrb.w	r6, [sp, #958]
 8000d7c: a9 90                        	str	r0, [sp, #676]
 8000d7e: 00 20                        	movs	r0, #0
 8000d80: a6 90                        	str	r0, [sp, #664]
 8000d82: 00 20                        	movs	r0, #0
 8000d84: a5 90                        	str	r0, [sp, #660]
 8000d86: 00 20                        	movs	r0, #0
 8000d88: a7 90                        	str	r0, [sp, #668]
 8000d8a: 00 20                        	movs	r0, #0
 8000d8c: a1 90                        	str	r0, [sp, #644]
 8000d8e: bd f8 bc 53                  	ldrh.w	r5, [sp, #956]
 8000d92: 00 20                        	movs	r0, #0
 8000d94: 07 f8 48 cc                  	strb	r12, [r7, #-72]
 8000d98: 27 f8 47 5c                  	strh	r5, [r7, #-71]
 8000d9c: 07 f8 45 6c                  	strb	r6, [r7, #-69]
 8000da0: 47 e9 11 4c                  	strd	r4, r12, [r7, #-68]
 8000da4: ad f8 b8 13                  	strh.w	r1, [sp, #952]
 8000da8: eb 92                        	str	r2, [sp, #940]
 8000daa: ad f8 b0 33                  	strh.w	r3, [sp, #944]
 8000dae: 9a 90                        	str	r0, [sp, #616]
 8000db0: ff f7 74 bb                  	b.w	#-2328 <$t.2+0xde>
 8000db4: 01 20                        	movs	r0, #1
 8000db6: e8 e1                        	b	#976 <$t.8+0x29a>
 8000db8: 01 20                        	movs	r0, #1
 8000dba: eb e1                        	b	#982 <$t.8+0x2a4>
 8000dbc: 01 22                        	movs	r2, #1
 8000dbe: 04 20                        	movs	r0, #4
 8000dc0: 0a e2                        	b	#1044 <$t.8+0x2e8>
 8000dc2: 01 20                        	movs	r0, #1
 8000dc4: 0b 23                        	movs	r3, #11
 8000dc6: 00 f0 df be                  	b.w	#3518 <$t.14+0x122>
;     copy_nonoverlapping(src, dst, count)
 8000dca: bd f8 ac 22                  	ldrh.w	r2, [sp, #684]
 8000dce: 41 f2 04 40                  	movw	r0, #5124
;             crate::opcode::Opcode(0x0000) => ReturnParameters::Spontaneous,
 8000dd2: 82 42                        	cmp	r2, r0
 8000dd4: 40 f3 11 82                  	ble.w	#1058 <$t.8+0x30a>
 8000dd8: 42 f2 01 00                  	movw	r0, #8193
 8000ddc: 10 1a                        	subs	r0, r2, r0
 8000dde: 1e 28                        	cmp	r0, #30
 8000de0: 01 f2 43 81                  	bhi.w	#4742 <$t.14+0x604>
 8000de4: df e8 10 f0                  	tbh	[pc, r0, lsl #1]

08000de8 $d.5:
 8000de8:	1f 00 83 0c	.word	0x0c83001f
 8000dec:	61 0c 7b 09	.word	0x097b0c61
 8000df0:	51 0c ce 0c	.word	0x0cce0c51
 8000df4:	de 0c cd 0b	.word	0x0bcd0cde
 8000df8:	be 0c f2 0b	.word	0x0bf20cbe
 8000dfc:	02 0c bd 0b	.word	0x0bbd0c02
 8000e00:	7b 09 55 0d	.word	0x0d55097b
 8000e04:	12 0c f1 0c	.word	0x0cf10c12
 8000e08:	45 0d ad 0d	.word	0x0dad0d45
 8000e0c:	7b 09 30 0d	.word	0x0d30097b
 8000e10:	65 0d 7b 09	.word	0x097b0d65
 8000e14:	27 0c a0 0c	.word	0x0ca00c27
 8000e18:	7b 09 c1 0d	.word	0x0dc1097b
 8000e1c:	d3 0d 01 0d	.word	0x0d010dd3
 8000e20:	9d 0b ad 0b	.word	0x0bad0b9d
 8000e24:	dd 0b		.short	0x0bdd

08000e26 $t.6:
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 8000e26: 03 2c                        	cmp	r4, #3
 8000e28: 0b f0 5c 83                  	beq.w	#46776 <$t.42+0x32a>
 8000e2c: 9d f8 ae 02                  	ldrb.w	r0, [sp, #686]
 8000e30: 11 f0 16 fb                  	bl	#71212
;                 ReturnParameters::LeSetEventMask(to_status(&bytes[3..])?)
 8000e34: c0 07                        	lsls	r0, r0, #31
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 8000e36: a4 91                        	str	r1, [sp, #656]
 8000e38: 4f f0 00 00                  	mov.w	r0, #0
;                 ReturnParameters::LeSetEventMask(to_status(&bytes[3..])?)
 8000e3c: a7 90                        	str	r0, [sp, #668]
 8000e3e: 42 f0 b1 87                  	bne.w	#12130 <$t.18+0xa8c>
 8000e42: 09 20                        	movs	r0, #9
 8000e44: 01 f0 8c bd                  	b.w	#6936 <$t.16+0x55a>
 8000e48: 01 20                        	movs	r0, #1
 8000e4a: 2e e2                        	b	#1116 <$t.10+0x12>
 8000e4c: 01 20                        	movs	r0, #1
 8000e4e: b9 e1                        	b	#882 <$t.8+0x2d4>
 8000e50: 01 20                        	movs	r0, #1
 8000e52: 01 22                        	movs	r2, #1
 8000e54: c0 e1                        	b	#896 <$t.8+0x2e8>
 8000e56: 01 20                        	movs	r0, #1
 8000e58: 4f f0 00 0c                  	mov.w	r12, #0
 8000e5c: a6 90                        	str	r0, [sp, #664]
 8000e5e: 4f f0 00 0b                  	mov.w	r11, #0
 8000e62: 4f f0 01 0e                  	mov.w	lr, #1
 8000e66: 00 20                        	movs	r0, #0
 8000e68: 95 90                        	str	r0, [sp, #596]
 8000e6a: 00 20                        	movs	r0, #0
 8000e6c: a1 90                        	str	r0, [sp, #644]
 8000e6e: 00 20                        	movs	r0, #0
 8000e70: 9a 90                        	str	r0, [sp, #616]
 8000e72: 00 20                        	movs	r0, #0
 8000e74: 1f 90                        	str	r0, [sp, #124]
 8000e76: 00 20                        	movs	r0, #0
 8000e78: a9 90                        	str	r0, [sp, #676]
 8000e7a: b8 e0                        	b	#368 <$t.8+0xfe>
 8000e7c: 01 20                        	movs	r0, #1
 8000e7e: 00 22                        	movs	r2, #0
 8000e80: 00 21                        	movs	r1, #0
;             return Err($crate::event::Error::BadLength($left.len(), $right));
 8000e82: 47 f8 40 0c                  	str	r0, [r7, #-64]
 8000e86: a9 91                        	str	r1, [sp, #676]
 8000e88: 47 f8 44 2c                  	str	r2, [r7, #-68]
 8000e8c: 00 f0 87 be                  	b.w	#3342 <$t.14+0x138>
;     copy_nonoverlapping(src, dst, count)
 8000e90: bd f8 ab 02                  	ldrh.w	r0, [sp, #683]
 8000e94: 0e f1 13 09                  	add.w	r9, lr, #19
 8000e98: 0e f1 12 06                  	add.w	r6, lr, #18
 8000e9c: 0b f1 02 04                  	add.w	r4, r11, #2
 8000ea0: 08 f1 03 01                  	add.w	r1, r8, #3
 8000ea4: 40 f6 01 02                  	movw	r2, #2049
;             0x9200 => Ok(Stm32Wb5xEvent::CoprocessorReady(to_coprocessor_ready(
 8000ea8: 90 42                        	cmp	r0, r2
 8000eaa: 40 f3 e7 81                  	ble.w	#974 <$t.8+0x38c>
 8000eae: a0 f6 01 42                  	subw	r2, r0, #3073
 8000eb2: 17 2a                        	cmp	r2, #23
 8000eb4: 01 f2 9f 80                  	bhi.w	#4414 <$t.14+0x590>
 8000eb8: 0e f1 0e 05                  	add.w	r5, lr, #14
 8000ebc: 0e f1 0a 0a                  	add.w	r10, lr, #10
 8000ec0: df e8 12 f0                  	tbh	[pc, r2, lsl #1]

08000ec4 $d.7:
 8000ec4:	18 00 c3 14	.word	0x14c30018
 8000ec8:	f4 14 d5 14	.word	0x14d514f4
 8000ecc:	de 14 2f 12	.word	0x122f14de
 8000ed0:	d1 10 23 15	.word	0x152310d1
 8000ed4:	3f 13 9d 15	.word	0x159d133f
 8000ed8:	39 16 a6 15	.word	0x15a61639
 8000edc:	38 12 4a 12	.word	0x124a1238
 8000ee0:	fd 0f 2e 13	.word	0x132e0ffd
 8000ee4:	49 11 c4 15	.word	0x15c41149
 8000ee8:	14 15 ad 15	.word	0x15ad1514
 8000eec:	1b 15 c0 14	.word	0x14c0151b
 8000ef0:	37 16 34 16	.word	0x16341637

08000ef4 $t.8:
;     require_len_at_least!(buffer, 7);
 8000ef4: a9 98                        	ldr	r0, [sp, #676]
 8000ef6: 07 28                        	cmp	r0, #7
 8000ef8: 83 f0 27 83                  	bhs.w	#13902 <$t.24+0x3c8>
 8000efc: 07 20                        	movs	r0, #7
 8000efe: 03 f0 b5 bc                  	b.w	#14698 <$t.24+0x6ea>
 8000f02: 08 46                        	mov	r0, r1
;             0xFF => Ok(Event::Vendor(V::new(payload)?)),
 8000f04: 92 91                        	str	r1, [sp, #584]
 8000f06: f1 98                        	ldr	r0, [sp, #964]
 8000f08: 47 f8 47 0c                  	str	r0, [r7, #-71]
 8000f0c: 98 98                        	ldr	r0, [sp, #608]
 8000f0e: 8d f8 b9 03                  	strb.w	r0, [sp, #953]
 8000f12: 99 98                        	ldr	r0, [sp, #612]
 8000f14: 8d f8 b8 03                  	strb.w	r0, [sp, #952]
 8000f18: a7 98                        	ldr	r0, [sp, #668]
 8000f1a: ed 90                        	str	r0, [sp, #948]
;         self
 8000f1c: 9f 98                        	ldr	r0, [sp, #636]
;             0xFF => Ok(Event::Vendor(V::new(payload)?)),
 8000f1e: dd f8 c7 13                  	ldr.w	r1, [sp, #967]
 8000f22: 47 f8 44 1c                  	str	r1, [r7, #-68]
;         self
 8000f26: c0 b2                        	uxtb	r0, r0
 8000f28: a4 99                        	ldr	r1, [sp, #656]
 8000f2a: 40 ea 0b 20                  	orr.w	r0, r0, r11, lsl #8
;             0xFF => Ok(Event::Vendor(V::new(payload)?)),
 8000f2e: 29 90                        	str	r0, [sp, #164]
 8000f30: 28 0e                        	lsrs	r0, r5, #24
 8000f32: 47 f8 3c 2c                  	str	r2, [r7, #-60]
 8000f36: 40 ea 01 20                  	orr.w	r0, r0, r1, lsl #8
 8000f3a: 99 90                        	str	r0, [sp, #612]
 8000f3c: 28 0c                        	lsrs	r0, r5, #16
 8000f3e: e3 46                        	mov	r11, r12
 8000f40: 40 ea 01 40                  	orr.w	r0, r0, r1, lsl #16
;         self
 8000f44: a9 90                        	str	r0, [sp, #676]
 8000f46: 28 0a                        	lsrs	r0, r5, #8
 8000f48: 90 94                        	str	r4, [sp, #576]
 8000f4a: 40 ea 01 60                  	orr.w	r0, r0, r1, lsl #24
;             0xFF => Ok(Event::Vendor(V::new(payload)?)),
 8000f4e: a7 90                        	str	r0, [sp, #668]
 8000f50: 4f ea 1e 40                  	lsr.w	r0, lr, #16
 8000f54: ef 9c                        	ldr	r4, [sp, #956]
 8000f56: 9e 90                        	str	r0, [sp, #632]
 8000f58: 4f ea 1e 60                  	lsr.w	r0, lr, #24
 8000f5c: 9f 90                        	str	r0, [sp, #636]
 8000f5e: 1f fa 89 f0                  	uxth.w	r0, r9
 8000f62: 02 0a                        	lsrs	r2, r0, #8
 8000f64: 1f fa 88 f0                  	uxth.w	r0, r8
 8000f68: 00 0a                        	lsrs	r0, r0, #8
 8000f6a: 8e 93                        	str	r3, [sp, #568]
;         self
 8000f6c: 8f 90                        	str	r0, [sp, #572]
 8000f6e: 2c f0 7f 40                  	bic	r0, r12, #4278190080
;             0xFF => Ok(Event::Vendor(V::new(payload)?)),
 8000f72: dd f8 bf 33                  	ldr.w	r3, [sp, #959]
 8000f76: 4f ea 10 4a                  	lsr.w	r10, r0, #16
 8000f7a: 4f ea 10 2c                  	lsr.w	r12, r0, #8
 8000f7e: 91 98                        	ldr	r0, [sp, #580]
 8000f80: cd f8 0c 44                  	str.w	r4, [sp, #1036]
 8000f84: cd f8 0f 34                  	str.w	r3, [sp, #1039]
 8000f88: 03 0e                        	lsrs	r3, r0, #24
 8000f8a: 91 90                        	str	r0, [sp, #580]
 8000f8c: 94 93                        	str	r3, [sp, #592]
 8000f8e: 03 0c                        	lsrs	r3, r0, #16
 8000f90: 00 0a                        	lsrs	r0, r0, #8
 8000f92: 93 93                        	str	r3, [sp, #588]
 8000f94: 98 90                        	str	r0, [sp, #608]
 8000f96: dd f8 cd 03                  	ldr.w	r0, [sp, #973]
 8000f9a: 47 f8 40 6c                  	str	r6, [r7, #-64]
 8000f9e: a0 9e                        	ldr	r6, [sp, #640]
 8000fa0: 03 0e                        	lsrs	r3, r0, #24
 8000fa2: 9d 90                        	str	r0, [sp, #628]
 8000fa4: a0 93                        	str	r3, [sp, #640]
 8000fa6: 03 0c                        	lsrs	r3, r0, #16
 8000fa8: 00 0a                        	lsrs	r0, r0, #8
 8000faa: cd f8 ae 63                  	str.w	r6, [sp, #942]
 8000fae: a2 9e                        	ldr	r6, [sp, #648]
 8000fb0: a2 90                        	str	r0, [sp, #648]
 8000fb2: ad f8 ac 63                  	strh.w	r6, [sp, #940]
 8000fb6: 0f 26                        	movs	r6, #15
 8000fb8: 07 f8 48 6c                  	strb	r6, [r7, #-72]
 8000fbc: a3 93                        	str	r3, [sp, #652]
 8000fbe: dd f8 78 e0                  	ldr.w	lr, [sp, #120]
 8000fc2: cd f8 94 92                  	str.w	r9, [sp, #660]
 8000fc6: dd f8 9c 80                  	ldr.w	r8, [sp, #156]
 8000fca: 23 99                        	ldr	r1, [sp, #140]
 8000fcc: 04 f0 c2 bc                  	b.w	#18820 <$t.24+0x17d2>
 8000fd0: a6 90                        	str	r0, [sp, #664]
 8000fd2: 4f f0 01 0e                  	mov.w	lr, #1
 8000fd6: 4f f0 00 0c                  	mov.w	r12, #0
 8000fda: 4f f0 00 0b                  	mov.w	r11, #0
 8000fde: 00 20                        	movs	r0, #0
 8000fe0: 95 90                        	str	r0, [sp, #596]
 8000fe2: 00 20                        	movs	r0, #0
 8000fe4: a1 90                        	str	r0, [sp, #644]
 8000fe6: 00 20                        	movs	r0, #0
 8000fe8: 9a 90                        	str	r0, [sp, #616]
 8000fea: 00 20                        	movs	r0, #0
 8000fec: 1f 90                        	str	r0, [sp, #124]
 8000fee: 01 22                        	movs	r2, #1
;         self
 8000ff0: 9d f8 0e 04                  	ldrb.w	r0, [sp, #1038]
;                 to_number_of_completed_packets(payload)?,
 8000ff4: 00 2a                        	cmp	r2, #0
;         self
 8000ff6: bd f8 0c 34                  	ldrh.w	r3, [sp, #1036]
 8000ffa: dd f8 20 65                  	ldr.w	r6, [sp, #1312]
 8000ffe: 57 f8 48 4c                  	ldr	r4, [r7, #-72]
 8001002: 37 f8 44 1c                  	ldrh	r1, [r7, #-68]
 8001006: dd f8 23 55                  	ldr.w	r5, [sp, #1315]
 800100a: fc 96                        	str	r6, [sp, #1008]
 800100c: 8d f8 ce 03                  	strb.w	r0, [sp, #974]
 8001010: ad f8 cc 33                  	strh.w	r3, [sp, #972]
 8001014: cd f8 f3 53                  	str.w	r5, [sp, #1011]
 8001018: cd f8 00 44                  	str.w	r4, [sp, #1024]
 800101c: ad f8 04 14                  	strh.w	r1, [sp, #1028]
;                 to_number_of_completed_packets(payload)?,
 8001020: 4d d0                        	beq	#154 <$t.8+0x1ce>
;         Err(v)
 8001022: 9d f8 ce 03                  	ldrb.w	r0, [sp, #974]
 8001026: 07 f8 45 0c                  	strb	r0, [r7, #-69]
 800102a: 96 98                        	ldr	r0, [sp, #600]
 800102c: 47 f8 3c 0c                  	str	r0, [r7, #-60]
 8001030: a6 98                        	ldr	r0, [sp, #664]
 8001032: 47 f8 40 0c                  	str	r0, [r7, #-64]
 8001036: a9 98                        	ldr	r0, [sp, #676]
 8001038: 47 f8 44 0c                  	str	r0, [r7, #-68]
 800103c: 90 98                        	ldr	r0, [sp, #576]
 800103e: 8d f8 ad 03                  	strb.w	r0, [sp, #941]
 8001042: 1f 98                        	ldr	r0, [sp, #124]
 8001044: 8d f8 ac 03                  	strb.w	r0, [sp, #940]
 8001048: 4f ea 1c 60                  	lsr.w	r0, r12, #24
 800104c: 40 ea 0b 20                  	orr.w	r0, r0, r11, lsl #8
 8001050: a4 90                        	str	r0, [sp, #656]
 8001052: 92 98                        	ldr	r0, [sp, #584]
 8001054: fc 9c                        	ldr	r4, [sp, #1008]
 8001056: 9d f8 f6 33                  	ldrb.w	r3, [sp, #1014]
 800105a: c0 b2                        	uxtb	r0, r0
 800105c: bd f8 f4 63                  	ldrh.w	r6, [sp, #1012]
 8001060: 40 ea 0c 20                  	orr.w	r0, r0, r12, lsl #8
 8001064: 96 90                        	str	r0, [sp, #600]
 8001066: 4f f6 ff 70                  	movw	r0, #65535
 800106a: dd f8 00 14                  	ldr.w	r1, [sp, #1024]
;     .map_err(|e| nb::Error::Other(Error::BLE(e)))
 800106e: 29 ea 00 00                  	bic.w	r0, r9, r0
;         Err(v)
 8001072: a6 90                        	str	r0, [sp, #664]
 8001074: 4f ea 19 60                  	lsr.w	r0, r9, #24
 8001078: ed 91                        	str	r1, [sp, #948]
;     .map_err(|e| nb::Error::Other(Error::BLE(e)))
 800107a: a9 90                        	str	r0, [sp, #676]
 800107c: 29 f0 ff 00                  	bic	r0, r9, #255
;         Err(v)
 8001080: a5 90                        	str	r0, [sp, #660]
 8001082: 20 0e                        	lsrs	r0, r4, #24
 8001084: a3 90                        	str	r0, [sp, #652]
 8001086: 20 0c                        	lsrs	r0, r4, #16
 8001088: 46 ea 03 41                  	orr.w	r1, r6, r3, lsl #16
 800108c: a2 90                        	str	r0, [sp, #648]
 800108e: 20 0a                        	lsrs	r0, r4, #8
 8001090: bd f8 04 24                  	ldrh.w	r2, [sp, #1028]
 8001094: 9d 90                        	str	r0, [sp, #628]
 8001096: 08 0c                        	lsrs	r0, r1, #16
 8001098: bd f8 cc 53                  	ldrh.w	r5, [sp, #972]
 800109c: cd e9 9f 01                  	strd	r0, r1, [sp, #636]
 80010a0: 08 0a                        	lsrs	r0, r1, #8
 80010a2: 07 f8 48 ec                  	strb	lr, [r7, #-72]
 80010a6: 27 f8 47 5c                  	strh	r5, [r7, #-71]
 80010aa: ad f8 b8 23                  	strh.w	r2, [sp, #952]
 80010ae: cd f8 ae 83                  	str.w	r8, [sp, #942]
 80010b2: cd f8 9c 92                  	str.w	r9, [sp, #668]
 80010b6: 9c 94                        	str	r4, [sp, #624]
 80010b8: 9e 90                        	str	r0, [sp, #632]
 80010ba: 02 f0 5c be                  	b.w	#11448 <$t.18+0xa5e>
;             0x13 => Ok(Event::NumberOfCompletedPackets(
 80010be: bd f8 cc 03                  	ldrh.w	r0, [sp, #972]
 80010c2: 07 26                        	movs	r6, #7
 80010c4: 27 f8 3f 0c                  	strh	r0, [r7, #-63]
 80010c8: a9 98                        	ldr	r0, [sp, #676]
 80010ca: 47 f8 3c 0c                  	str	r0, [r7, #-60]
 80010ce: 98 98                        	ldr	r0, [sp, #608]
 80010d0: 8d f8 b9 03                  	strb.w	r0, [sp, #953]
 80010d4: 99 98                        	ldr	r0, [sp, #612]
 80010d6: 8d f8 b8 03                  	strb.w	r0, [sp, #952]
 80010da: bd f8 04 04                  	ldrh.w	r0, [sp, #1028]
 80010de: ad f8 b0 03                  	strh.w	r0, [sp, #944]
 80010e2: 4f ea 1c 60                  	lsr.w	r0, r12, #24
 80010e6: a4 90                        	str	r0, [sp, #656]
 80010e8: 4f ea 1c 40                  	lsr.w	r0, r12, #16
 80010ec: 99 90                        	str	r0, [sp, #612]
 80010ee: 4f ea 1c 20                  	lsr.w	r0, r12, #8
 80010f2: dd f8 f1 43                  	ldr.w	r4, [sp, #1009]
 80010f6: a9 90                        	str	r0, [sp, #676]
 80010f8: 4f ea 18 60                  	lsr.w	r0, r8, #24
 80010fc: 94 90                        	str	r0, [sp, #592]
 80010fe: 4f ea 18 40                  	lsr.w	r0, r8, #16
 8001102: 93 90                        	str	r0, [sp, #588]
 8001104: 4f ea 18 20                  	lsr.w	r0, r8, #8
 8001108: 98 90                        	str	r0, [sp, #608]
 800110a: 20 0e                        	lsrs	r0, r4, #24
 800110c: a0 90                        	str	r0, [sp, #640]
 800110e: 20 0c                        	lsrs	r0, r4, #16
 8001110: a3 90                        	str	r0, [sp, #652]
 8001112: 20 0a                        	lsrs	r0, r4, #8
 8001114: a2 90                        	str	r0, [sp, #648]
 8001116: 4f ea 1b 20                  	lsr.w	r0, r11, #8
 800111a: a5 90                        	str	r0, [sp, #660]
 800111c: 9d f8 f0 23                  	ldrb.w	r2, [sp, #1008]
 8001120: 9c 92                        	str	r2, [sp, #624]
 8001122: 9d f8 f5 23                  	ldrb.w	r2, [sp, #1013]
 8001126: 9e 92                        	str	r2, [sp, #632]
 8001128: 9d f8 f6 23                  	ldrb.w	r2, [sp, #1014]
 800112c: 9d f8 ce 13                  	ldrb.w	r1, [sp, #974]
 8001130: 9f 92                        	str	r2, [sp, #636]
 8001132: 9d f8 c6 23                  	ldrb.w	r2, [sp, #966]
 8001136: bd f8 c4 33                  	ldrh.w	r3, [sp, #964]
 800113a: 27 f8 47 3c                  	strh	r3, [r7, #-71]
 800113e: 07 f8 45 2c                  	strb	r2, [r7, #-69]
 8001142: 07 f8 3d 1c                  	strb	r1, [r7, #-61]
 8001146: dd f8 00 14                  	ldr.w	r1, [sp, #1024]
 800114a: f8 9a                        	ldr	r2, [sp, #992]
 800114c: dd f8 e3 33                  	ldr.w	r3, [sp, #995]
 8001150: cd f8 0c 24                  	str.w	r2, [sp, #1036]
 8001154: 4f ea 1b 42                  	lsr.w	r2, r11, #16
 8001158: 07 f8 40 ec                  	strb	lr, [r7, #-64]
 800115c: 07 f8 48 6c                  	strb	r6, [r7, #-72]
 8001160: 47 f8 44 ac                  	str	r10, [r7, #-68]
 8001164: cd f8 b4 93                  	str.w	r9, [sp, #948]
 8001168: eb 91                        	str	r1, [sp, #940]
 800116a: cd f8 0f 34                  	str.w	r3, [sp, #1039]
 800116e: cd f8 9c c2                  	str.w	r12, [sp, #668]
 8001172: cd f8 44 82                  	str.w	r8, [sp, #580]
 8001176: 9d 94                        	str	r4, [sp, #628]
 8001178: cd f8 3c b2                  	str.w	r11, [sp, #572]
 800117c: dd f8 78 e0                  	ldr.w	lr, [sp, #120]
 8001180: 04 f0 df bb                  	b.w	#18366 <$t.24+0x17c0>
 8001184: 0d f5 83 6e                  	add.w	lr, sp, #1048
 8001188: 02 20                        	movs	r0, #2
 800118a: 04 22                        	movs	r2, #4
 800118c: 1b e0                        	b	#54 <$t.8+0x2d6>
 800118e: 0d f5 83 6e                  	add.w	lr, sp, #1048
 8001192: 02 20                        	movs	r0, #2
 8001194: 08 22                        	movs	r2, #8
;         self
 8001196: 40 ea 01 20                  	orr.w	r0, r0, r1, lsl #8
;         Err(v)
 800119a: 47 e9 11 42                  	strd	r4, r2, [r7, #-68]
 800119e: 27 f8 48 0c                  	strh	r0, [r7, #-72]
 80011a2: ff f7 73 b9                  	b.w	#-3354 <$t.2+0xce>
 80011a6: 02 22                        	movs	r2, #2
 80011a8: 0d f5 83 6e                  	add.w	lr, sp, #1048
 80011ac: 14 e0                        	b	#40 <$t.8+0x2e8>
 80011ae: 02 20                        	movs	r0, #2
 80011b0: 00 24                        	movs	r4, #0
 80011b2: 0d f5 83 6e                  	add.w	lr, sp, #1048
 80011b6: 00 f0 e7 bc                  	b.w	#2510 <$t.14+0x122>
 80011ba: 02 20                        	movs	r0, #2
 80011bc: 73 e0                        	b	#230 <$t.10+0xe>
 80011be: 02 20                        	movs	r0, #2
 80011c0: 0d f5 83 6e                  	add.w	lr, sp, #1048
 80011c4: 03 22                        	movs	r2, #3
 80011c6: 47 f8 40 2c                  	str	r2, [r7, #-64]
 80011ca: 47 f8 44 4c                  	str	r4, [r7, #-68]
 80011ce: 07 f8 47 1c                  	strb	r1, [r7, #-71]
 80011d2: ff f7 59 b9                  	b.w	#-3406 <$t.2+0xca>
 80011d6: 03 22                        	movs	r2, #3
 80011d8: 00 23                        	movs	r3, #0
 80011da: 47 f8 3c 3c                  	str	r3, [r7, #-60]
 80011de: 47 f8 40 0c                  	str	r0, [r7, #-64]
 80011e2: 00 20                        	movs	r0, #0
 80011e4: 47 f8 44 4c                  	str	r4, [r7, #-68]
 80011e8: 27 f8 46 3c                  	strh	r3, [r7, #-70]
 80011ec: 07 f8 47 1c                  	strb	r1, [r7, #-71]
 80011f0: a9 90                        	str	r0, [sp, #676]
 80011f2: 07 f8 48 2c                  	strb	r2, [r7, #-72]
 80011f6: ff f7 4b b9                  	b.w	#-3434 <$t.2+0xd2>
 80011fa: 40 f6 2c 40                  	movw	r0, #3116
;             crate::opcode::Opcode(0x0000) => ReturnParameters::Spontaneous,
 80011fe: 82 42                        	cmp	r2, r0
 8001200: 00 f3 22 84                  	bgt.w	#2116 <$t.12+0x4c6>
 8001204: 00 2a                        	cmp	r2, #0
 8001206: 00 f0 28 87                  	beq.w	#3664 <$t.14+0x5f4>
 800120a: 40 f6 01 40                  	movw	r0, #3073
 800120e: 82 42                        	cmp	r2, r0
 8001210: 00 f0 12 87                  	beq.w	#3620 <$t.14+0x5d2>
 8001214: 40 f6 03 40                  	movw	r0, #3075
 8001218: 82 42                        	cmp	r2, r0
 800121a: 40 f0 60 87                  	bne.w	#3776 <$t.14+0x678>
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 800121e: 03 2c                        	cmp	r4, #3
 8001220: 0b f0 60 81                  	beq.w	#45760 <$t.42+0x32a>
 8001224: 9d f8 ae 02                  	ldrb.w	r0, [sp, #686]
 8001228: 11 f0 1a f9                  	bl	#70196
 800122c: a4 91                        	str	r1, [sp, #656]
 800122e: 00 21                        	movs	r1, #0
 8001230: 0f 91                        	str	r1, [sp, #60]
;             crate::opcode::RESET => ReturnParameters::Reset(to_status(&bytes[3..])?),
 8001232: c0 07                        	lsls	r0, r0, #31
 8001234: 4f f0 02 00                  	mov.w	r0, #2
 8001238: 14 90                        	str	r0, [sp, #80]
 800123a: 4f f0 00 00                  	mov.w	r0, #0
 800123e: a7 90                        	str	r0, [sp, #668]
 8001240: 4f f0 00 00                  	mov.w	r0, #0
 8001244: 1d 90                        	str	r0, [sp, #116]
 8001246: 4f f0 00 00                  	mov.w	r0, #0
 800124a: 1c 90                        	str	r0, [sp, #112]
 800124c: 4f f0 00 00                  	mov.w	r0, #0
 8001250: 1b 90                        	str	r0, [sp, #108]
 8001252: 4f f0 00 00                  	mov.w	r0, #0
 8001256: a5 90                        	str	r0, [sp, #660]
 8001258: 4f f0 00 00                  	mov.w	r0, #0
 800125c: 1a 90                        	str	r0, [sp, #104]
 800125e: 4f f0 00 00                  	mov.w	r0, #0
 8001262: 13 90                        	str	r0, [sp, #76]
 8001264: 4f f0 00 00                  	mov.w	r0, #0
 8001268: 19 90                        	str	r0, [sp, #100]
 800126a: 4f f0 00 00                  	mov.w	r0, #0
 800126e: 10 90                        	str	r0, [sp, #64]
 8001270: 4f f0 00 00                  	mov.w	r0, #0
 8001274: 04 f0 52 82                  	beq.w	#17572 <$t.24+0x159a>
 8001278: 04 f0 a3 ba                  	b.w	#17734 <$t.24+0x1640>
 800127c: a0 f5 80 62                  	sub.w	r2, r0, #1024
 8001280: 08 2a                        	cmp	r2, #8
 8001282: 00 f2 4a 86                  	bhi.w	#3220 <$t.14+0x4b4>
 8001286: df e8 12 f0                  	tbh	[pc, r2, lsl #1]

0800128a $d.9:
 800128a:	09 00 b1 0d	.word	0x0db10009
 800128e:	84 0d 96 0d	.word	0x0d960d84
 8001292:	82 0d eb 0d	.word	0x0deb0d82
 8001296:	f4 0d a8 0d	.word	0x0da80df4
 800129a:	fd 0d		.short	0x0dfd

0800129c $t.10:
 800129c: 01 20                        	movs	r0, #1
 800129e: 01 f0 e0 bd                  	b.w	#7104 <$t.16+0xa5c>
 80012a2: 05 20                        	movs	r0, #5
 80012a4: 0d 46                        	mov	r5, r1
 80012a6: 0d f5 83 6e                  	add.w	lr, sp, #1048
 80012aa: 04 21                        	movs	r1, #4
;         Err(v)
 80012ac: 47 e9 11 41                  	strd	r4, r1, [r7, #-68]
 80012b0: 07 f8 47 5c                  	strb	r5, [r7, #-71]
 80012b4: ff f7 e8 b8                  	b.w	#-3632 <$t.2+0xca>
;         if $left.len() != $right {
 80012b8: 0d 2c                        	cmp	r4, #13
 80012ba: 40 f0 74 84                  	bne.w	#2280 <$t.14+0x140>
; }
 80012be: bd f8 b6 02                  	ldrh.w	r0, [sp, #694]
 80012c2: 00 23                        	movs	r3, #0
;     copy_nonoverlapping(src, dst, count)
 80012c4: 32 68                        	ldr	r2, [r6]
 80012c6: 00 25                        	movs	r5, #0
 80012c8: d6 f8 04 90                  	ldr.w	r9, [r6, #4]
 80012cc: bd f8 ac e2                  	ldrh.w	lr, [sp, #684]
; }
 80012d0: 22 f0 ff 06                  	bic	r6, r2, #255
 80012d4: 4f ea 00 4c                  	lsl.w	r12, r0, #16
 80012d8: 5f fa 82 f8                  	uxtb.w	r8, r2
 80012dc: 00 f0 6d bc                  	b.w	#2266 <$t.14+0x154>
;         if $left.len() != $right {
 80012e0: 0a 2c                        	cmp	r4, #10
 80012e2: 40 f0 da 84                  	bne.w	#2484 <$t.14+0x234>
;         status: payload[1].try_into().map_err(rewrap_bad_status)?,
 80012e6: 9d f8 ac 02                  	ldrb.w	r0, [sp, #684]
 80012ea: 11 f0 b9 f8                  	bl	#70002
 80012ee: c0 07                        	lsls	r0, r0, #31
 80012f0: 4f f0 00 05                  	mov.w	r5, #0
 80012f4: 40 f0 27 86                  	bne.w	#3150 <$t.14+0x4e0>
;     copy_nonoverlapping(src, dst, count)
 80012f8: bd f8 b3 62                  	ldrh.w	r6, [sp, #691]
 80012fc: 64 22                        	movs	r2, #100
 80012fe: a7 91                        	str	r1, [sp, #668]
 8001300: 00 21                        	movs	r1, #0
 8001302: 00 23                        	movs	r3, #0
 8001304: 30 46                        	mov	r0, r6
 8001306: 1a f0 fd ff                  	bl	#110586
 800130a: 43 f2 00 62                  	movw	r2, #13824
 800130e: bd f8 af b2                  	ldrh.w	r11, [sp, #687]
 8001312: cc f2 65 42                  	movt	r2, #50277
 8001316: 8a 46                        	mov	r10, r1
 8001318: 80 fb 02 94                  	smull	r9, r4, r0, r2
 800131c: 49 f2 80 62                  	movw	r2, #38528
 8001320: c0 f2 98 02                  	movt	r2, #152
 8001324: bd f8 ad 12                  	ldrh.w	r1, [sp, #685]
 8001328: e6 fb 02 94                  	umlal	r9, r4, r6, r2
 800132c: 06 46                        	mov	r6, r0
 800132e: 01 20                        	movs	r0, #1
 8001330: 9b 91                        	str	r1, [sp, #620]
;         self.interval = Some((min, max));
 8001332: cd f8 18 04                  	str.w	r0, [sp, #1048]
 8001336: 00 21                        	movs	r1, #0
;         self.supervision_timeout = Some(timeout);
 8001338: cd f8 40 04                  	str.w	r0, [sp, #1088]
 800133c: 4f f4 48 72                  	mov.w	r2, #800
;         self.conn_latency = Some(latency);
 8001340: ad f8 58 04                  	strh.w	r0, [sp, #1112]
 8001344: 58 46                        	mov	r0, r11
 8001346: 00 23                        	movs	r3, #0
;     copy_nonoverlapping(src, dst, count)
 8001348: bd f8 b1 82                  	ldrh.w	r8, [sp, #689]
;         self.interval = Some((min, max));
 800134c: cd f8 1c 54                  	str.w	r5, [sp, #1052]
;         self.supervision_timeout = Some(timeout);
 8001350: cd f8 44 54                  	str.w	r5, [sp, #1092]
 8001354: 1a f0 d6 ff                  	bl	#110508
 8001358: 43 f2 00 62                  	movw	r2, #13824
;         self.interval = Some((min, max));
 800135c: cd f8 34 14                  	str.w	r1, [sp, #1076]
 8001360: cc f2 65 42                  	movt	r2, #50277
 8001364: cd f8 24 14                  	str.w	r1, [sp, #1060]
 8001368: 80 fb 02 53                  	smull	r5, r3, r0, r2
 800136c: 41 f2 d0 22                  	movw	r2, #4816
 8001370: c0 f2 13 02                  	movt	r2, #19
 8001374: cd f8 30 04                  	str.w	r0, [sp, #1072]
 8001378: eb fb 02 53                  	umlal	r5, r3, r11, r2
 800137c: 83 46                        	mov	r11, r0
 800137e: cd f8 20 04                  	str.w	r0, [sp, #1056]
 8001382: 0d f5 a4 60                  	add.w	r0, sp, #1312
 8001386: 0d f5 83 61                  	add.w	r1, sp, #1048
;         self.supervision_timeout = Some(timeout);
 800138a: cd f8 98 a2                  	str.w	r10, [sp, #664]
 800138e: cd f8 4c a4                  	str.w	r10, [sp, #1100]
 8001392: c2 46                        	mov	r10, r8
;         self.conn_latency = Some(latency);
 8001394: ad f8 5a 84                  	strh.w	r8, [sp, #1114]
 8001398: c8 46                        	mov	r8, r9
;         self.supervision_timeout = Some(timeout);
 800139a: cd f8 48 64                  	str.w	r6, [sp, #1096]
;         self.interval = Some((min, max));
 800139e: cd f8 38 54                  	str.w	r5, [sp, #1080]
 80013a2: cd f8 28 54                  	str.w	r5, [sp, #1064]
;         self.supervision_timeout = Some(timeout);
 80013a6: cd f8 50 94                  	str.w	r9, [sp, #1104]
;         ConnectionIntervalBuilder::new()
 80013aa: 14 f0 64 f8                  	bl	#82120
;         self
 80013ae: dd f8 4a 05                  	ldr.w	r0, [sp, #1354]
 80013b2: cd f8 0c 04                  	str.w	r0, [sp, #1036]
 80013b6: bd f8 4e 05                  	ldrh.w	r0, [sp, #1358]
 80013ba: ad f8 10 04                  	strh.w	r0, [sp, #1040]
 80013be: dd f8 20 05                  	ldr.w	r0, [sp, #1312]
 80013c2: dd f8 24 15                  	ldr.w	r1, [sp, #1316]
;             .build()?;
 80013c6: 80 f0 01 00                  	eor	r0, r0, #1
 80013ca: 08 43                        	orrs	r0, r1
 80013cc: 41 f0 00 83                  	bne.w	#5632 <$t.16+0x5ca>
 80013d0: dd f8 40 65                  	ldr.w	r6, [sp, #1344]
 80013d4: 0d f5 a6 65                  	add.w	r5, sp, #1328
 80013d8: dd f8 2c 05                  	ldr.w	r0, [sp, #1324]
 80013dc: dd f8 44 25                  	ldr.w	r2, [sp, #1348]
 80013e0: a6 90                        	str	r0, [sp, #664]
 80013e2: 29 cd                        	ldm	r5, {r0, r3, r5}
;             .map_err(Error::BadConnectionInterval)?,
 80013e4: 5f fa 83 fc                  	uxtb.w	r12, r3
;         Err(v)
 80013e8: 23 f0 ff 09                  	bic	r9, r3, #255
 80013ec: bd f8 10 14                  	ldrh.w	r1, [sp, #1040]
;             .map_err(Error::BadConnectionInterval)?,
 80013f0: 20 f0 ff 0e                  	bic	lr, r0, #255
 80013f4: dd f8 3c 45                  	ldr.w	r4, [sp, #1340]
;         Err(v)
 80013f8: ad f8 d0 13                  	strh.w	r1, [sp, #976]
;             Err(e) => Err(op(e)),
 80013fc: 31 0c                        	lsrs	r1, r6, #16
 80013fe: 41 ea 02 41                  	orr.w	r1, r1, r2, lsl #16
 8001402: a7 91                        	str	r1, [sp, #668]
;         Err(v)
 8001404: 29 0a                        	lsrs	r1, r5, #8
 8001406: 27 95                        	str	r5, [sp, #156]
;             .map_err(Error::BadConnectionInterval)?,
 8001408: c5 b2                        	uxtb	r5, r0
 800140a: 20 0e                        	lsrs	r0, r4, #24
 800140c: 9f 90                        	str	r0, [sp, #636]
 800140e: 20 0c                        	lsrs	r0, r4, #16
;         Err(v)
 8001410: 41 ea 04 61                  	orr.w	r1, r1, r4, lsl #24
 8001414: 9e 90                        	str	r0, [sp, #632]
 8001416: 20 0a                        	lsrs	r0, r4, #8
;             Err(e) => Err(op(e)),
 8001418: b4 b2                        	uxth	r4, r6
 800141a: bd f8 48 a5                  	ldrh.w	r10, [sp, #1352]
 800141e: 23 96                        	str	r6, [sp, #140]
;             .map_err(Error::BadConnectionInterval)?,
 8001420: 26 0a                        	lsrs	r6, r4, #8
;             Err(e) => Err(op(e)),
 8001422: 14 0e                        	lsrs	r4, r2, #24
 8001424: 12 0c                        	lsrs	r2, r2, #16
;         Err(v)
 8001426: 99 92                        	str	r2, [sp, #612]
 8001428: dd f8 0c 24                  	ldr.w	r2, [sp, #1036]
 800142c: f3 92                        	str	r2, [sp, #972]
 800142e: a0 90                        	str	r0, [sp, #640]
;             .map_err(Error::BadConnectionInterval)?,
 8001430: 4f ea 1a 20                  	lsr.w	r0, r10, #8
;             Err(e) => Err(op(e)),
 8001434: 98 94                        	str	r4, [sp, #608]
;     BadConnectionInterval(ConnectionIntervalError),
 8001436: 5f fa 82 f8                  	uxtb.w	r8, r2
 800143a: cd f8 6c a2                  	str.w	r10, [sp, #620]
 800143e: 0d 22                        	movs	r2, #13
 8001440: dd f8 28 b5                  	ldr.w	r11, [sp, #1320]
 8001444: a6 9b                        	ldr	r3, [sp, #664]
 8001446: 9d f8 cd a3                  	ldrb.w	r10, [sp, #973]
 800144a: dd f8 ce 43                  	ldr.w	r4, [sp, #974]
;             .map_err(Error::BadConnectionInterval)?,
 800144e: 9c 91                        	str	r1, [sp, #624]
;             Err(e) => Err(op(e)),
 8001450: 95 96                        	str	r6, [sp, #596]
 8001452: 00 26                        	movs	r6, #0
 8001454: 00 f0 88 bd                  	b.w	#2832 <$t.14+0x502>
;         if $left.len() != $right {
 8001458: 0c 2c                        	cmp	r4, #12
 800145a: 40 f0 30 84                  	bne.w	#2144 <$t.14+0x258>
;         status: payload[1].try_into().map_err(rewrap_bad_status)?,
 800145e: 9d f8 ac 02                  	ldrb.w	r0, [sp, #684]
;     copy_nonoverlapping(src, dst, count)
 8001462: d6 f8 01 40                  	ldr.w	r4, [r6, #1]
 8001466: d6 f8 05 50                  	ldr.w	r5, [r6, #5]
;         status: payload[1].try_into().map_err(rewrap_bad_status)?,
 800146a: 10 f0 f9 ff                  	bl	#69618
 800146e: c0 07                        	lsls	r0, r0, #31
 8001470: 4f f0 00 08                  	mov.w	r8, #0
 8001474: 40 f0 a3 85                  	bne.w	#2886 <$t.14+0x558>
 8001478: d4 f1 1f 02                  	rsbs.w	r2, r4, #31
 800147c: 4f ea 14 23                  	lsr.w	r3, r4, #8
 8001480: 78 eb 05 02                  	sbcs.w	r2, r8, r5
 8001484: 4f ea 14 40                  	lsr.w	r0, r4, #16
 8001488: 22 46                        	mov	r2, r4
 800148a: 40 ea 05 4c                  	orr.w	r12, r0, r5, lsl #16
 800148e: 38 bf                        	it	lo
 8001490: 11 22                        	movlo	r2, #17
 8001492: 43 ea 05 6e                  	orr.w	lr, r3, r5, lsl #24
;                 if (bits & !$BitFlags::all().bits()) == 0 {
 8001496: b4 f1 20 03                  	subs.w	r3, r4, #32
;             .ok_or_else(|| Error::BadRemoteUsedFeatureFlag(feature_flags))?,
 800149a: a9 95                        	str	r5, [sp, #676]
;                 if (bits & !$BitFlags::all().bits()) == 0 {
 800149c: 75 f1 00 03                  	sbcs	r3, r5, #0
;             .ok_or_else(|| Error::BadRemoteUsedFeatureFlag(feature_flags))?,
 80014a0: c1 f0 fd 82                  	blo.w	#5626 <$t.16+0x698>
 80014a4: 04 f0 7f 46                  	and	r6, r4, #4278190080
 80014a8: 4f f0 00 08                  	mov.w	r8, #0
 80014ac: 01 23                        	movs	r3, #1
 80014ae: 96 95                        	str	r5, [sp, #600]
 80014b0: 01 f0 fc ba                  	b.w	#5624 <$t.16+0x6a6>
;         if self.start > self.end {
 80014b4: 01 2c                        	cmp	r4, #1
 80014b6: 4b f2 1a 80                  	bls.w	#45108 <$t.42+0x334>
;         intrinsics::offset(self, count)
 80014ba: 08 f1 05 05                  	add.w	r5, r8, #5
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 80014be: 02 3c                        	subs	r4, #2
 80014c0: 4f f0 00 09                  	mov.w	r9, #0
 80014c4: 9d 94                        	str	r4, [sp, #628]
 80014c6: a9 95                        	str	r5, [sp, #676]
;         if self.next_index >= self.event_data.len() {
 80014c8: a1 45                        	cmp	r9, r4
 80014ca: 13 d2                        	bhs	#38 <$t.10+0x25c>
;         let data_len_index = addr_index + 6;
 80014cc: 09 f1 08 02                  	add.w	r2, r9, #8
;         let data_len = self.event_data[data_len_index] as usize;
 80014d0: a2 42                        	cmp	r2, r4
 80014d2: 8a f0 ec 87                  	bhs.w	#45016 <$t.42+0x2f4>
 80014d6: 15 f8 02 e0                  	ldrb.w	lr, [r5, r2]
;         let data_start_index = data_len_index + 1;
 80014da: 09 f1 09 00                  	add.w	r0, r9, #9
;         let rssi_index = data_start_index + data_len;
 80014de: 00 eb 0e 0a                  	add.w	r10, r0, lr
;         self.next_index = rssi_index + 1;
 80014e2: 0a f1 01 0c                  	add.w	r12, r10, #1
;         if self.next_index > self.event_data.len() {
 80014e6: a4 45                        	cmp	r12, r4
 80014e8: 2f d9                        	bls	#94 <$t.10+0x2b2>
 80014ea: 01 20                        	movs	r0, #1
 80014ec: 4f f0 0f 0e                  	mov.w	lr, #15
 80014f0: e1 46                        	mov	r9, r12
 80014f2: 15 e0                        	b	#42 <$t.10+0x288>
 80014f4: 00 20                        	movs	r0, #0
 80014f6: 4f f0 00 0a                  	mov.w	r10, #0
 80014fa: a3 90                        	str	r0, [sp, #652]
 80014fc: 00 20                        	movs	r0, #0
 80014fe: a6 90                        	str	r0, [sp, #664]
 8001500: 00 20                        	movs	r0, #0
 8001502: a5 90                        	str	r0, [sp, #660]
 8001504: 00 20                        	movs	r0, #0
 8001506: a4 90                        	str	r0, [sp, #656]
 8001508: 00 20                        	movs	r0, #0
 800150a: a2 90                        	str	r0, [sp, #648]
 800150c: 00 20                        	movs	r0, #0
 800150e: 9f 90                        	str	r0, [sp, #636]
 8001510: 00 20                        	movs	r0, #0
 8001512: a0 90                        	str	r0, [sp, #640]
 8001514: 02 23                        	movs	r3, #2
 8001516: 4f f0 00 0e                  	mov.w	lr, #0
 800151a: 4f f0 00 08                  	mov.w	r8, #0
 800151e: 00 20                        	movs	r0, #0
;         self
 8001520: dd f8 1b 24                  	ldr.w	r2, [sp, #1051]
;     while let Some(_) = check_iter.next()? {}
 8001524: 00 28                        	cmp	r0, #0
;         self
 8001526: dd f8 0c 64                  	ldr.w	r6, [sp, #1036]
 800152a: bd f8 10 54                  	ldrh.w	r5, [sp, #1040]
 800152e: dd f8 18 14                  	ldr.w	r1, [sp, #1048]
 8001532: cd f8 f3 23                  	str.w	r2, [sp, #1011]
 8001536: fc 91                        	str	r1, [sp, #1008]
 8001538: ef 96                        	str	r6, [sp, #956]
 800153a: ad f8 c0 53                  	strh.w	r5, [sp, #960]
;     while let Some(_) = check_iter.next()? {}
 800153e: 40 f0 dc 83                  	bne.w	#1976 <$t.14+0x294>
 8001542: a9 9d                        	ldr	r5, [sp, #676]
 8001544: 02 2b                        	cmp	r3, #2
 8001546: bf d1                        	bne	#-130 <$t.10+0x230>
 8001548: db e0                        	b	#438 <$t.12+0x180>
 800154a: 09 f1 02 03                  	add.w	r3, r9, #2
;         if self.start > self.end {
 800154e: 9a 42                        	cmp	r2, r3
 8001550: ca f0 ba 87                  	blo.w	#44916 <$t.42+0x30e>
;             event_type: self.event_data[event_type_index]
 8001554: 15 f8 09 80                  	ldrb.w	r8, [r5, r9]
;             0 => Ok(AdvertisementEvent::Advertisement),
 8001558: b8 f1 04 0f                  	cmp.w	r8, #4
 800155c: 00 f2 9b 80                  	bhi.w	#310 <$t.12+0x114>
 8001560: e9 5a                        	ldrh	r1, [r5, r3]
 8001562: 2b 44                        	add	r3, r5
 8001564: 09 f1 01 02                  	add.w	r2, r9, #1
 8001568: 99 91                        	str	r1, [sp, #612]
 800156a: d9 78                        	ldrb	r1, [r3, #3]
 800156c: a6 91                        	str	r1, [sp, #664]
 800156e: 19 79                        	ldrb	r1, [r3, #4]
 8001570: a5 91                        	str	r1, [sp, #660]
 8001572: 59 79                        	ldrb	r1, [r3, #5]
 8001574: a4 91                        	str	r1, [sp, #656]
 8001576: 00 21                        	movs	r1, #0
 8001578: 93 f8 02 90                  	ldrb.w	r9, [r3, #2]
 800157c: df e8 08 f0                  	tbb	[pc, r8]

08001580 $d.11:
 8001580:	0a 03 07 09	.word	0x0907030a
 8001584:	05 00		.short	0x0005

08001586 $t.12:
 8001586: 01 21                        	movs	r1, #1
 8001588: 04 e0                        	b	#8 <$t.12+0x12>
 800158a: 04 21                        	movs	r1, #4
 800158c: 02 e0                        	b	#4 <$t.12+0x12>
 800158e: 02 21                        	movs	r1, #2
 8001590: 00 e0                        	b	#0 <$t.12+0x12>
 8001592: 03 21                        	movs	r1, #3
 8001594: a2 91                        	str	r1, [sp, #648]
 8001596: 9d 99                        	ldr	r1, [sp, #628]
;         self
 8001598: dd f8 23 35                  	ldr.w	r3, [sp, #1315]
 800159c: f3 9e                        	ldr	r6, [sp, #972]
;             address: crate::to_bd_addr_type(self.event_data[addr_type_index], bd_addr)
 800159e: 8a 42                        	cmp	r2, r1
;         self
 80015a0: bd f8 d0 53                  	ldrh.w	r5, [sp, #976]
 80015a4: dd f8 20 45                  	ldr.w	r4, [sp, #1312]
 80015a8: 47 f8 45 3c                  	str	r3, [r7, #-69]
 80015ac: 47 f8 48 4c                  	str	r4, [r7, #-72]
 80015b0: f1 96                        	str	r6, [sp, #964]
 80015b2: ad f8 c8 53                  	strh.w	r5, [sp, #968]
;             address: crate::to_bd_addr_type(self.event_data[addr_type_index], bd_addr)
 80015b6: 8a f0 8c 87                  	bhs.w	#44824 <$t.42+0x318>
 80015ba: a9 99                        	ldr	r1, [sp, #676]
 80015bc: 11 f8 02 80                  	ldrb.w	r8, [r1, r2]
;         0 => Ok(BdAddrType::Public(addr)),
 80015c0: b8 f1 00 0f                  	cmp.w	r8, #0
 80015c4: 05 d0                        	beq	#10 <$t.12+0x50>
 80015c6: b8 f1 01 0f                  	cmp.w	r8, #1
 80015ca: 08 d1                        	bne	#16 <$t.12+0x5c>
 80015cc: 4f f0 01 08                  	mov.w	r8, #1
 80015d0: 01 e0                        	b	#2 <$t.12+0x54>
 80015d2: 4f f0 00 08                  	mov.w	r8, #0
 80015d6: 00 22                        	movs	r2, #0
 80015d8: cd f8 6c 82                  	str.w	r8, [sp, #620]
 80015dc: 08 e0                        	b	#16 <$t.12+0x6e>
 80015de: a1 99                        	ldr	r1, [sp, #644]
 80015e0: 01 22                        	movs	r2, #1
 80015e2: a4 91                        	str	r1, [sp, #656]
 80015e4: 9e 99                        	ldr	r1, [sp, #632]
 80015e6: a5 91                        	str	r1, [sp, #660]
 80015e8: 9c 99                        	ldr	r1, [sp, #624]
 80015ea: dd f8 9c 92                  	ldr.w	r9, [sp, #668]
 80015ee: a6 91                        	str	r1, [sp, #664]
;         self
 80015f0: dd f8 1b 44                  	ldr.w	r4, [sp, #1051]
 80015f4: dd f8 0c 54                  	ldr.w	r5, [sp, #1036]
 80015f8: bd f8 10 64                  	ldrh.w	r6, [sp, #1040]
 80015fc: dd f8 18 34                  	ldr.w	r3, [sp, #1048]
 8001600: cd f8 23 45                  	str.w	r4, [sp, #1315]
 8001604: cd f8 20 35                  	str.w	r3, [sp, #1312]
 8001608: f3 95                        	str	r5, [sp, #972]
 800160a: ad f8 d0 63                  	strh.w	r6, [sp, #976]
;                 .map_err(rewrap_bd_addr_type_err)?,
 800160e: cd f8 8c 92                  	str.w	r9, [sp, #652]
 8001612: e2 b1                        	cbz	r2, #56
;         Err(v)
 8001614: dd f8 23 15                  	ldr.w	r1, [sp, #1315]
 8001618: 4f f0 0c 0e                  	mov.w	lr, #12
 800161c: cd f8 1b 14                  	str.w	r1, [sp, #1051]
 8001620: a4 99                        	ldr	r1, [sp, #656]
 8001622: a1 91                        	str	r1, [sp, #644]
 8001624: a5 99                        	ldr	r1, [sp, #660]
 8001626: 9e 91                        	str	r1, [sp, #632]
 8001628: a6 99                        	ldr	r1, [sp, #664]
 800162a: 9c 91                        	str	r1, [sp, #624]
 800162c: dd f8 20 05                  	ldr.w	r0, [sp, #1312]
 8001630: f3 9a                        	ldr	r2, [sp, #972]
 8001632: bd f8 d0 33                  	ldrh.w	r3, [sp, #976]
 8001636: cd f8 18 04                  	str.w	r0, [sp, #1048]
 800163a: 01 20                        	movs	r0, #1
 800163c: ad f8 10 34                  	strh.w	r3, [sp, #1040]
 8001640: cd f8 9c 92                  	str.w	r9, [sp, #668]
 8001644: e1 46                        	mov	r9, r12
 8001646: cd f8 0c 24                  	str.w	r2, [sp, #1036]
 800164a: 9d 9c                        	ldr	r4, [sp, #628]
 800164c: 68 e7                        	b	#-304 <$t.10+0x288>
 800164e: 9d 9c                        	ldr	r4, [sp, #628]
;         if self.start > self.end {
 8001650: 82 45                        	cmp	r10, r0
 8001652: a4 9b                        	ldr	r3, [sp, #656]
 8001654: ca f0 56 87                  	blo.w	#44716 <$t.42+0x34a>
 8001658: dd e9 a5 21                  	ldrd	r2, r1, [sp, #660]
;         } else if self.end > slice.len() {
 800165c: 54 45                        	cmp	r4, r10
 800165e: a9 98                        	ldr	r0, [sp, #676]
 8001660: ca f0 3b 87                  	blo.w	#44662 <$t.42+0x320>
;             rssi: match unsafe { mem::transmute::<u8, i8>(self.event_data[rssi_index]) } {
 8001664: a2 45                        	cmp	r10, r4
 8001666: 8a f0 38 87                  	bhs.w	#44656 <$t.42+0x320>
 800166a: 10 f8 0a 50                  	ldrb.w	r5, [r0, r10]
 800166e: 4f f0 00 08                  	mov.w	r8, #0
 8001672: a0 95                        	str	r5, [sp, #640]
 8001674: 28 46                        	mov	r0, r5
 8001676: b5 f1 7f 00                  	subs.w	r0, r5, #127
 800167a: 18 bf                        	it	ne
 800167c: 01 20                        	movne	r0, #1
 800167e: 9f 90                        	str	r0, [sp, #636]
 8001680: cd f8 9c 92                  	str.w	r9, [sp, #668]
 8001684: 00 20                        	movs	r0, #0
 8001686: a1 93                        	str	r3, [sp, #644]
 8001688: e1 46                        	mov	r9, r12
 800168a: 9e 92                        	str	r2, [sp, #632]
 800168c: 9c 91                        	str	r1, [sp, #624]
 800168e: 9b 9b                        	ldr	r3, [sp, #620]
 8001690: dd f8 64 a2                  	ldr.w	r10, [sp, #612]
 8001694: 44 e7                        	b	#-376 <$t.10+0x288>
;             Err(e) => Err(op(e)),
 8001696: dd f8 1b 14                  	ldr.w	r1, [sp, #1051]
 800169a: 4f f0 10 0e                  	mov.w	lr, #16
 800169e: dd f8 18 04                  	ldr.w	r0, [sp, #1048]
 80016a2: cd f8 23 15                  	str.w	r1, [sp, #1315]
 80016a6: cd f8 20 05                  	str.w	r0, [sp, #1312]
;         self
 80016aa: dd f8 20 05                  	ldr.w	r0, [sp, #1312]
 80016ae: dd f8 23 15                  	ldr.w	r1, [sp, #1315]
;             Err(e) => Err(op(e)),
 80016b2: dd f8 0c 24                  	ldr.w	r2, [sp, #1036]
;         self
 80016b6: 47 f8 48 0c                  	str	r0, [r7, #-72]
 80016ba: 47 f8 45 1c                  	str	r1, [r7, #-69]
;         Err(v)
 80016be: 57 f8 45 1c                  	ldr	r1, [r7, #-69]
;         self
 80016c2: f1 92                        	str	r2, [sp, #964]
;         Err(v)
 80016c4: cd f8 1b 14                  	str.w	r1, [sp, #1051]
 80016c8: f1 99                        	ldr	r1, [sp, #964]
;             Err(e) => Err(op(e)),
 80016ca: bd f8 10 34                  	ldrh.w	r3, [sp, #1040]
;         Err(v)
 80016ce: cd f8 0c 14                  	str.w	r1, [sp, #1036]
 80016d2: 57 f8 48 0c                  	ldr	r0, [r7, #-72]
;         self
 80016d6: ad f8 c8 33                  	strh.w	r3, [sp, #968]
;         Err(v)
 80016da: cd f8 18 04                  	str.w	r0, [sp, #1048]
 80016de: bd f8 c8 03                  	ldrh.w	r0, [sp, #968]
;             Err(e) => Err(op(e)),
 80016e2: ad f8 d0 33                  	strh.w	r3, [sp, #976]
;         Err(v)
 80016e6: ad f8 10 04                  	strh.w	r0, [sp, #1040]
 80016ea: 01 20                        	movs	r0, #1
;             Err(e) => Err(op(e)),
 80016ec: f3 92                        	str	r2, [sp, #972]
 80016ee: ff e6                        	b	#-514 <$t.10+0x258>
;         _ => Err(Error::UnknownEvent(payload[0])),
 80016f0: 07 f8 47 1c                  	strb	r1, [r7, #-71]
 80016f4: fe f7 c3 bf                  	b.w	#-4218 <$t.2+0x2c0>
 80016f8: 03 20                        	movs	r0, #3
 80016fa: 00 23                        	movs	r3, #0
 80016fc: 11 46                        	mov	r1, r2
 80016fe: 00 24                        	movs	r4, #0
 8001700: 42 e2                        	b	#1156 <$t.14+0x122>
 8001702: 0d f5 83 60                  	add.w	r0, sp, #1048
;     let mut data_buf = [0; MAX_ADVERTISING_REPORT_LEN];
 8001706: fd 21                        	movs	r1, #253
 8001708: 1a f0 7c ff                  	bl	#110328
;         } else if self.end > slice.len() {
 800170c: fe 2c                        	cmp	r4, #254
 800170e: 8a f0 f3 86                  	bhs.w	#44518 <$t.42+0x33e>
 8001712: 0d f5 83 60                  	add.w	r0, sp, #1048
;     copy_nonoverlapping(src, dst, count)
 8001716: 29 46                        	mov	r1, r5
 8001718: 22 46                        	mov	r2, r4
 800171a: 1a f0 fe fd                  	bl	#109564
;     Ok(LeAdvertisingReport { data_len, data_buf })
 800171e: dd f8 31 04                  	ldr.w	r0, [sp, #1073]
 8001722: 9d f8 1c 14                  	ldrb.w	r1, [sp, #1052]
 8001726: a2 91                        	str	r1, [sp, #648]
 8001728: 9d f8 1d 14                  	ldrb.w	r1, [sp, #1053]
 800172c: cd f8 20 05                  	str.w	r0, [sp, #1312]
 8001730: 9d f8 22 04                  	ldrb.w	r0, [sp, #1058]
 8001734: a9 91                        	str	r1, [sp, #676]
 8001736: bd f8 1e 14                  	ldrh.w	r1, [sp, #1054]
 800173a: a5 90                        	str	r0, [sp, #660]
 800173c: 9d f8 23 04                  	ldrb.w	r0, [sp, #1059]
 8001740: 99 91                        	str	r1, [sp, #612]
 8001742: 9d f8 20 14                  	ldrb.w	r1, [sp, #1056]
 8001746: a4 90                        	str	r0, [sp, #656]
 8001748: 9d f8 25 04                  	ldrb.w	r0, [sp, #1061]
 800174c: a3 91                        	str	r1, [sp, #652]
 800174e: 9d f8 21 14                  	ldrb.w	r1, [sp, #1057]
 8001752: a0 90                        	str	r0, [sp, #640]
 8001754: bd f8 26 04                  	ldrh.w	r0, [sp, #1062]
 8001758: dd f8 34 24                  	ldr.w	r2, [sp, #1076]
 800175c: a6 91                        	str	r1, [sp, #664]
 800175e: 98 90                        	str	r0, [sp, #608]
 8001760: 9d f8 30 04                  	ldrb.w	r0, [sp, #1072]
 8001764: dd f8 28 14                  	ldr.w	r1, [sp, #1064]
 8001768: cd f8 23 25                  	str.w	r2, [sp, #1315]
 800176c: 27 90                        	str	r0, [sp, #156]
 800176e: dd f8 42 24                  	ldr.w	r2, [sp, #1090]
 8001772: dd f8 2c 04                  	ldr.w	r0, [sp, #1068]
 8001776: 47 f8 48 2c                  	str	r2, [r7, #-72]
 800177a: bd f8 46 24                  	ldrh.w	r2, [sp, #1094]
 800177e: 9b f8 cb 60                  	ldrb.w	r6, [r11, #203]
 8001782: 27 f8 44 2c                  	strh	r2, [r7, #-68]
; }
 8001786: 0a 0a                        	lsrs	r2, r1, #8
;     Ok(LeAdvertisingReport { data_len, data_buf })
 8001788: bb f8 c9 40                  	ldrh.w	r4, [r11, #201]
 800178c: 92 91                        	str	r1, [sp, #584]
; }
 800178e: 42 ea 00 61                  	orr.w	r1, r2, r0, lsl #24
;     Ok(LeAdvertisingReport { data_len, data_buf })
 8001792: 9b f8 02 20                  	ldrb.w	r2, [r11, #2]
; }
 8001796: 00 0a                        	lsrs	r0, r0, #8
;     Ok(LeAdvertisingReport { data_len, data_buf })
 8001798: a7 91                        	str	r1, [sp, #668]
 800179a: 44 ea 06 41                  	orr.w	r1, r4, r6, lsl #16
 800179e: bb f8 00 60                  	ldrh.w	r6, [r11]
 80017a2: 8f 90                        	str	r0, [sp, #572]
 80017a4: 46 ea 02 44                  	orr.w	r4, r6, r2, lsl #16
 80017a8: bd f8 40 04                  	ldrh.w	r0, [sp, #1088]
 80017ac: 2a 91                        	str	r1, [sp, #168]
; }
 80017ae: a2 b2                        	uxth	r2, r4
 80017b0: 9b 90                        	str	r0, [sp, #620]
 80017b2: 11 0a                        	lsrs	r1, r2, #8
 80017b4: 00 0a                        	lsrs	r0, r0, #8
 80017b6: 9a 91                        	str	r1, [sp, #616]
 80017b8: 00 22                        	movs	r2, #0
;     Ok(LeAdvertisingReport { data_len, data_buf })
 80017ba: bd f8 38 14                  	ldrh.w	r1, [sp, #1080]
; }
 80017be: 4f ea 14 4a                  	lsr.w	r10, r4, #16
 80017c2: a1 90                        	str	r0, [sp, #644]
;     Ok(LeAdvertisingReport { data_len, data_buf })
 80017c4: dd f8 18 e4                  	ldr.w	lr, [sp, #1048]
; }
 80017c8: 08 0a                        	lsrs	r0, r1, #8
;     Ok(LeAdvertisingReport { data_len, data_buf })
 80017ca: 9d f8 24 34                  	ldrb.w	r3, [sp, #1060]
 80017ce: 95 90                        	str	r0, [sp, #596]
 80017d0: 9d f8 14 05                  	ldrb.w	r0, [sp, #1300]
 80017d4: 2b 90                        	str	r0, [sp, #172]
 80017d6: 9d f8 10 05                  	ldrb.w	r0, [sp, #1296]
 80017da: 88 90                        	str	r0, [sp, #544]
 80017dc: dd f8 0c 05                  	ldr.w	r0, [sp, #1292]
 80017e0: 87 90                        	str	r0, [sp, #540]
 80017e2: dd f8 08 05                  	ldr.w	r0, [sp, #1288]
 80017e6: 74 90                        	str	r0, [sp, #464]
 80017e8: dd f8 04 05                  	ldr.w	r0, [sp, #1284]
 80017ec: 59 90                        	str	r0, [sp, #356]
 80017ee: 9d f8 03 05                  	ldrb.w	r0, [sp, #1283]
 80017f2: 2d 90                        	str	r0, [sp, #180]
 80017f4: 9d f8 02 05                  	ldrb.w	r0, [sp, #1282]
 80017f8: 2c 90                        	str	r0, [sp, #176]
 80017fa: bd f8 00 05                  	ldrh.w	r0, [sp, #1280]
 80017fe: 32 90                        	str	r0, [sp, #200]
 8001800: dd f8 fc 04                  	ldr.w	r0, [sp, #1276]
 8001804: 5a 90                        	str	r0, [sp, #360]
 8001806: 9d f8 fb 04                  	ldrb.w	r0, [sp, #1275]
 800180a: 2f 90                        	str	r0, [sp, #188]
 800180c: 9d f8 fa 04                  	ldrb.w	r0, [sp, #1274]
 8001810: 2e 90                        	str	r0, [sp, #184]
 8001812: bd f8 f8 04                  	ldrh.w	r0, [sp, #1272]
 8001816: 36 90                        	str	r0, [sp, #216]
 8001818: dd f8 f4 04                  	ldr.w	r0, [sp, #1268]
 800181c: 5b 90                        	str	r0, [sp, #364]
 800181e: 9d f8 f3 04                  	ldrb.w	r0, [sp, #1267]
 8001822: 31 90                        	str	r0, [sp, #196]
 8001824: 9d f8 f2 04                  	ldrb.w	r0, [sp, #1266]
 8001828: 30 90                        	str	r0, [sp, #192]
 800182a: bd f8 f0 04                  	ldrh.w	r0, [sp, #1264]
 800182e: 39 90                        	str	r0, [sp, #228]
 8001830: dd f8 ec 04                  	ldr.w	r0, [sp, #1260]
 8001834: 5c 90                        	str	r0, [sp, #368]
 8001836: 9d f8 eb 04                  	ldrb.w	r0, [sp, #1259]
 800183a: 35 90                        	str	r0, [sp, #212]
 800183c: 9d f8 ea 04                  	ldrb.w	r0, [sp, #1258]
 8001840: 33 90                        	str	r0, [sp, #204]
 8001842: bd f8 e8 04                  	ldrh.w	r0, [sp, #1256]
 8001846: 76 90                        	str	r0, [sp, #472]
 8001848: dd f8 e4 04                  	ldr.w	r0, [sp, #1252]
 800184c: 5d 90                        	str	r0, [sp, #372]
 800184e: 9d f8 e3 04                  	ldrb.w	r0, [sp, #1251]
 8001852: 38 90                        	str	r0, [sp, #224]
 8001854: 9d f8 e2 04                  	ldrb.w	r0, [sp, #1250]
 8001858: 37 90                        	str	r0, [sp, #220]
 800185a: bd f8 e0 04                  	ldrh.w	r0, [sp, #1248]
 800185e: 77 90                        	str	r0, [sp, #476]
 8001860: dd f8 dc 04                  	ldr.w	r0, [sp, #1244]
 8001864: 5e 90                        	str	r0, [sp, #376]
 8001866: 9d f8 db 04                  	ldrb.w	r0, [sp, #1243]
 800186a: 3b 90                        	str	r0, [sp, #236]
 800186c: 9d f8 da 04                  	ldrb.w	r0, [sp, #1242]
 8001870: 3a 90                        	str	r0, [sp, #232]
 8001872: bd f8 d8 04                  	ldrh.w	r0, [sp, #1240]
 8001876: 78 90                        	str	r0, [sp, #480]
 8001878: dd f8 d4 04                  	ldr.w	r0, [sp, #1236]
 800187c: 5f 90                        	str	r0, [sp, #380]
 800187e: 9d f8 d3 04                  	ldrb.w	r0, [sp, #1235]
 8001882: 3d 90                        	str	r0, [sp, #244]
 8001884: 9d f8 d2 04                  	ldrb.w	r0, [sp, #1234]
 8001888: 3c 90                        	str	r0, [sp, #240]
 800188a: bd f8 d0 04                  	ldrh.w	r0, [sp, #1232]
 800188e: 79 90                        	str	r0, [sp, #484]
 8001890: dd f8 cc 04                  	ldr.w	r0, [sp, #1228]
 8001894: 60 90                        	str	r0, [sp, #384]
 8001896: 9d f8 cb 04                  	ldrb.w	r0, [sp, #1227]
 800189a: 3f 90                        	str	r0, [sp, #252]
 800189c: 9d f8 ca 04                  	ldrb.w	r0, [sp, #1226]
 80018a0: 3e 90                        	str	r0, [sp, #248]
 80018a2: bd f8 c8 04                  	ldrh.w	r0, [sp, #1224]
 80018a6: 7a 90                        	str	r0, [sp, #488]
 80018a8: dd f8 c4 04                  	ldr.w	r0, [sp, #1220]
 80018ac: 61 90                        	str	r0, [sp, #388]
 80018ae: 9d f8 c3 04                  	ldrb.w	r0, [sp, #1219]
 80018b2: 41 90                        	str	r0, [sp, #260]
 80018b4: 9d f8 c2 04                  	ldrb.w	r0, [sp, #1218]
 80018b8: 40 90                        	str	r0, [sp, #256]
 80018ba: bd f8 c0 04                  	ldrh.w	r0, [sp, #1216]
 80018be: 7b 90                        	str	r0, [sp, #492]
 80018c0: dd f8 bc 04                  	ldr.w	r0, [sp, #1212]
 80018c4: 62 90                        	str	r0, [sp, #392]
 80018c6: 9d f8 bb 04                  	ldrb.w	r0, [sp, #1211]
 80018ca: 43 90                        	str	r0, [sp, #268]
 80018cc: 9d f8 ba 04                  	ldrb.w	r0, [sp, #1210]
 80018d0: 42 90                        	str	r0, [sp, #264]
 80018d2: bd f8 b8 04                  	ldrh.w	r0, [sp, #1208]
 80018d6: 7c 90                        	str	r0, [sp, #496]
 80018d8: dd f8 b4 04                  	ldr.w	r0, [sp, #1204]
 80018dc: 63 90                        	str	r0, [sp, #396]
 80018de: 9d f8 b3 04                  	ldrb.w	r0, [sp, #1203]
 80018e2: 45 90                        	str	r0, [sp, #276]
 80018e4: 9d f8 b2 04                  	ldrb.w	r0, [sp, #1202]
 80018e8: 44 90                        	str	r0, [sp, #272]
 80018ea: bd f8 b0 04                  	ldrh.w	r0, [sp, #1200]
 80018ee: 7e 90                        	str	r0, [sp, #504]
 80018f0: dd f8 ac 04                  	ldr.w	r0, [sp, #1196]
 80018f4: 64 90                        	str	r0, [sp, #400]
 80018f6: 9d f8 ab 04                  	ldrb.w	r0, [sp, #1195]
 80018fa: 47 90                        	str	r0, [sp, #284]
 80018fc: 9d f8 aa 04                  	ldrb.w	r0, [sp, #1194]
 8001900: 46 90                        	str	r0, [sp, #280]
 8001902: bd f8 a8 04                  	ldrh.w	r0, [sp, #1192]
 8001906: 7f 90                        	str	r0, [sp, #508]
 8001908: dd f8 a4 04                  	ldr.w	r0, [sp, #1188]
 800190c: 65 90                        	str	r0, [sp, #404]
 800190e: 9d f8 a3 04                  	ldrb.w	r0, [sp, #1187]
 8001912: 4a 90                        	str	r0, [sp, #296]
 8001914: 9d f8 a2 04                  	ldrb.w	r0, [sp, #1186]
 8001918: 49 90                        	str	r0, [sp, #292]
 800191a: bd f8 a0 04                  	ldrh.w	r0, [sp, #1184]
 800191e: 80 90                        	str	r0, [sp, #512]
 8001920: dd f8 9c 04                  	ldr.w	r0, [sp, #1180]
 8001924: 66 90                        	str	r0, [sp, #408]
 8001926: 9d f8 9b 04                  	ldrb.w	r0, [sp, #1179]
 800192a: 4c 90                        	str	r0, [sp, #304]
 800192c: 9d f8 9a 04                  	ldrb.w	r0, [sp, #1178]
 8001930: 4b 90                        	str	r0, [sp, #300]
 8001932: bd f8 98 04                  	ldrh.w	r0, [sp, #1176]
 8001936: 81 90                        	str	r0, [sp, #516]
 8001938: dd f8 94 04                  	ldr.w	r0, [sp, #1172]
 800193c: 67 90                        	str	r0, [sp, #412]
 800193e: 9d f8 93 04                  	ldrb.w	r0, [sp, #1171]
 8001942: 4e 90                        	str	r0, [sp, #312]
 8001944: 9d f8 92 04                  	ldrb.w	r0, [sp, #1170]
 8001948: 4d 90                        	str	r0, [sp, #308]
 800194a: bd f8 90 04                  	ldrh.w	r0, [sp, #1168]
 800194e: 82 90                        	str	r0, [sp, #520]
 8001950: dd f8 8c 04                  	ldr.w	r0, [sp, #1164]
 8001954: 68 90                        	str	r0, [sp, #416]
 8001956: 9d f8 8b 04                  	ldrb.w	r0, [sp, #1163]
 800195a: 6e 90                        	str	r0, [sp, #440]
 800195c: 9d f8 8a 04                  	ldrb.w	r0, [sp, #1162]
 8001960: 4f 90                        	str	r0, [sp, #316]
 8001962: bd f8 88 04                  	ldrh.w	r0, [sp, #1160]
 8001966: 83 90                        	str	r0, [sp, #524]
 8001968: dd f8 84 04                  	ldr.w	r0, [sp, #1156]
 800196c: 69 90                        	str	r0, [sp, #420]
 800196e: 9d f8 83 04                  	ldrb.w	r0, [sp, #1155]
 8001972: 51 90                        	str	r0, [sp, #324]
 8001974: 9d f8 82 04                  	ldrb.w	r0, [sp, #1154]
 8001978: 50 90                        	str	r0, [sp, #320]
 800197a: bd f8 80 04                  	ldrh.w	r0, [sp, #1152]
 800197e: 84 90                        	str	r0, [sp, #528]
 8001980: dd f8 7c 04                  	ldr.w	r0, [sp, #1148]
 8001984: 6a 90                        	str	r0, [sp, #424]
 8001986: 9d f8 7b 04                  	ldrb.w	r0, [sp, #1147]
 800198a: 54 90                        	str	r0, [sp, #336]
 800198c: 9d f8 7a 04                  	ldrb.w	r0, [sp, #1146]
 8001990: 52 90                        	str	r0, [sp, #328]
 8001992: dd f8 74 04                  	ldr.w	r0, [sp, #1140]
 8001996: 6b 90                        	str	r0, [sp, #428]
 8001998: 9d f8 73 04                  	ldrb.w	r0, [sp, #1139]
 800199c: 55 90                        	str	r0, [sp, #340]
 800199e: 9d f8 72 04                  	ldrb.w	r0, [sp, #1138]
 80019a2: 53 90                        	str	r0, [sp, #332]
 80019a4: bd f8 70 04                  	ldrh.w	r0, [sp, #1136]
 80019a8: 85 90                        	str	r0, [sp, #532]
 80019aa: dd f8 6c 04                  	ldr.w	r0, [sp, #1132]
 80019ae: 6c 90                        	str	r0, [sp, #432]
 80019b0: 9d f8 6b 04                  	ldrb.w	r0, [sp, #1131]
 80019b4: 56 90                        	str	r0, [sp, #344]
 80019b6: 9d f8 6a 04                  	ldrb.w	r0, [sp, #1130]
 80019ba: 48 90                        	str	r0, [sp, #288]
 80019bc: bd f8 68 04                  	ldrh.w	r0, [sp, #1128]
 80019c0: 7d 90                        	str	r0, [sp, #500]
 80019c2: dd f8 64 04                  	ldr.w	r0, [sp, #1124]
 80019c6: 6d 90                        	str	r0, [sp, #436]
 80019c8: 9d f8 63 04                  	ldrb.w	r0, [sp, #1123]
 80019cc: 57 90                        	str	r0, [sp, #348]
 80019ce: 9d f8 62 04                  	ldrb.w	r0, [sp, #1122]
 80019d2: 34 90                        	str	r0, [sp, #208]
 80019d4: bd f8 60 04                  	ldrh.w	r0, [sp, #1120]
 80019d8: 75 90                        	str	r0, [sp, #468]
 80019da: dd f8 5c 04                  	ldr.w	r0, [sp, #1116]
 80019de: 71 90                        	str	r0, [sp, #452]
 80019e0: 9d f8 5b 04                  	ldrb.w	r0, [sp, #1115]
 80019e4: 58 90                        	str	r0, [sp, #352]
 80019e6: 9d f8 5a 04                  	ldrb.w	r0, [sp, #1114]
 80019ea: 6f 90                        	str	r0, [sp, #444]
 80019ec: 9d f8 59 04                  	ldrb.w	r0, [sp, #1113]
 80019f0: 89 90                        	str	r0, [sp, #548]
 80019f2: 9d f8 58 04                  	ldrb.w	r0, [sp, #1112]
 80019f6: 72 90                        	str	r0, [sp, #456]
 80019f8: 9d f8 57 04                  	ldrb.w	r0, [sp, #1111]
 80019fc: 8d 90                        	str	r0, [sp, #564]
 80019fe: 9d f8 56 04                  	ldrb.w	r0, [sp, #1110]
 8001a02: 8c 90                        	str	r0, [sp, #560]
 8001a04: 9d f8 55 04                  	ldrb.w	r0, [sp, #1109]
 8001a08: 8b 90                        	str	r0, [sp, #556]
 8001a0a: 9d f8 54 04                  	ldrb.w	r0, [sp, #1108]
 8001a0e: 8e 90                        	str	r0, [sp, #568]
 8001a10: 9d f8 53 04                  	ldrb.w	r0, [sp, #1107]
 8001a14: 8a 90                        	str	r0, [sp, #552]
 8001a16: 9d f8 52 04                  	ldrb.w	r0, [sp, #1106]
 8001a1a: 86 90                        	str	r0, [sp, #536]
 8001a1c: 9d f8 51 04                  	ldrb.w	r0, [sp, #1105]
 8001a20: bd f8 78 94                  	ldrh.w	r9, [sp, #1144]
 8001a24: dd f8 4c 84                  	ldr.w	r8, [sp, #1100]
 8001a28: 9d f8 3f 54                  	ldrb.w	r5, [sp, #1087]
 8001a2c: 9d f8 3e c4                  	ldrb.w	r12, [sp, #1086]
 8001a30: dd f8 3a b4                  	ldr.w	r11, [sp, #1082]
 8001a34: 73 90                        	str	r0, [sp, #460]
 8001a36: 9d f8 50 04                  	ldrb.w	r0, [sp, #1104]
 8001a3a: 1e 90                        	str	r0, [sp, #120]
 8001a3c: 9d f8 4b 04                  	ldrb.w	r0, [sp, #1099]
 8001a40: 23 91                        	str	r1, [sp, #140]
 8001a42: 90 90                        	str	r0, [sp, #576]
 8001a44: 97 94                        	str	r4, [sp, #604]
 8001a46: 7b e1                        	b	#758 <$t.14+0x2da>
 8001a48: 41 f2 01 00                  	movw	r0, #4097
 8001a4c: 10 1a                        	subs	r0, r2, r0
 8001a4e: 08 28                        	cmp	r0, #8
 8001a50: 00 f2 28 83                  	bhi.w	#1616 <$t.14+0x63e>
 8001a54: df e8 10 f0                  	tbh	[pc, r0, lsl #1]

08001a58 $d.13:
 8001a58:	09 00 a3 08	.word	0x08a30009
 8001a5c:	7c 08 43 03	.word	0x0343087c
 8001a60:	43 03 43 03	.word	0x03430343
 8001a64:	43 03 43 03	.word	0x03430343
 8001a68:	84 09		.short	0x0984

08001a6a $t.14:
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8001a6a: 03 3c                        	subs	r4, #3
;         if $left.len() != $right {
 8001a6c: 09 2c                        	cmp	r4, #9
 8001a6e: 42 f0 e8 81                  	bne.w	#9168 <$t.18+0xb2a>
;         status: bytes[0].try_into().map_err(super::rewrap_bad_status)?,
 8001a72: 9d f8 ae 02                  	ldrb.w	r0, [sp, #686]
 8001a76: 10 f0 f3 fc                  	bl	#68070
 8001a7a: c0 07                        	lsls	r0, r0, #31
 8001a7c: a4 91                        	str	r1, [sp, #656]
 8001a7e: 43 f0 91 86                  	bne.w	#15650 <$t.24+0x1622>
;         hci_version: bytes[1],
 8001a82: 9d f8 af 02                  	ldrb.w	r0, [sp, #687]
;         lmp_version: bytes[4],
 8001a86: 9d f8 b2 12                  	ldrb.w	r1, [sp, #690]
;     copy_nonoverlapping(src, dst, count)
 8001a8a: bd f8 b5 22                  	ldrh.w	r2, [sp, #693]
 8001a8e: bd f8 b3 32                  	ldrh.w	r3, [sp, #691]
 8001a92: bd f8 b0 62                  	ldrh.w	r6, [sp, #688]
;                 ReturnParameters::ReadLocalVersionInformation(to_local_version_info(&bytes[3..])?)
 8001a96: 8d f8 e7 03                  	strb.w	r0, [sp, #999]
 8001a9a: a4 98                        	ldr	r0, [sp, #656]
 8001a9c: 8d f8 e6 03                  	strb.w	r0, [sp, #998]
 8001aa0: 04 20                        	movs	r0, #4
 8001aa2: 8d f8 e8 13                  	strb.w	r1, [sp, #1000]
 8001aa6: ad f8 e4 23                  	strh.w	r2, [sp, #996]
 8001aaa: ad f8 e2 33                  	strh.w	r3, [sp, #994]
 8001aae: ad f8 e0 63                  	strh.w	r6, [sp, #992]
 8001ab2: 00 f0 7f bf                  	b.w	#3838 <$t.16+0x5ae>
 8001ab6: 4f f0 00 70                  	mov.w	r0, #33554432
; }
 8001aba: c9 b2                        	uxtb	r1, r1
;             0x08 => Ok(Event::EncryptionChange(to_encryption_change(payload)?)),
 8001abc: dd f8 18 34                  	ldr.w	r3, [sp, #1048]
;         self
 8001ac0: 4c ea 01 41                  	orr.w	r1, r12, r1, lsl #16
 8001ac4: 02 25                        	movs	r5, #2
 8001ac6: 08 43                        	orrs	r0, r1
;             0x08 => Ok(Event::EncryptionChange(to_encryption_change(payload)?)),
 8001ac8: dd f8 1c 64                  	ldr.w	r6, [sp, #1052]
 8001acc: bd f8 f4 93                  	ldrh.w	r9, [sp, #1012]
 8001ad0: dd f8 e0 83                  	ldr.w	r8, [sp, #992]
 8001ad4: bd f8 e4 e3                  	ldrh.w	lr, [sp, #996]
 8001ad8: fc 9a                        	ldr	r2, [sp, #1008]
 8001ada: bd f8 20 44                  	ldrh.w	r4, [sp, #1056]
 8001ade: 07 f8 48 5c                  	strb	r5, [r7, #-72]
 8001ae2: 47 f8 42 3c                  	str	r3, [r7, #-66]
 8001ae6: dd f8 23 55                  	ldr.w	r5, [sp, #1315]
 8001aea: dd f8 20 35                  	ldr.w	r3, [sp, #1312]
 8001aee: cd f8 0f 54                  	str.w	r5, [sp, #1039]
 8001af2: 47 f8 3e 6c                  	str	r6, [r7, #-62]
 8001af6: 27 f8 3a 4c                  	strh	r4, [r7, #-58]
 8001afa: ed 92                        	str	r2, [sp, #948]
 8001afc: ad f8 b8 93                  	strh.w	r9, [sp, #952]
 8001b00: cd f8 ac 83                  	str.w	r8, [sp, #940]
 8001b04: ad f8 b0 e3                  	strh.w	lr, [sp, #944]
 8001b08: cd f8 0c 34                  	str.w	r3, [sp, #1036]
 8001b0c: 47 f8 46 0c                  	str	r0, [r7, #-70]
 8001b10: ff f7 fc b8                  	b.w	#-3592 <$t.4+0x18e>
 8001b14: 06 22                        	movs	r2, #6
 8001b16: 19 46                        	mov	r1, r3
 8001b18: ff f7 46 bb                  	b.w	#-2420 <$t.8+0x2b8>
 8001b1c: 4f f0 00 0e                  	mov.w	lr, #0
;             0x03 => Ok(Event::ConnectionComplete(to_connection_complete(payload)?)),
 8001b20: dd f8 20 05                  	ldr.w	r0, [sp, #1312]
 8001b24: 07 f8 44 1c                  	strb	r1, [r7, #-68]
 8001b28: 00 21                        	movs	r1, #0
 8001b2a: bd f8 24 a5                  	ldrh.w	r10, [sp, #1316]
 8001b2e: dd f8 f0 93                  	ldr.w	r9, [sp, #1008]
 8001b32: bd f8 f4 23                  	ldrh.w	r2, [sp, #1012]
 8001b36: 07 f8 3d 3c                  	strb	r3, [r7, #-61]
 8001b3a: 00 23                        	movs	r3, #0
 8001b3c: a4 91                        	str	r1, [sp, #656]
 8001b3e: ed 90                        	str	r0, [sp, #948]
 8001b40: dd f8 1b 14                  	ldr.w	r1, [sp, #1051]
 8001b44: dd f8 18 04                  	ldr.w	r0, [sp, #1048]
 8001b48: cd f8 0f 14                  	str.w	r1, [sp, #1039]
 8001b4c: 27 f8 3c ec                  	strh	lr, [r7, #-60]
 8001b50: 07 f8 3e 5c                  	strb	r5, [r7, #-62]
 8001b54: 07 f8 3f 4c                  	strb	r4, [r7, #-63]
 8001b58: 07 f8 40 bc                  	strb	r11, [r7, #-64]
 8001b5c: 07 f8 41 8c                  	strb	r8, [r7, #-65]
 8001b60: 27 f8 43 6c                  	strh	r6, [r7, #-67]
 8001b64: 27 f8 46 cc                  	strh	r12, [r7, #-70]
 8001b68: 07 f8 48 3c                  	strb	r3, [r7, #-72]
 8001b6c: ad f8 b8 a3                  	strh.w	r10, [sp, #952]
 8001b70: cd f8 ac 93                  	str.w	r9, [sp, #940]
 8001b74: ad f8 b0 23                  	strh.w	r2, [sp, #944]
 8001b78: cd f8 0c 04                  	str.w	r0, [sp, #1036]
 8001b7c: ff f7 c8 b8                  	b.w	#-3696 <$t.4+0x192>
 8001b80: 04 20                        	movs	r0, #4
 8001b82: 00 24                        	movs	r4, #0
 8001b84: 11 46                        	mov	r1, r2
 8001b86: 00 23                        	movs	r3, #0
 8001b88: 00 26                        	movs	r6, #0
 8001b8a: 00 22                        	movs	r2, #0
;         Err(v)
 8001b8c: 47 f8 3c 6c                  	str	r6, [r7, #-60]
 8001b90: 47 e9 11 43                  	strd	r4, r3, [r7, #-68]
 8001b94: a9 92                        	str	r2, [sp, #676]
 8001b96: 07 f8 45 6c                  	strb	r6, [r7, #-69]
 8001b9a: 07 f8 47 1c                  	strb	r1, [r7, #-71]
 8001b9e: 07 f8 48 0c                  	strb	r0, [r7, #-72]
 8001ba2: fe f7 75 bc                  	b.w	#-5910 <$t.2+0xd2>
 8001ba6: 4f f0 00 0c                  	mov.w	r12, #0
 8001baa: 4f f0 01 08                  	mov.w	r8, #1
 8001bae: 4f f0 0d 0e                  	mov.w	lr, #13
 8001bb2: 00 23                        	movs	r3, #0
 8001bb4: 00 26                        	movs	r6, #0
 8001bb6: 01 25                        	movs	r5, #1
 8001bb8: a1 46                        	mov	r9, r4
;         self
 8001bba: 57 f8 48 0c                  	ldr	r0, [r7, #-72]
 8001bbe: 37 f8 44 4c                  	ldrh	r4, [r7, #-68]
 8001bc2: bd f8 f4 23                  	ldrh.w	r2, [sp, #1012]
 8001bc6: f8 90                        	str	r0, [sp, #992]
 8001bc8: 43 ea 03 00                  	orr.w	r0, r3, r3
 8001bcc: ad f8 e4 43                  	strh.w	r4, [sp, #996]
 8001bd0: 4c ea 0e 04                  	orr.w	r4, r12, lr
 8001bd4: ad f8 04 24                  	strh.w	r2, [sp, #1028]
 8001bd8: 46 ea 08 02                  	orr.w	r2, r6, r8
 8001bdc: 40 ea 09 00                  	orr.w	r0, r0, r9
 8001be0: fc 99                        	ldr	r1, [sp, #1008]
 8001be2: cd f8 00 14                  	str.w	r1, [sp, #1024]
;         0x05 => Ok(Event::LeLongTermKeyRequest(to_le_ltk_request(payload)?)),
 8001be6: 65 b3                        	cbz	r5, #88
;         Err(v)
 8001be8: 47 f8 44 0c                  	str	r0, [r7, #-68]
 8001bec: 00 20                        	movs	r0, #0
 8001bee: a3 90                        	str	r0, [sp, #652]
 8001bf0: 0d f5 83 6e                  	add.w	lr, sp, #1048
 8001bf4: bd f8 e4 13                  	ldrh.w	r1, [sp, #996]
 8001bf8: 00 20                        	movs	r0, #0
 8001bfa: dd f8 00 34                  	ldr.w	r3, [sp, #1024]
 8001bfe: a2 90                        	str	r0, [sp, #648]
 8001c00: 00 20                        	movs	r0, #0
 8001c02: 9d 90                        	str	r0, [sp, #628]
 8001c04: 00 20                        	movs	r0, #0
 8001c06: bd f8 04 64                  	ldrh.w	r6, [sp, #1028]
 8001c0a: 9f 90                        	str	r0, [sp, #636]
 8001c0c: 00 20                        	movs	r0, #0
 8001c0e: 9e 90                        	str	r0, [sp, #632]
 8001c10: 00 20                        	movs	r0, #0
 8001c12: f8 9d                        	ldr	r5, [sp, #992]
 8001c14: a9 90                        	str	r0, [sp, #676]
 8001c16: 00 20                        	movs	r0, #0
 8001c18: a6 90                        	str	r0, [sp, #664]
 8001c1a: 00 20                        	movs	r0, #0
 8001c1c: a5 90                        	str	r0, [sp, #660]
 8001c1e: 00 20                        	movs	r0, #0
 8001c20: a7 90                        	str	r0, [sp, #668]
 8001c22: 00 20                        	movs	r0, #0
 8001c24: a1 90                        	str	r0, [sp, #644]
 8001c26: 00 20                        	movs	r0, #0
 8001c28: 47 f8 48 2c                  	str	r2, [r7, #-72]
 8001c2c: 9a 90                        	str	r0, [sp, #616]
 8001c2e: 47 f8 40 4c                  	str	r4, [r7, #-64]
 8001c32: ed 95                        	str	r5, [sp, #948]
 8001c34: ad f8 b8 13                  	strh.w	r1, [sp, #952]
 8001c38: eb 93                        	str	r3, [sp, #940]
 8001c3a: ad f8 b0 63                  	strh.w	r6, [sp, #944]
 8001c3e: fe f7 2d bc                  	b.w	#-6054 <$t.2+0xde>
;         0x05 => Ok(Event::LeLongTermKeyRequest(to_le_ltk_request(payload)?)),
 8001c42: 47 f8 3c 0c                  	str	r0, [r7, #-60]
 8001c46: 00 20                        	movs	r0, #0
 8001c48: 96 90                        	str	r0, [sp, #600]
 8001c4a: 47 f8 40 2c                  	str	r2, [r7, #-64]
 8001c4e: 0e 22                        	movs	r2, #14
 8001c50: dd f8 18 14                  	ldr.w	r1, [sp, #1048]
 8001c54: bd f8 d0 63                  	ldrh.w	r6, [sp, #976]
 8001c58: dd f8 c4 e3                  	ldr.w	lr, [sp, #964]
 8001c5c: bd f8 c8 c3                  	ldrh.w	r12, [sp, #968]
 8001c60: a6 94                        	str	r4, [sp, #664]
 8001c62: f3 9c                        	ldr	r4, [sp, #972]
 8001c64: 07 f8 48 2c                  	strb	r2, [r7, #-72]
 8001c68: dd f8 20 25                  	ldr.w	r2, [sp, #1312]
 8001c6c: dd f8 1b 34                  	ldr.w	r3, [sp, #1051]
 8001c70: dd f8 23 55                  	ldr.w	r5, [sp, #1315]
 8001c74: 47 f8 47 1c                  	str	r1, [r7, #-71]
 8001c78: cd f8 0c 24                  	str.w	r2, [sp, #1036]
 8001c7c: 47 f8 44 3c                  	str	r3, [r7, #-68]
 8001c80: ed 94                        	str	r4, [sp, #948]
 8001c82: ad f8 b8 63                  	strh.w	r6, [sp, #952]
 8001c86: cd f8 ac e3                  	str.w	lr, [sp, #940]
 8001c8a: ad f8 b0 c3                  	strh.w	r12, [sp, #944]
 8001c8e: cd f8 0f 54                  	str.w	r5, [sp, #1039]
 8001c92: 00 20                        	movs	r0, #0
 8001c94: a4 90                        	str	r0, [sp, #656]
 8001c96: ff f7 3b b8                  	b.w	#-3978 <$t.4+0x192>
 8001c9a: 00 25                        	movs	r5, #0
 8001c9c: 4f f0 0a 0b                  	mov.w	r11, #10
 8001ca0: 01 22                        	movs	r2, #1
 8001ca2: 00 26                        	movs	r6, #0
 8001ca4: 00 24                        	movs	r4, #0
 8001ca6: 4f f0 00 0e                  	mov.w	lr, #0
 8001caa: 00 20                        	movs	r0, #0
 8001cac: 95 94                        	str	r4, [sp, #596]
 8001cae: 9e 90                        	str	r0, [sp, #632]
 8001cb0: 00 20                        	movs	r0, #0
 8001cb2: 4f f0 00 0c                  	mov.w	r12, #0
 8001cb6: 4f f0 00 09                  	mov.w	r9, #0
 8001cba: 9f 90                        	str	r0, [sp, #636]
 8001cbc: 53 e1                        	b	#678 <$t.14+0x500>
 8001cbe: 00 20                        	movs	r0, #0
 8001cc0: 4f f0 00 08                  	mov.w	r8, #0
 8001cc4: 96 90                        	str	r0, [sp, #600]
 8001cc6: 01 23                        	movs	r3, #1
 8001cc8: 0c 24                        	movs	r4, #12
 8001cca: 00 20                        	movs	r0, #0
 8001ccc: 00 26                        	movs	r6, #0
 8001cce: 01 22                        	movs	r2, #1
 8001cd0: 00 f0 ef be                  	b.w	#3550 <$t.16+0x6ac>
 8001cd4: 00 21                        	movs	r1, #0
 8001cd6: 4f f0 01 0c                  	mov.w	r12, #1
 8001cda: 95 91                        	str	r1, [sp, #596]
 8001cdc: 13 25                        	movs	r5, #19
 8001cde: 4f f0 00 0b                  	mov.w	r11, #0
 8001ce2: 00 23                        	movs	r3, #0
 8001ce4: 4f f0 00 09                  	mov.w	r9, #0
 8001ce8: 4f f0 00 0e                  	mov.w	lr, #0
 8001cec: 4f f0 00 08                  	mov.w	r8, #0
 8001cf0: 00 26                        	movs	r6, #0
 8001cf2: 00 22                        	movs	r2, #0
 8001cf4: 00 20                        	movs	r0, #0
 8001cf6: 02 f0 08 b8                  	b.w	#8208 <$t.18+0x9f2>
;         Err(v)
 8001cfa: dd f8 f3 13                  	ldr.w	r1, [sp, #1011]
;         self
 8001cfe: 4e ea 08 2e                  	orr.w	lr, lr, r8, lsl #8
;         Err(v)
 8001d02: fc 98                        	ldr	r0, [sp, #1008]
 8001d04: cd f8 23 15                  	str.w	r1, [sp, #1315]
 8001d08: cd f8 20 05                  	str.w	r0, [sp, #1312]
 8001d0c: 00 20                        	movs	r0, #0
 8001d0e: a7 90                        	str	r0, [sp, #668]
 8001d10: ef 9a                        	ldr	r2, [sp, #956]
 8001d12: bd f8 c0 63                  	ldrh.w	r6, [sp, #960]
 8001d16: a9 93                        	str	r3, [sp, #676]
 8001d18: cd f8 64 a2                  	str.w	r10, [sp, #612]
 8001d1c: 4f f0 00 0a                  	mov.w	r10, #0
 8001d20: 47 f8 48 2c                  	str	r2, [r7, #-72]
 8001d24: 01 22                        	movs	r2, #1
 8001d26: 27 f8 44 6c                  	strh	r6, [r7, #-68]
 8001d2a: 9f 9b                        	ldr	r3, [sp, #636]
 8001d2c: 00 20                        	movs	r0, #0
 8001d2e: 8f 90                        	str	r0, [sp, #572]
 8001d30: 00 20                        	movs	r0, #0
 8001d32: 95 90                        	str	r0, [sp, #596]
 8001d34: 00 20                        	movs	r0, #0
 8001d36: a1 90                        	str	r0, [sp, #644]
 8001d38: 00 20                        	movs	r0, #0
 8001d3a: 9a 90                        	str	r0, [sp, #616]
 8001d3c: 00 20                        	movs	r0, #0
 8001d3e: 98 90                        	str	r0, [sp, #608]
;         self
 8001d40: dd f8 23 65                  	ldr.w	r6, [sp, #1315]
;         )?)),
 8001d44: 00 2a                        	cmp	r2, #0
;         self
 8001d46: 57 f8 48 4c                  	ldr	r4, [r7, #-72]
 8001d4a: 37 f8 44 1c                  	ldrh	r1, [r7, #-68]
 8001d4e: dd f8 20 05                  	ldr.w	r0, [sp, #1312]
 8001d52: cd f8 e3 63                  	str.w	r6, [sp, #995]
 8001d56: f8 90                        	str	r0, [sp, #992]
 8001d58: f6 94                        	str	r4, [sp, #984]
 8001d5a: ad f8 dc 13                  	strh.w	r1, [sp, #988]
;         )?)),
 8001d5e: 65 d0                        	beq	#202 <$t.14+0x3c6>
;         Err(v)
 8001d60: 98 9c                        	ldr	r4, [sp, #608]
 8001d62: f1 46                        	mov	r9, lr
 8001d64: 27 f8 3a 4c                  	strh	r4, [r7, #-58]
 8001d68: a0 9c                        	ldr	r4, [sp, #640]
 8001d6a: 07 f8 3b 4c                  	strb	r4, [r7, #-59]
 8001d6e: 07 f8 3c 3c                  	strb	r3, [r7, #-60]
 8001d72: 99 9b                        	ldr	r3, [sp, #612]
 8001d74: a4 9c                        	ldr	r4, [sp, #656]
 8001d76: 07 f8 3d 4c                  	strb	r4, [r7, #-61]
 8001d7a: a5 9c                        	ldr	r4, [sp, #660]
 8001d7c: 27 f8 42 3c                  	strh	r3, [r7, #-66]
 8001d80: a9 9b                        	ldr	r3, [sp, #676]
 8001d82: 07 f8 3e 4c                  	strb	r4, [r7, #-62]
 8001d86: a6 9c                        	ldr	r4, [sp, #664]
 8001d88: 07 f8 43 3c                  	strb	r3, [r7, #-67]
 8001d8c: a2 9b                        	ldr	r3, [sp, #648]
 8001d8e: 07 f8 3f 4c                  	strb	r4, [r7, #-63]
 8001d92: a3 9c                        	ldr	r4, [sp, #652]
 8001d94: 07 f8 44 3c                  	strb	r3, [r7, #-68]
 8001d98: a7 9b                        	ldr	r3, [sp, #668]
 8001d9a: bd f8 dc 03                  	ldrh.w	r0, [sp, #988]
 8001d9e: 07 f8 40 4c                  	strb	r4, [r7, #-64]
 8001da2: 8f 9c                        	ldr	r4, [sp, #572]
 8001da4: ad f8 b8 03                  	strh.w	r0, [sp, #952]
 8001da8: 90 98                        	ldr	r0, [sp, #576]
 8001daa: 8d f8 ad 03                  	strb.w	r0, [sp, #941]
 8001dae: 18 0e                        	lsrs	r0, r3, #24
 8001db0: 40 ea 04 20                  	orr.w	r0, r0, r4, lsl #8
 8001db4: a4 90                        	str	r0, [sp, #656]
 8001db6: 92 98                        	ldr	r0, [sp, #584]
 8001db8: dd f8 e0 e3                  	ldr.w	lr, [sp, #992]
 8001dbc: 9d f8 e6 13                  	ldrb.w	r1, [sp, #998]
 8001dc0: c0 b2                        	uxtb	r0, r0
 8001dc2: bd f8 e4 23                  	ldrh.w	r2, [sp, #996]
 8001dc6: 40 ea 03 20                  	orr.w	r0, r0, r3, lsl #8
 8001dca: 96 90                        	str	r0, [sp, #600]
 8001dcc: 4f f6 ff 70                  	movw	r0, #65535
 8001dd0: 42 ea 01 41                  	orr.w	r1, r2, r1, lsl #16
;     .map_err(|e| nb::Error::Other(Error::BLE(e)))
 8001dd4: 2b ea 00 00                  	bic.w	r0, r11, r0
;         Err(v)
 8001dd8: a6 90                        	str	r0, [sp, #664]
 8001dda: 4f ea 1b 60                  	lsr.w	r0, r11, #24
 8001dde: f6 9e                        	ldr	r6, [sp, #984]
;     .map_err(|e| nb::Error::Other(Error::BLE(e)))
 8001de0: a9 90                        	str	r0, [sp, #676]
 8001de2: 2b f0 ff 00                  	bic	r0, r11, #255
;         Err(v)
 8001de6: a5 90                        	str	r0, [sp, #660]
 8001de8: 4f ea 1e 60                  	lsr.w	r0, lr, #24
 8001dec: a3 90                        	str	r0, [sp, #652]
 8001dee: 4f ea 1e 40                  	lsr.w	r0, lr, #16
 8001df2: a2 90                        	str	r0, [sp, #648]
 8001df4: 4f ea 1e 20                  	lsr.w	r0, lr, #8
 8001df8: 9d 90                        	str	r0, [sp, #628]
 8001dfa: 08 0c                        	lsrs	r0, r1, #16
 8001dfc: cd e9 9f 01                  	strd	r0, r1, [sp, #636]
 8001e00: 08 0a                        	lsrs	r0, r1, #8
 8001e02: 8d f8 ac a3                  	strb.w	r10, [sp, #940]
 8001e06: cd f8 9c b2                  	str.w	r11, [sp, #668]
 8001e0a: cd f8 70 e2                  	str.w	lr, [sp, #624]
 8001e0e: 0d f5 83 6e                  	add.w	lr, sp, #1048
 8001e12: 47 f8 48 9c                  	str	r9, [r7, #-72]
 8001e16: ed 96                        	str	r6, [sp, #948]
 8001e18: cd f8 ae 83                  	str.w	r8, [sp, #942]
 8001e1c: 9e 90                        	str	r0, [sp, #632]
 8001e1e: cd f8 64 c2                  	str.w	r12, [sp, #612]
 8001e22: dd f8 9c a0                  	ldr.w	r10, [sp, #156]
 8001e26: 98 95                        	str	r5, [sp, #608]
 8001e28: 03 f0 53 bd                  	b.w	#15014 <$t.24+0x1750>
;         0x02 => Ok(Event::LeAdvertisingReport(to_le_advertising_report(
 8001e2c: f6 98                        	ldr	r0, [sp, #984]
 8001e2e: 0b 24                        	movs	r4, #11
 8001e30: bd f8 dc 13                  	ldrh.w	r1, [sp, #988]
 8001e34: eb 90                        	str	r0, [sp, #940]
 8001e36: ad f8 b0 13                  	strh.w	r1, [sp, #944]
 8001e3a: dd f8 03 14                  	ldr.w	r1, [sp, #1027]
 8001e3e: dd f8 00 04                  	ldr.w	r0, [sp, #1024]
 8001e42: cd f8 0f 14                  	str.w	r1, [sp, #1039]
 8001e46: d9 b2                        	uxtb	r1, r3
 8001e48: cd f8 0c 04                  	str.w	r0, [sp, #1036]
 8001e4c: a0 98                        	ldr	r0, [sp, #640]
 8001e4e: 9d f8 e0 23                  	ldrb.w	r2, [sp, #992]
 8001e52: 9c 92                        	str	r2, [sp, #624]
 8001e54: c0 b2                        	uxtb	r0, r0
 8001e56: 9d f8 e5 23                  	ldrb.w	r2, [sp, #997]
 8001e5a: 41 ea 00 20                  	orr.w	r0, r1, r0, lsl #8
 8001e5e: 98 99                        	ldr	r1, [sp, #608]
 8001e60: 9e 92                        	str	r2, [sp, #632]
 8001e62: 9d f8 e6 23                  	ldrb.w	r2, [sp, #998]
 8001e66: 40 ea 01 40                  	orr.w	r0, r0, r1, lsl #16
 8001e6a: 96 90                        	str	r0, [sp, #600]
 8001e6c: a3 98                        	ldr	r0, [sp, #652]
 8001e6e: a4 99                        	ldr	r1, [sp, #656]
 8001e70: 9f 92                        	str	r2, [sp, #636]
 8001e72: c0 b2                        	uxtb	r0, r0
 8001e74: 9d f8 d7 23                  	ldrb.w	r2, [sp, #983]
 8001e78: 40 ea 01 60                  	orr.w	r0, r0, r1, lsl #24
 8001e7c: a5 99                        	ldr	r1, [sp, #660]
 8001e7e: 07 f8 45 2c                  	strb	r2, [r7, #-69]
 8001e82: 99 9a                        	ldr	r2, [sp, #612]
 8001e84: c9 b2                        	uxtb	r1, r1
 8001e86: 07 f8 48 4c                  	strb	r4, [r7, #-72]
 8001e8a: 40 ea 01 40                  	orr.w	r0, r0, r1, lsl #16
 8001e8e: a6 99                        	ldr	r1, [sp, #664]
 8001e90: 27 f8 3a 2c                  	strh	r2, [r7, #-58]
 8001e94: a9 9a                        	ldr	r2, [sp, #676]
 8001e96: c9 b2                        	uxtb	r1, r1
 8001e98: dd f8 e1 43                  	ldr.w	r4, [sp, #993]
 8001e9c: 40 ea 01 20                  	orr.w	r0, r0, r1, lsl #8
 8001ea0: a7 99                        	ldr	r1, [sp, #668]
 8001ea2: a6 90                        	str	r0, [sp, #664]
 8001ea4: 47 f8 40 ec                  	str	lr, [r7, #-64]
 8001ea8: 08 0e                        	lsrs	r0, r1, #24
 8001eaa: dd f8 3c e2                  	ldr.w	lr, [sp, #572]
 8001eae: a4 90                        	str	r0, [sp, #656]
 8001eb0: 08 0c                        	lsrs	r0, r1, #16
 8001eb2: 99 90                        	str	r0, [sp, #612]
 8001eb4: 08 0a                        	lsrs	r0, r1, #8
 8001eb6: a9 90                        	str	r0, [sp, #676]
 8001eb8: 4f ea 18 60                  	lsr.w	r0, r8, #24
 8001ebc: 94 90                        	str	r0, [sp, #592]
 8001ebe: 4f ea 18 40                  	lsr.w	r0, r8, #16
 8001ec2: 93 90                        	str	r0, [sp, #588]
 8001ec4: 4f ea 18 20                  	lsr.w	r0, r8, #8
 8001ec8: 98 90                        	str	r0, [sp, #608]
 8001eca: 20 0e                        	lsrs	r0, r4, #24
 8001ecc: a0 90                        	str	r0, [sp, #640]
 8001ece: 20 0c                        	lsrs	r0, r4, #16
 8001ed0: a3 90                        	str	r0, [sp, #652]
 8001ed2: 20 0a                        	lsrs	r0, r4, #8
 8001ed4: 07 f8 3b 2c                  	strb	r2, [r7, #-59]
 8001ed8: a2 9a                        	ldr	r2, [sp, #648]
 8001eda: a2 90                        	str	r0, [sp, #648]
 8001edc: 4f ea 1e 20                  	lsr.w	r0, lr, #8
 8001ee0: a5 90                        	str	r0, [sp, #660]
 8001ee2: bd f8 d5 63                  	ldrh.w	r6, [sp, #981]
 8001ee6: 07 f8 3c 2c                  	strb	r2, [r7, #-60]
 8001eea: 9d 9a                        	ldr	r2, [sp, #628]
 8001eec: 47 f8 44 2c                  	str	r2, [r7, #-68]
 8001ef0: 4f ea 1e 42                  	lsr.w	r2, lr, #16
 8001ef4: 27 f8 47 6c                  	strh	r6, [r7, #-71]
 8001ef8: 8d f8 b9 53                  	strb.w	r5, [sp, #953]
 8001efc: 48 46                        	mov	r0, r9
 8001efe: 8d f8 b8 c3                  	strb.w	r12, [sp, #952]
 8001f02: cd f8 b4 b3                  	str.w	r11, [sp, #948]
 8001f06: a7 91                        	str	r1, [sp, #668]
 8001f08: cd f8 44 82                  	str.w	r8, [sp, #580]
 8001f0c: 9d 94                        	str	r4, [sp, #628]
 8001f0e: cd f8 c0 91                  	str.w	r9, [sp, #448]
 8001f12: dd f8 78 e0                  	ldr.w	lr, [sp, #120]
 8001f16: 03 f0 16 bd                  	b.w	#14892 <$t.24+0x17c4>
;             0x9200 => Ok(Stm32Wb5xEvent::CoprocessorReady(to_coprocessor_ready(
 8001f1a: b0 f5 00 6f                  	cmp.w	r0, #2048
 8001f1e: 00 f0 79 87                  	beq.w	#3826 <$t.16+0xa0e>
 8001f22: 40 f6 01 01                  	movw	r1, #2049
 8001f26: 88 42                        	cmp	r0, r1
 8001f28: 41 f0 05 86                  	bne.w	#7178 <$t.18+0x81e>
;     require_len!(buffer, 5);
 8001f2c: a9 98                        	ldr	r0, [sp, #676]
 8001f2e: 05 28                        	cmp	r0, #5
 8001f30: 42 f0 8d 80                  	bne.w	#8474 <$t.20+0x44>
;     require_l2cap_event_data_len!(buffer, 0);
 8001f34: 9d f8 af 02                  	ldrb.w	r0, [sp, #687]
 8001f38: 00 28                        	cmp	r0, #0
 8001f3a: 03 f0 40 87                  	beq.w	#16000 <$t.24+0x1c3c>
 8001f3e: 12 21                        	movs	r1, #18
 8001f40: 07 22                        	movs	r2, #7
 8001f42: 02 f0 87 b8                  	b.w	#8462 <$t.20+0x4a>
 8001f46: 02 22                        	movs	r2, #2
 8001f48: 00 26                        	movs	r6, #0
 8001f4a: 00 24                        	movs	r4, #0
 8001f4c: 4f f0 00 0e                  	mov.w	lr, #0
 8001f50: 23 94                        	str	r4, [sp, #140]
 8001f52: 00 24                        	movs	r4, #0
 8001f54: 00 20                        	movs	r0, #0
 8001f56: 95 94                        	str	r4, [sp, #596]
 8001f58: 9e 90                        	str	r0, [sp, #632]
 8001f5a: 00 20                        	movs	r0, #0
 8001f5c: 4f f0 00 0c                  	mov.w	r12, #0
 8001f60: 4f f0 00 09                  	mov.w	r9, #0
 8001f64: 9f 90                        	str	r0, [sp, #636]
 8001f66: 00 20                        	movs	r0, #0
;         Err(v)
 8001f68: cd f8 b6 43                  	str.w	r4, [sp, #950]
 8001f6c: a7 9c                        	ldr	r4, [sp, #668]
 8001f6e: a1 90                        	str	r0, [sp, #644]
 8001f70: a9 98                        	ldr	r0, [sp, #676]
 8001f72: 47 e9 10 b3                  	strd	r11, r3, [r7, #-64]
 8001f76: 07 f8 48 2c                  	strb	r2, [r7, #-72]
 8001f7a: 4f f6 ff 72                  	movw	r2, #65535
 8001f7e: 47 f8 44 0c                  	str	r0, [r7, #-68]
;     .map_err(|e| nb::Error::Other(Error::BLE(e)))
 8001f82: 24 ea 02 00                  	bic.w	r0, r4, r2
;         Err(v)
 8001f86: a6 90                        	str	r0, [sp, #664]
 8001f88: 4e ea 05 00                  	orr.w	r0, lr, r5
 8001f8c: 30 43                        	orrs	r0, r6
 8001f8e: 96 90                        	str	r0, [sp, #600]
 8001f90: 4c ea 06 00                  	orr.w	r0, r12, r6
 8001f94: 07 f8 47 1c                  	strb	r1, [r7, #-71]
 8001f98: 40 ea 09 00                  	orr.w	r0, r0, r9
 8001f9c: a4 90                        	str	r0, [sp, #656]
 8001f9e: 20 0e                        	lsrs	r0, r4, #24
 8001fa0: 8d f8 b5 a3                  	strb.w	r10, [sp, #949]
;     .map_err(|e| nb::Error::Other(Error::BLE(e)))
 8001fa4: a9 90                        	str	r0, [sp, #676]
 8001fa6: 24 f0 ff 00                  	bic	r0, r4, #255
 8001faa: a5 90                        	str	r0, [sp, #660]
 8001fac: 9c 98                        	ldr	r0, [sp, #624]
;         Err(v)
 8001fae: 8d f8 b4 83                  	strb.w	r8, [sp, #948]
 8001fb2: 01 0e                        	lsrs	r1, r0, #24
 8001fb4: a3 91                        	str	r1, [sp, #652]
 8001fb6: 01 0c                        	lsrs	r1, r0, #16
 8001fb8: a2 91                        	str	r1, [sp, #648]
 8001fba: 01 f0 da be                  	b.w	#7604 <$t.18+0xa5a>
 8001fbe: 00 20                        	movs	r0, #0
 8001fc0: 02 22                        	movs	r2, #2
 8001fc2: 96 90                        	str	r0, [sp, #600]
 8001fc4: 01 23                        	movs	r3, #1
 8001fc6: 00 24                        	movs	r4, #0
 8001fc8: 00 20                        	movs	r0, #0
 8001fca: 00 26                        	movs	r6, #0
 8001fcc: 00 f0 6f bd                  	b.w	#2782 <$t.16+0x6a8>
 8001fd0: 8a 46                        	mov	r10, r1
 8001fd2: 00 21                        	movs	r1, #0
 8001fd4: 95 91                        	str	r1, [sp, #596]
 8001fd6: 4f f0 02 0c                  	mov.w	r12, #2
 8001fda: 4f f0 00 0b                  	mov.w	r11, #0
 8001fde: 00 23                        	movs	r3, #0
 8001fe0: 4f f0 00 09                  	mov.w	r9, #0
 8001fe4: 4f f0 00 0e                  	mov.w	lr, #0
 8001fe8: 4f f0 00 08                  	mov.w	r8, #0
 8001fec: 00 26                        	movs	r6, #0
 8001fee: 00 22                        	movs	r2, #0
 8001ff0: 00 20                        	movs	r0, #0
 8001ff2: 01 f0 8a be                  	b.w	#7444 <$t.18+0x9f2>
 8001ff6: 40 f6 02 01                  	movw	r1, #2050
;             0x9200 => Ok(Stm32Wb5xEvent::CoprocessorReady(to_coprocessor_ready(
 8001ffa: 88 42                        	cmp	r0, r1
 8001ffc: 01 f0 a7 85                  	beq.w	#6990 <$t.18+0x836>
 8002000: b0 f5 12 4f                  	cmp.w	r0, #37376
 8002004: 41 f0 97 85                  	bne.w	#6958 <$t.18+0x81e>
 8002008: a9 99                        	ldr	r1, [sp, #676]
;     require_len!(buffer, 3);
 800200a: 03 29                        	cmp	r1, #3
 800200c: 43 f0 07 83                  	bne.w	#13838 <$t.24+0x149c>
;             0x9200 => Ok(Stm32Wb5xEvent::CoprocessorReady(to_coprocessor_ready(
 8002010: a7 f1 48 02                  	sub.w	r2, r7, #72
 8002014: 37 f8 3c 3c                  	ldrh	r3, [r7, #-60]
 8002018: 00 26                        	movs	r6, #0
 800201a: 00 25                        	movs	r5, #0
 800201c: 07 ca                        	ldm	r2, {r0, r1, r2}
 800201e: 99 95                        	str	r5, [sp, #612]
 8002020: ad f8 f0 63                  	strh.w	r6, [sp, #1008]
 8002024: cd f8 f2 03                  	str.w	r0, [sp, #1010]
 8002028: cd f8 f6 13                  	str.w	r1, [sp, #1014]
 800202c: cd f8 fa 23                  	str.w	r2, [sp, #1018]
 8002030: ad f8 fe 33                  	strh.w	r3, [sp, #1022]
 8002034: 03 f0 10 bf                  	b.w	#15904 <$t.24+0x1cd6>
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 8002038: 03 2c                        	cmp	r4, #3
 800203a: 0a f0 53 82                  	beq.w	#42150 <$t.42+0x32a>
 800203e: 9d f8 ae 02                  	ldrb.w	r0, [sp, #686]
 8002042: 10 f0 0d fa                  	bl	#66586
;                 ReturnParameters::SetEventMask(to_status(&bytes[3..])?)
 8002046: c0 07                        	lsls	r0, r0, #31
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 8002048: a4 91                        	str	r1, [sp, #656]
 800204a: 4f f0 00 00                  	mov.w	r0, #0
;                 ReturnParameters::SetEventMask(to_status(&bytes[3..])?)
 800204e: a7 90                        	str	r0, [sp, #668]
 8002050: 41 f0 a8 86                  	bne.w	#7504 <$t.18+0xa8c>
 8002054: 01 20                        	movs	r0, #1
 8002056: 00 f0 83 bc                  	b.w	#2310 <$t.16+0x55a>
 800205a: 00 20                        	movs	r0, #0
 800205c: a5 90                        	str	r0, [sp, #660]
 800205e: 00 20                        	movs	r0, #0
 8002060: 1b 90                        	str	r0, [sp, #108]
 8002062: 00 20                        	movs	r0, #0
 8002064: 14 90                        	str	r0, [sp, #80]
 8002066: 03 f0 59 bb                  	b.w	#14002 <$t.24+0x159a>
 800206a: 41 f2 05 40                  	movw	r0, #5125
;             crate::opcode::Opcode(0x0000) => ReturnParameters::Spontaneous,
 800206e: 82 42                        	cmp	r2, r0
 8002070: 35 d1                        	bne	#106 <$t.14+0x678>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8002072: 03 3c                        	subs	r4, #3
;         if $left.len() != $right {
 8002074: 04 2c                        	cmp	r4, #4
 8002076: 40 f0 52 83                  	bne.w	#1700 <$t.16+0x318>
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 800207a: 9d f8 ae 02                  	ldrb.w	r0, [sp, #686]
 800207e: 10 f0 ef f9                  	bl	#66526
 8002082: 0a 46                        	mov	r2, r1
;         status: to_status(bytes)?,
 8002084: c0 07                        	lsls	r0, r0, #31
 8002086: 41 f0 d7 87                  	bne.w	#8110 <$t.20+0x2e>
; }
 800208a: 9d f8 b1 02                  	ldrb.w	r0, [sp, #689]
 800208e: d2 b2                        	uxtb	r2, r2
;     copy_nonoverlapping(src, dst, count)
 8002090: bd f8 af 12                  	ldrh.w	r1, [sp, #687]
;         self
 8002094: 41 ea 02 41                  	orr.w	r1, r1, r2, lsl #16
 8002098: 41 ea 00 60                  	orr.w	r0, r1, r0, lsl #24
;             crate::opcode::READ_RSSI => ReturnParameters::ReadRssi(to_read_rssi(&bytes[3..])?),
 800209c: f8 90                        	str	r0, [sp, #992]
 800209e: 08 20                        	movs	r0, #8
 80020a0: 00 f0 88 bc                  	b.w	#2320 <$t.16+0x5ae>
 80020a4: 40 f6 2d 40                  	movw	r0, #3117
;             crate::opcode::Opcode(0x0000) => ReturnParameters::Spontaneous,
 80020a8: 82 42                        	cmp	r2, r0
 80020aa: 18 d1                        	bne	#48 <$t.14+0x678>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 80020ac: 03 3c                        	subs	r4, #3
;         if $left.len() != $right {
 80020ae: 04 2c                        	cmp	r4, #4
 80020b0: 40 f0 35 83                  	bne.w	#1642 <$t.16+0x318>
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 80020b4: 9d f8 ae 02                  	ldrb.w	r0, [sp, #686]
 80020b8: 10 f0 d2 f9                  	bl	#66468
 80020bc: 0a 46                        	mov	r2, r1
;         status: to_status(bytes)?,
 80020be: c0 07                        	lsls	r0, r0, #31
 80020c0: 41 f0 ba 87                  	bne.w	#8052 <$t.20+0x2e>
; }
 80020c4: 9d f8 b1 02                  	ldrb.w	r0, [sp, #689]
 80020c8: d2 b2                        	uxtb	r2, r2
;     copy_nonoverlapping(src, dst, count)
 80020ca: bd f8 af 12                  	ldrh.w	r1, [sp, #687]
;         self
 80020ce: 41 ea 02 41                  	orr.w	r1, r1, r2, lsl #16
 80020d2: 41 ea 00 60                  	orr.w	r0, r1, r0, lsl #24
;                 ReturnParameters::ReadTxPowerLevel(to_tx_power_level(&bytes[3..])?)
 80020d6: f8 90                        	str	r0, [sp, #992]
 80020d8: 03 20                        	movs	r0, #3
 80020da: 00 f0 6b bc                  	b.w	#2262 <$t.16+0x5ae>
;                 if other.ogf() != VENDOR_OGF {
 80020de: 90 0a                        	lsrs	r0, r2, #10
 80020e0: 3e 28                        	cmp	r0, #62
 80020e2: 41 f2 4c 86                  	bls.w	#7320 <$t.18+0xa66>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 80020e6: 60 1e                        	subs	r0, r4, #1
;         assert!($size <= $src.len());
 80020e8: 01 28                        	cmp	r0, #1
 80020ea: 42 f2 eb 83                  	bls.w	#10198 <$t.24+0x742>
;             crate::opcode::HAL_GET_FIRMWARE_REVISION => Ok(
 80020ee: a2 f5 7c 41                  	sub.w	r1, r2, #64512
 80020f2: 13 46                        	mov	r3, r2
 80020f4: b1 f5 c1 7f                  	cmp.w	r1, #386
 80020f8: 05 f2 18 87                  	bhi.w	#24112 <$t.24+0x3daa>
 80020fc: 4f f6 ff 30                  	movw	r0, #64511
 8002100: df e8 11 f0                  	tbh	[pc, r1, lsl #1]

08002104 $d.15:
 8002104:	83 01 14 2f	.word	0x2f140183
 8002108:	14 2f 14 2f	.word	0x2f142f14
 800210c:	14 2f 14 2f	.word	0x2f142f14
 8002110:	14 2f 14 2f	.word	0x2f142f14
 8002114:	14 2f 14 2f	.word	0x2f142f14
 8002118:	14 2f 14 2f	.word	0x2f142f14
 800211c:	7c 34 cc 36	.word	0x36cc347c
 8002120:	14 2f 53 36	.word	0x36532f14
 8002124:	14 2f 14 2f	.word	0x2f142f14
 8002128:	14 2f b0 39	.word	0x39b02f14
 800212c:	71 36 69 33	.word	0x33693671
 8002130:	88 33 b8 35	.word	0x35b83388
 8002134:	14 2f aa 34	.word	0x34aa2f14
 8002138:	14 2f 14 2f	.word	0x2f142f14
 800213c:	14 2f 14 2f	.word	0x2f142f14
 8002140:	14 2f 14 2f	.word	0x2f142f14
 8002144:	14 2f 14 2f	.word	0x2f142f14
 8002148:	14 2f 14 2f	.word	0x2f142f14
 800214c:	14 2f 14 2f	.word	0x2f142f14
 8002150:	14 2f 14 2f	.word	0x2f142f14
 8002154:	14 2f 14 2f	.word	0x2f142f14
 8002158:	14 2f 14 2f	.word	0x2f142f14
 800215c:	14 2f 14 2f	.word	0x2f142f14
 8002160:	14 2f 14 2f	.word	0x2f142f14
 8002164:	14 2f 14 2f	.word	0x2f142f14
 8002168:	14 2f 14 2f	.word	0x2f142f14
 800216c:	14 2f 14 2f	.word	0x2f142f14
 8002170:	14 2f 14 2f	.word	0x2f142f14
 8002174:	14 2f 14 2f	.word	0x2f142f14
 8002178:	14 2f 14 2f	.word	0x2f142f14
 800217c:	14 2f 14 2f	.word	0x2f142f14
 8002180:	14 2f 14 2f	.word	0x2f142f14
 8002184:	14 2f 14 2f	.word	0x2f142f14
 8002188:	14 2f 14 2f	.word	0x2f142f14
 800218c:	14 2f 14 2f	.word	0x2f142f14
 8002190:	14 2f 14 2f	.word	0x2f142f14
 8002194:	14 2f 14 2f	.word	0x2f142f14
 8002198:	14 2f 14 2f	.word	0x2f142f14
 800219c:	14 2f 14 2f	.word	0x2f142f14
 80021a0:	14 2f 14 2f	.word	0x2f142f14
 80021a4:	14 2f 14 2f	.word	0x2f142f14
 80021a8:	14 2f 14 2f	.word	0x2f142f14
 80021ac:	14 2f 14 2f	.word	0x2f142f14
 80021b0:	14 2f 14 2f	.word	0x2f142f14
 80021b4:	14 2f 14 2f	.word	0x2f142f14
 80021b8:	14 2f 14 2f	.word	0x2f142f14
 80021bc:	14 2f 14 2f	.word	0x2f142f14
 80021c0:	14 2f 14 2f	.word	0x2f142f14
 80021c4:	14 2f 14 2f	.word	0x2f142f14
 80021c8:	14 2f 14 2f	.word	0x2f142f14
 80021cc:	14 2f 14 2f	.word	0x2f142f14
 80021d0:	14 2f 14 2f	.word	0x2f142f14
 80021d4:	14 2f 14 2f	.word	0x2f142f14
 80021d8:	14 2f 14 2f	.word	0x2f142f14
 80021dc:	14 2f 14 2f	.word	0x2f142f14
 80021e0:	14 2f 14 2f	.word	0x2f142f14
 80021e4:	14 2f 14 2f	.word	0x2f142f14
 80021e8:	14 2f 14 2f	.word	0x2f142f14
 80021ec:	14 2f 14 2f	.word	0x2f142f14
 80021f0:	14 2f 14 2f	.word	0x2f142f14
 80021f4:	14 2f 14 2f	.word	0x2f142f14
 80021f8:	14 2f 14 2f	.word	0x2f142f14
 80021fc:	14 2f 14 2f	.word	0x2f142f14
 8002200:	14 2f 14 2f	.word	0x2f142f14
 8002204:	14 2f 8e 3a	.word	0x3a8e2f14
 8002208:	14 2f f5 31	.word	0x31f52f14
 800220c:	d6 31 58 3c	.word	0x3c5831d6
 8002210:	15 36 34 36	.word	0x36343615
 8002214:	27 3b cb 37	.word	0x37cb3b27
 8002218:	27 3e a7 33	.word	0x33a73e27
 800221c:	8f 3d 14 2f	.word	0x2f143d8f
 8002220:	14 31 d0 32	.word	0x32d03114
 8002224:	52 31 02 35	.word	0x35023152
 8002228:	33 31 14 2f	.word	0x2f143133
 800222c:	a0 3e 82 3e	.word	0x3e823ea0
 8002230:	14 2f 14 2f	.word	0x2f142f14
 8002234:	14 2f 14 2f	.word	0x2f142f14
 8002238:	14 2f 14 2f	.word	0x2f142f14
 800223c:	14 2f 14 32	.word	0x32142f14
 8002240:	14 2f 14 2f	.word	0x2f142f14
 8002244:	dd 33 dd 36	.word	0x36dd33dd
 8002248:	7a 34 bf 3f	.word	0x3fbf347a
 800224c:	b7 31 14 2f	.word	0x2f1431b7
 8002250:	14 2f 14 2f	.word	0x2f142f14
 8002254:	14 2f 14 2f	.word	0x2f142f14
 8002258:	14 2f 14 2f	.word	0x2f142f14
 800225c:	14 2f 14 2f	.word	0x2f142f14
 8002260:	14 2f 14 2f	.word	0x2f142f14
 8002264:	14 2f 14 2f	.word	0x2f142f14
 8002268:	14 2f 14 2f	.word	0x2f142f14
 800226c:	14 2f 14 2f	.word	0x2f142f14
 8002270:	14 2f 14 2f	.word	0x2f142f14
 8002274:	14 2f 14 2f	.word	0x2f142f14
 8002278:	14 2f 14 2f	.word	0x2f142f14
 800227c:	14 2f 14 2f	.word	0x2f142f14
 8002280:	14 2f 14 2f	.word	0x2f142f14
 8002284:	14 2f 14 2f	.word	0x2f142f14
 8002288:	14 2f 14 2f	.word	0x2f142f14
 800228c:	14 2f 14 2f	.word	0x2f142f14
 8002290:	14 2f 14 2f	.word	0x2f142f14
 8002294:	14 2f 14 2f	.word	0x2f142f14
 8002298:	14 2f 14 2f	.word	0x2f142f14
 800229c:	14 2f 14 2f	.word	0x2f142f14
 80022a0:	14 2f 14 2f	.word	0x2f142f14
 80022a4:	14 2f 14 2f	.word	0x2f142f14
 80022a8:	14 2f 14 2f	.word	0x2f142f14
 80022ac:	14 2f 14 2f	.word	0x2f142f14
 80022b0:	14 2f 14 2f	.word	0x2f142f14
 80022b4:	14 2f 14 2f	.word	0x2f142f14
 80022b8:	14 2f 14 2f	.word	0x2f142f14
 80022bc:	14 2f 14 2f	.word	0x2f142f14
 80022c0:	14 2f 14 2f	.word	0x2f142f14
 80022c4:	14 2f 14 2f	.word	0x2f142f14
 80022c8:	14 2f 14 2f	.word	0x2f142f14
 80022cc:	14 2f 14 2f	.word	0x2f142f14
 80022d0:	14 2f 14 2f	.word	0x2f142f14
 80022d4:	14 2f 14 2f	.word	0x2f142f14
 80022d8:	14 2f 14 2f	.word	0x2f142f14
 80022dc:	14 2f 14 2f	.word	0x2f142f14
 80022e0:	14 2f 14 2f	.word	0x2f142f14
 80022e4:	14 2f 14 2f	.word	0x2f142f14
 80022e8:	14 2f 14 2f	.word	0x2f142f14
 80022ec:	14 2f 14 2f	.word	0x2f142f14
 80022f0:	14 2f 14 2f	.word	0x2f142f14
 80022f4:	14 2f 14 2f	.word	0x2f142f14
 80022f8:	14 2f 14 2f	.word	0x2f142f14
 80022fc:	14 2f 14 2f	.word	0x2f142f14
 8002300:	14 2f 14 2f	.word	0x2f142f14
 8002304:	14 2f bd 3b	.word	0x3bbd2f14
 8002308:	4e 3f 53 30	.word	0x30533f4e
 800230c:	8c 37 0e 30	.word	0x300e378c
 8002310:	23 2f 33 32	.word	0x32332f23
 8002314:	99 35 f1 3c	.word	0x3cf13599
 8002318:	be 40 14 2f	.word	0x2f1440be
 800231c:	14 2f 14 2f	.word	0x2f142f14
 8002320:	14 2f 14 2f	.word	0x2f142f14
 8002324:	14 2f 14 2f	.word	0x2f142f14
 8002328:	14 2f 14 2f	.word	0x2f142f14
 800232c:	14 2f 14 2f	.word	0x2f142f14
 8002330:	14 2f 14 2f	.word	0x2f142f14
 8002334:	14 2f 14 2f	.word	0x2f142f14
 8002338:	14 2f 14 2f	.word	0x2f142f14
 800233c:	14 2f 14 2f	.word	0x2f142f14
 8002340:	14 2f 14 2f	.word	0x2f142f14
 8002344:	14 2f 14 2f	.word	0x2f142f14
 8002348:	14 2f 77 30	.word	0x30772f14
 800234c:	eb 36 0b 39	.word	0x390b36eb
 8002350:	15 40 62 38	.word	0x38624015
 8002354:	63 2f be 2e	.word	0x2ebe2f63
 8002358:	63 41 39 3f	.word	0x3f394163
 800235c:	1f 2f 14 2f	.word	0x2f142f1f
 8002360:	14 2f 14 2f	.word	0x2f142f14
 8002364:	14 2f 14 2f	.word	0x2f142f14
 8002368:	14 2f 14 2f	.word	0x2f142f14
 800236c:	14 2f 14 2f	.word	0x2f142f14
 8002370:	14 2f 14 2f	.word	0x2f142f14
 8002374:	14 2f 14 2f	.word	0x2f142f14
 8002378:	14 2f 14 2f	.word	0x2f142f14
 800237c:	14 2f 14 2f	.word	0x2f142f14
 8002380:	14 2f 14 2f	.word	0x2f142f14
 8002384:	14 2f 14 2f	.word	0x2f142f14
 8002388:	14 2f 14 2f	.word	0x2f142f14
 800238c:	14 2f 14 2f	.word	0x2f142f14
 8002390:	14 2f 14 2f	.word	0x2f142f14
 8002394:	14 2f 14 2f	.word	0x2f142f14
 8002398:	14 2f 14 2f	.word	0x2f142f14
 800239c:	14 2f 14 2f	.word	0x2f142f14
 80023a0:	14 2f 14 2f	.word	0x2f142f14
 80023a4:	14 2f 14 2f	.word	0x2f142f14
 80023a8:	14 2f 14 2f	.word	0x2f142f14
 80023ac:	14 2f 14 2f	.word	0x2f142f14
 80023b0:	14 2f 14 2f	.word	0x2f142f14
 80023b4:	14 2f 14 2f	.word	0x2f142f14
 80023b8:	14 2f 14 2f	.word	0x2f142f14
 80023bc:	14 2f 14 2f	.word	0x2f142f14
 80023c0:	14 2f 14 2f	.word	0x2f142f14
 80023c4:	14 2f 14 2f	.word	0x2f142f14
 80023c8:	14 2f 14 2f	.word	0x2f142f14
 80023cc:	14 2f 14 2f	.word	0x2f142f14
 80023d0:	14 2f 14 2f	.word	0x2f142f14
 80023d4:	14 2f 14 2f	.word	0x2f142f14
 80023d8:	14 2f 14 2f	.word	0x2f142f14
 80023dc:	14 2f 14 2f	.word	0x2f142f14
 80023e0:	14 2f 14 2f	.word	0x2f142f14
 80023e4:	14 2f 14 2f	.word	0x2f142f14
 80023e8:	14 2f 14 2f	.word	0x2f142f14
 80023ec:	14 2f 14 2f	.word	0x2f142f14
 80023f0:	14 2f 14 2f	.word	0x2f142f14
 80023f4:	14 2f 14 2f	.word	0x2f142f14
 80023f8:	14 2f 14 2f	.word	0x2f142f14
 80023fc:	14 2f 14 2f	.word	0x2f142f14
 8002400:	14 2f 14 2f	.word	0x2f142f14
 8002404:	14 2f 14 2f	.word	0x2f142f14
 8002408:	e0 39		.short	0x39e0

0800240a $t.16:
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 800240a: a9 98                        	ldr	r0, [sp, #676]
 800240c: 03 38                        	subs	r0, #3
;     require_len!(bytes, 3);
 800240e: 03 28                        	cmp	r0, #3
 8002410: 48 f0 5e 82                  	bne.w	#33980 <$t.24+0x674e>
;         intrinsics::offset(self, count)
 8002414: 08 f1 06 01                  	add.w	r1, r8, #6
 8002418: 0d f5 83 60                  	add.w	r0, sp, #1048
;         status: to_status(bytes)?,
 800241c: 03 22                        	movs	r2, #3
 800241e: 14 f0 d5 ff                  	bl	#85930
;         self
 8002422: 9d f8 18 04                  	ldrb.w	r0, [sp, #1048]
;         status: to_status(bytes)?,
 8002426: 01 28                        	cmp	r0, #1
 8002428: 06 f0 ef 84                  	beq.w	#27102 <$t.24+0x4c88>
 800242c: 9d f8 19 04                  	ldrb.w	r0, [sp, #1049]
 8002430: 4f f0 00 0b                  	mov.w	r11, #0
;             crate::opcode::HAL_GET_FIRMWARE_REVISION => Ok(
 8002434: 8d f8 f4 03                  	strb.w	r0, [sp, #1012]
 8002438: 9d f8 08 04                  	ldrb.w	r0, [sp, #1032]
 800243c: 01 90                        	str	r0, [sp, #4]
 800243e: 9d f8 09 04                  	ldrb.w	r0, [sp, #1033]
 8002442: 00 90                        	str	r0, [sp]
 8002444: bd f8 0a 04                  	ldrh.w	r0, [sp, #1034]
 8002448: 57 e9 10 54                  	ldrd	r5, r4, [r7, #-64]
 800244c: 1f 90                        	str	r0, [sp, #124]
 800244e: 00 0a                        	lsrs	r0, r0, #8
 8002450: dd f8 0c 14                  	ldr.w	r1, [sp, #1036]
 8002454: 94 90                        	str	r0, [sp, #592]
 8002456: 20 0e                        	lsrs	r0, r4, #24
 8002458: 09 90                        	str	r0, [sp, #36]
 800245a: 20 0c                        	lsrs	r0, r4, #16
 800245c: 0a 90                        	str	r0, [sp, #40]
 800245e: 20 0a                        	lsrs	r0, r4, #8
 8002460: 0b 90                        	str	r0, [sp, #44]
 8002462: 28 0e                        	lsrs	r0, r5, #24
 8002464: 06 90                        	str	r0, [sp, #24]
 8002466: 28 0c                        	lsrs	r0, r5, #16
 8002468: 07 90                        	str	r0, [sp, #28]
 800246a: 28 0a                        	lsrs	r0, r5, #8
 800246c: 08 90                        	str	r0, [sp, #32]
 800246e: 00 20                        	movs	r0, #0
;     copy_nonoverlapping(src, dst, count)
 8002470: bd f8 af 62                  	ldrh.w	r6, [sp, #687]
 8002474: 6d 90                        	str	r0, [sp, #436]
 8002476: 00 20                        	movs	r0, #0
;             crate::opcode::HAL_GET_FIRMWARE_REVISION => Ok(
 8002478: dd f8 10 24                  	ldr.w	r2, [sp, #1040]
 800247c: 6c 90                        	str	r0, [sp, #432]
 800247e: 00 20                        	movs	r0, #0
 8002480: ad f8 f2 63                  	strh.w	r6, [sp, #1010]
 8002484: 6b 90                        	str	r0, [sp, #428]
 8002486: 00 26                        	movs	r6, #0
 8002488: cd f8 f5 13                  	str.w	r1, [sp, #1013]
 800248c: 00 21                        	movs	r1, #0
 800248e: dd f8 13 34                  	ldr.w	r3, [sp, #1043]
 8002492: 00 20                        	movs	r0, #0
 8002494: cd f8 f9 23                  	str.w	r2, [sp, #1017]
 8002498: 6a 90                        	str	r0, [sp, #424]
 800249a: a4 91                        	str	r1, [sp, #656]
 800249c: 8d f8 f0 63                  	strb.w	r6, [sp, #1008]
 80024a0: ff 93                        	str	r3, [sp, #1020]
 80024a2: a9 94                        	str	r4, [sp, #676]
 80024a4: 00 20                        	movs	r0, #0
 80024a6: 04 95                        	str	r5, [sp, #16]
 80024a8: 69 90                        	str	r0, [sp, #420]
 80024aa: 00 20                        	movs	r0, #0
 80024ac: 68 90                        	str	r0, [sp, #416]
 80024ae: 00 20                        	movs	r0, #0
 80024b0: 67 90                        	str	r0, [sp, #412]
 80024b2: 00 20                        	movs	r0, #0
 80024b4: 66 90                        	str	r0, [sp, #408]
 80024b6: 00 20                        	movs	r0, #0
 80024b8: 65 90                        	str	r0, [sp, #404]
 80024ba: 00 20                        	movs	r0, #0
 80024bc: 64 90                        	str	r0, [sp, #400]
 80024be: 00 20                        	movs	r0, #0
 80024c0: 63 90                        	str	r0, [sp, #396]
 80024c2: 00 20                        	movs	r0, #0
 80024c4: 62 90                        	str	r0, [sp, #392]
 80024c6: 00 20                        	movs	r0, #0
 80024c8: 61 90                        	str	r0, [sp, #388]
 80024ca: 00 20                        	movs	r0, #0
 80024cc: 60 90                        	str	r0, [sp, #384]
 80024ce: 00 20                        	movs	r0, #0
 80024d0: 5f 90                        	str	r0, [sp, #380]
 80024d2: 00 20                        	movs	r0, #0
 80024d4: 5e 90                        	str	r0, [sp, #376]
 80024d6: 00 20                        	movs	r0, #0
 80024d8: 5d 90                        	str	r0, [sp, #372]
 80024da: 00 20                        	movs	r0, #0
 80024dc: 5c 90                        	str	r0, [sp, #368]
 80024de: 00 20                        	movs	r0, #0
 80024e0: 5b 90                        	str	r0, [sp, #364]
 80024e2: 00 20                        	movs	r0, #0
 80024e4: 5a 90                        	str	r0, [sp, #360]
 80024e6: 00 20                        	movs	r0, #0
 80024e8: 59 90                        	str	r0, [sp, #356]
 80024ea: 00 20                        	movs	r0, #0
 80024ec: a6 90                        	str	r0, [sp, #664]
 80024ee: 00 20                        	movs	r0, #0
 80024f0: a0 90                        	str	r0, [sp, #640]
 80024f2: 00 20                        	movs	r0, #0
 80024f4: 9e 90                        	str	r0, [sp, #632]
 80024f6: 00 20                        	movs	r0, #0
 80024f8: a2 90                        	str	r0, [sp, #648]
 80024fa: 00 20                        	movs	r0, #0
 80024fc: a3 90                        	str	r0, [sp, #652]
 80024fe: 00 20                        	movs	r0, #0
 8002500: a1 90                        	str	r0, [sp, #644]
 8002502: 00 20                        	movs	r0, #0
 8002504: a7 90                        	str	r0, [sp, #668]
 8002506: 00 20                        	movs	r0, #0
 8002508: 9b 90                        	str	r0, [sp, #620]
 800250a: 00 20                        	movs	r0, #0
 800250c: 9f 90                        	str	r0, [sp, #636]
 800250e: 00 20                        	movs	r0, #0
 8002510: 05 90                        	str	r0, [sp, #20]
 8002512: 00 20                        	movs	r0, #0
 8002514: 9a 90                        	str	r0, [sp, #616]
 8002516: 00 20                        	movs	r0, #0
 8002518: 28 90                        	str	r0, [sp, #160]
 800251a: 00 20                        	movs	r0, #0
 800251c: 96 90                        	str	r0, [sp, #600]
 800251e: 09 f0 3f b8                  	b.w	#36990 <$t.28+0x1a6>
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 8002522: 03 2c                        	cmp	r4, #3
 8002524: 09 f0 de 87                  	beq.w	#40892 <$t.42+0x32a>
 8002528: 9d f8 ae 02                  	ldrb.w	r0, [sp, #686]
 800252c: 0f f0 98 ff                  	bl	#65328
;                 ReturnParameters::LeReceiverTest(to_status(&bytes[3..])?)
 8002530: c0 07                        	lsls	r0, r0, #31
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 8002532: a4 91                        	str	r1, [sp, #656]
 8002534: 4f f0 00 00                  	mov.w	r0, #0
;                 ReturnParameters::LeReceiverTest(to_status(&bytes[3..])?)
 8002538: 0e 90                        	str	r0, [sp, #56]
 800253a: 40 f0 94 81                  	bne.w	#808 <$t.16+0x460>
 800253e: 20 20                        	movs	r0, #32
 8002540: 0e e2                        	b	#1052 <$t.16+0x55a>
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 8002542: 03 2c                        	cmp	r4, #3
 8002544: 09 f0 ce 87                  	beq.w	#40860 <$t.42+0x32a>
 8002548: 9d f8 ae 02                  	ldrb.w	r0, [sp, #686]
 800254c: 0f f0 88 ff                  	bl	#65296
;                 ReturnParameters::LeTransmitterTest(to_status(&bytes[3..])?)
 8002550: c0 07                        	lsls	r0, r0, #31
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 8002552: a4 91                        	str	r1, [sp, #656]
 8002554: 4f f0 00 00                  	mov.w	r0, #0
;                 ReturnParameters::LeTransmitterTest(to_status(&bytes[3..])?)
 8002558: a6 90                        	str	r0, [sp, #664]
 800255a: 41 f0 15 84                  	bne.w	#6186 <$t.18+0xa70>
 800255e: 21 20                        	movs	r0, #33
 8002560: fe e1                        	b	#1020 <$t.16+0x55a>
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 8002562: 03 2c                        	cmp	r4, #3
 8002564: 09 f0 be 87                  	beq.w	#40828 <$t.42+0x32a>
 8002568: 9d f8 ae 02                  	ldrb.w	r0, [sp, #686]
 800256c: 0f f0 78 ff                  	bl	#65264
;                 ReturnParameters::LeSetScanEnable(to_status(&bytes[3..])?)
 8002570: c0 07                        	lsls	r0, r0, #31
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 8002572: a4 91                        	str	r1, [sp, #656]
 8002574: 4f f0 00 00                  	mov.w	r0, #0
;                 ReturnParameters::LeSetScanEnable(to_status(&bytes[3..])?)
 8002578: a7 90                        	str	r0, [sp, #668]
 800257a: 41 f0 13 84                  	bne.w	#6182 <$t.18+0xa8c>
 800257e: 13 20                        	movs	r0, #19
 8002580: ee e1                        	b	#988 <$t.16+0x55a>
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 8002582: 03 2c                        	cmp	r4, #3
 8002584: 09 f0 ae 87                  	beq.w	#40796 <$t.42+0x32a>
 8002588: 9d f8 ae 02                  	ldrb.w	r0, [sp, #686]
 800258c: 0f f0 68 ff                  	bl	#65232
;                 ReturnParameters::LeSetAdvertisingData(to_status(&bytes[3..])?)
 8002590: c0 07                        	lsls	r0, r0, #31
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 8002592: a4 91                        	str	r1, [sp, #656]
 8002594: 4f f0 00 00                  	mov.w	r0, #0
;                 ReturnParameters::LeSetAdvertisingData(to_status(&bytes[3..])?)
 8002598: a7 90                        	str	r0, [sp, #668]
 800259a: 41 f0 03 84                  	bne.w	#6150 <$t.18+0xa8c>
 800259e: 0f 20                        	movs	r0, #15
 80025a0: de e1                        	b	#956 <$t.16+0x55a>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 80025a2: 03 3c                        	subs	r4, #3
;         if $left.len() != $right {
 80025a4: 03 2c                        	cmp	r4, #3
 80025a6: 41 f0 f3 83                  	bne.w	#6118 <$t.18+0xa78>
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 80025aa: 9d f8 ae 02                  	ldrb.w	r0, [sp, #686]
 80025ae: 0f f0 57 ff                  	bl	#65198
;         status: to_status(bytes)?,
 80025b2: c0 07                        	lsls	r0, r0, #31
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 80025b4: a4 91                        	str	r1, [sp, #656]
;         status: to_status(bytes)?,
 80025b6: 43 f0 42 80                  	bne.w	#12420 <$t.24+0x14bc>
;     copy_nonoverlapping(src, dst, count)
 80025ba: bd f8 af 02                  	ldrh.w	r0, [sp, #687]
;             crate::opcode::LE_TEST_END => ReturnParameters::LeTestEnd(to_le_test_end(&bytes[3..])?),
 80025be: a4 99                        	ldr	r1, [sp, #656]
 80025c0: cd f8 e2 03                  	str.w	r0, [sp, #994]
 80025c4: 22 20                        	movs	r0, #34
 80025c6: 8d f8 e6 13                  	strb.w	r1, [sp, #998]
 80025ca: f3 e1                        	b	#998 <$t.16+0x5ae>
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 80025cc: 03 2c                        	cmp	r4, #3
 80025ce: 09 f0 89 87                  	beq.w	#40722 <$t.42+0x32a>
 80025d2: 9d f8 ae 02                  	ldrb.w	r0, [sp, #686]
 80025d6: 0f f0 43 ff                  	bl	#65158
;                 to_le_set_advertise_enable(to_status(&bytes[3..])?)
 80025da: c0 07                        	lsls	r0, r0, #31
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 80025dc: a4 91                        	str	r1, [sp, #656]
 80025de: 4f f0 00 00                  	mov.w	r0, #0
;                 to_le_set_advertise_enable(to_status(&bytes[3..])?)
 80025e2: a7 90                        	str	r0, [sp, #668]
 80025e4: 41 f0 de 83                  	bne.w	#6076 <$t.18+0xa8c>
 80025e8: 11 20                        	movs	r0, #17
 80025ea: b9 e1                        	b	#882 <$t.16+0x55a>
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 80025ec: 03 2c                        	cmp	r4, #3
 80025ee: 09 f0 79 87                  	beq.w	#40690 <$t.42+0x32a>
 80025f2: 9d f8 ae 02                  	ldrb.w	r0, [sp, #686]
 80025f6: 0f f0 33 ff                  	bl	#65126
;                 ReturnParameters::LeSetScanParameters(to_status(&bytes[3..])?)
 80025fa: c0 07                        	lsls	r0, r0, #31
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 80025fc: a4 91                        	str	r1, [sp, #656]
 80025fe: 4f f0 00 00                  	mov.w	r0, #0
;                 ReturnParameters::LeSetScanParameters(to_status(&bytes[3..])?)
 8002602: a7 90                        	str	r0, [sp, #668]
 8002604: 41 f0 ce 83                  	bne.w	#6044 <$t.18+0xa8c>
 8002608: 12 20                        	movs	r0, #18
 800260a: a9 e1                        	b	#850 <$t.16+0x55a>
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 800260c: 03 2c                        	cmp	r4, #3
 800260e: 09 f0 69 87                  	beq.w	#40658 <$t.42+0x32a>
 8002612: 9d f8 ae 02                  	ldrb.w	r0, [sp, #686]
 8002616: 0f f0 23 ff                  	bl	#65094
;                 ReturnParameters::LeReadWhiteListSize(to_status(&bytes[3..])?, bytes[4] as usize)
 800261a: c0 07                        	lsls	r0, r0, #31
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 800261c: a4 91                        	str	r1, [sp, #656]
;                 ReturnParameters::LeReadWhiteListSize(to_status(&bytes[3..])?, bytes[4] as usize)
 800261e: 41 f0 bf 83                  	bne.w	#6014 <$t.18+0xa88>
 8002622: 05 2c                        	cmp	r4, #5
 8002624: c9 f0 72 87                  	blo.w	#40676 <$t.42+0x352>
 8002628: 9d f8 af 02                  	ldrb.w	r0, [sp, #687]
 800262c: cd f8 e2 03                  	str.w	r0, [sp, #994]
 8002630: 15 20                        	movs	r0, #21
 8002632: 03 f0 6e b8                  	b.w	#12508 <$t.24+0x1590>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8002636: 03 3c                        	subs	r4, #3
;         if $left.len() != $right {
 8002638: 11 2c                        	cmp	r4, #17
 800263a: 41 f0 ad 83                  	bne.w	#5978 <$t.18+0xa80>
;     copy_nonoverlapping(src, dst, count)
 800263e: bd f8 bd 02                  	ldrh.w	r0, [sp, #701]
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 8002642: 92 90                        	str	r0, [sp, #584]
 8002644: 9d f8 ae 02                  	ldrb.w	r0, [sp, #686]
 8002648: 0f f0 0a ff                  	bl	#65044
;         status: to_status(&bytes)?,
 800264c: c0 07                        	lsls	r0, r0, #31
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 800264e: a4 91                        	str	r1, [sp, #656]
;         status: to_status(&bytes)?,
 8002650: 42 f0 fc 87                  	bne.w	#12280 <$t.24+0x14ca>
;     copy_nonoverlapping(src, dst, count)
 8002654: dd f8 b1 02                  	ldr.w	r0, [sp, #689]
;                 ReturnParameters::LeEncrypt(to_le_encrypted_data(&bytes[3..])?)
 8002658: cd f8 e2 03                  	str.w	r0, [sp, #994]
 800265c: 92 98                        	ldr	r0, [sp, #584]
;     copy_nonoverlapping(src, dst, count)
 800265e: dd f8 b5 12                  	ldr.w	r1, [sp, #693]
 8002662: dd f8 b9 22                  	ldr.w	r2, [sp, #697]
;                 ReturnParameters::LeEncrypt(to_le_encrypted_data(&bytes[3..])?)
 8002666: 00 0a                        	lsrs	r0, r0, #8
;     copy_nonoverlapping(src, dst, count)
 8002668: bd f8 af 32                  	ldrh.w	r3, [sp, #687]
 800266c: 12 90                        	str	r0, [sp, #72]
 800266e: 1b 20                        	movs	r0, #27
 8002670: 14 90                        	str	r0, [sp, #80]
 8002672: 00 20                        	movs	r0, #0
 8002674: a5 90                        	str	r0, [sp, #660]
;                 ReturnParameters::LeEncrypt(to_le_encrypted_data(&bytes[3..])?)
 8002676: cd f8 ea 23                  	str.w	r2, [sp, #1002]
 800267a: cd f8 e6 13                  	str.w	r1, [sp, #998]
 800267e: ad f8 e0 33                  	strh.w	r3, [sp, #992]
 8002682: 00 20                        	movs	r0, #0
 8002684: 1b 90                        	str	r0, [sp, #108]
 8002686: 03 f0 49 b8                  	b.w	#12434 <$t.24+0x159a>
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 800268a: 03 2c                        	cmp	r4, #3
 800268c: 09 f0 2a 87                  	beq.w	#40532 <$t.42+0x32a>
 8002690: 9d f8 ae 02                  	ldrb.w	r0, [sp, #686]
 8002694: 0f f0 e4 fe                  	bl	#64968
;                 ReturnParameters::LeSetRandomAddress(to_status(&bytes[3..])?)
 8002698: c0 07                        	lsls	r0, r0, #31
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 800269a: a4 91                        	str	r1, [sp, #656]
 800269c: 4f f0 00 00                  	mov.w	r0, #0
;                 ReturnParameters::LeSetRandomAddress(to_status(&bytes[3..])?)
 80026a0: a7 90                        	str	r0, [sp, #668]
 80026a2: 41 f0 7f 83                  	bne.w	#5886 <$t.18+0xa8c>
 80026a6: 0c 20                        	movs	r0, #12
 80026a8: 5a e1                        	b	#692 <$t.16+0x55a>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 80026aa: 03 3c                        	subs	r4, #3
;         if $left.len() != $right {
 80026ac: 09 2c                        	cmp	r4, #9
 80026ae: 41 f0 7c 83                  	bne.w	#5880 <$t.18+0xa92>
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 80026b2: 9d f8 ae 02                  	ldrb.w	r0, [sp, #686]
 80026b6: 0f f0 d3 fe                  	bl	#64934
;         status: to_status(bytes)?,
 80026ba: c0 07                        	lsls	r0, r0, #31
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 80026bc: a4 91                        	str	r1, [sp, #656]
 80026be: 4f f0 00 00                  	mov.w	r0, #0
;         status: to_status(bytes)?,
 80026c2: 0e 90                        	str	r0, [sp, #56]
 80026c4: 42 f0 c9 87                  	bne.w	#12178 <$t.24+0x14d8>
;     copy_nonoverlapping(src, dst, count)
 80026c8: d6 f8 01 00                  	ldr.w	r0, [r6, #1]
;                 ReturnParameters::LeReadLocalSupportedFeatures(to_le_local_supported_features(
 80026cc: 00 21                        	movs	r1, #0
 80026ce: cd f8 ea 13                  	str.w	r1, [sp, #1002]
;                     $BitFlags { bits: bits & $BitFlags::all().bits }
 80026d2: 00 f0 1f 00                  	and	r0, r0, #31
;                 ReturnParameters::LeReadLocalSupportedFeatures(to_le_local_supported_features(
 80026d6: cd f8 e6 03                  	str.w	r0, [sp, #998]
 80026da: 0b 20                        	movs	r0, #11
 80026dc: 14 90                        	str	r0, [sp, #80]
 80026de: 00 20                        	movs	r0, #0
 80026e0: a5 90                        	str	r0, [sp, #660]
 80026e2: 00 20                        	movs	r0, #0
 80026e4: 1b 90                        	str	r0, [sp, #108]
 80026e6: a4 98                        	ldr	r0, [sp, #656]
 80026e8: 92 90                        	str	r0, [sp, #584]
 80026ea: 03 f0 17 b8                  	b.w	#12334 <$t.24+0x159a>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 80026ee: 03 3c                        	subs	r4, #3
;         if $left.len() != $right {
 80026f0: 04 2c                        	cmp	r4, #4
 80026f2: 14 d1                        	bne	#40 <$t.16+0x318>
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 80026f4: 9d f8 ae 02                  	ldrb.w	r0, [sp, #686]
 80026f8: 0f f0 b2 fe                  	bl	#64868
;         status: to_status(bytes)?,
 80026fc: c0 07                        	lsls	r0, r0, #31
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 80026fe: a4 91                        	str	r1, [sp, #656]
;         status: to_status(bytes)?,
 8002700: 42 f0 b0 87                  	bne.w	#12128 <$t.24+0x14e2>
; }
 8002704: a4 9a                        	ldr	r2, [sp, #656]
 8002706: 9d f8 b1 02                  	ldrb.w	r0, [sp, #689]
;     copy_nonoverlapping(src, dst, count)
 800270a: bd f8 af 12                  	ldrh.w	r1, [sp, #687]
; }
 800270e: d2 b2                        	uxtb	r2, r2
;         self
 8002710: 41 ea 02 41                  	orr.w	r1, r1, r2, lsl #16
 8002714: 41 ea 00 60                  	orr.w	r0, r1, r0, lsl #24
;                 ReturnParameters::LeReadBufferSize(to_le_read_buffer_status(&bytes[3..])?)
 8002718: f8 90                        	str	r0, [sp, #992]
 800271a: 0a 20                        	movs	r0, #10
 800271c: 4a e1                        	b	#660 <$t.16+0x5ae>
 800271e: 00 20                        	movs	r0, #0
 8002720: 0e 90                        	str	r0, [sp, #56]
 8002722: 04 20                        	movs	r0, #4
 8002724: 01 f0 97 bb                  	b.w	#5934 <$t.18+0xb3e>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8002728: 03 3c                        	subs	r4, #3
;         if $left.len() != $right {
 800272a: 09 2c                        	cmp	r4, #9
 800272c: 41 f0 41 83                  	bne.w	#5762 <$t.18+0xa9a>
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 8002730: 9d f8 ae 02                  	ldrb.w	r0, [sp, #686]
 8002734: 0f f0 94 fe                  	bl	#64808
;         status: to_status(&bytes)?,
 8002738: c0 07                        	lsls	r0, r0, #31
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 800273a: 92 91                        	str	r1, [sp, #584]
;         status: to_status(&bytes)?,
 800273c: 42 f0 99 87                  	bne.w	#12082 <$t.24+0x14f0>
;     copy_nonoverlapping(src, dst, count)
 8002740: d6 f8 01 10                  	ldr.w	r1, [r6, #1]
 8002744: 00 20                        	movs	r0, #0
 8002746: d6 f8 05 40                  	ldr.w	r4, [r6, #5]
 800274a: cf f6 ff 60                  	movt	r0, #65279
; }
 800274e: 00 f1 80 70                  	add.w	r0, r0, #16777216
 8002752: 00 23                        	movs	r3, #0
;     Ok(LeRandom {
 8002754: 0a 0a                        	lsrs	r2, r1, #8
; }
 8002756: 08 40                        	ands	r0, r1
;     Ok(LeRandom {
 8002758: 42 ea 04 62                  	orr.w	r2, r2, r4, lsl #24
; }
 800275c: cd b2                        	uxtb	r5, r1
 800275e: 00 21                        	movs	r1, #0
 8002760: 02 f0 8c bf                  	b.w	#12056 <$t.24+0x14fa>
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 8002764: 03 2c                        	cmp	r4, #3
 8002766: 09 f0 bd 86                  	beq.w	#40314 <$t.42+0x32a>
 800276a: 9d f8 ae 02                  	ldrb.w	r0, [sp, #686]
 800276e: 0f f0 77 fe                  	bl	#64750
;                 ReturnParameters::LeSetScanResponseData(to_status(&bytes[3..])?)
 8002772: c0 07                        	lsls	r0, r0, #31
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 8002774: a4 91                        	str	r1, [sp, #656]
 8002776: 4f f0 00 00                  	mov.w	r0, #0
;                 ReturnParameters::LeSetScanResponseData(to_status(&bytes[3..])?)
 800277a: a7 90                        	str	r0, [sp, #668]
 800277c: 41 f0 12 83                  	bne.w	#5668 <$t.18+0xa8c>
 8002780: 10 20                        	movs	r0, #16
 8002782: ed e0                        	b	#474 <$t.16+0x55a>
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 8002784: 03 2c                        	cmp	r4, #3
 8002786: 09 f0 ad 86                  	beq.w	#40282 <$t.42+0x32a>
 800278a: 9d f8 ae 02                  	ldrb.w	r0, [sp, #686]
 800278e: 0f f0 67 fe                  	bl	#64718
;                 ReturnParameters::LeSetAdvertisingParameters(to_status(&bytes[3..])?)
 8002792: c0 07                        	lsls	r0, r0, #31
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 8002794: a4 91                        	str	r1, [sp, #656]
 8002796: 4f f0 00 00                  	mov.w	r0, #0
;                 ReturnParameters::LeSetAdvertisingParameters(to_status(&bytes[3..])?)
 800279a: a7 90                        	str	r0, [sp, #668]
 800279c: 41 f0 02 83                  	bne.w	#5636 <$t.18+0xa8c>
 80027a0: 0d 20                        	movs	r0, #13
 80027a2: dd e0                        	b	#442 <$t.16+0x55a>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 80027a4: 03 3c                        	subs	r4, #3
;         if $left.len() != $right {
 80027a6: 02 2c                        	cmp	r4, #2
 80027a8: 41 f0 0b 83                  	bne.w	#5654 <$t.18+0xaaa>
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 80027ac: 9d f8 ae 02                  	ldrb.w	r0, [sp, #686]
 80027b0: 0f f0 56 fe                  	bl	#64684
;         status: to_status(bytes)?,
 80027b4: c0 07                        	lsls	r0, r0, #31
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 80027b6: a4 91                        	str	r1, [sp, #656]
;         status: to_status(bytes)?,
 80027b8: 42 f0 6f 87                  	bne.w	#11998 <$t.24+0x1518>
;         power: unsafe { mem::transmute::<u8, i8>(bytes[1]) },
 80027bc: 9d f8 af 02                  	ldrb.w	r0, [sp, #687]
;                 ReturnParameters::LeReadAdvertisingChannelTxPower(
 80027c0: 8d f8 e0 03                  	strb.w	r0, [sp, #992]
 80027c4: 0e 20                        	movs	r0, #14
 80027c6: 02 f0 a4 bf                  	b.w	#12104 <$t.24+0x1590>
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 80027ca: 03 2c                        	cmp	r4, #3
 80027cc: 09 f0 8a 86                  	beq.w	#40212 <$t.42+0x32a>
 80027d0: 9d f8 ae 02                  	ldrb.w	r0, [sp, #686]
 80027d4: 0f f0 44 fe                  	bl	#64648
;                 ReturnParameters::LeClearWhiteList(to_status(&bytes[3..])?)
 80027d8: c0 07                        	lsls	r0, r0, #31
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 80027da: a4 91                        	str	r1, [sp, #656]
 80027dc: 4f f0 00 00                  	mov.w	r0, #0
;                 ReturnParameters::LeClearWhiteList(to_status(&bytes[3..])?)
 80027e0: a7 90                        	str	r0, [sp, #668]
 80027e2: 41 f0 df 82                  	bne.w	#5566 <$t.18+0xa8c>
 80027e6: 16 20                        	movs	r0, #22
 80027e8: ba e0                        	b	#372 <$t.16+0x55a>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 80027ea: 03 3c                        	subs	r4, #3
;         if $left.len() != $right {
 80027ec: 09 2c                        	cmp	r4, #9
 80027ee: 41 f0 ec 82                  	bne.w	#5592 <$t.18+0xab2>
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 80027f2: 9d f8 ae 02                  	ldrb.w	r0, [sp, #686]
;     copy_nonoverlapping(src, dst, count)
 80027f6: d6 f8 01 40                  	ldr.w	r4, [r6, #1]
 80027fa: d6 f8 05 60                  	ldr.w	r6, [r6, #5]
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 80027fe: 0f f0 2f fe                  	bl	#64606
;         status: to_status(bytes)?,
 8002802: c0 07                        	lsls	r0, r0, #31
 8002804: 4f f0 00 00                  	mov.w	r0, #0
 8002808: 0e 90                        	str	r0, [sp, #56]
 800280a: 42 f0 4d 87                  	bne.w	#11930 <$t.24+0x1526>
;         self
 800280e: 00 20                        	movs	r0, #0
 8002810: b0 eb 96 2f                  	cmp.w	r0, r6, lsr #10
 8002814: 20 46                        	mov	r0, r4
 8002816: 32 46                        	mov	r2, r6
 8002818: 18 bf                        	it	ne
 800281a: 0a 20                        	movne	r0, #10
 800281c: 86 46                        	mov	lr, r0
;             .ok_or_else(|| crate::event::Error::InvalidLeStates(bitfield))?,
 800281e: b6 f5 80 6f                  	cmp.w	r6, #1024
 8002822: c3 f0 f6 82                  	blo.w	#13804 <$t.24+0x1c90>
 8002826: 20 0c                        	lsrs	r0, r4, #16
 8002828: e5 b2                        	uxtb	r5, r4
 800282a: 40 ea 06 40                  	orr.w	r0, r0, r6, lsl #16
 800282e: 0e 90                        	str	r0, [sp, #56]
 8002830: 20 0a                        	lsrs	r0, r4, #8
 8002832: 40 ea 06 61                  	orr.w	r1, r0, r6, lsl #24
 8002836: 24 f0 ff 00                  	bic	r0, r4, #255
 800283a: 34 46                        	mov	r4, r6
 800283c: 00 22                        	movs	r2, #0
 800283e: 33 46                        	mov	r3, r6
 8002840: cd f8 50 e0                  	str.w	lr, [sp, #80]
 8002844: 02 f0 36 bf                  	b.w	#11884 <$t.24+0x1532>
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 8002848: 03 2c                        	cmp	r4, #3
 800284a: 09 f0 4b 86                  	beq.w	#40086 <$t.42+0x32a>
 800284e: 9d f8 ae 02                  	ldrb.w	r0, [sp, #686]
 8002852: 0f f0 05 fe                  	bl	#64522
;                 ReturnParameters::LeSetHostChannelClassification(to_status(&bytes[3..])?)
 8002856: c0 07                        	lsls	r0, r0, #31
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 8002858: a4 91                        	str	r1, [sp, #656]
 800285a: 4f f0 00 00                  	mov.w	r0, #0
;                 ReturnParameters::LeSetHostChannelClassification(to_status(&bytes[3..])?)
 800285e: 0e 90                        	str	r0, [sp, #56]
 8002860: 01 d1                        	bne	#2 <$t.16+0x460>
 8002862: 19 20                        	movs	r0, #25
 8002864: 7c e0                        	b	#248 <$t.16+0x55a>
 8002866: 02 20                        	movs	r0, #2
 8002868: 14 90                        	str	r0, [sp, #80]
 800286a: 00 20                        	movs	r0, #0
 800286c: a6 90                        	str	r0, [sp, #664]
 800286e: 01 f0 8d ba                  	b.w	#5402 <$t.18+0xa74>
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 8002872: 03 2c                        	cmp	r4, #3
 8002874: 09 f0 36 86                  	beq.w	#40044 <$t.42+0x32a>
 8002878: 9d f8 ae 02                  	ldrb.w	r0, [sp, #686]
 800287c: 0f f0 f0 fd                  	bl	#64480
;                 ReturnParameters::LeAddDeviceToWhiteList(to_status(&bytes[3..])?)
 8002880: c0 07                        	lsls	r0, r0, #31
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 8002882: a4 91                        	str	r1, [sp, #656]
 8002884: 4f f0 00 00                  	mov.w	r0, #0
;                 ReturnParameters::LeAddDeviceToWhiteList(to_status(&bytes[3..])?)
 8002888: a7 90                        	str	r0, [sp, #668]
 800288a: 41 f0 8b 82                  	bne.w	#5398 <$t.18+0xa8c>
 800288e: 17 20                        	movs	r0, #23
 8002890: 66 e0                        	b	#204 <$t.16+0x55a>
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 8002892: 03 2c                        	cmp	r4, #3
 8002894: 09 f0 26 86                  	beq.w	#40012 <$t.42+0x32a>
 8002898: 9d f8 ae 02                  	ldrb.w	r0, [sp, #686]
 800289c: 0f f0 e0 fd                  	bl	#64448
;                 ReturnParameters::LeCreateConnectionCancel(to_status(&bytes[3..])?)
 80028a0: c0 07                        	lsls	r0, r0, #31
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 80028a2: a4 91                        	str	r1, [sp, #656]
 80028a4: 4f f0 00 00                  	mov.w	r0, #0
;                 ReturnParameters::LeCreateConnectionCancel(to_status(&bytes[3..])?)
 80028a8: a7 90                        	str	r0, [sp, #668]
 80028aa: 41 f0 7b 82                  	bne.w	#5366 <$t.18+0xa8c>
 80028ae: 14 20                        	movs	r0, #20
 80028b0: 56 e0                        	b	#172 <$t.16+0x55a>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 80028b2: 03 3c                        	subs	r4, #3
;         if $left.len() != $right {
 80028b4: 08 2c                        	cmp	r4, #8
 80028b6: 41 f0 8f 82                  	bne.w	#5406 <$t.18+0xac0>
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 80028ba: 9d f8 ae 02                  	ldrb.w	r0, [sp, #686]
;     let channel_bits = channel_bits;
 80028be: bd f8 b2 12                  	ldrh.w	r1, [sp, #690]
 80028c2: 9d f8 b1 82                  	ldrb.w	r8, [sp, #689]
 80028c6: bd f8 b4 42                  	ldrh.w	r4, [sp, #692]
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 80028ca: 0e 91                        	str	r1, [sp, #56]
 80028cc: 0f f0 c8 fd                  	bl	#64400
;         status: to_status(&bytes[0..])?,
 80028d0: c0 07                        	lsls	r0, r0, #31
 80028d2: 4f f0 00 03                  	mov.w	r3, #0
 80028d6: 42 f0 f5 86                  	bne.w	#11754 <$t.24+0x1542>
;     copy_nonoverlapping(src, dst, count)
 80028da: bd f8 af 02                  	ldrh.w	r0, [sp, #687]
 80028de: 1f 22                        	movs	r2, #31
;                 $flags(bits)
 80028e0: 8d f8 1c 24                  	strb.w	r2, [sp, #1052]
 80028e4: 4f f0 ff 32                  	mov.w	r2, #4294967295
 80028e8: cd f8 18 24                  	str.w	r2, [sp, #1048]
;                     if (provided_bits & !allowed_bits) != 0 {
 80028ec: 03 bb                        	cbnz	r3, #64
;                     let allowed_bits = all_bits[i];
 80028ee: 9d f8 19 24                  	ldrb.w	r2, [sp, #1049]
;                     let provided_bits = bits[i];
 80028f2: 9d f8 b2 32                  	ldrb.w	r3, [sp, #690]
;                     if (provided_bits & !allowed_bits) != 0 {
 80028f6: 82 f0 ff 02                  	eor	r2, r2, #255
 80028fa: 13 42                        	tst	r3, r2
 80028fc: 18 d1                        	bne	#48 <$t.16+0x52a>
;                     let allowed_bits = all_bits[i];
 80028fe: 9d f8 1a 24                  	ldrb.w	r2, [sp, #1050]
;                     let provided_bits = bits[i];
 8002902: 9d f8 b3 32                  	ldrb.w	r3, [sp, #691]
;                     if (provided_bits & !allowed_bits) != 0 {
 8002906: 82 f0 ff 02                  	eor	r2, r2, #255
 800290a: 13 42                        	tst	r3, r2
 800290c: 10 d1                        	bne	#32 <$t.16+0x52a>
;                     let allowed_bits = all_bits[i];
 800290e: 9d f8 1b 24                  	ldrb.w	r2, [sp, #1051]
;                     let provided_bits = bits[i];
 8002912: 9d f8 b4 32                  	ldrb.w	r3, [sp, #692]
;                     if (provided_bits & !allowed_bits) != 0 {
 8002916: 82 f0 ff 02                  	eor	r2, r2, #255
 800291a: 13 42                        	tst	r3, r2
 800291c: 08 d1                        	bne	#16 <$t.16+0x52a>
;                     let allowed_bits = all_bits[i];
 800291e: 9d f8 1c 24                  	ldrb.w	r2, [sp, #1052]
;                     let provided_bits = bits[i];
 8002922: 9d f8 b5 32                  	ldrb.w	r3, [sp, #693]
;                     if (provided_bits & !allowed_bits) != 0 {
 8002926: 82 f0 ff 02                  	eor	r2, r2, #255
 800292a: 13 42                        	tst	r3, r2
 800292c: 09 f0 47 80                  	beq.w	#37006 <$t.28+0x5c4>
 8002930: 08 20                        	movs	r0, #8
 8002932: 00 23                        	movs	r3, #0
 8002934: a6 90                        	str	r0, [sp, #664]
 8002936: 09 20                        	movs	r0, #9
 8002938: 14 90                        	str	r0, [sp, #80]
 800293a: cd f8 90 82                  	str.w	r8, [sp, #656]
 800293e: 02 f0 40 bf                  	b.w	#11904 <$t.24+0x1640>
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 8002942: 03 2c                        	cmp	r4, #3
 8002944: 09 f0 ce 85                  	beq.w	#39836 <$t.42+0x32a>
 8002948: 9d f8 ae 02                  	ldrb.w	r0, [sp, #686]
 800294c: 0f f0 88 fd                  	bl	#64272
;                 ReturnParameters::LeRemoveDeviceFromWhiteList(to_status(&bytes[3..])?)
 8002950: c0 07                        	lsls	r0, r0, #31
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 8002952: a4 91                        	str	r1, [sp, #656]
 8002954: 4f f0 00 00                  	mov.w	r0, #0
;                 ReturnParameters::LeRemoveDeviceFromWhiteList(to_status(&bytes[3..])?)
 8002958: a7 90                        	str	r0, [sp, #668]
 800295a: 41 f0 23 82                  	bne.w	#5190 <$t.18+0xa8c>
 800295e: 18 20                        	movs	r0, #24
 8002960: 14 90                        	str	r0, [sp, #80]
 8002962: 00 20                        	movs	r0, #0
 8002964: a5 90                        	str	r0, [sp, #660]
 8002966: 02 f0 d7 be                  	b.w	#11694 <$t.24+0x1596>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 800296a: 03 3c                        	subs	r4, #3
;         if $left.len() != $right {
 800296c: 03 2c                        	cmp	r4, #3
 800296e: 28 d1                        	bne	#80 <$t.16+0x5bc>
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 8002970: 9d f8 ae 02                  	ldrb.w	r0, [sp, #686]
 8002974: 0f f0 74 fd                  	bl	#64232
;         status: to_status(&bytes)?,
 8002978: c0 07                        	lsls	r0, r0, #31
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 800297a: a4 91                        	str	r1, [sp, #656]
;         status: to_status(&bytes)?,
 800297c: 41 f0 2f 82                  	bne.w	#5214 <$t.18+0xac6>
;     copy_nonoverlapping(src, dst, count)
 8002980: bd f8 af 02                  	ldrh.w	r0, [sp, #687]
;                 ReturnParameters::LeLongTermKeyRequestReply(to_le_ltk_request_reply(&bytes[3..])?)
 8002984: a4 99                        	ldr	r1, [sp, #656]
 8002986: ad f8 e0 03                  	strh.w	r0, [sp, #992]
 800298a: 1d 20                        	movs	r0, #29
 800298c: 10 e0                        	b	#32 <$t.16+0x5aa>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 800298e: 03 3c                        	subs	r4, #3
;         if $left.len() != $right {
 8002990: 03 2c                        	cmp	r4, #3
 8002992: 16 d1                        	bne	#44 <$t.16+0x5bc>
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 8002994: 9d f8 ae 02                  	ldrb.w	r0, [sp, #686]
 8002998: 0f f0 62 fd                  	bl	#64196
;         status: to_status(&bytes)?,
 800299c: c0 07                        	lsls	r0, r0, #31
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 800299e: a4 91                        	str	r1, [sp, #656]
;         status: to_status(&bytes)?,
 80029a0: 41 f0 1d 82                  	bne.w	#5178 <$t.18+0xac6>
;     copy_nonoverlapping(src, dst, count)
 80029a4: bd f8 af 02                  	ldrh.w	r0, [sp, #687]
;                 ReturnParameters::LeLongTermKeyRequestNegativeReply(to_le_ltk_request_reply(
 80029a8: a4 99                        	ldr	r1, [sp, #656]
 80029aa: ad f8 e0 03                  	strh.w	r0, [sp, #992]
 80029ae: 1e 20                        	movs	r0, #30
 80029b0: 8d f8 e2 13                  	strb.w	r1, [sp, #994]
 80029b4: 14 90                        	str	r0, [sp, #80]
 80029b6: 00 20                        	movs	r0, #0
 80029b8: a5 90                        	str	r0, [sp, #660]
 80029ba: 00 20                        	movs	r0, #0
 80029bc: 1b 90                        	str	r0, [sp, #108]
 80029be: 02 f0 ad be                  	b.w	#11610 <$t.24+0x159a>
 80029c2: 03 20                        	movs	r0, #3
 80029c4: 00 23                        	movs	r3, #0
 80029c6: a6 90                        	str	r0, [sp, #664]
 80029c8: 01 20                        	movs	r0, #1
 80029ca: 14 90                        	str	r0, [sp, #80]
 80029cc: 01 f0 0d ba                  	b.w	#5146 <$t.18+0xad2>
;         0x03 => Ok(Event::LeConnectionUpdateComplete(
 80029d0: f8 98                        	ldr	r0, [sp, #992]
 80029d2: b4 46                        	mov	r12, r6
 80029d4: 47 f8 47 0c                  	str	r0, [r7, #-71]
 80029d8: 00 20                        	movs	r0, #0
 80029da: 96 90                        	str	r0, [sp, #600]
;             Ok(t) => Ok(t),
 80029dc: 4f ea 18 20                  	lsr.w	r0, r8, #8
;         0x03 => Ok(Event::LeConnectionUpdateComplete(
 80029e0: dd f8 e3 13                  	ldr.w	r1, [sp, #995]
;             Ok(t) => Ok(t),
 80029e4: 40 ea 04 60                  	orr.w	r0, r0, r4, lsl #24
;         0x03 => Ok(Event::LeConnectionUpdateComplete(
 80029e8: 47 f8 44 1c                  	str	r1, [r7, #-68]
 80029ec: 00 26                        	movs	r6, #0
 80029ee: 9c 90                        	str	r0, [sp, #624]
;             Ok(t) => Ok(t),
 80029f0: 20 f0 7f 40                  	bic	r0, r0, #4278190080
;         0x03 => Ok(Event::LeConnectionUpdateComplete(
 80029f4: dd f8 03 14                  	ldr.w	r1, [sp, #1027]
 80029f8: 0c 23                        	movs	r3, #12
;         self
 80029fa: fc 90                        	str	r0, [sp, #1008]
;         0x03 => Ok(Event::LeConnectionUpdateComplete(
 80029fc: a7 98                        	ldr	r0, [sp, #668]
 80029fe: cd f8 0f 14                  	str.w	r1, [sp, #1039]
;         self
 8002a02: a6 99                        	ldr	r1, [sp, #664]
;         0x03 => Ok(Event::LeConnectionUpdateComplete(
 8002a04: 8d f8 ac 03                  	strb.w	r0, [sp, #940]
 8002a08: dd f8 00 04                  	ldr.w	r0, [sp, #1024]
 8002a0c: cd f8 0c 04                  	str.w	r0, [sp, #1036]
;         self
 8002a10: 4f ea 1c 20                  	lsr.w	r0, r12, #8
 8002a14: 40 ea 01 60                  	orr.w	r0, r0, r1, lsl #24
;         0x03 => Ok(Event::LeConnectionUpdateComplete(
 8002a18: a7 90                        	str	r0, [sp, #668]
 8002a1a: 25 f0 0f 00                  	bic	r0, r5, #15
 8002a1e: a6 90                        	str	r0, [sp, #664]
 8002a20: 9b 98                        	ldr	r0, [sp, #620]
 8002a22: 51 46                        	mov	r1, r10
;             Ok(t) => Ok(t),
 8002a24: bd f8 d0 23                  	ldrh.w	r2, [sp, #976]
;         self
 8002a28: ad f8 f4 63                  	strh.w	r6, [sp, #1012]
 8002a2c: 8d f8 f6 63                  	strb.w	r6, [sp, #1014]
;         0x03 => Ok(Event::LeConnectionUpdateComplete(
 8002a30: 00 0a                        	lsrs	r0, r0, #8
 8002a32: ad f8 b8 23                  	strh.w	r2, [sp, #952]
 8002a36: dd f8 f1 23                  	ldr.w	r2, [sp, #1009]
 8002a3a: a1 90                        	str	r0, [sp, #644]
 8002a3c: 4f ea 1a 20                  	lsr.w	r0, r10, #8
 8002a40: 95 90                        	str	r0, [sp, #596]
 8002a42: 4f f0 00 0a                  	mov.w	r10, #0
 8002a46: 10 0e                        	lsrs	r0, r2, #24
 8002a48: 07 f8 40 bc                  	strb	r11, [r7, #-64]
 8002a4c: a0 90                        	str	r0, [sp, #640]
 8002a4e: 10 0c                        	lsrs	r0, r2, #16
 8002a50: a3 90                        	str	r0, [sp, #652]
 8002a52: 10 0a                        	lsrs	r0, r2, #8
 8002a54: a2 90                        	str	r0, [sp, #648]
 8002a56: cd f8 48 c2                  	str.w	r12, [sp, #584]
 8002a5a: 4f f0 00 0c                  	mov.w	r12, #0
 8002a5e: 9d 92                        	str	r2, [sp, #628]
 8002a60: 00 22                        	movs	r2, #0
 8002a62: 07 f8 48 3c                  	strb	r3, [r7, #-72]
 8002a66: 47 f8 3c 6c                  	str	r6, [r7, #-60]
 8002a6a: 27 f8 3e 6c                  	strh	r6, [r7, #-62]
 8002a6e: 07 f8 3f 6c                  	strb	r6, [r7, #-63]
 8002a72: 00 20                        	movs	r0, #0
 8002a74: a4 90                        	str	r0, [sp, #656]
 8002a76: 00 20                        	movs	r0, #0
 8002a78: 99 90                        	str	r0, [sp, #612]
 8002a7a: 00 20                        	movs	r0, #0
 8002a7c: a9 90                        	str	r0, [sp, #676]
 8002a7e: 00 20                        	movs	r0, #0
 8002a80: a5 90                        	str	r0, [sp, #660]
 8002a82: 00 20                        	movs	r0, #0
 8002a84: 8f 90                        	str	r0, [sp, #572]
 8002a86: 00 20                        	movs	r0, #0
 8002a88: 94 90                        	str	r0, [sp, #592]
 8002a8a: 00 20                        	movs	r0, #0
 8002a8c: 93 90                        	str	r0, [sp, #588]
 8002a8e: 00 20                        	movs	r0, #0
 8002a90: 98 90                        	str	r0, [sp, #608]
 8002a92: 00 20                        	movs	r0, #0
 8002a94: 9f 90                        	str	r0, [sp, #636]
 8002a96: 00 20                        	movs	r0, #0
 8002a98: 9e 90                        	str	r0, [sp, #632]
 8002a9a: 02 f0 5b bf                  	b.w	#11958 <$t.24+0x17d2>
 8002a9e: 00 20                        	movs	r0, #0
 8002aa0: bd f8 ad 42                  	ldrh.w	r4, [sp, #685]
 8002aa4: 96 90                        	str	r0, [sp, #600]
 8002aa6: 00 23                        	movs	r3, #0
 8002aa8: 08 46                        	mov	r0, r1
 8002aaa: 00 26                        	movs	r6, #0
 8002aac: 71 46                        	mov	r1, lr
 8002aae: 0d f5 83 6e                  	add.w	lr, sp, #1048
;         self
 8002ab2: a4 b2                        	uxth	r4, r4
 8002ab4: c5 b2                        	uxtb	r5, r0
 8002ab6: 26 43                        	orrs	r6, r4
 8002ab8: c8 b2                        	uxtb	r0, r1
 8002aba: 46 ea 05 46                  	orr.w	r6, r6, r5, lsl #16
 8002abe: d1 b2                        	uxtb	r1, r2
 8002ac0: 41 ea 00 20                  	orr.w	r0, r1, r0, lsl #8
 8002ac4: 48 ea 06 04                  	orr.w	r4, r8, r6
 8002ac8: 40 ea 0c 40                  	orr.w	r0, r0, r12, lsl #16
;             to_le_read_remote_used_features_complete(payload)?,
 8002acc: bb b1                        	cbz	r3, #46
;         Err(v)
 8002ace: 47 f8 48 0c                  	str	r0, [r7, #-72]
 8002ad2: 96 98                        	ldr	r0, [sp, #600]
 8002ad4: 47 f8 3c 0c                  	str	r0, [r7, #-60]
 8002ad8: a9 98                        	ldr	r0, [sp, #676]
 8002ada: 47 f8 44 0c                  	str	r0, [r7, #-68]
 8002ade: 00 20                        	movs	r0, #0
 8002ae0: a3 90                        	str	r0, [sp, #652]
 8002ae2: 47 f8 40 4c                  	str	r4, [r7, #-64]
 8002ae6: 00 20                        	movs	r0, #0
 8002ae8: a2 90                        	str	r0, [sp, #648]
 8002aea: 00 20                        	movs	r0, #0
 8002aec: 9d 90                        	str	r0, [sp, #628]
 8002aee: 00 20                        	movs	r0, #0
 8002af0: 9f 90                        	str	r0, [sp, #636]
 8002af2: 00 20                        	movs	r0, #0
 8002af4: 9e 90                        	str	r0, [sp, #632]
 8002af6: 00 20                        	movs	r0, #0
 8002af8: a9 90                        	str	r0, [sp, #676]
 8002afa: fd f7 c9 bc                  	b.w	#-9838 <$t.2+0xd2>
;         0x04 => Ok(Event::LeReadRemoteUsedFeaturesComplete(
 8002afe: 47 f8 40 0c                  	str	r0, [r7, #-64]
 8002b02: 0d 20                        	movs	r0, #13
 8002b04: 07 f8 48 0c                  	strb	r0, [r7, #-72]
 8002b08: dd f8 20 05                  	ldr.w	r0, [sp, #1312]
 8002b0c: cd f8 0c 04                  	str.w	r0, [sp, #1036]
 8002b10: a9 98                        	ldr	r0, [sp, #676]
 8002b12: dd f8 18 14                  	ldr.w	r1, [sp, #1048]
 8002b16: bd f8 f4 c3                  	ldrh.w	r12, [sp, #1012]
 8002b1a: f8 9e                        	ldr	r6, [sp, #992]
 8002b1c: a6 94                        	str	r4, [sp, #664]
 8002b1e: bd f8 e4 53                  	ldrh.w	r5, [sp, #996]
 8002b22: fc 9c                        	ldr	r4, [sp, #1008]
 8002b24: dd f8 23 35                  	ldr.w	r3, [sp, #1315]
 8002b28: 47 f8 3c 0c                  	str	r0, [r7, #-60]
 8002b2c: 00 20                        	movs	r0, #0
 8002b2e: dd f8 1b 24                  	ldr.w	r2, [sp, #1051]
 8002b32: 47 f8 47 1c                  	str	r1, [r7, #-71]
 8002b36: 47 f8 44 2c                  	str	r2, [r7, #-68]
 8002b3a: ed 94                        	str	r4, [sp, #948]
 8002b3c: ad f8 b8 c3                  	strh.w	r12, [sp, #952]
 8002b40: eb 96                        	str	r6, [sp, #940]
 8002b42: ad f8 b0 53                  	strh.w	r5, [sp, #944]
 8002b46: cd f8 0f 34                  	str.w	r3, [sp, #1039]
 8002b4a: a4 90                        	str	r0, [sp, #656]
 8002b4c: fe f7 e0 b8                  	b.w	#-7744 <$t.4+0x192>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8002b50: 03 3c                        	subs	r4, #3
;         if $left.len() != $right {
 8002b52: 09 2c                        	cmp	r4, #9
 8002b54: 41 f0 60 81                  	bne.w	#4800 <$t.18+0xb00>
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 8002b58: 9d f8 ae 02                  	ldrb.w	r0, [sp, #686]
 8002b5c: 0f f0 80 fc                  	bl	#63744
;         status: to_status(bytes)?,
 8002b60: c0 07                        	lsls	r0, r0, #31
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 8002b62: 92 91                        	str	r1, [sp, #584]
;         status: to_status(bytes)?,
 8002b64: 42 f0 b6 85                  	bne.w	#11116 <$t.24+0x1552>
;     copy_nonoverlapping(src, dst, count)
 8002b68: d6 f8 05 00                  	ldr.w	r0, [r6, #5]
 8002b6c: 4f f6 fb 72                  	movw	r2, #65531
 8002b70: d6 f8 01 10                  	ldr.w	r1, [r6, #1]
 8002b74: c8 f2 7b 72                  	movt	r2, #34683
;                     $BitFlags { bits: bits & $BitFlags::all().bits }
 8002b78: 00 ea 02 04                  	and.w	r4, r0, r2
 8002b7c: 4f f6 00 60                  	movw	r0, #65024
 8002b80: cf f6 ff 60                  	movt	r0, #65279
 8002b84: 00 23                        	movs	r3, #0
 8002b86: 08 40                        	ands	r0, r1
; }
 8002b88: cd b2                        	uxtb	r5, r1
;     Ok(LocalSupportedFeatures {
 8002b8a: 00 0a                        	lsrs	r0, r0, #8
 8002b8c: 40 ea 04 62                  	orr.w	r2, r0, r4, lsl #24
 8002b90: 00 20                        	movs	r0, #0
 8002b92: cf f6 ff 60                  	movt	r0, #65279
; }
 8002b96: 08 40                        	ands	r0, r1
 8002b98: 00 21                        	movs	r1, #0
 8002b9a: 02 f0 a0 bd                  	b.w	#11072 <$t.24+0x155c>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8002b9e: 03 3c                        	subs	r4, #3
;         if $left.len() != $right {
 8002ba0: 41 2c                        	cmp	r4, #65
 8002ba2: 41 f0 41 81                  	bne.w	#4738 <$t.18+0xb10>
;         status: bytes[0].try_into().map_err(super::rewrap_bad_status)?,
 8002ba6: 9d f8 ae 02                  	ldrb.w	r0, [sp, #686]
 8002baa: 0f f0 59 fc                  	bl	#63666
 8002bae: c0 07                        	lsls	r0, r0, #31
 8002bb0: 4f f0 00 02                  	mov.w	r2, #0
 8002bb4: a4 91                        	str	r1, [sp, #656]
 8002bb6: 42 f0 d6 85                  	bne.w	#11180 <$t.24+0x15e4>
 8002bba: 4f f0 ff 30                  	mov.w	r0, #4294967295
 8002bbe: fe 21                        	movs	r1, #254
;                 $flags(bits)
 8002bc0: cd f8 1d 04                  	str.w	r0, [sp, #1053]
 8002bc4: 0d f5 83 65                  	add.w	r5, sp, #1048
 8002bc8: cd f8 20 04                  	str.w	r0, [sp, #1056]
 8002bcc: 43 f6 ff 70                  	movw	r0, #16383
 8002bd0: ad f8 38 04                  	strh.w	r0, [sp, #1080]
 8002bd4: 4f f6 7f 00                  	movw	r0, #63615
 8002bd8: cc f6 ff 70                  	movt	r0, #53247
 8002bdc: 8d f8 1c 14                  	strb.w	r1, [sp, #1052]
 8002be0: cd f8 34 04                  	str.w	r0, [sp, #1076]
 8002be4: 4f f2 7d 70                  	movw	r0, #63357
 8002be8: cf f6 ff 70                  	movt	r0, #65535
 8002bec: 6f f0 7c 41                  	mvn	r1, #4227858432
 8002bf0: cd f8 30 04                  	str.w	r0, [sp, #1072]
 8002bf4: 4f f6 1c 70                  	movw	r0, #65308
 8002bf8: ce f2 ff 70                  	movt	r0, #59391
 8002bfc: cd f8 18 14                  	str.w	r1, [sp, #1048]
 8002c00: cd f8 2c 04                  	str.w	r0, [sp, #1068]
 8002c04: 4f f2 3f 70                  	movw	r0, #63295
 8002c08: cf f6 8f 70                  	movt	r0, #65423
 8002c0c: ad f8 56 24                  	strh.w	r2, [sp, #1110]
 8002c10: cd f8 28 04                  	str.w	r0, [sp, #1064]
 8002c14: 40 f6 f3 70                  	movw	r0, #4083
 8002c18: cf f6 e8 70                  	movt	r0, #65512
 8002c1c: cd f8 52 24                  	str.w	r2, [sp, #1106]
 8002c20: cd f8 24 04                  	str.w	r0, [sp, #1060]
 8002c24: cd f8 4e 24                  	str.w	r2, [sp, #1102]
 8002c28: cd f8 4a 24                  	str.w	r2, [sp, #1098]
 8002c2c: cd f8 46 24                  	str.w	r2, [sp, #1094]
 8002c30: cd f8 42 24                  	str.w	r2, [sp, #1090]
 8002c34: cd f8 3e 24                  	str.w	r2, [sp, #1086]
 8002c38: cd f8 3a 24                  	str.w	r2, [sp, #1082]
;         if self.start < self.end {
 8002c3c: 40 2a                        	cmp	r2, #64
 8002c3e: 03 f0 24 87                  	beq.w	#15944 <$t.24+0x2908>
;                     let allowed_bits = all_bits[i];
 8002c42: a9 5c                        	ldrb	r1, [r5, r2]
;                     let provided_bits = bits[i];
 8002c44: 08 eb 02 00                  	add.w	r0, r8, r2
 8002c48: c3 79                        	ldrb	r3, [r0, #7]
;                     if (provided_bits & !allowed_bits) != 0 {
 8002c4a: 81 f0 ff 01                  	eor	r1, r1, #255
 8002c4e: 0b 42                        	tst	r3, r1
;                     let allowed_bits = all_bits[i];
 8002c50: 01 bf                        	itttt	eq
 8002c52: a9 18                        	addeq	r1, r5, r2
 8002c54: 4b 78                        	ldrbeq	r3, [r1, #1]
;                     let provided_bits = bits[i];
 8002c56: 06 7a                        	ldrbeq	r6, [r0, #8]
;                     if (provided_bits & !allowed_bits) != 0 {
 8002c58: 83 f0 ff 03                  	eoreq	r3, r3, #255
 8002c5c: 08 bf                        	it	eq
 8002c5e: 1e 42                        	tsteq	r6, r3
 8002c60: 0c d1                        	bne	#24 <$t.16+0x876>
;                     let allowed_bits = all_bits[i];
 8002c62: 8b 78                        	ldrb	r3, [r1, #2]
;                     let provided_bits = bits[i];
 8002c64: 46 7a                        	ldrb	r6, [r0, #9]
;                     if (provided_bits & !allowed_bits) != 0 {
 8002c66: 83 f0 ff 03                  	eor	r3, r3, #255
 8002c6a: 1e 42                        	tst	r6, r3
 8002c6c: 06 d1                        	bne	#12 <$t.16+0x876>
;                     let allowed_bits = all_bits[i];
 8002c6e: c9 78                        	ldrb	r1, [r1, #3]
;                 intrinsics::unchecked_add(self, rhs)
 8002c70: 04 32                        	adds	r2, #4
;                     let provided_bits = bits[i];
 8002c72: 80 7a                        	ldrb	r0, [r0, #10]
;                     if (provided_bits & !allowed_bits) != 0 {
 8002c74: 81 f0 ff 01                  	eor	r1, r1, #255
 8002c78: 08 42                        	tst	r0, r1
 8002c7a: df d0                        	beq	#-66 <$t.16+0x836>
;             None => Err(err),
 8002c7c: dd f8 1b 04                  	ldr.w	r0, [sp, #1051]
 8002c80: 4f f0 08 09                  	mov.w	r9, #8
 8002c84: a9 90                        	str	r0, [sp, #676]
 8002c86: 01 26                        	movs	r6, #1
 8002c88: dd f8 23 04                  	ldr.w	r0, [sp, #1059]
 8002c8c: 8f 90                        	str	r0, [sp, #572]
 8002c8e: 9d f8 36 04                  	ldrb.w	r0, [sp, #1078]
 8002c92: 9b 90                        	str	r0, [sp, #620]
 8002c94: 9d f8 35 04                  	ldrb.w	r0, [sp, #1077]
 8002c98: 98 90                        	str	r0, [sp, #608]
 8002c9a: 9d f8 34 04                  	ldrb.w	r0, [sp, #1076]
 8002c9e: 99 90                        	str	r0, [sp, #612]
 8002ca0: 9d f8 33 04                  	ldrb.w	r0, [sp, #1075]
 8002ca4: 1a 90                        	str	r0, [sp, #104]
 8002ca6: 9d f8 32 04                  	ldrb.w	r0, [sp, #1074]
 8002caa: 13 90                        	str	r0, [sp, #76]
 8002cac: 9d f8 31 04                  	ldrb.w	r0, [sp, #1073]
 8002cb0: 19 90                        	str	r0, [sp, #100]
 8002cb2: 9d f8 30 04                  	ldrb.w	r0, [sp, #1072]
 8002cb6: a1 90                        	str	r0, [sp, #644]
 8002cb8: 9d f8 2f 04                  	ldrb.w	r0, [sp, #1071]
 8002cbc: 91 90                        	str	r0, [sp, #580]
 8002cbe: 9d f8 2e 04                  	ldrb.w	r0, [sp, #1070]
 8002cc2: 23 90                        	str	r0, [sp, #140]
 8002cc4: 9d f8 2d 04                  	ldrb.w	r0, [sp, #1069]
 8002cc8: 9f 90                        	str	r0, [sp, #636]
 8002cca: 9d f8 2c 04                  	ldrb.w	r0, [sp, #1068]
 8002cce: 9d f8 44 14                  	ldrb.w	r1, [sp, #1092]
 8002cd2: 9e 90                        	str	r0, [sp, #632]
 8002cd4: 9d f8 2b 04                  	ldrb.w	r0, [sp, #1067]
 8002cd8: 10 91                        	str	r1, [sp, #64]
 8002cda: 9d f8 46 14                  	ldrb.w	r1, [sp, #1094]
 8002cde: a7 90                        	str	r0, [sp, #668]
 8002ce0: 9d f8 2a 04                  	ldrb.w	r0, [sp, #1066]
;             Err(e) => Err(op(e)),
 8002ce4: 1e 91                        	str	r1, [sp, #120]
;             None => Err(err),
 8002ce6: 1d 90                        	str	r0, [sp, #116]
 8002ce8: 9d f8 29 04                  	ldrb.w	r0, [sp, #1065]
 8002cec: 1c 90                        	str	r0, [sp, #112]
 8002cee: 9d f8 28 04                  	ldrb.w	r0, [sp, #1064]
 8002cf2: 12 90                        	str	r0, [sp, #72]
 8002cf4: 9d f8 27 04                  	ldrb.w	r0, [sp, #1063]
 8002cf8: 92 90                        	str	r0, [sp, #584]
 8002cfa: 9d f8 3c 04                  	ldrb.w	r0, [sp, #1084]
 8002cfe: 07 f8 44 0c                  	strb	r0, [r7, #-68]
 8002d02: dd f8 38 04                  	ldr.w	r0, [sp, #1080]
 8002d06: 47 f8 48 0c                  	str	r0, [r7, #-72]
 8002d0a: 9d f8 3d 04                  	ldrb.w	r0, [sp, #1085]
 8002d0e: a6 90                        	str	r0, [sp, #664]
 8002d10: 9d f8 3e 04                  	ldrb.w	r0, [sp, #1086]
 8002d14: 96 90                        	str	r0, [sp, #600]
 8002d16: 9d f8 3f 04                  	ldrb.w	r0, [sp, #1087]
;             Err(e) => Err(op(e)),
 8002d1a: bd f8 d5 53                  	ldrh.w	r5, [sp, #981]
;             None => Err(err),
 8002d1e: 28 90                        	str	r0, [sp, #160]
 8002d20: 9d f8 40 04                  	ldrb.w	r0, [sp, #1088]
;             Err(e) => Err(op(e)),
 8002d24: ad f8 bc 53                  	strh.w	r5, [sp, #956]
 8002d28: 9d f8 d7 53                  	ldrb.w	r5, [sp, #983]
;             None => Err(err),
 8002d2c: 18 90                        	str	r0, [sp, #96]
 8002d2e: 9d f8 41 04                  	ldrb.w	r0, [sp, #1089]
;             Err(e) => Err(op(e)),
 8002d32: 8d f8 be 53                  	strb.w	r5, [sp, #958]
 8002d36: 9d f8 1c 54                  	ldrb.w	r5, [sp, #1052]
;             None => Err(err),
 8002d3a: 0d 90                        	str	r0, [sp, #52]
 8002d3c: 9d f8 42 04                  	ldrb.w	r0, [sp, #1090]
;             Err(e) => Err(op(e)),
 8002d40: 8d f8 f4 53                  	strb.w	r5, [sp, #1012]
 8002d44: dd f8 18 54                  	ldr.w	r5, [sp, #1048]
;             None => Err(err),
 8002d48: 0f 90                        	str	r0, [sp, #60]
 8002d4a: dd f8 1f 24                  	ldr.w	r2, [sp, #1055]
 8002d4e: 9d f8 37 a4                  	ldrb.w	r10, [sp, #1079]
 8002d52: 9d f8 43 04                  	ldrb.w	r0, [sp, #1091]
 8002d56: 9d f8 45 c4                  	ldrb.w	r12, [sp, #1093]
;             Err(e) => Err(op(e)),
 8002d5a: fc 95                        	str	r5, [sp, #1008]
 8002d5c: 03 f0 38 bf                  	b.w	#15984 <$t.24+0x2a4e>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8002d60: 03 3c                        	subs	r4, #3
;         if $left.len() != $right {
 8002d62: 07 2c                        	cmp	r4, #7
 8002d64: 41 f0 74 80                  	bne.w	#4328 <$t.18+0xb38>
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 8002d68: 9d f8 ae 02                  	ldrb.w	r0, [sp, #686]
 8002d6c: 0f f0 78 fb                  	bl	#63216
;         status: to_status(bytes)?,
 8002d70: c0 07                        	lsls	r0, r0, #31
;     bytes[0].try_into().map_err(super::rewrap_bad_status)
 8002d72: a4 91                        	str	r1, [sp, #656]
;         status: to_status(bytes)?,
 8002d74: 42 f0 1d 85                  	bne.w	#10810 <$t.24+0x1630>
;     copy_nonoverlapping(src, dst, count)
 8002d78: dd f8 b1 02                  	ldr.w	r0, [sp, #689]
 8002d7c: bd f8 af 12                  	ldrh.w	r1, [sp, #687]
;             crate::opcode::READ_BD_ADDR => ReturnParameters::ReadBdAddr(to_bd_addr(&bytes[3..])?),
 8002d80: cd f8 e2 03                  	str.w	r0, [sp, #994]
 8002d84: 07 20                        	movs	r0, #7
 8002d86: ad f8 e0 13                  	strh.w	r1, [sp, #992]
 8002d8a: 02 f0 c2 bc                  	b.w	#10628 <$t.24+0x1590>
 8002d8e: 05 20                        	movs	r0, #5
 8002d90: 67 e0                        	b	#206 <$t.16+0xa5c>
 8002d92: a9 9a                        	ldr	r2, [sp, #676]
;     require_len_at_least!(buffer, 4);
 8002d94: 04 2a                        	cmp	r2, #4
 8002d96: c0 f0 5c 85                  	blo.w	#2744 <$t.18+0x53a>
;         assert!($size <= $src.len());
 8002d9a: 02 f0 fe 00                  	and	r0, r2, #254
 8002d9e: 02 28                        	cmp	r0, #2
 8002da0: 01 f0 90 85                  	beq.w	#6944 <$t.24+0x742>
;             0x0402 => Ok(Stm32Wb5xEvent::GapPassKeyRequest(to_conn_handle(buffer)?)),
 8002da4: 0d f5 83 62                  	add.w	r2, sp, #1048
;     copy_nonoverlapping(src, dst, count)
 8002da8: bd f8 ad 32                  	ldrh.w	r3, [sp, #685]
;             0x0402 => Ok(Stm32Wb5xEvent::GapPassKeyRequest(to_conn_handle(buffer)?)),
 8002dac: ad f8 f2 33                  	strh.w	r3, [sp, #1010]
 8002db0: 03 23                        	movs	r3, #3
 8002db2: 03 f0 0b b8                  	b.w	#12310 <$t.24+0x1c4a>
 8002db6: a9 9a                        	ldr	r2, [sp, #676]
;     require_len_at_least!(buffer, 4);
 8002db8: 04 2a                        	cmp	r2, #4
 8002dba: c0 f0 4a 85                  	blo.w	#2708 <$t.18+0x53a>
;         assert!($size <= $src.len());
 8002dbe: 02 f0 fe 00                  	and	r0, r2, #254
 8002dc2: 02 28                        	cmp	r0, #2
 8002dc4: 01 f0 7e 85                  	beq.w	#6908 <$t.24+0x742>
;             0x0403 => Ok(Stm32Wb5xEvent::GapAuthorizationRequest(to_conn_handle(
 8002dc8: 0d f5 83 62                  	add.w	r2, sp, #1048
;     copy_nonoverlapping(src, dst, count)
 8002dcc: bd f8 ad 32                  	ldrh.w	r3, [sp, #685]
;             0x0403 => Ok(Stm32Wb5xEvent::GapAuthorizationRequest(to_conn_handle(
 8002dd0: ad f8 f2 33                  	strh.w	r3, [sp, #1010]
 8002dd4: 04 23                        	movs	r3, #4
 8002dd6: 02 f0 f9 bf                  	b.w	#12274 <$t.24+0x1c4a>
;     require_len_at_least!(buffer, 4);
 8002dda: a9 98                        	ldr	r0, [sp, #676]
 8002ddc: 04 28                        	cmp	r0, #4
 8002dde: 81 f0 49 81                  	bhs.w	#4754 <$t.20+0x6a>
 8002de2: 01 21                        	movs	r1, #1
 8002de4: 04 22                        	movs	r2, #4
 8002de6: 00 20                        	movs	r0, #0
 8002de8: 01 f0 90 b9                  	b.w	#4896 <$t.22+0x4>
;     require_len!(buffer, 5);
 8002dec: a9 98                        	ldr	r0, [sp, #676]
 8002dee: 05 28                        	cmp	r0, #5
 8002df0: 41 f0 96 81                  	bne.w	#4908 <$t.22+0x18>
;         status: buffer[4].try_into().map_err(hci::event::Error::Vendor)?,
 8002df4: 9d f8 af 12                  	ldrb.w	r1, [sp, #687]
;     copy_nonoverlapping(src, dst, count)
 8002df8: bd f8 ad 02                  	ldrh.w	r0, [sp, #685]
;             0 => Ok(GapPairingStatus::Success),
 8002dfc: 00 29                        	cmp	r1, #0
 8002dfe: 03 f0 74 80                  	beq.w	#12520 <$t.24+0x1d68>
 8002e02: 02 29                        	cmp	r1, #2
 8002e04: 03 f0 6f 80                  	beq.w	#12510 <$t.24+0x1d64>
 8002e08: 01 29                        	cmp	r1, #1
 8002e0a: 43 f0 82 80                  	bne.w	#12548 <$t.24+0x1d90>
 8002e0e: 01 21                        	movs	r1, #1
 8002e10: 03 f0 6c b8                  	b.w	#12504 <$t.24+0x1d6a>
;     require_len!(buffer, 11);
 8002e14: a9 98                        	ldr	r0, [sp, #676]
 8002e16: 0b 28                        	cmp	r0, #11
 8002e18: 41 f0 8d 81                  	bne.w	#4890 <$t.22+0x2e>
;     require_l2cap_event_data_len!(buffer, 6);
 8002e1c: 9d f8 af 22                  	ldrb.w	r2, [sp, #687]
 8002e20: 06 2a                        	cmp	r2, #6
 8002e22: 42 f0 5b 87                  	bne.w	#11958 <$t.24+0x1b5a>
;     copy_nonoverlapping(src, dst, count)
 8002e26: bd f8 b2 62                  	ldrh.w	r6, [sp, #690]
;     require_l2cap_len!(LittleEndian::read_u16(&buffer[7..]), 2);
 8002e2a: 02 2e                        	cmp	r6, #2
 8002e2c: 43 f0 76 80                  	bne.w	#12524 <$t.24+0x1d9a>
;         0x01 => Ok(L2CapConnectionUpdateResult::CommandRejected(
 8002e30: 9d f8 b0 22                  	ldrb.w	r2, [sp, #688]
;     copy_nonoverlapping(src, dst, count)
 8002e34: bd f8 ad 02                  	ldrh.w	r0, [sp, #685]
;         0x01 => Ok(L2CapConnectionUpdateResult::CommandRejected(
 8002e38: 13 2a                        	cmp	r2, #19
 8002e3a: 04 f0 e9 83                  	beq.w	#18386 <$t.24+0x348e>
 8002e3e: 01 2a                        	cmp	r2, #1
 8002e40: 44 f0 7d 84                  	bne.w	#18682 <$t.24+0x35bc>
;     copy_nonoverlapping(src, dst, count)
 8002e44: bd f8 b4 62                  	ldrh.w	r6, [sp, #692]
;             0 => Ok(L2CapRejectionReason::CommandNotUnderstood),
 8002e48: 00 2e                        	cmp	r6, #0
 8002e4a: 07 f0 cd 82                  	beq.w	#30106 <$t.24+0x6266>
 8002e4e: 02 2e                        	cmp	r6, #2
 8002e50: 07 f0 c8 82                  	beq.w	#30096 <$t.24+0x6262>
 8002e54: 01 2e                        	cmp	r6, #1
 8002e56: 47 f0 d3 82                  	bne.w	#30118 <$t.24+0x627e>
 8002e5a: 01 21                        	movs	r1, #1
 8002e5c: 07 f0 c5 ba                  	b.w	#30090 <$t.24+0x6268>
 8002e60: 06 20                        	movs	r0, #6
 8002e62: 8d f8 f0 03                  	strb.w	r0, [sp, #1008]
 8002e66: 00 20                        	movs	r0, #0
 8002e68: 99 90                        	str	r0, [sp, #612]
 8002e6a: 00 20                        	movs	r0, #0
 8002e6c: 98 90                        	str	r0, [sp, #608]
 8002e6e: 02 f0 cd bf                  	b.w	#12186 <$t.24+0x1c8a>
 8002e72: a9 9b                        	ldr	r3, [sp, #676]
;     require_len_at_least!(buffer, 12);
 8002e74: 0c 2b                        	cmp	r3, #12
 8002e76: 81 f0 68 81                  	bhs.w	#4816 <$t.22+0x42>
 8002e7a: 01 21                        	movs	r1, #1
 8002e7c: 0c 22                        	movs	r2, #12
 8002e7e: 00 20                        	movs	r0, #0
 8002e80: 04 f0 64 bc                  	b.w	#18632 <$t.24+0x35ca>
 8002e84: a9 9a                        	ldr	r2, [sp, #676]
;     require_len!(buffer, 8);
 8002e86: 08 2a                        	cmp	r2, #8
 8002e88: 41 f0 81 81                  	bne.w	#4866 <$t.24+0xc>
;                     Ok(Stm32Wb5xEvent::GapReconnectionAddress(
 8002e8c: dd f8 18 04                  	ldr.w	r0, [sp, #1048]
 8002e90: 09 25                        	movs	r5, #9
 8002e92: dd f8 1c 14                  	ldr.w	r1, [sp, #1052]
 8002e96: 9d f8 20 24                  	ldrb.w	r2, [sp, #1056]
 8002e9a: bd f8 b1 32                  	ldrh.w	r3, [sp, #689]
 8002e9e: dd f8 ad 62                  	ldr.w	r6, [sp, #685]
 8002ea2: 8d f8 f0 53                  	strb.w	r5, [sp, #1008]
 8002ea6: cd f8 f1 63                  	str.w	r6, [sp, #1009]
 8002eaa: ad f8 f5 33                  	strh.w	r3, [sp, #1013]
 8002eae: cd f8 f7 03                  	str.w	r0, [sp, #1015]
 8002eb2: cd f8 fb 13                  	str.w	r1, [sp, #1019]
 8002eb6: 8d f8 ff 23                  	strb.w	r2, [sp, #1023]
 8002eba: 02 f0 8d bf                  	b.w	#12058 <$t.24+0x1c56>
;             0x0C0F => Ok(Stm32Wb5xEvent::GattNotification(to_attribute_value(
 8002ebe: a9 9a                        	ldr	r2, [sp, #676]
 8002ec0: 70 46                        	mov	r0, lr
 8002ec2: 74 46                        	mov	r4, lr
 8002ec4: 15 f0 5a f9                  	bl	#86708
;         self
 8002ec8: 20 1d                        	adds	r0, r4, #4
 8002eca: dd f8 18 c4                  	ldr.w	r12, [sp, #1048]
 8002ece: 0d f5 a4 61                  	add.w	r1, sp, #1312
 8002ed2: 90 e8 7c 00                  	ldm.w	r0, {r2, r3, r4, r5, r6}
;             )?)),
 8002ed6: bc f1 01 0f                  	cmp.w	r12, #1
;         self
 8002eda: 7c c1                        	stm	r1!, {r2, r3, r4, r5, r6}
 8002edc: dd f8 44 04                  	ldr.w	r0, [sp, #1092]
 8002ee0: f9 90                        	str	r0, [sp, #996]
 8002ee2: dd f8 0c 05                  	ldr.w	r0, [sp, #1292]
 8002ee6: 87 90                        	str	r0, [sp, #540]
 8002ee8: dd f8 54 04                  	ldr.w	r0, [sp, #1108]
 8002eec: 8e 90                        	str	r0, [sp, #568]
 8002eee: bd f8 3a 04                  	ldrh.w	r0, [sp, #1082]
 8002ef2: a6 90                        	str	r0, [sp, #664]
 8002ef4: 9d f8 39 04                  	ldrb.w	r0, [sp, #1081]
 8002ef8: 9c 90                        	str	r0, [sp, #624]
 8002efa: 9d f8 38 04                  	ldrb.w	r0, [sp, #1080]
 8002efe: 27 90                        	str	r0, [sp, #156]
 8002f00: dd f8 48 04                  	ldr.w	r0, [sp, #1096]
 8002f04: dd f8 18 a5                  	ldr.w	r10, [sp, #1304]
 8002f08: dd f8 14 b5                  	ldr.w	r11, [sp, #1300]
 8002f0c: dd f8 34 e4                  	ldr.w	lr, [sp, #1076]
 8002f10: dd f8 3c 64                  	ldr.w	r6, [sp, #1084]
 8002f14: dd f8 30 14                  	ldr.w	r1, [sp, #1072]
 8002f18: 97 90                        	str	r0, [sp, #604]
 8002f1a: dd f8 4c 04                  	ldr.w	r0, [sp, #1100]
 8002f1e: dd f8 40 24                  	ldr.w	r2, [sp, #1088]
 8002f22: 92 91                        	str	r1, [sp, #584]
 8002f24: dd f8 10 15                  	ldr.w	r1, [sp, #1296]
 8002f28: a9 90                        	str	r0, [sp, #676]
 8002f2a: dd f8 50 04                  	ldr.w	r0, [sp, #1104]
 8002f2e: 88 91                        	str	r1, [sp, #544]
 8002f30: f8 92                        	str	r2, [sp, #992]
;             )?)),
 8002f32: 1e 90                        	str	r0, [sp, #120]
 8002f34: 00 f0 c7 85                  	beq.w	#2958 <$t.18+0x7ae>
 8002f38: dd f8 08 05                  	ldr.w	r0, [sp, #1288]
;             0x0C0F => Ok(Stm32Wb5xEvent::GattNotification(to_attribute_value(
 8002f3c: 0d f5 a4 65                  	add.w	r5, sp, #1312
 8002f40: 74 90                        	str	r0, [sp, #464]
 8002f42: dd f8 04 05                  	ldr.w	r0, [sp, #1284]
 8002f46: 59 90                        	str	r0, [sp, #356]
 8002f48: dd f8 fc 04                  	ldr.w	r0, [sp, #1276]
 8002f4c: 5a 90                        	str	r0, [sp, #360]
 8002f4e: dd f8 f4 04                  	ldr.w	r0, [sp, #1268]
 8002f52: 5b 90                        	str	r0, [sp, #364]
 8002f54: dd f8 ec 04                  	ldr.w	r0, [sp, #1260]
 8002f58: 5c 90                        	str	r0, [sp, #368]
 8002f5a: dd f8 e8 04                  	ldr.w	r0, [sp, #1256]
 8002f5e: 76 90                        	str	r0, [sp, #472]
 8002f60: dd f8 e4 04                  	ldr.w	r0, [sp, #1252]
 8002f64: 5d 90                        	str	r0, [sp, #372]
 8002f66: dd f8 e0 04                  	ldr.w	r0, [sp, #1248]
 8002f6a: 77 90                        	str	r0, [sp, #476]
 8002f6c: dd f8 dc 04                  	ldr.w	r0, [sp, #1244]
 8002f70: 5e 90                        	str	r0, [sp, #376]
 8002f72: dd f8 d8 04                  	ldr.w	r0, [sp, #1240]
 8002f76: 78 90                        	str	r0, [sp, #480]
 8002f78: dd f8 d4 04                  	ldr.w	r0, [sp, #1236]
 8002f7c: 5f 90                        	str	r0, [sp, #380]
 8002f7e: dd f8 d0 04                  	ldr.w	r0, [sp, #1232]
 8002f82: 79 90                        	str	r0, [sp, #484]
 8002f84: dd f8 cc 04                  	ldr.w	r0, [sp, #1228]
 8002f88: 60 90                        	str	r0, [sp, #384]
 8002f8a: dd f8 c8 04                  	ldr.w	r0, [sp, #1224]
 8002f8e: 7a 90                        	str	r0, [sp, #488]
 8002f90: dd f8 c4 04                  	ldr.w	r0, [sp, #1220]
 8002f94: 61 90                        	str	r0, [sp, #388]
 8002f96: dd f8 c0 04                  	ldr.w	r0, [sp, #1216]
 8002f9a: 7b 90                        	str	r0, [sp, #492]
 8002f9c: dd f8 bc 04                  	ldr.w	r0, [sp, #1212]
 8002fa0: 62 90                        	str	r0, [sp, #392]
 8002fa2: dd f8 b8 04                  	ldr.w	r0, [sp, #1208]
 8002fa6: 7c 90                        	str	r0, [sp, #496]
 8002fa8: dd f8 b4 04                  	ldr.w	r0, [sp, #1204]
 8002fac: 63 90                        	str	r0, [sp, #396]
 8002fae: dd f8 b0 04                  	ldr.w	r0, [sp, #1200]
 8002fb2: 7e 90                        	str	r0, [sp, #504]
 8002fb4: dd f8 ac 04                  	ldr.w	r0, [sp, #1196]
 8002fb8: 64 90                        	str	r0, [sp, #400]
 8002fba: dd f8 a8 04                  	ldr.w	r0, [sp, #1192]
 8002fbe: 7f 90                        	str	r0, [sp, #508]
 8002fc0: dd f8 a4 04                  	ldr.w	r0, [sp, #1188]
 8002fc4: 65 90                        	str	r0, [sp, #404]
 8002fc6: dd f8 a0 04                  	ldr.w	r0, [sp, #1184]
 8002fca: 80 90                        	str	r0, [sp, #512]
 8002fcc: dd f8 9c 04                  	ldr.w	r0, [sp, #1180]
 8002fd0: 66 90                        	str	r0, [sp, #408]
 8002fd2: dd f8 98 04                  	ldr.w	r0, [sp, #1176]
 8002fd6: 81 90                        	str	r0, [sp, #516]
 8002fd8: dd f8 94 04                  	ldr.w	r0, [sp, #1172]
 8002fdc: 67 90                        	str	r0, [sp, #412]
 8002fde: dd f8 90 04                  	ldr.w	r0, [sp, #1168]
 8002fe2: 82 90                        	str	r0, [sp, #520]
 8002fe4: dd f8 8c 04                  	ldr.w	r0, [sp, #1164]
 8002fe8: 68 90                        	str	r0, [sp, #416]
 8002fea: dd f8 88 04                  	ldr.w	r0, [sp, #1160]
 8002fee: 83 90                        	str	r0, [sp, #524]
 8002ff0: dd f8 84 04                  	ldr.w	r0, [sp, #1156]
 8002ff4: 69 90                        	str	r0, [sp, #420]
 8002ff6: dd f8 80 04                  	ldr.w	r0, [sp, #1152]
 8002ffa: 84 90                        	str	r0, [sp, #528]
 8002ffc: dd f8 7c 04                  	ldr.w	r0, [sp, #1148]
 8003000: 6a 90                        	str	r0, [sp, #424]
 8003002: dd f8 78 04                  	ldr.w	r0, [sp, #1144]
 8003006: 70 90                        	str	r0, [sp, #448]
 8003008: dd f8 74 04                  	ldr.w	r0, [sp, #1140]
 800300c: 6b 90                        	str	r0, [sp, #428]
 800300e: dd f8 70 04                  	ldr.w	r0, [sp, #1136]
 8003012: 85 90                        	str	r0, [sp, #532]
 8003014: dd f8 6c 04                  	ldr.w	r0, [sp, #1132]
 8003018: 6c 90                        	str	r0, [sp, #432]
 800301a: dd f8 68 04                  	ldr.w	r0, [sp, #1128]
 800301e: 7d 90                        	str	r0, [sp, #500]
 8003020: dd f8 64 04                  	ldr.w	r0, [sp, #1124]
 8003024: 6d 90                        	str	r0, [sp, #436]
 8003026: dd f8 60 04                  	ldr.w	r0, [sp, #1120]
 800302a: 75 90                        	str	r0, [sp, #468]
 800302c: dd f8 5c 04                  	ldr.w	r0, [sp, #1116]
 8003030: 71 90                        	str	r0, [sp, #452]
 8003032: 29 cd                        	ldm	r5, {r0, r3, r5}
 8003034: dd f8 2c 45                  	ldr.w	r4, [sp, #1324]
 8003038: cd f8 0f 04                  	str.w	r0, [sp, #1039]
 800303c: 9c 98                        	ldr	r0, [sp, #624]
 800303e: 8d f8 05 04                  	strb.w	r0, [sp, #1029]
 8003042: 27 98                        	ldr	r0, [sp, #156]
 8003044: 47 e9 12 54                  	strd	r5, r4, [r7, #-72]
 8003048: dd f8 30 25                  	ldr.w	r2, [sp, #1328]
 800304c: 92 9c                        	ldr	r4, [sp, #584]
 800304e: 8d f8 04 04                  	strb.w	r0, [sp, #1028]
 8003052: a6 98                        	ldr	r0, [sp, #664]
 8003054: cd f8 13 34                  	str.w	r3, [sp, #1043]
 8003058: 47 f8 40 2c                  	str	r2, [r7, #-64]
 800305c: cd f8 08 64                  	str.w	r6, [sp, #1032]
 8003060: 1a 26                        	movs	r6, #26
 8003062: 02 f0 f9 b9                  	b.w	#9202 <$t.24+0x12d6>
;             0x0C07 => Ok(Stm32Wb5xEvent::AttReadResponse(to_att_read_response(
 8003066: a9 9a                        	ldr	r2, [sp, #676]
 8003068: 0d f5 83 60                  	add.w	r0, sp, #1048
 800306c: 15 f0 3a f8                  	bl	#86132
;         self
 8003070: dd f8 24 04                  	ldr.w	r0, [sp, #1060]
 8003074: 47 f8 40 0c                  	str	r0, [r7, #-64]
 8003078: dd f8 2c 04                  	ldr.w	r0, [sp, #1068]
 800307c: a9 90                        	str	r0, [sp, #676]
 800307e: dd f8 28 04                  	ldr.w	r0, [sp, #1064]
 8003082: bd f8 46 64                  	ldrh.w	r6, [sp, #1094]
 8003086: 92 90                        	str	r0, [sp, #584]
 8003088: bd f8 40 04                  	ldrh.w	r0, [sp, #1088]
 800308c: dd f8 18 54                  	ldr.w	r5, [sp, #1048]
 8003090: a5 96                        	str	r6, [sp, #660]
 8003092: 9b 90                        	str	r0, [sp, #620]
;             )?)),
 8003094: 01 2d                        	cmp	r5, #1
;         self
 8003096: dd f8 48 04                  	ldr.w	r0, [sp, #1096]
 800309a: 9d f8 13 25                  	ldrb.w	r2, [sp, #1299]
 800309e: bd f8 11 35                  	ldrh.w	r3, [sp, #1297]
 80030a2: dd f8 42 64                  	ldr.w	r6, [sp, #1090]
 80030a6: bd f8 3e a4                  	ldrh.w	r10, [sp, #1086]
 80030aa: dd f8 34 e4                  	ldr.w	lr, [sp, #1076]
 80030ae: dd f8 30 c4                  	ldr.w	r12, [sp, #1072]
 80030b2: bd f8 38 84                  	ldrh.w	r8, [sp, #1080]
 80030b6: dd f8 50 b4                  	ldr.w	r11, [sp, #1104]
 80030ba: dd f8 1c 14                  	ldr.w	r1, [sp, #1052]
 80030be: 97 90                        	str	r0, [sp, #604]
 80030c0: dd f8 4c 04                  	ldr.w	r0, [sp, #1100]
 80030c4: dd f8 20 44                  	ldr.w	r4, [sp, #1056]
 80030c8: 47 f8 48 1c                  	str	r1, [r7, #-72]
 80030cc: dd f8 3a 14                  	ldr.w	r1, [sp, #1082]
 80030d0: a6 90                        	str	r0, [sp, #664]
 80030d2: dd f8 54 04                  	ldr.w	r0, [sp, #1108]
 80030d6: 47 f8 44 4c                  	str	r4, [r7, #-68]
 80030da: a7 91                        	str	r1, [sp, #668]
;             )?)),
 80030dc: 8e 90                        	str	r0, [sp, #568]
 80030de: 41 f0 74 80                  	bne.w	#4328 <$t.24+0x48>
;         Err(v)
 80030e2: 92 99                        	ldr	r1, [sp, #584]
 80030e4: 4f ea 1e 49                  	lsr.w	r9, lr, #16
 80030e8: fe 91                        	str	r1, [sp, #1016]
 80030ea: a7 99                        	ldr	r1, [sp, #668]
 80030ec: 57 e9 11 02                  	ldrd	r0, r2, [r7, #-68]
 80030f0: cd e9 fc 02                  	strd	r0, r2, [sp, #1008]
 80030f4: 4f ea 1c 42                  	lsr.w	r2, r12, #16
 80030f8: a9 98                        	ldr	r0, [sp, #676]
 80030fa: 97 9c                        	ldr	r4, [sp, #604]
 80030fc: ff 90                        	str	r0, [sp, #1020]
;         self
 80030fe: 08 0c                        	lsrs	r0, r1, #16
 8003100: 40 ea 0a 40                  	orr.w	r0, r0, r10, lsl #16
 8003104: a9 90                        	str	r0, [sp, #676]
 8003106: 20 0c                        	lsrs	r0, r4, #16
 8003108: 9b 9d                        	ldr	r5, [sp, #620]
 800310a: a4 90                        	str	r0, [sp, #656]
 800310c: a0 b2                        	uxth	r0, r4
;         Err(v)
 800310e: 00 0a                        	lsrs	r0, r0, #8
 8003110: a3 92                        	str	r2, [sp, #652]
 8003112: a1 90                        	str	r0, [sp, #644]
;         self
 8003114: 4f ea 18 22                  	lsr.w	r2, r8, #8
;         Err(v)
 8003118: a5 98                        	ldr	r0, [sp, #660]
 800311a: 2b 0a                        	lsrs	r3, r5, #8
 800311c: a7 96                        	str	r6, [sp, #668]
 800311e: 4f ea 1c 2a                  	lsr.w	r10, r12, #8
 8003122: 9b 94                        	str	r4, [sp, #620]
 8003124: 14 46                        	mov	r4, r2
 8003126: 80 b2                        	uxth	r0, r0
 8003128: 8e 9e                        	ldr	r6, [sp, #568]
 800312a: 99 90                        	str	r0, [sp, #612]
;             )?)),
 800312c: 00 0a                        	lsrs	r0, r0, #8
 800312e: 98 90                        	str	r0, [sp, #608]
 8003130: a6 9a                        	ldr	r2, [sp, #664]
;         self
 8003132: cd f8 94 82                  	str.w	r8, [sp, #660]
 8003136: 88 46                        	mov	r8, r1
 8003138: a0 92                        	str	r2, [sp, #640]
 800313a: 19 46                        	mov	r1, r3
 800313c: a4 9a                        	ldr	r2, [sp, #656]
 800313e: 73 46                        	mov	r3, lr
 8003140: a2 92                        	str	r2, [sp, #648]
 8003142: a5 9a                        	ldr	r2, [sp, #660]
 8003144: cd f8 48 c2                  	str.w	r12, [sp, #584]
 8003148: dc 46                        	mov	r12, r11
 800314a: 23 95                        	str	r5, [sp, #140]
 800314c: 1d 46                        	mov	r5, r3
 800314e: 91 96                        	str	r6, [sp, #580]
 8003150: 33 46                        	mov	r3, r6
 8003152: 00 f0 4f bc                  	b.w	#2206 <$t.18+0x6dc>
;     require_len!(buffer, 9);
 8003156: a9 98                        	ldr	r0, [sp, #676]
 8003158: 09 28                        	cmp	r0, #9
 800315a: 41 f0 7c 81                  	bne.w	#4856 <$t.24+0x2d4>
;         request: buffer[5].try_into().map_err(hci::event::Error::Vendor)?,
 800315e: 9d f8 b0 22                  	ldrb.w	r2, [sp, #688]
 8003162: 17 23                        	movs	r3, #23
 8003164: 12 26                        	movs	r6, #18
;             0x01 => Ok(AttRequest::ErrorResponse),
 8003166: 55 1e                        	subs	r5, r2, #1
 8003168: d1 2d                        	cmp	r5, #209
 800316a: 01 f2 77 81                  	bhi.w	#4846 <$t.24+0x2da>
 800316e: bd f8 ad 02                  	ldrh.w	r0, [sp, #685]
 8003172: 01 21                        	movs	r1, #1
 8003174: df e8 15 f0                  	tbh	[pc, r5, lsl #1]

08003178 $d.17:
 8003178:	c1 24 d2 00	.word	0x00d224c1
 800317c:	ae 24 a2 24	.word	0x24a224ae
 8003180:	a4 24 b2 24	.word	0x24b224a4
 8003184:	9e 24 a0 24	.word	0x24a0249e
 8003188:	aa 24 a8 24	.word	0x24a824aa
 800318c:	b6 24 98 24	.word	0x249824b6
 8003190:	96 24 ba 24	.word	0x24ba2496
 8003194:	ac 24 b0 24	.word	0x24b024ac
 8003198:	b8 24 b4 24	.word	0x24b424b8
 800319c:	8e 24 72 09	.word	0x0972248e
 80031a0:	72 09 9c 24	.word	0x249c0972
 80031a4:	bc 24 90 24	.word	0x249024bc
 80031a8:	9a 24 72 09	.word	0x0972249a
 80031ac:	94 24 72 09	.word	0x09722494
 80031b0:	a6 24 92 24	.word	0x249224a6
 80031b4:	72 09 72 09	.word	0x09720972
 80031b8:	72 09 72 09	.word	0x09720972
 80031bc:	72 09 72 09	.word	0x09720972
 80031c0:	72 09 72 09	.word	0x09720972
 80031c4:	72 09 72 09	.word	0x09720972
 80031c8:	72 09 72 09	.word	0x09720972
 80031cc:	72 09 72 09	.word	0x09720972
 80031d0:	72 09 72 09	.word	0x09720972
 80031d4:	72 09 72 09	.word	0x09720972
 80031d8:	72 09 72 09	.word	0x09720972
 80031dc:	72 09 72 09	.word	0x09720972
 80031e0:	72 09 72 09	.word	0x09720972
 80031e4:	72 09 72 09	.word	0x09720972
 80031e8:	72 09 72 09	.word	0x09720972
 80031ec:	72 09 72 09	.word	0x09720972
 80031f0:	72 09 72 09	.word	0x09720972
 80031f4:	72 09 72 09	.word	0x09720972
 80031f8:	72 09 72 09	.word	0x09720972
 80031fc:	72 09 72 09	.word	0x09720972
 8003200:	72 09 72 09	.word	0x09720972
 8003204:	72 09 72 09	.word	0x09720972
 8003208:	72 09 72 09	.word	0x09720972
 800320c:	72 09 72 09	.word	0x09720972
 8003210:	72 09 72 09	.word	0x09720972
 8003214:	72 09 72 09	.word	0x09720972
 8003218:	72 09 c0 24	.word	0x24c00972
 800321c:	72 09 72 09	.word	0x09720972
 8003220:	72 09 72 09	.word	0x09720972
 8003224:	72 09 72 09	.word	0x09720972
 8003228:	72 09 72 09	.word	0x09720972
 800322c:	72 09 72 09	.word	0x09720972
 8003230:	72 09 72 09	.word	0x09720972
 8003234:	72 09 72 09	.word	0x09720972
 8003238:	72 09 72 09	.word	0x09720972
 800323c:	72 09 72 09	.word	0x09720972
 8003240:	72 09 72 09	.word	0x09720972
 8003244:	72 09 72 09	.word	0x09720972
 8003248:	72 09 72 09	.word	0x09720972
 800324c:	72 09 72 09	.word	0x09720972
 8003250:	72 09 72 09	.word	0x09720972
 8003254:	72 09 72 09	.word	0x09720972
 8003258:	72 09 72 09	.word	0x09720972
 800325c:	72 09 72 09	.word	0x09720972
 8003260:	72 09 72 09	.word	0x09720972
 8003264:	72 09 72 09	.word	0x09720972
 8003268:	72 09 72 09	.word	0x09720972
 800326c:	72 09 72 09	.word	0x09720972
 8003270:	72 09 72 09	.word	0x09720972
 8003274:	72 09 72 09	.word	0x09720972
 8003278:	72 09 72 09	.word	0x09720972
 800327c:	72 09 72 09	.word	0x09720972
 8003280:	72 09 72 09	.word	0x09720972
 8003284:	72 09 72 09	.word	0x09720972
 8003288:	72 09 72 09	.word	0x09720972
 800328c:	72 09 72 09	.word	0x09720972
 8003290:	72 09 72 09	.word	0x09720972
 8003294:	72 09 72 09	.word	0x09720972
 8003298:	72 09 72 09	.word	0x09720972
 800329c:	72 09 72 09	.word	0x09720972
 80032a0:	72 09 72 09	.word	0x09720972
 80032a4:	72 09 72 09	.word	0x09720972
 80032a8:	72 09 72 09	.word	0x09720972
 80032ac:	72 09 72 09	.word	0x09720972
 80032b0:	72 09 72 09	.word	0x09720972
 80032b4:	72 09 72 09	.word	0x09720972
 80032b8:	72 09 72 09	.word	0x09720972
 80032bc:	72 09 72 09	.word	0x09720972
 80032c0:	72 09 72 09	.word	0x09720972
 80032c4:	72 09 72 09	.word	0x09720972
 80032c8:	72 09 72 09	.word	0x09720972
 80032cc:	72 09 72 09	.word	0x09720972
 80032d0:	72 09 72 09	.word	0x09720972
 80032d4:	72 09 72 09	.word	0x09720972
 80032d8:	72 09 72 09	.word	0x09720972
 80032dc:	72 09 72 09	.word	0x09720972
 80032e0:	72 09 72 09	.word	0x09720972
 80032e4:	72 09 72 09	.word	0x09720972
 80032e8:	72 09 72 09	.word	0x09720972
 80032ec:	72 09 72 09	.word	0x09720972
 80032f0:	72 09 72 09	.word	0x09720972
 80032f4:	72 09 72 09	.word	0x09720972
 80032f8:	72 09 72 09	.word	0x09720972
 80032fc:	72 09 72 09	.word	0x09720972
 8003300:	72 09 72 09	.word	0x09720972
 8003304:	72 09 72 09	.word	0x09720972
 8003308:	72 09 72 09	.word	0x09720972
 800330c:	72 09 72 09	.word	0x09720972
 8003310:	72 09 72 09	.word	0x09720972
 8003314:	72 09 72 09	.word	0x09720972
 8003318:	72 09 be 24	.word	0x24be0972

0800331c $t.18:
 800331c: 02 21                        	movs	r1, #2
 800331e: 04 f0 ec bb                  	b.w	#18392 <$t.24+0x3978>
 8003322: a9 9b                        	ldr	r3, [sp, #676]
;     require_len_at_least!(buffer, 6);
 8003324: 05 2b                        	cmp	r3, #5
 8003326: 01 f2 a2 80                  	bhi.w	#4420 <$t.24+0x2ec>
 800332a: 01 20                        	movs	r0, #1
 800332c: 00 22                        	movs	r2, #0
 800332e: 06 21                        	movs	r1, #6
 8003330: 02 f0 e5 bc                  	b.w	#10698 <$t.24+0x1b7c>
 8003334: a9 9a                        	ldr	r2, [sp, #676]
;     require_len_at_least!(buffer, 4);
 8003336: 04 2a                        	cmp	r2, #4
 8003338: c0 f0 8b 82                  	blo.w	#1302 <$t.18+0x53a>
;         assert!($size <= $src.len());
 800333c: 02 f0 fe 00                  	and	r0, r2, #254
 8003340: 02 28                        	cmp	r0, #2
 8003342: 01 f0 bf 82                  	beq.w	#5502 <$t.24+0x742>
;             0x0C0D => Ok(Stm32Wb5xEvent::AttExecuteWriteResponse(to_conn_handle(
 8003346: 0d f5 83 62                  	add.w	r2, sp, #1048
;     copy_nonoverlapping(src, dst, count)
 800334a: bd f8 ad 32                  	ldrh.w	r3, [sp, #685]
;             0x0C0D => Ok(Stm32Wb5xEvent::AttExecuteWriteResponse(to_conn_handle(
 800334e: ad f8 f2 33                  	strh.w	r3, [sp, #1010]
 8003352: 18 23                        	movs	r3, #24
 8003354: 02 f0 3a bd                  	b.w	#10868 <$t.24+0x1c4a>
;             0x0C0E => Ok(Stm32Wb5xEvent::GattIndication(to_attribute_value(buffer)?)),
 8003358: a9 9a                        	ldr	r2, [sp, #676]
 800335a: 70 46                        	mov	r0, lr
 800335c: 74 46                        	mov	r4, lr
 800335e: 14 f0 0d ff                  	bl	#85530
;         self
 8003362: 20 1d                        	adds	r0, r4, #4
 8003364: dd f8 18 c4                  	ldr.w	r12, [sp, #1048]
 8003368: 0d f5 a4 61                  	add.w	r1, sp, #1312
 800336c: 90 e8 7c 00                  	ldm.w	r0, {r2, r3, r4, r5, r6}
;             0x0C0E => Ok(Stm32Wb5xEvent::GattIndication(to_attribute_value(buffer)?)),
 8003370: bc f1 01 0f                  	cmp.w	r12, #1
;         self
 8003374: 7c c1                        	stm	r1!, {r2, r3, r4, r5, r6}
 8003376: dd f8 44 04                  	ldr.w	r0, [sp, #1092]
 800337a: f9 90                        	str	r0, [sp, #996]
 800337c: dd f8 0c 05                  	ldr.w	r0, [sp, #1292]
 8003380: 87 90                        	str	r0, [sp, #540]
 8003382: dd f8 54 04                  	ldr.w	r0, [sp, #1108]
 8003386: 8e 90                        	str	r0, [sp, #568]
 8003388: bd f8 3a 04                  	ldrh.w	r0, [sp, #1082]
 800338c: a6 90                        	str	r0, [sp, #664]
 800338e: 9d f8 39 04                  	ldrb.w	r0, [sp, #1081]
 8003392: 9c 90                        	str	r0, [sp, #624]
 8003394: 9d f8 38 04                  	ldrb.w	r0, [sp, #1080]
 8003398: 27 90                        	str	r0, [sp, #156]
 800339a: dd f8 48 04                  	ldr.w	r0, [sp, #1096]
 800339e: dd f8 18 a5                  	ldr.w	r10, [sp, #1304]
 80033a2: dd f8 14 b5                  	ldr.w	r11, [sp, #1300]
 80033a6: dd f8 34 e4                  	ldr.w	lr, [sp, #1076]
 80033aa: dd f8 3c 64                  	ldr.w	r6, [sp, #1084]
 80033ae: dd f8 30 14                  	ldr.w	r1, [sp, #1072]
 80033b2: 97 90                        	str	r0, [sp, #604]
 80033b4: dd f8 4c 04                  	ldr.w	r0, [sp, #1100]
 80033b8: dd f8 40 24                  	ldr.w	r2, [sp, #1088]
 80033bc: 92 91                        	str	r1, [sp, #584]
 80033be: dd f8 10 15                  	ldr.w	r1, [sp, #1296]
 80033c2: a9 90                        	str	r0, [sp, #676]
 80033c4: dd f8 50 04                  	ldr.w	r0, [sp, #1104]
 80033c8: 88 91                        	str	r1, [sp, #544]
 80033ca: f8 92                        	str	r2, [sp, #992]
;             0x0C0E => Ok(Stm32Wb5xEvent::GattIndication(to_attribute_value(buffer)?)),
 80033cc: 1e 90                        	str	r0, [sp, #120]
 80033ce: 00 f0 7a 83                  	beq.w	#1780 <$t.18+0x7ae>
 80033d2: dd f8 08 05                  	ldr.w	r0, [sp, #1288]
 80033d6: 0d f5 a4 65                  	add.w	r5, sp, #1312
 80033da: 74 90                        	str	r0, [sp, #464]
 80033dc: dd f8 04 05                  	ldr.w	r0, [sp, #1284]
 80033e0: 59 90                        	str	r0, [sp, #356]
 80033e2: dd f8 fc 04                  	ldr.w	r0, [sp, #1276]
 80033e6: 5a 90                        	str	r0, [sp, #360]
 80033e8: dd f8 f4 04                  	ldr.w	r0, [sp, #1268]
 80033ec: 5b 90                        	str	r0, [sp, #364]
 80033ee: dd f8 ec 04                  	ldr.w	r0, [sp, #1260]
 80033f2: 5c 90                        	str	r0, [sp, #368]
 80033f4: dd f8 e8 04                  	ldr.w	r0, [sp, #1256]
 80033f8: 76 90                        	str	r0, [sp, #472]
 80033fa: dd f8 e4 04                  	ldr.w	r0, [sp, #1252]
 80033fe: 5d 90                        	str	r0, [sp, #372]
 8003400: dd f8 e0 04                  	ldr.w	r0, [sp, #1248]
 8003404: 77 90                        	str	r0, [sp, #476]
 8003406: dd f8 dc 04                  	ldr.w	r0, [sp, #1244]
 800340a: 5e 90                        	str	r0, [sp, #376]
 800340c: dd f8 d8 04                  	ldr.w	r0, [sp, #1240]
 8003410: 78 90                        	str	r0, [sp, #480]
 8003412: dd f8 d4 04                  	ldr.w	r0, [sp, #1236]
 8003416: 5f 90                        	str	r0, [sp, #380]
 8003418: dd f8 d0 04                  	ldr.w	r0, [sp, #1232]
 800341c: 79 90                        	str	r0, [sp, #484]
 800341e: dd f8 cc 04                  	ldr.w	r0, [sp, #1228]
 8003422: 60 90                        	str	r0, [sp, #384]
 8003424: dd f8 c8 04                  	ldr.w	r0, [sp, #1224]
 8003428: 7a 90                        	str	r0, [sp, #488]
 800342a: dd f8 c4 04                  	ldr.w	r0, [sp, #1220]
 800342e: 61 90                        	str	r0, [sp, #388]
 8003430: dd f8 c0 04                  	ldr.w	r0, [sp, #1216]
 8003434: 7b 90                        	str	r0, [sp, #492]
 8003436: dd f8 bc 04                  	ldr.w	r0, [sp, #1212]
 800343a: 62 90                        	str	r0, [sp, #392]
 800343c: dd f8 b8 04                  	ldr.w	r0, [sp, #1208]
 8003440: 7c 90                        	str	r0, [sp, #496]
 8003442: dd f8 b4 04                  	ldr.w	r0, [sp, #1204]
 8003446: 63 90                        	str	r0, [sp, #396]
 8003448: dd f8 b0 04                  	ldr.w	r0, [sp, #1200]
 800344c: 7e 90                        	str	r0, [sp, #504]
 800344e: dd f8 ac 04                  	ldr.w	r0, [sp, #1196]
 8003452: 64 90                        	str	r0, [sp, #400]
 8003454: dd f8 a8 04                  	ldr.w	r0, [sp, #1192]
 8003458: 7f 90                        	str	r0, [sp, #508]
 800345a: dd f8 a4 04                  	ldr.w	r0, [sp, #1188]
 800345e: 65 90                        	str	r0, [sp, #404]
 8003460: dd f8 a0 04                  	ldr.w	r0, [sp, #1184]
 8003464: 80 90                        	str	r0, [sp, #512]
 8003466: dd f8 9c 04                  	ldr.w	r0, [sp, #1180]
 800346a: 66 90                        	str	r0, [sp, #408]
 800346c: dd f8 98 04                  	ldr.w	r0, [sp, #1176]
 8003470: 81 90                        	str	r0, [sp, #516]
 8003472: dd f8 94 04                  	ldr.w	r0, [sp, #1172]
 8003476: 67 90                        	str	r0, [sp, #412]
 8003478: dd f8 90 04                  	ldr.w	r0, [sp, #1168]
 800347c: 82 90                        	str	r0, [sp, #520]
 800347e: dd f8 8c 04                  	ldr.w	r0, [sp, #1164]
 8003482: 68 90                        	str	r0, [sp, #416]
 8003484: dd f8 88 04                  	ldr.w	r0, [sp, #1160]
 8003488: 83 90                        	str	r0, [sp, #524]
 800348a: dd f8 84 04                  	ldr.w	r0, [sp, #1156]
 800348e: 69 90                        	str	r0, [sp, #420]
 8003490: dd f8 80 04                  	ldr.w	r0, [sp, #1152]
 8003494: 84 90                        	str	r0, [sp, #528]
 8003496: dd f8 7c 04                  	ldr.w	r0, [sp, #1148]
 800349a: 6a 90                        	str	r0, [sp, #424]
 800349c: dd f8 78 04                  	ldr.w	r0, [sp, #1144]
 80034a0: 70 90                        	str	r0, [sp, #448]
 80034a2: dd f8 74 04                  	ldr.w	r0, [sp, #1140]
 80034a6: 6b 90                        	str	r0, [sp, #428]
 80034a8: dd f8 70 04                  	ldr.w	r0, [sp, #1136]
 80034ac: 85 90                        	str	r0, [sp, #532]
 80034ae: dd f8 6c 04                  	ldr.w	r0, [sp, #1132]
 80034b2: 6c 90                        	str	r0, [sp, #432]
 80034b4: dd f8 68 04                  	ldr.w	r0, [sp, #1128]
 80034b8: 7d 90                        	str	r0, [sp, #500]
 80034ba: dd f8 64 04                  	ldr.w	r0, [sp, #1124]
 80034be: 6d 90                        	str	r0, [sp, #436]
 80034c0: dd f8 60 04                  	ldr.w	r0, [sp, #1120]
 80034c4: 75 90                        	str	r0, [sp, #468]
 80034c6: dd f8 5c 04                  	ldr.w	r0, [sp, #1116]
 80034ca: 71 90                        	str	r0, [sp, #452]
 80034cc: 29 cd                        	ldm	r5, {r0, r3, r5}
 80034ce: dd f8 2c 45                  	ldr.w	r4, [sp, #1324]
 80034d2: cd f8 0f 04                  	str.w	r0, [sp, #1039]
 80034d6: 9c 98                        	ldr	r0, [sp, #624]
 80034d8: 8d f8 05 04                  	strb.w	r0, [sp, #1029]
 80034dc: 27 98                        	ldr	r0, [sp, #156]
 80034de: 8d f8 04 04                  	strb.w	r0, [sp, #1028]
 80034e2: a6 98                        	ldr	r0, [sp, #664]
 80034e4: dd f8 30 25                  	ldr.w	r2, [sp, #1328]
 80034e8: cd f8 13 34                  	str.w	r3, [sp, #1043]
 80034ec: 47 e9 12 54                  	strd	r5, r4, [r7, #-72]
 80034f0: 47 f8 40 2c                  	str	r2, [r7, #-64]
 80034f4: 92 9c                        	ldr	r4, [sp, #584]
 80034f6: ad f8 06 04                  	strh.w	r0, [sp, #1030]
 80034fa: dd f8 00 c5                  	ldr.w	r12, [sp, #1280]
 80034fe: dd f8 f8 84                  	ldr.w	r8, [sp, #1272]
 8003502: dd f8 f0 94                  	ldr.w	r9, [sp, #1264]
 8003506: dd f8 58 14                  	ldr.w	r1, [sp, #1112]
 800350a: dd f8 10 04                  	ldr.w	r0, [sp, #1040]
 800350e: dd f8 0c 24                  	ldr.w	r2, [sp, #1036]
 8003512: cd f8 08 64                  	str.w	r6, [sp, #1032]
 8003516: 19 26                        	movs	r6, #25
 8003518: 47 f8 3c 4c                  	str	r4, [r7, #-60]
 800351c: 01 f0 ac bf                  	b.w	#8024 <$t.24+0x12f6>
;     require_len!(buffer, 6);
 8003520: a9 98                        	ldr	r0, [sp, #676]
 8003522: 06 28                        	cmp	r0, #6
 8003524: 40 f0 bc 87                  	bne.w	#3960 <$t.24+0x31e>
;         status: buffer[5].try_into().map_err(hci::event::Error::Vendor)?,
 8003528: 9d f8 b0 12                  	ldrb.w	r1, [sp, #688]
;     copy_nonoverlapping(src, dst, count)
 800352c: bd f8 ad 02                  	ldrh.w	r0, [sp, #685]
;             0x00 => Ok(GattProcedureStatus::Success),
 8003530: 00 29                        	cmp	r1, #0
 8003532: 02 f0 7c 84                  	beq.w	#10488 <$t.24+0x1cac>
 8003536: 41 29                        	cmp	r1, #65
 8003538: 42 f0 b7 84                  	bne.w	#10606 <$t.24+0x1d28>
 800353c: 01 21                        	movs	r1, #1
 800353e: 02 f0 77 bc                  	b.w	#10478 <$t.24+0x1cae>
;                 to_att_read_response(buffer)?,
 8003542: a9 9a                        	ldr	r2, [sp, #676]
 8003544: 70 46                        	mov	r0, lr
 8003546: 74 46                        	mov	r4, lr
 8003548: 14 f0 cc fd                  	bl	#84888
;         self
 800354c: 20 1d                        	adds	r0, r4, #4
 800354e: dd f8 18 c4                  	ldr.w	r12, [sp, #1048]
 8003552: 0d f5 a4 61                  	add.w	r1, sp, #1312
 8003556: 90 e8 7c 00                  	ldm.w	r0, {r2, r3, r4, r5, r6}
;                 to_att_read_response(buffer)?,
 800355a: bc f1 01 0f                  	cmp.w	r12, #1
;         self
 800355e: 7c c1                        	stm	r1!, {r2, r3, r4, r5, r6}
 8003560: dd f8 44 04                  	ldr.w	r0, [sp, #1092]
 8003564: f9 90                        	str	r0, [sp, #996]
 8003566: dd f8 0c 05                  	ldr.w	r0, [sp, #1292]
 800356a: 87 90                        	str	r0, [sp, #540]
 800356c: dd f8 54 04                  	ldr.w	r0, [sp, #1108]
 8003570: 8e 90                        	str	r0, [sp, #568]
 8003572: bd f8 3a 04                  	ldrh.w	r0, [sp, #1082]
 8003576: a6 90                        	str	r0, [sp, #664]
 8003578: 9d f8 39 04                  	ldrb.w	r0, [sp, #1081]
 800357c: 9c 90                        	str	r0, [sp, #624]
 800357e: 9d f8 38 04                  	ldrb.w	r0, [sp, #1080]
 8003582: 27 90                        	str	r0, [sp, #156]
 8003584: dd f8 48 04                  	ldr.w	r0, [sp, #1096]
 8003588: dd f8 18 a5                  	ldr.w	r10, [sp, #1304]
 800358c: dd f8 14 b5                  	ldr.w	r11, [sp, #1300]
 8003590: dd f8 34 e4                  	ldr.w	lr, [sp, #1076]
 8003594: dd f8 3c 64                  	ldr.w	r6, [sp, #1084]
 8003598: dd f8 30 14                  	ldr.w	r1, [sp, #1072]
 800359c: 97 90                        	str	r0, [sp, #604]
 800359e: dd f8 4c 04                  	ldr.w	r0, [sp, #1100]
 80035a2: dd f8 40 24                  	ldr.w	r2, [sp, #1088]
 80035a6: 92 91                        	str	r1, [sp, #584]
 80035a8: dd f8 10 15                  	ldr.w	r1, [sp, #1296]
 80035ac: a9 90                        	str	r0, [sp, #676]
 80035ae: dd f8 50 04                  	ldr.w	r0, [sp, #1104]
 80035b2: 88 91                        	str	r1, [sp, #544]
 80035b4: f8 92                        	str	r2, [sp, #992]
;                 to_att_read_response(buffer)?,
 80035b6: 1e 90                        	str	r0, [sp, #120]
 80035b8: 00 f0 85 82                  	beq.w	#1290 <$t.18+0x7ae>
 80035bc: dd f8 08 05                  	ldr.w	r0, [sp, #1288]
;             0x0C09 => Ok(Stm32Wb5xEvent::AttReadMultipleResponse(
 80035c0: 0d f5 a4 65                  	add.w	r5, sp, #1312
 80035c4: 74 90                        	str	r0, [sp, #464]
 80035c6: dd f8 04 05                  	ldr.w	r0, [sp, #1284]
 80035ca: 59 90                        	str	r0, [sp, #356]
 80035cc: dd f8 fc 04                  	ldr.w	r0, [sp, #1276]
 80035d0: 5a 90                        	str	r0, [sp, #360]
 80035d2: dd f8 f4 04                  	ldr.w	r0, [sp, #1268]
 80035d6: 5b 90                        	str	r0, [sp, #364]
 80035d8: dd f8 ec 04                  	ldr.w	r0, [sp, #1260]
 80035dc: 5c 90                        	str	r0, [sp, #368]
 80035de: dd f8 e8 04                  	ldr.w	r0, [sp, #1256]
 80035e2: 76 90                        	str	r0, [sp, #472]
 80035e4: dd f8 e4 04                  	ldr.w	r0, [sp, #1252]
 80035e8: 5d 90                        	str	r0, [sp, #372]
 80035ea: dd f8 e0 04                  	ldr.w	r0, [sp, #1248]
 80035ee: 77 90                        	str	r0, [sp, #476]
 80035f0: dd f8 dc 04                  	ldr.w	r0, [sp, #1244]
 80035f4: 5e 90                        	str	r0, [sp, #376]
 80035f6: dd f8 d8 04                  	ldr.w	r0, [sp, #1240]
 80035fa: 78 90                        	str	r0, [sp, #480]
 80035fc: dd f8 d4 04                  	ldr.w	r0, [sp, #1236]
 8003600: 5f 90                        	str	r0, [sp, #380]
 8003602: dd f8 d0 04                  	ldr.w	r0, [sp, #1232]
 8003606: 79 90                        	str	r0, [sp, #484]
 8003608: dd f8 cc 04                  	ldr.w	r0, [sp, #1228]
 800360c: 60 90                        	str	r0, [sp, #384]
 800360e: dd f8 c8 04                  	ldr.w	r0, [sp, #1224]
 8003612: 7a 90                        	str	r0, [sp, #488]
 8003614: dd f8 c4 04                  	ldr.w	r0, [sp, #1220]
 8003618: 61 90                        	str	r0, [sp, #388]
 800361a: dd f8 c0 04                  	ldr.w	r0, [sp, #1216]
 800361e: 7b 90                        	str	r0, [sp, #492]
 8003620: dd f8 bc 04                  	ldr.w	r0, [sp, #1212]
 8003624: 62 90                        	str	r0, [sp, #392]
 8003626: dd f8 b8 04                  	ldr.w	r0, [sp, #1208]
 800362a: 7c 90                        	str	r0, [sp, #496]
 800362c: dd f8 b4 04                  	ldr.w	r0, [sp, #1204]
 8003630: 63 90                        	str	r0, [sp, #396]
 8003632: dd f8 b0 04                  	ldr.w	r0, [sp, #1200]
 8003636: 7e 90                        	str	r0, [sp, #504]
 8003638: dd f8 ac 04                  	ldr.w	r0, [sp, #1196]
 800363c: 64 90                        	str	r0, [sp, #400]
 800363e: dd f8 a8 04                  	ldr.w	r0, [sp, #1192]
 8003642: 7f 90                        	str	r0, [sp, #508]
 8003644: dd f8 a4 04                  	ldr.w	r0, [sp, #1188]
 8003648: 65 90                        	str	r0, [sp, #404]
 800364a: dd f8 a0 04                  	ldr.w	r0, [sp, #1184]
 800364e: 80 90                        	str	r0, [sp, #512]
 8003650: dd f8 9c 04                  	ldr.w	r0, [sp, #1180]
 8003654: 66 90                        	str	r0, [sp, #408]
 8003656: dd f8 98 04                  	ldr.w	r0, [sp, #1176]
 800365a: 81 90                        	str	r0, [sp, #516]
 800365c: dd f8 94 04                  	ldr.w	r0, [sp, #1172]
 8003660: 67 90                        	str	r0, [sp, #412]
 8003662: dd f8 90 04                  	ldr.w	r0, [sp, #1168]
 8003666: 82 90                        	str	r0, [sp, #520]
 8003668: dd f8 8c 04                  	ldr.w	r0, [sp, #1164]
 800366c: 68 90                        	str	r0, [sp, #416]
 800366e: dd f8 88 04                  	ldr.w	r0, [sp, #1160]
 8003672: 83 90                        	str	r0, [sp, #524]
 8003674: dd f8 84 04                  	ldr.w	r0, [sp, #1156]
 8003678: 69 90                        	str	r0, [sp, #420]
 800367a: dd f8 80 04                  	ldr.w	r0, [sp, #1152]
 800367e: 84 90                        	str	r0, [sp, #528]
 8003680: dd f8 7c 04                  	ldr.w	r0, [sp, #1148]
 8003684: 6a 90                        	str	r0, [sp, #424]
 8003686: dd f8 78 04                  	ldr.w	r0, [sp, #1144]
 800368a: 70 90                        	str	r0, [sp, #448]
 800368c: dd f8 74 04                  	ldr.w	r0, [sp, #1140]
 8003690: 6b 90                        	str	r0, [sp, #428]
 8003692: dd f8 70 04                  	ldr.w	r0, [sp, #1136]
 8003696: 85 90                        	str	r0, [sp, #532]
 8003698: dd f8 6c 04                  	ldr.w	r0, [sp, #1132]
 800369c: 6c 90                        	str	r0, [sp, #432]
 800369e: dd f8 68 04                  	ldr.w	r0, [sp, #1128]
 80036a2: 7d 90                        	str	r0, [sp, #500]
 80036a4: dd f8 64 04                  	ldr.w	r0, [sp, #1124]
 80036a8: 6d 90                        	str	r0, [sp, #436]
 80036aa: dd f8 60 04                  	ldr.w	r0, [sp, #1120]
 80036ae: 75 90                        	str	r0, [sp, #468]
 80036b0: dd f8 5c 04                  	ldr.w	r0, [sp, #1116]
 80036b4: 71 90                        	str	r0, [sp, #452]
 80036b6: 29 cd                        	ldm	r5, {r0, r3, r5}
 80036b8: cd f8 0f 04                  	str.w	r0, [sp, #1039]
 80036bc: 9c 98                        	ldr	r0, [sp, #624]
 80036be: 8d f8 05 04                  	strb.w	r0, [sp, #1029]
 80036c2: 27 98                        	ldr	r0, [sp, #156]
 80036c4: dd f8 2c 45                  	ldr.w	r4, [sp, #1324]
 80036c8: 8d f8 04 04                  	strb.w	r0, [sp, #1028]
 80036cc: a6 98                        	ldr	r0, [sp, #664]
 80036ce: cd f8 13 34                  	str.w	r3, [sp, #1043]
 80036d2: ad f8 06 04                  	strh.w	r0, [sp, #1030]
 80036d6: dd f8 10 04                  	ldr.w	r0, [sp, #1040]
 80036da: fe 93                        	str	r3, [sp, #1016]
 80036dc: cd f8 f5 03                  	str.w	r0, [sp, #1013]
 80036e0: 4f ea 1b 60                  	lsr.w	r0, r11, #24
 80036e4: 47 e9 12 54                  	strd	r5, r4, [r7, #-72]
 80036e8: 40 ea 0a 20                  	orr.w	r0, r0, r10, lsl #8
 80036ec: 92 9c                        	ldr	r4, [sp, #584]
 80036ee: a7 f1 48 05                  	sub.w	r5, r7, #72
 80036f2: dd f8 58 14                  	ldr.w	r1, [sp, #1112]
 80036f6: 24 90                        	str	r0, [sp, #144]
 80036f8: 4f ea 1b 40                  	lsr.w	r0, r11, #16
 80036fc: 40 ea 0a 40                  	orr.w	r0, r0, r10, lsl #16
 8003700: 26 90                        	str	r0, [sp, #152]
 8003702: e0 b2                        	uxtb	r0, r4
 8003704: dd f8 30 25                  	ldr.w	r2, [sp, #1328]
 8003708: 27 90                        	str	r0, [sp, #156]
 800370a: 88 b2                        	uxth	r0, r1
 800370c: 47 f8 40 2c                  	str	r2, [r7, #-64]
 8003710: 00 0a                        	lsrs	r0, r0, #8
 8003712: dd f8 0c 24                  	ldr.w	r2, [sp, #1036]
 8003716: cd f8 f1 23                  	str.w	r2, [sp, #1009]
 800371a: 89 90                        	str	r0, [sp, #548]
 800371c: dd e9 f8 20                  	ldrd	r2, r0, [sp, #992]
 8003720: 47 f8 3c 4c                  	str	r4, [r7, #-60]
 8003724: a0 90                        	str	r0, [sp, #640]
 8003726: 90 b2                        	uxth	r0, r2
 8003728: cd f8 08 64                  	str.w	r6, [sp, #1032]
 800372c: 00 0a                        	lsrs	r0, r0, #8
 800372e: 15 26                        	movs	r6, #21
 8003730: a1 90                        	str	r0, [sp, #644]
 8003732: 31 cd                        	ldm	r5, {r0, r4, r5}
 8003734: 2b 0c                        	lsrs	r3, r5, #16
 8003736: ff 90                        	str	r0, [sp, #1020]
 8003738: 20 0c                        	lsrs	r0, r4, #16
 800373a: a3 90                        	str	r0, [sp, #652]
 800373c: 88 98                        	ldr	r0, [sp, #544]
 800373e: 8d f8 f0 63                  	strb.w	r6, [sp, #1008]
 8003742: 8e 9e                        	ldr	r6, [sp, #568]
 8003744: 00 0a                        	lsrs	r0, r0, #8
 8003746: dd f8 00 c5                  	ldr.w	r12, [sp, #1280]
 800374a: 2a 90                        	str	r0, [sp, #168]
 800374c: 08 0e                        	lsrs	r0, r1, #24
 800374e: 58 90                        	str	r0, [sp, #352]
 8003750: 08 0c                        	lsrs	r0, r1, #16
 8003752: 6f 90                        	str	r0, [sp, #444]
 8003754: 30 0e                        	lsrs	r0, r6, #24
 8003756: 8d 90                        	str	r0, [sp, #564]
 8003758: 30 0c                        	lsrs	r0, r6, #16
 800375a: 8c 90                        	str	r0, [sp, #560]
 800375c: 30 0a                        	lsrs	r0, r6, #8
 800375e: dd f8 f8 84                  	ldr.w	r8, [sp, #1272]
 8003762: 8b 90                        	str	r0, [sp, #556]
 8003764: 10 0c                        	lsrs	r0, r2, #16
 8003766: a2 90                        	str	r0, [sp, #648]
 8003768: 4f ea 1c 60                  	lsr.w	r0, r12, #24
 800376c: dd f8 f0 94                  	ldr.w	r9, [sp, #1264]
 8003770: 2d 90                        	str	r0, [sp, #180]
 8003772: 4f ea 1c 40                  	lsr.w	r0, r12, #16
 8003776: 2c 90                        	str	r0, [sp, #176]
 8003778: 4f ea 18 60                  	lsr.w	r0, r8, #24
 800377c: 72 91                        	str	r1, [sp, #456]
 800377e: 2f 90                        	str	r0, [sp, #188]
 8003780: 4f ea 18 40                  	lsr.w	r0, r8, #16
 8003784: 76 99                        	ldr	r1, [sp, #472]
 8003786: 2e 90                        	str	r0, [sp, #184]
 8003788: 4f ea 19 60                  	lsr.w	r0, r9, #24
 800378c: 31 90                        	str	r0, [sp, #196]
 800378e: 4f ea 19 40                  	lsr.w	r0, r9, #16
 8003792: 30 90                        	str	r0, [sp, #192]
 8003794: 08 0e                        	lsrs	r0, r1, #24
 8003796: 35 90                        	str	r0, [sp, #212]
 8003798: 08 0c                        	lsrs	r0, r1, #16
 800379a: 77 99                        	ldr	r1, [sp, #476]
 800379c: 33 90                        	str	r0, [sp, #204]
 800379e: 9b 92                        	str	r2, [sp, #620]
 80037a0: 08 0e                        	lsrs	r0, r1, #24
 80037a2: 7f 9a                        	ldr	r2, [sp, #508]
 80037a4: 38 90                        	str	r0, [sp, #224]
 80037a6: 08 0c                        	lsrs	r0, r1, #16
 80037a8: 78 99                        	ldr	r1, [sp, #480]
 80037aa: 37 90                        	str	r0, [sp, #220]
 80037ac: cd f8 94 a0                  	str.w	r10, [sp, #148]
 80037b0: 4f ea 14 2a                  	lsr.w	r10, r4, #8
 80037b4: 08 0e                        	lsrs	r0, r1, #24
 80037b6: cd f8 e4 90                  	str.w	r9, [sp, #228]
 80037ba: 3b 90                        	str	r0, [sp, #236]
 80037bc: 08 0c                        	lsrs	r0, r1, #16
 80037be: 79 99                        	ldr	r1, [sp, #484]
 80037c0: 99 46                        	mov	r9, r3
 80037c2: 3a 90                        	str	r0, [sp, #232]
 80037c4: cd f8 ac b0                  	str.w	r11, [sp, #172]
 80037c8: 08 0e                        	lsrs	r0, r1, #24
 80037ca: cd f8 00 e4                  	str.w	lr, [sp, #1024]
 80037ce: 3d 90                        	str	r0, [sp, #244]
 80037d0: 08 0c                        	lsrs	r0, r1, #16
 80037d2: 7a 99                        	ldr	r1, [sp, #488]
 80037d4: 3c 90                        	str	r0, [sp, #240]
 80037d6: 92 94                        	str	r4, [sp, #584]
 80037d8: 08 0e                        	lsrs	r0, r1, #24
 80037da: cd f8 c8 c0                  	str.w	r12, [sp, #200]
 80037de: 3f 90                        	str	r0, [sp, #252]
 80037e0: 08 0c                        	lsrs	r0, r1, #16
 80037e2: 7b 99                        	ldr	r1, [sp, #492]
 80037e4: 3e 90                        	str	r0, [sp, #248]
 80037e6: cd f8 d8 80                  	str.w	r8, [sp, #216]
 80037ea: 08 0e                        	lsrs	r0, r1, #24
 80037ec: 41 90                        	str	r0, [sp, #260]
 80037ee: 08 0c                        	lsrs	r0, r1, #16
 80037f0: 7c 99                        	ldr	r1, [sp, #496]
 80037f2: 40 90                        	str	r0, [sp, #256]
 80037f4: 08 0e                        	lsrs	r0, r1, #24
 80037f6: 43 90                        	str	r0, [sp, #268]
 80037f8: 08 0c                        	lsrs	r0, r1, #16
 80037fa: 7e 99                        	ldr	r1, [sp, #504]
 80037fc: 42 90                        	str	r0, [sp, #264]
 80037fe: 08 0e                        	lsrs	r0, r1, #24
 8003800: 45 90                        	str	r0, [sp, #276]
 8003802: 08 0c                        	lsrs	r0, r1, #16
 8003804: 44 90                        	str	r0, [sp, #272]
 8003806: 10 0e                        	lsrs	r0, r2, #24
 8003808: 47 90                        	str	r0, [sp, #284]
 800380a: 10 0c                        	lsrs	r0, r2, #16
 800380c: 80 9a                        	ldr	r2, [sp, #512]
 800380e: 46 90                        	str	r0, [sp, #280]
 8003810: 7d 99                        	ldr	r1, [sp, #500]
 8003812: 10 0e                        	lsrs	r0, r2, #24
 8003814: 4a 90                        	str	r0, [sp, #296]
 8003816: 10 0c                        	lsrs	r0, r2, #16
 8003818: 81 9a                        	ldr	r2, [sp, #516]
 800381a: 49 90                        	str	r0, [sp, #292]
 800381c: 10 0e                        	lsrs	r0, r2, #24
 800381e: 4c 90                        	str	r0, [sp, #304]
 8003820: 10 0c                        	lsrs	r0, r2, #16
 8003822: 82 9a                        	ldr	r2, [sp, #520]
 8003824: 4b 90                        	str	r0, [sp, #300]
 8003826: 10 0e                        	lsrs	r0, r2, #24
 8003828: 4e 90                        	str	r0, [sp, #312]
 800382a: 10 0c                        	lsrs	r0, r2, #16
 800382c: 83 9a                        	ldr	r2, [sp, #524]
 800382e: 4d 90                        	str	r0, [sp, #308]
 8003830: 10 0e                        	lsrs	r0, r2, #24
 8003832: 6e 90                        	str	r0, [sp, #440]
 8003834: 10 0c                        	lsrs	r0, r2, #16
 8003836: 84 9a                        	ldr	r2, [sp, #528]
 8003838: 4f 90                        	str	r0, [sp, #316]
 800383a: 10 0e                        	lsrs	r0, r2, #24
 800383c: 51 90                        	str	r0, [sp, #324]
 800383e: 10 0c                        	lsrs	r0, r2, #16
 8003840: 01 f0 ba be                  	b.w	#7540 <$t.24+0x1436>
 8003844: 40 f6 16 40                  	movw	r0, #3094
 8003848: 75 e1                        	b	#746 <$t.18+0x81e>
 800384a: a9 9a                        	ldr	r2, [sp, #676]
;     require_len_at_least!(buffer, 4);
 800384c: 04 2a                        	cmp	r2, #4
 800384e: 80 f0 2c 86                  	bhs.w	#3160 <$t.24+0x328>
 8003852: 01 23                        	movs	r3, #1
 8003854: 9d f8 22 05                  	ldrb.w	r0, [sp, #1314]
 8003858: bd f8 20 15                  	ldrh.w	r1, [sp, #1312]
 800385c: 8d f8 f0 33                  	strb.w	r3, [sp, #1008]
 8003860: ad f8 f1 13                  	strh.w	r1, [sp, #1009]
 8003864: 8d f8 f3 03                  	strb.w	r0, [sp, #1011]
 8003868: 04 20                        	movs	r0, #4
 800386a: 00 f0 9c bc                  	b.w	#2360 <$t.24+0x24>
 800386e: a9 9b                        	ldr	r3, [sp, #676]
;     require_len_at_least!(buffer, 6);
 8003870: 06 2b                        	cmp	r3, #6
 8003872: 80 f0 28 86                  	bhs.w	#3152 <$t.24+0x344>
 8003876: 00 21                        	movs	r1, #0
 8003878: 06 20                        	movs	r0, #6
 800387a: 01 22                        	movs	r2, #1
 800387c: 03 f0 f0 b8                  	b.w	#12768 <$t.24+0x28de>
;     require_len_at_least!(buffer, 5);
 8003880: a9 98                        	ldr	r0, [sp, #676]
 8003882: 05 28                        	cmp	r0, #5
 8003884: 80 f0 3f 86                  	bhs.w	#3198 <$t.24+0x384>
 8003888: 00 21                        	movs	r1, #0
 800388a: 01 20                        	movs	r0, #1
 800388c: a5 91                        	str	r1, [sp, #660]
 800388e: 05 22                        	movs	r2, #5
 8003890: 00 21                        	movs	r1, #0
 8003892: 4f f0 00 08                  	mov.w	r8, #0
 8003896: 9c 91                        	str	r1, [sp, #624]
 8003898: 00 26                        	movs	r6, #0
 800389a: 4f f0 00 0e                  	mov.w	lr, #0
 800389e: 00 24                        	movs	r4, #0
 80038a0: 00 21                        	movs	r1, #0
 80038a2: 99 91                        	str	r1, [sp, #612]
 80038a4: 00 21                        	movs	r1, #0
 80038a6: 98 91                        	str	r1, [sp, #608]
 80038a8: 00 f0 4c be                  	b.w	#3224 <$t.24+0x3c2>
 80038ac: a9 99                        	ldr	r1, [sp, #676]
;     require_len!(buffer, 7);
 80038ae: 07 29                        	cmp	r1, #7
 80038b0: 40 f0 e0 87                  	bne.w	#4032 <$t.24+0x6f2>
;     copy_nonoverlapping(src, dst, count)
 80038b4: bd f8 ad 02                  	ldrh.w	r0, [sp, #685]
 80038b8: 0f 24                        	movs	r4, #15
 80038ba: bd f8 b0 12                  	ldrh.w	r1, [sp, #688]
;             0x0C03 => Ok(Stm32Wb5xEvent::AttExchangeMtuResponse(
 80038be: dd f8 20 25                  	ldr.w	r2, [sp, #1312]
 80038c2: bd f8 24 35                  	ldrh.w	r3, [sp, #1316]
 80038c6: 9d f8 1a 64                  	ldrb.w	r6, [sp, #1050]
 80038ca: bd f8 18 54                  	ldrh.w	r5, [sp, #1048]
 80038ce: 8d f8 f0 43                  	strb.w	r4, [sp, #1008]
 80038d2: ad f8 f1 53                  	strh.w	r5, [sp, #1009]
 80038d6: 8d f8 f3 63                  	strb.w	r6, [sp, #1011]
 80038da: ad f8 f8 03                  	strh.w	r0, [sp, #1016]
 80038de: fd 91                        	str	r1, [sp, #1012]
 80038e0: cd f8 fa 23                  	str.w	r2, [sp, #1018]
 80038e4: ad f8 fe 33                  	strh.w	r3, [sp, #1022]
 80038e8: 02 f0 b4 ba                  	b.w	#9576 <$t.24+0x1cd2>
 80038ec: a9 99                        	ldr	r1, [sp, #676]
;     require_len_at_least!(buffer, 7);
 80038ee: 07 29                        	cmp	r1, #7
 80038f0: 80 f0 c7 87                  	bhs.w	#3982 <$t.24+0x700>
 80038f4: 07 20                        	movs	r0, #7
 80038f6: 00 f0 ed bf                  	b.w	#4058 <$t.24+0x752>
;     require_len_at_least!(buffer, 5);
 80038fa: a9 98                        	ldr	r0, [sp, #676]
 80038fc: 05 28                        	cmp	r0, #5
 80038fe: 80 f0 ee 87                  	bhs.w	#4060 <$t.24+0x75c>
 8003902: 01 20                        	movs	r0, #1
 8003904: 05 21                        	movs	r1, #5
 8003906: 02 f0 31 ba                  	b.w	#9314 <$t.24+0x1bea>
;             0x0C08 => Ok(Stm32Wb5xEvent::AttReadBlobResponse(to_att_read_response(
 800390a: a9 9a                        	ldr	r2, [sp, #676]
 800390c: 0d f5 83 60                  	add.w	r0, sp, #1048
 8003910: 14 f0 e8 fb                  	bl	#83920
;         self
 8003914: dd f8 24 04                  	ldr.w	r0, [sp, #1060]
 8003918: 47 f8 40 0c                  	str	r0, [r7, #-64]
 800391c: dd f8 2c 04                  	ldr.w	r0, [sp, #1068]
 8003920: a9 90                        	str	r0, [sp, #676]
 8003922: dd f8 28 04                  	ldr.w	r0, [sp, #1064]
 8003926: bd f8 46 64                  	ldrh.w	r6, [sp, #1094]
 800392a: 92 90                        	str	r0, [sp, #584]
 800392c: bd f8 40 04                  	ldrh.w	r0, [sp, #1088]
 8003930: dd f8 18 54                  	ldr.w	r5, [sp, #1048]
 8003934: a5 96                        	str	r6, [sp, #660]
 8003936: 9b 90                        	str	r0, [sp, #620]
;             )?)),
 8003938: 01 2d                        	cmp	r5, #1
;         self
 800393a: dd f8 48 04                  	ldr.w	r0, [sp, #1096]
 800393e: 9d f8 13 25                  	ldrb.w	r2, [sp, #1299]
 8003942: bd f8 11 35                  	ldrh.w	r3, [sp, #1297]
 8003946: dd f8 42 c4                  	ldr.w	r12, [sp, #1090]
 800394a: bd f8 3e a4                  	ldrh.w	r10, [sp, #1086]
 800394e: dd f8 34 e4                  	ldr.w	lr, [sp, #1076]
 8003952: dd f8 30 64                  	ldr.w	r6, [sp, #1072]
 8003956: bd f8 38 84                  	ldrh.w	r8, [sp, #1080]
 800395a: dd f8 50 b4                  	ldr.w	r11, [sp, #1104]
 800395e: dd f8 1c 14                  	ldr.w	r1, [sp, #1052]
 8003962: 97 90                        	str	r0, [sp, #604]
 8003964: dd f8 4c 04                  	ldr.w	r0, [sp, #1100]
 8003968: dd f8 20 44                  	ldr.w	r4, [sp, #1056]
 800396c: 47 f8 48 1c                  	str	r1, [r7, #-72]
 8003970: dd f8 3a 14                  	ldr.w	r1, [sp, #1082]
 8003974: a6 90                        	str	r0, [sp, #664]
 8003976: dd f8 54 04                  	ldr.w	r0, [sp, #1108]
 800397a: 47 f8 44 4c                  	str	r4, [r7, #-68]
 800397e: a7 91                        	str	r1, [sp, #668]
;             )?)),
 8003980: 8e 90                        	str	r0, [sp, #568]
 8003982: 41 f0 73 81                  	bne.w	#4838 <$t.24+0xaea>
;         Err(v)
 8003986: 92 99                        	ldr	r1, [sp, #584]
 8003988: fe 91                        	str	r1, [sp, #1016]
 800398a: a7 99                        	ldr	r1, [sp, #668]
 800398c: 57 e9 11 02                  	ldrd	r0, r2, [r7, #-68]
 8003990: cd e9 fc 02                  	strd	r0, r2, [sp, #1008]
 8003994: 32 0c                        	lsrs	r2, r6, #16
 8003996: a9 98                        	ldr	r0, [sp, #676]
 8003998: 97 9c                        	ldr	r4, [sp, #604]
 800399a: ff 90                        	str	r0, [sp, #1020]
;         self
 800399c: 08 0c                        	lsrs	r0, r1, #16
 800399e: 40 ea 0a 40                  	orr.w	r0, r0, r10, lsl #16
 80039a2: a9 90                        	str	r0, [sp, #676]
 80039a4: a0 b2                        	uxth	r0, r4
 80039a6: dd f8 6c 92                  	ldr.w	r9, [sp, #620]
;         Err(v)
 80039aa: 00 0a                        	lsrs	r0, r0, #8
 80039ac: a3 92                        	str	r2, [sp, #652]
 80039ae: a1 90                        	str	r0, [sp, #644]
;         self
 80039b0: 4f ea 18 22                  	lsr.w	r2, r8, #8
;         Err(v)
 80039b4: a5 98                        	ldr	r0, [sp, #660]
;         self
 80039b6: 25 0c                        	lsrs	r5, r4, #16
 80039b8: cd f8 94 82                  	str.w	r8, [sp, #660]
 80039bc: 88 46                        	mov	r8, r1
 80039be: 9b 94                        	str	r4, [sp, #620]
 80039c0: 14 46                        	mov	r4, r2
;         Err(v)
 80039c2: 80 b2                        	uxth	r0, r0
 80039c4: a6 9a                        	ldr	r2, [sp, #664]
 80039c6: 99 90                        	str	r0, [sp, #612]
;             )?)),
 80039c8: 00 0a                        	lsrs	r0, r0, #8
 80039ca: 98 90                        	str	r0, [sp, #608]
;         Err(v)
 80039cc: 4f ea 19 23                  	lsr.w	r3, r9, #8
 80039d0: 4f ea 1e 41                  	lsr.w	r1, lr, #16
 80039d4: cd f8 8c 90                  	str.w	r9, [sp, #140]
 80039d8: 89 46                        	mov	r9, r1
 80039da: 19 46                        	mov	r1, r3
 80039dc: 8e 9b                        	ldr	r3, [sp, #568]
 80039de: 4f ea 16 2a                  	lsr.w	r10, r6, #8
 80039e2: a0 92                        	str	r2, [sp, #640]
 80039e4: a5 9a                        	ldr	r2, [sp, #660]
 80039e6: cd f8 9c c2                  	str.w	r12, [sp, #668]
 80039ea: dc 46                        	mov	r12, r11
 80039ec: a2 95                        	str	r5, [sp, #648]
 80039ee: 75 46                        	mov	r5, lr
 80039f0: 92 96                        	str	r6, [sp, #584]
 80039f2: 91 93                        	str	r3, [sp, #580]
 80039f4: dd f8 a4 e2                  	ldr.w	lr, [sp, #676]
 80039f8: 27 92                        	str	r2, [sp, #156]
 80039fa: 02 f0 b5 ba                  	b.w	#9578 <$t.24+0x1de6>
;     require_len_at_least!(buffer, 6);
 80039fe: a9 98                        	ldr	r0, [sp, #676]
 8003a00: 05 28                        	cmp	r0, #5
 8003a02: 01 f2 a8 82                  	bhi.w	#5456 <$t.24+0xdd4>
 8003a06: 01 20                        	movs	r0, #1
 8003a08: 00 22                        	movs	r2, #0
 8003a0a: 06 21                        	movs	r1, #6
 8003a0c: 02 f0 c9 b9                  	b.w	#9106 <$t.24+0x1c20>
;     require_len_at_least!(buffer, 9);
 8003a10: a9 98                        	ldr	r0, [sp, #676]
 8003a12: 09 28                        	cmp	r0, #9
 8003a14: 81 f0 b9 82                  	bhs.w	#5490 <$t.24+0xe08>
 8003a18: 09 20                        	movs	r0, #9
 8003a1a: 01 f0 7a bc                  	b.w	#6388 <$t.24+0x1190>
 8003a1e: a9 99                        	ldr	r1, [sp, #676]
;     require_len!(buffer, 9);
 8003a20: 09 29                        	cmp	r1, #9
 8003a22: 41 f0 7d 84                  	bne.w	#6394 <$t.24+0x119e>
;         self
 8003a26: dd f8 ad 02                  	ldr.w	r0, [sp, #685]
;     copy_nonoverlapping(src, dst, count)
 8003a2a: bd f8 b2 12                  	ldrh.w	r1, [sp, #690]
;             0x0C14 => Ok(Stm32Wb5xEvent::AttReadPermitRequest(
 8003a2e: 37 f8 48 2c                  	ldrh	r2, [r7, #-72]
 8003a32: cd e9 fd 10                  	strd	r1, r0, [sp, #1012]
 8003a36: 1f 20                        	movs	r0, #31
 8003a38: 17 f8 46 3c                  	ldrb	r3, [r7, #-70]
 8003a3c: 8d f8 f0 03                  	strb.w	r0, [sp, #1008]
 8003a40: ad f8 f1 23                  	strh.w	r2, [sp, #1009]
 8003a44: 8d f8 f3 33                  	strb.w	r3, [sp, #1011]
 8003a48: 02 f0 c6 b9                  	b.w	#9100 <$t.24+0x1c56>
;                 Stm32Wb5xEvent::GattDiscoverOrReadCharacteristicByUuidResponse(to_attribute_value(
 8003a4c: a9 9a                        	ldr	r2, [sp, #676]
 8003a4e: 70 46                        	mov	r0, lr
 8003a50: 74 46                        	mov	r4, lr
 8003a52: 14 f0 93 fb                  	bl	#83750
;         self
 8003a56: 20 1d                        	adds	r0, r4, #4
 8003a58: dd f8 18 c4                  	ldr.w	r12, [sp, #1048]
 8003a5c: 0d f5 a4 61                  	add.w	r1, sp, #1312
 8003a60: 90 e8 7c 00                  	ldm.w	r0, {r2, r3, r4, r5, r6}
;                 )?),
 8003a64: bc f1 01 0f                  	cmp.w	r12, #1
;         self
 8003a68: 7c c1                        	stm	r1!, {r2, r3, r4, r5, r6}
 8003a6a: dd f8 44 04                  	ldr.w	r0, [sp, #1092]
 8003a6e: f9 90                        	str	r0, [sp, #996]
 8003a70: dd f8 0c 05                  	ldr.w	r0, [sp, #1292]
 8003a74: 87 90                        	str	r0, [sp, #540]
 8003a76: dd f8 54 04                  	ldr.w	r0, [sp, #1108]
 8003a7a: 8e 90                        	str	r0, [sp, #568]
 8003a7c: bd f8 3a 04                  	ldrh.w	r0, [sp, #1082]
 8003a80: a6 90                        	str	r0, [sp, #664]
 8003a82: 9d f8 39 04                  	ldrb.w	r0, [sp, #1081]
 8003a86: 9c 90                        	str	r0, [sp, #624]
 8003a88: 9d f8 38 04                  	ldrb.w	r0, [sp, #1080]
 8003a8c: 27 90                        	str	r0, [sp, #156]
 8003a8e: dd f8 48 04                  	ldr.w	r0, [sp, #1096]
 8003a92: dd f8 18 a5                  	ldr.w	r10, [sp, #1304]
 8003a96: dd f8 14 b5                  	ldr.w	r11, [sp, #1300]
 8003a9a: dd f8 34 e4                  	ldr.w	lr, [sp, #1076]
 8003a9e: dd f8 3c 64                  	ldr.w	r6, [sp, #1084]
 8003aa2: dd f8 30 14                  	ldr.w	r1, [sp, #1072]
 8003aa6: 97 90                        	str	r0, [sp, #604]
 8003aa8: dd f8 4c 04                  	ldr.w	r0, [sp, #1100]
 8003aac: dd f8 40 24                  	ldr.w	r2, [sp, #1088]
 8003ab0: 92 91                        	str	r1, [sp, #584]
 8003ab2: dd f8 10 15                  	ldr.w	r1, [sp, #1296]
 8003ab6: a9 90                        	str	r0, [sp, #676]
 8003ab8: dd f8 50 04                  	ldr.w	r0, [sp, #1104]
 8003abc: 88 91                        	str	r1, [sp, #544]
 8003abe: f8 92                        	str	r2, [sp, #992]
;                 )?),
 8003ac0: 1e 90                        	str	r0, [sp, #120]
 8003ac2: 41 f0 34 84                  	bne.w	#6248 <$t.24+0x11ac>
 8003ac6: dd f8 30 55                  	ldr.w	r5, [sp, #1328]
 8003aca: 4f ea 1e 49                  	lsr.w	r9, lr, #16
 8003ace: dd f8 2c 35                  	ldr.w	r3, [sp, #1324]
 8003ad2: ff 95                        	str	r5, [sp, #1020]
 8003ad4: 75 46                        	mov	r5, lr
 8003ad6: fe 93                        	str	r3, [sp, #1016]
 8003ad8: b6 46                        	mov	lr, r6
 8003ada: dd f8 28 25                  	ldr.w	r2, [sp, #1320]
 8003ade: 92 9b                        	ldr	r3, [sp, #584]
 8003ae0: fd 92                        	str	r2, [sp, #1012]
 8003ae2: 97 9a                        	ldr	r2, [sp, #604]
 8003ae4: dd f8 24 05                  	ldr.w	r0, [sp, #1316]
 8003ae8: 4f ea 13 2a                  	lsr.w	r10, r3, #8
 8003aec: dd f8 e2 13                  	ldr.w	r1, [sp, #994]
 8003af0: a7 91                        	str	r1, [sp, #668]
 8003af2: bd f8 e6 13                  	ldrh.w	r1, [sp, #998]
 8003af6: fc 90                        	str	r0, [sp, #1008]
 8003af8: 18 0c                        	lsrs	r0, r3, #16
 8003afa: a3 90                        	str	r0, [sp, #652]
 8003afc: 90 b2                        	uxth	r0, r2
 8003afe: 00 0a                        	lsrs	r0, r0, #8
 8003b00: bd f8 e0 43                  	ldrh.w	r4, [sp, #992]
 8003b04: a1 90                        	str	r0, [sp, #644]
 8003b06: 08 0a                        	lsrs	r0, r1, #8
 8003b08: 98 90                        	str	r0, [sp, #608]
 8003b0a: 10 0c                        	lsrs	r0, r2, #16
 8003b0c: a2 90                        	str	r0, [sp, #648]
 8003b0e: 9b 92                        	str	r2, [sp, #620]
 8003b10: 8e 9b                        	ldr	r3, [sp, #568]
 8003b12: a9 9a                        	ldr	r2, [sp, #676]
 8003b14: 99 91                        	str	r1, [sp, #612]
 8003b16: 21 0a                        	lsrs	r1, r4, #8
 8003b18: 23 94                        	str	r4, [sp, #140]
 8003b1a: dd f8 78 c0                  	ldr.w	r12, [sp, #120]
 8003b1e: 91 93                        	str	r3, [sp, #580]
 8003b20: a0 92                        	str	r2, [sp, #640]
 8003b22: 9c 9c                        	ldr	r4, [sp, #624]
 8003b24: dd f8 98 82                  	ldr.w	r8, [sp, #664]
 8003b28: 02 f0 1e ba                  	b.w	#9276 <$t.24+0x1de6>
 8003b2c: 40 f6 18 40                  	movw	r0, #3096
 8003b30: 01 e0                        	b	#2 <$t.18+0x81e>
 8003b32: 40 f6 17 40                  	movw	r0, #3095
 8003b36: ad f8 fa 03                  	strh.w	r0, [sp, #1018]
 8003b3a: 00 20                        	movs	r0, #0
 8003b3c: 00 21                        	movs	r1, #0
 8003b3e: 8d f8 f8 03                  	strb.w	r0, [sp, #1016]
 8003b42: 12 20                        	movs	r0, #18
 8003b44: 99 91                        	str	r1, [sp, #612]
 8003b46: 8d f8 f0 03                  	strb.w	r0, [sp, #1008]
 8003b4a: fc f7 2d bd                  	b.w	#-13734 <$t.2+0x1ea>
;     require_len!(buffer, 16);
 8003b4e: a9 98                        	ldr	r0, [sp, #676]
 8003b50: 10 28                        	cmp	r0, #16
 8003b52: 41 f0 6c 85                  	bne.w	#6872 <$t.24+0x14ac>
;     require_l2cap_event_data_len!(buffer, 11);
 8003b56: 9d f8 af 32                  	ldrb.w	r3, [sp, #687]
 8003b5a: 0b 2b                        	cmp	r3, #11
 8003b5c: 42 f0 29 81                  	bne.w	#8786 <$t.24+0x1c30>
;     copy_nonoverlapping(src, dst, count)
 8003b60: bd f8 b1 62                  	ldrh.w	r6, [sp, #689]
;     require_l2cap_len!(LittleEndian::read_u16(&buffer[6..]), 8);
 8003b64: 08 2e                        	cmp	r6, #8
 8003b66: 42 f0 96 83                  	bne.w	#10028 <$t.24+0x2114>
;     copy_nonoverlapping(src, dst, count)
 8003b6a: bd f8 b9 82                  	ldrh.w	r8, [sp, #697]
 8003b6e: 00 21                        	movs	r1, #0
 8003b70: 64 22                        	movs	r2, #100
 8003b72: 00 23                        	movs	r3, #0
 8003b74: 40 46                        	mov	r0, r8
 8003b76: 18 f0 c5 fb                  	bl	#100234
 8003b7a: bd f8 b5 92                  	ldrh.w	r9, [sp, #693]
 8003b7e: 06 46                        	mov	r6, r0
;         self.supervision_timeout = Some(timeout);
 8003b80: cd f8 4c 14                  	str.w	r1, [sp, #1100]
 8003b84: 00 21                        	movs	r1, #0
 8003b86: cd f8 48 04                  	str.w	r0, [sp, #1096]
 8003b8a: 4f f4 48 72                  	mov.w	r2, #800
 8003b8e: 48 46                        	mov	r0, r9
 8003b90: 00 23                        	movs	r3, #0
;     copy_nonoverlapping(src, dst, count)
 8003b92: bd f8 b7 42                  	ldrh.w	r4, [sp, #695]
 8003b96: bd f8 b3 a2                  	ldrh.w	r10, [sp, #691]
 8003b9a: 18 f0 b3 fb                  	bl	#100198
 8003b9e: 43 f2 00 6b                  	movw	r11, #13824
;         self.interval = Some((min, max));
 8003ba2: cd f8 34 14                  	str.w	r1, [sp, #1076]
 8003ba6: cc f2 65 4b                  	movt	r11, #50277
 8003baa: 05 46                        	mov	r5, r0
 8003bac: cd f8 30 04                  	str.w	r0, [sp, #1072]
 8003bb0: 50 46                        	mov	r0, r10
 8003bb2: 00 21                        	movs	r1, #0
 8003bb4: 4f f4 48 72                  	mov.w	r2, #800
 8003bb8: 00 23                        	movs	r3, #0
 8003bba: 06 fb 0b f6                  	mul	r6, r6, r11
 8003bbe: 18 f0 a1 fb                  	bl	#100162
 8003bc2: cd f8 24 14                  	str.w	r1, [sp, #1060]
 8003bc6: 00 21                        	movs	r1, #0
 8003bc8: cd f8 20 04                  	str.w	r0, [sp, #1056]
 8003bcc: 05 fb 0b f2                  	mul	r2, r5, r11
 8003bd0: cd f8 1c 14                  	str.w	r1, [sp, #1052]
 8003bd4: 00 fb 0b f0                  	mul	r0, r0, r11
;         self.supervision_timeout = Some(timeout);
 8003bd8: cd f8 44 14                  	str.w	r1, [sp, #1092]
 8003bdc: 41 f2 d0 21                  	movw	r1, #4816
 8003be0: c0 f2 13 01                  	movt	r1, #19
 8003be4: 01 23                        	movs	r3, #1
 8003be6: 0a fb 01 00                  	mla	r0, r10, r1, r0
;         self.interval = Some((min, max));
 8003bea: cd f8 18 34                  	str.w	r3, [sp, #1048]
;         self.supervision_timeout = Some(timeout);
 8003bee: cd f8 40 34                  	str.w	r3, [sp, #1088]
 8003bf2: 09 fb 01 21                  	mla	r1, r9, r1, r2
 8003bf6: 49 f2 80 62                  	movw	r2, #38528
 8003bfa: c0 f2 98 02                  	movt	r2, #152
 8003bfe: 08 fb 02 62                  	mla	r2, r8, r2, r6
;         self.interval = Some((min, max));
 8003c02: cd f8 28 04                  	str.w	r0, [sp, #1064]
 8003c06: 0d f5 a4 60                  	add.w	r0, sp, #1312
 8003c0a: cd f8 38 14                  	str.w	r1, [sp, #1080]
 8003c0e: 0d f5 83 61                  	add.w	r1, sp, #1048
;         self.conn_latency = Some(latency);
 8003c12: ad f8 5a 44                  	strh.w	r4, [sp, #1114]
 8003c16: ad f8 58 34                  	strh.w	r3, [sp, #1112]
;         self.supervision_timeout = Some(timeout);
 8003c1a: cd f8 50 24                  	str.w	r2, [sp, #1104]
;         ConnectionIntervalBuilder::new()
 8003c1e: 11 f0 2a fc                  	bl	#71764
;             Ok(t) => Ok(t),
 8003c22: dd f8 20 05                  	ldr.w	r0, [sp, #1312]
 8003c26: dd f8 24 15                  	ldr.w	r1, [sp, #1316]
 8003c2a: 80 f0 01 00                  	eor	r0, r0, #1
 8003c2e: dd f8 4c 25                  	ldr.w	r2, [sp, #1356]
 8003c32: 08 43                        	orrs	r0, r1
 8003c34: 9d 92                        	str	r2, [sp, #628]
 8003c36: 9d f8 41 05                  	ldrb.w	r0, [sp, #1345]
 8003c3a: a1 90                        	str	r0, [sp, #644]
 8003c3c: 9d f8 40 05                  	ldrb.w	r0, [sp, #1344]
 8003c40: 9b 90                        	str	r0, [sp, #620]
 8003c42: bd f8 3a 05                  	ldrh.w	r0, [sp, #1338]
 8003c46: 9e 90                        	str	r0, [sp, #632]
 8003c48: 9d f8 39 05                  	ldrb.w	r0, [sp, #1337]
 8003c4c: 9a 90                        	str	r0, [sp, #616]
 8003c4e: 9d f8 38 05                  	ldrb.w	r0, [sp, #1336]
 8003c52: a9 90                        	str	r0, [sp, #676]
 8003c54: bd f8 32 05                  	ldrh.w	r0, [sp, #1330]
 8003c58: a6 90                        	str	r0, [sp, #664]
 8003c5a: 9d f8 31 05                  	ldrb.w	r0, [sp, #1329]
 8003c5e: bd f8 4a 25                  	ldrh.w	r2, [sp, #1354]
 8003c62: 9c 90                        	str	r0, [sp, #624]
 8003c64: 9d f8 30 05                  	ldrb.w	r0, [sp, #1328]
 8003c68: 9d f8 49 95                  	ldrb.w	r9, [sp, #1353]
 8003c6c: 9d f8 48 85                  	ldrb.w	r8, [sp, #1352]
 8003c70: dd f8 3c 55                  	ldr.w	r5, [sp, #1340]
 8003c74: dd f8 34 e5                  	ldr.w	lr, [sp, #1332]
 8003c78: dd f8 2c b5                  	ldr.w	r11, [sp, #1324]
 8003c7c: bd f8 2a c5                  	ldrh.w	r12, [sp, #1322]
 8003c80: a4 92                        	str	r2, [sp, #656]
 8003c82: dd f8 44 25                  	ldr.w	r2, [sp, #1348]
 8003c86: 27 90                        	str	r0, [sp, #156]
 8003c88: 9d f8 29 05                  	ldrb.w	r0, [sp, #1321]
 8003c8c: a0 92                        	str	r2, [sp, #640]
 8003c8e: bd f8 42 25                  	ldrh.w	r2, [sp, #1346]
 8003c92: a5 90                        	str	r0, [sp, #660]
 8003c94: 9d f8 28 05                  	ldrb.w	r0, [sp, #1320]
 8003c98: a2 92                        	str	r2, [sp, #648]
 8003c9a: 92 90                        	str	r0, [sp, #584]
 8003c9c: 43 f0 55 84                  	bne.w	#14506 <$t.24+0x33c8>
 8003ca0: a9 99                        	ldr	r1, [sp, #676]
 8003ca2: 12 20                        	movs	r0, #18
 8003ca4: 23 91                        	str	r1, [sp, #140]
 8003ca6: 0c 22                        	movs	r2, #12
 8003ca8: 9d 9c                        	ldr	r4, [sp, #628]
 8003caa: 4f f0 00 0a                  	mov.w	r10, #0
 8003cae: 9a 99                        	ldr	r1, [sp, #616]
 8003cb0: 00 26                        	movs	r6, #0
 8003cb2: 91 94                        	str	r4, [sp, #580]
 8003cb4: 95 91                        	str	r1, [sp, #596]
 8003cb6: 02 f0 f2 ba                  	b.w	#9700 <$t.24+0x211c>
 8003cba: cd e9 9a 49                  	strd	r4, r9, [sp, #616]
 8003cbe: 00 20                        	movs	r0, #0
;         peer_bd_addr: crate::to_bd_addr_type(payload[5], bd_addr)
 8003cc0: 9d f8 b0 a2                  	ldrb.w	r10, [sp, #688]
 8003cc4: a6 90                        	str	r0, [sp, #664]
;         0 => Ok(BdAddrType::Public(addr)),
 8003cc6: ba f1 00 0f                  	cmp.w	r10, #0
 8003cca: 1f 95                        	str	r5, [sp, #124]
 8003ccc: a2 91                        	str	r1, [sp, #648]
 8003cce: a5 96                        	str	r6, [sp, #660]
 8003cd0: 00 f0 c6 80                  	beq.w	#396 <$t.18+0xb48>
 8003cd4: ba f1 01 0f                  	cmp.w	r10, #1
 8003cd8: 40 f0 9c 81                  	bne.w	#824 <$t.20+0xa>
 8003cdc: 01 20                        	movs	r0, #1
 8003cde: c0 e0                        	b	#384 <$t.18+0xb4a>
 8003ce0: 00 21                        	movs	r1, #0
 8003ce2: 4f f0 0b 0c                  	mov.w	r12, #11
 8003ce6: 00 25                        	movs	r5, #0
 8003ce8: 00 20                        	movs	r0, #0
 8003cea: 23 95                        	str	r5, [sp, #140]
 8003cec: 00 23                        	movs	r3, #0
 8003cee: 95 91                        	str	r1, [sp, #596]
 8003cf0: 4f f0 00 09                  	mov.w	r9, #0
 8003cf4: a6 90                        	str	r0, [sp, #664]
 8003cf6: 4f f0 00 0e                  	mov.w	lr, #0
 8003cfa: 4f f0 00 08                  	mov.w	r8, #0
 8003cfe: 00 26                        	movs	r6, #0
 8003d00: 00 22                        	movs	r2, #0
 8003d02: 00 20                        	movs	r0, #0
 8003d04: 00 25                        	movs	r5, #0
 8003d06: 4f f0 00 0b                  	mov.w	r11, #0
;         Err(v)
 8003d0a: a1 90                        	str	r0, [sp, #644]
 8003d0c: a6 98                        	ldr	r0, [sp, #664]
 8003d0e: a9 9c                        	ldr	r4, [sp, #676]
 8003d10: cd e9 9e 62                  	strd	r6, r2, [sp, #632]
 8003d14: 47 e9 10 50                  	strd	r5, r0, [r7, #-64]
 8003d18: a4 98                        	ldr	r0, [sp, #656]
 8003d1a: cd f8 b6 03                  	str.w	r0, [sp, #950]
 8003d1e: a3 98                        	ldr	r0, [sp, #652]
 8003d20: 8d f8 b5 03                  	strb.w	r0, [sp, #949]
 8003d24: a5 98                        	ldr	r0, [sp, #660]
 8003d26: 8d f8 b4 03                  	strb.w	r0, [sp, #948]
 8003d2a: 00 20                        	movs	r0, #0
 8003d2c: cd f8 ae 03                  	str.w	r0, [sp, #942]
 8003d30: 8d f8 ad 03                  	strb.w	r0, [sp, #941]
 8003d34: 4f f6 ff 70                  	movw	r0, #65535
;     .map_err(|e| nb::Error::Other(Error::BLE(e)))
 8003d38: 21 ea 00 00                  	bic.w	r0, r1, r0
;         Err(v)
 8003d3c: a6 90                        	str	r0, [sp, #664]
 8003d3e: 49 ea 0b 00                  	orr.w	r0, r9, r11
 8003d42: a7 91                        	str	r1, [sp, #668]
 8003d44: 18 43                        	orrs	r0, r3
 8003d46: 96 90                        	str	r0, [sp, #600]
 8003d48: 4e ea 03 00                  	orr.w	r0, lr, r3
 8003d4c: 47 f8 44 4c                  	str	r4, [r7, #-68]
 8003d50: 40 ea 08 00                  	orr.w	r0, r0, r8
 8003d54: a4 90                        	str	r0, [sp, #656]
 8003d56: 08 0e                        	lsrs	r0, r1, #24
 8003d58: 07 f8 47 ac                  	strb	r10, [r7, #-71]
;     .map_err(|e| nb::Error::Other(Error::BLE(e)))
 8003d5c: a9 90                        	str	r0, [sp, #676]
 8003d5e: 21 f0 ff 00                  	bic	r0, r1, #255
 8003d62: a5 90                        	str	r0, [sp, #660]
 8003d64: 9c 98                        	ldr	r0, [sp, #624]
;         Err(v)
 8003d66: 07 f8 48 cc                  	strb	r12, [r7, #-72]
 8003d6a: 03 0e                        	lsrs	r3, r0, #24
 8003d6c: a3 93                        	str	r3, [sp, #652]
 8003d6e: 03 0c                        	lsrs	r3, r0, #16
 8003d70: a2 93                        	str	r3, [sp, #648]
 8003d72: 00 0a                        	lsrs	r0, r0, #8
 8003d74: 9d 90                        	str	r0, [sp, #628]
 8003d76: 0d f5 83 6e                  	add.w	lr, sp, #1048
 8003d7a: 01 f0 a8 bd                  	b.w	#6992 <$t.24+0x174c>
 8003d7e: 07 20                        	movs	r0, #7
 8003d80: 0e 92                        	str	r2, [sp, #56]
 8003d82: 14 90                        	str	r0, [sp, #80]
 8003d84: 01 f0 1d bd                  	b.w	#6714 <$t.24+0x1640>
 8003d88: 02 20                        	movs	r0, #2
 8003d8a: 14 90                        	str	r0, [sp, #80]
 8003d8c: 00 23                        	movs	r3, #0
 8003d8e: 2c e0                        	b	#88 <$t.18+0xad2>
 8003d90: 00 20                        	movs	r0, #0
 8003d92: 0e 90                        	str	r0, [sp, #56]
 8003d94: 03 20                        	movs	r0, #3
 8003d96: 5e e0                        	b	#188 <$t.18+0xb3e>
 8003d98: 00 20                        	movs	r0, #0
 8003d9a: 0e 90                        	str	r0, [sp, #56]
 8003d9c: 11 20                        	movs	r0, #17
 8003d9e: 5a e0                        	b	#180 <$t.18+0xb3e>
 8003da0: 00 20                        	movs	r0, #0
 8003da2: a7 90                        	str	r0, [sp, #668]
 8003da4: 02 20                        	movs	r0, #2
 8003da6: 14 90                        	str	r0, [sp, #80]
 8003da8: 21 e0                        	b	#66 <$t.18+0xad6>
 8003daa: 00 20                        	movs	r0, #0
 8003dac: 0e 90                        	str	r0, [sp, #56]
 8003dae: 09 20                        	movs	r0, #9
 8003db0: 51 e0                        	b	#162 <$t.18+0xb3e>
 8003db2: 09 21                        	movs	r1, #9
 8003db4: 00 20                        	movs	r0, #0
 8003db6: 92 91                        	str	r1, [sp, #584]
 8003db8: 01 25                        	movs	r5, #1
 8003dba: 00 21                        	movs	r1, #0
 8003dbc: 01 23                        	movs	r3, #1
 8003dbe: 01 f0 5d bc                  	b.w	#6330 <$t.24+0x14fa>
 8003dc2: 00 20                        	movs	r0, #0
 8003dc4: 0e 90                        	str	r0, [sp, #56]
 8003dc6: 02 20                        	movs	r0, #2
 8003dc8: 45 e0                        	b	#138 <$t.18+0xb3e>
 8003dca: 01 21                        	movs	r1, #1
 8003dcc: 00 20                        	movs	r0, #0
 8003dce: 14 91                        	str	r1, [sp, #80]
 8003dd0: 09 25                        	movs	r5, #9
 8003dd2: 00 22                        	movs	r2, #0
 8003dd4: 01 f0 6d bc                  	b.w	#6362 <$t.24+0x1530>
 8003dd8: 00 23                        	movs	r3, #0
 8003dda: 08 20                        	movs	r0, #8
 8003ddc: 33 e0                        	b	#102 <$t.18+0xb2e>
 8003dde: 02 20                        	movs	r0, #2
 8003de0: 00 23                        	movs	r3, #0
 8003de2: 14 90                        	str	r0, [sp, #80]
 8003de4: 03 24                        	movs	r4, #3
 8003de6: 03 20                        	movs	r0, #3
 8003de8: a6 90                        	str	r0, [sp, #664]
 8003dea: 00 20                        	movs	r0, #0
 8003dec: a7 90                        	str	r0, [sp, #668]
 8003dee: 00 20                        	movs	r0, #0
 8003df0: 00 21                        	movs	r1, #0
 8003df2: 1d 90                        	str	r0, [sp, #116]
 8003df4: 00 20                        	movs	r0, #0
 8003df6: 1c 90                        	str	r0, [sp, #112]
 8003df8: 00 20                        	movs	r0, #0
 8003dfa: 0f 91                        	str	r1, [sp, #60]
 8003dfc: 1b 90                        	str	r0, [sp, #108]
 8003dfe: 00 20                        	movs	r0, #0
 8003e00: a5 90                        	str	r0, [sp, #660]
 8003e02: 00 20                        	movs	r0, #0
 8003e04: 1a 90                        	str	r0, [sp, #104]
 8003e06: 00 20                        	movs	r0, #0
 8003e08: 13 90                        	str	r0, [sp, #76]
 8003e0a: 00 20                        	movs	r0, #0
 8003e0c: 19 90                        	str	r0, [sp, #100]
 8003e0e: 00 20                        	movs	r0, #0
 8003e10: 10 90                        	str	r0, [sp, #64]
 8003e12: 00 20                        	movs	r0, #0
 8003e14: 01 f0 d5 bc                  	b.w	#6570 <$t.24+0x1640>
 8003e18: 09 21                        	movs	r1, #9
 8003e1a: 00 20                        	movs	r0, #0
 8003e1c: 92 91                        	str	r1, [sp, #584]
 8003e1e: 01 25                        	movs	r5, #1
 8003e20: 00 21                        	movs	r1, #0
 8003e22: 01 23                        	movs	r3, #1
 8003e24: 01 f0 5b bc                  	b.w	#6326 <$t.24+0x155c>
 8003e28: 01 20                        	movs	r0, #1
 8003e2a: 41 22                        	movs	r2, #65
 8003e2c: 14 90                        	str	r0, [sp, #80]
 8003e2e: 4f f0 00 0b                  	mov.w	r11, #0
;             return Err($crate::event::Error::BadLength($left.len(), $right));
 8003e32: cd f8 24 25                  	str.w	r2, [sp, #1316]
 8003e36: a9 94                        	str	r4, [sp, #676]
 8003e38: cd f8 20 45                  	str.w	r4, [sp, #1312]
 8003e3c: 00 24                        	movs	r4, #0
 8003e3e: 01 f0 99 bc                  	b.w	#6450 <$t.24+0x15f2>
 8003e42: 00 23                        	movs	r3, #0
 8003e44: 09 20                        	movs	r0, #9
 8003e46: a6 90                        	str	r0, [sp, #664]
 8003e48: 01 20                        	movs	r0, #1
 8003e4a: 14 90                        	str	r0, [sp, #80]
 8003e4c: 01 f0 b9 bc                  	b.w	#6514 <$t.24+0x1640>
 8003e50: 00 20                        	movs	r0, #0
 8003e52: 0e 90                        	str	r0, [sp, #56]
 8003e54: 07 20                        	movs	r0, #7
 8003e56: a6 90                        	str	r0, [sp, #664]
 8003e58: 01 20                        	movs	r0, #1
 8003e5a: 14 90                        	str	r0, [sp, #80]
 8003e5c: 01 f0 b0 bc                  	b.w	#6496 <$t.24+0x163e>
 8003e60: 00 20                        	movs	r0, #0
 8003e62: a3 90                        	str	r0, [sp, #652]
 8003e64: 00 21                        	movs	r1, #0
;     copy_nonoverlapping(src, dst, count)
 8003e66: bd f8 b7 02                  	ldrh.w	r0, [sp, #695]
 8003e6a: 4f f4 48 72                  	mov.w	r2, #800
 8003e6e: 00 23                        	movs	r3, #0
 8003e70: a7 90                        	str	r0, [sp, #668]
 8003e72: 18 f0 47 fa                  	bl	#99470
 8003e76: bd f8 bb b2                  	ldrh.w	r11, [sp, #699]
 8003e7a: 05 46                        	mov	r5, r0
 8003e7c: 89 46                        	mov	r9, r1
 8003e7e: 00 21                        	movs	r1, #0
 8003e80: 64 22                        	movs	r2, #100
 8003e82: 00 23                        	movs	r3, #0
 8003e84: 58 46                        	mov	r0, r11
 8003e86: 18 f0 3d fa                  	bl	#99450
 8003e8a: 43 f2 00 63                  	movw	r3, #13824
 8003e8e: 49 f2 80 64                  	movw	r4, #38528
 8003e92: cc f2 65 43                  	movt	r3, #50277
 8003e96: c0 f2 98 04                  	movt	r4, #152
 8003e9a: 80 fb 03 2a                  	smull	r2, r10, r0, r3
;         self.interval = Some((min, max));
 8003e9e: cd f8 30 54                  	str.w	r5, [sp, #1072]
 8003ea2: a4 95                        	str	r5, [sp, #656]
 8003ea4: cd f8 20 54                  	str.w	r5, [sp, #1056]
 8003ea8: eb fb 04 2a                  	umlal	r2, r10, r11, r4
 8003eac: a7 9c                        	ldr	r4, [sp, #668]
 8003eae: cd f8 34 94                  	str.w	r9, [sp, #1076]
 8003eb2: cd f8 24 94                  	str.w	r9, [sp, #1060]
 8003eb6: 85 fb 03 63                  	smull	r6, r3, r5, r3
 8003eba: 00 25                        	movs	r5, #0
 8003ebc: cd f8 1c 54                  	str.w	r5, [sp, #1052]
;         self.supervision_timeout = Some(timeout);
 8003ec0: cd f8 44 54                  	str.w	r5, [sp, #1092]
 8003ec4: 41 f2 d0 25                  	movw	r5, #4816
 8003ec8: a7 91                        	str	r1, [sp, #668]
 8003eca: c0 f2 13 05                  	movt	r5, #19
 8003ece: cd f8 4c 14                  	str.w	r1, [sp, #1100]
 8003ed2: e4 fb 05 63                  	umlal	r6, r3, r4, r5
 8003ed6: 81 46                        	mov	r9, r0
 8003ed8: cd f8 48 04                  	str.w	r0, [sp, #1096]
 8003edc: 0d f5 a4 60                  	add.w	r0, sp, #1312
 8003ee0: 0d f5 83 61                  	add.w	r1, sp, #1048
 8003ee4: 01 25                        	movs	r5, #1
;     copy_nonoverlapping(src, dst, count)
 8003ee6: bd f8 b9 c2                  	ldrh.w	r12, [sp, #697]
;         self.interval = Some((min, max));
 8003eea: cd f8 18 54                  	str.w	r5, [sp, #1048]
;         self.supervision_timeout = Some(timeout);
 8003eee: cd f8 40 54                  	str.w	r5, [sp, #1088]
;         self.conn_latency = Some(latency);
 8003ef2: ad f8 58 54                  	strh.w	r5, [sp, #1112]
 8003ef6: 35 46                        	mov	r5, r6
 8003ef8: cd f8 8c c0                  	str.w	r12, [sp, #140]
 8003efc: ad f8 5a c4                  	strh.w	r12, [sp, #1114]
;         self.interval = Some((min, max));
 8003f00: cd f8 38 64                  	str.w	r6, [sp, #1080]
 8003f04: cd f8 28 64                  	str.w	r6, [sp, #1064]
 8003f08: 27 92                        	str	r2, [sp, #156]
;         self.supervision_timeout = Some(timeout);
 8003f0a: cd f8 50 24                  	str.w	r2, [sp, #1104]
;         ConnectionIntervalBuilder::new()
 8003f0e: 11 f0 b2 fa                  	bl	#71012
;         self
 8003f12: dd f8 4a 05                  	ldr.w	r0, [sp, #1354]
 8003f16: cd f8 0c 04                  	str.w	r0, [sp, #1036]
 8003f1a: bd f8 4e 05                  	ldrh.w	r0, [sp, #1358]
 8003f1e: ad f8 10 04                  	strh.w	r0, [sp, #1040]
 8003f22: dd f8 20 05                  	ldr.w	r0, [sp, #1312]
 8003f26: dd f8 24 15                  	ldr.w	r1, [sp, #1316]
;             .build()?;
 8003f2a: 80 f0 01 00                  	eor	r0, r0, #1
 8003f2e: 08 43                        	orrs	r0, r1
 8003f30: 48 d1                        	bne	#144 <$t.18+0xcac>
 8003f32: dd f8 2c 05                  	ldr.w	r0, [sp, #1324]
 8003f36: a6 90                        	str	r0, [sp, #664]
 8003f38: dd f8 40 05                  	ldr.w	r0, [sp, #1344]
 8003f3c: dd f8 38 45                  	ldr.w	r4, [sp, #1336]
 8003f40: dd f8 44 a5                  	ldr.w	r10, [sp, #1348]
;         Err(v)
 8003f44: bd f8 10 24                  	ldrh.w	r2, [sp, #1040]
 8003f48: dd f8 3c 35                  	ldr.w	r3, [sp, #1340]
 8003f4c: dd f8 30 65                  	ldr.w	r6, [sp, #1328]
 8003f50: bd f8 48 15                  	ldrh.w	r1, [sp, #1352]
 8003f54: 27 f8 44 2c                  	strh	r2, [r7, #-68]
;             Err(e) => Err(op(e)),
 8003f58: 02 0c                        	lsrs	r2, r0, #16
;         Err(v)
 8003f5a: 9b 91                        	str	r1, [sp, #620]
;             Err(e) => Err(op(e)),
 8003f5c: 42 ea 0a 41                  	orr.w	r1, r2, r10, lsl #16
;         Err(v)
 8003f60: 22 0a                        	lsrs	r2, r4, #8
;             .map_err(Error::BadConnectionInterval)?,
 8003f62: 5f fa 86 fb                  	uxtb.w	r11, r6
;         Err(v)
 8003f66: 42 ea 03 62                  	orr.w	r2, r2, r3, lsl #24
;             .map_err(Error::BadConnectionInterval)?,
 8003f6a: 9c 92                        	str	r2, [sp, #624]
 8003f6c: 26 f0 ff 09                  	bic	r9, r6, #255
 8003f70: 1a 0e                        	lsrs	r2, r3, #24
 8003f72: 1e 0c                        	lsrs	r6, r3, #16
;         Err(v)
 8003f74: 1b 0a                        	lsrs	r3, r3, #8
 8003f76: a0 93                        	str	r3, [sp, #640]
;             Err(e) => Err(op(e)),
 8003f78: 83 b2                        	uxth	r3, r0
 8003f7a: 23 90                        	str	r0, [sp, #140]
;             .map_err(Error::BadConnectionInterval)?,
 8003f7c: 18 0a                        	lsrs	r0, r3, #8
;             Err(e) => Err(op(e)),
 8003f7e: 95 90                        	str	r0, [sp, #596]
 8003f80: 4f ea 1a 40                  	lsr.w	r0, r10, #16
;         Err(v)
 8003f84: 99 90                        	str	r0, [sp, #612]
;             Err(e) => Err(op(e)),
 8003f86: 4f ea 1a 63                  	lsr.w	r3, r10, #24
;         Err(v)
 8003f8a: dd f8 0c 04                  	ldr.w	r0, [sp, #1036]
 8003f8e: 47 f8 48 0c                  	str	r0, [r7, #-72]
 8003f92: dd f8 34 c5                  	ldr.w	r12, [sp, #1332]
;     BadConnectionInterval(ConnectionIntervalError),
 8003f96: c0 b2                        	uxtb	r0, r0
 8003f98: dd f8 28 55                  	ldr.w	r5, [sp, #1320]
 8003f9c: a5 90                        	str	r0, [sp, #660]
;         Err(v)
 8003f9e: 2c f0 ff 08                  	bic	r8, r12, #255
;             .map_err(Error::BadConnectionInterval)?,
 8003fa2: 9b 98                        	ldr	r0, [sp, #620]
 8003fa4: 5f fa 8c fe                  	uxtb.w	lr, r12
 8003fa8: 27 94                        	str	r4, [sp, #156]
 8003faa: 4f f0 0d 0c                  	mov.w	r12, #13
;     BadConnectionInterval(ConnectionIntervalError),
 8003fae: 17 f8 47 4c                  	ldrb	r4, [r7, #-71]
;             Err(e) => Err(op(e)),
 8003fb2: 98 93                        	str	r3, [sp, #608]
 8003fb4: 00 23                        	movs	r3, #0
;             .map_err(Error::BadConnectionInterval)?,
 8003fb6: 00 0a                        	lsrs	r0, r0, #8
;     BadConnectionInterval(ConnectionIntervalError),
 8003fb8: a3 94                        	str	r4, [sp, #652]
 8003fba: 57 f8 46 4c                  	ldr	r4, [r7, #-70]
 8003fbe: a4 94                        	str	r4, [sp, #656]
 8003fc0: fd f7 99 be                  	b.w	#-8910 <$t.14+0x290>
;         central_clock_accuracy: payload[18]
 8003fc4: 9d f8 bd 12                  	ldrb.w	r1, [sp, #701]
 8003fc8: 00 20                        	movs	r0, #0
;             0 => Ok(CentralClockAccuracy::Ppm500),
 8003fca: 90 90                        	str	r0, [sp, #576]
 8003fcc: 07 29                        	cmp	r1, #7
 8003fce: a1 91                        	str	r1, [sp, #644]
 8003fd0: 03 f2 ff 80                  	bhi.w	#12798 <$t.24+0x3050>
 8003fd4: a5 98                        	ldr	r0, [sp, #660]
 8003fd6: a3 99                        	ldr	r1, [sp, #652]
 8003fd8: 17 f8 44 ec                  	ldrb	lr, [r7, #-68]
 8003fdc: 00 06                        	lsls	r0, r0, #24
 8003fde: 40 ea 08 20                  	orr.w	r0, r0, r8, lsl #8
 8003fe2: 17 f8 43 8c                  	ldrb	r8, [r7, #-67]
 8003fe6: 00 eb 01 0c                  	add.w	r12, r0, r1
 8003fea: 27 98                        	ldr	r0, [sp, #156]
 8003fec: 03 0a                        	lsrs	r3, r0, #8
 8003fee: 43 ea 0a 60                  	orr.w	r0, r3, r10, lsl #24
 8003ff2: 9c 90                        	str	r0, [sp, #624]
 8003ff4: 20 f0 7f 43                  	bic	r3, r0, #4278190080
 8003ff8: a1 98                        	ldr	r0, [sp, #644]
 8003ffa: df e8 10 f0                  	tbh	[pc, r0, lsl #1]

08003ffe $d.19:
 8003ffe:	83 18 08 00	.word	0x00081883
 8004002:	79 18 7b 18	.word	0x187b1879
 8004006:	77 18 7f 18	.word	0x187f1877
 800400a:	81 18 7d 18	.word	0x187d1881

0800400e $t.20:
 800400e: 01 20                        	movs	r0, #1
 8004010: 03 f0 77 b8                  	b.w	#12526 <$t.24+0x2f80>
 8004014: 00 21                        	movs	r1, #0
 8004016: 4f f0 0c 0c                  	mov.w	r12, #12
 800401a: 95 91                        	str	r1, [sp, #596]
 800401c: 00 23                        	movs	r3, #0
 800401e: 4f f0 00 09                  	mov.w	r9, #0
 8004022: 4f f0 00 0e                  	mov.w	lr, #0
 8004026: 4f f0 00 08                  	mov.w	r8, #0
 800402a: 00 26                        	movs	r6, #0
 800402c: 00 22                        	movs	r2, #0
 800402e: 00 20                        	movs	r0, #0
 8004030: 4f f0 00 0b                  	mov.w	r11, #0
 8004034: fd f7 dd bf                  	b.w	#-8262 <$t.14+0x58c>
 8004038: 00 20                        	movs	r0, #0
 800403a: 04 24                        	movs	r4, #4
 800403c: 0e 90                        	str	r0, [sp, #56]
 800403e: 02 20                        	movs	r0, #2
 8004040: 14 90                        	str	r0, [sp, #80]
 8004042: 04 20                        	movs	r0, #4
 8004044: a6 90                        	str	r0, [sp, #664]
 8004046: 00 23                        	movs	r3, #0
 8004048: a4 92                        	str	r2, [sp, #656]
 800404a: 01 f0 ba bb                  	b.w	#6004 <$t.24+0x1640>
 800404e: 01 21                        	movs	r1, #1
 8004050: 05 22                        	movs	r2, #5
 8004052: 00 20                        	movs	r0, #0
;         self
 8004054: 42 ea 00 20                  	orr.w	r0, r2, r0, lsl #8
 8004058: 9d f8 22 35                  	ldrb.w	r3, [sp, #1314]
 800405c: bd f8 20 65                  	ldrh.w	r6, [sp, #1312]
;         Err(v)
 8004060: fe 90                        	str	r0, [sp, #1016]
 8004062: a9 98                        	ldr	r0, [sp, #676]
 8004064: 8d f8 f0 13                  	strb.w	r1, [sp, #1008]
 8004068: ad f8 f1 63                  	strh.w	r6, [sp, #1009]
 800406c: 8d f8 f3 33                  	strb.w	r3, [sp, #1011]
 8004070: fd 90                        	str	r0, [sp, #1012]
 8004072: 9a e0                        	b	#308 <$t.24+0x28>
;         0x01 => GapProcedure::LimitedDiscovery,
 8004074: 9d f8 ad 02                  	ldrb.w	r0, [sp, #685]
 8004078: 12 21                        	movs	r1, #18
 800407a: 05 22                        	movs	r2, #5
 800407c: 43 1e                        	subs	r3, r0, #1
 800407e: 3f 2b                        	cmp	r3, #63
 8004080: 00 f2 44 80                  	bhi.w	#136 <$t.22+0x4>
 8004084: 00 26                        	movs	r6, #0
 8004086: a6 96                        	str	r6, [sp, #664]
 8004088: df e8 13 f0                  	tbh	[pc, r3, lsl #1]

0800408c $d.21:
 800408c:	7a 16 47 00	.word	0x0047167a
 8004090:	40 00 62 16	.word	0x16620040
 8004094:	40 00 40 00	.word	0x00400040
 8004098:	40 00 6a 16	.word	0x166a0040
 800409c:	40 00 40 00	.word	0x00400040
 80040a0:	40 00 40 00	.word	0x00400040
 80040a4:	40 00 40 00	.word	0x00400040
 80040a8:	40 00 6c 16	.word	0x166c0040
 80040ac:	40 00 40 00	.word	0x00400040
 80040b0:	40 00 40 00	.word	0x00400040
 80040b4:	40 00 40 00	.word	0x00400040
 80040b8:	40 00 40 00	.word	0x00400040
 80040bc:	40 00 40 00	.word	0x00400040
 80040c0:	40 00 40 00	.word	0x00400040
 80040c4:	40 00 40 00	.word	0x00400040
 80040c8:	40 00 5e 16	.word	0x165e0040
 80040cc:	40 00 40 00	.word	0x00400040
 80040d0:	40 00 40 00	.word	0x00400040
 80040d4:	40 00 40 00	.word	0x00400040
 80040d8:	40 00 40 00	.word	0x00400040
 80040dc:	40 00 40 00	.word	0x00400040
 80040e0:	40 00 40 00	.word	0x00400040
 80040e4:	40 00 40 00	.word	0x00400040
 80040e8:	40 00 40 00	.word	0x00400040
 80040ec:	40 00 40 00	.word	0x00400040
 80040f0:	40 00 40 00	.word	0x00400040
 80040f4:	40 00 40 00	.word	0x00400040
 80040f8:	40 00 40 00	.word	0x00400040
 80040fc:	40 00 40 00	.word	0x00400040
 8004100:	40 00 40 00	.word	0x00400040
 8004104:	40 00 40 00	.word	0x00400040
 8004108:	40 00 60 16	.word	0x16600040

0800410c $t.22:
;         self
 800410c: 42 ea 00 20                  	orr.w	r0, r2, r0, lsl #8
;         Err(v)
 8004110: fe 90                        	str	r0, [sp, #1016]
 8004112: a9 98                        	ldr	r0, [sp, #676]
 8004114: fd 90                        	str	r0, [sp, #1012]
 8004116: 03 f0 1e bb                  	b.w	#13884 <$t.24+0x35d4>
 800411a: 01 20                        	movs	r0, #1
 800411c: 02 f0 2f be                  	b.w	#11358 <$t.24+0x2bfc>
 8004120: 01 20                        	movs	r0, #1
 8004122: 05 22                        	movs	r2, #5
 8004124: 00 21                        	movs	r1, #0
;         self
 8004126: 11 43                        	orrs	r1, r2
;         Err(v)
 8004128: fe 91                        	str	r1, [sp, #1016]
 800412a: a9 99                        	ldr	r1, [sp, #676]
 800412c: fd 91                        	str	r1, [sp, #1012]
 800412e: 8d f8 f0 03                  	strb.w	r0, [sp, #1008]
 8004132: 01 f0 c3 be                  	b.w	#7558 <$t.24+0x1d3a>
 8004136: 00 20                        	movs	r0, #0
 8004138: 01 23                        	movs	r3, #1
 800413a: a1 90                        	str	r0, [sp, #644]
 800413c: 0b 21                        	movs	r1, #11
 800413e: 00 25                        	movs	r5, #0
 8004140: 00 24                        	movs	r4, #0
 8004142: 00 26                        	movs	r6, #0
 8004144: 00 22                        	movs	r2, #0
 8004146: 01 f0 f0 be                  	b.w	#7648 <$t.24+0x1da8>
;     let data_len = buffer[10] as usize;
 800414a: 9d f8 b5 52                  	ldrb.w	r5, [sp, #693]
;     require_len!(buffer, 12 + data_len);
 800414e: 05 f1 0c 02                  	add.w	r2, r5, #12
 8004152: 9a 42                        	cmp	r2, r3
 8004154: 41 f0 ca 85                  	bne.w	#7060 <$t.24+0x1b6a>
;         event: buffer[2].try_into().map_err(|e| {
 8004158: 9d f8 ad 02                  	ldrb.w	r0, [sp, #685]
;             0 => Ok(AdvertisementEvent::Advertisement),
 800415c: 04 28                        	cmp	r0, #4
 800415e: 03 f2 f3 82                  	bhi.w	#13798 <$t.24+0x35c6>
 8004162: bd f8 af 22                  	ldrh.w	r2, [sp, #687]
 8004166: 4f f0 00 09                  	mov.w	r9, #0
 800416a: a7 92                        	str	r2, [sp, #668]
 800416c: a9 9a                        	ldr	r2, [sp, #676]
 800416e: dd f8 b1 b2                  	ldr.w	r11, [sp, #689]
 8004172: 11 44                        	add	r1, r2
 8004174: 11 f8 01 1c                  	ldrb	r1, [r1, #-1]
 8004178: df e8 10 f0                  	tbh	[pc, r0, lsl #1]

0800417c $d.23:
 800417c:	5a 1a 05 00	.word	0x00051a5a
 8004180:	55 1a 58 1a	.word	0x1a581a55
 8004184:	47 1a		.short	0x1a47

08004186 $t.24:
 8004186: 4f f0 01 09                  	mov.w	r9, #1
 800418a: 03 f0 51 ba                  	b.w	#13474 <$t.24+0x34ae>
;         self
 800418e: 9d f8 22 05                  	ldrb.w	r0, [sp, #1314]
 8004192: 01 23                        	movs	r3, #1
 8004194: bd f8 20 15                  	ldrh.w	r1, [sp, #1312]
;         Err(v)
 8004198: 8d f8 f3 03                  	strb.w	r0, [sp, #1011]
 800419c: 08 20                        	movs	r0, #8
 800419e: 8d f8 f0 33                  	strb.w	r3, [sp, #1008]
 80041a2: ad f8 f1 13                  	strh.w	r1, [sp, #1009]
 80041a6: fe 90                        	str	r0, [sp, #1016]
 80041a8: fd 92                        	str	r2, [sp, #1012]
 80041aa: 00 20                        	movs	r0, #0
 80041ac: 4f f0 00 0a                  	mov.w	r10, #0
 80041b0: 99 90                        	str	r0, [sp, #612]
 80041b2: 4f f0 00 09                  	mov.w	r9, #0
 80041b6: 00 20                        	movs	r0, #0
 80041b8: 00 25                        	movs	r5, #0
 80041ba: 98 90                        	str	r0, [sp, #608]
 80041bc: 00 21                        	movs	r1, #0
 80041be: 00 20                        	movs	r0, #0
 80041c0: a3 90                        	str	r0, [sp, #652]
 80041c2: 00 20                        	movs	r0, #0
 80041c4: a1 90                        	str	r0, [sp, #644]
 80041c6: fc f7 f1 b9                  	b.w	#-15390 <$t.2+0x1ee>
 80041ca: 43 ea 02 40                  	orr.w	r0, r3, r2, lsl #16
 80041ce: 2a 90                        	str	r0, [sp, #168]
 80041d0: dd f8 18 05                  	ldr.w	r0, [sp, #1304]
;             0x0C07 => Ok(Stm32Wb5xEvent::AttReadResponse(to_att_read_response(
 80041d4: a7 f1 48 03                  	sub.w	r3, r7, #72
 80041d8: 25 90                        	str	r0, [sp, #148]
 80041da: 13 25                        	movs	r5, #19
 80041dc: 9d f8 17 05                  	ldrb.w	r0, [sp, #1303]
 80041e0: 24 90                        	str	r0, [sp, #144]
 80041e2: 9d f8 16 05                  	ldrb.w	r0, [sp, #1302]
 80041e6: 26 90                        	str	r0, [sp, #152]
 80041e8: bd f8 14 05                  	ldrh.w	r0, [sp, #1300]
 80041ec: 2b 90                        	str	r0, [sp, #172]
 80041ee: 9d f8 10 05                  	ldrb.w	r0, [sp, #1296]
 80041f2: 88 90                        	str	r0, [sp, #544]
 80041f4: dd f8 0c 05                  	ldr.w	r0, [sp, #1292]
 80041f8: 87 90                        	str	r0, [sp, #540]
 80041fa: dd f8 08 05                  	ldr.w	r0, [sp, #1288]
 80041fe: 74 90                        	str	r0, [sp, #464]
 8004200: dd f8 04 05                  	ldr.w	r0, [sp, #1284]
 8004204: 59 90                        	str	r0, [sp, #356]
 8004206: 9d f8 03 05                  	ldrb.w	r0, [sp, #1283]
 800420a: 2d 90                        	str	r0, [sp, #180]
 800420c: 9d f8 02 05                  	ldrb.w	r0, [sp, #1282]
 8004210: 2c 90                        	str	r0, [sp, #176]
 8004212: bd f8 00 05                  	ldrh.w	r0, [sp, #1280]
 8004216: 32 90                        	str	r0, [sp, #200]
 8004218: dd f8 fc 04                  	ldr.w	r0, [sp, #1276]
 800421c: 5a 90                        	str	r0, [sp, #360]
 800421e: 9d f8 fb 04                  	ldrb.w	r0, [sp, #1275]
 8004222: 2f 90                        	str	r0, [sp, #188]
 8004224: 9d f8 fa 04                  	ldrb.w	r0, [sp, #1274]
 8004228: 2e 90                        	str	r0, [sp, #184]
 800422a: bd f8 f8 04                  	ldrh.w	r0, [sp, #1272]
 800422e: 36 90                        	str	r0, [sp, #216]
 8004230: dd f8 f4 04                  	ldr.w	r0, [sp, #1268]
 8004234: 5b 90                        	str	r0, [sp, #364]
 8004236: 9d f8 f3 04                  	ldrb.w	r0, [sp, #1267]
 800423a: 31 90                        	str	r0, [sp, #196]
 800423c: 9d f8 f2 04                  	ldrb.w	r0, [sp, #1266]
 8004240: 30 90                        	str	r0, [sp, #192]
 8004242: bd f8 f0 04                  	ldrh.w	r0, [sp, #1264]
 8004246: 39 90                        	str	r0, [sp, #228]
 8004248: dd f8 ec 04                  	ldr.w	r0, [sp, #1260]
 800424c: 5c 90                        	str	r0, [sp, #368]
 800424e: 9d f8 eb 04                  	ldrb.w	r0, [sp, #1259]
 8004252: 35 90                        	str	r0, [sp, #212]
 8004254: 9d f8 ea 04                  	ldrb.w	r0, [sp, #1258]
 8004258: 33 90                        	str	r0, [sp, #204]
 800425a: bd f8 e8 04                  	ldrh.w	r0, [sp, #1256]
 800425e: 76 90                        	str	r0, [sp, #472]
 8004260: dd f8 e4 04                  	ldr.w	r0, [sp, #1252]
 8004264: 5d 90                        	str	r0, [sp, #372]
 8004266: 9d f8 e3 04                  	ldrb.w	r0, [sp, #1251]
 800426a: 38 90                        	str	r0, [sp, #224]
 800426c: 9d f8 e2 04                  	ldrb.w	r0, [sp, #1250]
 8004270: 37 90                        	str	r0, [sp, #220]
 8004272: bd f8 e0 04                  	ldrh.w	r0, [sp, #1248]
 8004276: 77 90                        	str	r0, [sp, #476]
 8004278: dd f8 dc 04                  	ldr.w	r0, [sp, #1244]
 800427c: 5e 90                        	str	r0, [sp, #376]
 800427e: 9d f8 db 04                  	ldrb.w	r0, [sp, #1243]
 8004282: 3b 90                        	str	r0, [sp, #236]
 8004284: 9d f8 da 04                  	ldrb.w	r0, [sp, #1242]
 8004288: 3a 90                        	str	r0, [sp, #232]
 800428a: bd f8 d8 04                  	ldrh.w	r0, [sp, #1240]
 800428e: 78 90                        	str	r0, [sp, #480]
 8004290: dd f8 d4 04                  	ldr.w	r0, [sp, #1236]
 8004294: 5f 90                        	str	r0, [sp, #380]
 8004296: 9d f8 d3 04                  	ldrb.w	r0, [sp, #1235]
 800429a: 3d 90                        	str	r0, [sp, #244]
 800429c: 9d f8 d2 04                  	ldrb.w	r0, [sp, #1234]
 80042a0: 3c 90                        	str	r0, [sp, #240]
 80042a2: bd f8 d0 04                  	ldrh.w	r0, [sp, #1232]
 80042a6: 79 90                        	str	r0, [sp, #484]
 80042a8: dd f8 cc 04                  	ldr.w	r0, [sp, #1228]
 80042ac: 60 90                        	str	r0, [sp, #384]
 80042ae: 9d f8 cb 04                  	ldrb.w	r0, [sp, #1227]
 80042b2: 3f 90                        	str	r0, [sp, #252]
 80042b4: 9d f8 ca 04                  	ldrb.w	r0, [sp, #1226]
 80042b8: 3e 90                        	str	r0, [sp, #248]
 80042ba: bd f8 c8 04                  	ldrh.w	r0, [sp, #1224]
 80042be: 7a 90                        	str	r0, [sp, #488]
 80042c0: dd f8 c4 04                  	ldr.w	r0, [sp, #1220]
 80042c4: 61 90                        	str	r0, [sp, #388]
 80042c6: 9d f8 c3 04                  	ldrb.w	r0, [sp, #1219]
 80042ca: 41 90                        	str	r0, [sp, #260]
 80042cc: 9d f8 c2 04                  	ldrb.w	r0, [sp, #1218]
 80042d0: 40 90                        	str	r0, [sp, #256]
 80042d2: bd f8 c0 04                  	ldrh.w	r0, [sp, #1216]
 80042d6: 7b 90                        	str	r0, [sp, #492]
 80042d8: dd f8 bc 04                  	ldr.w	r0, [sp, #1212]
 80042dc: 62 90                        	str	r0, [sp, #392]
 80042de: 9d f8 bb 04                  	ldrb.w	r0, [sp, #1211]
 80042e2: 43 90                        	str	r0, [sp, #268]
 80042e4: 9d f8 ba 04                  	ldrb.w	r0, [sp, #1210]
 80042e8: 42 90                        	str	r0, [sp, #264]
 80042ea: bd f8 b8 04                  	ldrh.w	r0, [sp, #1208]
 80042ee: 7c 90                        	str	r0, [sp, #496]
 80042f0: dd f8 b4 04                  	ldr.w	r0, [sp, #1204]
 80042f4: 63 90                        	str	r0, [sp, #396]
 80042f6: 9d f8 b3 04                  	ldrb.w	r0, [sp, #1203]
 80042fa: 45 90                        	str	r0, [sp, #276]
 80042fc: 9d f8 b2 04                  	ldrb.w	r0, [sp, #1202]
 8004300: 44 90                        	str	r0, [sp, #272]
 8004302: bd f8 b0 04                  	ldrh.w	r0, [sp, #1200]
 8004306: 7e 90                        	str	r0, [sp, #504]
 8004308: dd f8 ac 04                  	ldr.w	r0, [sp, #1196]
 800430c: 64 90                        	str	r0, [sp, #400]
 800430e: 9d f8 ab 04                  	ldrb.w	r0, [sp, #1195]
 8004312: 47 90                        	str	r0, [sp, #284]
 8004314: 9d f8 aa 04                  	ldrb.w	r0, [sp, #1194]
 8004318: 46 90                        	str	r0, [sp, #280]
 800431a: bd f8 a8 04                  	ldrh.w	r0, [sp, #1192]
 800431e: 7f 90                        	str	r0, [sp, #508]
 8004320: dd f8 a4 04                  	ldr.w	r0, [sp, #1188]
 8004324: 65 90                        	str	r0, [sp, #404]
 8004326: 9d f8 a3 04                  	ldrb.w	r0, [sp, #1187]
 800432a: 4a 90                        	str	r0, [sp, #296]
 800432c: 9d f8 a2 04                  	ldrb.w	r0, [sp, #1186]
 8004330: 49 90                        	str	r0, [sp, #292]
 8004332: bd f8 a0 04                  	ldrh.w	r0, [sp, #1184]
 8004336: 80 90                        	str	r0, [sp, #512]
 8004338: dd f8 9c 04                  	ldr.w	r0, [sp, #1180]
 800433c: 66 90                        	str	r0, [sp, #408]
 800433e: 9d f8 9b 04                  	ldrb.w	r0, [sp, #1179]
 8004342: 4c 90                        	str	r0, [sp, #304]
 8004344: 9d f8 9a 04                  	ldrb.w	r0, [sp, #1178]
 8004348: 4b 90                        	str	r0, [sp, #300]
 800434a: bd f8 98 04                  	ldrh.w	r0, [sp, #1176]
 800434e: 81 90                        	str	r0, [sp, #516]
 8004350: dd f8 94 04                  	ldr.w	r0, [sp, #1172]
 8004354: 67 90                        	str	r0, [sp, #412]
 8004356: 9d f8 93 04                  	ldrb.w	r0, [sp, #1171]
 800435a: 4e 90                        	str	r0, [sp, #312]
 800435c: 9d f8 92 04                  	ldrb.w	r0, [sp, #1170]
 8004360: 4d 90                        	str	r0, [sp, #308]
 8004362: bd f8 90 04                  	ldrh.w	r0, [sp, #1168]
 8004366: 82 90                        	str	r0, [sp, #520]
 8004368: dd f8 8c 04                  	ldr.w	r0, [sp, #1164]
 800436c: 68 90                        	str	r0, [sp, #416]
 800436e: 9d f8 8b 04                  	ldrb.w	r0, [sp, #1163]
 8004372: 6e 90                        	str	r0, [sp, #440]
 8004374: 9d f8 8a 04                  	ldrb.w	r0, [sp, #1162]
 8004378: 4f 90                        	str	r0, [sp, #316]
 800437a: bd f8 88 04                  	ldrh.w	r0, [sp, #1160]
 800437e: 83 90                        	str	r0, [sp, #524]
 8004380: dd f8 84 04                  	ldr.w	r0, [sp, #1156]
 8004384: 69 90                        	str	r0, [sp, #420]
 8004386: 9d f8 83 04                  	ldrb.w	r0, [sp, #1155]
 800438a: 51 90                        	str	r0, [sp, #324]
 800438c: 9d f8 82 04                  	ldrb.w	r0, [sp, #1154]
 8004390: 50 90                        	str	r0, [sp, #320]
 8004392: bd f8 80 04                  	ldrh.w	r0, [sp, #1152]
 8004396: 84 90                        	str	r0, [sp, #528]
 8004398: dd f8 7c 04                  	ldr.w	r0, [sp, #1148]
 800439c: 6a 90                        	str	r0, [sp, #424]
 800439e: 9d f8 7b 04                  	ldrb.w	r0, [sp, #1147]
 80043a2: 54 90                        	str	r0, [sp, #336]
 80043a4: 9d f8 7a 04                  	ldrb.w	r0, [sp, #1146]
 80043a8: 52 90                        	str	r0, [sp, #328]
 80043aa: bd f8 78 04                  	ldrh.w	r0, [sp, #1144]
 80043ae: 70 90                        	str	r0, [sp, #448]
 80043b0: dd f8 74 04                  	ldr.w	r0, [sp, #1140]
 80043b4: 6b 90                        	str	r0, [sp, #428]
 80043b6: 9d f8 73 04                  	ldrb.w	r0, [sp, #1139]
 80043ba: 55 90                        	str	r0, [sp, #340]
 80043bc: 9d f8 72 04                  	ldrb.w	r0, [sp, #1138]
 80043c0: 53 90                        	str	r0, [sp, #332]
 80043c2: bd f8 70 04                  	ldrh.w	r0, [sp, #1136]
 80043c6: 85 90                        	str	r0, [sp, #532]
 80043c8: dd f8 6c 04                  	ldr.w	r0, [sp, #1132]
 80043cc: 6c 90                        	str	r0, [sp, #432]
 80043ce: 9d f8 6b 04                  	ldrb.w	r0, [sp, #1131]
 80043d2: 56 90                        	str	r0, [sp, #344]
 80043d4: 9d f8 6a 04                  	ldrb.w	r0, [sp, #1130]
 80043d8: 48 90                        	str	r0, [sp, #288]
 80043da: bd f8 68 04                  	ldrh.w	r0, [sp, #1128]
 80043de: 7d 90                        	str	r0, [sp, #500]
 80043e0: dd f8 64 04                  	ldr.w	r0, [sp, #1124]
 80043e4: 6d 90                        	str	r0, [sp, #436]
 80043e6: 9d f8 63 04                  	ldrb.w	r0, [sp, #1123]
 80043ea: 57 90                        	str	r0, [sp, #348]
 80043ec: 9d f8 62 04                  	ldrb.w	r0, [sp, #1122]
 80043f0: 34 90                        	str	r0, [sp, #208]
 80043f2: bd f8 60 04                  	ldrh.w	r0, [sp, #1120]
 80043f6: 75 90                        	str	r0, [sp, #468]
 80043f8: dd f8 5c 04                  	ldr.w	r0, [sp, #1116]
 80043fc: 71 90                        	str	r0, [sp, #452]
 80043fe: 9d f8 5b 04                  	ldrb.w	r0, [sp, #1115]
 8004402: 58 90                        	str	r0, [sp, #352]
 8004404: 9d f8 5a 04                  	ldrb.w	r0, [sp, #1114]
 8004408: 6f 90                        	str	r0, [sp, #444]
 800440a: 0d cb                        	ldm	r3, {r0, r2, r3}
 800440c: cd f8 2b 35                  	str.w	r3, [sp, #1323]
 8004410: cd f8 27 25                  	str.w	r2, [sp, #1319]
 8004414: dd f8 28 25                  	ldr.w	r2, [sp, #1320]
 8004418: cd f8 23 05                  	str.w	r0, [sp, #1315]
 800441c: dd f8 24 05                  	ldr.w	r0, [sp, #1316]
 8004420: dd f8 20 45                  	ldr.w	r4, [sp, #1312]
 8004424: cd f8 f5 03                  	str.w	r0, [sp, #1013]
;         self
 8004428: 4f ea 1c 40                  	lsr.w	r0, r12, #16
 800442c: bd f8 58 94                  	ldrh.w	r9, [sp, #1112]
;             0x0C07 => Ok(Stm32Wb5xEvent::AttReadResponse(to_att_read_response(
 8004430: ff 93                        	str	r3, [sp, #1020]
;         self
 8004432: 40 ea 0e 43                  	orr.w	r3, r0, lr, lsl #16
;             0x0C07 => Ok(Stm32Wb5xEvent::AttReadResponse(to_att_read_response(
 8004436: cd f8 f1 43                  	str.w	r4, [sp, #1009]
;         self
 800443a: 4f ea 1c 20                  	lsr.w	r0, r12, #8
 800443e: 40 ea 0e 64                  	orr.w	r4, r0, lr, lsl #24
 8004442: 30 0c                        	lsrs	r0, r6, #16
;             0x0C07 => Ok(Stm32Wb5xEvent::AttReadResponse(to_att_read_response(
 8004444: 8d f8 f0 53                  	strb.w	r5, [sp, #1008]
 8004448: cd f8 f9 23                  	str.w	r2, [sp, #1017]
 800444c: cd f8 9c c0                  	str.w	r12, [sp, #156]
 8004450: a2 96                        	str	r6, [sp, #648]
 8004452: 00 f0 4e bd                  	b.w	#2716 <$t.24+0xd70>
 8004456: 00 22                        	movs	r2, #0
 8004458: 09 23                        	movs	r3, #9
 800445a: 01 26                        	movs	r6, #1
;         self
 800445c: 43 ea 02 20                  	orr.w	r0, r3, r2, lsl #8
;         Err(v)
 8004460: fe 90                        	str	r0, [sp, #1016]
 8004462: a9 98                        	ldr	r0, [sp, #676]
 8004464: fd 90                        	str	r0, [sp, #1012]
 8004466: 8d f8 f0 63                  	strb.w	r6, [sp, #1008]
 800446a: 01 f0 27 bd                  	b.w	#6734 <$t.24+0x1d3a>
;     let data_len = buffer[4] as usize;
 800446e: 9d f8 af 02                  	ldrb.w	r0, [sp, #687]
;     require_len!(buffer, 5 + data_len);
 8004472: 41 1d                        	adds	r1, r0, #5
 8004474: 99 42                        	cmp	r1, r3
 8004476: 41 f0 3e 84                  	bne.w	#6268 <$t.24+0x1b74>
;     let handle_value_pair_len = buffer[5] as usize;
 800447a: 9d f8 b0 62                  	ldrb.w	r6, [sp, #688]
;     if handle_value_pair_buf.len() % handle_value_pair_len != 0 {
 800447e: 00 2e                        	cmp	r6, #0
 8004480: 08 f0 07 80                  	beq.w	#32782 <$t.42+0x2d8>
 8004484: a9 98                        	ldr	r0, [sp, #676]
 8004486: 81 1f                        	subs	r1, r0, #6
 8004488: b1 fb f6 f0                  	udiv	r0, r1, r6
 800448c: 00 fb 16 10                  	mls	r0, r0, r6, r1
 8004490: 00 28                        	cmp	r0, #0
 8004492: 01 f0 2f 87                  	beq.w	#7774 <$t.24+0x2172>
 8004496: 12 20                        	movs	r0, #18
 8004498: 00 22                        	movs	r2, #0
 800449a: 14 21                        	movs	r1, #20
 800449c: 01 f0 2f bc                  	b.w	#6238 <$t.24+0x1b7c>
 80044a0: 00 20                        	movs	r0, #0
 80044a2: 06 21                        	movs	r1, #6
 80044a4: 01 22                        	movs	r2, #1
 80044a6: 01 f0 03 bd                  	b.w	#6662 <$t.24+0x1d2e>
;         assert!($size <= $src.len());
 80044aa: 02 f0 fe 00                  	and	r0, r2, #254
 80044ae: 02 28                        	cmp	r0, #2
 80044b0: 00 f0 08 82                  	beq.w	#1040 <$t.24+0x742>
;             0x0C02 => Ok(Stm32Wb5xEvent::GattProcedureTimeout(to_conn_handle(
 80044b4: 0d f5 83 62                  	add.w	r2, sp, #1048
;     copy_nonoverlapping(src, dst, count)
 80044b8: bd f8 ad 32                  	ldrh.w	r3, [sp, #685]
;             0x0C02 => Ok(Stm32Wb5xEvent::GattProcedureTimeout(to_conn_handle(
 80044bc: ad f8 f2 33                  	strh.w	r3, [sp, #1010]
 80044c0: 0e 23                        	movs	r3, #14
 80044c2: 01 f0 83 bc                  	b.w	#6406 <$t.24+0x1c4a>
;     let data_len = buffer[4] as usize;
 80044c6: 9d f8 af 02                  	ldrb.w	r0, [sp, #687]
;     require_len!(buffer, 5 + data_len);
 80044ca: 05 30                        	adds	r0, #5
 80044cc: 98 42                        	cmp	r0, r3
 80044ce: 41 f0 1c 84                  	bne.w	#6200 <$t.24+0x1b88>
;         assert!($size <= $src.len());
 80044d2: a9 98                        	ldr	r0, [sp, #676]
 80044d4: 00 f0 fe 00                  	and	r0, r0, #254
 80044d8: 02 28                        	cmp	r0, #2
 80044da: 00 f0 f3 81                  	beq.w	#998 <$t.24+0x742>
;             1 => to_handle_uuid16_pairs(&buffer[6..]).map_err(hci::event::Error::Vendor)?,
 80044de: 9d f8 b0 12                  	ldrb.w	r1, [sp, #688]
;     copy_nonoverlapping(src, dst, count)
 80044e2: bd f8 ad 02                  	ldrh.w	r0, [sp, #685]
;             1 => to_handle_uuid16_pairs(&buffer[6..]).map_err(hci::event::Error::Vendor)?,
 80044e6: 02 29                        	cmp	r1, #2
 80044e8: 9f 90                        	str	r0, [sp, #636]
 80044ea: 02 f0 a2 82                  	beq.w	#9540 <$t.24+0x28b0>
 80044ee: 01 29                        	cmp	r1, #1
 80044f0: 42 f0 b4 82                  	bne.w	#9576 <$t.24+0x28da>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 80044f4: a9 98                        	ldr	r0, [sp, #676]
 80044f6: 84 1f                        	subs	r4, r0, #6
;     if buffer.len() % PAIR_LEN != 0 {
 80044f8: a0 07                        	lsls	r0, r4, #30
 80044fa: 03 f0 6a 81                  	beq.w	#13012 <$t.24+0x3650>
 80044fe: 11 20                        	movs	r0, #17
 8004500: 12 22                        	movs	r2, #18
 8004502: 02 f0 ad ba                  	b.w	#9562 <$t.24+0x28de>
;     let data_len = buffer[4] as usize;
 8004506: 9d f8 af 02                  	ldrb.w	r0, [sp, #687]
;     require_len!(buffer, 5 + data_len);
 800450a: 42 1d                        	adds	r2, r0, #5
 800450c: a9 98                        	ldr	r0, [sp, #676]
 800450e: 82 42                        	cmp	r2, r0
 8004510: 41 f0 00 84                  	bne.w	#6144 <$t.24+0x1b92>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8004514: a9 98                        	ldr	r0, [sp, #676]
 8004516: a0 f1 05 0a                  	sub.w	r10, r0, #5
;     if pair_buffer.len() % PAIR_LEN != 0 {
 800451a: 5f ea 8a 70                  	lsls.w	r0, r10, #30
 800451e: 4f f0 00 00                  	mov.w	r0, #0
 8004522: a5 90                        	str	r0, [sp, #660]
 8004524: 02 f0 52 80                  	beq.w	#8356 <$t.24+0x244a>
 8004528: 12 20                        	movs	r0, #18
 800452a: 13 22                        	movs	r2, #19
 800452c: 00 21                        	movs	r1, #0
 800452e: 4f f0 00 08                  	mov.w	r8, #0
 8004532: 9c 91                        	str	r1, [sp, #624]
 8004534: 00 26                        	movs	r6, #0
 8004536: 4f f0 00 0e                  	mov.w	lr, #0
 800453a: 00 24                        	movs	r4, #0
 800453c: 00 21                        	movs	r1, #0
 800453e: 99 91                        	str	r1, [sp, #612]
 8004540: 00 21                        	movs	r1, #0
 8004542: 98 91                        	str	r1, [sp, #608]
 8004544: 00 25                        	movs	r5, #0
 8004546: 01 f0 f6 bb                  	b.w	#6124 <$t.24+0x1bb4>
;     let data_len = buffer[6] as usize;
 800454a: 9d f8 b1 42                  	ldrb.w	r4, [sp, #689]
;     require_len!(buffer, 7 + data_len);
 800454e: a9 99                        	ldr	r1, [sp, #676]
 8004550: e0 1d                        	adds	r0, r4, #7
 8004552: 88 42                        	cmp	r0, r1
 8004554: 40 f0 8a 81                  	bne.w	#788 <$t.24+0x6ea>
 8004558: 0d f5 83 60                  	add.w	r0, sp, #1048
;     let mut data = [0; MAX_ATTRIBUTE_LEN];
 800455c: f8 21                        	movs	r1, #248
 800455e: 18 f0 51 f8                  	bl	#98466
;         } else if self.end > slice.len() {
 8004562: f9 2c                        	cmp	r4, #249
 8004564: 87 f0 dc 87                  	bhs.w	#32696 <$t.42+0x366>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8004568: a9 98                        	ldr	r0, [sp, #676]
 800456a: c6 1f                        	subs	r6, r0, #7
;                 if !(*left_val == *right_val) {
 800456c: a6 42                        	cmp	r6, r4
 800456e: 47 f0 a3 87                  	bne.w	#32582 <$t.42+0x2fe>
;         intrinsics::offset(self, count)
 8004572: 08 f1 0a 01                  	add.w	r1, r8, #10
 8004576: 0d f5 83 60                  	add.w	r0, sp, #1048
;     copy_nonoverlapping(src, dst, count)
 800457a: 32 46                        	mov	r2, r6
 800457c: 17 f0 cd fe                  	bl	#97690
;         assert!($size <= $src.len());
 8004580: a9 98                        	ldr	r0, [sp, #676]
 8004582: 00 f0 fe 00                  	and	r0, r0, #254
 8004586: 04 28                        	cmp	r0, #4
 8004588: 18 bf                        	it	ne
 800458a: 02 28                        	cmpne	r0, #2
 800458c: 00 f0 9a 81                  	beq.w	#820 <$t.24+0x742>
;     Ok(GattAttributeModified {
 8004590: dd f8 0c 15                  	ldr.w	r1, [sp, #1292]
 8004594: 0d 24                        	movs	r4, #13
 8004596: 25 91                        	str	r1, [sp, #148]
 8004598: 9d f8 0b 15                  	ldrb.w	r1, [sp, #1291]
 800459c: 24 91                        	str	r1, [sp, #144]
 800459e: 9d f8 0a 15                  	ldrb.w	r1, [sp, #1290]
 80045a2: 26 91                        	str	r1, [sp, #152]
 80045a4: bd f8 08 15                  	ldrh.w	r1, [sp, #1288]
 80045a8: 2b 91                        	str	r1, [sp, #172]
 80045aa: 9d f8 04 15                  	ldrb.w	r1, [sp, #1284]
 80045ae: 88 91                        	str	r1, [sp, #544]
 80045b0: dd f8 00 15                  	ldr.w	r1, [sp, #1280]
 80045b4: 87 91                        	str	r1, [sp, #540]
 80045b6: dd f8 fc 14                  	ldr.w	r1, [sp, #1276]
 80045ba: 74 91                        	str	r1, [sp, #464]
 80045bc: dd f8 f8 14                  	ldr.w	r1, [sp, #1272]
 80045c0: 59 91                        	str	r1, [sp, #356]
 80045c2: 9d f8 f7 14                  	ldrb.w	r1, [sp, #1271]
 80045c6: 2d 91                        	str	r1, [sp, #180]
 80045c8: 9d f8 f6 14                  	ldrb.w	r1, [sp, #1270]
 80045cc: 2c 91                        	str	r1, [sp, #176]
 80045ce: bd f8 f4 14                  	ldrh.w	r1, [sp, #1268]
 80045d2: 32 91                        	str	r1, [sp, #200]
 80045d4: dd f8 f0 14                  	ldr.w	r1, [sp, #1264]
 80045d8: 5a 91                        	str	r1, [sp, #360]
 80045da: 9d f8 ef 14                  	ldrb.w	r1, [sp, #1263]
 80045de: 2f 91                        	str	r1, [sp, #188]
 80045e0: 9d f8 ee 14                  	ldrb.w	r1, [sp, #1262]
 80045e4: 2e 91                        	str	r1, [sp, #184]
 80045e6: bd f8 ec 14                  	ldrh.w	r1, [sp, #1260]
 80045ea: 36 91                        	str	r1, [sp, #216]
 80045ec: dd f8 e8 14                  	ldr.w	r1, [sp, #1256]
 80045f0: 5b 91                        	str	r1, [sp, #364]
 80045f2: 9d f8 e7 14                  	ldrb.w	r1, [sp, #1255]
 80045f6: 31 91                        	str	r1, [sp, #196]
 80045f8: 9d f8 e6 14                  	ldrb.w	r1, [sp, #1254]
 80045fc: 30 91                        	str	r1, [sp, #192]
 80045fe: bd f8 e4 14                  	ldrh.w	r1, [sp, #1252]
 8004602: 39 91                        	str	r1, [sp, #228]
 8004604: dd f8 e0 14                  	ldr.w	r1, [sp, #1248]
 8004608: 5c 91                        	str	r1, [sp, #368]
 800460a: 9d f8 df 14                  	ldrb.w	r1, [sp, #1247]
 800460e: 35 91                        	str	r1, [sp, #212]
 8004610: 9d f8 de 14                  	ldrb.w	r1, [sp, #1246]
 8004614: 33 91                        	str	r1, [sp, #204]
 8004616: bd f8 dc 14                  	ldrh.w	r1, [sp, #1244]
 800461a: 76 91                        	str	r1, [sp, #472]
 800461c: dd f8 d8 14                  	ldr.w	r1, [sp, #1240]
 8004620: 5d 91                        	str	r1, [sp, #372]
 8004622: 9d f8 d7 14                  	ldrb.w	r1, [sp, #1239]
 8004626: 38 91                        	str	r1, [sp, #224]
 8004628: 9d f8 d6 14                  	ldrb.w	r1, [sp, #1238]
 800462c: 37 91                        	str	r1, [sp, #220]
 800462e: bd f8 d4 14                  	ldrh.w	r1, [sp, #1236]
 8004632: 77 91                        	str	r1, [sp, #476]
 8004634: dd f8 d0 14                  	ldr.w	r1, [sp, #1232]
 8004638: 5e 91                        	str	r1, [sp, #376]
 800463a: 9d f8 cf 14                  	ldrb.w	r1, [sp, #1231]
 800463e: 3b 91                        	str	r1, [sp, #236]
 8004640: 9d f8 ce 14                  	ldrb.w	r1, [sp, #1230]
 8004644: 3a 91                        	str	r1, [sp, #232]
 8004646: bd f8 cc 14                  	ldrh.w	r1, [sp, #1228]
 800464a: 78 91                        	str	r1, [sp, #480]
 800464c: dd f8 c8 14                  	ldr.w	r1, [sp, #1224]
 8004650: 5f 91                        	str	r1, [sp, #380]
 8004652: 9d f8 c7 14                  	ldrb.w	r1, [sp, #1223]
 8004656: 3d 91                        	str	r1, [sp, #244]
 8004658: 9d f8 c6 14                  	ldrb.w	r1, [sp, #1222]
 800465c: 3c 91                        	str	r1, [sp, #240]
 800465e: bd f8 c4 14                  	ldrh.w	r1, [sp, #1220]
 8004662: 79 91                        	str	r1, [sp, #484]
 8004664: dd f8 c0 14                  	ldr.w	r1, [sp, #1216]
 8004668: 60 91                        	str	r1, [sp, #384]
 800466a: 9d f8 bf 14                  	ldrb.w	r1, [sp, #1215]
 800466e: 3f 91                        	str	r1, [sp, #252]
 8004670: 9d f8 be 14                  	ldrb.w	r1, [sp, #1214]
 8004674: 3e 91                        	str	r1, [sp, #248]
 8004676: bd f8 bc 14                  	ldrh.w	r1, [sp, #1212]
 800467a: 7a 91                        	str	r1, [sp, #488]
 800467c: dd f8 b8 14                  	ldr.w	r1, [sp, #1208]
 8004680: 61 91                        	str	r1, [sp, #388]
 8004682: 9d f8 b7 14                  	ldrb.w	r1, [sp, #1207]
 8004686: 41 91                        	str	r1, [sp, #260]
 8004688: 9d f8 b6 14                  	ldrb.w	r1, [sp, #1206]
 800468c: 40 91                        	str	r1, [sp, #256]
 800468e: bd f8 b4 14                  	ldrh.w	r1, [sp, #1204]
 8004692: 7b 91                        	str	r1, [sp, #492]
 8004694: dd f8 b0 14                  	ldr.w	r1, [sp, #1200]
 8004698: 62 91                        	str	r1, [sp, #392]
 800469a: 9d f8 af 14                  	ldrb.w	r1, [sp, #1199]
 800469e: 43 91                        	str	r1, [sp, #268]
 80046a0: 9d f8 ae 14                  	ldrb.w	r1, [sp, #1198]
 80046a4: 42 91                        	str	r1, [sp, #264]
 80046a6: bd f8 ac 14                  	ldrh.w	r1, [sp, #1196]
 80046aa: 7c 91                        	str	r1, [sp, #496]
 80046ac: dd f8 a8 14                  	ldr.w	r1, [sp, #1192]
 80046b0: 63 91                        	str	r1, [sp, #396]
 80046b2: 9d f8 a7 14                  	ldrb.w	r1, [sp, #1191]
 80046b6: 45 91                        	str	r1, [sp, #276]
 80046b8: 9d f8 a6 14                  	ldrb.w	r1, [sp, #1190]
 80046bc: 44 91                        	str	r1, [sp, #272]
 80046be: bd f8 a4 14                  	ldrh.w	r1, [sp, #1188]
 80046c2: 7e 91                        	str	r1, [sp, #504]
 80046c4: dd f8 a0 14                  	ldr.w	r1, [sp, #1184]
 80046c8: 64 91                        	str	r1, [sp, #400]
 80046ca: 9d f8 9f 14                  	ldrb.w	r1, [sp, #1183]
 80046ce: 47 91                        	str	r1, [sp, #284]
 80046d0: 9d f8 9e 14                  	ldrb.w	r1, [sp, #1182]
 80046d4: 46 91                        	str	r1, [sp, #280]
 80046d6: bd f8 9c 14                  	ldrh.w	r1, [sp, #1180]
 80046da: 7f 91                        	str	r1, [sp, #508]
 80046dc: dd f8 98 14                  	ldr.w	r1, [sp, #1176]
 80046e0: 65 91                        	str	r1, [sp, #404]
 80046e2: 9d f8 97 14                  	ldrb.w	r1, [sp, #1175]
 80046e6: 4a 91                        	str	r1, [sp, #296]
 80046e8: 9d f8 96 14                  	ldrb.w	r1, [sp, #1174]
 80046ec: 49 91                        	str	r1, [sp, #292]
 80046ee: bd f8 94 14                  	ldrh.w	r1, [sp, #1172]
 80046f2: 80 91                        	str	r1, [sp, #512]
 80046f4: dd f8 90 14                  	ldr.w	r1, [sp, #1168]
 80046f8: 66 91                        	str	r1, [sp, #408]
 80046fa: 9d f8 8f 14                  	ldrb.w	r1, [sp, #1167]
 80046fe: 4c 91                        	str	r1, [sp, #304]
 8004700: 9d f8 8e 14                  	ldrb.w	r1, [sp, #1166]
 8004704: 4b 91                        	str	r1, [sp, #300]
 8004706: bd f8 8c 14                  	ldrh.w	r1, [sp, #1164]
 800470a: 81 91                        	str	r1, [sp, #516]
 800470c: dd f8 88 14                  	ldr.w	r1, [sp, #1160]
 8004710: 67 91                        	str	r1, [sp, #412]
 8004712: 9d f8 87 14                  	ldrb.w	r1, [sp, #1159]
 8004716: 4e 91                        	str	r1, [sp, #312]
 8004718: 9d f8 86 14                  	ldrb.w	r1, [sp, #1158]
 800471c: 4d 91                        	str	r1, [sp, #308]
 800471e: bd f8 84 14                  	ldrh.w	r1, [sp, #1156]
 8004722: 82 91                        	str	r1, [sp, #520]
 8004724: dd f8 80 14                  	ldr.w	r1, [sp, #1152]
 8004728: 68 91                        	str	r1, [sp, #416]
 800472a: 9d f8 7f 14                  	ldrb.w	r1, [sp, #1151]
 800472e: 6e 91                        	str	r1, [sp, #440]
 8004730: 9d f8 7e 14                  	ldrb.w	r1, [sp, #1150]
 8004734: 4f 91                        	str	r1, [sp, #316]
 8004736: bd f8 7c 14                  	ldrh.w	r1, [sp, #1148]
 800473a: 83 91                        	str	r1, [sp, #524]
 800473c: dd f8 78 14                  	ldr.w	r1, [sp, #1144]
 8004740: 69 91                        	str	r1, [sp, #420]
 8004742: 9d f8 77 14                  	ldrb.w	r1, [sp, #1143]
 8004746: 51 91                        	str	r1, [sp, #324]
 8004748: 9d f8 76 14                  	ldrb.w	r1, [sp, #1142]
 800474c: 50 91                        	str	r1, [sp, #320]
 800474e: bd f8 74 14                  	ldrh.w	r1, [sp, #1140]
 8004752: 84 91                        	str	r1, [sp, #528]
 8004754: dd f8 70 14                  	ldr.w	r1, [sp, #1136]
 8004758: d9 f8 03 00                  	ldr.w	r0, [r9, #3]
 800475c: 6a 91                        	str	r1, [sp, #424]
 800475e: 9d f8 6f 14                  	ldrb.w	r1, [sp, #1135]
 8004762: a7 90                        	str	r0, [sp, #668]
 8004764: b9 f8 07 00                  	ldrh.w	r0, [r9, #7]
 8004768: 54 91                        	str	r1, [sp, #336]
 800476a: 9d f8 6e 14                  	ldrb.w	r1, [sp, #1134]
 800476e: 99 90                        	str	r0, [sp, #612]
 8004770: 99 f8 dc 00                  	ldrb.w	r0, [r9, #220]
 8004774: 52 91                        	str	r1, [sp, #328]
 8004776: bd f8 6c 14                  	ldrh.w	r1, [sp, #1132]
 800477a: a5 90                        	str	r0, [sp, #660]
 800477c: b9 f8 da 00                  	ldrh.w	r0, [r9, #218]
 8004780: 70 91                        	str	r1, [sp, #448]
 8004782: dd f8 68 14                  	ldr.w	r1, [sp, #1128]
 8004786: a4 90                        	str	r0, [sp, #656]
 8004788: b9 f8 0f 00                  	ldrh.w	r0, [r9, #15]
 800478c: 6b 91                        	str	r1, [sp, #428]
 800478e: 9d f8 67 14                  	ldrb.w	r1, [sp, #1127]
 8004792: a3 90                        	str	r0, [sp, #652]
 8004794: dd f8 18 04                  	ldr.w	r0, [sp, #1048]
 8004798: 55 91                        	str	r1, [sp, #340]
 800479a: 9d f8 66 14                  	ldrb.w	r1, [sp, #1126]
;     copy_nonoverlapping(src, dst, count)
 800479e: dd f8 ad 52                  	ldr.w	r5, [sp, #685]
;     Ok(GattAttributeModified {
 80047a2: a1 90                        	str	r0, [sp, #644]
 80047a4: dd f8 20 04                  	ldr.w	r0, [sp, #1056]
 80047a8: 53 91                        	str	r1, [sp, #332]
 80047aa: bd f8 64 14                  	ldrh.w	r1, [sp, #1124]
 80047ae: a9 90                        	str	r0, [sp, #676]
 80047b0: dd f8 24 04                  	ldr.w	r0, [sp, #1060]
 80047b4: 85 91                        	str	r1, [sp, #532]
 80047b6: dd f8 60 14                  	ldr.w	r1, [sp, #1120]
 80047ba: 6c 91                        	str	r1, [sp, #432]
 80047bc: 9d f8 5f 14                  	ldrb.w	r1, [sp, #1119]
;             0x0C01 => Ok(Stm32Wb5xEvent::GattAttributeModified(
 80047c0: 8d f8 f0 43                  	strb.w	r4, [sp, #1008]
 80047c4: cd e9 fd 65                  	strd	r6, r5, [sp, #1012]
 80047c8: bd f8 20 55                  	ldrh.w	r5, [sp, #1312]
;     Ok(GattAttributeModified {
 80047cc: dd f8 28 e4                  	ldr.w	lr, [sp, #1064]
 80047d0: 56 91                        	str	r1, [sp, #344]
 80047d2: 9d f8 5e 14                  	ldrb.w	r1, [sp, #1118]
;             0x0C01 => Ok(Stm32Wb5xEvent::GattAttributeModified(
 80047d6: ad f8 f1 53                  	strh.w	r5, [sp, #1009]
 80047da: 9d f8 22 55                  	ldrb.w	r5, [sp, #1314]
;     Ok(GattAttributeModified {
 80047de: 48 91                        	str	r1, [sp, #288]
 80047e0: bd f8 5c 14                  	ldrh.w	r1, [sp, #1116]
;             0x0C01 => Ok(Stm32Wb5xEvent::GattAttributeModified(
 80047e4: 8d f8 f3 53                  	strb.w	r5, [sp, #1011]
;         self
 80047e8: 05 0c                        	lsrs	r5, r0, #16
 80047ea: 45 ea 0e 44                  	orr.w	r4, r5, lr, lsl #16
;     Ok(GattAttributeModified {
 80047ee: d9 f8 0b 90                  	ldr.w	r9, [r9, #11]
 80047f2: 7d 91                        	str	r1, [sp, #500]
;         self
 80047f4: 05 0a                        	lsrs	r5, r0, #8
;     Ok(GattAttributeModified {
 80047f6: dd f8 58 14                  	ldr.w	r1, [sp, #1112]
 80047fa: 27 90                        	str	r0, [sp, #156]
;         self
 80047fc: a3 98                        	ldr	r0, [sp, #652]
;     Ok(GattAttributeModified {
 80047fe: 6d 91                        	str	r1, [sp, #436]
 8004800: 9d f8 57 14                  	ldrb.w	r1, [sp, #1111]
 8004804: 57 91                        	str	r1, [sp, #348]
 8004806: 9d f8 56 14                  	ldrb.w	r1, [sp, #1110]
 800480a: 34 91                        	str	r1, [sp, #208]
 800480c: bd f8 54 14                  	ldrh.w	r1, [sp, #1108]
 8004810: a6 94                        	str	r4, [sp, #664]
;         self
 8004812: 45 ea 0e 64                  	orr.w	r4, r5, lr, lsl #24
 8004816: 4f ea 19 45                  	lsr.w	r5, r9, #16
 800481a: 45 ea 00 40                  	orr.w	r0, r5, r0, lsl #16
;     Ok(GattAttributeModified {
 800481e: 75 91                        	str	r1, [sp, #468]
 8004820: dd f8 50 14                  	ldr.w	r1, [sp, #1104]
 8004824: a0 90                        	str	r0, [sp, #640]
 8004826: dd e9 a4 60                  	ldrd	r6, r0, [sp, #656]
 800482a: 71 91                        	str	r1, [sp, #452]
 800482c: 9d f8 4f 14                  	ldrb.w	r1, [sp, #1103]
 8004830: 46 ea 00 40                  	orr.w	r0, r6, r0, lsl #16
 8004834: 58 91                        	str	r1, [sp, #352]
 8004836: 9d f8 4e 14                  	ldrb.w	r1, [sp, #1102]
 800483a: dd f8 40 34                  	ldr.w	r3, [sp, #1088]
 800483e: 6f 91                        	str	r1, [sp, #444]
 8004840: 91 93                        	str	r3, [sp, #580]
;             0x0C01 => Ok(Stm32Wb5xEvent::GattAttributeModified(
 8004842: 2a 90                        	str	r0, [sp, #168]
;     Ok(GattAttributeModified {
 8004844: dd f8 1c a4                  	ldr.w	r10, [sp, #1052]
 8004848: dd f8 3c c4                  	ldr.w	r12, [sp, #1084]
 800484c: dd f8 44 24                  	ldr.w	r2, [sp, #1092]
 8004850: bd f8 34 84                  	ldrh.w	r8, [sp, #1076]
 8004854: bd f8 2c b4                  	ldrh.w	r11, [sp, #1068]
 8004858: bd f8 4c 14                  	ldrh.w	r1, [sp, #1100]
 800485c: dd f8 48 34                  	ldr.w	r3, [sp, #1096]
 8004860: a9 9d                        	ldr	r5, [sp, #676]
;             0x0C01 => Ok(Stm32Wb5xEvent::GattAttributeModified(
 8004862: a1 98                        	ldr	r0, [sp, #644]
 8004864: cd f8 88 92                  	str.w	r9, [sp, #648]
 8004868: 01 f0 ed bc                  	b.w	#6618 <$t.24+0x20c4>
;         Err(v)
 800486c: fe 90                        	str	r0, [sp, #1016]
 800486e: a9 98                        	ldr	r0, [sp, #676]
 8004870: fd 90                        	str	r0, [sp, #1012]
 8004872: 31 e0                        	b	#98 <$t.24+0x756>
 8004874: 07 20                        	movs	r0, #7
 8004876: cd e9 fd 10                  	strd	r1, r0, [sp, #1012]
 800487a: 01 20                        	movs	r0, #1
 800487c: ad f8 f0 03                  	strh.w	r0, [sp, #1008]
 8004880: 93 e4                        	b	#-1754 <$t.24+0x28>
;     let data_len = buffer[6] as usize;
 8004882: 9d f8 b1 62                  	ldrb.w	r6, [sp, #689]
;     require_len!(buffer, 7 + data_len);
 8004886: f0 1d                        	adds	r0, r6, #7
 8004888: 88 42                        	cmp	r0, r1
 800488a: 23 d1                        	bne	#70 <$t.24+0x752>
 800488c: 0d f5 83 60                  	add.w	r0, sp, #1048
;     let mut value_buf = [0; MAX_ATTRIBUTE_VALUE_LEN];
 8004890: f8 21                        	movs	r1, #248
 8004892: 17 f0 b7 fe                  	bl	#97646
;         } else if self.end > slice.len() {
 8004896: f9 2e                        	cmp	r6, #249
 8004898: 87 f0 47 86                  	bhs.w	#31886 <$t.42+0x370>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 800489c: a9 98                        	ldr	r0, [sp, #676]
 800489e: 07 38                        	subs	r0, #7
;                 if !(*left_val == *right_val) {
 80048a0: b0 42                        	cmp	r0, r6
 80048a2: 47 f0 09 86                  	bne.w	#31762 <$t.42+0x2fe>
;         intrinsics::offset(self, count)
 80048a6: 08 f1 0a 01                  	add.w	r1, r8, #10
 80048aa: 0d f5 83 60                  	add.w	r0, sp, #1048
;     copy_nonoverlapping(src, dst, count)
 80048ae: 32 46                        	mov	r2, r6
 80048b0: 17 f0 33 fd                  	bl	#96870
;         assert!($size <= $src.len());
 80048b4: a9 98                        	ldr	r0, [sp, #676]
 80048b6: 00 f0 fe 00                  	and	r0, r0, #254
 80048ba: 04 28                        	cmp	r0, #4
 80048bc: 18 bf                        	it	ne
 80048be: 02 28                        	cmpne	r0, #2
 80048c0: 41 f0 54 83                  	bne.w	#5800 <$t.24+0x1dea>
 80048c4: 4c f6 64 30                  	movw	r0, #52068
 80048c8: 20 21                        	movs	r1, #32
 80048ca: c0 f6 01 00                  	movt	r0, #2049
 80048ce: 11 f0 c3 fd                  	bl	#72582
 80048d2: fe de                        	trap
;         Err(v)
 80048d4: cd e9 fd 10                  	strd	r1, r0, [sp, #1012]
 80048d8: 01 20                        	movs	r0, #1
 80048da: 01 f0 4a ba                  	b.w	#5268 <$t.24+0x1bf0>
;     let data_len = buffer[4] as usize;
 80048de: 9d f8 af 62                  	ldrb.w	r6, [sp, #687]
;     if data_len % 2 != 0 {
 80048e2: f0 07                        	lsls	r0, r6, #31
 80048e4: 41 f0 40 82                  	bne.w	#5248 <$t.24+0x1be6>
 80048e8: 0d f5 83 64                  	add.w	r4, sp, #1048
;     let mut handles = [AttributeHandle(0); MAX_ATTRIBUTE_HANDLE_BUFFER_LEN];
 80048ec: fa 21                        	movs	r1, #250
 80048ee: a9 46                        	mov	r9, r5
 80048f0: 20 46                        	mov	r0, r4
 80048f2: 17 f0 87 fe                  	bl	#97550
;     let handle_len = data_len / 2;
 80048f6: 70 08                        	lsrs	r0, r6, #1
 80048f8: a6 90                        	str	r0, [sp, #664]
 80048fa: 00 20                        	movs	r0, #0
;         if self.n != 0 {
 80048fc: b0 eb 56 0f                  	cmp.w	r0, r6, lsr #1
 8004900: 17 d0                        	beq	#46 <$t.24+0x7b0>
;                     if is_empty!(self) {
 8004902: a9 98                        	ldr	r0, [sp, #676]
 8004904: 08 f1 08 01                  	add.w	r1, r8, #8
 8004908: a6 9a                        	ldr	r2, [sp, #664]
 800490a: 00 26                        	movs	r6, #0
 800490c: 05 38                        	subs	r0, #5
;         if self.start > self.end {
 800490e: a9 9d                        	ldr	r5, [sp, #676]
;                     if is_empty!(self) {
 8004910: 43 08                        	lsrs	r3, r0, #1
 8004912: fa 2e                        	cmp	r6, #250
 8004914: 0d d0                        	beq	#26 <$t.24+0x7b0>
;         if self.start > self.end {
 8004916: 70 1d                        	adds	r0, r6, #5
 8004918: a8 42                        	cmp	r0, r5
 800491a: 07 f2 f8 85                  	bhi.w	#31728 <$t.42+0x354>
;         assert!($size <= $src.len());
 800491e: 00 2b                        	cmp	r3, #0
 8004920: d0 d0                        	beq	#-96 <$t.24+0x742>
;     copy_nonoverlapping(src, dst, count)
 8004922: 88 5b                        	ldrh	r0, [r1, r6]
 8004924: 01 3a                        	subs	r2, #1
;         if self.n != 0 {
 8004926: a3 f1 01 03                  	sub.w	r3, r3, #1
;         *handle = AttributeHandle(LittleEndian::read_u16(&buffer[index..]));
 800492a: a0 53                        	strh	r0, [r4, r6]
;         if self.n != 0 {
 800492c: 06 f1 02 06                  	add.w	r6, r6, #2
 8004930: ef d1                        	bne	#-34 <$t.24+0x790>
;         assert!($size <= $src.len());
 8004932: a9 98                        	ldr	r0, [sp, #676]
 8004934: 00 f0 fe 00                  	and	r0, r0, #254
 8004938: 02 28                        	cmp	r0, #2
 800493a: c3 d0                        	beq	#-122 <$t.24+0x742>
;     Ok(AttReadMultiplePermitRequest {
 800493c: d9 f8 00 00                  	ldr.w	r0, [r9]
 8004940: 20 25                        	movs	r5, #32
 8004942: 27 90                        	str	r0, [sp, #156]
 8004944: d9 f8 12 00                  	ldr.w	r0, [r9, #18]
 8004948: a2 90                        	str	r0, [sp, #648]
 800494a: d9 f8 0a 00                  	ldr.w	r0, [r9, #10]
 800494e: a7 90                        	str	r0, [sp, #668]
 8004950: b9 f8 0e 00                  	ldrh.w	r0, [r9, #14]
 8004954: 99 90                        	str	r0, [sp, #612]
 8004956: b9 f8 16 00                  	ldrh.w	r0, [r9, #22]
 800495a: a4 90                        	str	r0, [sp, #656]
 800495c: dd f8 1a 04                  	ldr.w	r0, [sp, #1050]
 8004960: a5 90                        	str	r0, [sp, #660]
 8004962: dd f8 22 04                  	ldr.w	r0, [sp, #1058]
 8004966: a9 90                        	str	r0, [sp, #676]
 8004968: dd f8 0e 05                  	ldr.w	r0, [sp, #1294]
 800496c: 25 90                        	str	r0, [sp, #148]
 800496e: 9d f8 0d 05                  	ldrb.w	r0, [sp, #1293]
 8004972: 24 90                        	str	r0, [sp, #144]
 8004974: 9d f8 0c 05                  	ldrb.w	r0, [sp, #1292]
 8004978: 26 90                        	str	r0, [sp, #152]
 800497a: bd f8 0a 05                  	ldrh.w	r0, [sp, #1290]
 800497e: 2b 90                        	str	r0, [sp, #172]
 8004980: 9d f8 06 05                  	ldrb.w	r0, [sp, #1286]
 8004984: 88 90                        	str	r0, [sp, #544]
 8004986: dd f8 02 05                  	ldr.w	r0, [sp, #1282]
 800498a: 87 90                        	str	r0, [sp, #540]
 800498c: dd f8 fe 04                  	ldr.w	r0, [sp, #1278]
 8004990: 74 90                        	str	r0, [sp, #464]
 8004992: dd f8 fa 04                  	ldr.w	r0, [sp, #1274]
 8004996: 59 90                        	str	r0, [sp, #356]
 8004998: 9d f8 f9 04                  	ldrb.w	r0, [sp, #1273]
 800499c: 2d 90                        	str	r0, [sp, #180]
 800499e: 9d f8 f8 04                  	ldrb.w	r0, [sp, #1272]
 80049a2: 2c 90                        	str	r0, [sp, #176]
 80049a4: bd f8 f6 04                  	ldrh.w	r0, [sp, #1270]
 80049a8: 32 90                        	str	r0, [sp, #200]
 80049aa: dd f8 f2 04                  	ldr.w	r0, [sp, #1266]
 80049ae: 5a 90                        	str	r0, [sp, #360]
 80049b0: 9d f8 f1 04                  	ldrb.w	r0, [sp, #1265]
 80049b4: 2f 90                        	str	r0, [sp, #188]
 80049b6: 9d f8 f0 04                  	ldrb.w	r0, [sp, #1264]
 80049ba: 2e 90                        	str	r0, [sp, #184]
 80049bc: bd f8 ee 04                  	ldrh.w	r0, [sp, #1262]
 80049c0: 36 90                        	str	r0, [sp, #216]
 80049c2: dd f8 ea 04                  	ldr.w	r0, [sp, #1258]
 80049c6: 5b 90                        	str	r0, [sp, #364]
 80049c8: 9d f8 e9 04                  	ldrb.w	r0, [sp, #1257]
 80049cc: 31 90                        	str	r0, [sp, #196]
 80049ce: 9d f8 e8 04                  	ldrb.w	r0, [sp, #1256]
 80049d2: 30 90                        	str	r0, [sp, #192]
 80049d4: bd f8 e6 04                  	ldrh.w	r0, [sp, #1254]
 80049d8: 39 90                        	str	r0, [sp, #228]
 80049da: dd f8 e2 04                  	ldr.w	r0, [sp, #1250]
 80049de: 5c 90                        	str	r0, [sp, #368]
 80049e0: 9d f8 e1 04                  	ldrb.w	r0, [sp, #1249]
 80049e4: 35 90                        	str	r0, [sp, #212]
 80049e6: 9d f8 e0 04                  	ldrb.w	r0, [sp, #1248]
 80049ea: 33 90                        	str	r0, [sp, #204]
 80049ec: bd f8 de 04                  	ldrh.w	r0, [sp, #1246]
 80049f0: 76 90                        	str	r0, [sp, #472]
 80049f2: dd f8 da 04                  	ldr.w	r0, [sp, #1242]
 80049f6: 5d 90                        	str	r0, [sp, #372]
 80049f8: 9d f8 d9 04                  	ldrb.w	r0, [sp, #1241]
 80049fc: 38 90                        	str	r0, [sp, #224]
 80049fe: 9d f8 d8 04                  	ldrb.w	r0, [sp, #1240]
 8004a02: 37 90                        	str	r0, [sp, #220]
 8004a04: bd f8 d6 04                  	ldrh.w	r0, [sp, #1238]
 8004a08: 77 90                        	str	r0, [sp, #476]
 8004a0a: dd f8 d2 04                  	ldr.w	r0, [sp, #1234]
 8004a0e: 5e 90                        	str	r0, [sp, #376]
 8004a10: 9d f8 d1 04                  	ldrb.w	r0, [sp, #1233]
 8004a14: 3b 90                        	str	r0, [sp, #236]
 8004a16: 9d f8 d0 04                  	ldrb.w	r0, [sp, #1232]
 8004a1a: 3a 90                        	str	r0, [sp, #232]
 8004a1c: bd f8 ce 04                  	ldrh.w	r0, [sp, #1230]
 8004a20: 78 90                        	str	r0, [sp, #480]
 8004a22: dd f8 ca 04                  	ldr.w	r0, [sp, #1226]
 8004a26: 5f 90                        	str	r0, [sp, #380]
 8004a28: 9d f8 c9 04                  	ldrb.w	r0, [sp, #1225]
 8004a2c: 3d 90                        	str	r0, [sp, #244]
 8004a2e: 9d f8 c8 04                  	ldrb.w	r0, [sp, #1224]
 8004a32: 3c 90                        	str	r0, [sp, #240]
 8004a34: bd f8 c6 04                  	ldrh.w	r0, [sp, #1222]
 8004a38: 79 90                        	str	r0, [sp, #484]
 8004a3a: dd f8 c2 04                  	ldr.w	r0, [sp, #1218]
 8004a3e: 60 90                        	str	r0, [sp, #384]
 8004a40: 9d f8 c1 04                  	ldrb.w	r0, [sp, #1217]
 8004a44: 3f 90                        	str	r0, [sp, #252]
 8004a46: 9d f8 c0 04                  	ldrb.w	r0, [sp, #1216]
 8004a4a: 3e 90                        	str	r0, [sp, #248]
 8004a4c: bd f8 be 04                  	ldrh.w	r0, [sp, #1214]
 8004a50: 7a 90                        	str	r0, [sp, #488]
 8004a52: dd f8 ba 04                  	ldr.w	r0, [sp, #1210]
 8004a56: 61 90                        	str	r0, [sp, #388]
 8004a58: 9d f8 b9 04                  	ldrb.w	r0, [sp, #1209]
 8004a5c: 41 90                        	str	r0, [sp, #260]
 8004a5e: 9d f8 b8 04                  	ldrb.w	r0, [sp, #1208]
 8004a62: 40 90                        	str	r0, [sp, #256]
 8004a64: bd f8 b6 04                  	ldrh.w	r0, [sp, #1206]
 8004a68: 7b 90                        	str	r0, [sp, #492]
 8004a6a: dd f8 b2 04                  	ldr.w	r0, [sp, #1202]
 8004a6e: 62 90                        	str	r0, [sp, #392]
 8004a70: 9d f8 b1 04                  	ldrb.w	r0, [sp, #1201]
 8004a74: 43 90                        	str	r0, [sp, #268]
 8004a76: 9d f8 b0 04                  	ldrb.w	r0, [sp, #1200]
 8004a7a: 42 90                        	str	r0, [sp, #264]
 8004a7c: bd f8 ae 04                  	ldrh.w	r0, [sp, #1198]
 8004a80: 7c 90                        	str	r0, [sp, #496]
 8004a82: dd f8 aa 04                  	ldr.w	r0, [sp, #1194]
 8004a86: 63 90                        	str	r0, [sp, #396]
 8004a88: 9d f8 a9 04                  	ldrb.w	r0, [sp, #1193]
 8004a8c: 45 90                        	str	r0, [sp, #276]
 8004a8e: 9d f8 a8 04                  	ldrb.w	r0, [sp, #1192]
 8004a92: 44 90                        	str	r0, [sp, #272]
 8004a94: bd f8 a6 04                  	ldrh.w	r0, [sp, #1190]
 8004a98: 7e 90                        	str	r0, [sp, #504]
 8004a9a: dd f8 a2 04                  	ldr.w	r0, [sp, #1186]
 8004a9e: 64 90                        	str	r0, [sp, #400]
 8004aa0: 9d f8 a1 04                  	ldrb.w	r0, [sp, #1185]
 8004aa4: 47 90                        	str	r0, [sp, #284]
 8004aa6: 9d f8 a0 04                  	ldrb.w	r0, [sp, #1184]
 8004aaa: 46 90                        	str	r0, [sp, #280]
 8004aac: bd f8 9e 04                  	ldrh.w	r0, [sp, #1182]
 8004ab0: 7f 90                        	str	r0, [sp, #508]
 8004ab2: dd f8 9a 04                  	ldr.w	r0, [sp, #1178]
 8004ab6: 65 90                        	str	r0, [sp, #404]
 8004ab8: 9d f8 99 04                  	ldrb.w	r0, [sp, #1177]
 8004abc: 4a 90                        	str	r0, [sp, #296]
 8004abe: 9d f8 98 04                  	ldrb.w	r0, [sp, #1176]
 8004ac2: 49 90                        	str	r0, [sp, #292]
 8004ac4: bd f8 96 04                  	ldrh.w	r0, [sp, #1174]
 8004ac8: 80 90                        	str	r0, [sp, #512]
 8004aca: dd f8 92 04                  	ldr.w	r0, [sp, #1170]
 8004ace: 66 90                        	str	r0, [sp, #408]
 8004ad0: 9d f8 91 04                  	ldrb.w	r0, [sp, #1169]
 8004ad4: 4c 90                        	str	r0, [sp, #304]
 8004ad6: 9d f8 90 04                  	ldrb.w	r0, [sp, #1168]
 8004ada: 4b 90                        	str	r0, [sp, #300]
 8004adc: bd f8 8e 04                  	ldrh.w	r0, [sp, #1166]
 8004ae0: 81 90                        	str	r0, [sp, #516]
 8004ae2: dd f8 8a 04                  	ldr.w	r0, [sp, #1162]
 8004ae6: 67 90                        	str	r0, [sp, #412]
 8004ae8: 9d f8 89 04                  	ldrb.w	r0, [sp, #1161]
 8004aec: 4e 90                        	str	r0, [sp, #312]
 8004aee: 9d f8 88 04                  	ldrb.w	r0, [sp, #1160]
 8004af2: 4d 90                        	str	r0, [sp, #308]
 8004af4: bd f8 86 04                  	ldrh.w	r0, [sp, #1158]
 8004af8: 82 90                        	str	r0, [sp, #520]
 8004afa: dd f8 82 04                  	ldr.w	r0, [sp, #1154]
 8004afe: 68 90                        	str	r0, [sp, #416]
 8004b00: 9d f8 81 04                  	ldrb.w	r0, [sp, #1153]
 8004b04: 6e 90                        	str	r0, [sp, #440]
 8004b06: 9d f8 80 04                  	ldrb.w	r0, [sp, #1152]
 8004b0a: 4f 90                        	str	r0, [sp, #316]
 8004b0c: bd f8 7e 04                  	ldrh.w	r0, [sp, #1150]
 8004b10: 83 90                        	str	r0, [sp, #524]
 8004b12: dd f8 7a 04                  	ldr.w	r0, [sp, #1146]
 8004b16: 69 90                        	str	r0, [sp, #420]
 8004b18: 9d f8 79 04                  	ldrb.w	r0, [sp, #1145]
 8004b1c: 51 90                        	str	r0, [sp, #324]
 8004b1e: 9d f8 78 04                  	ldrb.w	r0, [sp, #1144]
 8004b22: 50 90                        	str	r0, [sp, #320]
 8004b24: bd f8 76 04                  	ldrh.w	r0, [sp, #1142]
 8004b28: 84 90                        	str	r0, [sp, #528]
 8004b2a: dd f8 72 04                  	ldr.w	r0, [sp, #1138]
 8004b2e: 6a 90                        	str	r0, [sp, #424]
 8004b30: 9d f8 71 04                  	ldrb.w	r0, [sp, #1137]
 8004b34: 54 90                        	str	r0, [sp, #336]
 8004b36: 9d f8 70 04                  	ldrb.w	r0, [sp, #1136]
 8004b3a: 52 90                        	str	r0, [sp, #328]
 8004b3c: bd f8 6e 04                  	ldrh.w	r0, [sp, #1134]
 8004b40: 70 90                        	str	r0, [sp, #448]
 8004b42: dd f8 6a 04                  	ldr.w	r0, [sp, #1130]
 8004b46: 6b 90                        	str	r0, [sp, #428]
 8004b48: 9d f8 69 04                  	ldrb.w	r0, [sp, #1129]
 8004b4c: 55 90                        	str	r0, [sp, #340]
 8004b4e: 9d f8 68 04                  	ldrb.w	r0, [sp, #1128]
 8004b52: 53 90                        	str	r0, [sp, #332]
 8004b54: bd f8 66 04                  	ldrh.w	r0, [sp, #1126]
 8004b58: 85 90                        	str	r0, [sp, #532]
 8004b5a: dd f8 62 04                  	ldr.w	r0, [sp, #1122]
 8004b5e: 6c 90                        	str	r0, [sp, #432]
 8004b60: 9d f8 61 04                  	ldrb.w	r0, [sp, #1121]
 8004b64: 56 90                        	str	r0, [sp, #344]
 8004b66: 9d f8 60 04                  	ldrb.w	r0, [sp, #1120]
 8004b6a: 48 90                        	str	r0, [sp, #288]
 8004b6c: bd f8 5e 04                  	ldrh.w	r0, [sp, #1118]
 8004b70: 7d 90                        	str	r0, [sp, #500]
 8004b72: dd f8 5a 04                  	ldr.w	r0, [sp, #1114]
 8004b76: 6d 90                        	str	r0, [sp, #436]
 8004b78: 9d f8 59 04                  	ldrb.w	r0, [sp, #1113]
 8004b7c: 57 90                        	str	r0, [sp, #348]
 8004b7e: 9d f8 58 04                  	ldrb.w	r0, [sp, #1112]
 8004b82: 34 90                        	str	r0, [sp, #208]
 8004b84: bd f8 56 04                  	ldrh.w	r0, [sp, #1110]
 8004b88: 75 90                        	str	r0, [sp, #468]
 8004b8a: dd f8 52 04                  	ldr.w	r0, [sp, #1106]
 8004b8e: 71 90                        	str	r0, [sp, #452]
 8004b90: 9d f8 51 04                  	ldrb.w	r0, [sp, #1105]
 8004b94: 58 90                        	str	r0, [sp, #352]
 8004b96: 9d f8 50 04                  	ldrb.w	r0, [sp, #1104]
 8004b9a: 6f 90                        	str	r0, [sp, #444]
 8004b9c: dd f8 42 04                  	ldr.w	r0, [sp, #1090]
 8004ba0: 91 90                        	str	r0, [sp, #580]
 8004ba2: bd f8 18 04                  	ldrh.w	r0, [sp, #1048]
;             0x0C15 => Ok(Stm32Wb5xEvent::AttReadMultiplePermitRequest(
 8004ba6: ad f8 fa 03                  	strh.w	r0, [sp, #1018]
 8004baa: a6 98                        	ldr	r0, [sp, #664]
;     Ok(AttReadMultiplePermitRequest {
 8004bac: 9d f8 09 25                  	ldrb.w	r2, [sp, #1289]
;             0x0C15 => Ok(Stm32Wb5xEvent::AttReadMultiplePermitRequest(
 8004bb0: fd 90                        	str	r0, [sp, #1012]
 8004bb2: bd f8 20 05                  	ldrh.w	r0, [sp, #1312]
;     Ok(AttReadMultiplePermitRequest {
 8004bb6: bd f8 07 65                  	ldrh.w	r6, [sp, #1287]
;             0x0C15 => Ok(Stm32Wb5xEvent::AttReadMultiplePermitRequest(
 8004bba: ad f8 f1 03                  	strh.w	r0, [sp, #1009]
 8004bbe: 9d f8 22 05                  	ldrb.w	r0, [sp, #1314]
 8004bc2: 8d f8 f3 03                  	strb.w	r0, [sp, #1011]
;     Ok(AttReadMultiplePermitRequest {
 8004bc6: 46 ea 02 40                  	orr.w	r0, r6, r2, lsl #16
;         self
 8004bca: 2a 90                        	str	r0, [sp, #168]
 8004bcc: a2 98                        	ldr	r0, [sp, #648]
 8004bce: a4 9a                        	ldr	r2, [sp, #656]
;     Ok(AttReadMultiplePermitRequest {
 8004bd0: d9 f8 04 e0                  	ldr.w	lr, [r9, #4]
;         self
 8004bd4: 00 0c                        	lsrs	r0, r0, #16
;     Ok(AttReadMultiplePermitRequest {
 8004bd6: dd f8 1e a4                  	ldr.w	r10, [sp, #1054]
;         self
 8004bda: 40 ea 02 40                  	orr.w	r0, r0, r2, lsl #16
 8004bde: 27 9a                        	ldr	r2, [sp, #156]
 8004be0: a0 90                        	str	r0, [sp, #640]
;     Ok(AttReadMultiplePermitRequest {
 8004be2: bd f8 4e 14                  	ldrh.w	r1, [sp, #1102]
;         self
 8004be6: 10 0c                        	lsrs	r0, r2, #16
;     copy_nonoverlapping(src, dst, count)
 8004be8: bd f8 ad 42                  	ldrh.w	r4, [sp, #685]
;         self
 8004bec: 40 ea 0e 46                  	orr.w	r6, r0, lr, lsl #16
 8004bf0: 10 0a                        	lsrs	r0, r2, #8
;             0x0C15 => Ok(Stm32Wb5xEvent::AttReadMultiplePermitRequest(
 8004bf2: ad f8 f8 43                  	strh.w	r4, [sp, #1016]
;         self
 8004bf6: 40 ea 0e 64                  	orr.w	r4, r0, lr, lsl #24
;             0x0C15 => Ok(Stm32Wb5xEvent::AttReadMultiplePermitRequest(
 8004bfa: a5 98                        	ldr	r0, [sp, #660]
;     Ok(AttReadMultiplePermitRequest {
 8004bfc: dd f8 4a 34                  	ldr.w	r3, [sp, #1098]
;             0x0C15 => Ok(Stm32Wb5xEvent::AttReadMultiplePermitRequest(
 8004c00: ff 90                        	str	r0, [sp, #1020]
 8004c02: 4f ea 1a 40                  	lsr.w	r0, r10, #16
 8004c06: a3 90                        	str	r0, [sp, #652]
 8004c08: 08 0a                        	lsrs	r0, r1, #8
;     Ok(AttReadMultiplePermitRequest {
 8004c0a: dd f8 46 94                  	ldr.w	r9, [sp, #1094]
 8004c0e: bd f8 36 84                  	ldrh.w	r8, [sp, #1078]
;             0x0C15 => Ok(Stm32Wb5xEvent::AttReadMultiplePermitRequest(
 8004c12: 89 90                        	str	r0, [sp, #548]
 8004c14: 18 0e                        	lsrs	r0, r3, #24
 8004c16: 8d 90                        	str	r0, [sp, #564]
 8004c18: 18 0c                        	lsrs	r0, r3, #16
 8004c1a: 8d f8 f0 53                  	strb.w	r5, [sp, #1008]
 8004c1e: a9 9d                        	ldr	r5, [sp, #676]
 8004c20: 8c 90                        	str	r0, [sp, #560]
 8004c22: 18 0a                        	lsrs	r0, r3, #8
;     Ok(AttReadMultiplePermitRequest {
 8004c24: bd f8 2e b4                  	ldrh.w	r11, [sp, #1070]
;             0x0C15 => Ok(Stm32Wb5xEvent::AttReadMultiplePermitRequest(
 8004c28: 8b 90                        	str	r0, [sp, #556]
 8004c2a: 4f ea 18 20                  	lsr.w	r0, r8, #8
 8004c2e: cd f8 6c 82                  	str.w	r8, [sp, #620]
 8004c32: b0 46                        	mov	r8, r6
 8004c34: 4f ea 19 66                  	lsr.w	r6, r9, #24
 8004c38: 2a 0c                        	lsrs	r2, r5, #16
;         self
 8004c3a: 8a 96                        	str	r6, [sp, #552]
 8004c3c: 4f ea 19 46                  	lsr.w	r6, r9, #16
 8004c40: 86 96                        	str	r6, [sp, #536]
 8004c42: 4f ea 19 26                  	lsr.w	r6, r9, #8
 8004c46: cd f8 48 a2                  	str.w	r10, [sp, #584]
;             0x0C15 => Ok(Stm32Wb5xEvent::AttReadMultiplePermitRequest(
 8004c4a: 4f ea 1a 2a                  	lsr.w	r10, r10, #8
 8004c4e: 72 91                        	str	r1, [sp, #456]
 8004c50: 4f ea 1b 21                  	lsr.w	r1, r11, #8
 8004c54: a1 90                        	str	r0, [sp, #644]
 8004c56: 00 20                        	movs	r0, #0
 8004c58: cd f8 78 90                  	str.w	r9, [sp, #120]
 8004c5c: 91 46                        	mov	r9, r2
;     Ok(AttReadMultiplePermitRequest {
 8004c5e: dd f8 3e c4                  	ldr.w	r12, [sp, #1086]
 8004c62: cd f8 8c b0                  	str.w	r11, [sp, #140]
 8004c66: 73 96                        	str	r6, [sp, #460]
 8004c68: 02 f0 6a bc                  	b.w	#10452 <$t.24+0x33be>
 8004c6c: 43 ea 02 40                  	orr.w	r0, r3, r2, lsl #16
 8004c70: 2a 90                        	str	r0, [sp, #168]
 8004c72: dd f8 18 05                  	ldr.w	r0, [sp, #1304]
;             0x0C08 => Ok(Stm32Wb5xEvent::AttReadBlobResponse(to_att_read_response(
 8004c76: a7 f1 48 03                  	sub.w	r3, r7, #72
 8004c7a: 25 90                        	str	r0, [sp, #148]
 8004c7c: 14 25                        	movs	r5, #20
 8004c7e: 9d f8 17 05                  	ldrb.w	r0, [sp, #1303]
 8004c82: 24 90                        	str	r0, [sp, #144]
 8004c84: 9d f8 16 05                  	ldrb.w	r0, [sp, #1302]
 8004c88: 26 90                        	str	r0, [sp, #152]
 8004c8a: bd f8 14 05                  	ldrh.w	r0, [sp, #1300]
 8004c8e: 2b 90                        	str	r0, [sp, #172]
 8004c90: 9d f8 10 05                  	ldrb.w	r0, [sp, #1296]
 8004c94: 88 90                        	str	r0, [sp, #544]
 8004c96: dd f8 0c 05                  	ldr.w	r0, [sp, #1292]
 8004c9a: 87 90                        	str	r0, [sp, #540]
 8004c9c: dd f8 08 05                  	ldr.w	r0, [sp, #1288]
 8004ca0: 74 90                        	str	r0, [sp, #464]
 8004ca2: dd f8 04 05                  	ldr.w	r0, [sp, #1284]
 8004ca6: 59 90                        	str	r0, [sp, #356]
 8004ca8: 9d f8 03 05                  	ldrb.w	r0, [sp, #1283]
 8004cac: 2d 90                        	str	r0, [sp, #180]
 8004cae: 9d f8 02 05                  	ldrb.w	r0, [sp, #1282]
 8004cb2: 2c 90                        	str	r0, [sp, #176]
 8004cb4: bd f8 00 05                  	ldrh.w	r0, [sp, #1280]
 8004cb8: 32 90                        	str	r0, [sp, #200]
 8004cba: dd f8 fc 04                  	ldr.w	r0, [sp, #1276]
 8004cbe: 5a 90                        	str	r0, [sp, #360]
 8004cc0: 9d f8 fb 04                  	ldrb.w	r0, [sp, #1275]
 8004cc4: 2f 90                        	str	r0, [sp, #188]
 8004cc6: 9d f8 fa 04                  	ldrb.w	r0, [sp, #1274]
 8004cca: 2e 90                        	str	r0, [sp, #184]
 8004ccc: bd f8 f8 04                  	ldrh.w	r0, [sp, #1272]
 8004cd0: 36 90                        	str	r0, [sp, #216]
 8004cd2: dd f8 f4 04                  	ldr.w	r0, [sp, #1268]
 8004cd6: 5b 90                        	str	r0, [sp, #364]
 8004cd8: 9d f8 f3 04                  	ldrb.w	r0, [sp, #1267]
 8004cdc: 31 90                        	str	r0, [sp, #196]
 8004cde: 9d f8 f2 04                  	ldrb.w	r0, [sp, #1266]
 8004ce2: 30 90                        	str	r0, [sp, #192]
 8004ce4: bd f8 f0 04                  	ldrh.w	r0, [sp, #1264]
 8004ce8: 39 90                        	str	r0, [sp, #228]
 8004cea: dd f8 ec 04                  	ldr.w	r0, [sp, #1260]
 8004cee: 5c 90                        	str	r0, [sp, #368]
 8004cf0: 9d f8 eb 04                  	ldrb.w	r0, [sp, #1259]
 8004cf4: 35 90                        	str	r0, [sp, #212]
 8004cf6: 9d f8 ea 04                  	ldrb.w	r0, [sp, #1258]
 8004cfa: 33 90                        	str	r0, [sp, #204]
 8004cfc: bd f8 e8 04                  	ldrh.w	r0, [sp, #1256]
 8004d00: 76 90                        	str	r0, [sp, #472]
 8004d02: dd f8 e4 04                  	ldr.w	r0, [sp, #1252]
 8004d06: 5d 90                        	str	r0, [sp, #372]
 8004d08: 9d f8 e3 04                  	ldrb.w	r0, [sp, #1251]
 8004d0c: 38 90                        	str	r0, [sp, #224]
 8004d0e: 9d f8 e2 04                  	ldrb.w	r0, [sp, #1250]
 8004d12: 37 90                        	str	r0, [sp, #220]
 8004d14: bd f8 e0 04                  	ldrh.w	r0, [sp, #1248]
 8004d18: 77 90                        	str	r0, [sp, #476]
 8004d1a: dd f8 dc 04                  	ldr.w	r0, [sp, #1244]
 8004d1e: 5e 90                        	str	r0, [sp, #376]
 8004d20: 9d f8 db 04                  	ldrb.w	r0, [sp, #1243]
 8004d24: 3b 90                        	str	r0, [sp, #236]
 8004d26: 9d f8 da 04                  	ldrb.w	r0, [sp, #1242]
 8004d2a: 3a 90                        	str	r0, [sp, #232]
 8004d2c: bd f8 d8 04                  	ldrh.w	r0, [sp, #1240]
 8004d30: 78 90                        	str	r0, [sp, #480]
 8004d32: dd f8 d4 04                  	ldr.w	r0, [sp, #1236]
 8004d36: 5f 90                        	str	r0, [sp, #380]
 8004d38: 9d f8 d3 04                  	ldrb.w	r0, [sp, #1235]
 8004d3c: 3d 90                        	str	r0, [sp, #244]
 8004d3e: 9d f8 d2 04                  	ldrb.w	r0, [sp, #1234]
 8004d42: 3c 90                        	str	r0, [sp, #240]
 8004d44: bd f8 d0 04                  	ldrh.w	r0, [sp, #1232]
 8004d48: 79 90                        	str	r0, [sp, #484]
 8004d4a: dd f8 cc 04                  	ldr.w	r0, [sp, #1228]
 8004d4e: 60 90                        	str	r0, [sp, #384]
 8004d50: 9d f8 cb 04                  	ldrb.w	r0, [sp, #1227]
 8004d54: 3f 90                        	str	r0, [sp, #252]
 8004d56: 9d f8 ca 04                  	ldrb.w	r0, [sp, #1226]
 8004d5a: 3e 90                        	str	r0, [sp, #248]
 8004d5c: bd f8 c8 04                  	ldrh.w	r0, [sp, #1224]
 8004d60: 7a 90                        	str	r0, [sp, #488]
 8004d62: dd f8 c4 04                  	ldr.w	r0, [sp, #1220]
 8004d66: 61 90                        	str	r0, [sp, #388]
 8004d68: 9d f8 c3 04                  	ldrb.w	r0, [sp, #1219]
 8004d6c: 41 90                        	str	r0, [sp, #260]
 8004d6e: 9d f8 c2 04                  	ldrb.w	r0, [sp, #1218]
 8004d72: 40 90                        	str	r0, [sp, #256]
 8004d74: bd f8 c0 04                  	ldrh.w	r0, [sp, #1216]
 8004d78: 7b 90                        	str	r0, [sp, #492]
 8004d7a: dd f8 bc 04                  	ldr.w	r0, [sp, #1212]
 8004d7e: 62 90                        	str	r0, [sp, #392]
 8004d80: 9d f8 bb 04                  	ldrb.w	r0, [sp, #1211]
 8004d84: 43 90                        	str	r0, [sp, #268]
 8004d86: 9d f8 ba 04                  	ldrb.w	r0, [sp, #1210]
 8004d8a: 42 90                        	str	r0, [sp, #264]
 8004d8c: bd f8 b8 04                  	ldrh.w	r0, [sp, #1208]
 8004d90: 7c 90                        	str	r0, [sp, #496]
 8004d92: dd f8 b4 04                  	ldr.w	r0, [sp, #1204]
 8004d96: 63 90                        	str	r0, [sp, #396]
 8004d98: 9d f8 b3 04                  	ldrb.w	r0, [sp, #1203]
 8004d9c: 45 90                        	str	r0, [sp, #276]
 8004d9e: 9d f8 b2 04                  	ldrb.w	r0, [sp, #1202]
 8004da2: 44 90                        	str	r0, [sp, #272]
 8004da4: bd f8 b0 04                  	ldrh.w	r0, [sp, #1200]
 8004da8: 7e 90                        	str	r0, [sp, #504]
 8004daa: dd f8 ac 04                  	ldr.w	r0, [sp, #1196]
 8004dae: 64 90                        	str	r0, [sp, #400]
 8004db0: 9d f8 ab 04                  	ldrb.w	r0, [sp, #1195]
 8004db4: 47 90                        	str	r0, [sp, #284]
 8004db6: 9d f8 aa 04                  	ldrb.w	r0, [sp, #1194]
 8004dba: 46 90                        	str	r0, [sp, #280]
 8004dbc: bd f8 a8 04                  	ldrh.w	r0, [sp, #1192]
 8004dc0: 7f 90                        	str	r0, [sp, #508]
 8004dc2: dd f8 a4 04                  	ldr.w	r0, [sp, #1188]
 8004dc6: 65 90                        	str	r0, [sp, #404]
 8004dc8: 9d f8 a3 04                  	ldrb.w	r0, [sp, #1187]
 8004dcc: 4a 90                        	str	r0, [sp, #296]
 8004dce: 9d f8 a2 04                  	ldrb.w	r0, [sp, #1186]
 8004dd2: 49 90                        	str	r0, [sp, #292]
 8004dd4: bd f8 a0 04                  	ldrh.w	r0, [sp, #1184]
 8004dd8: 80 90                        	str	r0, [sp, #512]
 8004dda: dd f8 9c 04                  	ldr.w	r0, [sp, #1180]
 8004dde: 66 90                        	str	r0, [sp, #408]
 8004de0: 9d f8 9b 04                  	ldrb.w	r0, [sp, #1179]
 8004de4: 4c 90                        	str	r0, [sp, #304]
 8004de6: 9d f8 9a 04                  	ldrb.w	r0, [sp, #1178]
 8004dea: 4b 90                        	str	r0, [sp, #300]
 8004dec: bd f8 98 04                  	ldrh.w	r0, [sp, #1176]
 8004df0: 81 90                        	str	r0, [sp, #516]
 8004df2: dd f8 94 04                  	ldr.w	r0, [sp, #1172]
 8004df6: 67 90                        	str	r0, [sp, #412]
 8004df8: 9d f8 93 04                  	ldrb.w	r0, [sp, #1171]
 8004dfc: 4e 90                        	str	r0, [sp, #312]
 8004dfe: 9d f8 92 04                  	ldrb.w	r0, [sp, #1170]
 8004e02: 4d 90                        	str	r0, [sp, #308]
 8004e04: bd f8 90 04                  	ldrh.w	r0, [sp, #1168]
 8004e08: 82 90                        	str	r0, [sp, #520]
 8004e0a: dd f8 8c 04                  	ldr.w	r0, [sp, #1164]
 8004e0e: 68 90                        	str	r0, [sp, #416]
 8004e10: 9d f8 8b 04                  	ldrb.w	r0, [sp, #1163]
 8004e14: 6e 90                        	str	r0, [sp, #440]
 8004e16: 9d f8 8a 04                  	ldrb.w	r0, [sp, #1162]
 8004e1a: 4f 90                        	str	r0, [sp, #316]
 8004e1c: bd f8 88 04                  	ldrh.w	r0, [sp, #1160]
 8004e20: 83 90                        	str	r0, [sp, #524]
 8004e22: dd f8 84 04                  	ldr.w	r0, [sp, #1156]
 8004e26: 69 90                        	str	r0, [sp, #420]
 8004e28: 9d f8 83 04                  	ldrb.w	r0, [sp, #1155]
 8004e2c: 51 90                        	str	r0, [sp, #324]
 8004e2e: 9d f8 82 04                  	ldrb.w	r0, [sp, #1154]
 8004e32: 50 90                        	str	r0, [sp, #320]
 8004e34: bd f8 80 04                  	ldrh.w	r0, [sp, #1152]
 8004e38: 84 90                        	str	r0, [sp, #528]
 8004e3a: dd f8 7c 04                  	ldr.w	r0, [sp, #1148]
 8004e3e: 6a 90                        	str	r0, [sp, #424]
 8004e40: 9d f8 7b 04                  	ldrb.w	r0, [sp, #1147]
 8004e44: 54 90                        	str	r0, [sp, #336]
 8004e46: 9d f8 7a 04                  	ldrb.w	r0, [sp, #1146]
 8004e4a: 52 90                        	str	r0, [sp, #328]
 8004e4c: bd f8 78 04                  	ldrh.w	r0, [sp, #1144]
 8004e50: 70 90                        	str	r0, [sp, #448]
 8004e52: dd f8 74 04                  	ldr.w	r0, [sp, #1140]
 8004e56: 6b 90                        	str	r0, [sp, #428]
 8004e58: 9d f8 73 04                  	ldrb.w	r0, [sp, #1139]
 8004e5c: 55 90                        	str	r0, [sp, #340]
 8004e5e: 9d f8 72 04                  	ldrb.w	r0, [sp, #1138]
 8004e62: 53 90                        	str	r0, [sp, #332]
 8004e64: bd f8 70 04                  	ldrh.w	r0, [sp, #1136]
 8004e68: 85 90                        	str	r0, [sp, #532]
 8004e6a: dd f8 6c 04                  	ldr.w	r0, [sp, #1132]
 8004e6e: 6c 90                        	str	r0, [sp, #432]
 8004e70: 9d f8 6b 04                  	ldrb.w	r0, [sp, #1131]
 8004e74: 56 90                        	str	r0, [sp, #344]
 8004e76: 9d f8 6a 04                  	ldrb.w	r0, [sp, #1130]
 8004e7a: 48 90                        	str	r0, [sp, #288]
 8004e7c: bd f8 68 04                  	ldrh.w	r0, [sp, #1128]
 8004e80: 7d 90                        	str	r0, [sp, #500]
 8004e82: dd f8 64 04                  	ldr.w	r0, [sp, #1124]
 8004e86: 6d 90                        	str	r0, [sp, #436]
 8004e88: 9d f8 63 04                  	ldrb.w	r0, [sp, #1123]
 8004e8c: 57 90                        	str	r0, [sp, #348]
 8004e8e: 9d f8 62 04                  	ldrb.w	r0, [sp, #1122]
 8004e92: 34 90                        	str	r0, [sp, #208]
 8004e94: bd f8 60 04                  	ldrh.w	r0, [sp, #1120]
 8004e98: 75 90                        	str	r0, [sp, #468]
 8004e9a: dd f8 5c 04                  	ldr.w	r0, [sp, #1116]
 8004e9e: 71 90                        	str	r0, [sp, #452]
 8004ea0: 9d f8 5b 04                  	ldrb.w	r0, [sp, #1115]
 8004ea4: 58 90                        	str	r0, [sp, #352]
 8004ea6: 9d f8 5a 04                  	ldrb.w	r0, [sp, #1114]
 8004eaa: 6f 90                        	str	r0, [sp, #444]
 8004eac: 0d cb                        	ldm	r3, {r0, r2, r3}
 8004eae: cd f8 2b 35                  	str.w	r3, [sp, #1323]
 8004eb2: cd f8 27 25                  	str.w	r2, [sp, #1319]
 8004eb6: dd f8 28 25                  	ldr.w	r2, [sp, #1320]
 8004eba: cd f8 23 05                  	str.w	r0, [sp, #1315]
 8004ebe: dd f8 24 05                  	ldr.w	r0, [sp, #1316]
 8004ec2: cd f8 f5 03                  	str.w	r0, [sp, #1013]
;         self
 8004ec6: 30 0c                        	lsrs	r0, r6, #16
;             0x0C08 => Ok(Stm32Wb5xEvent::AttReadBlobResponse(to_att_read_response(
 8004ec8: ff 93                        	str	r3, [sp, #1020]
;         self
 8004eca: 40 ea 0e 43                  	orr.w	r3, r0, lr, lsl #16
;             0x0C08 => Ok(Stm32Wb5xEvent::AttReadBlobResponse(to_att_read_response(
 8004ece: dd f8 20 45                  	ldr.w	r4, [sp, #1312]
;         self
 8004ed2: 30 0a                        	lsrs	r0, r6, #8
;             0x0C08 => Ok(Stm32Wb5xEvent::AttReadBlobResponse(to_att_read_response(
 8004ed4: cd f8 f1 43                  	str.w	r4, [sp, #1009]
;         self
 8004ed8: 40 ea 0e 64                  	orr.w	r4, r0, lr, lsl #24
 8004edc: bd f8 58 94                  	ldrh.w	r9, [sp, #1112]
 8004ee0: 4f ea 1c 40                  	lsr.w	r0, r12, #16
;             0x0C08 => Ok(Stm32Wb5xEvent::AttReadBlobResponse(to_att_read_response(
 8004ee4: 8d f8 f0 53                  	strb.w	r5, [sp, #1008]
 8004ee8: cd f8 f9 23                  	str.w	r2, [sp, #1017]
 8004eec: 27 96                        	str	r6, [sp, #156]
 8004eee: cd f8 88 c2                  	str.w	r12, [sp, #648]
 8004ef2: a5 99                        	ldr	r1, [sp, #660]
 8004ef4: 1f fa 8a f2                  	uxth.w	r2, r10
 8004ef8: 8e 9e                        	ldr	r6, [sp, #568]
 8004efa: cd f8 8c 80                  	str.w	r8, [sp, #140]
 8004efe: 40 ea 01 40                  	orr.w	r0, r0, r1, lsl #16
 8004f02: a0 90                        	str	r0, [sp, #640]
 8004f04: 4f ea 19 20                  	lsr.w	r0, r9, #8
 8004f08: 4f ea 18 21                  	lsr.w	r1, r8, #8
 8004f0c: 89 90                        	str	r0, [sp, #548]
 8004f0e: 30 0e                        	lsrs	r0, r6, #24
 8004f10: 8d 90                        	str	r0, [sp, #564]
 8004f12: 30 0c                        	lsrs	r0, r6, #16
 8004f14: 8c 90                        	str	r0, [sp, #560]
 8004f16: 30 0a                        	lsrs	r0, r6, #8
 8004f18: 8b 90                        	str	r0, [sp, #556]
 8004f1a: 98 46                        	mov	r8, r3
 8004f1c: 9b 98                        	ldr	r0, [sp, #620]
 8004f1e: a9 9d                        	ldr	r5, [sp, #676]
 8004f20: cd f8 c8 91                  	str.w	r9, [sp, #456]
 8004f24: 00 0a                        	lsrs	r0, r0, #8
 8004f26: cd f8 78 b0                  	str.w	r11, [sp, #120]
 8004f2a: a1 90                        	str	r0, [sp, #644]
 8004f2c: 4f ea 15 49                  	lsr.w	r9, r5, #16
 8004f30: 92 98                        	ldr	r0, [sp, #584]
 8004f32: 99 92                        	str	r2, [sp, #612]
 8004f34: 03 0c                        	lsrs	r3, r0, #16
 8004f36: 4f ea 10 2a                  	lsr.w	r10, r0, #8
 8004f3a: 4f ea 1b 60                  	lsr.w	r0, r11, #24
 8004f3e: a3 93                        	str	r3, [sp, #652]
 8004f40: 8a 90                        	str	r0, [sp, #552]
 8004f42: 4f ea 1b 40                  	lsr.w	r0, r11, #16
 8004f46: 86 90                        	str	r0, [sp, #536]
 8004f48: 4f ea 1b 20                  	lsr.w	r0, r11, #8
 8004f4c: 73 90                        	str	r0, [sp, #460]
;         match event_code {
 8004f4e: 10 0a                        	lsrs	r0, r2, #8
 8004f50: 98 90                        	str	r0, [sp, #608]
 8004f52: a6 98                        	ldr	r0, [sp, #664]
 8004f54: 5c e3                        	b	#1720 <$t.24+0x148e>
;     let data_len = buffer[4] as usize;
 8004f56: 9d f8 af 42                  	ldrb.w	r4, [sp, #687]
;     require_len!(buffer, 5 + data_len);
 8004f5a: a9 98                        	ldr	r0, [sp, #676]
 8004f5c: 61 1d                        	adds	r1, r4, #5
 8004f5e: 81 42                        	cmp	r1, r0
 8004f60: 40 f0 1c 87                  	bne.w	#3640 <$t.24+0x1c1a>
;     let attribute_group_len = buffer[5] as usize;
 8004f64: 9d f8 b0 62                  	ldrb.w	r6, [sp, #688]
;     if buffer[6..].len() % attribute_group_len != 0 {
 8004f68: 00 2e                        	cmp	r6, #0
 8004f6a: 07 f0 92 82                  	beq.w	#29988 <$t.42+0x2d8>
 8004f6e: a9 98                        	ldr	r0, [sp, #676]
 8004f70: 81 1f                        	subs	r1, r0, #6
 8004f72: b1 fb f6 f0                  	udiv	r0, r1, r6
 8004f76: 00 fb 16 10                  	mls	r0, r0, r6, r1
 8004f7a: 00 28                        	cmp	r0, #0
 8004f7c: 01 f0 9c 83                  	beq.w	#5944 <$t.24+0x2536>
 8004f80: 12 20                        	movs	r0, #18
 8004f82: 00 22                        	movs	r2, #0
 8004f84: 15 21                        	movs	r1, #21
 8004f86: 00 f0 0c bf                  	b.w	#3608 <$t.24+0x1c20>
;     let data_len = buffer[4] as usize;
 8004f8a: 9d f8 af 42                  	ldrb.w	r4, [sp, #687]
;     require_len!(buffer, 5 + data_len);
 8004f8e: a9 99                        	ldr	r1, [sp, #676]
 8004f90: 60 1d                        	adds	r0, r4, #5
 8004f92: 88 42                        	cmp	r0, r1
 8004f94: 40 f0 bd 81                  	bne.w	#890 <$t.24+0x1190>
 8004f98: 0d f5 83 60                  	add.w	r0, sp, #1048
;     let mut value_buf = [0; MAX_WRITE_RESPONSE_VALUE_LEN];
 8004f9c: f6 21                        	movs	r1, #246
 8004f9e: 17 f0 31 fb                  	bl	#95842
;     let value_len = data_len - 4;
 8004fa2: 20 1f                        	subs	r0, r4, #4
 8004fa4: a6 90                        	str	r0, [sp, #664]
;         } else if self.end > slice.len() {
 8004fa6: f7 28                        	cmp	r0, #247
 8004fa8: 87 f0 c4 82                  	bhs.w	#30088 <$t.42+0x37a>
;                 if !(*left_val == *right_val) {
 8004fac: a9 98                        	ldr	r0, [sp, #676]
 8004fae: 05 38                        	subs	r0, #5
 8004fb0: a0 42                        	cmp	r0, r4
 8004fb2: 47 f0 81 82                  	bne.w	#29954 <$t.42+0x2fe>
;     copy_nonoverlapping(src, dst, count)
 8004fb6: a6 9a                        	ldr	r2, [sp, #664]
;         intrinsics::offset(self, count)
 8004fb8: 08 f1 0c 01                  	add.w	r1, r8, #12
 8004fbc: 0d f5 83 60                  	add.w	r0, sp, #1048
;     copy_nonoverlapping(src, dst, count)
 8004fc0: 17 f0 e8 f9                  	bl	#95184
;         assert!($size <= $src.len());
 8004fc4: a9 98                        	ldr	r0, [sp, #676]
 8004fc6: 00 f0 fe 00                  	and	r0, r0, #254
 8004fca: 02 28                        	cmp	r0, #2
 8004fcc: 3f f4 7a ac                  	beq.w	#-1804 <$t.24+0x742>
;     Ok(AttPrepareWriteResponse {
 8004fd0: 30 68                        	ldr	r0, [r6]
 8004fd2: a7 90                        	str	r0, [sp, #668]
 8004fd4: b0 68                        	ldr	r0, [r6, #8]
 8004fd6: a2 90                        	str	r0, [sp, #648]
 8004fd8: b0 88                        	ldrh	r0, [r6, #4]
 8004fda: 99 90                        	str	r0, [sp, #612]
 8004fdc: 96 f8 d9 00                  	ldrb.w	r0, [r6, #217]
 8004fe0: a5 90                        	str	r0, [sp, #660]
 8004fe2: b6 f8 d7 00                  	ldrh.w	r0, [r6, #215]
 8004fe6: a4 90                        	str	r0, [sp, #656]
 8004fe8: b0 89                        	ldrh	r0, [r6, #12]
 8004fea: a3 90                        	str	r0, [sp, #652]
 8004fec: dd f8 18 04                  	ldr.w	r0, [sp, #1048]
 8004ff0: 92 90                        	str	r0, [sp, #584]
 8004ff2: dd f8 1c 04                  	ldr.w	r0, [sp, #1052]
 8004ff6: a9 90                        	str	r0, [sp, #676]
 8004ff8: dd f8 08 05                  	ldr.w	r0, [sp, #1288]
 8004ffc: 25 90                        	str	r0, [sp, #148]
 8004ffe: 9d f8 07 05                  	ldrb.w	r0, [sp, #1287]
 8005002: 24 90                        	str	r0, [sp, #144]
 8005004: 9d f8 06 05                  	ldrb.w	r0, [sp, #1286]
 8005008: 26 90                        	str	r0, [sp, #152]
 800500a: bd f8 04 05                  	ldrh.w	r0, [sp, #1284]
 800500e: 2b 90                        	str	r0, [sp, #172]
 8005010: 9d f8 00 05                  	ldrb.w	r0, [sp, #1280]
 8005014: 88 90                        	str	r0, [sp, #544]
 8005016: dd f8 fc 04                  	ldr.w	r0, [sp, #1276]
 800501a: 87 90                        	str	r0, [sp, #540]
 800501c: dd f8 f8 04                  	ldr.w	r0, [sp, #1272]
 8005020: 74 90                        	str	r0, [sp, #464]
 8005022: dd f8 f4 04                  	ldr.w	r0, [sp, #1268]
 8005026: 59 90                        	str	r0, [sp, #356]
 8005028: 9d f8 f3 04                  	ldrb.w	r0, [sp, #1267]
 800502c: 2d 90                        	str	r0, [sp, #180]
 800502e: 9d f8 f2 04                  	ldrb.w	r0, [sp, #1266]
 8005032: 2c 90                        	str	r0, [sp, #176]
 8005034: bd f8 f0 04                  	ldrh.w	r0, [sp, #1264]
 8005038: 32 90                        	str	r0, [sp, #200]
 800503a: dd f8 ec 04                  	ldr.w	r0, [sp, #1260]
 800503e: 5a 90                        	str	r0, [sp, #360]
 8005040: 9d f8 eb 04                  	ldrb.w	r0, [sp, #1259]
 8005044: 2f 90                        	str	r0, [sp, #188]
 8005046: 9d f8 ea 04                  	ldrb.w	r0, [sp, #1258]
 800504a: 2e 90                        	str	r0, [sp, #184]
 800504c: bd f8 e8 04                  	ldrh.w	r0, [sp, #1256]
 8005050: 36 90                        	str	r0, [sp, #216]
 8005052: dd f8 e4 04                  	ldr.w	r0, [sp, #1252]
 8005056: 5b 90                        	str	r0, [sp, #364]
 8005058: 9d f8 e3 04                  	ldrb.w	r0, [sp, #1251]
 800505c: 31 90                        	str	r0, [sp, #196]
 800505e: 9d f8 e2 04                  	ldrb.w	r0, [sp, #1250]
 8005062: 30 90                        	str	r0, [sp, #192]
 8005064: bd f8 e0 04                  	ldrh.w	r0, [sp, #1248]
 8005068: 39 90                        	str	r0, [sp, #228]
 800506a: dd f8 dc 04                  	ldr.w	r0, [sp, #1244]
 800506e: 5c 90                        	str	r0, [sp, #368]
 8005070: 9d f8 db 04                  	ldrb.w	r0, [sp, #1243]
 8005074: 35 90                        	str	r0, [sp, #212]
 8005076: 9d f8 da 04                  	ldrb.w	r0, [sp, #1242]
 800507a: 33 90                        	str	r0, [sp, #204]
 800507c: bd f8 d8 04                  	ldrh.w	r0, [sp, #1240]
 8005080: 76 90                        	str	r0, [sp, #472]
 8005082: dd f8 d4 04                  	ldr.w	r0, [sp, #1236]
 8005086: 5d 90                        	str	r0, [sp, #372]
 8005088: 9d f8 d3 04                  	ldrb.w	r0, [sp, #1235]
 800508c: 38 90                        	str	r0, [sp, #224]
 800508e: 9d f8 d2 04                  	ldrb.w	r0, [sp, #1234]
 8005092: 37 90                        	str	r0, [sp, #220]
 8005094: bd f8 d0 04                  	ldrh.w	r0, [sp, #1232]
 8005098: 77 90                        	str	r0, [sp, #476]
 800509a: dd f8 cc 04                  	ldr.w	r0, [sp, #1228]
 800509e: 5e 90                        	str	r0, [sp, #376]
 80050a0: 9d f8 cb 04                  	ldrb.w	r0, [sp, #1227]
 80050a4: 3b 90                        	str	r0, [sp, #236]
 80050a6: 9d f8 ca 04                  	ldrb.w	r0, [sp, #1226]
 80050aa: 3a 90                        	str	r0, [sp, #232]
 80050ac: bd f8 c8 04                  	ldrh.w	r0, [sp, #1224]
 80050b0: 78 90                        	str	r0, [sp, #480]
 80050b2: dd f8 c4 04                  	ldr.w	r0, [sp, #1220]
 80050b6: 5f 90                        	str	r0, [sp, #380]
 80050b8: 9d f8 c3 04                  	ldrb.w	r0, [sp, #1219]
 80050bc: 3d 90                        	str	r0, [sp, #244]
 80050be: 9d f8 c2 04                  	ldrb.w	r0, [sp, #1218]
 80050c2: 3c 90                        	str	r0, [sp, #240]
 80050c4: bd f8 c0 04                  	ldrh.w	r0, [sp, #1216]
 80050c8: 79 90                        	str	r0, [sp, #484]
 80050ca: dd f8 bc 04                  	ldr.w	r0, [sp, #1212]
 80050ce: 60 90                        	str	r0, [sp, #384]
 80050d0: 9d f8 bb 04                  	ldrb.w	r0, [sp, #1211]
 80050d4: 3f 90                        	str	r0, [sp, #252]
 80050d6: 9d f8 ba 04                  	ldrb.w	r0, [sp, #1210]
 80050da: 3e 90                        	str	r0, [sp, #248]
 80050dc: bd f8 b8 04                  	ldrh.w	r0, [sp, #1208]
 80050e0: 7a 90                        	str	r0, [sp, #488]
 80050e2: dd f8 b4 04                  	ldr.w	r0, [sp, #1204]
 80050e6: 61 90                        	str	r0, [sp, #388]
 80050e8: 9d f8 b3 04                  	ldrb.w	r0, [sp, #1203]
 80050ec: 41 90                        	str	r0, [sp, #260]
 80050ee: 9d f8 b2 04                  	ldrb.w	r0, [sp, #1202]
 80050f2: 40 90                        	str	r0, [sp, #256]
 80050f4: bd f8 b0 04                  	ldrh.w	r0, [sp, #1200]
 80050f8: 7b 90                        	str	r0, [sp, #492]
 80050fa: dd f8 ac 04                  	ldr.w	r0, [sp, #1196]
 80050fe: 62 90                        	str	r0, [sp, #392]
 8005100: 9d f8 ab 04                  	ldrb.w	r0, [sp, #1195]
 8005104: 43 90                        	str	r0, [sp, #268]
 8005106: 9d f8 aa 04                  	ldrb.w	r0, [sp, #1194]
 800510a: 42 90                        	str	r0, [sp, #264]
 800510c: bd f8 a8 04                  	ldrh.w	r0, [sp, #1192]
 8005110: 7c 90                        	str	r0, [sp, #496]
 8005112: dd f8 a4 04                  	ldr.w	r0, [sp, #1188]
 8005116: 63 90                        	str	r0, [sp, #396]
 8005118: 9d f8 a3 04                  	ldrb.w	r0, [sp, #1187]
 800511c: 45 90                        	str	r0, [sp, #276]
 800511e: 9d f8 a2 04                  	ldrb.w	r0, [sp, #1186]
 8005122: 44 90                        	str	r0, [sp, #272]
 8005124: bd f8 a0 04                  	ldrh.w	r0, [sp, #1184]
 8005128: 7e 90                        	str	r0, [sp, #504]
 800512a: dd f8 9c 04                  	ldr.w	r0, [sp, #1180]
 800512e: 64 90                        	str	r0, [sp, #400]
 8005130: 9d f8 9b 04                  	ldrb.w	r0, [sp, #1179]
 8005134: 47 90                        	str	r0, [sp, #284]
 8005136: 9d f8 9a 04                  	ldrb.w	r0, [sp, #1178]
 800513a: 46 90                        	str	r0, [sp, #280]
 800513c: bd f8 98 04                  	ldrh.w	r0, [sp, #1176]
 8005140: 7f 90                        	str	r0, [sp, #508]
 8005142: dd f8 94 04                  	ldr.w	r0, [sp, #1172]
 8005146: 65 90                        	str	r0, [sp, #404]
 8005148: 9d f8 93 04                  	ldrb.w	r0, [sp, #1171]
 800514c: 4a 90                        	str	r0, [sp, #296]
 800514e: 9d f8 92 04                  	ldrb.w	r0, [sp, #1170]
 8005152: 49 90                        	str	r0, [sp, #292]
 8005154: bd f8 90 04                  	ldrh.w	r0, [sp, #1168]
 8005158: 80 90                        	str	r0, [sp, #512]
 800515a: dd f8 8c 04                  	ldr.w	r0, [sp, #1164]
 800515e: 66 90                        	str	r0, [sp, #408]
 8005160: 9d f8 8b 04                  	ldrb.w	r0, [sp, #1163]
 8005164: 4c 90                        	str	r0, [sp, #304]
 8005166: 9d f8 8a 04                  	ldrb.w	r0, [sp, #1162]
 800516a: 4b 90                        	str	r0, [sp, #300]
 800516c: bd f8 88 04                  	ldrh.w	r0, [sp, #1160]
 8005170: 81 90                        	str	r0, [sp, #516]
 8005172: dd f8 84 04                  	ldr.w	r0, [sp, #1156]
 8005176: 67 90                        	str	r0, [sp, #412]
 8005178: 9d f8 83 04                  	ldrb.w	r0, [sp, #1155]
 800517c: 4e 90                        	str	r0, [sp, #312]
 800517e: 9d f8 82 04                  	ldrb.w	r0, [sp, #1154]
 8005182: 4d 90                        	str	r0, [sp, #308]
 8005184: bd f8 80 04                  	ldrh.w	r0, [sp, #1152]
 8005188: 82 90                        	str	r0, [sp, #520]
 800518a: dd f8 7c 04                  	ldr.w	r0, [sp, #1148]
 800518e: 68 90                        	str	r0, [sp, #416]
 8005190: 9d f8 7b 04                  	ldrb.w	r0, [sp, #1147]
 8005194: 6e 90                        	str	r0, [sp, #440]
 8005196: 9d f8 7a 04                  	ldrb.w	r0, [sp, #1146]
 800519a: 4f 90                        	str	r0, [sp, #316]
 800519c: bd f8 78 04                  	ldrh.w	r0, [sp, #1144]
 80051a0: 83 90                        	str	r0, [sp, #524]
 80051a2: dd f8 74 04                  	ldr.w	r0, [sp, #1140]
 80051a6: 69 90                        	str	r0, [sp, #420]
 80051a8: 9d f8 73 04                  	ldrb.w	r0, [sp, #1139]
 80051ac: 51 90                        	str	r0, [sp, #324]
 80051ae: 9d f8 72 04                  	ldrb.w	r0, [sp, #1138]
 80051b2: 50 90                        	str	r0, [sp, #320]
 80051b4: bd f8 70 04                  	ldrh.w	r0, [sp, #1136]
 80051b8: 84 90                        	str	r0, [sp, #528]
 80051ba: dd f8 6c 04                  	ldr.w	r0, [sp, #1132]
 80051be: 6a 90                        	str	r0, [sp, #424]
 80051c0: 9d f8 6b 04                  	ldrb.w	r0, [sp, #1131]
 80051c4: 54 90                        	str	r0, [sp, #336]
 80051c6: 9d f8 6a 04                  	ldrb.w	r0, [sp, #1130]
 80051ca: 52 90                        	str	r0, [sp, #328]
 80051cc: bd f8 68 04                  	ldrh.w	r0, [sp, #1128]
 80051d0: 70 90                        	str	r0, [sp, #448]
 80051d2: dd f8 64 04                  	ldr.w	r0, [sp, #1124]
 80051d6: 6b 90                        	str	r0, [sp, #428]
 80051d8: 9d f8 63 04                  	ldrb.w	r0, [sp, #1123]
 80051dc: 55 90                        	str	r0, [sp, #340]
 80051de: 9d f8 62 04                  	ldrb.w	r0, [sp, #1122]
 80051e2: 53 90                        	str	r0, [sp, #332]
 80051e4: bd f8 60 04                  	ldrh.w	r0, [sp, #1120]
 80051e8: 85 90                        	str	r0, [sp, #532]
 80051ea: dd f8 5c 04                  	ldr.w	r0, [sp, #1116]
 80051ee: 6c 90                        	str	r0, [sp, #432]
 80051f0: 9d f8 5b 04                  	ldrb.w	r0, [sp, #1115]
 80051f4: 56 90                        	str	r0, [sp, #344]
 80051f6: 9d f8 5a 04                  	ldrb.w	r0, [sp, #1114]
 80051fa: 48 90                        	str	r0, [sp, #288]
 80051fc: bd f8 58 04                  	ldrh.w	r0, [sp, #1112]
 8005200: 7d 90                        	str	r0, [sp, #500]
 8005202: dd f8 54 04                  	ldr.w	r0, [sp, #1108]
 8005206: 6d 90                        	str	r0, [sp, #436]
 8005208: 9d f8 53 04                  	ldrb.w	r0, [sp, #1107]
 800520c: 57 90                        	str	r0, [sp, #348]
 800520e: 9d f8 52 04                  	ldrb.w	r0, [sp, #1106]
 8005212: 34 90                        	str	r0, [sp, #208]
 8005214: bd f8 50 04                  	ldrh.w	r0, [sp, #1104]
 8005218: 75 90                        	str	r0, [sp, #468]
 800521a: dd f8 4c 04                  	ldr.w	r0, [sp, #1100]
 800521e: 71 90                        	str	r0, [sp, #452]
 8005220: 9d f8 4b 04                  	ldrb.w	r0, [sp, #1099]
 8005224: 58 90                        	str	r0, [sp, #352]
 8005226: 9d f8 4a 04                  	ldrb.w	r0, [sp, #1098]
 800522a: 6f 90                        	str	r0, [sp, #444]
 800522c: dd f8 3c 04                  	ldr.w	r0, [sp, #1084]
 8005230: 91 90                        	str	r0, [sp, #580]
 8005232: 17 20                        	movs	r0, #23
;             0x0C0C => Ok(Stm32Wb5xEvent::AttPrepareWriteResponse(
 8005234: 8d f8 f0 03                  	strb.w	r0, [sp, #1008]
 8005238: a6 98                        	ldr	r0, [sp, #664]
;     copy_nonoverlapping(src, dst, count)
 800523a: bd f8 b2 42                  	ldrh.w	r4, [sp, #690]
; }
 800523e: bd f8 b0 62                  	ldrh.w	r6, [sp, #688]
;     Ok(AttPrepareWriteResponse {
 8005242: dd f8 20 b4                  	ldr.w	r11, [sp, #1056]
;             0x0C0C => Ok(Stm32Wb5xEvent::AttPrepareWriteResponse(
 8005246: cd e9 fd 40                  	strd	r4, r0, [sp, #1012]
 800524a: bd f8 20 05                  	ldrh.w	r0, [sp, #1312]
;     copy_nonoverlapping(src, dst, count)
 800524e: bd f8 ad 32                  	ldrh.w	r3, [sp, #685]
;             0x0C0C => Ok(Stm32Wb5xEvent::AttPrepareWriteResponse(
 8005252: ad f8 f1 03                  	strh.w	r0, [sp, #1009]
 8005256: 9d f8 22 05                  	ldrb.w	r0, [sp, #1314]
;     Ok(AttPrepareWriteResponse {
 800525a: dd f8 24 e4                  	ldr.w	lr, [sp, #1060]
;             0x0C0C => Ok(Stm32Wb5xEvent::AttPrepareWriteResponse(
 800525e: 8d f8 f3 03                  	strb.w	r0, [sp, #1011]
;         self
 8005262: 43 ea 06 40                  	orr.w	r0, r3, r6, lsl #16
;             0x0C0C => Ok(Stm32Wb5xEvent::AttPrepareWriteResponse(
 8005266: ff 90                        	str	r0, [sp, #1020]
;         self
 8005268: 4f ea 1b 40                  	lsr.w	r0, r11, #16
 800526c: 40 ea 0e 44                  	orr.w	r4, r0, lr, lsl #16
 8005270: 4f ea 1b 20                  	lsr.w	r0, r11, #8
 8005274: 40 ea 0e 60                  	orr.w	r0, r0, lr, lsl #24
 8005278: 9c 90                        	str	r0, [sp, #624]
 800527a: a2 98                        	ldr	r0, [sp, #648]
 800527c: a3 9b                        	ldr	r3, [sp, #652]
;     Ok(AttPrepareWriteResponse {
 800527e: bd f8 48 54                  	ldrh.w	r5, [sp, #1096]
;         self
 8005282: 00 0c                        	lsrs	r0, r0, #16
;     Ok(AttPrepareWriteResponse {
 8005284: dd f8 44 a4                  	ldr.w	r10, [sp, #1092]
;         self
 8005288: 40 ea 03 40                  	orr.w	r0, r0, r3, lsl #16
 800528c: a0 90                        	str	r0, [sp, #640]
;     Ok(AttPrepareWriteResponse {
 800528e: dd e9 a4 60                  	ldrd	r6, r0, [sp, #656]
 8005292: bd f8 0c 25                  	ldrh.w	r2, [sp, #1292]
 8005296: 53 46                        	mov	r3, r10
 8005298: 46 ea 00 40                  	orr.w	r0, r6, r0, lsl #16
 800529c: 2a 90                        	str	r0, [sp, #168]
;             0x0C0C => Ok(Stm32Wb5xEvent::AttPrepareWriteResponse(
 800529e: 28 0a                        	lsrs	r0, r5, #8
;     Ok(AttPrepareWriteResponse {
 80052a0: bd f8 30 84                  	ldrh.w	r8, [sp, #1072]
;             0x0C0C => Ok(Stm32Wb5xEvent::AttPrepareWriteResponse(
 80052a4: 89 90                        	str	r0, [sp, #548]
 80052a6: 4f ea 1a 60                  	lsr.w	r0, r10, #24
 80052aa: cd f8 9c b0                  	str.w	r11, [sp, #156]
 80052ae: 4f ea 12 2b                  	lsr.w	r11, r2, #8
 80052b2: 9f 92                        	str	r2, [sp, #636]
 80052b4: 8d 90                        	str	r0, [sp, #564]
 80052b6: 4f ea 1a 40                  	lsr.w	r0, r10, #16
 80052ba: 92 9a                        	ldr	r2, [sp, #584]
;     Ok(AttPrepareWriteResponse {
 80052bc: dd f8 40 14                  	ldr.w	r1, [sp, #1088]
;             0x0C0C => Ok(Stm32Wb5xEvent::AttPrepareWriteResponse(
 80052c0: 8c 90                        	str	r0, [sp, #560]
 80052c2: 4f ea 1a 20                  	lsr.w	r0, r10, #8
 80052c6: 8b 90                        	str	r0, [sp, #556]
 80052c8: 4f ea 18 20                  	lsr.w	r0, r8, #8
;     Ok(AttPrepareWriteResponse {
 80052cc: bd f8 28 94                  	ldrh.w	r9, [sp, #1064]
;             0x0C0C => Ok(Stm32Wb5xEvent::AttPrepareWriteResponse(
 80052d0: 4f ea 12 2a                  	lsr.w	r10, r2, #8
 80052d4: a1 90                        	str	r0, [sp, #644]
 80052d6: 10 0c                        	lsrs	r0, r2, #16
;         match event_code {
 80052d8: 99 9a                        	ldr	r2, [sp, #612]
 80052da: 72 95                        	str	r5, [sp, #456]
 80052dc: a3 90                        	str	r0, [sp, #652]
;             0x0C0C => Ok(Stm32Wb5xEvent::AttPrepareWriteResponse(
 80052de: 08 0e                        	lsrs	r0, r1, #24
 80052e0: a9 9d                        	ldr	r5, [sp, #676]
;         match event_code {
 80052e2: 12 0a                        	lsrs	r2, r2, #8
;         self
 80052e4: 8a 90                        	str	r0, [sp, #552]
 80052e6: 08 0c                        	lsrs	r0, r1, #16
 80052e8: cd f8 6c 82                  	str.w	r8, [sp, #620]
 80052ec: a0 46                        	mov	r8, r4
 80052ee: 86 90                        	str	r0, [sp, #536]
 80052f0: 08 0a                        	lsrs	r0, r1, #8
;             0x0C0C => Ok(Stm32Wb5xEvent::AttPrepareWriteResponse(
 80052f2: 4f ea 19 24                  	lsr.w	r4, r9, #8
 80052f6: cd f8 8c 90                  	str.w	r9, [sp, #140]
 80052fa: 1e 91                        	str	r1, [sp, #120]
 80052fc: 21 46                        	mov	r1, r4
 80052fe: 73 90                        	str	r0, [sp, #460]
 8005300: 4f ea 15 49                  	lsr.w	r9, r5, #16
;     Ok(AttPrepareWriteResponse {
 8005304: dd f8 38 c4                  	ldr.w	r12, [sp, #1080]
 8005308: 00 20                        	movs	r0, #0
 800530a: 9c 9c                        	ldr	r4, [sp, #624]
 800530c: 98 92                        	str	r2, [sp, #608]
 800530e: 02 f0 1a b9                  	b.w	#8756 <$t.24+0x33c4>
;         Err(v)
 8005312: fe 90                        	str	r0, [sp, #1016]
 8005314: a9 98                        	ldr	r0, [sp, #676]
 8005316: fd 90                        	str	r0, [sp, #1012]
 8005318: 01 20                        	movs	r0, #1
 800531a: fc 90                        	str	r0, [sp, #1008]
 800531c: 00 f0 2b bd                  	b.w	#2646 <$t.24+0x1bf4>
 8005320: 09 20                        	movs	r0, #9
 8005322: cd e9 fd 10                  	strd	r1, r0, [sp, #1012]
 8005326: 01 20                        	movs	r0, #1
 8005328: fc 90                        	str	r0, [sp, #1008]
 800532a: fe f7 3e bf                  	b.w	#-4484 <$t.24+0x28>
 800532e: dd f8 08 05                  	ldr.w	r0, [sp, #1288]
;                 Stm32Wb5xEvent::GattDiscoverOrReadCharacteristicByUuidResponse(to_attribute_value(
 8005332: 0d f5 a4 65                  	add.w	r5, sp, #1312
 8005336: 74 90                        	str	r0, [sp, #464]
 8005338: dd f8 04 05                  	ldr.w	r0, [sp, #1284]
 800533c: 59 90                        	str	r0, [sp, #356]
 800533e: dd f8 fc 04                  	ldr.w	r0, [sp, #1276]
 8005342: 5a 90                        	str	r0, [sp, #360]
 8005344: dd f8 f4 04                  	ldr.w	r0, [sp, #1268]
 8005348: 5b 90                        	str	r0, [sp, #364]
 800534a: dd f8 ec 04                  	ldr.w	r0, [sp, #1260]
 800534e: 5c 90                        	str	r0, [sp, #368]
 8005350: dd f8 e8 04                  	ldr.w	r0, [sp, #1256]
 8005354: 76 90                        	str	r0, [sp, #472]
 8005356: dd f8 e4 04                  	ldr.w	r0, [sp, #1252]
 800535a: 5d 90                        	str	r0, [sp, #372]
 800535c: dd f8 e0 04                  	ldr.w	r0, [sp, #1248]
 8005360: 77 90                        	str	r0, [sp, #476]
 8005362: dd f8 dc 04                  	ldr.w	r0, [sp, #1244]
 8005366: 5e 90                        	str	r0, [sp, #376]
 8005368: dd f8 d8 04                  	ldr.w	r0, [sp, #1240]
 800536c: 78 90                        	str	r0, [sp, #480]
 800536e: dd f8 d4 04                  	ldr.w	r0, [sp, #1236]
 8005372: 5f 90                        	str	r0, [sp, #380]
 8005374: dd f8 d0 04                  	ldr.w	r0, [sp, #1232]
 8005378: 79 90                        	str	r0, [sp, #484]
 800537a: dd f8 cc 04                  	ldr.w	r0, [sp, #1228]
 800537e: 60 90                        	str	r0, [sp, #384]
 8005380: dd f8 c8 04                  	ldr.w	r0, [sp, #1224]
 8005384: 7a 90                        	str	r0, [sp, #488]
 8005386: dd f8 c4 04                  	ldr.w	r0, [sp, #1220]
 800538a: 61 90                        	str	r0, [sp, #388]
 800538c: dd f8 c0 04                  	ldr.w	r0, [sp, #1216]
 8005390: 7b 90                        	str	r0, [sp, #492]
 8005392: dd f8 bc 04                  	ldr.w	r0, [sp, #1212]
 8005396: 62 90                        	str	r0, [sp, #392]
 8005398: dd f8 b8 04                  	ldr.w	r0, [sp, #1208]
 800539c: 7c 90                        	str	r0, [sp, #496]
 800539e: dd f8 b4 04                  	ldr.w	r0, [sp, #1204]
 80053a2: 63 90                        	str	r0, [sp, #396]
 80053a4: dd f8 b0 04                  	ldr.w	r0, [sp, #1200]
 80053a8: 7e 90                        	str	r0, [sp, #504]
 80053aa: dd f8 ac 04                  	ldr.w	r0, [sp, #1196]
 80053ae: 64 90                        	str	r0, [sp, #400]
 80053b0: dd f8 a8 04                  	ldr.w	r0, [sp, #1192]
 80053b4: 7f 90                        	str	r0, [sp, #508]
 80053b6: dd f8 a4 04                  	ldr.w	r0, [sp, #1188]
 80053ba: 65 90                        	str	r0, [sp, #404]
 80053bc: dd f8 a0 04                  	ldr.w	r0, [sp, #1184]
 80053c0: 80 90                        	str	r0, [sp, #512]
 80053c2: dd f8 9c 04                  	ldr.w	r0, [sp, #1180]
 80053c6: 66 90                        	str	r0, [sp, #408]
 80053c8: dd f8 98 04                  	ldr.w	r0, [sp, #1176]
 80053cc: 81 90                        	str	r0, [sp, #516]
 80053ce: dd f8 94 04                  	ldr.w	r0, [sp, #1172]
 80053d2: 67 90                        	str	r0, [sp, #412]
 80053d4: dd f8 90 04                  	ldr.w	r0, [sp, #1168]
 80053d8: 82 90                        	str	r0, [sp, #520]
 80053da: dd f8 8c 04                  	ldr.w	r0, [sp, #1164]
 80053de: 68 90                        	str	r0, [sp, #416]
 80053e0: dd f8 88 04                  	ldr.w	r0, [sp, #1160]
 80053e4: 83 90                        	str	r0, [sp, #524]
 80053e6: dd f8 84 04                  	ldr.w	r0, [sp, #1156]
 80053ea: 69 90                        	str	r0, [sp, #420]
 80053ec: dd f8 80 04                  	ldr.w	r0, [sp, #1152]
 80053f0: 84 90                        	str	r0, [sp, #528]
 80053f2: dd f8 7c 04                  	ldr.w	r0, [sp, #1148]
 80053f6: 6a 90                        	str	r0, [sp, #424]
 80053f8: dd f8 78 04                  	ldr.w	r0, [sp, #1144]
 80053fc: 70 90                        	str	r0, [sp, #448]
 80053fe: dd f8 74 04                  	ldr.w	r0, [sp, #1140]
 8005402: 6b 90                        	str	r0, [sp, #428]
 8005404: dd f8 70 04                  	ldr.w	r0, [sp, #1136]
 8005408: 85 90                        	str	r0, [sp, #532]
 800540a: dd f8 6c 04                  	ldr.w	r0, [sp, #1132]
 800540e: 6c 90                        	str	r0, [sp, #432]
 8005410: dd f8 68 04                  	ldr.w	r0, [sp, #1128]
 8005414: 7d 90                        	str	r0, [sp, #500]
 8005416: dd f8 64 04                  	ldr.w	r0, [sp, #1124]
 800541a: 6d 90                        	str	r0, [sp, #436]
 800541c: dd f8 60 04                  	ldr.w	r0, [sp, #1120]
 8005420: 75 90                        	str	r0, [sp, #468]
 8005422: dd f8 5c 04                  	ldr.w	r0, [sp, #1116]
 8005426: 71 90                        	str	r0, [sp, #452]
 8005428: 29 cd                        	ldm	r5, {r0, r3, r5}
 800542a: dd f8 2c 45                  	ldr.w	r4, [sp, #1324]
 800542e: cd f8 0f 04                  	str.w	r0, [sp, #1039]
 8005432: 9c 98                        	ldr	r0, [sp, #624]
 8005434: 8d f8 05 04                  	strb.w	r0, [sp, #1029]
 8005438: 27 98                        	ldr	r0, [sp, #156]
 800543a: 47 e9 12 54                  	strd	r5, r4, [r7, #-72]
 800543e: dd f8 30 25                  	ldr.w	r2, [sp, #1328]
 8005442: 92 9c                        	ldr	r4, [sp, #584]
 8005444: 8d f8 04 04                  	strb.w	r0, [sp, #1028]
 8005448: a6 98                        	ldr	r0, [sp, #664]
 800544a: cd f8 13 34                  	str.w	r3, [sp, #1043]
 800544e: 47 f8 40 2c                  	str	r2, [r7, #-64]
 8005452: cd f8 08 64                  	str.w	r6, [sp, #1032]
 8005456: 1d 26                        	movs	r6, #29
 8005458: ad f8 06 04                  	strh.w	r0, [sp, #1030]
 800545c: dd f8 00 c5                  	ldr.w	r12, [sp, #1280]
 8005460: dd f8 f8 84                  	ldr.w	r8, [sp, #1272]
 8005464: dd f8 f0 94                  	ldr.w	r9, [sp, #1264]
 8005468: dd f8 58 14                  	ldr.w	r1, [sp, #1112]
 800546c: 47 f8 3c 4c                  	str	r4, [r7, #-60]
 8005470: dd f8 10 04                  	ldr.w	r0, [sp, #1040]
 8005474: dd f8 0c 24                  	ldr.w	r2, [sp, #1036]
 8005478: 8d f8 f0 63                  	strb.w	r6, [sp, #1008]
 800547c: fe 93                        	str	r3, [sp, #1016]
 800547e: cd f8 f1 23                  	str.w	r2, [sp, #1009]
 8005482: cd f8 f5 03                  	str.w	r0, [sp, #1013]
 8005486: 4f ea 1b 60                  	lsr.w	r0, r11, #24
 800548a: 40 ea 0a 20                  	orr.w	r0, r0, r10, lsl #8
 800548e: 24 90                        	str	r0, [sp, #144]
 8005490: 4f ea 1b 40                  	lsr.w	r0, r11, #16
 8005494: f8 9a                        	ldr	r2, [sp, #992]
 8005496: 40 ea 0a 40                  	orr.w	r0, r0, r10, lsl #16
 800549a: 26 90                        	str	r0, [sp, #152]
 800549c: e0 b2                        	uxtb	r0, r4
 800549e: 57 f8 44 4c                  	ldr	r4, [r7, #-68]
 80054a2: 27 90                        	str	r0, [sp, #156]
 80054a4: 88 b2                        	uxth	r0, r1
 80054a6: 00 0a                        	lsrs	r0, r0, #8
 80054a8: 8e 9e                        	ldr	r6, [sp, #568]
 80054aa: 89 90                        	str	r0, [sp, #548]
 80054ac: f9 98                        	ldr	r0, [sp, #996]
 80054ae: a0 90                        	str	r0, [sp, #640]
 80054b0: 90 b2                        	uxth	r0, r2
 80054b2: 00 0a                        	lsrs	r0, r0, #8
 80054b4: 72 91                        	str	r1, [sp, #456]
 80054b6: a1 90                        	str	r0, [sp, #644]
 80054b8: 57 f8 48 0c                  	ldr	r0, [r7, #-72]
 80054bc: ff 90                        	str	r0, [sp, #1020]
 80054be: 20 0c                        	lsrs	r0, r4, #16
 80054c0: a3 90                        	str	r0, [sp, #652]
 80054c2: 88 98                        	ldr	r0, [sp, #544]
 80054c4: 57 f8 40 5c                  	ldr	r5, [r7, #-64]
 80054c8: cd f8 94 a0                  	str.w	r10, [sp, #148]
 80054cc: 4f ea 14 2a                  	lsr.w	r10, r4, #8
 80054d0: 00 0a                        	lsrs	r0, r0, #8
 80054d2: cd f8 e4 90                  	str.w	r9, [sp, #228]
 80054d6: 2a 90                        	str	r0, [sp, #168]
 80054d8: 08 0e                        	lsrs	r0, r1, #24
 80054da: 58 90                        	str	r0, [sp, #352]
 80054dc: 08 0c                        	lsrs	r0, r1, #16
 80054de: 6f 90                        	str	r0, [sp, #444]
 80054e0: 30 0e                        	lsrs	r0, r6, #24
 80054e2: 8d 90                        	str	r0, [sp, #564]
 80054e4: 30 0c                        	lsrs	r0, r6, #16
 80054e6: 8c 90                        	str	r0, [sp, #560]
 80054e8: 30 0a                        	lsrs	r0, r6, #8
 80054ea: 8b 90                        	str	r0, [sp, #556]
 80054ec: 10 0c                        	lsrs	r0, r2, #16
 80054ee: a2 90                        	str	r0, [sp, #648]
 80054f0: 4f ea 1c 60                  	lsr.w	r0, r12, #24
 80054f4: 2d 90                        	str	r0, [sp, #180]
 80054f6: 4f ea 1c 40                  	lsr.w	r0, r12, #16
 80054fa: 2c 90                        	str	r0, [sp, #176]
 80054fc: 4f ea 18 60                  	lsr.w	r0, r8, #24
 8005500: 2f 90                        	str	r0, [sp, #188]
 8005502: 4f ea 18 40                  	lsr.w	r0, r8, #16
 8005506: 76 99                        	ldr	r1, [sp, #472]
 8005508: 2b 0c                        	lsrs	r3, r5, #16
 800550a: 2e 90                        	str	r0, [sp, #184]
 800550c: 4f ea 19 60                  	lsr.w	r0, r9, #24
 8005510: 31 90                        	str	r0, [sp, #196]
 8005512: 4f ea 19 40                  	lsr.w	r0, r9, #16
 8005516: 30 90                        	str	r0, [sp, #192]
 8005518: 08 0e                        	lsrs	r0, r1, #24
 800551a: 35 90                        	str	r0, [sp, #212]
 800551c: 08 0c                        	lsrs	r0, r1, #16
 800551e: 77 99                        	ldr	r1, [sp, #476]
 8005520: 99 46                        	mov	r9, r3
 8005522: 33 90                        	str	r0, [sp, #204]
 8005524: cd f8 ac b0                  	str.w	r11, [sp, #172]
 8005528: 08 0e                        	lsrs	r0, r1, #24
 800552a: cd f8 00 e4                  	str.w	lr, [sp, #1024]
 800552e: 38 90                        	str	r0, [sp, #224]
 8005530: 08 0c                        	lsrs	r0, r1, #16
 8005532: 78 99                        	ldr	r1, [sp, #480]
 8005534: 37 90                        	str	r0, [sp, #220]
 8005536: 92 94                        	str	r4, [sp, #584]
 8005538: 08 0e                        	lsrs	r0, r1, #24
 800553a: 9b 92                        	str	r2, [sp, #620]
 800553c: 3b 90                        	str	r0, [sp, #236]
 800553e: 08 0c                        	lsrs	r0, r1, #16
 8005540: 79 99                        	ldr	r1, [sp, #484]
 8005542: 3a 90                        	str	r0, [sp, #232]
 8005544: cd f8 c8 c0                  	str.w	r12, [sp, #200]
 8005548: 08 0e                        	lsrs	r0, r1, #24
 800554a: cd f8 d8 80                  	str.w	r8, [sp, #216]
 800554e: 3d 90                        	str	r0, [sp, #244]
 8005550: 08 0c                        	lsrs	r0, r1, #16
 8005552: 7a 99                        	ldr	r1, [sp, #488]
 8005554: 3c 90                        	str	r0, [sp, #240]
 8005556: 08 0e                        	lsrs	r0, r1, #24
 8005558: 3f 90                        	str	r0, [sp, #252]
 800555a: 08 0c                        	lsrs	r0, r1, #16
 800555c: 7b 99                        	ldr	r1, [sp, #492]
 800555e: 3e 90                        	str	r0, [sp, #248]
 8005560: 08 0e                        	lsrs	r0, r1, #24
 8005562: 41 90                        	str	r0, [sp, #260]
 8005564: 08 0c                        	lsrs	r0, r1, #16
 8005566: 7c 99                        	ldr	r1, [sp, #496]
 8005568: 40 90                        	str	r0, [sp, #256]
 800556a: 08 0e                        	lsrs	r0, r1, #24
 800556c: 43 90                        	str	r0, [sp, #268]
 800556e: 08 0c                        	lsrs	r0, r1, #16
 8005570: 7e 99                        	ldr	r1, [sp, #504]
 8005572: 42 90                        	str	r0, [sp, #264]
 8005574: 08 0e                        	lsrs	r0, r1, #24
 8005576: 45 90                        	str	r0, [sp, #276]
 8005578: 08 0c                        	lsrs	r0, r1, #16
 800557a: 7f 99                        	ldr	r1, [sp, #508]
 800557c: 44 90                        	str	r0, [sp, #272]
 800557e: 08 0e                        	lsrs	r0, r1, #24
 8005580: 47 90                        	str	r0, [sp, #284]
 8005582: 08 0c                        	lsrs	r0, r1, #16
 8005584: 80 99                        	ldr	r1, [sp, #512]
 8005586: 46 90                        	str	r0, [sp, #280]
 8005588: 08 0e                        	lsrs	r0, r1, #24
 800558a: 4a 90                        	str	r0, [sp, #296]
 800558c: 08 0c                        	lsrs	r0, r1, #16
 800558e: 81 99                        	ldr	r1, [sp, #516]
 8005590: 49 90                        	str	r0, [sp, #292]
 8005592: 08 0e                        	lsrs	r0, r1, #24
 8005594: 4c 90                        	str	r0, [sp, #304]
 8005596: 08 0c                        	lsrs	r0, r1, #16
 8005598: 82 99                        	ldr	r1, [sp, #520]
 800559a: 4b 90                        	str	r0, [sp, #300]
 800559c: 08 0e                        	lsrs	r0, r1, #24
 800559e: 4e 90                        	str	r0, [sp, #312]
 80055a0: 08 0c                        	lsrs	r0, r1, #16
 80055a2: 83 99                        	ldr	r1, [sp, #524]
 80055a4: 4d 90                        	str	r0, [sp, #308]
 80055a6: 08 0e                        	lsrs	r0, r1, #24
 80055a8: 6e 90                        	str	r0, [sp, #440]
 80055aa: 08 0c                        	lsrs	r0, r1, #16
 80055ac: 84 99                        	ldr	r1, [sp, #528]
 80055ae: 4f 90                        	str	r0, [sp, #316]
 80055b0: 08 0e                        	lsrs	r0, r1, #24
 80055b2: 51 90                        	str	r0, [sp, #324]
 80055b4: 08 0c                        	lsrs	r0, r1, #16
 80055b6: 7d 99                        	ldr	r1, [sp, #500]
 80055b8: 70 9a                        	ldr	r2, [sp, #448]
 80055ba: 50 90                        	str	r0, [sp, #320]
 80055bc: 37 f8 3a 8c                  	ldrh	r8, [r7, #-58]
 80055c0: 10 0e                        	lsrs	r0, r2, #24
 80055c2: 17 f8 3b 4c                  	ldrb	r4, [r7, #-59]
 80055c6: 54 90                        	str	r0, [sp, #336]
 80055c8: 10 0c                        	lsrs	r0, r2, #16
 80055ca: 85 9a                        	ldr	r2, [sp, #532]
 80055cc: 52 90                        	str	r0, [sp, #328]
 80055ce: 10 0e                        	lsrs	r0, r2, #24
 80055d0: 55 90                        	str	r0, [sp, #340]
 80055d2: 10 0c                        	lsrs	r0, r2, #16
 80055d4: 53 90                        	str	r0, [sp, #332]
 80055d6: 08 0e                        	lsrs	r0, r1, #24
 80055d8: 56 90                        	str	r0, [sp, #344]
 80055da: 08 0c                        	lsrs	r0, r1, #16
 80055dc: 75 99                        	ldr	r1, [sp, #468]
 80055de: 48 90                        	str	r0, [sp, #288]
 80055e0: 08 0e                        	lsrs	r0, r1, #24
 80055e2: 57 90                        	str	r0, [sp, #348]
 80055e4: 08 0c                        	lsrs	r0, r1, #16
 80055e6: 1e 99                        	ldr	r1, [sp, #120]
 80055e8: 34 90                        	str	r0, [sp, #208]
 80055ea: 08 0e                        	lsrs	r0, r1, #24
 80055ec: 8a 90                        	str	r0, [sp, #552]
 80055ee: 08 0c                        	lsrs	r0, r1, #16
 80055f0: 86 90                        	str	r0, [sp, #536]
 80055f2: 08 0a                        	lsrs	r0, r1, #8
 80055f4: 73 90                        	str	r0, [sp, #460]
 80055f6: bd f8 0a 04                  	ldrh.w	r0, [sp, #1034]
 80055fa: 99 90                        	str	r0, [sp, #612]
;         match event_code {
 80055fc: 00 0a                        	lsrs	r0, r0, #8
 80055fe: 98 90                        	str	r0, [sp, #608]
 8005600: dd f8 06 04                  	ldr.w	r0, [sp, #1030]
 8005604: a7 90                        	str	r0, [sp, #668]
 8005606: bd f8 04 04                  	ldrh.w	r0, [sp, #1028]
 800560a: 23 90                        	str	r0, [sp, #140]
 800560c: 01 0a                        	lsrs	r1, r0, #8
 800560e: a9 98                        	ldr	r0, [sp, #676]
 8005610: 91 90                        	str	r0, [sp, #580]
 8005612: 00 20                        	movs	r0, #0
 8005614: 33 46                        	mov	r3, r6
 8005616: dd f8 5c c2                  	ldr.w	r12, [sp, #604]
 800561a: fa f7 c8 bf                  	b.w	#-20592 <$t.2+0x1f0>
 800561e: 03 20                        	movs	r0, #3
;         Err(v)
 8005620: cd e9 fd 10                  	strd	r1, r0, [sp, #1012]
 8005624: 01 20                        	movs	r0, #1
 8005626: 8d f8 f0 03                  	strb.w	r0, [sp, #1008]
 800562a: fe f7 be bd                  	b.w	#-5252 <$t.24+0x28>
 800562e: 01 20                        	movs	r0, #1
 8005630: 10 22                        	movs	r2, #16
 8005632: 4f f0 00 0a                  	mov.w	r10, #0
 8005636: 00 26                        	movs	r6, #0
 8005638: 00 23                        	movs	r3, #0
 800563a: 00 f0 30 be                  	b.w	#3168 <$t.24+0x211c>
 800563e: 00 20                        	movs	r0, #0
 8005640: 03 24                        	movs	r4, #3
 8005642: 0e 90                        	str	r0, [sp, #56]
 8005644: 02 20                        	movs	r0, #2
 8005646: 14 90                        	str	r0, [sp, #80]
 8005648: 03 20                        	movs	r0, #3
 800564a: b8 e0                        	b	#368 <$t.24+0x163c>
 800564c: 00 20                        	movs	r0, #0
 800564e: 11 24                        	movs	r4, #17
 8005650: 0e 90                        	str	r0, [sp, #56]
 8005652: 02 20                        	movs	r0, #2
 8005654: 14 90                        	str	r0, [sp, #80]
 8005656: 11 20                        	movs	r0, #17
 8005658: b1 e0                        	b	#354 <$t.24+0x163c>
 800565a: 02 20                        	movs	r0, #2
 800565c: 09 24                        	movs	r4, #9
 800565e: 14 90                        	str	r0, [sp, #80]
 8005660: 09 20                        	movs	r0, #9
 8005662: ac e0                        	b	#344 <$t.24+0x163c>
 8005664: 00 20                        	movs	r0, #0
 8005666: 04 24                        	movs	r4, #4
 8005668: 0e 90                        	str	r0, [sp, #56]
 800566a: 02 20                        	movs	r0, #2
 800566c: 14 90                        	str	r0, [sp, #80]
 800566e: 04 20                        	movs	r0, #4
 8005670: a5 e0                        	b	#330 <$t.24+0x163c>
 8005672: 00 20                        	movs	r0, #0
 8005674: 02 25                        	movs	r5, #2
 8005676: 01 23                        	movs	r3, #1
 8005678: 00 21                        	movs	r1, #0
 800567a: 92 9a                        	ldr	r2, [sp, #584]
;         self
 800567c: 40 ea 05 06                  	orr.w	r6, r0, r5
 8005680: d2 b2                        	uxtb	r2, r2
 8005682: 46 ea 02 22                  	orr.w	r2, r6, r2, lsl #8
;             crate::opcode::LE_RAND => ReturnParameters::LeRand(to_random_number(&bytes[3..])?),
 8005686: 83 bb                        	cbnz	r3, #96
 8005688: 44 ea 01 00                  	orr.w	r0, r4, r1
 800568c: cd f8 e6 23                  	str.w	r2, [sp, #998]
 8005690: 08 43                        	orrs	r0, r1
 8005692: cd f8 ea 03                  	str.w	r0, [sp, #1002]
 8005696: 1c 20                        	movs	r0, #28
 8005698: 3b e0                        	b	#118 <$t.24+0x1590>
 800569a: 00 20                        	movs	r0, #0
 800569c: 02 24                        	movs	r4, #2
 800569e: 0e 90                        	str	r0, [sp, #56]
 80056a0: 02 20                        	movs	r0, #2
 80056a2: 14 90                        	str	r0, [sp, #80]
 80056a4: 02 20                        	movs	r0, #2
 80056a6: 8a e0                        	b	#276 <$t.24+0x163c>
 80056a8: 02 20                        	movs	r0, #2
 80056aa: 00 22                        	movs	r2, #0
 80056ac: 14 90                        	str	r0, [sp, #80]
 80056ae: 00 20                        	movs	r0, #0
 80056b0: 00 25                        	movs	r5, #0
 80056b2: 00 23                        	movs	r3, #0
;         Err(v)
 80056b4: 28 43                        	orrs	r0, r5
 80056b6: a4 91                        	str	r1, [sp, #656]
 80056b8: 10 43                        	orrs	r0, r2
 80056ba: a6 90                        	str	r0, [sp, #664]
 80056bc: 42 ea 02 00                  	orr.w	r0, r2, r2
 80056c0: 03 43                        	orrs	r3, r0
 80056c2: 7e e0                        	b	#252 <$t.24+0x1640>
 80056c4: 08 20                        	movs	r0, #8
 80056c6: a4 91                        	str	r1, [sp, #656]
 80056c8: a6 90                        	str	r0, [sp, #664]
 80056ca: 02 20                        	movs	r0, #2
 80056cc: 14 90                        	str	r0, [sp, #80]
 80056ce: 00 20                        	movs	r0, #0
 80056d0: 0e 90                        	str	r0, [sp, #56]
 80056d2: 76 e0                        	b	#236 <$t.24+0x1640>
 80056d4: 00 20                        	movs	r0, #0
 80056d6: 02 25                        	movs	r5, #2
 80056d8: 01 23                        	movs	r3, #1
 80056da: 00 21                        	movs	r1, #0
 80056dc: 92 9a                        	ldr	r2, [sp, #584]
;         self
 80056de: 40 ea 05 06                  	orr.w	r6, r0, r5
 80056e2: d2 b2                        	uxtb	r2, r2
 80056e4: 46 ea 02 22                  	orr.w	r2, r6, r2, lsl #8
;                 ReturnParameters::ReadLocalSupportedFeatures(to_supported_features(&bytes[3..])?)
 80056e8: 5b b1                        	cbz	r3, #22
 80056ea: 00 0c                        	lsrs	r0, r0, #16
 80056ec: 14 95                        	str	r5, [sp, #80]
 80056ee: 40 ea 01 40                  	orr.w	r0, r0, r1, lsl #16
 80056f2: 0e 90                        	str	r0, [sp, #56]
 80056f4: 92 98                        	ldr	r0, [sp, #584]
 80056f6: c0 b2                        	uxtb	r0, r0
 80056f8: a6 90                        	str	r0, [sp, #664]
 80056fa: 90 b2                        	uxth	r0, r2
 80056fc: 00 0a                        	lsrs	r0, r0, #8
 80056fe: a4 90                        	str	r0, [sp, #656]
 8005700: 5e e0                        	b	#188 <$t.24+0x163e>
 8005702: 44 ea 01 00                  	orr.w	r0, r4, r1
 8005706: cd f8 e6 23                  	str.w	r2, [sp, #998]
 800570a: 08 43                        	orrs	r0, r1
 800570c: cd f8 ea 03                  	str.w	r0, [sp, #1002]
 8005710: 06 20                        	movs	r0, #6
 8005712: 14 90                        	str	r0, [sp, #80]
 8005714: 00 20                        	movs	r0, #0
 8005716: a5 90                        	str	r0, [sp, #660]
 8005718: 00 20                        	movs	r0, #0
 800571a: 1b 90                        	str	r0, [sp, #108]
 800571c: dd f8 48 b0                  	ldr.w	r11, [sp, #72]
 8005720: dd f8 44 c0                  	ldr.w	r12, [sp, #68]
;         Ok(CommandComplete::<V> {
 8005724: dd f8 e2 03                  	ldr.w	r0, [sp, #994]
 8005728: a9 90                        	str	r0, [sp, #676]
 800572a: 4f ea 1b 42                  	lsr.w	r2, r11, #16
 800572e: dd f8 e6 03                  	ldr.w	r0, [sp, #998]
 8005732: 4f ea 1b 61                  	lsr.w	r1, r11, #24
 8005736: bd f8 e0 83                  	ldrh.w	r8, [sp, #992]
 800573a: 4f ea 1c 6a                  	lsr.w	r10, r12, #24
 800573e: dd e9 13 4e                  	ldrd	r4, lr, [sp, #76]
 8005742: 4f ea 1c 25                  	lsr.w	r5, r12, #8
 8005746: a6 90                        	str	r0, [sp, #664]
 8005748: dd f8 ea 03                  	ldr.w	r0, [sp, #1002]
 800574c: 1d 92                        	str	r2, [sp, #116]
 800574e: 4f ea 1b 22                  	lsr.w	r2, r11, #8
 8005752: 96 90                        	str	r0, [sp, #600]
 8005754: 4f ea 1c 40                  	lsr.w	r0, r12, #16
 8005758: a7 91                        	str	r1, [sp, #668]
 800575a: 00 21                        	movs	r1, #0
;             num_hci_command_packets: bytes[0],
 800575c: 1c 92                        	str	r2, [sp, #112]
 800575e: 9d f8 ab 22                  	ldrb.w	r2, [sp, #683]
;         Ok(CommandComplete::<V> {
 8005762: 28 92                        	str	r2, [sp, #160]
 8005764: 38 e0                        	b	#112 <$t.24+0x1656>
 8005766: 02 20                        	movs	r0, #2
 8005768: 4f f0 00 0b                  	mov.w	r11, #0
 800576c: 14 90                        	str	r0, [sp, #80]
 800576e: 00 24                        	movs	r4, #0
 8005770: 00 20                        	movs	r0, #0
 8005772: 0e 90                        	str	r0, [sp, #56]
;         self
 8005774: dd f8 25 15                  	ldr.w	r1, [sp, #1317]
;         Err(v)
 8005778: 42 ea 0b 02                  	orr.w	r2, r2, r11
;         self
 800577c: 1b 93                        	str	r3, [sp, #108]
;         Err(v)
 800577e: 44 ea 0b 03                  	orr.w	r3, r4, r11
 8005782: a9 9c                        	ldr	r4, [sp, #676]
 8005784: 43 ea 11 63                  	orr.w	r3, r3, r1, lsr #24
 8005788: 42 ea 01 21                  	orr.w	r1, r2, r1, lsl #8
 800578c: 2a 0c                        	lsrs	r2, r5, #16
 800578e: a6 91                        	str	r1, [sp, #664]
 8005790: 29 0e                        	lsrs	r1, r5, #24
 8005792: 13 92                        	str	r2, [sp, #76]
 8005794: 2a 0a                        	lsrs	r2, r5, #8
;         self
 8005796: 91 96                        	str	r6, [sp, #580]
 8005798: cd f8 60 e0                  	str.w	lr, [sp, #96]
;         Err(v)
 800579c: 1a 91                        	str	r1, [sp, #104]
 800579e: 17 95                        	str	r5, [sp, #92]
 80057a0: 19 92                        	str	r2, [sp, #100]
 80057a2: 0e e0                        	b	#28 <$t.24+0x1640>
 80057a4: 02 20                        	movs	r0, #2
 80057a6: 00 23                        	movs	r3, #0
 80057a8: 14 90                        	str	r0, [sp, #80]
 80057aa: 09 24                        	movs	r4, #9
 80057ac: 09 20                        	movs	r0, #9
 80057ae: a6 90                        	str	r0, [sp, #664]
 80057b0: 07 e0                        	b	#14 <$t.24+0x1640>
 80057b2: 00 20                        	movs	r0, #0
 80057b4: 07 24                        	movs	r4, #7
 80057b6: 0e 90                        	str	r0, [sp, #56]
 80057b8: 02 20                        	movs	r0, #2
 80057ba: 14 90                        	str	r0, [sp, #80]
 80057bc: 07 20                        	movs	r0, #7
 80057be: a6 90                        	str	r0, [sp, #664]
 80057c0: 00 23                        	movs	r3, #0
 80057c2: a9 94                        	str	r4, [sp, #676]
 80057c4: 01 21                        	movs	r1, #1
 80057c6: 96 93                        	str	r3, [sp, #600]
 80057c8: dd e9 12 b4                  	ldrd	r11, r4, [sp, #72]
 80057cc: dd e9 10 ac                  	ldrd	r10, r12, [sp, #64]
 80057d0: dd f8 50 e0                  	ldr.w	lr, [sp, #80]
 80057d4: dd e9 0e 85                  	ldrd	r8, r5, [sp, #56]
;         self
 80057d8: dd f8 1b 34                  	ldr.w	r3, [sp, #1051]
 80057dc: c0 b2                        	uxtb	r0, r0
 80057de: cd f8 cf 33                  	str.w	r3, [sp, #975]
 80057e2: 00 04                        	lsls	r0, r0, #16
 80057e4: a4 9b                        	ldr	r3, [sp, #656]
 80057e6: 40 ea 0a 60                  	orr.w	r0, r0, r10, lsl #24
 80057ea: dd f8 18 24                  	ldr.w	r2, [sp, #1048]
;             )?)),
 80057ee: 00 29                        	cmp	r1, #0
;         self
 80057f0: f3 92                        	str	r2, [sp, #972]
 80057f2: 5f fa 8e f2                  	uxtb.w	r2, lr
 80057f6: 42 ea 03 22                  	orr.w	r2, r2, r3, lsl #8
 80057fa: c2 ea 08 49                  	pkhbt	r9, r2, r8, lsl #16
 80057fe: ea b2                        	uxtb	r2, r5
 8005800: 40 ea 02 20                  	orr.w	r0, r0, r2, lsl #8
 8005804: 5f fa 8c f2                  	uxtb.w	r2, r12
 8005808: 00 eb 02 0e                  	add.w	lr, r0, r2
 800580c: 1a 9a                        	ldr	r2, [sp, #104]
 800580e: e0 b2                        	uxtb	r0, r4
 8005810: 4f ea 00 40                  	lsl.w	r0, r0, #16
 8005814: 5f fa 82 fa                  	uxtb.w	r10, r2
 8005818: a7 9a                        	ldr	r2, [sp, #668]
 800581a: 40 ea 0a 63                  	orr.w	r3, r0, r10, lsl #24
 800581e: 19 98                        	ldr	r0, [sp, #100]
 8005820: 5f fa 82 fc                  	uxtb.w	r12, r2
 8005824: c0 b2                        	uxtb	r0, r0
 8005826: 43 ea 00 26                  	orr.w	r6, r3, r0, lsl #8
 800582a: 17 98                        	ldr	r0, [sp, #92]
 800582c: c0 b2                        	uxtb	r0, r0
 800582e: 06 eb 00 08                  	add.w	r8, r6, r0
 8005832: 1d 98                        	ldr	r0, [sp, #116]
 8005834: c0 b2                        	uxtb	r0, r0
 8005836: 4f ea 00 40                  	lsl.w	r0, r0, #16
 800583a: 40 ea 0c 64                  	orr.w	r4, r0, r12, lsl #24
 800583e: 1c 98                        	ldr	r0, [sp, #112]
 8005840: c0 b2                        	uxtb	r0, r0
 8005842: 44 ea 00 25                  	orr.w	r5, r4, r0, lsl #8
 8005846: 5f fa 8b f0                  	uxtb.w	r0, r11
 800584a: 05 eb 00 02                  	add.w	r2, r5, r0
;             )?)),
 800584e: 46 d0                        	beq	#140 <$t.24+0x175c>
;         Err(v)
 8005850: a6 98                        	ldr	r0, [sp, #664]
 8005852: 47 f8 40 0c                  	str	r0, [r7, #-64]
 8005856: 15 98                        	ldr	r0, [sp, #84]
 8005858: 8d f8 b9 03                  	strb.w	r0, [sp, #953]
 800585c: 16 98                        	ldr	r0, [sp, #88]
 800585e: 8d f8 b8 03                  	strb.w	r0, [sp, #952]
 8005862: 94 98                        	ldr	r0, [sp, #592]
 8005864: 8d f8 b1 03                  	strb.w	r0, [sp, #945]
 8005868: 93 98                        	ldr	r0, [sp, #588]
 800586a: 8d f8 b0 03                  	strb.w	r0, [sp, #944]
 800586e: 18 98                        	ldr	r0, [sp, #96]
 8005870: 8d f8 af 03                  	strb.w	r0, [sp, #943]
 8005874: 91 98                        	ldr	r0, [sp, #580]
 8005876: 8d f8 ae 03                  	strb.w	r0, [sp, #942]
 800587a: 90 98                        	ldr	r0, [sp, #576]
 800587c: 8d f8 ad 03                  	strb.w	r0, [sp, #941]
 8005880: 1f 98                        	ldr	r0, [sp, #124]
 8005882: 8d f8 ac 03                  	strb.w	r0, [sp, #940]
 8005886: 96 98                        	ldr	r0, [sp, #600]
 8005888: 47 f8 3c 0c                  	str	r0, [r7, #-60]
 800588c: a9 98                        	ldr	r0, [sp, #676]
 800588e: 47 f8 44 0c                  	str	r0, [r7, #-68]
 8005892: 92 98                        	ldr	r0, [sp, #584]
;         self
 8005894: 1b 99                        	ldr	r1, [sp, #108]
;         Err(v)
 8005896: cd f8 b4 e3                  	str.w	lr, [sp, #948]
 800589a: 0d f5 83 6e                  	add.w	lr, sp, #1048
 800589e: c0 b2                        	uxtb	r0, r0
 80058a0: 47 f8 48 9c                  	str	r9, [r7, #-72]
 80058a4: 40 ea 02 20                  	orr.w	r0, r0, r2, lsl #8
;         self
 80058a8: 96 90                        	str	r0, [sp, #600]
 80058aa: a5 98                        	ldr	r0, [sp, #660]
 80058ac: cd f8 9c 82                  	str.w	r8, [sp, #668]
 80058b0: cd f8 a4 a2                  	str.w	r10, [sp, #676]
 80058b4: c0 b2                        	uxtb	r0, r0
 80058b6: cd e9 a5 63                  	strd	r6, r3, [sp, #660]
 80058ba: 00 02                        	lsls	r0, r0, #8
 80058bc: 40 ea 01 40                  	orr.w	r0, r0, r1, lsl #16
 80058c0: 8f 99                        	ldr	r1, [sp, #572]
 80058c2: c9 b2                        	uxtb	r1, r1
 80058c4: 08 44                        	add	r0, r1
;         Err(v)
 80058c6: 00 02                        	lsls	r0, r0, #8
 80058c8: 40 ea 12 60                  	orr.w	r0, r0, r2, lsr #24
 80058cc: a4 90                        	str	r0, [sp, #656]
 80058ce: dd f8 9c a0                  	ldr.w	r10, [sp, #156]
 80058d2: dd f8 8c b0                  	ldr.w	r11, [sp, #140]
 80058d6: dd f8 54 82                  	ldr.w	r8, [sp, #596]
 80058da: fa f7 df bd                  	b.w	#-21570 <$t.2+0xde>
 80058de: a7 92                        	str	r2, [sp, #668]
;             0x0E => Ok(Event::CommandComplete(command::CommandComplete::new(
 80058e0: dd f8 cf 23                  	ldr.w	r2, [sp, #975]
 80058e4: f3 98                        	ldr	r0, [sp, #972]
 80058e6: cd f8 0f 24                  	str.w	r2, [sp, #1039]
 80058ea: cd f8 0c 04                  	str.w	r0, [sp, #1036]
 80058ee: 04 20                        	movs	r0, #4
 80058f0: 07 f8 48 0c                  	strb	r0, [r7, #-72]
 80058f4: 98 98                        	ldr	r0, [sp, #608]
 80058f6: 8d f8 b9 03                  	strb.w	r0, [sp, #953]
 80058fa: 99 98                        	ldr	r0, [sp, #612]
 80058fc: 8d f8 b8 03                  	strb.w	r0, [sp, #952]
 8005900: 15 98                        	ldr	r0, [sp, #84]
 8005902: 8d f8 b1 03                  	strb.w	r0, [sp, #945]
 8005906: 16 98                        	ldr	r0, [sp, #88]
 8005908: 8d f8 b0 03                  	strb.w	r0, [sp, #944]
 800590c: a9 98                        	ldr	r0, [sp, #676]
 800590e: cd f8 ac e3                  	str.w	lr, [sp, #940]
 8005912: 47 f8 3c 0c                  	str	r0, [r7, #-60]
 8005916: 20 0c                        	lsrs	r0, r4, #16
 8005918: 1b 9a                        	ldr	r2, [sp, #108]
 800591a: dd f8 78 e0                  	ldr.w	lr, [sp, #120]
 800591e: 99 90                        	str	r0, [sp, #612]
 8005920: 28 0a                        	lsrs	r0, r5, #8
 8005922: f1 99                        	ldr	r1, [sp, #964]
 8005924: a9 90                        	str	r0, [sp, #676]
 8005926: 18 98                        	ldr	r0, [sp, #96]
 8005928: dd f8 c7 63                  	ldr.w	r6, [sp, #967]
 800592c: 47 f8 47 1c                  	str	r1, [r7, #-71]
 8005930: 47 f8 40 9c                  	str	r9, [r7, #-64]
 8005934: 47 f8 44 6c                  	str	r6, [r7, #-68]
 8005938: cd f8 b4 83                  	str.w	r8, [sp, #948]
 800593c: 98 90                        	str	r0, [sp, #608]
 800593e: cd f8 90 c2                  	str.w	r12, [sp, #656]
 8005942: dd f8 7c a0                  	ldr.w	r10, [sp, #124]
 8005946: dd f8 9c 80                  	ldr.w	r8, [sp, #156]
 800594a: 23 99                        	ldr	r1, [sp, #140]
 800594c: dd f8 5c b2                  	ldr.w	r11, [sp, #604]
 8005950: dd f8 68 c2                  	ldr.w	r12, [sp, #616]
 8005954: a8 9d                        	ldr	r5, [sp, #672]
;             Ok(t) => Ok(t),
 8005956: dd f8 94 92                  	ldr.w	r9, [sp, #660]
 800595a: 57 e9 12 06                  	ldrd	r0, r6, [r7, #-72]
 800595e: 85 f8 27 20                  	strb.w	r2, [r5, #39]
 8005962: 8f 9a                        	ldr	r2, [sp, #572]
 8005964: 57 e9 10 34                  	ldrd	r3, r4, [r7, #-64]
 8005968: 85 f8 28 80                  	strb.w	r8, [r5, #40]
 800596c: d2 b2                        	uxtb	r2, r2
 800596e: 42 ea 09 22                  	orr.w	r2, r2, r9, lsl #8
 8005972: a5 f8 25 20                  	strh.w	r2, [r5, #37]
 8005976: ca b2                        	uxtb	r2, r1
 8005978: 95 99                        	ldr	r1, [sp, #596]
 800597a: 4f f0 00 09                  	mov.w	r9, #0
 800597e: 42 ea 01 22                  	orr.w	r2, r2, r1, lsl #8
 8005982: 2a 86                        	strh	r2, [r5, #48]
 8005984: 9f 9a                        	ldr	r2, [sp, #636]
 8005986: 85 f8 2f 20                  	strb.w	r2, [r5, #47]
 800598a: 9e 9a                        	ldr	r2, [sp, #632]
 800598c: 85 f8 2e 20                  	strb.w	r2, [r5, #46]
 8005990: 9c 9a                        	ldr	r2, [sp, #624]
 8005992: 85 f8 29 20                  	strb.w	r2, [r5, #41]
 8005996: 92 9a                        	ldr	r2, [sp, #584]
 8005998: 85 f8 20 20                  	strb.w	r2, [r5, #32]
 800599c: c5 e9 02 06                  	strd	r0, r6, [r5, #8]
 80059a0: a6 98                        	ldr	r0, [sp, #664]
 80059a2: c5 e9 04 34                  	strd	r3, r4, [r5, #16]
 80059a6: a8 61                        	str	r0, [r5, #24]
 80059a8: 96 98                        	ldr	r0, [sp, #600]
 80059aa: e8 61                        	str	r0, [r5, #28]
 80059ac: a4 98                        	ldr	r0, [sp, #656]
 80059ae: 99 9a                        	ldr	r2, [sp, #612]
 80059b0: a1 99                        	ldr	r1, [sp, #644]
 80059b2: 00 06                        	lsls	r0, r0, #24
 80059b4: bd f8 b8 33                  	ldrh.w	r3, [sp, #952]
 80059b8: 62 f3 17 40                  	bfi	r0, r2, #16, #8
 80059bc: a9 9a                        	ldr	r2, [sp, #676]
 80059be: 90 9e                        	ldr	r6, [sp, #576]
 80059c0: 85 f8 42 a0                  	strb.w	r10, [r5, #66]
 80059c4: d2 b2                        	uxtb	r2, r2
 80059c6: 85 f8 48 e0                  	strb.w	lr, [r5, #72]
 80059ca: 40 ea 02 20                  	orr.w	r0, r0, r2, lsl #8
 80059ce: a7 9a                        	ldr	r2, [sp, #668]
 80059d0: 85 f8 43 60                  	strb.w	r6, [r5, #67]
 80059d4: eb 86                        	strh	r3, [r5, #54]
 80059d6: d2 b2                        	uxtb	r2, r2
 80059d8: 10 44                        	add	r0, r2
 80059da: c5 f8 21 00                  	str.w	r0, [r5, #33]
 80059de: a3 98                        	ldr	r0, [sp, #652]
 80059e0: a0 9a                        	ldr	r2, [sp, #640]
 80059e2: c0 b2                        	uxtb	r0, r0
 80059e4: 00 04                        	lsls	r0, r0, #16
 80059e6: 40 ea 02 60                  	orr.w	r0, r0, r2, lsl #24
 80059ea: a2 9a                        	ldr	r2, [sp, #648]
 80059ec: d2 b2                        	uxtb	r2, r2
 80059ee: 40 ea 02 20                  	orr.w	r0, r0, r2, lsl #8
 80059f2: 9d 9a                        	ldr	r2, [sp, #628]
 80059f4: d2 b2                        	uxtb	r2, r2
 80059f6: 10 44                        	add	r0, r2
 80059f8: 2a 9a                        	ldr	r2, [sp, #168]
 80059fa: c5 f8 2a 00                  	str.w	r0, [r5, #42]
 80059fe: a5 f8 09 21                  	strh.w	r2, [r5, #265]
 8005a02: 10 0c                        	lsrs	r0, r2, #16
 8005a04: 73 9a                        	ldr	r2, [sp, #460]
 8005a06: 85 f8 0b 01                  	strb.w	r0, [r5, #267]
 8005a0a: 5f fa 8b f0                  	uxtb.w	r0, r11
 8005a0e: 40 ea 0c 20                  	orr.w	r0, r0, r12, lsl #8
 8005a12: a5 f8 40 00                  	strh.w	r0, [r5, #64]
 8005a16: 9b 98                        	ldr	r0, [sp, #620]
 8005a18: 85 f8 49 20                  	strb.w	r2, [r5, #73]
 8005a1c: ed 9a                        	ldr	r2, [sp, #948]
 8005a1e: c0 b2                        	uxtb	r0, r0
 8005a20: c5 f8 32 20                  	str.w	r2, [r5, #50]
 8005a24: 40 ea 01 20                  	orr.w	r0, r0, r1, lsl #8
 8005a28: 28 87                        	strh	r0, [r5, #56]
 8005a2a: 93 98                        	ldr	r0, [sp, #588]
 8005a2c: 94 99                        	ldr	r1, [sp, #592]
 8005a2e: c0 b2                        	uxtb	r0, r0
 8005a30: 00 04                        	lsls	r0, r0, #16
 8005a32: 40 ea 01 60                  	orr.w	r0, r0, r1, lsl #24
 8005a36: 98 99                        	ldr	r1, [sp, #608]
 8005a38: c9 b2                        	uxtb	r1, r1
 8005a3a: 40 ea 01 20                  	orr.w	r0, r0, r1, lsl #8
 8005a3e: 91 99                        	ldr	r1, [sp, #580]
 8005a40: c9 b2                        	uxtb	r1, r1
 8005a42: 08 44                        	add	r0, r1
 8005a44: 68 64                        	str	r0, [r5, #68]
 8005a46: 71 98                        	ldr	r0, [sp, #452]
 8005a48: 68 65                        	str	r0, [r5, #84]
 8005a4a: 6d 98                        	ldr	r0, [sp, #436]
 8005a4c: e8 65                        	str	r0, [r5, #92]
 8005a4e: 6c 98                        	ldr	r0, [sp, #432]
 8005a50: 68 66                        	str	r0, [r5, #100]
 8005a52: 6b 98                        	ldr	r0, [sp, #428]
 8005a54: e8 66                        	str	r0, [r5, #108]
 8005a56: 6a 98                        	ldr	r0, [sp, #424]
 8005a58: 68 67                        	str	r0, [r5, #116]
 8005a5a: 69 98                        	ldr	r0, [sp, #420]
 8005a5c: e8 67                        	str	r0, [r5, #124]
 8005a5e: 68 98                        	ldr	r0, [sp, #416]
 8005a60: c5 f8 84 00                  	str.w	r0, [r5, #132]
 8005a64: 67 98                        	ldr	r0, [sp, #412]
 8005a66: c5 f8 8c 00                  	str.w	r0, [r5, #140]
 8005a6a: 66 98                        	ldr	r0, [sp, #408]
 8005a6c: c5 f8 94 00                  	str.w	r0, [r5, #148]
 8005a70: 65 98                        	ldr	r0, [sp, #404]
 8005a72: c5 f8 9c 00                  	str.w	r0, [r5, #156]
 8005a76: 64 98                        	ldr	r0, [sp, #400]
 8005a78: c5 f8 a4 00                  	str.w	r0, [r5, #164]
 8005a7c: 63 98                        	ldr	r0, [sp, #396]
 8005a7e: c5 f8 ac 00                  	str.w	r0, [r5, #172]
 8005a82: 62 98                        	ldr	r0, [sp, #392]
 8005a84: c5 f8 b4 00                  	str.w	r0, [r5, #180]
 8005a88: 61 98                        	ldr	r0, [sp, #388]
 8005a8a: c5 f8 bc 00                  	str.w	r0, [r5, #188]
 8005a8e: 60 98                        	ldr	r0, [sp, #384]
 8005a90: c5 f8 c4 00                  	str.w	r0, [r5, #196]
 8005a94: 5f 98                        	ldr	r0, [sp, #380]
 8005a96: c5 f8 cc 00                  	str.w	r0, [r5, #204]
 8005a9a: 5e 98                        	ldr	r0, [sp, #376]
 8005a9c: c5 f8 d4 00                  	str.w	r0, [r5, #212]
 8005aa0: 5d 98                        	ldr	r0, [sp, #372]
 8005aa2: c5 f8 dc 00                  	str.w	r0, [r5, #220]
 8005aa6: 5c 98                        	ldr	r0, [sp, #368]
 8005aa8: c5 f8 e4 00                  	str.w	r0, [r5, #228]
 8005aac: 5b 98                        	ldr	r0, [sp, #364]
 8005aae: c5 f8 ec 00                  	str.w	r0, [r5, #236]
 8005ab2: 5a 98                        	ldr	r0, [sp, #360]
 8005ab4: c5 f8 f4 00                  	str.w	r0, [r5, #244]
 8005ab8: 59 98                        	ldr	r0, [sp, #356]
 8005aba: c5 f8 fc 00                  	str.w	r0, [r5, #252]
 8005abe: 74 98                        	ldr	r0, [sp, #464]
 8005ac0: c5 f8 00 01                  	str.w	r0, [r5, #256]
 8005ac4: 87 98                        	ldr	r0, [sp, #540]
 8005ac6: c5 f8 04 01                  	str.w	r0, [r5, #260]
 8005aca: 25 98                        	ldr	r0, [sp, #148]
 8005acc: c5 f8 10 01                  	str.w	r0, [r5, #272]
 8005ad0: 28 98                        	ldr	r0, [sp, #160]
 8005ad2: 85 f8 20 01                  	strb.w	r0, [r5, #288]
 8005ad6: 20 98                        	ldr	r0, [sp, #128]
 8005ad8: c5 f8 18 01                  	str.w	r0, [r5, #280]
 8005adc: 21 98                        	ldr	r0, [sp, #132]
 8005ade: c5 f8 1c 01                  	str.w	r0, [r5, #284]
 8005ae2: 22 98                        	ldr	r0, [sp, #136]
 8005ae4: a5 f8 16 01                  	strh.w	r0, [r5, #278]
 8005ae8: 29 98                        	ldr	r0, [sp, #164]
 8005aea: a5 f8 14 01                  	strh.w	r0, [r5, #276]
 8005aee: 24 98                        	ldr	r0, [sp, #144]
 8005af0: 85 f8 0f 01                  	strb.w	r0, [r5, #271]
 8005af4: 26 98                        	ldr	r0, [sp, #152]
 8005af6: 85 f8 0e 01                  	strb.w	r0, [r5, #270]
 8005afa: 2b 98                        	ldr	r0, [sp, #172]
 8005afc: a5 f8 0c 01                  	strh.w	r0, [r5, #268]
 8005b00: 88 98                        	ldr	r0, [sp, #544]
 8005b02: 85 f8 08 01                  	strb.w	r0, [r5, #264]
 8005b06: 2d 98                        	ldr	r0, [sp, #180]
 8005b08: 85 f8 fb 00                  	strb.w	r0, [r5, #251]
 8005b0c: 2c 98                        	ldr	r0, [sp, #176]
 8005b0e: 85 f8 fa 00                  	strb.w	r0, [r5, #250]
 8005b12: 32 98                        	ldr	r0, [sp, #200]
 8005b14: a5 f8 f8 00                  	strh.w	r0, [r5, #248]
 8005b18: 2f 98                        	ldr	r0, [sp, #188]
 8005b1a: 85 f8 f3 00                  	strb.w	r0, [r5, #243]
 8005b1e: 2e 98                        	ldr	r0, [sp, #184]
 8005b20: 85 f8 f2 00                  	strb.w	r0, [r5, #242]
 8005b24: 36 98                        	ldr	r0, [sp, #216]
 8005b26: a5 f8 f0 00                  	strh.w	r0, [r5, #240]
 8005b2a: 31 98                        	ldr	r0, [sp, #196]
 8005b2c: 85 f8 eb 00                  	strb.w	r0, [r5, #235]
 8005b30: 30 98                        	ldr	r0, [sp, #192]
 8005b32: 85 f8 ea 00                  	strb.w	r0, [r5, #234]
 8005b36: 39 98                        	ldr	r0, [sp, #228]
 8005b38: a5 f8 e8 00                  	strh.w	r0, [r5, #232]
 8005b3c: 35 98                        	ldr	r0, [sp, #212]
 8005b3e: 85 f8 e3 00                  	strb.w	r0, [r5, #227]
 8005b42: 33 98                        	ldr	r0, [sp, #204]
 8005b44: 85 f8 e2 00                  	strb.w	r0, [r5, #226]
 8005b48: 76 98                        	ldr	r0, [sp, #472]
 8005b4a: a5 f8 e0 00                  	strh.w	r0, [r5, #224]
 8005b4e: 38 98                        	ldr	r0, [sp, #224]
 8005b50: 85 f8 db 00                  	strb.w	r0, [r5, #219]
 8005b54: 37 98                        	ldr	r0, [sp, #220]
 8005b56: 85 f8 da 00                  	strb.w	r0, [r5, #218]
 8005b5a: 77 98                        	ldr	r0, [sp, #476]
 8005b5c: a5 f8 d8 00                  	strh.w	r0, [r5, #216]
 8005b60: 3b 98                        	ldr	r0, [sp, #236]
 8005b62: 85 f8 d3 00                  	strb.w	r0, [r5, #211]
 8005b66: 3a 98                        	ldr	r0, [sp, #232]
 8005b68: 85 f8 d2 00                  	strb.w	r0, [r5, #210]
 8005b6c: 78 98                        	ldr	r0, [sp, #480]
 8005b6e: a5 f8 d0 00                  	strh.w	r0, [r5, #208]
 8005b72: 3d 98                        	ldr	r0, [sp, #244]
 8005b74: 85 f8 cb 00                  	strb.w	r0, [r5, #203]
 8005b78: 3c 98                        	ldr	r0, [sp, #240]
 8005b7a: 85 f8 ca 00                  	strb.w	r0, [r5, #202]
 8005b7e: 79 98                        	ldr	r0, [sp, #484]
 8005b80: a5 f8 c8 00                  	strh.w	r0, [r5, #200]
 8005b84: 3f 98                        	ldr	r0, [sp, #252]
 8005b86: 85 f8 c3 00                  	strb.w	r0, [r5, #195]
 8005b8a: 3e 98                        	ldr	r0, [sp, #248]
 8005b8c: 85 f8 c2 00                  	strb.w	r0, [r5, #194]
 8005b90: 7a 98                        	ldr	r0, [sp, #488]
 8005b92: a5 f8 c0 00                  	strh.w	r0, [r5, #192]
 8005b96: 41 98                        	ldr	r0, [sp, #260]
 8005b98: 85 f8 bb 00                  	strb.w	r0, [r5, #187]
 8005b9c: 40 98                        	ldr	r0, [sp, #256]
 8005b9e: 85 f8 ba 00                  	strb.w	r0, [r5, #186]
 8005ba2: 7b 98                        	ldr	r0, [sp, #492]
 8005ba4: a5 f8 b8 00                  	strh.w	r0, [r5, #184]
 8005ba8: 43 98                        	ldr	r0, [sp, #268]
 8005baa: 85 f8 b3 00                  	strb.w	r0, [r5, #179]
 8005bae: 42 98                        	ldr	r0, [sp, #264]
 8005bb0: 85 f8 b2 00                  	strb.w	r0, [r5, #178]
 8005bb4: 7c 98                        	ldr	r0, [sp, #496]
 8005bb6: a5 f8 b0 00                  	strh.w	r0, [r5, #176]
 8005bba: 45 98                        	ldr	r0, [sp, #276]
 8005bbc: 85 f8 ab 00                  	strb.w	r0, [r5, #171]
 8005bc0: 44 98                        	ldr	r0, [sp, #272]
 8005bc2: 85 f8 aa 00                  	strb.w	r0, [r5, #170]
 8005bc6: 7e 98                        	ldr	r0, [sp, #504]
 8005bc8: a5 f8 a8 00                  	strh.w	r0, [r5, #168]
 8005bcc: 47 98                        	ldr	r0, [sp, #284]
 8005bce: 85 f8 a3 00                  	strb.w	r0, [r5, #163]
 8005bd2: 46 98                        	ldr	r0, [sp, #280]
 8005bd4: 85 f8 a2 00                  	strb.w	r0, [r5, #162]
 8005bd8: 7f 98                        	ldr	r0, [sp, #508]
 8005bda: a5 f8 a0 00                  	strh.w	r0, [r5, #160]
 8005bde: 4a 98                        	ldr	r0, [sp, #296]
 8005be0: 85 f8 9b 00                  	strb.w	r0, [r5, #155]
 8005be4: 49 98                        	ldr	r0, [sp, #292]
 8005be6: 85 f8 9a 00                  	strb.w	r0, [r5, #154]
 8005bea: 80 98                        	ldr	r0, [sp, #512]
 8005bec: a5 f8 98 00                  	strh.w	r0, [r5, #152]
 8005bf0: 4c 98                        	ldr	r0, [sp, #304]
 8005bf2: 85 f8 93 00                  	strb.w	r0, [r5, #147]
 8005bf6: 4b 98                        	ldr	r0, [sp, #300]
 8005bf8: 85 f8 92 00                  	strb.w	r0, [r5, #146]
 8005bfc: 81 98                        	ldr	r0, [sp, #516]
 8005bfe: a5 f8 90 00                  	strh.w	r0, [r5, #144]
 8005c02: 4e 98                        	ldr	r0, [sp, #312]
 8005c04: 85 f8 8b 00                  	strb.w	r0, [r5, #139]
 8005c08: 4d 98                        	ldr	r0, [sp, #308]
 8005c0a: 85 f8 8a 00                  	strb.w	r0, [r5, #138]
 8005c0e: 82 98                        	ldr	r0, [sp, #520]
 8005c10: a5 f8 88 00                  	strh.w	r0, [r5, #136]
 8005c14: 6e 98                        	ldr	r0, [sp, #440]
 8005c16: 85 f8 83 00                  	strb.w	r0, [r5, #131]
 8005c1a: 4f 98                        	ldr	r0, [sp, #316]
 8005c1c: 85 f8 82 00                  	strb.w	r0, [r5, #130]
 8005c20: 83 98                        	ldr	r0, [sp, #524]
 8005c22: a5 f8 80 00                  	strh.w	r0, [r5, #128]
 8005c26: 51 98                        	ldr	r0, [sp, #324]
 8005c28: 85 f8 7b 00                  	strb.w	r0, [r5, #123]
 8005c2c: 50 98                        	ldr	r0, [sp, #320]
 8005c2e: 85 f8 7a 00                  	strb.w	r0, [r5, #122]
 8005c32: 84 98                        	ldr	r0, [sp, #528]
 8005c34: a5 f8 78 00                  	strh.w	r0, [r5, #120]
 8005c38: 54 98                        	ldr	r0, [sp, #336]
 8005c3a: 85 f8 73 00                  	strb.w	r0, [r5, #115]
 8005c3e: 52 98                        	ldr	r0, [sp, #328]
 8005c40: 85 f8 72 00                  	strb.w	r0, [r5, #114]
 8005c44: 70 98                        	ldr	r0, [sp, #448]
 8005c46: a5 f8 70 00                  	strh.w	r0, [r5, #112]
 8005c4a: 55 98                        	ldr	r0, [sp, #340]
 8005c4c: 85 f8 6b 00                  	strb.w	r0, [r5, #107]
 8005c50: 53 98                        	ldr	r0, [sp, #332]
 8005c52: 85 f8 6a 00                  	strb.w	r0, [r5, #106]
 8005c56: 85 98                        	ldr	r0, [sp, #532]
 8005c58: a5 f8 68 00                  	strh.w	r0, [r5, #104]
 8005c5c: 56 98                        	ldr	r0, [sp, #344]
 8005c5e: 85 f8 63 00                  	strb.w	r0, [r5, #99]
 8005c62: 48 98                        	ldr	r0, [sp, #288]
 8005c64: 85 f8 62 00                  	strb.w	r0, [r5, #98]
 8005c68: 7d 98                        	ldr	r0, [sp, #500]
 8005c6a: a5 f8 60 00                  	strh.w	r0, [r5, #96]
 8005c6e: 57 98                        	ldr	r0, [sp, #348]
 8005c70: 85 f8 5b 00                  	strb.w	r0, [r5, #91]
 8005c74: 34 98                        	ldr	r0, [sp, #208]
 8005c76: 85 f8 5a 00                  	strb.w	r0, [r5, #90]
 8005c7a: 75 98                        	ldr	r0, [sp, #468]
 8005c7c: a5 f8 58 00                  	strh.w	r0, [r5, #88]
 8005c80: 58 98                        	ldr	r0, [sp, #352]
 8005c82: 85 f8 53 00                  	strb.w	r0, [r5, #83]
 8005c86: 6f 98                        	ldr	r0, [sp, #444]
 8005c88: 85 f8 52 00                  	strb.w	r0, [r5, #82]
 8005c8c: 89 98                        	ldr	r0, [sp, #548]
 8005c8e: 85 f8 51 00                  	strb.w	r0, [r5, #81]
 8005c92: 72 98                        	ldr	r0, [sp, #456]
 8005c94: 85 f8 50 00                  	strb.w	r0, [r5, #80]
 8005c98: 8d 98                        	ldr	r0, [sp, #564]
 8005c9a: 85 f8 4f 00                  	strb.w	r0, [r5, #79]
 8005c9e: 8c 98                        	ldr	r0, [sp, #560]
 8005ca0: 85 f8 4e 00                  	strb.w	r0, [r5, #78]
 8005ca4: 8b 98                        	ldr	r0, [sp, #556]
 8005ca6: 85 f8 4d 00                  	strb.w	r0, [r5, #77]
 8005caa: 8e 98                        	ldr	r0, [sp, #568]
 8005cac: 85 f8 4c 00                  	strb.w	r0, [r5, #76]
 8005cb0: 8a 98                        	ldr	r0, [sp, #552]
 8005cb2: 86 99                        	ldr	r1, [sp, #536]
 8005cb4: 85 f8 4b 00                  	strb.w	r0, [r5, #75]
 8005cb8: bd f8 b0 03                  	ldrh.w	r0, [sp, #944]
 8005cbc: 85 f8 4a 10                  	strb.w	r1, [r5, #74]
 8005cc0: eb 99                        	ldr	r1, [sp, #940]
 8005cc2: c5 f8 3a 10                  	str.w	r1, [r5, #58]
 8005cc6: e8 87                        	strh	r0, [r5, #62]
 8005cc8: dd f8 0f 14                  	ldr.w	r1, [sp, #1039]
 8005ccc: dd f8 0c 04                  	ldr.w	r0, [sp, #1036]
 8005cd0: c5 f8 24 11                  	str.w	r1, [r5, #292]
 8005cd4: c5 f8 21 01                  	str.w	r0, [r5, #289]
 8005cd8: fa f7 51 bc                  	b.w	#-22366 <$t.2+0x1c0>
 8005cdc: 00 20                        	movs	r0, #0
 8005cde: 12 23                        	movs	r3, #18
 8005ce0: a1 90                        	str	r0, [sp, #644]
 8005ce2: 07 21                        	movs	r1, #7
 8005ce4: 06 26                        	movs	r6, #6
 8005ce6: 00 25                        	movs	r5, #0
 8005ce8: 00 24                        	movs	r4, #0
 8005cea: 1e e1                        	b	#572 <$t.24+0x1da8>
 8005cec: a9 9b                        	ldr	r3, [sp, #676]
;     require_len!(buffer, 12 + data_len);
 8005cee: 10 0a                        	lsrs	r0, r2, #8
 8005cf0: 01 21                        	movs	r1, #1
 8005cf2: 01 f0 2b bd                  	b.w	#6742 <$t.24+0x35ca>
 8005cf6: a9 9b                        	ldr	r3, [sp, #676]
;         self
 8005cf8: 21 f0 ff 02                  	bic	r2, r1, #255
 8005cfc: 01 20                        	movs	r0, #1
 8005cfe: c9 b2                        	uxtb	r1, r1
;         Err(v)
 8005d00: fc 90                        	str	r0, [sp, #1008]
;         self
 8005d02: 98 b2                        	uxth	r0, r3
 8005d04: 11 43                        	orrs	r1, r2
;         Err(v)
 8005d06: fe 91                        	str	r1, [sp, #1016]
 8005d08: 51 e0                        	b	#162 <$t.24+0x1c2c>
 8005d0a: a9 9b                        	ldr	r3, [sp, #676]
;     require_len!(buffer, 5 + data_len);
 8005d0c: 01 0a                        	lsrs	r1, r0, #8
 8005d0e: 01 22                        	movs	r2, #1
 8005d10: 00 f0 a6 be                  	b.w	#3404 <$t.24+0x28de>
 8005d14: 00 21                        	movs	r1, #0
;         self
 8005d16: 22 f0 ff 05                  	bic	r5, r2, #255
 8005d1a: a5 91                        	str	r1, [sp, #660]
 8005d1c: 01 20                        	movs	r0, #1
 8005d1e: 00 21                        	movs	r1, #0
 8005d20: 4f f0 00 08                  	mov.w	r8, #0
 8005d24: 9c 91                        	str	r1, [sp, #624]
 8005d26: 00 26                        	movs	r6, #0
 8005d28: 4f f0 00 0e                  	mov.w	lr, #0
 8005d2c: 00 24                        	movs	r4, #0
 8005d2e: 00 21                        	movs	r1, #0
 8005d30: 99 91                        	str	r1, [sp, #612]
 8005d32: 00 21                        	movs	r1, #0
 8005d34: 98 91                        	str	r1, [sp, #608]
;         Err(v)
 8005d36: ad f8 f0 03                  	strh.w	r0, [sp, #1008]
;         self
 8005d3a: d2 b2                        	uxtb	r2, r2
 8005d3c: 9b 98                        	ldr	r0, [sp, #620]
 8005d3e: 2a 43                        	orrs	r2, r5
;         Err(v)
 8005d40: a9 99                        	ldr	r1, [sp, #676]
 8005d42: 35 46                        	mov	r5, r6
 8005d44: fd 91                        	str	r1, [sp, #1012]
;         self
 8005d46: 01 0c                        	lsrs	r1, r0, #16
 8005d48: 80 b2                        	uxth	r0, r0
;         Err(v)
 8005d4a: 00 0a                        	lsrs	r0, r0, #8
;         self
 8005d4c: a2 91                        	str	r1, [sp, #648]
 8005d4e: a1 90                        	str	r0, [sp, #644]
 8005d50: 21 46                        	mov	r1, r4
 8005d52: 9c 9c                        	ldr	r4, [sp, #624]
;         Err(v)
 8005d54: cd f8 48 92                  	str.w	r9, [sp, #584]
 8005d58: 4f ea 16 49                  	lsr.w	r9, r6, #16
 8005d5c: ad f8 fe 33                  	strh.w	r3, [sp, #1022]
 8005d60: cd f8 8c 82                  	str.w	r8, [sp, #652]
 8005d64: fe 92                        	str	r2, [sp, #1016]
 8005d66: c0 e2                        	b	#1408 <$t.24+0x2168>
 8005d68: 12 20                        	movs	r0, #18
 8005d6a: 19 21                        	movs	r1, #25
 8005d6c: fe 91                        	str	r1, [sp, #1016]
 8005d6e: a9 99                        	ldr	r1, [sp, #676]
 8005d70: fd 91                        	str	r1, [sp, #1012]
 8005d72: ad f8 f0 03                  	strh.w	r0, [sp, #1008]
 8005d76: 00 20                        	movs	r0, #0
 8005d78: 4f f0 00 0a                  	mov.w	r10, #0
 8005d7c: a7 90                        	str	r0, [sp, #668]
 8005d7e: 00 20                        	movs	r0, #0
 8005d80: 99 90                        	str	r0, [sp, #612]
 8005d82: 00 20                        	movs	r0, #0
 8005d84: 98 90                        	str	r0, [sp, #608]
 8005d86: 4f f0 00 09                  	mov.w	r9, #0
 8005d8a: 00 25                        	movs	r5, #0
 8005d8c: 00 21                        	movs	r1, #0
 8005d8e: 4f f0 00 0c                  	mov.w	r12, #0
 8005d92: 00 20                        	movs	r0, #0
 8005d94: a3 90                        	str	r0, [sp, #652]
 8005d96: 00 20                        	movs	r0, #0
 8005d98: 92 90                        	str	r0, [sp, #584]
 8005d9a: 9b e0                        	b	#310 <$t.24+0x1d52>
;         self
 8005d9c: 21 f0 ff 02                  	bic	r2, r1, #255
 8005da0: 01 20                        	movs	r0, #1
;         Err(v)
 8005da2: fc 90                        	str	r0, [sp, #1008]
;         self
 8005da4: c9 b2                        	uxtb	r1, r1
 8005da6: a9 98                        	ldr	r0, [sp, #676]
 8005da8: 11 43                        	orrs	r1, r2
;         Err(v)
 8005daa: fe 91                        	str	r1, [sp, #1016]
;         self
 8005dac: 80 b2                        	uxth	r0, r0
 8005dae: fd 90                        	str	r0, [sp, #1012]
 8005db0: 84 e0                        	b	#264 <$t.24+0x1d3a>
 8005db2: 12 20                        	movs	r0, #18
 8005db4: 07 22                        	movs	r2, #7
 8005db6: 0b 26                        	movs	r6, #11
 8005db8: 4f f0 00 0a                  	mov.w	r10, #0
 8005dbc: 6f e2                        	b	#1246 <$t.24+0x211c>
;             0x0801 => Ok(Stm32Wb5xEvent::L2CapProcedureTimeout(
 8005dbe: 0d f5 83 62                  	add.w	r2, sp, #1048
;     copy_nonoverlapping(src, dst, count)
 8005dc2: bd f8 ad 32                  	ldrh.w	r3, [sp, #685]
;             0x0801 => Ok(Stm32Wb5xEvent::L2CapProcedureTimeout(
 8005dc6: ad f8 f2 33                  	strh.w	r3, [sp, #1010]
 8005dca: 0b 23                        	movs	r3, #11
 8005dcc: 07 ca                        	ldm	r2, {r0, r1, r2}
 8005dce: 8d f8 f0 33                  	strb.w	r3, [sp, #1008]
 8005dd2: fd 90                        	str	r0, [sp, #1012]
 8005dd4: fe 91                        	str	r1, [sp, #1016]
 8005dd6: ff 92                        	str	r2, [sp, #1020]
 8005dd8: 00 20                        	movs	r0, #0
 8005dda: 4f f0 00 0a                  	mov.w	r10, #0
 8005dde: 99 90                        	str	r0, [sp, #612]
 8005de0: 4f f0 00 09                  	mov.w	r9, #0
 8005de4: 00 20                        	movs	r0, #0
 8005de6: 00 25                        	movs	r5, #0
 8005de8: 98 90                        	str	r0, [sp, #608]
 8005dea: 00 21                        	movs	r1, #0
 8005dec: 4f f0 00 0b                  	mov.w	r11, #0
 8005df0: 00 20                        	movs	r0, #0
 8005df2: a3 90                        	str	r0, [sp, #652]
 8005df4: 00 20                        	movs	r0, #0
 8005df6: a1 90                        	str	r0, [sp, #644]
 8005df8: 00 20                        	movs	r0, #0
 8005dfa: 8a 90                        	str	r0, [sp, #552]
 8005dfc: 00 20                        	movs	r0, #0
 8005dfe: 8d 90                        	str	r0, [sp, #564]
 8005e00: 00 20                        	movs	r0, #0
 8005e02: 8c 90                        	str	r0, [sp, #560]
 8005e04: 00 20                        	movs	r0, #0
 8005e06: 8b 90                        	str	r0, [sp, #556]
 8005e08: 00 20                        	movs	r0, #0
 8005e0a: 89 90                        	str	r0, [sp, #548]
 8005e0c: 00 20                        	movs	r0, #0
 8005e0e: fa f7 ce bb                  	b.w	#-22628 <$t.2+0x1f0>
;         self
 8005e12: 20 0a                        	lsrs	r0, r4, #8
 8005e14: 75 46                        	mov	r5, lr
 8005e16: 60 f3 1f 25                  	bfi	r5, r0, #8, #24
 8005e1a: 1f 20                        	movs	r0, #31
 8005e1c: 14 90                        	str	r0, [sp, #80]
 8005e1e: 00 20                        	movs	r0, #0
 8005e20: a5 90                        	str	r0, [sp, #660]
;                 ReturnParameters::LeReadSupportedStates(to_le_read_states(&bytes[3..])?)
 8005e22: cd f8 ea 63                  	str.w	r6, [sp, #1002]
 8005e26: cd f8 e6 53                  	str.w	r5, [sp, #998]
 8005e2a: 92 91                        	str	r1, [sp, #584]
 8005e2c: 74 e4                        	b	#-1816 <$t.24+0x1596>
 8005e2e: 00 21                        	movs	r1, #0
;             0x0C10 => Ok(Stm32Wb5xEvent::GattProcedureComplete(
 8005e30: dd f8 20 25                  	ldr.w	r2, [sp, #1312]
 8005e34: dd f8 24 35                  	ldr.w	r3, [sp, #1316]
 8005e38: ad f8 f2 03                  	strh.w	r0, [sp, #1010]
 8005e3c: 1b 20                        	movs	r0, #27
 8005e3e: dd f8 27 65                  	ldr.w	r6, [sp, #1319]
 8005e42: cd f8 f9 33                  	str.w	r3, [sp, #1017]
 8005e46: 8d f8 f4 13                  	strb.w	r1, [sp, #1012]
 8005e4a: 8d f8 f0 03                  	strb.w	r0, [sp, #1008]
 8005e4e: cd f8 f5 23                  	str.w	r2, [sp, #1013]
 8005e52: ff 96                        	str	r6, [sp, #1020]
 8005e54: 00 20                        	movs	r0, #0
 8005e56: 99 90                        	str	r0, [sp, #612]
 8005e58: 4f f0 00 0a                  	mov.w	r10, #0
 8005e5c: 4f f0 00 09                  	mov.w	r9, #0
 8005e60: 00 20                        	movs	r0, #0
 8005e62: 00 25                        	movs	r5, #0
 8005e64: 98 90                        	str	r0, [sp, #608]
 8005e66: 00 21                        	movs	r1, #0
 8005e68: 4f f0 00 0c                  	mov.w	r12, #0
 8005e6c: 4f f0 00 0b                  	mov.w	r11, #0
 8005e70: 00 20                        	movs	r0, #0
 8005e72: 22 90                        	str	r0, [sp, #136]
 8005e74: 00 20                        	movs	r0, #0
 8005e76: 87 90                        	str	r0, [sp, #540]
 8005e78: 00 20                        	movs	r0, #0
 8005e7a: a3 90                        	str	r0, [sp, #652]
 8005e7c: 00 20                        	movs	r0, #0
 8005e7e: a1 90                        	str	r0, [sp, #644]
 8005e80: 00 20                        	movs	r0, #0
 8005e82: 9b 90                        	str	r0, [sp, #620]
 8005e84: 00 20                        	movs	r0, #0
 8005e86: 8a 90                        	str	r0, [sp, #552]
 8005e88: 00 20                        	movs	r0, #0
 8005e8a: 86 90                        	str	r0, [sp, #536]
 8005e8c: 00 20                        	movs	r0, #0
 8005e8e: 8d 90                        	str	r0, [sp, #564]
 8005e90: 00 20                        	movs	r0, #0
 8005e92: 8c 90                        	str	r0, [sp, #560]
 8005e94: 00 20                        	movs	r0, #0
 8005e96: 8b 90                        	str	r0, [sp, #556]
 8005e98: 00 20                        	movs	r0, #0
 8005e9a: 89 90                        	str	r0, [sp, #548]
 8005e9c: 00 20                        	movs	r0, #0
 8005e9e: 9f 90                        	str	r0, [sp, #636]
 8005ea0: 00 20                        	movs	r0, #0
 8005ea2: 74 90                        	str	r0, [sp, #464]
 8005ea4: 00 20                        	movs	r0, #0
 8005ea6: 91 90                        	str	r0, [sp, #580]
 8005ea8: b0 e7                        	b	#-160 <$t.24+0x1c8a>
;         status: buffer[5].try_into().map_err(hci::event::Error::Vendor)?,
 8005eaa: 08 02                        	lsls	r0, r1, #8
 8005eac: 16 21                        	movs	r1, #22
 8005eae: 12 22                        	movs	r2, #18
;         self
 8005eb0: 08 43                        	orrs	r0, r1
;         Err(v)
 8005eb2: fe 90                        	str	r0, [sp, #1016]
 8005eb4: a9 98                        	ldr	r0, [sp, #676]
 8005eb6: fd 90                        	str	r0, [sp, #1012]
 8005eb8: 8d f8 f0 23                  	strb.w	r2, [sp, #1008]
 8005ebc: 00 20                        	movs	r0, #0
 8005ebe: 4f f0 00 0a                  	mov.w	r10, #0
 8005ec2: 99 90                        	str	r0, [sp, #612]
 8005ec4: 4f f0 00 09                  	mov.w	r9, #0
 8005ec8: 00 20                        	movs	r0, #0
 8005eca: 00 25                        	movs	r5, #0
 8005ecc: 98 90                        	str	r0, [sp, #608]
 8005ece: 00 21                        	movs	r1, #0
 8005ed0: 00 20                        	movs	r0, #0
 8005ed2: a3 90                        	str	r0, [sp, #652]
 8005ed4: 00 20                        	movs	r0, #0
 8005ed6: a1 90                        	str	r0, [sp, #644]
 8005ed8: 4f f0 00 0e                  	mov.w	lr, #0
 8005edc: 00 24                        	movs	r4, #0
 8005ede: 00 20                        	movs	r0, #0
 8005ee0: a2 90                        	str	r0, [sp, #648]
 8005ee2: fa f7 63 bb                  	b.w	#-22842 <$t.2+0x1ee>
 8005ee6: 02 21                        	movs	r1, #2
 8005ee8: 00 e0                        	b	#0 <$t.24+0x1d6a>
 8005eea: 00 21                        	movs	r1, #0
;             0x0401 => Ok(Stm32Wb5xEvent::GapPairingComplete(to_gap_pairing_complete(
 8005eec: dd f8 18 24                  	ldr.w	r2, [sp, #1048]
 8005ef0: dd f8 1c 34                  	ldr.w	r3, [sp, #1052]
 8005ef4: dd f8 1f 64                  	ldr.w	r6, [sp, #1055]
 8005ef8: ad f8 f2 03                  	strh.w	r0, [sp, #1010]
 8005efc: 02 20                        	movs	r0, #2
 8005efe: 8d f8 f4 13                  	strb.w	r1, [sp, #1012]
 8005f02: 8d f8 f0 03                  	strb.w	r0, [sp, #1008]
 8005f06: cd f8 f5 23                  	str.w	r2, [sp, #1013]
 8005f0a: cd f8 f9 33                  	str.w	r3, [sp, #1017]
 8005f0e: ff 96                        	str	r6, [sp, #1020]
 8005f10: 62 e7                        	b	#-316 <$t.24+0x1c56>
;         status: buffer[4].try_into().map_err(hci::event::Error::Vendor)?,
 8005f12: 09 02                        	lsls	r1, r1, #8
 8005f14: 12 20                        	movs	r0, #18
 8005f16: 02 22                        	movs	r2, #2
 8005f18: fe f7 05 b9                  	b.w	#-7670 <$t.22+0x1e>
 8005f1c: 00 20                        	movs	r0, #0
;         self
 8005f1e: 26 f0 ff 04                  	bic	r4, r6, #255
 8005f22: a1 90                        	str	r0, [sp, #644]
 8005f24: 12 23                        	movs	r3, #18
 8005f26: 08 21                        	movs	r1, #8
 8005f28: 00 25                        	movs	r5, #0
 8005f2a: 00 20                        	movs	r0, #0
 8005f2c: 99 90                        	str	r0, [sp, #612]
 8005f2e: 00 20                        	movs	r0, #0
 8005f30: 98 90                        	str	r0, [sp, #608]
 8005f32: 00 20                        	movs	r0, #0
 8005f34: 95 90                        	str	r0, [sp, #596]
 8005f36: 02 20                        	movs	r0, #2
 8005f38: 41 ea 02 22                  	orr.w	r2, r1, r2, lsl #8
;         Err(v)
 8005f3c: ad f8 fc 03                  	strh.w	r0, [sp, #1020]
 8005f40: 4f ea 15 49                  	lsr.w	r9, r5, #16
 8005f44: a9 98                        	ldr	r0, [sp, #676]
 8005f46: 4f ea 1b 2a                  	lsr.w	r10, r11, #8
 8005f4a: fd 90                        	str	r0, [sp, #1012]
;         self
 8005f4c: f0 b2                        	uxtb	r0, r6
 8005f4e: 20 43                        	orrs	r0, r4
;         Err(v)
 8005f50: 8d f8 f0 33                  	strb.w	r3, [sp, #1008]
 8005f54: cd f8 48 b2                  	str.w	r11, [sp, #584]
;         self
 8005f58: 42 ea 00 40                  	orr.w	r0, r2, r0, lsl #16
;         Err(v)
 8005f5c: fe 90                        	str	r0, [sp, #1016]
 8005f5e: 4f ea 1b 40                  	lsr.w	r0, r11, #16
 8005f62: 95 99                        	ldr	r1, [sp, #596]
 8005f64: a3 90                        	str	r0, [sp, #652]
 8005f66: 9c 9c                        	ldr	r4, [sp, #624]
 8005f68: fa f7 20 bb                  	b.w	#-22976 <$t.2+0x1ee>
 8005f6c: 0d f5 83 60                  	add.w	r0, sp, #1048
;     copy_nonoverlapping(src, dst, count)
 8005f70: dd f8 ad 52                  	ldr.w	r5, [sp, #685]
 8005f74: 00 f1 16 01                  	add.w	r1, r0, #22
 8005f78: 1e 24                        	movs	r4, #30
;             0x0C13 => Ok(Stm32Wb5xEvent::AttWritePermitRequest(
 8005f7a: 8d f8 f0 43                  	strb.w	r4, [sp, #1008]
;     Ok(AttributeValue {
 8005f7e: 08 68                        	ldr	r0, [r1]
 8005f80: a7 90                        	str	r0, [sp, #668]
 8005f82: 88 88                        	ldrh	r0, [r1, #4]
 8005f84: 99 90                        	str	r0, [sp, #612]
 8005f86: 91 f8 d9 00                  	ldrb.w	r0, [r1, #217]
 8005f8a: a5 90                        	str	r0, [sp, #660]
 8005f8c: b1 f8 d7 00                  	ldrh.w	r0, [r1, #215]
 8005f90: d1 f8 08 90                  	ldr.w	r9, [r1, #8]
 8005f94: a4 90                        	str	r0, [sp, #656]
 8005f96: 88 89                        	ldrh	r0, [r1, #12]
 8005f98: dd f8 0c 15                  	ldr.w	r1, [sp, #1292]
 8005f9c: 25 91                        	str	r1, [sp, #148]
 8005f9e: 9d f8 0b 15                  	ldrb.w	r1, [sp, #1291]
 8005fa2: 24 91                        	str	r1, [sp, #144]
 8005fa4: 9d f8 0a 15                  	ldrb.w	r1, [sp, #1290]
 8005fa8: 26 91                        	str	r1, [sp, #152]
 8005faa: bd f8 08 15                  	ldrh.w	r1, [sp, #1288]
 8005fae: 2b 91                        	str	r1, [sp, #172]
 8005fb0: 9d f8 04 15                  	ldrb.w	r1, [sp, #1284]
 8005fb4: 88 91                        	str	r1, [sp, #544]
 8005fb6: dd f8 00 15                  	ldr.w	r1, [sp, #1280]
 8005fba: 87 91                        	str	r1, [sp, #540]
 8005fbc: dd f8 fc 14                  	ldr.w	r1, [sp, #1276]
 8005fc0: 74 91                        	str	r1, [sp, #464]
 8005fc2: dd f8 f8 14                  	ldr.w	r1, [sp, #1272]
 8005fc6: 59 91                        	str	r1, [sp, #356]
 8005fc8: 9d f8 f7 14                  	ldrb.w	r1, [sp, #1271]
 8005fcc: 2d 91                        	str	r1, [sp, #180]
 8005fce: 9d f8 f6 14                  	ldrb.w	r1, [sp, #1270]
 8005fd2: 2c 91                        	str	r1, [sp, #176]
 8005fd4: bd f8 f4 14                  	ldrh.w	r1, [sp, #1268]
 8005fd8: 32 91                        	str	r1, [sp, #200]
 8005fda: dd f8 f0 14                  	ldr.w	r1, [sp, #1264]
 8005fde: 5a 91                        	str	r1, [sp, #360]
 8005fe0: 9d f8 ef 14                  	ldrb.w	r1, [sp, #1263]
 8005fe4: 2f 91                        	str	r1, [sp, #188]
 8005fe6: 9d f8 ee 14                  	ldrb.w	r1, [sp, #1262]
 8005fea: 2e 91                        	str	r1, [sp, #184]
 8005fec: bd f8 ec 14                  	ldrh.w	r1, [sp, #1260]
 8005ff0: 36 91                        	str	r1, [sp, #216]
 8005ff2: dd f8 e8 14                  	ldr.w	r1, [sp, #1256]
 8005ff6: 5b 91                        	str	r1, [sp, #364]
 8005ff8: 9d f8 e7 14                  	ldrb.w	r1, [sp, #1255]
 8005ffc: 31 91                        	str	r1, [sp, #196]
 8005ffe: 9d f8 e6 14                  	ldrb.w	r1, [sp, #1254]
 8006002: 30 91                        	str	r1, [sp, #192]
 8006004: bd f8 e4 14                  	ldrh.w	r1, [sp, #1252]
 8006008: 39 91                        	str	r1, [sp, #228]
 800600a: dd f8 e0 14                  	ldr.w	r1, [sp, #1248]
 800600e: 5c 91                        	str	r1, [sp, #368]
 8006010: 9d f8 df 14                  	ldrb.w	r1, [sp, #1247]
 8006014: 35 91                        	str	r1, [sp, #212]
 8006016: 9d f8 de 14                  	ldrb.w	r1, [sp, #1246]
 800601a: 33 91                        	str	r1, [sp, #204]
 800601c: bd f8 dc 14                  	ldrh.w	r1, [sp, #1244]
 8006020: 76 91                        	str	r1, [sp, #472]
 8006022: dd f8 d8 14                  	ldr.w	r1, [sp, #1240]
 8006026: 5d 91                        	str	r1, [sp, #372]
 8006028: 9d f8 d7 14                  	ldrb.w	r1, [sp, #1239]
 800602c: 38 91                        	str	r1, [sp, #224]
 800602e: 9d f8 d6 14                  	ldrb.w	r1, [sp, #1238]
 8006032: 37 91                        	str	r1, [sp, #220]
 8006034: bd f8 d4 14                  	ldrh.w	r1, [sp, #1236]
 8006038: 77 91                        	str	r1, [sp, #476]
 800603a: dd f8 d0 14                  	ldr.w	r1, [sp, #1232]
 800603e: 5e 91                        	str	r1, [sp, #376]
 8006040: 9d f8 cf 14                  	ldrb.w	r1, [sp, #1231]
 8006044: 3b 91                        	str	r1, [sp, #236]
 8006046: 9d f8 ce 14                  	ldrb.w	r1, [sp, #1230]
 800604a: 3a 91                        	str	r1, [sp, #232]
 800604c: bd f8 cc 14                  	ldrh.w	r1, [sp, #1228]
 8006050: 78 91                        	str	r1, [sp, #480]
 8006052: dd f8 c8 14                  	ldr.w	r1, [sp, #1224]
 8006056: 5f 91                        	str	r1, [sp, #380]
 8006058: 9d f8 c7 14                  	ldrb.w	r1, [sp, #1223]
 800605c: 3d 91                        	str	r1, [sp, #244]
 800605e: 9d f8 c6 14                  	ldrb.w	r1, [sp, #1222]
 8006062: 3c 91                        	str	r1, [sp, #240]
 8006064: bd f8 c4 14                  	ldrh.w	r1, [sp, #1220]
 8006068: 79 91                        	str	r1, [sp, #484]
 800606a: dd f8 c0 14                  	ldr.w	r1, [sp, #1216]
 800606e: 60 91                        	str	r1, [sp, #384]
 8006070: 9d f8 bf 14                  	ldrb.w	r1, [sp, #1215]
 8006074: 3f 91                        	str	r1, [sp, #252]
 8006076: 9d f8 be 14                  	ldrb.w	r1, [sp, #1214]
 800607a: 3e 91                        	str	r1, [sp, #248]
 800607c: bd f8 bc 14                  	ldrh.w	r1, [sp, #1212]
 8006080: 7a 91                        	str	r1, [sp, #488]
 8006082: dd f8 b8 14                  	ldr.w	r1, [sp, #1208]
 8006086: 61 91                        	str	r1, [sp, #388]
 8006088: 9d f8 b7 14                  	ldrb.w	r1, [sp, #1207]
 800608c: 41 91                        	str	r1, [sp, #260]
 800608e: 9d f8 b6 14                  	ldrb.w	r1, [sp, #1206]
 8006092: 40 91                        	str	r1, [sp, #256]
 8006094: bd f8 b4 14                  	ldrh.w	r1, [sp, #1204]
 8006098: 7b 91                        	str	r1, [sp, #492]
 800609a: dd f8 b0 14                  	ldr.w	r1, [sp, #1200]
 800609e: 62 91                        	str	r1, [sp, #392]
 80060a0: 9d f8 af 14                  	ldrb.w	r1, [sp, #1199]
 80060a4: 43 91                        	str	r1, [sp, #268]
 80060a6: 9d f8 ae 14                  	ldrb.w	r1, [sp, #1198]
 80060aa: 42 91                        	str	r1, [sp, #264]
 80060ac: bd f8 ac 14                  	ldrh.w	r1, [sp, #1196]
 80060b0: 7c 91                        	str	r1, [sp, #496]
 80060b2: dd f8 a8 14                  	ldr.w	r1, [sp, #1192]
 80060b6: 63 91                        	str	r1, [sp, #396]
 80060b8: 9d f8 a7 14                  	ldrb.w	r1, [sp, #1191]
 80060bc: 45 91                        	str	r1, [sp, #276]
 80060be: 9d f8 a6 14                  	ldrb.w	r1, [sp, #1190]
 80060c2: 44 91                        	str	r1, [sp, #272]
 80060c4: bd f8 a4 14                  	ldrh.w	r1, [sp, #1188]
 80060c8: 7e 91                        	str	r1, [sp, #504]
 80060ca: dd f8 a0 14                  	ldr.w	r1, [sp, #1184]
 80060ce: 64 91                        	str	r1, [sp, #400]
 80060d0: 9d f8 9f 14                  	ldrb.w	r1, [sp, #1183]
 80060d4: 47 91                        	str	r1, [sp, #284]
 80060d6: 9d f8 9e 14                  	ldrb.w	r1, [sp, #1182]
 80060da: 46 91                        	str	r1, [sp, #280]
 80060dc: bd f8 9c 14                  	ldrh.w	r1, [sp, #1180]
 80060e0: 7f 91                        	str	r1, [sp, #508]
 80060e2: dd f8 98 14                  	ldr.w	r1, [sp, #1176]
 80060e6: 65 91                        	str	r1, [sp, #404]
 80060e8: 9d f8 97 14                  	ldrb.w	r1, [sp, #1175]
 80060ec: 4a 91                        	str	r1, [sp, #296]
 80060ee: 9d f8 96 14                  	ldrb.w	r1, [sp, #1174]
 80060f2: 49 91                        	str	r1, [sp, #292]
 80060f4: bd f8 94 14                  	ldrh.w	r1, [sp, #1172]
 80060f8: 80 91                        	str	r1, [sp, #512]
 80060fa: dd f8 90 14                  	ldr.w	r1, [sp, #1168]
 80060fe: 66 91                        	str	r1, [sp, #408]
 8006100: 9d f8 8f 14                  	ldrb.w	r1, [sp, #1167]
 8006104: 4c 91                        	str	r1, [sp, #304]
 8006106: 9d f8 8e 14                  	ldrb.w	r1, [sp, #1166]
 800610a: 4b 91                        	str	r1, [sp, #300]
 800610c: bd f8 8c 14                  	ldrh.w	r1, [sp, #1164]
 8006110: 81 91                        	str	r1, [sp, #516]
 8006112: dd f8 88 14                  	ldr.w	r1, [sp, #1160]
 8006116: 67 91                        	str	r1, [sp, #412]
 8006118: 9d f8 87 14                  	ldrb.w	r1, [sp, #1159]
 800611c: 4e 91                        	str	r1, [sp, #312]
 800611e: 9d f8 86 14                  	ldrb.w	r1, [sp, #1158]
 8006122: 4d 91                        	str	r1, [sp, #308]
 8006124: bd f8 84 14                  	ldrh.w	r1, [sp, #1156]
 8006128: 82 91                        	str	r1, [sp, #520]
 800612a: dd f8 80 14                  	ldr.w	r1, [sp, #1152]
 800612e: 68 91                        	str	r1, [sp, #416]
 8006130: 9d f8 7f 14                  	ldrb.w	r1, [sp, #1151]
 8006134: 6e 91                        	str	r1, [sp, #440]
 8006136: 9d f8 7e 14                  	ldrb.w	r1, [sp, #1150]
 800613a: 4f 91                        	str	r1, [sp, #316]
 800613c: bd f8 7c 14                  	ldrh.w	r1, [sp, #1148]
 8006140: 83 91                        	str	r1, [sp, #524]
 8006142: dd f8 78 14                  	ldr.w	r1, [sp, #1144]
 8006146: 69 91                        	str	r1, [sp, #420]
 8006148: 9d f8 77 14                  	ldrb.w	r1, [sp, #1143]
 800614c: 51 91                        	str	r1, [sp, #324]
 800614e: 9d f8 76 14                  	ldrb.w	r1, [sp, #1142]
 8006152: 50 91                        	str	r1, [sp, #320]
 8006154: bd f8 74 14                  	ldrh.w	r1, [sp, #1140]
 8006158: 84 91                        	str	r1, [sp, #528]
 800615a: dd f8 70 14                  	ldr.w	r1, [sp, #1136]
 800615e: 6a 91                        	str	r1, [sp, #424]
 8006160: 9d f8 6f 14                  	ldrb.w	r1, [sp, #1135]
 8006164: 54 91                        	str	r1, [sp, #336]
 8006166: 9d f8 6e 14                  	ldrb.w	r1, [sp, #1134]
 800616a: 52 91                        	str	r1, [sp, #328]
 800616c: bd f8 6c 14                  	ldrh.w	r1, [sp, #1132]
 8006170: 70 91                        	str	r1, [sp, #448]
 8006172: dd f8 68 14                  	ldr.w	r1, [sp, #1128]
 8006176: 6b 91                        	str	r1, [sp, #428]
 8006178: 9d f8 67 14                  	ldrb.w	r1, [sp, #1127]
 800617c: a1 90                        	str	r0, [sp, #644]
 800617e: dd f8 18 04                  	ldr.w	r0, [sp, #1048]
 8006182: 55 91                        	str	r1, [sp, #340]
 8006184: 9d f8 66 14                  	ldrb.w	r1, [sp, #1126]
 8006188: a3 90                        	str	r0, [sp, #652]
 800618a: dd f8 20 04                  	ldr.w	r0, [sp, #1056]
 800618e: 53 91                        	str	r1, [sp, #332]
 8006190: bd f8 64 14                  	ldrh.w	r1, [sp, #1124]
 8006194: a9 90                        	str	r0, [sp, #676]
 8006196: dd f8 24 04                  	ldr.w	r0, [sp, #1060]
 800619a: 85 91                        	str	r1, [sp, #532]
 800619c: dd f8 60 14                  	ldr.w	r1, [sp, #1120]
 80061a0: 6c 91                        	str	r1, [sp, #432]
 80061a2: 9d f8 5f 14                  	ldrb.w	r1, [sp, #1119]
;             0x0C13 => Ok(Stm32Wb5xEvent::AttWritePermitRequest(
 80061a6: cd e9 fd 65                  	strd	r6, r5, [sp, #1012]
 80061aa: bd f8 20 55                  	ldrh.w	r5, [sp, #1312]
;     Ok(AttributeValue {
 80061ae: dd f8 28 e4                  	ldr.w	lr, [sp, #1064]
 80061b2: 56 91                        	str	r1, [sp, #344]
 80061b4: 9d f8 5e 14                  	ldrb.w	r1, [sp, #1118]
;             0x0C13 => Ok(Stm32Wb5xEvent::AttWritePermitRequest(
 80061b8: ad f8 f1 53                  	strh.w	r5, [sp, #1009]
 80061bc: 9d f8 22 55                  	ldrb.w	r5, [sp, #1314]
;     Ok(AttributeValue {
 80061c0: 48 91                        	str	r1, [sp, #288]
 80061c2: bd f8 5c 14                  	ldrh.w	r1, [sp, #1116]
;             0x0C13 => Ok(Stm32Wb5xEvent::AttWritePermitRequest(
 80061c6: 8d f8 f3 53                  	strb.w	r5, [sp, #1011]
;         self
 80061ca: 05 0c                        	lsrs	r5, r0, #16
 80061cc: 45 ea 0e 44                  	orr.w	r4, r5, lr, lsl #16
;     Ok(AttributeValue {
 80061d0: 7d 91                        	str	r1, [sp, #500]
 80061d2: dd f8 58 14                  	ldr.w	r1, [sp, #1112]
;         self
 80061d6: 05 0a                        	lsrs	r5, r0, #8
 80061d8: 27 90                        	str	r0, [sp, #156]
 80061da: a1 98                        	ldr	r0, [sp, #644]
;     Ok(AttributeValue {
 80061dc: 6d 91                        	str	r1, [sp, #436]
 80061de: 9d f8 57 14                  	ldrb.w	r1, [sp, #1111]
 80061e2: 57 91                        	str	r1, [sp, #348]
 80061e4: 9d f8 56 14                  	ldrb.w	r1, [sp, #1110]
 80061e8: 34 91                        	str	r1, [sp, #208]
 80061ea: bd f8 54 14                  	ldrh.w	r1, [sp, #1108]
 80061ee: a6 94                        	str	r4, [sp, #664]
;         self
 80061f0: 45 ea 0e 64                  	orr.w	r4, r5, lr, lsl #24
 80061f4: 4f ea 19 45                  	lsr.w	r5, r9, #16
 80061f8: 45 ea 00 40                  	orr.w	r0, r5, r0, lsl #16
;     Ok(AttributeValue {
 80061fc: 75 91                        	str	r1, [sp, #468]
 80061fe: dd f8 50 14                  	ldr.w	r1, [sp, #1104]
 8006202: a0 90                        	str	r0, [sp, #640]
 8006204: dd e9 a4 60                  	ldrd	r6, r0, [sp, #656]
 8006208: 71 91                        	str	r1, [sp, #452]
 800620a: 9d f8 4f 14                  	ldrb.w	r1, [sp, #1103]
 800620e: 46 ea 00 40                  	orr.w	r0, r6, r0, lsl #16
 8006212: 58 91                        	str	r1, [sp, #352]
 8006214: 9d f8 4e 14                  	ldrb.w	r1, [sp, #1102]
 8006218: dd f8 40 34                  	ldr.w	r3, [sp, #1088]
 800621c: 6f 91                        	str	r1, [sp, #444]
 800621e: 91 93                        	str	r3, [sp, #580]
;             0x0C13 => Ok(Stm32Wb5xEvent::AttWritePermitRequest(
 8006220: 2a 90                        	str	r0, [sp, #168]
;     Ok(AttributeValue {
 8006222: dd f8 1c a4                  	ldr.w	r10, [sp, #1052]
 8006226: dd f8 3c c4                  	ldr.w	r12, [sp, #1084]
 800622a: dd f8 44 24                  	ldr.w	r2, [sp, #1092]
 800622e: bd f8 34 84                  	ldrh.w	r8, [sp, #1076]
 8006232: bd f8 2c b4                  	ldrh.w	r11, [sp, #1068]
 8006236: bd f8 4c 14                  	ldrh.w	r1, [sp, #1100]
 800623a: dd f8 48 34                  	ldr.w	r3, [sp, #1096]
 800623e: cd f8 88 92                  	str.w	r9, [sp, #648]
 8006242: a9 9d                        	ldr	r5, [sp, #676]
;             0x0C13 => Ok(Stm32Wb5xEvent::AttWritePermitRequest(
 8006244: a3 98                        	ldr	r0, [sp, #652]
 8006246: ff 90                        	str	r0, [sp, #1020]
 8006248: 4f ea 1a 40                  	lsr.w	r0, r10, #16
 800624c: a3 90                        	str	r0, [sp, #652]
 800624e: 08 0a                        	lsrs	r0, r1, #8
 8006250: 89 90                        	str	r0, [sp, #548]
 8006252: 18 0e                        	lsrs	r0, r3, #24
 8006254: 8d 90                        	str	r0, [sp, #564]
 8006256: 18 0c                        	lsrs	r0, r3, #16
 8006258: 8c 90                        	str	r0, [sp, #560]
 800625a: 18 0a                        	lsrs	r0, r3, #8
 800625c: 8b 90                        	str	r0, [sp, #556]
 800625e: 4f ea 18 20                  	lsr.w	r0, r8, #8
 8006262: cd f8 6c 82                  	str.w	r8, [sp, #620]
 8006266: 16 0e                        	lsrs	r6, r2, #24
 8006268: dd f8 98 82                  	ldr.w	r8, [sp, #664]
 800626c: 4f ea 15 49                  	lsr.w	r9, r5, #16
 8006270: cd f8 48 a2                  	str.w	r10, [sp, #584]
 8006274: 4f ea 1a 2a                  	lsr.w	r10, r10, #8
 8006278: 72 91                        	str	r1, [sp, #456]
 800627a: 4f ea 1b 21                  	lsr.w	r1, r11, #8
 800627e: a1 90                        	str	r0, [sp, #644]
 8006280: 00 20                        	movs	r0, #0
 8006282: 8a 96                        	str	r6, [sp, #552]
 8006284: 16 0c                        	lsrs	r6, r2, #16
 8006286: 1e 92                        	str	r2, [sp, #120]
 8006288: 12 0a                        	lsrs	r2, r2, #8
 800628a: cd f8 8c b0                  	str.w	r11, [sp, #140]
 800628e: 86 96                        	str	r6, [sp, #536]
 8006290: 73 92                        	str	r2, [sp, #460]
 8006292: 01 f0 55 b9                  	b.w	#4778 <$t.24+0x33be>
;         self
 8006296: 26 f0 ff 0a                  	bic	r10, r6, #255
 800629a: 12 20                        	movs	r0, #18
 800629c: 08 22                        	movs	r2, #8
;         Err(v)
 800629e: 8d f8 f0 03                  	strb.w	r0, [sp, #1008]
;         self
 80062a2: f0 b2                        	uxtb	r0, r6
 80062a4: 40 ea 0a 00                  	orr.w	r0, r0, r10
 80062a8: 42 ea 03 22                  	orr.w	r2, r2, r3, lsl #8
;         Err(v)
 80062ac: a9 99                        	ldr	r1, [sp, #676]
 80062ae: 08 24                        	movs	r4, #8
;         self
 80062b0: 42 ea 00 40                  	orr.w	r0, r2, r0, lsl #16
;         Err(v)
 80062b4: fe 90                        	str	r0, [sp, #1016]
 80062b6: 9e 98                        	ldr	r0, [sp, #632]
 80062b8: 5f fa 88 f2                  	uxtb.w	r2, r8
 80062bc: fd 91                        	str	r1, [sp, #1012]
 80062be: c0 ea 05 40                  	pkhbt	r0, r0, r5, lsl #16
 80062c2: a4 99                        	ldr	r1, [sp, #656]
 80062c4: a7 90                        	str	r0, [sp, #668]
 80062c6: 5f fa 89 f0                  	uxtb.w	r0, r9
 80062ca: 42 ea 00 20                  	orr.w	r0, r2, r0, lsl #8
 80062ce: cd f8 8c c2                  	str.w	r12, [sp, #652]
 80062d2: 40 ea 01 4c                  	orr.w	r12, r0, r1, lsl #16
;                 to_l2cap_connection_update_request(buffer)?,
 80062d6: 28 0e                        	lsrs	r0, r5, #24
 80062d8: 98 90                        	str	r0, [sp, #608]
 80062da: 28 0c                        	lsrs	r0, r5, #16
 80062dc: 99 90                        	str	r0, [sp, #612]
 80062de: 5d 46                        	mov	r5, r11
;         Err(v)
 80062e0: ff 94                        	str	r4, [sp, #1020]
 80062e2: 4f ea 1b 49                  	lsr.w	r9, r11, #16
 80062e6: 95 99                        	ldr	r1, [sp, #596]
 80062e8: 9c 9c                        	ldr	r4, [sp, #624]
 80062ea: 01 20                        	movs	r0, #1
 80062ec: dd e9 a5 a8                  	ldrd	r10, r8, [sp, #660]
 80062f0: fa f7 5d b9                  	b.w	#-23878 <$t.2+0x1f0>
 80062f4: 0d f5 83 60                  	add.w	r0, sp, #1048
 80062f8: 8b 46                        	mov	r11, r1
;     let mut full_handle_value_pair_buf = [0; MAX_HANDLE_VALUE_PAIR_BUF_LEN];
 80062fa: f9 21                        	movs	r1, #249
 80062fc: 16 f0 82 f9                  	bl	#90884
;         } else if self.end > slice.len() {
 8006300: bb f1 fa 0f                  	cmp.w	r11, #250
 8006304: 86 f0 24 81                  	bhs.w	#25160 <$t.42+0x396>
 8006308: 08 f1 09 01                  	add.w	r1, r8, #9
 800630c: 0d f5 83 60                  	add.w	r0, sp, #1048
;     copy_nonoverlapping(src, dst, count)
 8006310: 5a 46                        	mov	r2, r11
 8006312: 16 f0 02 f8                  	bl	#90116
;         assert!($size <= $src.len());
 8006316: a9 98                        	ldr	r0, [sp, #676]
 8006318: 00 f0 fe 00                  	and	r0, r0, #254
 800631c: 02 28                        	cmp	r0, #2
 800631e: 3e f4 d1 aa                  	beq.w	#-6750 <$t.24+0x742>
;     Ok(AttReadByTypeResponse {
 8006322: da f8 12 00                  	ldr.w	r0, [r10, #18]
 8006326: a2 90                        	str	r0, [sp, #648]
 8006328: da f8 0a 00                  	ldr.w	r0, [r10, #10]
 800632c: a7 90                        	str	r0, [sp, #668]
 800632e: ba f8 0e 00                  	ldrh.w	r0, [r10, #14]
 8006332: 99 90                        	str	r0, [sp, #612]
 8006334: 9a f8 e3 00                  	ldrb.w	r0, [r10, #227]
 8006338: a5 90                        	str	r0, [sp, #660]
 800633a: ba f8 e1 00                  	ldrh.w	r0, [r10, #225]
 800633e: a4 90                        	str	r0, [sp, #656]
 8006340: ba f8 16 00                  	ldrh.w	r0, [r10, #22]
 8006344: a6 90                        	str	r0, [sp, #664]
 8006346: dd f8 1e 04                  	ldr.w	r0, [sp, #1054]
 800634a: a9 90                        	str	r0, [sp, #676]
 800634c: dd f8 3e 04                  	ldr.w	r0, [sp, #1086]
 8006350: 91 90                        	str	r0, [sp, #580]
 8006352: 9d f8 10 05                  	ldrb.w	r0, [sp, #1296]
 8006356: 22 90                        	str	r0, [sp, #136]
 8006358: dd f8 0a 05                  	ldr.w	r0, [sp, #1290]
 800635c: 25 90                        	str	r0, [sp, #148]
 800635e: 9d f8 09 05                  	ldrb.w	r0, [sp, #1289]
 8006362: 24 90                        	str	r0, [sp, #144]
 8006364: 9d f8 08 05                  	ldrb.w	r0, [sp, #1288]
 8006368: 26 90                        	str	r0, [sp, #152]
 800636a: bd f8 06 05                  	ldrh.w	r0, [sp, #1286]
 800636e: 2b 90                        	str	r0, [sp, #172]
 8006370: 9d f8 02 05                  	ldrb.w	r0, [sp, #1282]
 8006374: 88 90                        	str	r0, [sp, #544]
 8006376: dd f8 fe 04                  	ldr.w	r0, [sp, #1278]
 800637a: 87 90                        	str	r0, [sp, #540]
 800637c: dd f8 fa 04                  	ldr.w	r0, [sp, #1274]
 8006380: 74 90                        	str	r0, [sp, #464]
 8006382: dd f8 f6 04                  	ldr.w	r0, [sp, #1270]
 8006386: 59 90                        	str	r0, [sp, #356]
 8006388: 9d f8 f5 04                  	ldrb.w	r0, [sp, #1269]
 800638c: 2d 90                        	str	r0, [sp, #180]
 800638e: 9d f8 f4 04                  	ldrb.w	r0, [sp, #1268]
 8006392: 2c 90                        	str	r0, [sp, #176]
 8006394: bd f8 f2 04                  	ldrh.w	r0, [sp, #1266]
 8006398: 32 90                        	str	r0, [sp, #200]
 800639a: dd f8 ee 04                  	ldr.w	r0, [sp, #1262]
 800639e: 5a 90                        	str	r0, [sp, #360]
 80063a0: 9d f8 ed 04                  	ldrb.w	r0, [sp, #1261]
 80063a4: 2f 90                        	str	r0, [sp, #188]
 80063a6: 9d f8 ec 04                  	ldrb.w	r0, [sp, #1260]
 80063aa: 2e 90                        	str	r0, [sp, #184]
 80063ac: bd f8 ea 04                  	ldrh.w	r0, [sp, #1258]
 80063b0: 36 90                        	str	r0, [sp, #216]
 80063b2: dd f8 e6 04                  	ldr.w	r0, [sp, #1254]
 80063b6: 5b 90                        	str	r0, [sp, #364]
 80063b8: 9d f8 e5 04                  	ldrb.w	r0, [sp, #1253]
 80063bc: 31 90                        	str	r0, [sp, #196]
 80063be: 9d f8 e4 04                  	ldrb.w	r0, [sp, #1252]
 80063c2: 30 90                        	str	r0, [sp, #192]
 80063c4: bd f8 e2 04                  	ldrh.w	r0, [sp, #1250]
 80063c8: 39 90                        	str	r0, [sp, #228]
 80063ca: dd f8 de 04                  	ldr.w	r0, [sp, #1246]
 80063ce: 5c 90                        	str	r0, [sp, #368]
 80063d0: 9d f8 dd 04                  	ldrb.w	r0, [sp, #1245]
 80063d4: 35 90                        	str	r0, [sp, #212]
 80063d6: 9d f8 dc 04                  	ldrb.w	r0, [sp, #1244]
 80063da: 33 90                        	str	r0, [sp, #204]
 80063dc: bd f8 da 04                  	ldrh.w	r0, [sp, #1242]
 80063e0: 76 90                        	str	r0, [sp, #472]
 80063e2: dd f8 d6 04                  	ldr.w	r0, [sp, #1238]
 80063e6: 5d 90                        	str	r0, [sp, #372]
 80063e8: 9d f8 d5 04                  	ldrb.w	r0, [sp, #1237]
 80063ec: 38 90                        	str	r0, [sp, #224]
 80063ee: 9d f8 d4 04                  	ldrb.w	r0, [sp, #1236]
 80063f2: 37 90                        	str	r0, [sp, #220]
 80063f4: bd f8 d2 04                  	ldrh.w	r0, [sp, #1234]
 80063f8: 77 90                        	str	r0, [sp, #476]
 80063fa: dd f8 ce 04                  	ldr.w	r0, [sp, #1230]
 80063fe: 5e 90                        	str	r0, [sp, #376]
 8006400: 9d f8 cd 04                  	ldrb.w	r0, [sp, #1229]
 8006404: 3b 90                        	str	r0, [sp, #236]
 8006406: 9d f8 cc 04                  	ldrb.w	r0, [sp, #1228]
 800640a: 3a 90                        	str	r0, [sp, #232]
 800640c: bd f8 ca 04                  	ldrh.w	r0, [sp, #1226]
 8006410: 78 90                        	str	r0, [sp, #480]
 8006412: dd f8 c6 04                  	ldr.w	r0, [sp, #1222]
 8006416: 5f 90                        	str	r0, [sp, #380]
 8006418: 9d f8 c5 04                  	ldrb.w	r0, [sp, #1221]
 800641c: 3d 90                        	str	r0, [sp, #244]
 800641e: 9d f8 c4 04                  	ldrb.w	r0, [sp, #1220]
 8006422: 3c 90                        	str	r0, [sp, #240]
 8006424: bd f8 c2 04                  	ldrh.w	r0, [sp, #1218]
 8006428: 79 90                        	str	r0, [sp, #484]
 800642a: dd f8 be 04                  	ldr.w	r0, [sp, #1214]
 800642e: 60 90                        	str	r0, [sp, #384]
 8006430: 9d f8 bd 04                  	ldrb.w	r0, [sp, #1213]
 8006434: 3f 90                        	str	r0, [sp, #252]
 8006436: 9d f8 bc 04                  	ldrb.w	r0, [sp, #1212]
 800643a: 3e 90                        	str	r0, [sp, #248]
 800643c: bd f8 ba 04                  	ldrh.w	r0, [sp, #1210]
 8006440: 7a 90                        	str	r0, [sp, #488]
 8006442: dd f8 b6 04                  	ldr.w	r0, [sp, #1206]
 8006446: 61 90                        	str	r0, [sp, #388]
 8006448: 9d f8 b5 04                  	ldrb.w	r0, [sp, #1205]
 800644c: 41 90                        	str	r0, [sp, #260]
 800644e: 9d f8 b4 04                  	ldrb.w	r0, [sp, #1204]
 8006452: 40 90                        	str	r0, [sp, #256]
 8006454: bd f8 b2 04                  	ldrh.w	r0, [sp, #1202]
 8006458: 7b 90                        	str	r0, [sp, #492]
 800645a: dd f8 ae 04                  	ldr.w	r0, [sp, #1198]
 800645e: 62 90                        	str	r0, [sp, #392]
 8006460: 9d f8 ad 04                  	ldrb.w	r0, [sp, #1197]
 8006464: 43 90                        	str	r0, [sp, #268]
 8006466: 9d f8 ac 04                  	ldrb.w	r0, [sp, #1196]
 800646a: 42 90                        	str	r0, [sp, #264]
 800646c: bd f8 aa 04                  	ldrh.w	r0, [sp, #1194]
 8006470: 7c 90                        	str	r0, [sp, #496]
 8006472: dd f8 a6 04                  	ldr.w	r0, [sp, #1190]
 8006476: 63 90                        	str	r0, [sp, #396]
 8006478: 9d f8 a5 04                  	ldrb.w	r0, [sp, #1189]
 800647c: 45 90                        	str	r0, [sp, #276]
 800647e: 9d f8 a4 04                  	ldrb.w	r0, [sp, #1188]
 8006482: 44 90                        	str	r0, [sp, #272]
 8006484: bd f8 a2 04                  	ldrh.w	r0, [sp, #1186]
 8006488: 7e 90                        	str	r0, [sp, #504]
 800648a: dd f8 9e 04                  	ldr.w	r0, [sp, #1182]
 800648e: 64 90                        	str	r0, [sp, #400]
 8006490: 9d f8 9d 04                  	ldrb.w	r0, [sp, #1181]
 8006494: 47 90                        	str	r0, [sp, #284]
 8006496: 9d f8 9c 04                  	ldrb.w	r0, [sp, #1180]
 800649a: 46 90                        	str	r0, [sp, #280]
 800649c: bd f8 9a 04                  	ldrh.w	r0, [sp, #1178]
 80064a0: 7f 90                        	str	r0, [sp, #508]
 80064a2: dd f8 96 04                  	ldr.w	r0, [sp, #1174]
 80064a6: 65 90                        	str	r0, [sp, #404]
 80064a8: 9d f8 95 04                  	ldrb.w	r0, [sp, #1173]
 80064ac: 4a 90                        	str	r0, [sp, #296]
 80064ae: 9d f8 94 04                  	ldrb.w	r0, [sp, #1172]
 80064b2: 49 90                        	str	r0, [sp, #292]
 80064b4: bd f8 92 04                  	ldrh.w	r0, [sp, #1170]
 80064b8: 80 90                        	str	r0, [sp, #512]
 80064ba: dd f8 8e 04                  	ldr.w	r0, [sp, #1166]
 80064be: 66 90                        	str	r0, [sp, #408]
 80064c0: 9d f8 8d 04                  	ldrb.w	r0, [sp, #1165]
 80064c4: 4c 90                        	str	r0, [sp, #304]
 80064c6: 9d f8 8c 04                  	ldrb.w	r0, [sp, #1164]
 80064ca: 4b 90                        	str	r0, [sp, #300]
 80064cc: bd f8 8a 04                  	ldrh.w	r0, [sp, #1162]
 80064d0: 81 90                        	str	r0, [sp, #516]
 80064d2: dd f8 86 04                  	ldr.w	r0, [sp, #1158]
 80064d6: 67 90                        	str	r0, [sp, #412]
 80064d8: 9d f8 85 04                  	ldrb.w	r0, [sp, #1157]
 80064dc: 4e 90                        	str	r0, [sp, #312]
 80064de: 9d f8 84 04                  	ldrb.w	r0, [sp, #1156]
 80064e2: 4d 90                        	str	r0, [sp, #308]
 80064e4: bd f8 82 04                  	ldrh.w	r0, [sp, #1154]
 80064e8: 82 90                        	str	r0, [sp, #520]
 80064ea: dd f8 7e 04                  	ldr.w	r0, [sp, #1150]
 80064ee: 68 90                        	str	r0, [sp, #416]
 80064f0: 9d f8 7d 04                  	ldrb.w	r0, [sp, #1149]
 80064f4: 6e 90                        	str	r0, [sp, #440]
 80064f6: 9d f8 7c 04                  	ldrb.w	r0, [sp, #1148]
 80064fa: 4f 90                        	str	r0, [sp, #316]
 80064fc: bd f8 7a 04                  	ldrh.w	r0, [sp, #1146]
 8006500: 83 90                        	str	r0, [sp, #524]
 8006502: dd f8 76 04                  	ldr.w	r0, [sp, #1142]
 8006506: 69 90                        	str	r0, [sp, #420]
 8006508: 9d f8 75 04                  	ldrb.w	r0, [sp, #1141]
 800650c: 51 90                        	str	r0, [sp, #324]
 800650e: 9d f8 74 04                  	ldrb.w	r0, [sp, #1140]
 8006512: 50 90                        	str	r0, [sp, #320]
 8006514: bd f8 72 04                  	ldrh.w	r0, [sp, #1138]
 8006518: 84 90                        	str	r0, [sp, #528]
 800651a: dd f8 6e 04                  	ldr.w	r0, [sp, #1134]
 800651e: 6a 90                        	str	r0, [sp, #424]
 8006520: 9d f8 6d 04                  	ldrb.w	r0, [sp, #1133]
 8006524: 54 90                        	str	r0, [sp, #336]
 8006526: 9d f8 6c 04                  	ldrb.w	r0, [sp, #1132]
 800652a: 52 90                        	str	r0, [sp, #328]
 800652c: bd f8 6a 04                  	ldrh.w	r0, [sp, #1130]
 8006530: 70 90                        	str	r0, [sp, #448]
 8006532: dd f8 66 04                  	ldr.w	r0, [sp, #1126]
 8006536: 6b 90                        	str	r0, [sp, #428]
 8006538: 9d f8 65 04                  	ldrb.w	r0, [sp, #1125]
 800653c: 55 90                        	str	r0, [sp, #340]
 800653e: 9d f8 64 04                  	ldrb.w	r0, [sp, #1124]
 8006542: 53 90                        	str	r0, [sp, #332]
 8006544: bd f8 62 04                  	ldrh.w	r0, [sp, #1122]
 8006548: 85 90                        	str	r0, [sp, #532]
 800654a: dd f8 5e 04                  	ldr.w	r0, [sp, #1118]
 800654e: 6c 90                        	str	r0, [sp, #432]
 8006550: 9d f8 5d 04                  	ldrb.w	r0, [sp, #1117]
 8006554: 56 90                        	str	r0, [sp, #344]
 8006556: 9d f8 5c 04                  	ldrb.w	r0, [sp, #1116]
 800655a: 48 90                        	str	r0, [sp, #288]
 800655c: bd f8 5a 04                  	ldrh.w	r0, [sp, #1114]
 8006560: 7d 90                        	str	r0, [sp, #500]
 8006562: dd f8 56 04                  	ldr.w	r0, [sp, #1110]
 8006566: 6d 90                        	str	r0, [sp, #436]
 8006568: 9d f8 55 04                  	ldrb.w	r0, [sp, #1109]
 800656c: 57 90                        	str	r0, [sp, #348]
 800656e: 9d f8 54 04                  	ldrb.w	r0, [sp, #1108]
 8006572: 34 90                        	str	r0, [sp, #208]
 8006574: bd f8 52 04                  	ldrh.w	r0, [sp, #1106]
 8006578: 75 90                        	str	r0, [sp, #468]
 800657a: dd f8 4e 04                  	ldr.w	r0, [sp, #1102]
 800657e: 71 90                        	str	r0, [sp, #452]
 8006580: 9d f8 4d 04                  	ldrb.w	r0, [sp, #1101]
 8006584: 58 90                        	str	r0, [sp, #352]
 8006586: 9d f8 4c 04                  	ldrb.w	r0, [sp, #1100]
 800658a: 6f 90                        	str	r0, [sp, #444]
 800658c: bd f8 2a 04                  	ldrh.w	r0, [sp, #1066]
 8006590: 23 90                        	str	r0, [sp, #140]
 8006592: bd f8 32 04                  	ldrh.w	r0, [sp, #1074]
 8006596: 9b 90                        	str	r0, [sp, #620]
 8006598: 12 20                        	movs	r0, #18
;             0x0C06 => Ok(Stm32Wb5xEvent::AttReadByTypeResponse(
 800659a: 8d f8 f0 03                  	strb.w	r0, [sp, #1008]
;         value_len: handle_value_pair_len - 2,
 800659e: b0 1e                        	subs	r0, r6, #2
;     Ok(AttReadByTypeResponse {
 80065a0: da f8 00 90                  	ldr.w	r9, [r10]
 80065a4: da f8 04 e0                  	ldr.w	lr, [r10, #4]
 80065a8: dd f8 1a a4                  	ldr.w	r10, [sp, #1050]
 80065ac: dd f8 3a c4                  	ldr.w	r12, [sp, #1082]
 80065b0: bd f8 4a 84                  	ldrh.w	r8, [sp, #1098]
 80065b4: bd f8 0e 15                  	ldrh.w	r1, [sp, #1294]
 80065b8: dd f8 42 24                  	ldr.w	r2, [sp, #1090]
 80065bc: dd f8 46 34                  	ldr.w	r3, [sp, #1094]
; }
 80065c0: bd f8 18 54                  	ldrh.w	r5, [sp, #1048]
;     copy_nonoverlapping(src, dst, count)
 80065c4: bd f8 ad 42                  	ldrh.w	r4, [sp, #685]
;             0x0C06 => Ok(Stm32Wb5xEvent::AttReadByTypeResponse(
 80065c8: fe 90                        	str	r0, [sp, #1016]
 80065ca: e2 e1                        	b	#964 <$t.24+0x2810>
 80065cc: 0d f5 83 60                  	add.w	r0, sp, #1048
 80065d0: f8 21                        	movs	r1, #248
 80065d2: a9 46                        	mov	r9, r5
 80065d4: 16 f0 16 f8                  	bl	#90156
;     let count = pair_buffer.len() / PAIR_LEN;
 80065d8: 4f ea 9a 00                  	lsr.w	r0, r10, #2
;         if self.n != 0 {
 80065dc: a6 90                        	str	r0, [sp, #664]
 80065de: 00 20                        	movs	r0, #0
 80065e0: b0 eb 9a 0f                  	cmp.w	r0, r10, lsr #2
 80065e4: 00 f0 0e 86                  	beq.w	#3100 <$t.24+0x3082>
;                     if is_empty!(self) {
 80065e8: a9 98                        	ldr	r0, [sp, #676]
 80065ea: 0d f5 83 65                  	add.w	r5, sp, #1048
 80065ee: a6 9a                        	ldr	r2, [sp, #664]
 80065f0: c3 1f                        	subs	r3, r0, #7
 80065f2: 00 20                        	movs	r0, #0
 80065f4: f8 28                        	cmp	r0, #248
 80065f6: 1a d0                        	beq	#52 <$t.24+0x24ac>
;         if self.start > self.end {
 80065f8: 82 45                        	cmp	r10, r0
 80065fa: c5 f0 83 87                  	blo.w	#24326 <$t.42+0x34a>
;         assert!($size <= $src.len());
 80065fe: 99 1c                        	adds	r1, r3, #2
 8006600: be f4 60 a9                  	bhs.w	#-7488 <$t.24+0x742>
;     copy_nonoverlapping(src, dst, count)
 8006604: 08 eb 00 06                  	add.w	r6, r8, r0
 8006608: 31 89                        	ldrh	r1, [r6, #8]
;         pair.attribute = AttributeHandle(LittleEndian::read_u16(&pair_buffer[index..]));
 800660a: 29 80                        	strh	r1, [r5]
;         if self.start > self.end {
 800660c: 81 1c                        	adds	r1, r0, #2
 800660e: 8a 45                        	cmp	r10, r1
 8006610: c5 f0 77 87                  	blo.w	#24302 <$t.42+0x348>
;         assert!($size <= $src.len());
 8006614: 01 2b                        	cmp	r3, #1
 8006616: 7e f6 55 a9                  	bls.w	#-7510 <$t.24+0x742>
 800661a: 29 1d                        	adds	r1, r5, #4
;     copy_nonoverlapping(src, dst, count)
 800661c: 76 89                        	ldrh	r6, [r6, #10]
 800661e: 01 3a                        	subs	r2, #1
;         if self.n != 0 {
 8006620: a3 f1 04 03                  	sub.w	r3, r3, #4
 8006624: 00 f1 04 00                  	add.w	r0, r0, #4
;         pair.group_end = GroupEndHandle(LittleEndian::read_u16(&pair_buffer[2 + index..]));
 8006628: 6e 80                        	strh	r6, [r5, #2]
 800662a: 0d 46                        	mov	r5, r1
;         if self.n != 0 {
 800662c: e2 d1                        	bne	#-60 <$t.24+0x2472>
;     require_len_at_least!(buffer, 4);
 800662e: a9 98                        	ldr	r0, [sp, #676]
 8006630: 04 28                        	cmp	r0, #4
 8006632: 80 f0 e7 85                  	bhs.w	#3022 <$t.24+0x3082>
 8006636: 0d f5 a4 60                  	add.w	r0, sp, #1312
;         self
 800663a: 6e c8                        	ldm	r0!, {r1, r2, r3, r5, r6}
 800663c: ab e8 6e 00                  	stm.w	r11!, {r1, r2, r3, r5, r6}
 8006640: 6e c8                        	ldm	r0!, {r1, r2, r3, r5, r6}
 8006642: ab e8 6e 00                  	stm.w	r11!, {r1, r2, r3, r5, r6}
 8006646: 00 25                        	movs	r5, #0
 8006648: 00 88                        	ldrh	r0, [r0]
 800664a: ab f8 00 00                  	strh.w	r0, [r11]
;         Err(v)
 800664e: d4 f8 0a 10                  	ldr.w	r1, [r4, #10]
 8006652: d4 f8 12 00                  	ldr.w	r0, [r4, #18]
 8006656: a7 90                        	str	r0, [sp, #668]
 8006658: e0 89                        	ldrh	r0, [r4, #14]
 800665a: a6 91                        	str	r1, [sp, #664]
;         conn_handle: to_conn_handle(buffer)?,
 800665c: 09 0c                        	lsrs	r1, r1, #16
;         Err(v)
 800665e: 22 68                        	ldr	r2, [r4]
;         conn_handle: to_conn_handle(buffer)?,
 8006660: 41 ea 00 4e                  	orr.w	lr, r1, r0, lsl #16
;         Err(v)
 8006664: 37 f8 36 1c                  	ldrh	r1, [r7, #-54]
 8006668: b4 f8 16 a0                  	ldrh.w	r10, [r4, #22]
 800666c: 66 68                        	ldr	r6, [r4, #4]
;         conn_handle: to_conn_handle(buffer)?,
 800666e: 10 0c                        	lsrs	r0, r2, #16
 8006670: 23 91                        	str	r1, [sp, #140]
 8006672: 0c 0a                        	lsrs	r4, r1, #8
;         Err(v)
 8006674: 37 f8 3e 1c                  	ldrh	r1, [r7, #-62]
 8006678: 91 46                        	mov	r9, r2
 800667a: 27 91                        	str	r1, [sp, #156]
;         conn_handle: to_conn_handle(buffer)?,
 800667c: 40 ea 06 48                  	orr.w	r8, r0, r6, lsl #16
 8006680: 10 0a                        	lsrs	r0, r2, #8
 8006682: 04 22                        	movs	r2, #4
 8006684: 09 0a                        	lsrs	r1, r1, #8
 8006686: 40 ea 06 60                  	orr.w	r0, r0, r6, lsl #24
;         Err(v)
 800668a: 9c 91                        	str	r1, [sp, #624]
 800668c: 57 f8 2e 1c                  	ldr	r1, [r7, #-46]
 8006690: 9b 91                        	str	r1, [sp, #620]
 8006692: 57 f8 2a 1c                  	ldr	r1, [r7, #-42]
 8006696: a0 91                        	str	r1, [sp, #640]
 8006698: 57 f8 22 1c                  	ldr	r1, [r7, #-34]
 800669c: 91 91                        	str	r1, [sp, #580]
;         conn_handle: to_conn_handle(buffer)?,
 800669e: 4f ea 1a 21                  	lsr.w	r1, r10, #8
;         Err(v)
 80066a2: a5 90                        	str	r0, [sp, #660]
 80066a4: 01 20                        	movs	r0, #1
 80066a6: 57 f8 26 cc                  	ldr	r12, [r7, #-38]
 80066aa: 37 f8 48 3c                  	ldrh	r3, [r7, #-72]
 80066ae: cd f8 64 a2                  	str.w	r10, [sp, #612]
;         conn_handle: to_conn_handle(buffer)?,
 80066b2: 98 91                        	str	r1, [sp, #608]
 80066b4: ff f7 3f bb                  	b.w	#-2434 <$t.24+0x1bb4>
 80066b8: 0d f5 83 60                  	add.w	r0, sp, #1048
 80066bc: 8b 46                        	mov	r11, r1
;     let mut attribute_data_buf = [0; MAX_ATTRIBUTE_DATA_BUF_LEN];
 80066be: f9 21                        	movs	r1, #249
 80066c0: 15 f0 a0 ff                  	bl	#89920
;     attribute_data_buf[..data_len - 1].copy_from_slice(&buffer[6..]);
 80066c4: 60 1e                        	subs	r0, r4, #1
;         } else if self.end > slice.len() {
 80066c6: fa 28                        	cmp	r0, #250
 80066c8: 85 f0 43 87                  	bhs.w	#24198 <$t.42+0x398>
;                 if !(*left_val == *right_val) {
 80066cc: 58 45                        	cmp	r0, r11
 80066ce: 45 f0 f3 86                  	bne.w	#24038 <$t.42+0x2fe>
 80066d2: 08 f1 09 01                  	add.w	r1, r8, #9
 80066d6: 0d f5 83 60                  	add.w	r0, sp, #1048
;     copy_nonoverlapping(src, dst, count)
 80066da: 5a 46                        	mov	r2, r11
 80066dc: 15 f0 1d fe                  	bl	#89146
;         assert!($size <= $src.len());
 80066e0: a9 98                        	ldr	r0, [sp, #676]
 80066e2: 00 f0 fe 00                  	and	r0, r0, #254
 80066e6: 02 28                        	cmp	r0, #2
 80066e8: 3e f4 ec a8                  	beq.w	#-7720 <$t.24+0x742>
;     Ok(AttReadByGroupTypeResponse {
 80066ec: da f8 12 00                  	ldr.w	r0, [r10, #18]
 80066f0: a2 90                        	str	r0, [sp, #648]
 80066f2: da f8 0a 00                  	ldr.w	r0, [r10, #10]
 80066f6: a7 90                        	str	r0, [sp, #668]
 80066f8: ba f8 0e 00                  	ldrh.w	r0, [r10, #14]
 80066fc: 99 90                        	str	r0, [sp, #612]
 80066fe: 9a f8 e3 00                  	ldrb.w	r0, [r10, #227]
 8006702: a5 90                        	str	r0, [sp, #660]
 8006704: ba f8 e1 00                  	ldrh.w	r0, [r10, #225]
 8006708: a4 90                        	str	r0, [sp, #656]
 800670a: ba f8 16 00                  	ldrh.w	r0, [r10, #22]
 800670e: a6 90                        	str	r0, [sp, #664]
 8006710: dd f8 1e 04                  	ldr.w	r0, [sp, #1054]
 8006714: a9 90                        	str	r0, [sp, #676]
 8006716: dd f8 3e 04                  	ldr.w	r0, [sp, #1086]
 800671a: 91 90                        	str	r0, [sp, #580]
 800671c: 9d f8 10 05                  	ldrb.w	r0, [sp, #1296]
 8006720: 22 90                        	str	r0, [sp, #136]
 8006722: dd f8 0a 05                  	ldr.w	r0, [sp, #1290]
 8006726: 25 90                        	str	r0, [sp, #148]
 8006728: 9d f8 09 05                  	ldrb.w	r0, [sp, #1289]
 800672c: 24 90                        	str	r0, [sp, #144]
 800672e: 9d f8 08 05                  	ldrb.w	r0, [sp, #1288]
 8006732: 26 90                        	str	r0, [sp, #152]
 8006734: bd f8 06 05                  	ldrh.w	r0, [sp, #1286]
 8006738: 2b 90                        	str	r0, [sp, #172]
 800673a: 9d f8 02 05                  	ldrb.w	r0, [sp, #1282]
 800673e: 88 90                        	str	r0, [sp, #544]
 8006740: dd f8 fe 04                  	ldr.w	r0, [sp, #1278]
 8006744: 87 90                        	str	r0, [sp, #540]
 8006746: dd f8 fa 04                  	ldr.w	r0, [sp, #1274]
 800674a: 74 90                        	str	r0, [sp, #464]
 800674c: dd f8 f6 04                  	ldr.w	r0, [sp, #1270]
 8006750: 59 90                        	str	r0, [sp, #356]
 8006752: 9d f8 f5 04                  	ldrb.w	r0, [sp, #1269]
 8006756: 2d 90                        	str	r0, [sp, #180]
 8006758: 9d f8 f4 04                  	ldrb.w	r0, [sp, #1268]
 800675c: 2c 90                        	str	r0, [sp, #176]
 800675e: bd f8 f2 04                  	ldrh.w	r0, [sp, #1266]
 8006762: 32 90                        	str	r0, [sp, #200]
 8006764: dd f8 ee 04                  	ldr.w	r0, [sp, #1262]
 8006768: 5a 90                        	str	r0, [sp, #360]
 800676a: 9d f8 ed 04                  	ldrb.w	r0, [sp, #1261]
 800676e: 2f 90                        	str	r0, [sp, #188]
 8006770: 9d f8 ec 04                  	ldrb.w	r0, [sp, #1260]
 8006774: 2e 90                        	str	r0, [sp, #184]
 8006776: bd f8 ea 04                  	ldrh.w	r0, [sp, #1258]
 800677a: 36 90                        	str	r0, [sp, #216]
 800677c: dd f8 e6 04                  	ldr.w	r0, [sp, #1254]
 8006780: 5b 90                        	str	r0, [sp, #364]
 8006782: 9d f8 e5 04                  	ldrb.w	r0, [sp, #1253]
 8006786: 31 90                        	str	r0, [sp, #196]
 8006788: 9d f8 e4 04                  	ldrb.w	r0, [sp, #1252]
 800678c: 30 90                        	str	r0, [sp, #192]
 800678e: bd f8 e2 04                  	ldrh.w	r0, [sp, #1250]
 8006792: 39 90                        	str	r0, [sp, #228]
 8006794: dd f8 de 04                  	ldr.w	r0, [sp, #1246]
 8006798: 5c 90                        	str	r0, [sp, #368]
 800679a: 9d f8 dd 04                  	ldrb.w	r0, [sp, #1245]
 800679e: 35 90                        	str	r0, [sp, #212]
 80067a0: 9d f8 dc 04                  	ldrb.w	r0, [sp, #1244]
 80067a4: 33 90                        	str	r0, [sp, #204]
 80067a6: bd f8 da 04                  	ldrh.w	r0, [sp, #1242]
 80067aa: 76 90                        	str	r0, [sp, #472]
 80067ac: dd f8 d6 04                  	ldr.w	r0, [sp, #1238]
 80067b0: 5d 90                        	str	r0, [sp, #372]
 80067b2: 9d f8 d5 04                  	ldrb.w	r0, [sp, #1237]
 80067b6: 38 90                        	str	r0, [sp, #224]
 80067b8: 9d f8 d4 04                  	ldrb.w	r0, [sp, #1236]
 80067bc: 37 90                        	str	r0, [sp, #220]
 80067be: bd f8 d2 04                  	ldrh.w	r0, [sp, #1234]
 80067c2: 77 90                        	str	r0, [sp, #476]
 80067c4: dd f8 ce 04                  	ldr.w	r0, [sp, #1230]
 80067c8: 5e 90                        	str	r0, [sp, #376]
 80067ca: 9d f8 cd 04                  	ldrb.w	r0, [sp, #1229]
 80067ce: 3b 90                        	str	r0, [sp, #236]
 80067d0: 9d f8 cc 04                  	ldrb.w	r0, [sp, #1228]
 80067d4: 3a 90                        	str	r0, [sp, #232]
 80067d6: bd f8 ca 04                  	ldrh.w	r0, [sp, #1226]
 80067da: 78 90                        	str	r0, [sp, #480]
 80067dc: dd f8 c6 04                  	ldr.w	r0, [sp, #1222]
 80067e0: 5f 90                        	str	r0, [sp, #380]
 80067e2: 9d f8 c5 04                  	ldrb.w	r0, [sp, #1221]
 80067e6: 3d 90                        	str	r0, [sp, #244]
 80067e8: 9d f8 c4 04                  	ldrb.w	r0, [sp, #1220]
 80067ec: 3c 90                        	str	r0, [sp, #240]
 80067ee: bd f8 c2 04                  	ldrh.w	r0, [sp, #1218]
 80067f2: 79 90                        	str	r0, [sp, #484]
 80067f4: dd f8 be 04                  	ldr.w	r0, [sp, #1214]
 80067f8: 60 90                        	str	r0, [sp, #384]
 80067fa: 9d f8 bd 04                  	ldrb.w	r0, [sp, #1213]
 80067fe: 3f 90                        	str	r0, [sp, #252]
 8006800: 9d f8 bc 04                  	ldrb.w	r0, [sp, #1212]
 8006804: 3e 90                        	str	r0, [sp, #248]
 8006806: bd f8 ba 04                  	ldrh.w	r0, [sp, #1210]
 800680a: 7a 90                        	str	r0, [sp, #488]
 800680c: dd f8 b6 04                  	ldr.w	r0, [sp, #1206]
 8006810: 61 90                        	str	r0, [sp, #388]
 8006812: 9d f8 b5 04                  	ldrb.w	r0, [sp, #1205]
 8006816: 41 90                        	str	r0, [sp, #260]
 8006818: 9d f8 b4 04                  	ldrb.w	r0, [sp, #1204]
 800681c: 40 90                        	str	r0, [sp, #256]
 800681e: bd f8 b2 04                  	ldrh.w	r0, [sp, #1202]
 8006822: 7b 90                        	str	r0, [sp, #492]
 8006824: dd f8 ae 04                  	ldr.w	r0, [sp, #1198]
 8006828: 62 90                        	str	r0, [sp, #392]
 800682a: 9d f8 ad 04                  	ldrb.w	r0, [sp, #1197]
 800682e: 43 90                        	str	r0, [sp, #268]
 8006830: 9d f8 ac 04                  	ldrb.w	r0, [sp, #1196]
 8006834: 42 90                        	str	r0, [sp, #264]
 8006836: bd f8 aa 04                  	ldrh.w	r0, [sp, #1194]
 800683a: 7c 90                        	str	r0, [sp, #496]
 800683c: dd f8 a6 04                  	ldr.w	r0, [sp, #1190]
 8006840: 63 90                        	str	r0, [sp, #396]
 8006842: 9d f8 a5 04                  	ldrb.w	r0, [sp, #1189]
 8006846: 45 90                        	str	r0, [sp, #276]
 8006848: 9d f8 a4 04                  	ldrb.w	r0, [sp, #1188]
 800684c: 44 90                        	str	r0, [sp, #272]
 800684e: bd f8 a2 04                  	ldrh.w	r0, [sp, #1186]
 8006852: 7e 90                        	str	r0, [sp, #504]
 8006854: dd f8 9e 04                  	ldr.w	r0, [sp, #1182]
 8006858: 64 90                        	str	r0, [sp, #400]
 800685a: 9d f8 9d 04                  	ldrb.w	r0, [sp, #1181]
 800685e: 47 90                        	str	r0, [sp, #284]
 8006860: 9d f8 9c 04                  	ldrb.w	r0, [sp, #1180]
 8006864: 46 90                        	str	r0, [sp, #280]
 8006866: bd f8 9a 04                  	ldrh.w	r0, [sp, #1178]
 800686a: 7f 90                        	str	r0, [sp, #508]
 800686c: dd f8 96 04                  	ldr.w	r0, [sp, #1174]
 8006870: 65 90                        	str	r0, [sp, #404]
 8006872: 9d f8 95 04                  	ldrb.w	r0, [sp, #1173]
 8006876: 4a 90                        	str	r0, [sp, #296]
 8006878: 9d f8 94 04                  	ldrb.w	r0, [sp, #1172]
 800687c: 49 90                        	str	r0, [sp, #292]
 800687e: bd f8 92 04                  	ldrh.w	r0, [sp, #1170]
 8006882: 80 90                        	str	r0, [sp, #512]
 8006884: dd f8 8e 04                  	ldr.w	r0, [sp, #1166]
 8006888: 66 90                        	str	r0, [sp, #408]
 800688a: 9d f8 8d 04                  	ldrb.w	r0, [sp, #1165]
 800688e: 4c 90                        	str	r0, [sp, #304]
 8006890: 9d f8 8c 04                  	ldrb.w	r0, [sp, #1164]
 8006894: 4b 90                        	str	r0, [sp, #300]
 8006896: bd f8 8a 04                  	ldrh.w	r0, [sp, #1162]
 800689a: 81 90                        	str	r0, [sp, #516]
 800689c: dd f8 86 04                  	ldr.w	r0, [sp, #1158]
 80068a0: 67 90                        	str	r0, [sp, #412]
 80068a2: 9d f8 85 04                  	ldrb.w	r0, [sp, #1157]
 80068a6: 4e 90                        	str	r0, [sp, #312]
 80068a8: 9d f8 84 04                  	ldrb.w	r0, [sp, #1156]
 80068ac: 4d 90                        	str	r0, [sp, #308]
 80068ae: bd f8 82 04                  	ldrh.w	r0, [sp, #1154]
 80068b2: 82 90                        	str	r0, [sp, #520]
 80068b4: dd f8 7e 04                  	ldr.w	r0, [sp, #1150]
 80068b8: 68 90                        	str	r0, [sp, #416]
 80068ba: 9d f8 7d 04                  	ldrb.w	r0, [sp, #1149]
 80068be: 6e 90                        	str	r0, [sp, #440]
 80068c0: 9d f8 7c 04                  	ldrb.w	r0, [sp, #1148]
 80068c4: 4f 90                        	str	r0, [sp, #316]
 80068c6: bd f8 7a 04                  	ldrh.w	r0, [sp, #1146]
 80068ca: 83 90                        	str	r0, [sp, #524]
 80068cc: dd f8 76 04                  	ldr.w	r0, [sp, #1142]
 80068d0: 69 90                        	str	r0, [sp, #420]
 80068d2: 9d f8 75 04                  	ldrb.w	r0, [sp, #1141]
 80068d6: 51 90                        	str	r0, [sp, #324]
 80068d8: 9d f8 74 04                  	ldrb.w	r0, [sp, #1140]
 80068dc: 50 90                        	str	r0, [sp, #320]
 80068de: bd f8 72 04                  	ldrh.w	r0, [sp, #1138]
 80068e2: 84 90                        	str	r0, [sp, #528]
 80068e4: dd f8 6e 04                  	ldr.w	r0, [sp, #1134]
 80068e8: 6a 90                        	str	r0, [sp, #424]
 80068ea: 9d f8 6d 04                  	ldrb.w	r0, [sp, #1133]
 80068ee: 54 90                        	str	r0, [sp, #336]
 80068f0: 9d f8 6c 04                  	ldrb.w	r0, [sp, #1132]
 80068f4: 52 90                        	str	r0, [sp, #328]
 80068f6: bd f8 6a 04                  	ldrh.w	r0, [sp, #1130]
 80068fa: 70 90                        	str	r0, [sp, #448]
 80068fc: dd f8 66 04                  	ldr.w	r0, [sp, #1126]
 8006900: 6b 90                        	str	r0, [sp, #428]
 8006902: 9d f8 65 04                  	ldrb.w	r0, [sp, #1125]
 8006906: 55 90                        	str	r0, [sp, #340]
 8006908: 9d f8 64 04                  	ldrb.w	r0, [sp, #1124]
 800690c: 53 90                        	str	r0, [sp, #332]
 800690e: bd f8 62 04                  	ldrh.w	r0, [sp, #1122]
 8006912: 85 90                        	str	r0, [sp, #532]
 8006914: dd f8 5e 04                  	ldr.w	r0, [sp, #1118]
 8006918: 6c 90                        	str	r0, [sp, #432]
 800691a: 9d f8 5d 04                  	ldrb.w	r0, [sp, #1117]
 800691e: 56 90                        	str	r0, [sp, #344]
 8006920: 9d f8 5c 04                  	ldrb.w	r0, [sp, #1116]
 8006924: 48 90                        	str	r0, [sp, #288]
 8006926: bd f8 5a 04                  	ldrh.w	r0, [sp, #1114]
 800692a: 7d 90                        	str	r0, [sp, #500]
 800692c: dd f8 56 04                  	ldr.w	r0, [sp, #1110]
 8006930: 6d 90                        	str	r0, [sp, #436]
 8006932: 9d f8 55 04                  	ldrb.w	r0, [sp, #1109]
 8006936: 57 90                        	str	r0, [sp, #348]
 8006938: 9d f8 54 04                  	ldrb.w	r0, [sp, #1108]
 800693c: 34 90                        	str	r0, [sp, #208]
 800693e: bd f8 52 04                  	ldrh.w	r0, [sp, #1106]
 8006942: 75 90                        	str	r0, [sp, #468]
 8006944: dd f8 4e 04                  	ldr.w	r0, [sp, #1102]
 8006948: 71 90                        	str	r0, [sp, #452]
 800694a: 9d f8 4d 04                  	ldrb.w	r0, [sp, #1101]
 800694e: 58 90                        	str	r0, [sp, #352]
 8006950: 9d f8 4c 04                  	ldrb.w	r0, [sp, #1100]
 8006954: 6f 90                        	str	r0, [sp, #444]
 8006956: bd f8 2a 04                  	ldrh.w	r0, [sp, #1066]
 800695a: da f8 00 90                  	ldr.w	r9, [r10]
 800695e: da f8 04 e0                  	ldr.w	lr, [r10, #4]
 8006962: dd f8 1a a4                  	ldr.w	r10, [sp, #1050]
 8006966: dd f8 3a c4                  	ldr.w	r12, [sp, #1082]
 800696a: bd f8 4a 84                  	ldrh.w	r8, [sp, #1098]
 800696e: bd f8 0e 15                  	ldrh.w	r1, [sp, #1294]
 8006972: dd f8 42 24                  	ldr.w	r2, [sp, #1090]
 8006976: dd f8 46 34                  	ldr.w	r3, [sp, #1094]
; }
 800697a: bd f8 18 54                  	ldrh.w	r5, [sp, #1048]
;     copy_nonoverlapping(src, dst, count)
 800697e: bd f8 ad 42                  	ldrh.w	r4, [sp, #685]
;     Ok(AttReadByGroupTypeResponse {
 8006982: 23 90                        	str	r0, [sp, #140]
 8006984: bd f8 32 04                  	ldrh.w	r0, [sp, #1074]
 8006988: 9b 90                        	str	r0, [sp, #620]
 800698a: 16 20                        	movs	r0, #22
;             0x0C0A => Ok(Stm32Wb5xEvent::AttReadByGroupTypeResponse(
 800698c: 8d f8 f0 03                  	strb.w	r0, [sp, #1008]
 8006990: fe 96                        	str	r6, [sp, #1016]
 8006992: bd f8 20 05                  	ldrh.w	r0, [sp, #1312]
 8006996: cd f8 f4 b3                  	str.w	r11, [sp, #1012]
 800699a: 4f ea 11 2b                  	lsr.w	r11, r1, #8
 800699e: ad f8 f1 03                  	strh.w	r0, [sp, #1009]
 80069a2: 9d f8 22 05                  	ldrb.w	r0, [sp, #1314]
 80069a6: 8d f8 f3 03                  	strb.w	r0, [sp, #1011]
 80069aa: 44 ea 05 40                  	orr.w	r0, r4, r5, lsl #16
 80069ae: ff 90                        	str	r0, [sp, #1020]
 80069b0: a2 98                        	ldr	r0, [sp, #648]
 80069b2: a6 9c                        	ldr	r4, [sp, #664]
 80069b4: a9 9d                        	ldr	r5, [sp, #676]
 80069b6: 00 0c                        	lsrs	r0, r0, #16
 80069b8: cd f8 9c 90                  	str.w	r9, [sp, #156]
 80069bc: 40 ea 04 40                  	orr.w	r0, r0, r4, lsl #16
 80069c0: a0 90                        	str	r0, [sp, #640]
 80069c2: 4f ea 19 40                  	lsr.w	r0, r9, #16
 80069c6: cd f8 48 a2                  	str.w	r10, [sp, #584]
 80069ca: 40 ea 0e 40                  	orr.w	r0, r0, lr, lsl #16
 80069ce: a6 90                        	str	r0, [sp, #664]
 80069d0: 4f ea 19 20                  	lsr.w	r0, r9, #8
 80069d4: 40 ea 0e 64                  	orr.w	r4, r0, lr, lsl #24
 80069d8: dd e9 a4 60                  	ldrd	r6, r0, [sp, #656]
 80069dc: 4f ea 15 49                  	lsr.w	r9, r5, #16
 80069e0: 46 ea 00 40                  	orr.w	r0, r6, r0, lsl #16
 80069e4: 2a 90                        	str	r0, [sp, #168]
 80069e6: 2a f0 ff 00                  	bic	r0, r10, #255
 80069ea: 00 0c                        	lsrs	r0, r0, #16
 80069ec: a3 90                        	str	r0, [sp, #652]
 80069ee: 18 0e                        	lsrs	r0, r3, #24
 80069f0: 8d 90                        	str	r0, [sp, #564]
 80069f2: 18 0c                        	lsrs	r0, r3, #16
 80069f4: 8c 90                        	str	r0, [sp, #560]
 80069f6: 18 0a                        	lsrs	r0, r3, #8
 80069f8: 8b 90                        	str	r0, [sp, #556]
 80069fa: 10 0e                        	lsrs	r0, r2, #24
 80069fc: ca f3 17 2a                  	ubfx	r10, r10, #8, #24
 8006a00: 8a 90                        	str	r0, [sp, #552]
 8006a02: 10 0c                        	lsrs	r0, r2, #16
 8006a04: 1e 92                        	str	r2, [sp, #120]
 8006a06: 86 90                        	str	r0, [sp, #536]
 8006a08: 10 0a                        	lsrs	r0, r2, #8
 8006a0a: 73 90                        	str	r0, [sp, #460]
 8006a0c: 4f ea 18 20                  	lsr.w	r0, r8, #8
 8006a10: 99 9a                        	ldr	r2, [sp, #612]
 8006a12: 89 90                        	str	r0, [sp, #548]
 8006a14: 9b 98                        	ldr	r0, [sp, #620]
 8006a16: 9f 91                        	str	r1, [sp, #636]
 8006a18: 12 0a                        	lsrs	r2, r2, #8
 8006a1a: 23 99                        	ldr	r1, [sp, #140]
 8006a1c: 00 0a                        	lsrs	r0, r0, #8
 8006a1e: cd f8 c8 81                  	str.w	r8, [sp, #456]
 8006a22: a1 90                        	str	r0, [sp, #644]
 8006a24: 00 20                        	movs	r0, #0
 8006a26: dd f8 98 82                  	ldr.w	r8, [sp, #664]
 8006a2a: 09 0a                        	lsrs	r1, r1, #8
;         match event_code {
 8006a2c: 98 92                        	str	r2, [sp, #608]
 8006a2e: f9 f7 be bd                  	b.w	#-25732 <$t.2+0x1f0>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8006a32: a9 98                        	ldr	r0, [sp, #676]
 8006a34: 48 f6 39 65                  	movw	r5, #36409
 8006a38: c3 f6 e3 05                  	movt	r5, #14563
 8006a3c: 4e f2 8e 31                  	movw	r1, #58254
 8006a40: a0 f1 06 09                  	sub.w	r9, r0, #6
 8006a44: c0 f6 38 61                  	movt	r1, #3640
;     if buffer.len() % PAIR_LEN != 0 {
 8006a48: 09 fb 05 f0                  	mul	r0, r9, r5
 8006a4c: 4f ea 70 00                  	ror.w	r0, r0, #1
 8006a50: 88 42                        	cmp	r0, r1
 8006a52: 40 f2 9e 87                  	bls.w	#3900 <$t.24+0x3810>
 8006a56: 12 22                        	movs	r2, #18
 8006a58: 12 20                        	movs	r0, #18
 8006a5a: 01 e0                        	b	#2 <$t.24+0x28de>
 8006a5c: 10 20                        	movs	r0, #16
 8006a5e: 12 22                        	movs	r2, #18
;         self
 8006a60: c9 b2                        	uxtb	r1, r1
 8006a62: c0 b2                        	uxtb	r0, r0
 8006a64: 40 ea 01 20                  	orr.w	r0, r0, r1, lsl #8
;         Err(v)
 8006a68: fe 90                        	str	r0, [sp, #1016]
 8006a6a: 00 20                        	movs	r0, #0
 8006a6c: fd 93                        	str	r3, [sp, #1012]
 8006a6e: a7 90                        	str	r0, [sp, #668]
 8006a70: 00 20                        	movs	r0, #0
 8006a72: 99 90                        	str	r0, [sp, #612]
 8006a74: 00 20                        	movs	r0, #0
 8006a76: 98 90                        	str	r0, [sp, #608]
 8006a78: 4f f0 00 09                  	mov.w	r9, #0
 8006a7c: 8d f8 f0 23                  	strb.w	r2, [sp, #1008]
 8006a80: 00 25                        	movs	r5, #0
 8006a82: 4f f0 00 0c                  	mov.w	r12, #0
 8006a86: f9 f7 91 bd                  	b.w	#-25822 <$t.2+0x1ee>
;                 Some(flags)
 8006a8a: bd f8 b7 02                  	ldrh.w	r0, [sp, #695]
 8006a8e: 00 26                        	movs	r6, #0
 8006a90: ad f8 0c 04                  	strh.w	r0, [sp, #1036]
 8006a94: bd f8 af 02                  	ldrh.w	r0, [sp, #687]
 8006a98: a5 90                        	str	r0, [sp, #660]
 8006a9a: dd f8 ba 02                  	ldr.w	r0, [sp, #698]
 8006a9e: a9 90                        	str	r0, [sp, #676]
 8006aa0: dd f8 c2 02                  	ldr.w	r0, [sp, #706]
 8006aa4: 8f 90                        	str	r0, [sp, #572]
 8006aa6: 9d f8 c6 02                  	ldrb.w	r0, [sp, #710]
 8006aaa: 92 90                        	str	r0, [sp, #584]
 8006aac: 9d f8 c7 02                  	ldrb.w	r0, [sp, #711]
 8006ab0: 12 90                        	str	r0, [sp, #72]
 8006ab2: 9d f8 c8 02                  	ldrb.w	r0, [sp, #712]
 8006ab6: 1c 90                        	str	r0, [sp, #112]
 8006ab8: 9d f8 c9 02                  	ldrb.w	r0, [sp, #713]
 8006abc: 1d 90                        	str	r0, [sp, #116]
 8006abe: 9d f8 ca 02                  	ldrb.w	r0, [sp, #714]
 8006ac2: a7 90                        	str	r0, [sp, #668]
 8006ac4: 9d f8 cb 02                  	ldrb.w	r0, [sp, #715]
 8006ac8: 9e 90                        	str	r0, [sp, #632]
 8006aca: 9d f8 cc 02                  	ldrb.w	r0, [sp, #716]
 8006ace: 9f 90                        	str	r0, [sp, #636]
 8006ad0: 9d f8 cd 02                  	ldrb.w	r0, [sp, #717]
 8006ad4: 23 90                        	str	r0, [sp, #140]
 8006ad6: 9d f8 ce 02                  	ldrb.w	r0, [sp, #718]
 8006ada: 91 90                        	str	r0, [sp, #580]
 8006adc: 9d f8 cf 02                  	ldrb.w	r0, [sp, #719]
 8006ae0: a1 90                        	str	r0, [sp, #644]
 8006ae2: 9d f8 d0 02                  	ldrb.w	r0, [sp, #720]
 8006ae6: 19 90                        	str	r0, [sp, #100]
 8006ae8: 9d f8 d1 02                  	ldrb.w	r0, [sp, #721]
 8006aec: 13 90                        	str	r0, [sp, #76]
 8006aee: 9d f8 d2 02                  	ldrb.w	r0, [sp, #722]
 8006af2: 1a 90                        	str	r0, [sp, #104]
 8006af4: 9d f8 d3 02                  	ldrb.w	r0, [sp, #723]
 8006af8: 99 90                        	str	r0, [sp, #612]
 8006afa: 9d f8 d4 02                  	ldrb.w	r0, [sp, #724]
 8006afe: 9d f8 b9 12                  	ldrb.w	r1, [sp, #697]
 8006b02: 98 90                        	str	r0, [sp, #608]
 8006b04: 9d f8 d5 02                  	ldrb.w	r0, [sp, #725]
 8006b08: 8d f8 0e 14                  	strb.w	r1, [sp, #1038]
 8006b0c: 9b 90                        	str	r0, [sp, #620]
 8006b0e: 9d f8 db 02                  	ldrb.w	r0, [sp, #731]
 8006b12: 9d f8 e3 12                  	ldrb.w	r1, [sp, #739]
 8006b16: 07 f8 44 0c                  	strb	r0, [r7, #-68]
 8006b1a: dd f8 d7 02                  	ldr.w	r0, [sp, #727]
 8006b1e: 10 91                        	str	r1, [sp, #64]
 8006b20: 9d f8 e5 12                  	ldrb.w	r1, [sp, #741]
 8006b24: 47 f8 48 0c                  	str	r0, [r7, #-72]
 8006b28: 9d f8 dc 02                  	ldrb.w	r0, [sp, #732]
 8006b2c: 1e 91                        	str	r1, [sp, #120]
 8006b2e: 9d f8 e6 12                  	ldrb.w	r1, [sp, #742]
 8006b32: a6 90                        	str	r0, [sp, #664]
 8006b34: 9d f8 dd 02                  	ldrb.w	r0, [sp, #733]
 8006b38: 73 91                        	str	r1, [sp, #460]
 8006b3a: 9d f8 e7 12                  	ldrb.w	r1, [sp, #743]
 8006b3e: 96 90                        	str	r0, [sp, #600]
 8006b40: 9d f8 de 02                  	ldrb.w	r0, [sp, #734]
 8006b44: 86 91                        	str	r1, [sp, #536]
 8006b46: 9d f8 e8 12                  	ldrb.w	r1, [sp, #744]
 8006b4a: 9d f8 b3 22                  	ldrb.w	r2, [sp, #691]
 8006b4e: 28 90                        	str	r0, [sp, #160]
 8006b50: 9d f8 df 02                  	ldrb.w	r0, [sp, #735]
 8006b54: 8a 91                        	str	r1, [sp, #552]
 8006b56: 9d f8 e9 12                  	ldrb.w	r1, [sp, #745]
 8006b5a: a3 92                        	str	r2, [sp, #652]
 8006b5c: 9d f8 b4 22                  	ldrb.w	r2, [sp, #692]
 8006b60: 18 90                        	str	r0, [sp, #96]
 8006b62: 9d f8 e0 02                  	ldrb.w	r0, [sp, #736]
 8006b66: 8e 91                        	str	r1, [sp, #568]
 8006b68: 9d f8 ea 12                  	ldrb.w	r1, [sp, #746]
 8006b6c: a2 92                        	str	r2, [sp, #648]
 8006b6e: 9d f8 b5 22                  	ldrb.w	r2, [sp, #693]
 8006b72: 0d 90                        	str	r0, [sp, #52]
 8006b74: 9d f8 e1 02                  	ldrb.w	r0, [sp, #737]
 8006b78: 8b 91                        	str	r1, [sp, #556]
 8006b7a: 9d f8 eb 12                  	ldrb.w	r1, [sp, #747]
;             Ok(t) => Ok(t),
 8006b7e: bd f8 0c 54                  	ldrh.w	r5, [sp, #1036]
;                 Some(flags)
 8006b82: a0 92                        	str	r2, [sp, #640]
 8006b84: 0f 90                        	str	r0, [sp, #60]
 8006b86: 8c 91                        	str	r1, [sp, #560]
 8006b88: 9d f8 ec 12                  	ldrb.w	r1, [sp, #748]
;             Ok(t) => Ok(t),
 8006b8c: ad f8 bc 53                  	strh.w	r5, [sp, #956]
 8006b90: 9d f8 0e 54                  	ldrb.w	r5, [sp, #1038]
;                 Some(flags)
 8006b94: 9d f8 b1 e2                  	ldrb.w	lr, [sp, #689]
 8006b98: 9d f8 b2 b2                  	ldrb.w	r11, [sp, #690]
 8006b9c: 9d f8 b6 92                  	ldrb.w	r9, [sp, #694]
 8006ba0: dd f8 be 22                  	ldr.w	r2, [sp, #702]
 8006ba4: 9d f8 d6 a2                  	ldrb.w	r10, [sp, #726]
 8006ba8: 9d f8 e2 02                  	ldrb.w	r0, [sp, #738]
 8006bac: 9d f8 e4 c2                  	ldrb.w	r12, [sp, #740]
 8006bb0: 8d 91                        	str	r1, [sp, #564]
 8006bb2: 9d f8 ed 12                  	ldrb.w	r1, [sp, #749]
;             Ok(t) => Ok(t),
 8006bb6: 8d f8 be 53                  	strb.w	r5, [sp, #958]
 8006bba: 57 f8 48 5c                  	ldr	r5, [r7, #-72]
;                 Some(flags)
 8006bbe: 94 91                        	str	r1, [sp, #592]
 8006bc0: 9d f8 ee 12                  	ldrb.w	r1, [sp, #750]
;             Ok(t) => Ok(t),
 8006bc4: fc 95                        	str	r5, [sp, #1008]
 8006bc6: 17 f8 44 5c                  	ldrb	r5, [r7, #-68]
 8006bca: 89 91                        	str	r1, [sp, #548]
 8006bcc: 8d f8 f4 53                  	strb.w	r5, [sp, #1012]
;         self
 8006bd0: bd f8 bc 43                  	ldrh.w	r4, [sp, #956]
;             })?,
 8006bd4: 00 2e                        	cmp	r6, #0
;         self
 8006bd6: 9d f8 be 53                  	ldrb.w	r5, [sp, #958]
 8006bda: fc 99                        	ldr	r1, [sp, #1008]
 8006bdc: 9d f8 f4 33                  	ldrb.w	r3, [sp, #1012]
 8006be0: ad f8 d8 43                  	strh.w	r4, [sp, #984]
 8006be4: 8d f8 da 53                  	strb.w	r5, [sp, #986]
 8006be8: cd f8 00 14                  	str.w	r1, [sp, #1024]
 8006bec: 8d f8 04 34                  	strb.w	r3, [sp, #1028]
;             })?,
 8006bf0: 4c d0                        	beq	#152 <$t.24+0x2b0a>
;         Err(v)
 8006bf2: bd f8 d9 13                  	ldrh.w	r1, [sp, #985]
 8006bf6: 4f f0 00 0b                  	mov.w	r11, #0
 8006bfa: 0e 91                        	str	r1, [sp, #56]
 8006bfc: 9d f8 d8 13                  	ldrb.w	r1, [sp, #984]
 8006c00: a4 91                        	str	r1, [sp, #656]
 8006c02: 9d f8 00 14                  	ldrb.w	r1, [sp, #1024]
 8006c06: 95 91                        	str	r1, [sp, #596]
 8006c08: 8f 99                        	ldr	r1, [sp, #572]
 8006c0a: 8d f8 28 15                  	strb.w	r1, [sp, #1320]
 8006c0e: 21 f0 ff 04                  	bic	r4, r1, #255
 8006c12: 8d 99                        	ldr	r1, [sp, #564]
 8006c14: 93 91                        	str	r1, [sp, #588]
 8006c16: 8e 99                        	ldr	r1, [sp, #568]
 8006c18: 90 91                        	str	r1, [sp, #576]
 8006c1a: 9e 99                        	ldr	r1, [sp, #632]
 8006c1c: 8f 91                        	str	r1, [sp, #572]
 8006c1e: 8a 99                        	ldr	r1, [sp, #552]
 8006c20: 1f 91                        	str	r1, [sp, #124]
 8006c22: 9f 99                        	ldr	r1, [sp, #636]
 8006c24: a5 91                        	str	r1, [sp, #660]
 8006c26: 86 99                        	ldr	r1, [sp, #536]
 8006c28: 9a 91                        	str	r1, [sp, #616]
 8006c2a: 73 99                        	ldr	r1, [sp, #460]
 8006c2c: 97 91                        	str	r1, [sp, #604]
 8006c2e: 91 99                        	ldr	r1, [sp, #580]
 8006c30: 27 91                        	str	r1, [sp, #156]
 8006c32: 1e 99                        	ldr	r1, [sp, #120]
 8006c34: 15 91                        	str	r1, [sp, #84]
 8006c36: a1 99                        	ldr	r1, [sp, #644]
 8006c38: 9c 91                        	str	r1, [sp, #624]
 8006c3a: 19 99                        	ldr	r1, [sp, #100]
 8006c3c: 9d 91                        	str	r1, [sp, #628]
 8006c3e: 13 99                        	ldr	r1, [sp, #76]
 8006c40: a2 91                        	str	r1, [sp, #648]
 8006c42: 1a 99                        	ldr	r1, [sp, #104]
 8006c44: a3 91                        	str	r1, [sp, #652]
 8006c46: 99 99                        	ldr	r1, [sp, #612]
 8006c48: a0 91                        	str	r1, [sp, #640]
 8006c4a: 0d 99                        	ldr	r1, [sp, #52]
 8006c4c: 11 91                        	str	r1, [sp, #68]
 8006c4e: 98 99                        	ldr	r1, [sp, #608]
 8006c50: 9e 91                        	str	r1, [sp, #632]
 8006c52: 18 99                        	ldr	r1, [sp, #96]
 8006c54: a9 9b                        	ldr	r3, [sp, #676]
 8006c56: a1 91                        	str	r1, [sp, #644]
 8006c58: 9b 99                        	ldr	r1, [sp, #620]
 8006c5a: cd f8 20 35                  	str.w	r3, [sp, #1312]
 8006c5e: 23 9b                        	ldr	r3, [sp, #140]
 8006c60: 9f 91                        	str	r1, [sp, #636]
 8006c62: 28 99                        	ldr	r1, [sp, #160]
 8006c64: dd f8 01 54                  	ldr.w	r5, [sp, #1025]
 8006c68: dd e9 8b 6e                  	ldrd	r6, lr, [sp, #556]
 8006c6c: 9b 91                        	str	r1, [sp, #620]
 8006c6e: 96 99                        	ldr	r1, [sp, #600]
 8006c70: cd f8 24 25                  	str.w	r2, [sp, #1316]
;             })?,
 8006c74: d2 b2                        	uxtb	r2, r2
 8006c76: 98 91                        	str	r1, [sp, #608]
 8006c78: a6 99                        	ldr	r1, [sp, #664]
 8006c7a: cd f8 58 c0                  	str.w	r12, [sp, #88]
 8006c7e: cd f8 8c a0                  	str.w	r10, [sp, #140]
 8006c82: 99 91                        	str	r1, [sp, #612]
 8006c84: cd f8 50 90                  	str.w	r9, [sp, #80]
 8006c88: fe f7 74 bd                  	b.w	#-5400 <$t.24+0x15f2>
;     Ok(LocalSupportedCommands {
 8006c8c: bd f8 d8 13                  	ldrh.w	r1, [sp, #984]
 8006c90: dd f8 00 34                  	ldr.w	r3, [sp, #1024]
 8006c94: 11 93                        	str	r3, [sp, #68]
 8006c96: 9d f8 04 34                  	ldrb.w	r3, [sp, #1028]
;                 ReturnParameters::ReadLocalSupportedCommands(to_supported_commands(&bytes[3..])?)
 8006c9a: ad f8 e8 13                  	strh.w	r1, [sp, #1000]
 8006c9e: a0 99                        	ldr	r1, [sp, #640]
;     Ok(LocalSupportedCommands {
 8006ca0: 16 93                        	str	r3, [sp, #88]
 8006ca2: 9d f8 da 33                  	ldrb.w	r3, [sp, #986]
 8006ca6: dd f8 a4 82                  	ldr.w	r8, [sp, #676]
;                 ReturnParameters::ReadLocalSupportedCommands(to_supported_commands(&bytes[3..])?)
 8006caa: 8d f8 e6 13                  	strb.w	r1, [sp, #998]
 8006cae: a2 99                        	ldr	r1, [sp, #648]
 8006cb0: 8f 9e                        	ldr	r6, [sp, #572]
;     Ok(LocalSupportedCommands {
 8006cb2: 8d f8 20 35                  	strb.w	r3, [sp, #1312]
;                 ReturnParameters::ReadLocalSupportedCommands(to_supported_commands(&bytes[3..])?)
 8006cb6: 8d f8 e5 13                  	strb.w	r1, [sp, #997]
 8006cba: a3 99                        	ldr	r1, [sp, #652]
;     Ok(LocalSupportedCommands {
 8006cbc: cd f8 21 85                  	str.w	r8, [sp, #1313]
;                 ReturnParameters::ReadLocalSupportedCommands(to_supported_commands(&bytes[3..])?)
 8006cc0: 8d f8 e4 13                  	strb.w	r1, [sp, #996]
;         self
 8006cc4: dd f8 20 15                  	ldr.w	r1, [sp, #1312]
;                 ReturnParameters::ReadLocalSupportedCommands(to_supported_commands(&bytes[3..])?)
 8006cc8: cd f8 ea 13                  	str.w	r1, [sp, #1002]
;     Ok(LocalSupportedCommands {
 8006ccc: 31 0e                        	lsrs	r1, r6, #24
 8006cce: 27 91                        	str	r1, [sp, #156]
 8006cd0: 26 f0 7f 41                  	bic	r1, r6, #4278190080
;                 ReturnParameters::ReadLocalSupportedCommands(to_supported_commands(&bytes[3..])?)
 8006cd4: a5 9b                        	ldr	r3, [sp, #660]
;         let params = match crate::opcode::Opcode(LittleEndian::read_u16(&bytes[1..])) {
 8006cd6: 0e 0c                        	lsrs	r6, r1, #16
 8006cd8: 09 0a                        	lsrs	r1, r1, #8
 8006cda: a5 91                        	str	r1, [sp, #660]
 8006cdc: 05 21                        	movs	r1, #5
 8006cde: 14 91                        	str	r1, [sp, #80]
;                 ReturnParameters::ReadLocalSupportedCommands(to_supported_commands(&bytes[3..])?)
 8006ce0: 8d f8 e7 93                  	strb.w	r9, [sp, #999]
 8006ce4: dd f8 60 90                  	ldr.w	r9, [sp, #96]
 8006ce8: 18 90                        	str	r0, [sp, #96]
 8006cea: 10 98                        	ldr	r0, [sp, #64]
 8006cec: ad f8 e0 33                  	strh.w	r3, [sp, #992]
; }
 8006cf0: 4f ea 18 63                  	lsr.w	r3, r8, #24
;                 ReturnParameters::ReadLocalSupportedCommands(to_supported_commands(&bytes[3..])?)
 8006cf4: 8d f8 e3 b3                  	strb.w	r11, [sp, #995]
 8006cf8: 8d f8 e2 e3                  	strb.w	lr, [sp, #994]
;         let params = match crate::opcode::Opcode(LittleEndian::read_u16(&bytes[1..])) {
 8006cfc: 1b 96                        	str	r6, [sp, #108]
 8006cfe: cd f8 7c 90                  	str.w	r9, [sp, #124]
 8006d02: 94 99                        	ldr	r1, [sp, #592]
 8006d04: 72 91                        	str	r1, [sp, #456]
 8006d06: 92 99                        	ldr	r1, [sp, #584]
 8006d08: 9c 91                        	str	r1, [sp, #624]
 8006d0a: 12 99                        	ldr	r1, [sp, #72]
 8006d0c: 9d 91                        	str	r1, [sp, #628]
 8006d0e: 1c 99                        	ldr	r1, [sp, #112]
 8006d10: a2 91                        	str	r1, [sp, #648]
 8006d12: 1d 99                        	ldr	r1, [sp, #116]
 8006d14: a3 91                        	str	r1, [sp, #652]
 8006d16: a7 99                        	ldr	r1, [sp, #668]
 8006d18: a0 91                        	str	r1, [sp, #640]
 8006d1a: 91 99                        	ldr	r1, [sp, #580]
 8006d1c: 95 91                        	str	r1, [sp, #596]
 8006d1e: a1 99                        	ldr	r1, [sp, #644]
 8006d20: 17 91                        	str	r1, [sp, #92]
 8006d22: a6 99                        	ldr	r1, [sp, #664]
 8006d24: 15 91                        	str	r1, [sp, #84]
 8006d26: 96 99                        	ldr	r1, [sp, #600]
 8006d28: 97 91                        	str	r1, [sp, #604]
 8006d2a: 28 99                        	ldr	r1, [sp, #160]
 8006d2c: 9a 91                        	str	r1, [sp, #616]
 8006d2e: 0d 99                        	ldr	r1, [sp, #52]
 8006d30: 90 91                        	str	r1, [sp, #576]
 8006d32: 0f 99                        	ldr	r1, [sp, #60]
 8006d34: cd f8 84 a2                  	str.w	r10, [sp, #644]
 8006d38: 91 91                        	str	r1, [sp, #580]
 8006d3a: cd f8 50 c2                  	str.w	r12, [sp, #592]
 8006d3e: 12 92                        	str	r2, [sp, #72]
 8006d40: cd e9 92 30                  	strd	r3, r0, [sp, #584]
 8006d44: fe f7 ea bc                  	b.w	#-5676 <$t.24+0x159a>
 8006d48: 05 20                        	movs	r0, #5
 8006d4a: 18 e0                        	b	#48 <$t.24+0x2bfc>
 8006d4c: 06 20                        	movs	r0, #6
 8006d4e: 16 e0                        	b	#44 <$t.24+0x2bfc>
;             require_len_at_least!(buffer, 5);
 8006d50: a9 98                        	ldr	r0, [sp, #676]
 8006d52: 05 28                        	cmp	r0, #5
 8006d54: 80 f0 1c 85                  	bhs.w	#2616 <$t.24+0x360e>
 8006d58: 01 21                        	movs	r1, #1
 8006d5a: 05 22                        	movs	r2, #5
 8006d5c: fc f7 43 b8                  	b.w	#-16250 <$t.16+0x9e0>
 8006d60: 03 20                        	movs	r0, #3
 8006d62: 0c e0                        	b	#24 <$t.24+0x2bfc>
;             require_len!(buffer, 10);
 8006d64: a9 98                        	ldr	r0, [sp, #676]
 8006d66: 0a 28                        	cmp	r0, #10
 8006d68: 40 f0 2f 85                  	bne.w	#2654 <$t.24+0x3648>
;             GapProcedure::GeneralConnectionEstablishment(addr)
 8006d6c: bd f8 b3 02                  	ldrh.w	r0, [sp, #691]
 8006d70: dd f8 af 12                  	ldr.w	r1, [sp, #687]
 8006d74: ad f8 24 05                  	strh.w	r0, [sp, #1316]
 8006d78: 04 20                        	movs	r0, #4
 8006d7a: cd f8 20 15                  	str.w	r1, [sp, #1312]
 8006d7e: a6 90                        	str	r0, [sp, #664]
 8006d80: 0d f5 83 60                  	add.w	r0, sp, #1048
 8006d84: 0d f5 a4 61                  	add.w	r1, sp, #1312
;         procedure,
 8006d88: f8 22                        	movs	r2, #248
 8006d8a: 15 f0 03 fb                  	bl	#87558
;         status: buffer[3].try_into().map_err(hci::event::Error::Vendor)?,
 8006d8e: 9d f8 ae 02                  	ldrb.w	r0, [sp, #686]
;             0x00 => Ok(GapProcedureStatus::Success),
 8006d92: 40 b1                        	cbz	r0, #16
 8006d94: 05 28                        	cmp	r0, #5
 8006d96: 04 d0                        	beq	#8 <$t.24+0x2c20>
 8006d98: 41 28                        	cmp	r0, #65
 8006d9a: 40 f0 a3 81                  	bne.w	#838 <$t.24+0x2f62>
 8006d9e: 01 20                        	movs	r0, #1
 8006da0: 02 e0                        	b	#4 <$t.24+0x2c26>
 8006da2: 02 20                        	movs	r0, #2
 8006da4: 00 e0                        	b	#0 <$t.24+0x2c26>
 8006da6: 00 20                        	movs	r0, #0
 8006da8: 9f 90                        	str	r0, [sp, #636]
;     Ok(GapProcedureComplete {
 8006daa: d9 f8 0a 00                  	ldr.w	r0, [r9, #10]
 8006dae: a7 90                        	str	r0, [sp, #668]
 8006db0: b9 f8 0e 00                  	ldrh.w	r0, [r9, #14]
 8006db4: 99 90                        	str	r0, [sp, #612]
 8006db6: 99 f8 e3 00                  	ldrb.w	r0, [r9, #227]
 8006dba: a9 90                        	str	r0, [sp, #676]
 8006dbc: b9 f8 e1 00                  	ldrh.w	r0, [r9, #225]
 8006dc0: a5 90                        	str	r0, [sp, #660]
 8006dc2: b9 f8 16 00                  	ldrh.w	r0, [r9, #22]
 8006dc6: a4 90                        	str	r0, [sp, #656]
 8006dc8: dd f8 47 04                  	ldr.w	r0, [sp, #1095]
 8006dcc: 91 90                        	str	r0, [sp, #580]
 8006dce: 9d f8 55 04                  	ldrb.w	r0, [sp, #1109]
 8006dd2: 6f 90                        	str	r0, [sp, #444]
 8006dd4: 9d f8 56 04                  	ldrb.w	r0, [sp, #1110]
 8006dd8: 58 90                        	str	r0, [sp, #352]
 8006dda: dd f8 57 04                  	ldr.w	r0, [sp, #1111]
 8006dde: 71 90                        	str	r0, [sp, #452]
 8006de0: bd f8 5b 04                  	ldrh.w	r0, [sp, #1115]
 8006de4: 75 90                        	str	r0, [sp, #468]
 8006de6: 9d f8 5d 04                  	ldrb.w	r0, [sp, #1117]
 8006dea: 34 90                        	str	r0, [sp, #208]
 8006dec: 9d f8 5e 04                  	ldrb.w	r0, [sp, #1118]
 8006df0: 57 90                        	str	r0, [sp, #348]
 8006df2: dd f8 5f 04                  	ldr.w	r0, [sp, #1119]
 8006df6: 6d 90                        	str	r0, [sp, #436]
 8006df8: bd f8 63 04                  	ldrh.w	r0, [sp, #1123]
 8006dfc: 7d 90                        	str	r0, [sp, #500]
 8006dfe: 9d f8 65 04                  	ldrb.w	r0, [sp, #1125]
 8006e02: 48 90                        	str	r0, [sp, #288]
 8006e04: 9d f8 66 04                  	ldrb.w	r0, [sp, #1126]
 8006e08: 56 90                        	str	r0, [sp, #344]
 8006e0a: dd f8 67 04                  	ldr.w	r0, [sp, #1127]
 8006e0e: 6c 90                        	str	r0, [sp, #432]
 8006e10: bd f8 6b 04                  	ldrh.w	r0, [sp, #1131]
 8006e14: 85 90                        	str	r0, [sp, #532]
 8006e16: 9d f8 6d 04                  	ldrb.w	r0, [sp, #1133]
 8006e1a: 53 90                        	str	r0, [sp, #332]
 8006e1c: 9d f8 6e 04                  	ldrb.w	r0, [sp, #1134]
 8006e20: 55 90                        	str	r0, [sp, #340]
 8006e22: dd f8 6f 04                  	ldr.w	r0, [sp, #1135]
 8006e26: 6b 90                        	str	r0, [sp, #428]
 8006e28: bd f8 73 04                  	ldrh.w	r0, [sp, #1139]
 8006e2c: 70 90                        	str	r0, [sp, #448]
 8006e2e: 9d f8 75 04                  	ldrb.w	r0, [sp, #1141]
 8006e32: 52 90                        	str	r0, [sp, #328]
 8006e34: 9d f8 76 04                  	ldrb.w	r0, [sp, #1142]
 8006e38: 54 90                        	str	r0, [sp, #336]
 8006e3a: dd f8 77 04                  	ldr.w	r0, [sp, #1143]
 8006e3e: 6a 90                        	str	r0, [sp, #424]
 8006e40: bd f8 7b 04                  	ldrh.w	r0, [sp, #1147]
 8006e44: 84 90                        	str	r0, [sp, #528]
 8006e46: 9d f8 7d 04                  	ldrb.w	r0, [sp, #1149]
 8006e4a: 50 90                        	str	r0, [sp, #320]
 8006e4c: 9d f8 7e 04                  	ldrb.w	r0, [sp, #1150]
 8006e50: 51 90                        	str	r0, [sp, #324]
 8006e52: dd f8 7f 04                  	ldr.w	r0, [sp, #1151]
 8006e56: 69 90                        	str	r0, [sp, #420]
 8006e58: bd f8 83 04                  	ldrh.w	r0, [sp, #1155]
 8006e5c: 83 90                        	str	r0, [sp, #524]
 8006e5e: 9d f8 85 04                  	ldrb.w	r0, [sp, #1157]
 8006e62: 4f 90                        	str	r0, [sp, #316]
 8006e64: 9d f8 86 04                  	ldrb.w	r0, [sp, #1158]
 8006e68: 6e 90                        	str	r0, [sp, #440]
 8006e6a: dd f8 87 04                  	ldr.w	r0, [sp, #1159]
 8006e6e: 68 90                        	str	r0, [sp, #416]
 8006e70: bd f8 8b 04                  	ldrh.w	r0, [sp, #1163]
 8006e74: 82 90                        	str	r0, [sp, #520]
 8006e76: 9d f8 8d 04                  	ldrb.w	r0, [sp, #1165]
 8006e7a: 4d 90                        	str	r0, [sp, #308]
 8006e7c: 9d f8 8e 04                  	ldrb.w	r0, [sp, #1166]
 8006e80: 4e 90                        	str	r0, [sp, #312]
 8006e82: dd f8 8f 04                  	ldr.w	r0, [sp, #1167]
 8006e86: 67 90                        	str	r0, [sp, #412]
 8006e88: bd f8 93 04                  	ldrh.w	r0, [sp, #1171]
 8006e8c: 81 90                        	str	r0, [sp, #516]
 8006e8e: 9d f8 95 04                  	ldrb.w	r0, [sp, #1173]
 8006e92: 4b 90                        	str	r0, [sp, #300]
 8006e94: 9d f8 96 04                  	ldrb.w	r0, [sp, #1174]
 8006e98: 4c 90                        	str	r0, [sp, #304]
 8006e9a: dd f8 97 04                  	ldr.w	r0, [sp, #1175]
 8006e9e: 66 90                        	str	r0, [sp, #408]
 8006ea0: bd f8 9b 04                  	ldrh.w	r0, [sp, #1179]
 8006ea4: 80 90                        	str	r0, [sp, #512]
 8006ea6: 9d f8 9d 04                  	ldrb.w	r0, [sp, #1181]
 8006eaa: 49 90                        	str	r0, [sp, #292]
 8006eac: 9d f8 9e 04                  	ldrb.w	r0, [sp, #1182]
 8006eb0: 4a 90                        	str	r0, [sp, #296]
 8006eb2: dd f8 9f 04                  	ldr.w	r0, [sp, #1183]
 8006eb6: 65 90                        	str	r0, [sp, #404]
 8006eb8: bd f8 a3 04                  	ldrh.w	r0, [sp, #1187]
 8006ebc: 7f 90                        	str	r0, [sp, #508]
 8006ebe: 9d f8 a5 04                  	ldrb.w	r0, [sp, #1189]
 8006ec2: 46 90                        	str	r0, [sp, #280]
 8006ec4: 9d f8 a6 04                  	ldrb.w	r0, [sp, #1190]
 8006ec8: 47 90                        	str	r0, [sp, #284]
 8006eca: dd f8 a7 04                  	ldr.w	r0, [sp, #1191]
 8006ece: 64 90                        	str	r0, [sp, #400]
 8006ed0: bd f8 ab 04                  	ldrh.w	r0, [sp, #1195]
 8006ed4: 7e 90                        	str	r0, [sp, #504]
 8006ed6: 9d f8 ad 04                  	ldrb.w	r0, [sp, #1197]
 8006eda: 44 90                        	str	r0, [sp, #272]
 8006edc: 9d f8 ae 04                  	ldrb.w	r0, [sp, #1198]
 8006ee0: 45 90                        	str	r0, [sp, #276]
 8006ee2: dd f8 af 04                  	ldr.w	r0, [sp, #1199]
 8006ee6: 63 90                        	str	r0, [sp, #396]
 8006ee8: bd f8 b3 04                  	ldrh.w	r0, [sp, #1203]
 8006eec: 7c 90                        	str	r0, [sp, #496]
 8006eee: 9d f8 b5 04                  	ldrb.w	r0, [sp, #1205]
 8006ef2: 42 90                        	str	r0, [sp, #264]
 8006ef4: 9d f8 b6 04                  	ldrb.w	r0, [sp, #1206]
 8006ef8: 43 90                        	str	r0, [sp, #268]
 8006efa: dd f8 b7 04                  	ldr.w	r0, [sp, #1207]
 8006efe: 62 90                        	str	r0, [sp, #392]
 8006f00: bd f8 bb 04                  	ldrh.w	r0, [sp, #1211]
 8006f04: 7b 90                        	str	r0, [sp, #492]
 8006f06: 9d f8 bd 04                  	ldrb.w	r0, [sp, #1213]
 8006f0a: 40 90                        	str	r0, [sp, #256]
 8006f0c: 9d f8 be 04                  	ldrb.w	r0, [sp, #1214]
 8006f10: 41 90                        	str	r0, [sp, #260]
 8006f12: dd f8 bf 04                  	ldr.w	r0, [sp, #1215]
 8006f16: 61 90                        	str	r0, [sp, #388]
 8006f18: bd f8 c3 04                  	ldrh.w	r0, [sp, #1219]
 8006f1c: 7a 90                        	str	r0, [sp, #488]
 8006f1e: 9d f8 c5 04                  	ldrb.w	r0, [sp, #1221]
 8006f22: 3e 90                        	str	r0, [sp, #248]
 8006f24: 9d f8 c6 04                  	ldrb.w	r0, [sp, #1222]
 8006f28: 3f 90                        	str	r0, [sp, #252]
 8006f2a: dd f8 c7 04                  	ldr.w	r0, [sp, #1223]
 8006f2e: 60 90                        	str	r0, [sp, #384]
 8006f30: bd f8 cb 04                  	ldrh.w	r0, [sp, #1227]
 8006f34: 79 90                        	str	r0, [sp, #484]
 8006f36: 9d f8 cd 04                  	ldrb.w	r0, [sp, #1229]
 8006f3a: 3c 90                        	str	r0, [sp, #240]
 8006f3c: 9d f8 ce 04                  	ldrb.w	r0, [sp, #1230]
 8006f40: 3d 90                        	str	r0, [sp, #244]
 8006f42: dd f8 cf 04                  	ldr.w	r0, [sp, #1231]
 8006f46: 5f 90                        	str	r0, [sp, #380]
 8006f48: bd f8 d3 04                  	ldrh.w	r0, [sp, #1235]
 8006f4c: 78 90                        	str	r0, [sp, #480]
 8006f4e: 9d f8 d5 04                  	ldrb.w	r0, [sp, #1237]
 8006f52: 3a 90                        	str	r0, [sp, #232]
 8006f54: 9d f8 d6 04                  	ldrb.w	r0, [sp, #1238]
 8006f58: 3b 90                        	str	r0, [sp, #236]
 8006f5a: dd f8 d7 04                  	ldr.w	r0, [sp, #1239]
 8006f5e: 5e 90                        	str	r0, [sp, #376]
 8006f60: bd f8 db 04                  	ldrh.w	r0, [sp, #1243]
 8006f64: 77 90                        	str	r0, [sp, #476]
 8006f66: 9d f8 dd 04                  	ldrb.w	r0, [sp, #1245]
 8006f6a: 37 90                        	str	r0, [sp, #220]
 8006f6c: 9d f8 de 04                  	ldrb.w	r0, [sp, #1246]
 8006f70: 38 90                        	str	r0, [sp, #224]
 8006f72: dd f8 df 04                  	ldr.w	r0, [sp, #1247]
 8006f76: 5d 90                        	str	r0, [sp, #372]
 8006f78: bd f8 e3 04                  	ldrh.w	r0, [sp, #1251]
 8006f7c: 76 90                        	str	r0, [sp, #472]
 8006f7e: 9d f8 e5 04                  	ldrb.w	r0, [sp, #1253]
 8006f82: 33 90                        	str	r0, [sp, #204]
 8006f84: 9d f8 e6 04                  	ldrb.w	r0, [sp, #1254]
 8006f88: 35 90                        	str	r0, [sp, #212]
 8006f8a: dd f8 e7 04                  	ldr.w	r0, [sp, #1255]
 8006f8e: 5c 90                        	str	r0, [sp, #368]
 8006f90: bd f8 eb 04                  	ldrh.w	r0, [sp, #1259]
 8006f94: 39 90                        	str	r0, [sp, #228]
 8006f96: 9d f8 ed 04                  	ldrb.w	r0, [sp, #1261]
 8006f9a: 30 90                        	str	r0, [sp, #192]
 8006f9c: 9d f8 ee 04                  	ldrb.w	r0, [sp, #1262]
 8006fa0: 31 90                        	str	r0, [sp, #196]
 8006fa2: dd f8 ef 04                  	ldr.w	r0, [sp, #1263]
 8006fa6: 5b 90                        	str	r0, [sp, #364]
 8006fa8: bd f8 f3 04                  	ldrh.w	r0, [sp, #1267]
 8006fac: 36 90                        	str	r0, [sp, #216]
 8006fae: 9d f8 f5 04                  	ldrb.w	r0, [sp, #1269]
 8006fb2: 2e 90                        	str	r0, [sp, #184]
 8006fb4: 9d f8 f6 04                  	ldrb.w	r0, [sp, #1270]
 8006fb8: 2f 90                        	str	r0, [sp, #188]
 8006fba: dd f8 f7 04                  	ldr.w	r0, [sp, #1271]
 8006fbe: 5a 90                        	str	r0, [sp, #360]
 8006fc0: bd f8 fb 04                  	ldrh.w	r0, [sp, #1275]
 8006fc4: 32 90                        	str	r0, [sp, #200]
 8006fc6: 9d f8 fd 04                  	ldrb.w	r0, [sp, #1277]
 8006fca: 2c 90                        	str	r0, [sp, #176]
 8006fcc: 9d f8 fe 04                  	ldrb.w	r0, [sp, #1278]
 8006fd0: 2d 90                        	str	r0, [sp, #180]
 8006fd2: dd f8 ff 04                  	ldr.w	r0, [sp, #1279]
 8006fd6: 59 90                        	str	r0, [sp, #356]
 8006fd8: dd f8 03 05                  	ldr.w	r0, [sp, #1283]
 8006fdc: 74 90                        	str	r0, [sp, #464]
 8006fde: dd f8 07 05                  	ldr.w	r0, [sp, #1287]
 8006fe2: 87 90                        	str	r0, [sp, #540]
 8006fe4: 9d f8 0b 05                  	ldrb.w	r0, [sp, #1291]
 8006fe8: 88 90                        	str	r0, [sp, #544]
 8006fea: 9d f8 0f 05                  	ldrb.w	r0, [sp, #1295]
 8006fee: 2b 90                        	str	r0, [sp, #172]
 8006ff0: bd f8 53 04                  	ldrh.w	r0, [sp, #1107]
 8006ff4: 72 90                        	str	r0, [sp, #456]
 8006ff6: 08 20                        	movs	r0, #8
 8006ff8: dd f8 1f 44                  	ldr.w	r4, [sp, #1055]
 8006ffc: 9d f8 1a 54                  	ldrb.w	r5, [sp, #1050]
;             0x0407 => Ok(Stm32Wb5xEvent::GapProcedureComplete(
 8007000: 8d f8 f0 03                  	strb.w	r0, [sp, #1008]
 8007004: a6 98                        	ldr	r0, [sp, #664]
;     Ok(GapProcedureComplete {
 8007006: bd f8 18 14                  	ldrh.w	r1, [sp, #1048]
 800700a: 07 f8 46 5c                  	strb	r5, [r7, #-70]
;             0x0407 => Ok(Stm32Wb5xEvent::GapProcedureComplete(
 800700e: 8d f8 f4 03                  	strb.w	r0, [sp, #1012]
;     Ok(GapProcedureComplete {
 8007012: dd f8 1b 54                  	ldr.w	r5, [sp, #1051]
;             0x0407 => Ok(Stm32Wb5xEvent::GapProcedureComplete(
 8007016: bd f8 00 04                  	ldrh.w	r0, [sp, #1024]
;     Ok(GapProcedureComplete {
 800701a: 27 f8 48 1c                  	strh	r1, [r7, #-72]
 800701e: d9 f8 00 a0                  	ldr.w	r10, [r9]
;             0x0407 => Ok(Stm32Wb5xEvent::GapProcedureComplete(
 8007022: cd e9 fe 54                  	strd	r5, r4, [sp, #1016]
 8007026: ad f8 f1 03                  	strh.w	r0, [sp, #1009]
 800702a: 9d f8 02 04                  	ldrb.w	r0, [sp, #1026]
 800702e: 8d f8 f3 03                  	strb.w	r0, [sp, #1011]
;         self
 8007032: 37 f8 48 0c                  	ldrh	r0, [r7, #-72]
;     Ok(GapProcedureComplete {
 8007036: d9 f8 04 e0                  	ldr.w	lr, [r9, #4]
;             0x0407 => Ok(Stm32Wb5xEvent::GapProcedureComplete(
 800703a: ad f8 f5 03                  	strh.w	r0, [sp, #1013]
;         self
 800703e: 17 f8 46 0c                  	ldrb	r0, [r7, #-70]
;     Ok(GapProcedureComplete {
 8007042: d9 f8 12 60                  	ldr.w	r6, [r9, #18]
;             0x0407 => Ok(Stm32Wb5xEvent::GapProcedureComplete(
 8007046: 8d f8 f7 03                  	strb.w	r0, [sp, #1015]
; }
 800704a: 4f ea 1a 40                  	lsr.w	r0, r10, #16
 800704e: 40 ea 0e 40                  	orr.w	r0, r0, lr, lsl #16
 8007052: a6 90                        	str	r0, [sp, #664]
 8007054: 4f ea 1a 20                  	lsr.w	r0, r10, #8
 8007058: 40 ea 0e 64                  	orr.w	r4, r0, lr, lsl #24
 800705c: a2 96                        	str	r6, [sp, #648]
 800705e: 30 0c                        	lsrs	r0, r6, #16
 8007060: a4 9e                        	ldr	r6, [sp, #656]
;     Ok(GapProcedureComplete {
 8007062: dd f8 4f 34                  	ldr.w	r3, [sp, #1103]
 8007066: dd f8 23 14                  	ldr.w	r1, [sp, #1059]
; }
 800706a: 40 ea 06 40                  	orr.w	r0, r0, r6, lsl #16
 800706e: a0 90                        	str	r0, [sp, #640]
;     Ok(GapProcedureComplete {
 8007070: a9 98                        	ldr	r0, [sp, #676]
 8007072: a5 9e                        	ldr	r6, [sp, #660]
 8007074: dd f8 4b 24                  	ldr.w	r2, [sp, #1099]
 8007078: 46 ea 00 40                  	orr.w	r0, r6, r0, lsl #16
 800707c: 2a 90                        	str	r0, [sp, #168]
;             0x0407 => Ok(Stm32Wb5xEvent::GapProcedureComplete(
 800707e: 18 0e                        	lsrs	r0, r3, #24
;     Ok(GapProcedureComplete {
 8007080: dd f8 27 94                  	ldr.w	r9, [sp, #1063]
;             0x0407 => Ok(Stm32Wb5xEvent::GapProcedureComplete(
 8007084: 8d 90                        	str	r0, [sp, #564]
 8007086: 18 0c                        	lsrs	r0, r3, #16
 8007088: 8c 90                        	str	r0, [sp, #560]
 800708a: 18 0a                        	lsrs	r0, r3, #8
 800708c: cd f8 9c a0                  	str.w	r10, [sp, #156]
 8007090: 4d 46                        	mov	r5, r9
;     Ok(GapProcedureComplete {
 8007092: dd f8 43 c4                  	ldr.w	r12, [sp, #1091]
;             0x0407 => Ok(Stm32Wb5xEvent::GapProcedureComplete(
 8007096: 4f ea 19 49                  	lsr.w	r9, r9, #16
;     Ok(GapProcedureComplete {
 800709a: bd f8 33 b4                  	ldrh.w	r11, [sp, #1075]
 800709e: 4f ea 11 2a                  	lsr.w	r10, r1, #8
 80070a2: bd f8 3b 84                  	ldrh.w	r8, [sp, #1083]
;             0x0407 => Ok(Stm32Wb5xEvent::GapProcedureComplete(
 80070a6: 8b 90                        	str	r0, [sp, #556]
 80070a8: c1 f3 0f 40                  	ubfx	r0, r1, #16, #16
 80070ac: a3 90                        	str	r0, [sp, #652]
 80070ae: 10 0e                        	lsrs	r0, r2, #24
;         self
 80070b0: 8a 90                        	str	r0, [sp, #552]
 80070b2: 10 0c                        	lsrs	r0, r2, #16
 80070b4: 86 90                        	str	r0, [sp, #536]
 80070b6: 10 0a                        	lsrs	r0, r2, #8
 80070b8: 73 90                        	str	r0, [sp, #460]
; }
 80070ba: 4f ea 18 20                  	lsr.w	r0, r8, #8
 80070be: a1 90                        	str	r0, [sp, #644]
 80070c0: 72 98                        	ldr	r0, [sp, #456]
 80070c2: 92 91                        	str	r1, [sp, #584]
 80070c4: 4f ea 1b 21                  	lsr.w	r1, r11, #8
 80070c8: cd f8 8c b0                  	str.w	r11, [sp, #140]
 80070cc: 00 0a                        	lsrs	r0, r0, #8
 80070ce: cd f8 6c 82                  	str.w	r8, [sp, #620]
 80070d2: 89 90                        	str	r0, [sp, #548]
 80070d4: 99 98                        	ldr	r0, [sp, #612]
 80070d6: 1e 92                        	str	r2, [sp, #120]
 80070d8: dd f8 98 82                  	ldr.w	r8, [sp, #664]
 80070dc: 00 0a                        	lsrs	r0, r0, #8
 80070de: 98 90                        	str	r0, [sp, #608]
 80070e0: fe f7 94 be                  	b.w	#-4824 <$t.24+0x1c8a>
 80070e4: 12 21                        	movs	r1, #18
 80070e6: 06 22                        	movs	r2, #6
 80070e8: fd f7 10 b8                  	b.w	#-12256 <$t.22+0x4>
 80070ec: 04 20                        	movs	r0, #4
 80070ee: 08 e0                        	b	#16 <$t.24+0x2f80>
 80070f0: 02 20                        	movs	r0, #2
 80070f2: 06 e0                        	b	#12 <$t.24+0x2f80>
 80070f4: 03 20                        	movs	r0, #3
 80070f6: 04 e0                        	b	#8 <$t.24+0x2f80>
 80070f8: 07 20                        	movs	r0, #7
 80070fa: 02 e0                        	b	#4 <$t.24+0x2f80>
 80070fc: 05 20                        	movs	r0, #5
 80070fe: 00 e0                        	b	#0 <$t.24+0x2f80>
 8007100: 06 20                        	movs	r0, #6
 8007102: 90 90                        	str	r0, [sp, #576]
;         0x01 => Ok(Event::LeConnectionComplete(to_le_connection_complete(
 8007104: f8 98                        	ldr	r0, [sp, #992]
 8007106: 00 22                        	movs	r2, #0
 8007108: 47 f8 47 0c                  	str	r0, [r7, #-71]
 800710c: 00 20                        	movs	r0, #0
 800710e: 96 90                        	str	r0, [sp, #600]
 8007110: a4 98                        	ldr	r0, [sp, #656]
 8007112: 07 f8 40 0c                  	strb	r0, [r7, #-64]
 8007116: a6 98                        	ldr	r0, [sp, #664]
;         self
 8007118: ad f8 f4 23                  	strh.w	r2, [sp, #1012]
;         0x01 => Ok(Event::LeConnectionComplete(to_le_connection_complete(
 800711c: 47 f8 3c 2c                  	str	r2, [r7, #-60]
 8007120: 27 f8 3e 2c                  	strh	r2, [r7, #-62]
 8007124: 07 f8 3f 2c                  	strb	r2, [r7, #-63]
;         self
 8007128: a7 9a                        	ldr	r2, [sp, #668]
;         0x01 => Ok(Event::LeConnectionComplete(to_le_connection_complete(
 800712a: 8d f8 ad 03                  	strb.w	r0, [sp, #941]
 800712e: a2 98                        	ldr	r0, [sp, #648]
 8007130: 8d f8 ac 03                  	strb.w	r0, [sp, #940]
;         self
 8007134: 4f ea 19 20                  	lsr.w	r0, r9, #8
 8007138: 40 ea 02 60                  	orr.w	r0, r0, r2, lsl #24
;         0x01 => Ok(Event::LeConnectionComplete(to_le_connection_complete(
 800713c: a7 90                        	str	r0, [sp, #668]
 800713e: 25 f0 0f 00                  	bic	r0, r5, #15
 8007142: a6 90                        	str	r0, [sp, #664]
 8007144: 9b 98                        	ldr	r0, [sp, #620]
 8007146: 00 22                        	movs	r2, #0
 8007148: dd f8 e3 13                  	ldr.w	r1, [sp, #995]
;         self
 800714c: fc 93                        	str	r3, [sp, #1008]
 800714e: 0a 23                        	movs	r3, #10
 8007150: cd f8 48 92                  	str.w	r9, [sp, #584]
;         0x01 => Ok(Event::LeConnectionComplete(to_le_connection_complete(
 8007154: 00 0a                        	lsrs	r0, r0, #8
 8007156: dd f8 8c 90                  	ldr.w	r9, [sp, #140]
 800715a: 47 f8 44 1c                  	str	r1, [r7, #-68]
 800715e: dd f8 f1 13                  	ldr.w	r1, [sp, #1009]
 8007162: a1 90                        	str	r0, [sp, #644]
 8007164: 4f ea 19 20                  	lsr.w	r0, r9, #8
 8007168: 95 90                        	str	r0, [sp, #596]
 800716a: 08 0e                        	lsrs	r0, r1, #24
 800716c: dd f8 00 64                  	ldr.w	r6, [sp, #1024]
 8007170: a0 90                        	str	r0, [sp, #640]
 8007172: 08 0c                        	lsrs	r0, r1, #16
 8007174: a3 90                        	str	r0, [sp, #652]
 8007176: 08 0a                        	lsrs	r0, r1, #8
 8007178: a2 90                        	str	r0, [sp, #648]
 800717a: dd f8 03 44                  	ldr.w	r4, [sp, #1027]
 800717e: 8d f8 b9 83                  	strb.w	r8, [sp, #953]
 8007182: 8d f8 b8 e3                  	strb.w	lr, [sp, #952]
 8007186: cd f8 0c 64                  	str.w	r6, [sp, #1036]
 800718a: 9d 91                        	str	r1, [sp, #628]
 800718c: 49 46                        	mov	r1, r9
 800718e: 07 f8 48 3c                  	strb	r3, [r7, #-72]
 8007192: cd f8 ae c3                  	str.w	r12, [sp, #942]
 8007196: cd f8 0f 44                  	str.w	r4, [sp, #1039]
 800719a: dd f8 7c a0                  	ldr.w	r10, [sp, #124]
 800719e: dd f8 9c 80                  	ldr.w	r8, [sp, #156]
 80071a2: 00 20                        	movs	r0, #0
 80071a4: a4 90                        	str	r0, [sp, #656]
 80071a6: 00 20                        	movs	r0, #0
 80071a8: 99 90                        	str	r0, [sp, #612]
 80071aa: 00 20                        	movs	r0, #0
 80071ac: a9 90                        	str	r0, [sp, #676]
 80071ae: 00 20                        	movs	r0, #0
 80071b0: a5 90                        	str	r0, [sp, #660]
 80071b2: 00 20                        	movs	r0, #0
 80071b4: 8f 90                        	str	r0, [sp, #572]
 80071b6: 00 20                        	movs	r0, #0
 80071b8: 94 90                        	str	r0, [sp, #592]
 80071ba: 00 20                        	movs	r0, #0
 80071bc: 93 90                        	str	r0, [sp, #588]
 80071be: 00 20                        	movs	r0, #0
 80071c0: 98 90                        	str	r0, [sp, #608]
 80071c2: 00 20                        	movs	r0, #0
 80071c4: 91 90                        	str	r0, [sp, #580]
 80071c6: 00 20                        	movs	r0, #0
 80071c8: 9f 90                        	str	r0, [sp, #636]
 80071ca: 00 20                        	movs	r0, #0
 80071cc: 9e 90                        	str	r0, [sp, #632]
 80071ce: fe f7 bd bb                  	b.w	#-6278 <$t.24+0x17ca>
 80071d2: 00 21                        	movs	r1, #0
 80071d4: 4f f0 0e 0c                  	mov.w	r12, #14
 80071d8: 00 25                        	movs	r5, #0
 80071da: 00 20                        	movs	r0, #0
 80071dc: 23 95                        	str	r5, [sp, #140]
 80071de: 00 23                        	movs	r3, #0
 80071e0: a6 90                        	str	r0, [sp, #664]
 80071e2: 4f f0 00 09                  	mov.w	r9, #0
 80071e6: 95 91                        	str	r1, [sp, #596]
 80071e8: 4f f0 00 0e                  	mov.w	lr, #0
 80071ec: 4f f0 00 08                  	mov.w	r8, #0
 80071f0: 00 26                        	movs	r6, #0
 80071f2: 00 22                        	movs	r2, #0
 80071f4: 00 20                        	movs	r0, #0
 80071f6: 00 25                        	movs	r5, #0
 80071f8: dd f8 84 a2                  	ldr.w	r10, [sp, #644]
 80071fc: 4f f0 00 0b                  	mov.w	r11, #0
 8007200: fc f7 83 bd                  	b.w	#-13562 <$t.18+0x9f2>
;         assert!($size <= $src.len());
 8007204: a9 98                        	ldr	r0, [sp, #676]
 8007206: 00 f0 fe 00                  	and	r0, r0, #254
 800720a: 02 28                        	cmp	r0, #2
 800720c: 3d f4 5a ab                  	beq.w	#-10572 <$t.24+0x742>
 8007210: 0d f5 83 61                  	add.w	r1, sp, #1048
 8007214: 11 25                        	movs	r5, #17
 8007216: 01 f1 18 00                  	add.w	r0, r1, #24
 800721a: 01 f1 20 02                  	add.w	r2, r1, #32
;     copy_nonoverlapping(src, dst, count)
 800721e: bd f8 ad 12                  	ldrh.w	r1, [sp, #685]
 8007222: a4 91                        	str	r1, [sp, #656]
;     Ok(AttFindByTypeValueResponse {
 8007224: 01 68                        	ldr	r1, [r0]
 8007226: a7 91                        	str	r1, [sp, #668]
 8007228: dd f8 42 14                  	ldr.w	r1, [sp, #1090]
 800722c: 91 91                        	str	r1, [sp, #580]
 800722e: bd f8 24 14                  	ldrh.w	r1, [sp, #1060]
 8007232: a5 91                        	str	r1, [sp, #660]
 8007234: 9d f8 50 14                  	ldrb.w	r1, [sp, #1104]
 8007238: 6f 91                        	str	r1, [sp, #444]
 800723a: 9d f8 51 14                  	ldrb.w	r1, [sp, #1105]
 800723e: 58 91                        	str	r1, [sp, #352]
 8007240: dd f8 52 14                  	ldr.w	r1, [sp, #1106]
 8007244: 71 91                        	str	r1, [sp, #452]
 8007246: bd f8 56 14                  	ldrh.w	r1, [sp, #1110]
 800724a: 75 91                        	str	r1, [sp, #468]
 800724c: 9d f8 58 14                  	ldrb.w	r1, [sp, #1112]
 8007250: 34 91                        	str	r1, [sp, #208]
 8007252: 9d f8 59 14                  	ldrb.w	r1, [sp, #1113]
 8007256: 57 91                        	str	r1, [sp, #348]
 8007258: dd f8 5a 14                  	ldr.w	r1, [sp, #1114]
 800725c: 6d 91                        	str	r1, [sp, #436]
 800725e: bd f8 5e 14                  	ldrh.w	r1, [sp, #1118]
 8007262: 7d 91                        	str	r1, [sp, #500]
 8007264: 9d f8 60 14                  	ldrb.w	r1, [sp, #1120]
 8007268: 48 91                        	str	r1, [sp, #288]
 800726a: 9d f8 61 14                  	ldrb.w	r1, [sp, #1121]
 800726e: 56 91                        	str	r1, [sp, #344]
 8007270: dd f8 62 14                  	ldr.w	r1, [sp, #1122]
 8007274: 6c 91                        	str	r1, [sp, #432]
 8007276: bd f8 66 14                  	ldrh.w	r1, [sp, #1126]
 800727a: 85 91                        	str	r1, [sp, #532]
 800727c: 9d f8 68 14                  	ldrb.w	r1, [sp, #1128]
 8007280: 53 91                        	str	r1, [sp, #332]
 8007282: 9d f8 69 14                  	ldrb.w	r1, [sp, #1129]
 8007286: 55 91                        	str	r1, [sp, #340]
 8007288: dd f8 6a 14                  	ldr.w	r1, [sp, #1130]
 800728c: 6b 91                        	str	r1, [sp, #428]
 800728e: bd f8 6e 14                  	ldrh.w	r1, [sp, #1134]
 8007292: 70 91                        	str	r1, [sp, #448]
 8007294: 9d f8 70 14                  	ldrb.w	r1, [sp, #1136]
 8007298: 52 91                        	str	r1, [sp, #328]
 800729a: 9d f8 71 14                  	ldrb.w	r1, [sp, #1137]
 800729e: 54 91                        	str	r1, [sp, #336]
 80072a0: dd f8 72 14                  	ldr.w	r1, [sp, #1138]
 80072a4: 6a 91                        	str	r1, [sp, #424]
 80072a6: bd f8 76 14                  	ldrh.w	r1, [sp, #1142]
 80072aa: 84 91                        	str	r1, [sp, #528]
 80072ac: 9d f8 78 14                  	ldrb.w	r1, [sp, #1144]
 80072b0: 80 88                        	ldrh	r0, [r0, #4]
 80072b2: 50 91                        	str	r1, [sp, #320]
 80072b4: 9d f8 79 14                  	ldrb.w	r1, [sp, #1145]
 80072b8: 99 90                        	str	r0, [sp, #612]
 80072ba: 90 88                        	ldrh	r0, [r2, #4]
 80072bc: d2 f8 00 b0                  	ldr.w	r11, [r2]
 80072c0: 51 91                        	str	r1, [sp, #324]
 80072c2: dd f8 7a 14                  	ldr.w	r1, [sp, #1146]
 80072c6: 9d f8 a8 24                  	ldrb.w	r2, [sp, #1192]
 80072ca: 69 91                        	str	r1, [sp, #420]
 80072cc: bd f8 7e 14                  	ldrh.w	r1, [sp, #1150]
 80072d0: 44 92                        	str	r2, [sp, #272]
 80072d2: 9d f8 a9 24                  	ldrb.w	r2, [sp, #1193]
 80072d6: 83 91                        	str	r1, [sp, #524]
 80072d8: 9d f8 80 14                  	ldrb.w	r1, [sp, #1152]
 80072dc: 45 92                        	str	r2, [sp, #276]
 80072de: dd f8 aa 24                  	ldr.w	r2, [sp, #1194]
 80072e2: 4f 91                        	str	r1, [sp, #316]
 80072e4: 9d f8 81 14                  	ldrb.w	r1, [sp, #1153]
 80072e8: 63 92                        	str	r2, [sp, #396]
 80072ea: bd f8 ae 24                  	ldrh.w	r2, [sp, #1198]
 80072ee: 6e 91                        	str	r1, [sp, #440]
 80072f0: dd f8 82 14                  	ldr.w	r1, [sp, #1154]
 80072f4: 7c 92                        	str	r2, [sp, #496]
 80072f6: 9d f8 b0 24                  	ldrb.w	r2, [sp, #1200]
 80072fa: 68 91                        	str	r1, [sp, #416]
 80072fc: bd f8 86 14                  	ldrh.w	r1, [sp, #1158]
 8007300: 42 92                        	str	r2, [sp, #264]
 8007302: 9d f8 b1 24                  	ldrb.w	r2, [sp, #1201]
 8007306: 82 91                        	str	r1, [sp, #520]
 8007308: 9d f8 88 14                  	ldrb.w	r1, [sp, #1160]
 800730c: 43 92                        	str	r2, [sp, #268]
 800730e: dd f8 b2 24                  	ldr.w	r2, [sp, #1202]
 8007312: 4d 91                        	str	r1, [sp, #308]
 8007314: 9d f8 89 14                  	ldrb.w	r1, [sp, #1161]
 8007318: 62 92                        	str	r2, [sp, #392]
 800731a: bd f8 b6 24                  	ldrh.w	r2, [sp, #1206]
 800731e: 4e 91                        	str	r1, [sp, #312]
 8007320: dd f8 8a 14                  	ldr.w	r1, [sp, #1162]
 8007324: 7b 92                        	str	r2, [sp, #492]
 8007326: 9d f8 b8 24                  	ldrb.w	r2, [sp, #1208]
 800732a: 67 91                        	str	r1, [sp, #412]
 800732c: bd f8 8e 14                  	ldrh.w	r1, [sp, #1166]
 8007330: 40 92                        	str	r2, [sp, #256]
 8007332: 9d f8 b9 24                  	ldrb.w	r2, [sp, #1209]
 8007336: 81 91                        	str	r1, [sp, #516]
 8007338: 9d f8 90 14                  	ldrb.w	r1, [sp, #1168]
 800733c: 41 92                        	str	r2, [sp, #260]
 800733e: dd f8 ba 24                  	ldr.w	r2, [sp, #1210]
 8007342: 4b 91                        	str	r1, [sp, #300]
 8007344: 9d f8 91 14                  	ldrb.w	r1, [sp, #1169]
 8007348: 61 92                        	str	r2, [sp, #388]
 800734a: bd f8 be 24                  	ldrh.w	r2, [sp, #1214]
 800734e: 4c 91                        	str	r1, [sp, #304]
 8007350: dd f8 92 14                  	ldr.w	r1, [sp, #1170]
 8007354: 7a 92                        	str	r2, [sp, #488]
 8007356: 9d f8 c0 24                  	ldrb.w	r2, [sp, #1216]
 800735a: 66 91                        	str	r1, [sp, #408]
 800735c: bd f8 96 14                  	ldrh.w	r1, [sp, #1174]
 8007360: 3e 92                        	str	r2, [sp, #248]
 8007362: 9d f8 c1 24                  	ldrb.w	r2, [sp, #1217]
 8007366: 80 91                        	str	r1, [sp, #512]
 8007368: 9d f8 98 14                  	ldrb.w	r1, [sp, #1176]
 800736c: 3f 92                        	str	r2, [sp, #252]
 800736e: dd f8 c2 24                  	ldr.w	r2, [sp, #1218]
 8007372: 49 91                        	str	r1, [sp, #292]
 8007374: 9d f8 99 14                  	ldrb.w	r1, [sp, #1177]
 8007378: 60 92                        	str	r2, [sp, #384]
 800737a: bd f8 c6 24                  	ldrh.w	r2, [sp, #1222]
 800737e: 4a 91                        	str	r1, [sp, #296]
 8007380: dd f8 9a 14                  	ldr.w	r1, [sp, #1178]
 8007384: 79 92                        	str	r2, [sp, #484]
 8007386: 9d f8 c8 24                  	ldrb.w	r2, [sp, #1224]
 800738a: 65 91                        	str	r1, [sp, #404]
 800738c: bd f8 9e 14                  	ldrh.w	r1, [sp, #1182]
 8007390: 3c 92                        	str	r2, [sp, #240]
 8007392: 9d f8 c9 24                  	ldrb.w	r2, [sp, #1225]
 8007396: 7f 91                        	str	r1, [sp, #508]
 8007398: 9d f8 a0 14                  	ldrb.w	r1, [sp, #1184]
 800739c: 3d 92                        	str	r2, [sp, #244]
 800739e: dd f8 ca 24                  	ldr.w	r2, [sp, #1226]
 80073a2: 46 91                        	str	r1, [sp, #280]
 80073a4: 9d f8 a1 14                  	ldrb.w	r1, [sp, #1185]
 80073a8: 5f 92                        	str	r2, [sp, #380]
 80073aa: bd f8 ce 24                  	ldrh.w	r2, [sp, #1230]
 80073ae: 47 91                        	str	r1, [sp, #284]
 80073b0: dd f8 a2 14                  	ldr.w	r1, [sp, #1186]
 80073b4: 78 92                        	str	r2, [sp, #480]
 80073b6: 9d f8 d0 24                  	ldrb.w	r2, [sp, #1232]
 80073ba: 64 91                        	str	r1, [sp, #400]
 80073bc: bd f8 a6 14                  	ldrh.w	r1, [sp, #1190]
 80073c0: 3a 92                        	str	r2, [sp, #232]
 80073c2: 9d f8 d1 24                  	ldrb.w	r2, [sp, #1233]
 80073c6: 7e 91                        	str	r1, [sp, #504]
 80073c8: 3b 92                        	str	r2, [sp, #236]
 80073ca: dd f8 d2 24                  	ldr.w	r2, [sp, #1234]
 80073ce: 9d f8 e0 14                  	ldrb.w	r1, [sp, #1248]
 80073d2: 5e 92                        	str	r2, [sp, #376]
 80073d4: bd f8 d6 24                  	ldrh.w	r2, [sp, #1238]
 80073d8: 33 91                        	str	r1, [sp, #204]
 80073da: 9d f8 e1 14                  	ldrb.w	r1, [sp, #1249]
 80073de: 77 92                        	str	r2, [sp, #476]
 80073e0: 9d f8 d8 24                  	ldrb.w	r2, [sp, #1240]
 80073e4: 35 91                        	str	r1, [sp, #212]
 80073e6: 9d f8 e8 14                  	ldrb.w	r1, [sp, #1256]
 80073ea: 37 92                        	str	r2, [sp, #220]
 80073ec: 9d f8 d9 24                  	ldrb.w	r2, [sp, #1241]
 80073f0: 30 91                        	str	r1, [sp, #192]
 80073f2: 9d f8 e9 14                  	ldrb.w	r1, [sp, #1257]
 80073f6: a3 90                        	str	r0, [sp, #652]
 80073f8: dd f8 1a 04                  	ldr.w	r0, [sp, #1050]
 80073fc: 38 92                        	str	r2, [sp, #224]
 80073fe: dd f8 da 24                  	ldr.w	r2, [sp, #1242]
 8007402: 31 91                        	str	r1, [sp, #196]
 8007404: dd f8 ea 14                  	ldr.w	r1, [sp, #1258]
 8007408: a9 90                        	str	r0, [sp, #676]
 800740a: dd f8 1e 04                  	ldr.w	r0, [sp, #1054]
 800740e: 5d 92                        	str	r2, [sp, #372]
 8007410: bd f8 de 24                  	ldrh.w	r2, [sp, #1246]
 8007414: 5b 91                        	str	r1, [sp, #364]
 8007416: bd f8 ee 14                  	ldrh.w	r1, [sp, #1262]
 800741a: 92 90                        	str	r0, [sp, #584]
 800741c: 76 92                        	str	r2, [sp, #472]
 800741e: dd f8 e2 24                  	ldr.w	r2, [sp, #1250]
 8007422: 36 91                        	str	r1, [sp, #216]
 8007424: 9d f8 f0 14                  	ldrb.w	r1, [sp, #1264]
 8007428: bd f8 22 04                  	ldrh.w	r0, [sp, #1058]
 800742c: 5c 92                        	str	r2, [sp, #368]
 800742e: bd f8 e6 24                  	ldrh.w	r2, [sp, #1254]
 8007432: 2e 91                        	str	r1, [sp, #184]
 8007434: 9d f8 f1 14                  	ldrb.w	r1, [sp, #1265]
 8007438: 39 92                        	str	r2, [sp, #228]
 800743a: 2f 91                        	str	r1, [sp, #188]
 800743c: dd f8 f2 14                  	ldr.w	r1, [sp, #1266]
 8007440: bd f8 18 24                  	ldrh.w	r2, [sp, #1048]
 8007444: 5a 91                        	str	r1, [sp, #360]
 8007446: dd f8 fa 14                  	ldr.w	r1, [sp, #1274]
;             0x0C05 => Ok(Stm32Wb5xEvent::AttFindByTypeValueResponse(
 800744a: 8d f8 f0 53                  	strb.w	r5, [sp, #1008]
 800744e: 05 46                        	mov	r5, r0
 8007450: ad f8 fa 23                  	strh.w	r2, [sp, #1018]
 8007454: a4 98                        	ldr	r0, [sp, #656]
 8007456: a6 9a                        	ldr	r2, [sp, #664]
;     Ok(AttFindByTypeValueResponse {
 8007458: 59 91                        	str	r1, [sp, #356]
 800745a: dd f8 fe 14                  	ldr.w	r1, [sp, #1278]
;             0x0C05 => Ok(Stm32Wb5xEvent::AttFindByTypeValueResponse(
 800745e: ad f8 f8 03                  	strh.w	r0, [sp, #1016]
 8007462: fd 92                        	str	r2, [sp, #1012]
 8007464: bd f8 e0 23                  	ldrh.w	r2, [sp, #992]
; }
 8007468: a3 98                        	ldr	r0, [sp, #652]
;     Ok(AttFindByTypeValueResponse {
 800746a: 74 91                        	str	r1, [sp, #464]
 800746c: dd f8 02 15                  	ldr.w	r1, [sp, #1282]
;             0x0C05 => Ok(Stm32Wb5xEvent::AttFindByTypeValueResponse(
 8007470: ad f8 f1 23                  	strh.w	r2, [sp, #1009]
 8007474: 9d f8 e2 23                  	ldrb.w	r2, [sp, #994]
;     Ok(AttFindByTypeValueResponse {
 8007478: 87 91                        	str	r1, [sp, #540]
 800747a: bd f8 0a 15                  	ldrh.w	r1, [sp, #1290]
;             0x0C05 => Ok(Stm32Wb5xEvent::AttFindByTypeValueResponse(
 800747e: 8d f8 f3 23                  	strb.w	r2, [sp, #1011]
; }
 8007482: 4f ea 1b 42                  	lsr.w	r2, r11, #16
 8007486: 42 ea 00 42                  	orr.w	r2, r2, r0, lsl #16
;     Ok(AttFindByTypeValueResponse {
 800748a: d9 f8 00 a0                  	ldr.w	r10, [r9]
 800748e: 2b 91                        	str	r1, [sp, #172]
 8007490: 9d f8 0c 15                  	ldrb.w	r1, [sp, #1292]
;             0x0C05 => Ok(Stm32Wb5xEvent::AttFindByTypeValueResponse(
 8007494: a9 98                        	ldr	r0, [sp, #676]
;     Ok(AttFindByTypeValueResponse {
 8007496: d9 f8 04 e0                  	ldr.w	lr, [r9, #4]
 800749a: 26 91                        	str	r1, [sp, #152]
 800749c: 9d f8 0d 15                  	ldrb.w	r1, [sp, #1293]
;             0x0C05 => Ok(Stm32Wb5xEvent::AttFindByTypeValueResponse(
 80074a0: ff 90                        	str	r0, [sp, #1020]
 80074a2: 92 98                        	ldr	r0, [sp, #584]
;     Ok(AttFindByTypeValueResponse {
 80074a4: 24 91                        	str	r1, [sp, #144]
 80074a6: bd f8 0e 15                  	ldrh.w	r1, [sp, #1294]
 80074aa: 25 91                        	str	r1, [sp, #148]
 80074ac: bd f8 4e 14                  	ldrh.w	r1, [sp, #1102]
 80074b0: a0 92                        	str	r2, [sp, #640]
; }
 80074b2: 4f ea 1a 42                  	lsr.w	r2, r10, #16
;     Ok(AttFindByTypeValueResponse {
 80074b6: 72 91                        	str	r1, [sp, #456]
 80074b8: cd f8 88 b2                  	str.w	r11, [sp, #648]
; }
 80074bc: 42 ea 0e 4b                  	orr.w	r11, r2, lr, lsl #16
 80074c0: 4f ea 1a 22                  	lsr.w	r2, r10, #8
;     Ok(AttFindByTypeValueResponse {
 80074c4: dd f8 3e c4                  	ldr.w	r12, [sp, #1086]
 80074c8: bd f8 2e 94                  	ldrh.w	r9, [sp, #1070]
; }
 80074cc: 42 ea 0e 62                  	orr.w	r2, r2, lr, lsl #24
;     Ok(AttFindByTypeValueResponse {
 80074d0: bd f8 36 84                  	ldrh.w	r8, [sp, #1078]
 80074d4: dd f8 46 64                  	ldr.w	r6, [sp, #1094]
 80074d8: dd f8 06 45                  	ldr.w	r4, [sp, #1286]
 80074dc: dd f8 f6 14                  	ldr.w	r1, [sp, #1270]
 80074e0: dd f8 4a 34                  	ldr.w	r3, [sp, #1098]
 80074e4: cd f8 9c a0                  	str.w	r10, [sp, #156]
;             0x0C05 => Ok(Stm32Wb5xEvent::AttFindByTypeValueResponse(
 80074e8: c0 f3 17 2a                  	ubfx	r10, r0, #8, #24
;         self
 80074ec: 20 f0 ff 00                  	bic	r0, r0, #255
 80074f0: 32 91                        	str	r1, [sp, #200]
 80074f2: 88 94                        	str	r4, [sp, #544]
;             0x0C05 => Ok(Stm32Wb5xEvent::AttFindByTypeValueResponse(
 80074f4: 00 0c                        	lsrs	r0, r0, #16
 80074f6: 1e 96                        	str	r6, [sp, #120]
 80074f8: a3 90                        	str	r0, [sp, #652]
 80074fa: 18 0e                        	lsrs	r0, r3, #24
 80074fc: 8d 90                        	str	r0, [sp, #564]
 80074fe: 18 0c                        	lsrs	r0, r3, #16
 8007500: 8c 90                        	str	r0, [sp, #560]
 8007502: 18 0a                        	lsrs	r0, r3, #8
;         self
 8007504: 8b 90                        	str	r0, [sp, #556]
 8007506: 08 0c                        	lsrs	r0, r1, #16
 8007508: 2c 90                        	str	r0, [sp, #176]
 800750a: 08 0e                        	lsrs	r0, r1, #24
 800750c: 2d 90                        	str	r0, [sp, #180]
 800750e: 20 0a                        	lsrs	r0, r4, #8
;             0x0C05 => Ok(Stm32Wb5xEvent::AttFindByTypeValueResponse(
 8007510: 2a 90                        	str	r0, [sp, #168]
 8007512: 30 0e                        	lsrs	r0, r6, #24
;         self
 8007514: 8a 90                        	str	r0, [sp, #552]
 8007516: 30 0c                        	lsrs	r0, r6, #16
 8007518: 86 90                        	str	r0, [sp, #536]
 800751a: 30 0a                        	lsrs	r0, r6, #8
 800751c: 73 90                        	str	r0, [sp, #460]
; }
 800751e: 4f ea 18 20                  	lsr.w	r0, r8, #8
 8007522: a1 90                        	str	r0, [sp, #644]
 8007524: 14 46                        	mov	r4, r2
 8007526: 72 98                        	ldr	r0, [sp, #456]
 8007528: 4f ea 19 21                  	lsr.w	r1, r9, #8
 800752c: cd f8 6c 82                  	str.w	r8, [sp, #620]
 8007530: d8 46                        	mov	r8, r11
 8007532: cd f8 8c 90                  	str.w	r9, [sp, #140]
 8007536: 00 0a                        	lsrs	r0, r0, #8
 8007538: dd f8 94 92                  	ldr.w	r9, [sp, #660]
 800753c: 89 90                        	str	r0, [sp, #548]
 800753e: 00 20                        	movs	r0, #0
 8007540: 99 9a                        	ldr	r2, [sp, #612]
 8007542: 12 0a                        	lsrs	r2, r2, #8
 8007544: 98 92                        	str	r2, [sp, #608]
 8007546: f9 f7 32 b8                  	b.w	#-28572 <$t.2+0x1f0>
;             0x0802 => Ok(Stm32Wb5xEvent::L2CapConnectionUpdateRequest(
 800754a: 57 f8 48 0c                  	ldr	r0, [r7, #-72]
 800754e: 0c 26                        	movs	r6, #12
 8007550: cd f8 f1 03                  	str.w	r0, [sp, #1009]
 8007554: a5 98                        	ldr	r0, [sp, #660]
 8007556: 8d f8 f9 03                  	strb.w	r0, [sp, #1017]
 800755a: 92 98                        	ldr	r0, [sp, #584]
 800755c: a0 99                        	ldr	r1, [sp, #640]
 800755e: 8d f8 f8 03                  	strb.w	r0, [sp, #1016]
 8007562: a2 98                        	ldr	r0, [sp, #648]
;             Ok(t) => Ok(t),
 8007564: dd f8 5c 35                  	ldr.w	r3, [sp, #1372]
;             0x0802 => Ok(Stm32Wb5xEvent::L2CapConnectionUpdateRequest(
 8007568: 40 ea 01 40                  	orr.w	r0, r0, r1, lsl #16
;         match event_code {
 800756c: a7 90                        	str	r0, [sp, #668]
 800756e: 08 0e                        	lsrs	r0, r1, #24
;             Ok(t) => Ok(t),
 8007570: bd f8 5a 45                  	ldrh.w	r4, [sp, #1370]
;         match event_code {
 8007574: 98 90                        	str	r0, [sp, #608]
 8007576: 08 0c                        	lsrs	r0, r1, #16
;             0x0802 => Ok(Stm32Wb5xEvent::L2CapConnectionUpdateRequest(
 8007578: 99 90                        	str	r0, [sp, #612]
 800757a: 18 0e                        	lsrs	r0, r3, #24
 800757c: 8d 90                        	str	r0, [sp, #564]
 800757e: 18 0c                        	lsrs	r0, r3, #16
 8007580: 8c 90                        	str	r0, [sp, #560]
 8007582: 18 0a                        	lsrs	r0, r3, #8
 8007584: 8b 90                        	str	r0, [sp, #556]
 8007586: 20 0a                        	lsrs	r0, r4, #8
 8007588: 8a 90                        	str	r0, [sp, #552]
;     let interval = ConnectionInterval::from_bytes(&buffer[8..16])
 800758a: 4f ea 1e 41                  	lsr.w	r1, lr, #16
;             Ok(t) => Ok(t),
 800758e: dd f8 54 05                  	ldr.w	r0, [sp, #1364]
;     copy_nonoverlapping(src, dst, count)
 8007592: 91 90                        	str	r0, [sp, #580]
 8007594: bd f8 ad 02                  	ldrh.w	r0, [sp, #685]
 8007598: 72 90                        	str	r0, [sp, #456]
;             0x0802 => Ok(Stm32Wb5xEvent::L2CapConnectionUpdateRequest(
 800759a: 57 f8 45 2c                  	ldr	r2, [r7, #-69]
; }
 800759e: 00 0a                        	lsrs	r0, r0, #8
;             0x0802 => Ok(Stm32Wb5xEvent::L2CapConnectionUpdateRequest(
 80075a0: fd 92                        	str	r2, [sp, #1012]
;         identifier: buffer[5],
 80075a2: 89 90                        	str	r0, [sp, #548]
 80075a4: 72 46                        	mov	r2, lr
 80075a6: 9d f8 b0 02                  	ldrb.w	r0, [sp, #688]
;     let interval = ConnectionInterval::from_bytes(&buffer[8..16])
 80075aa: 6f 90                        	str	r0, [sp, #444]
;             Ok(t) => Ok(t),
 80075ac: 9d f8 59 05                  	ldrb.w	r0, [sp, #1369]
 80075b0: 73 90                        	str	r0, [sp, #460]
 80075b2: 9d f8 58 05                  	ldrb.w	r0, [sp, #1368]
 80075b6: 1e 90                        	str	r0, [sp, #120]
 80075b8: dd f8 84 e2                  	ldr.w	lr, [sp, #644]
 80075bc: 86 94                        	str	r4, [sp, #536]
;             0x0802 => Ok(Stm32Wb5xEvent::L2CapConnectionUpdateRequest(
 80075be: cd f8 fc b3                  	str.w	r11, [sp, #1020]
 80075c2: 4f f0 00 0b                  	mov.w	r11, #0
 80075c6: ad f8 fa c3                  	strh.w	r12, [sp, #1018]
 80075ca: cd f8 84 92                  	str.w	r9, [sp, #644]
 80075ce: 89 46                        	mov	r9, r1
 80075d0: 71 46                        	mov	r1, lr
 80075d2: ae 46                        	mov	lr, r5
 80075d4: 8d f8 f0 63                  	strb.w	r6, [sp, #1008]
 80075d8: 15 46                        	mov	r5, r2
 80075da: dd f8 50 c5                  	ldr.w	r12, [sp, #1360]
 80075de: dd f8 70 a2                  	ldr.w	r10, [sp, #624]
 80075e2: 9a 9c                        	ldr	r4, [sp, #616]
 80075e4: a6 98                        	ldr	r0, [sp, #664]
 80075e6: a3 90                        	str	r0, [sp, #652]
 80075e8: 27 98                        	ldr	r0, [sp, #156]
 80075ea: 92 90                        	str	r0, [sp, #584]
 80075ec: 9b 98                        	ldr	r0, [sp, #620]
 80075ee: 23 90                        	str	r0, [sp, #140]
 80075f0: cd f8 6c 82                  	str.w	r8, [sp, #620]
 80075f4: dd f8 78 82                  	ldr.w	r8, [sp, #632]
 80075f8: 9d 98                        	ldr	r0, [sp, #628]
 80075fa: a0 90                        	str	r0, [sp, #640]
 80075fc: a4 98                        	ldr	r0, [sp, #656]
 80075fe: a2 90                        	str	r0, [sp, #648]
 8007600: a9 98                        	ldr	r0, [sp, #676]
 8007602: 27 90                        	str	r0, [sp, #156]
 8007604: 00 20                        	movs	r0, #0
 8007606: f8 f7 d2 bf                  	b.w	#-28764 <$t.2+0x1f0>
 800760a: 4f f0 04 09                  	mov.w	r9, #4
 800760e: 0f e0                        	b	#30 <$t.24+0x34ae>
;     copy_nonoverlapping(src, dst, count)
 8007610: bd f8 b4 62                  	ldrh.w	r6, [sp, #692]
;         0x0000 => Ok(L2CapConnectionUpdateResult::ParametersUpdated),
 8007614: 00 2e                        	cmp	r6, #0
 8007616: 00 f0 96 82                  	beq.w	#1324 <$t.24+0x39c4>
 800761a: 01 2e                        	cmp	r6, #1
 800761c: 40 f0 96 82                  	bne.w	#1324 <$t.24+0x39ca>
 8007620: 03 21                        	movs	r1, #3
 8007622: 02 f0 e2 be                  	b.w	#11716 <$t.24+0x6268>
 8007626: 4f f0 02 09                  	mov.w	r9, #2
 800762a: 01 e0                        	b	#2 <$t.24+0x34ae>
 800762c: 4f f0 03 09                  	mov.w	r9, #3
;         bdaddr: hci::to_bd_addr_type(buffer[3], addr)
 8007630: 9d f8 ae 02                  	ldrb.w	r0, [sp, #686]
 8007634: 00 22                        	movs	r2, #0
;         0 => Ok(BdAddrType::Public(addr)),
 8007636: 20 b1                        	cbz	r0, #8
 8007638: 01 28                        	cmp	r0, #1
 800763a: 7e d1                        	bne	#252 <$t.24+0x35b8>
 800763c: 4f f0 01 0a                  	mov.w	r10, #1
 8007640: 01 e0                        	b	#2 <$t.24+0x34c4>
 8007642: 4f f0 00 0a                  	mov.w	r10, #0
;         rssi: if rssi == RSSI_UNAVAILABLE {
 8007646: b1 f1 7f 00                  	subs.w	r0, r1, #127
;     let mut event = GapDeviceFound {
 800764a: cd f8 33 24                  	str.w	r2, [sp, #1075]
 800764e: cd f8 30 24                  	str.w	r2, [sp, #1072]
 8007652: cd f8 2c 24                  	str.w	r2, [sp, #1068]
 8007656: cd f8 28 24                  	str.w	r2, [sp, #1064]
 800765a: cd f8 24 24                  	str.w	r2, [sp, #1060]
 800765e: cd f8 20 24                  	str.w	r2, [sp, #1056]
 8007662: cd f8 1c 24                  	str.w	r2, [sp, #1052]
 8007666: cd f8 18 24                  	str.w	r2, [sp, #1048]
 800766a: 8d f8 38 14                  	strb.w	r1, [sp, #1080]
;         rssi: if rssi == RSSI_UNAVAILABLE {
 800766e: 18 bf                        	it	ne
 8007670: 01 20                        	movne	r0, #1
;         } else if self.end > slice.len() {
 8007672: 20 2d                        	cmp	r5, #32
;     let mut event = GapDeviceFound {
 8007674: 8d f8 37 04                  	strb.w	r0, [sp, #1079]
;         } else if self.end > slice.len() {
 8007678: 84 f0 65 87                  	bhs.w	#20170 <$t.42+0x38c>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 800767c: a9 98                        	ldr	r0, [sp, #676]
 800767e: 0c 38                        	subs	r0, #12
;                 if !(*left_val == *right_val) {
 8007680: a8 42                        	cmp	r0, r5
 8007682: 44 f0 19 87                  	bne.w	#20018 <$t.42+0x2fe>
;         intrinsics::offset(self, count)
 8007686: 08 f1 0e 01                  	add.w	r1, r8, #14
 800768a: 0d f5 83 60                  	add.w	r0, sp, #1048
;     copy_nonoverlapping(src, dst, count)
 800768e: 2a 46                        	mov	r2, r5
 8007690: 14 f0 43 fe                  	bl	#85126
;     Ok(event)
 8007694: dd f8 20 14                  	ldr.w	r1, [sp, #1056]
 8007698: 07 20                        	movs	r0, #7
;             0x0406 => Ok(Stm32Wb5xEvent::GapDeviceFound(to_gap_device_found(buffer)?)),
 800769a: 8d f8 f0 03                  	strb.w	r0, [sp, #1008]
 800769e: a7 98                        	ldr	r0, [sp, #668]
;     Ok(event)
 80076a0: dd f8 24 e4                  	ldr.w	lr, [sp, #1060]
;             0x0406 => Ok(Stm32Wb5xEvent::GapDeviceFound(to_gap_device_found(buffer)?)),
 80076a4: ad f8 fa 03                  	strh.w	r0, [sp, #1018]
 80076a8: 9d f8 22 05                  	ldrb.w	r0, [sp, #1314]
;     Ok(event)
 80076ac: dd f8 1c 44                  	ldr.w	r4, [sp, #1052]
;             0x0406 => Ok(Stm32Wb5xEvent::GapDeviceFound(to_gap_device_found(buffer)?)),
 80076b0: 8d f8 f3 03                  	strb.w	r0, [sp, #1011]
; }
 80076b4: 08 0c                        	lsrs	r0, r1, #16
 80076b6: 40 ea 0e 48                  	orr.w	r8, r0, lr, lsl #16
 80076ba: 08 0a                        	lsrs	r0, r1, #8
;             0x0406 => Ok(Stm32Wb5xEvent::GapDeviceFound(to_gap_device_found(buffer)?)),
 80076bc: fd 95                        	str	r5, [sp, #1012]
 80076be: 25 46                        	mov	r5, r4
; }
 80076c0: 40 ea 0e 64                  	orr.w	r4, r0, lr, lsl #24
;     Ok(event)
 80076c4: 30 68                        	ldr	r0, [r6]
 80076c6: 27 91                        	str	r1, [sp, #156]
 80076c8: a7 90                        	str	r0, [sp, #668]
 80076ca: b1 68                        	ldr	r1, [r6, #8]
 80076cc: b0 89                        	ldrh	r0, [r6, #12]
;             0x0406 => Ok(Stm32Wb5xEvent::GapDeviceFound(to_gap_device_found(buffer)?)),
 80076ce: bd f8 20 25                  	ldrh.w	r2, [sp, #1312]
 80076d2: ad f8 f1 23                  	strh.w	r2, [sp, #1009]
; }
 80076d6: 0a 0c                        	lsrs	r2, r1, #16
 80076d8: 42 ea 00 40                  	orr.w	r0, r2, r0, lsl #16
;     Ok(event)
 80076dc: a0 90                        	str	r0, [sp, #640]
 80076de: dd f8 18 34                  	ldr.w	r3, [sp, #1048]
 80076e2: b0 88                        	ldrh	r0, [r6, #4]
 80076e4: a2 91                        	str	r1, [sp, #648]
 80076e6: 00 21                        	movs	r1, #0
;             0x0406 => Ok(Stm32Wb5xEvent::GapDeviceFound(to_gap_device_found(buffer)?)),
 80076e8: cd f8 fc b3                  	str.w	r11, [sp, #1020]
 80076ec: 4f f0 00 0b                  	mov.w	r11, #0
 80076f0: 8d f8 f9 a3                  	strb.w	r10, [sp, #1017]
;     Ok(event)
 80076f4: 4f ea 13 2a                  	lsr.w	r10, r3, #8
;             0x0406 => Ok(Stm32Wb5xEvent::GapDeviceFound(to_gap_device_found(buffer)?)),
 80076f8: 8d f8 f8 93                  	strb.w	r9, [sp, #1016]
 80076fc: 4f ea 15 49                  	lsr.w	r9, r5, #16
 8007700: 8a 91                        	str	r1, [sp, #552]
 8007702: c3 f3 0f 41                  	ubfx	r1, r3, #16, #16
 8007706: 99 90                        	str	r0, [sp, #612]
; }
 8007708: 00 0a                        	lsrs	r0, r0, #8
;     Ok(event)
 800770a: 98 90                        	str	r0, [sp, #608]
 800770c: bd f8 30 04                  	ldrh.w	r0, [sp, #1072]
 8007710: 9b 90                        	str	r0, [sp, #620]
 8007712: bd f8 28 24                  	ldrh.w	r2, [sp, #1064]
; }
 8007716: 00 0a                        	lsrs	r0, r0, #8
 8007718: a3 91                        	str	r1, [sp, #652]
;     Ok(event)
 800771a: a1 90                        	str	r0, [sp, #644]
 800771c: 92 93                        	str	r3, [sp, #584]
; }
 800771e: 11 0a                        	lsrs	r1, r2, #8
 8007720: 23 92                        	str	r2, [sp, #140]
;     Ok(event)
 8007722: dd f8 38 c4                  	ldr.w	r12, [sp, #1080]
 8007726: 00 20                        	movs	r0, #0
 8007728: 8d 90                        	str	r0, [sp, #564]
 800772a: 00 20                        	movs	r0, #0
 800772c: 8c 90                        	str	r0, [sp, #560]
 800772e: 00 20                        	movs	r0, #0
 8007730: 8b 90                        	str	r0, [sp, #556]
 8007732: 00 20                        	movs	r0, #0
 8007734: 89 90                        	str	r0, [sp, #548]
 8007736: fe f7 69 bb                  	b.w	#-6446 <$t.24+0x1c8a>
 800773a: 04 22                        	movs	r2, #4
 800773c: 05 e0                        	b	#10 <$t.24+0x35c8>
 800773e: 0a 21                        	movs	r1, #10
 8007740: 4f f0 00 09                  	mov.w	r9, #0
 8007744: 00 23                        	movs	r3, #0
 8007746: 05 e2                        	b	#1034 <$t.24+0x39d2>
 8007748: 03 22                        	movs	r2, #3
 800774a: 12 21                        	movs	r1, #18
;         self
 800774c: d2 b2                        	uxtb	r2, r2
 800774e: 42 ea 00 20                  	orr.w	r0, r2, r0, lsl #8
;         Err(v)
 8007752: cd e9 fd 30                  	strd	r3, r0, [sp, #1012]
 8007756: 00 20                        	movs	r0, #0
 8007758: 8d f8 f0 13                  	strb.w	r1, [sp, #1008]
 800775c: 99 90                        	str	r0, [sp, #612]
 800775e: 4f f0 00 0a                  	mov.w	r10, #0
 8007762: 00 20                        	movs	r0, #0
 8007764: 4f f0 00 09                  	mov.w	r9, #0
 8007768: 98 90                        	str	r0, [sp, #608]
 800776a: 00 25                        	movs	r5, #0
 800776c: 00 21                        	movs	r1, #0
 800776e: 4f f0 00 0e                  	mov.w	lr, #0
 8007772: 4f f0 00 08                  	mov.w	r8, #0
 8007776: 00 24                        	movs	r4, #0
 8007778: 00 20                        	movs	r0, #0
 800777a: a3 90                        	str	r0, [sp, #652]
 800777c: 00 20                        	movs	r0, #0
 800777e: a1 90                        	str	r0, [sp, #644]
 8007780: 00 20                        	movs	r0, #0
 8007782: 9b 90                        	str	r0, [sp, #620]
 8007784: 00 20                        	movs	r0, #0
 8007786: a2 90                        	str	r0, [sp, #648]
 8007788: 00 20                        	movs	r0, #0
 800778a: 27 90                        	str	r0, [sp, #156]
 800778c: f8 f7 0e bf                  	b.w	#-29156 <$t.2+0x1ee>
 8007790: 0d f5 83 60                  	add.w	r0, sp, #1048
;             let mut name = NameBuffer([0; MAX_NAME_LEN]);
 8007794: f8 21                        	movs	r1, #248
 8007796: 14 f0 35 ff                  	bl	#85610
;             let name_len = buffer.len() - 4;
 800779a: a9 98                        	ldr	r0, [sp, #676]
 800779c: 04 38                        	subs	r0, #4
 800779e: 25 90                        	str	r0, [sp, #148]
;         } else if self.end > slice.len() {
 80077a0: f9 28                        	cmp	r0, #249
 80077a2: 84 f0 da 86                  	bhs.w	#19892 <$t.42+0x3a0>
 80077a6: 0d f5 83 65                  	add.w	r5, sp, #1048
;     copy_nonoverlapping(src, dst, count)
 80077aa: 25 9a                        	ldr	r2, [sp, #148]
;         intrinsics::offset(self, count)
 80077ac: 08 f1 07 01                  	add.w	r1, r8, #7
;     copy_nonoverlapping(src, dst, count)
 80077b0: 28 46                        	mov	r0, r5
 80077b2: 14 f0 b2 fd                  	bl	#84836
 80077b6: 0d f5 a4 60                  	add.w	r0, sp, #1312
;             GapProcedure::NameDiscovery(name_len, name)
 80077ba: 29 46                        	mov	r1, r5
 80077bc: f8 22                        	movs	r2, #248
 80077be: 14 f0 e9 fd                  	bl	#84946
 80077c2: 02 20                        	movs	r0, #2
;     let procedure = match buffer[2] {
 80077c4: a6 90                        	str	r0, [sp, #664]
 80077c6: ff f7 db ba                  	b.w	#-2634 <$t.24+0x2bfe>
 80077ca: 01 21                        	movs	r1, #1
 80077cc: 0a 22                        	movs	r2, #10
 80077ce: fb f7 0a bb                  	b.w	#-18924 <$t.16+0x9e0>
 80077d2: 0d f5 83 60                  	add.w	r0, sp, #1048
 80077d6: f8 21                        	movs	r1, #248
 80077d8: 14 f0 14 ff                  	bl	#85544
;     let count = buffer.len() / PAIR_LEN;
 80077dc: a0 08                        	lsrs	r0, r4, #2
 80077de: 00 21                        	movs	r1, #0
 80077e0: 25 90                        	str	r0, [sp, #148]
 80077e2: 00 20                        	movs	r0, #0
;         if self.n != 0 {
 80077e4: b1 eb 94 0f                  	cmp.w	r1, r4, lsr #2
 80077e8: 6e 90                        	str	r0, [sp, #440]
 80077ea: 02 f0 37 86                  	beq.w	#11374 <$t.24+0x62da>
;                     if is_empty!(self) {
 80077ee: a9 98                        	ldr	r0, [sp, #676]
 80077f0: 0d f5 83 66                  	add.w	r6, sp, #1048
 80077f4: 25 9b                        	ldr	r3, [sp, #148]
 80077f6: a0 f1 08 02                  	sub.w	r2, r0, #8
 80077fa: 00 20                        	movs	r0, #0
 80077fc: f8 28                        	cmp	r0, #248
 80077fe: 1c d0                        	beq	#56 <$t.24+0x36b8>
;         if self.start > self.end {
 8007800: 84 42                        	cmp	r4, r0
 8007802: c4 f0 75 86                  	blo.w	#19690 <$t.42+0x336>
;         assert!($size <= $src.len());
 8007806: 91 1c                        	adds	r1, r2, #2
 8007808: bd f4 5c a8                  	bhs.w	#-12104 <$t.24+0x742>
;     copy_nonoverlapping(src, dst, count)
 800780c: 08 eb 00 05                  	add.w	r5, r8, r0
 8007810: b5 f8 09 10                  	ldrh.w	r1, [r5, #9]
;         pair.handle = AttributeHandle(LittleEndian::read_u16(&buffer[index..]));
 8007814: 31 80                        	strh	r1, [r6]
;         if self.start > self.end {
 8007816: 81 1c                        	adds	r1, r0, #2
 8007818: 8c 42                        	cmp	r4, r1
 800781a: c4 f0 7c 86                  	blo.w	#19704 <$t.42+0x35c>
;         assert!($size <= $src.len());
 800781e: 01 2a                        	cmp	r2, #1
 8007820: 7d f6 50 a8                  	bls.w	#-12128 <$t.24+0x742>
 8007824: 31 1d                        	adds	r1, r6, #4
;     copy_nonoverlapping(src, dst, count)
 8007826: b5 f8 0b 50                  	ldrh.w	r5, [r5, #11]
 800782a: 01 3b                        	subs	r3, #1
;         if self.n != 0 {
 800782c: a2 f1 04 02                  	sub.w	r2, r2, #4
 8007830: 00 f1 04 00                  	add.w	r0, r0, #4
;         pair.uuid = Uuid16(LittleEndian::read_u16(&buffer[2 + index..]));
 8007834: 75 80                        	strh	r5, [r6, #2]
 8007836: 0e 46                        	mov	r6, r1
;         if self.n != 0 {
 8007838: e0 d1                        	bne	#-64 <$t.24+0x367a>
;     Ok(HandleUuidPairs::Format16(count, pairs))
 800783a: bd f8 28 04                  	ldrh.w	r0, [sp, #1064]
 800783e: bd f8 18 14                  	ldrh.w	r1, [sp, #1048]
 8007842: bd f8 52 64                  	ldrh.w	r6, [sp, #1106]
 8007846: 03 04                        	lsls	r3, r0, #16
 8007848: 9d f8 85 24                  	ldrb.w	r2, [sp, #1157]
 800784c: 08 04                        	lsls	r0, r1, #16
 800784e: 6e 92                        	str	r2, [sp, #440]
 8007850: a9 90                        	str	r0, [sp, #676]
 8007852: 30 0a                        	lsrs	r0, r6, #8
 8007854: 89 90                        	str	r0, [sp, #548]
 8007856: 9d f8 7d 04                  	ldrb.w	r0, [sp, #1149]
 800785a: 51 90                        	str	r0, [sp, #324]
 800785c: 9d f8 7c 04                  	ldrb.w	r0, [sp, #1148]
 8007860: 50 90                        	str	r0, [sp, #320]
 8007862: bd f8 7a 04                  	ldrh.w	r0, [sp, #1146]
 8007866: 84 90                        	str	r0, [sp, #528]
 8007868: dd f8 76 04                  	ldr.w	r0, [sp, #1142]
 800786c: 6a 90                        	str	r0, [sp, #424]
 800786e: 9d f8 75 04                  	ldrb.w	r0, [sp, #1141]
 8007872: 54 90                        	str	r0, [sp, #336]
 8007874: 9d f8 74 04                  	ldrb.w	r0, [sp, #1140]
 8007878: 52 90                        	str	r0, [sp, #328]
 800787a: bd f8 72 04                  	ldrh.w	r0, [sp, #1138]
 800787e: 70 90                        	str	r0, [sp, #448]
 8007880: dd f8 6e 04                  	ldr.w	r0, [sp, #1134]
 8007884: 6b 90                        	str	r0, [sp, #428]
 8007886: 9d f8 6d 04                  	ldrb.w	r0, [sp, #1133]
 800788a: 55 90                        	str	r0, [sp, #340]
 800788c: 9d f8 6c 04                  	ldrb.w	r0, [sp, #1132]
 8007890: 53 90                        	str	r0, [sp, #332]
 8007892: bd f8 6a 04                  	ldrh.w	r0, [sp, #1130]
 8007896: 85 90                        	str	r0, [sp, #532]
 8007898: dd f8 66 04                  	ldr.w	r0, [sp, #1126]
 800789c: 6c 90                        	str	r0, [sp, #432]
 800789e: 9d f8 65 04                  	ldrb.w	r0, [sp, #1125]
 80078a2: 56 90                        	str	r0, [sp, #344]
 80078a4: 9d f8 64 04                  	ldrb.w	r0, [sp, #1124]
 80078a8: 48 90                        	str	r0, [sp, #288]
 80078aa: bd f8 62 04                  	ldrh.w	r0, [sp, #1122]
 80078ae: 7d 90                        	str	r0, [sp, #500]
 80078b0: dd f8 5e 04                  	ldr.w	r0, [sp, #1118]
 80078b4: 6d 90                        	str	r0, [sp, #436]
 80078b6: 9d f8 5d 04                  	ldrb.w	r0, [sp, #1117]
 80078ba: 57 90                        	str	r0, [sp, #348]
 80078bc: 9d f8 5c 04                  	ldrb.w	r0, [sp, #1116]
 80078c0: 34 90                        	str	r0, [sp, #208]
 80078c2: bd f8 5a 04                  	ldrh.w	r0, [sp, #1114]
 80078c6: 9d f8 84 24                  	ldrb.w	r2, [sp, #1156]
 80078ca: 75 90                        	str	r0, [sp, #468]
 80078cc: dd f8 56 04                  	ldr.w	r0, [sp, #1110]
 80078d0: 4f 92                        	str	r2, [sp, #316]
 80078d2: bd f8 82 24                  	ldrh.w	r2, [sp, #1154]
 80078d6: 71 90                        	str	r0, [sp, #452]
 80078d8: 9d f8 55 04                  	ldrb.w	r0, [sp, #1109]
 80078dc: 83 92                        	str	r2, [sp, #524]
 80078de: dd f8 7e 24                  	ldr.w	r2, [sp, #1150]
 80078e2: 58 90                        	str	r0, [sp, #352]
 80078e4: 9d f8 54 04                  	ldrb.w	r0, [sp, #1108]
 80078e8: 69 92                        	str	r2, [sp, #420]
 80078ea: 6f 90                        	str	r0, [sp, #444]
 80078ec: dd f8 4e 04                  	ldr.w	r0, [sp, #1102]
 80078f0: bd f8 34 24                  	ldrh.w	r2, [sp, #1076]
 80078f4: 8e 90                        	str	r0, [sp, #568]
 80078f6: bd f8 4c 04                  	ldrh.w	r0, [sp, #1100]
 80078fa: a7 92                        	str	r2, [sp, #668]
 80078fc: 9d f8 33 24                  	ldrb.w	r2, [sp, #1075]
 8007900: 86 90                        	str	r0, [sp, #536]
 8007902: 9d f8 4b 04                  	ldrb.w	r0, [sp, #1099]
 8007906: 95 92                        	str	r2, [sp, #596]
 8007908: bd f8 2c 24                  	ldrh.w	r2, [sp, #1068]
 800790c: 73 90                        	str	r0, [sp, #460]
 800790e: dd f8 46 04                  	ldr.w	r0, [sp, #1094]
 8007912: a6 92                        	str	r2, [sp, #664]
 8007914: 9d f8 2b 24                  	ldrb.w	r2, [sp, #1067]
 8007918: 91 90                        	str	r0, [sp, #580]
 800791a: bd f8 44 04                  	ldrh.w	r0, [sp, #1092]
 800791e: 9c 92                        	str	r2, [sp, #624]
 8007920: bd f8 24 24                  	ldrh.w	r2, [sp, #1060]
 8007924: a5 90                        	str	r0, [sp, #660]
 8007926: 9d f8 43 04                  	ldrb.w	r0, [sp, #1091]
 800792a: a3 92                        	str	r2, [sp, #652]
 800792c: dd f8 1e 24                  	ldr.w	r2, [sp, #1054]
 8007930: a4 90                        	str	r0, [sp, #656]
 8007932: dd f8 3e 04                  	ldr.w	r0, [sp, #1086]
 8007936: 9e 92                        	str	r2, [sp, #632]
 8007938: bd f8 1c 24                  	ldrh.w	r2, [sp, #1052]
 800793c: a0 90                        	str	r0, [sp, #640]
 800793e: bd f8 3c 04                  	ldrh.w	r0, [sp, #1084]
 8007942: 9d 92                        	str	r2, [sp, #628]
 8007944: dd f8 02 25                  	ldr.w	r2, [sp, #1282]
 8007948: a2 90                        	str	r0, [sp, #648]
 800794a: 9d f8 3b 04                  	ldrb.w	r0, [sp, #1083]
 800794e: 74 92                        	str	r2, [sp, #464]
 8007950: 9d f8 4a 24                  	ldrb.w	r2, [sp, #1098]
 8007954: 9d f8 3a 44                  	ldrb.w	r4, [sp, #1082]
 8007958: a1 90                        	str	r0, [sp, #644]
 800795a: 1e 92                        	str	r2, [sp, #120]
 800795c: 9b 94                        	str	r4, [sp, #620]
 800795e: 9d f8 32 44                  	ldrb.w	r4, [sp, #1074]
 8007962: bd f8 26 14                  	ldrh.w	r1, [sp, #1062]
 8007966: dd f8 36 04                  	ldr.w	r0, [sp, #1078]
 800796a: dd f8 2e e4                  	ldr.w	lr, [sp, #1070]
 800796e: 9d f8 23 84                  	ldrb.w	r8, [sp, #1059]
 8007972: 9d f8 1a c4                  	ldrb.w	r12, [sp, #1050]
 8007976: 9d f8 1b a4                  	ldrb.w	r10, [sp, #1051]
 800797a: 9d f8 42 24                  	ldrb.w	r2, [sp, #1090]
 800797e: 23 94                        	str	r4, [sp, #140]
 8007980: 9d f8 2a 44                  	ldrb.w	r4, [sp, #1066]
 8007984: 27 94                        	str	r4, [sp, #156]
 8007986: 9d f8 22 44                  	ldrb.w	r4, [sp, #1058]
 800798a: 72 96                        	str	r6, [sp, #456]
 800798c: 92 94                        	str	r4, [sp, #584]
 800798e: 02 f0 d5 bd                  	b.w	#11178 <$t.24+0x63ba>
 8007992: 0d f5 83 60                  	add.w	r0, sp, #1048
 8007996: ea 21                        	movs	r1, #234
 8007998: 14 f0 34 fe                  	bl	#85096
;     let count = buffer.len() / PAIR_LEN;
 800799c: a9 fb 05 01                  	umull	r0, r1, r9, r5
;         if self.n != 0 {
 80079a0: b9 f1 12 0f                  	cmp.w	r9, #18
;     let count = buffer.len() / PAIR_LEN;
 80079a4: 4f ea 91 00                  	lsr.w	r0, r1, #2
;         if self.n != 0 {
 80079a8: 74 90                        	str	r0, [sp, #464]
 80079aa: 80 f0 e0 80                  	bhs.w	#448 <$t.24+0x39ec>
 80079ae: 01 20                        	movs	r0, #1
;     Ok(HandleUuidPairs::Format128(count, pairs))
 80079b0: 00 21                        	movs	r1, #0
 80079b2: a9 90                        	str	r0, [sp, #676]
 80079b4: 00 20                        	movs	r0, #0
 80079b6: 68 90                        	str	r0, [sp, #416]
 80079b8: 00 20                        	movs	r0, #0
 80079ba: 6e 90                        	str	r0, [sp, #440]
 80079bc: 00 20                        	movs	r0, #0
 80079be: 4f 90                        	str	r0, [sp, #316]
 80079c0: 00 20                        	movs	r0, #0
 80079c2: 83 90                        	str	r0, [sp, #524]
 80079c4: 00 20                        	movs	r0, #0
 80079c6: 69 90                        	str	r0, [sp, #420]
 80079c8: 00 20                        	movs	r0, #0
 80079ca: 51 90                        	str	r0, [sp, #324]
 80079cc: 00 20                        	movs	r0, #0
 80079ce: 50 90                        	str	r0, [sp, #320]
 80079d0: 00 20                        	movs	r0, #0
 80079d2: 84 90                        	str	r0, [sp, #528]
 80079d4: 00 20                        	movs	r0, #0
 80079d6: 6a 90                        	str	r0, [sp, #424]
 80079d8: 00 20                        	movs	r0, #0
 80079da: 54 90                        	str	r0, [sp, #336]
 80079dc: 00 20                        	movs	r0, #0
 80079de: 52 90                        	str	r0, [sp, #328]
 80079e0: 00 20                        	movs	r0, #0
 80079e2: 70 90                        	str	r0, [sp, #448]
 80079e4: 00 20                        	movs	r0, #0
 80079e6: 6b 90                        	str	r0, [sp, #428]
 80079e8: 00 20                        	movs	r0, #0
 80079ea: 55 90                        	str	r0, [sp, #340]
 80079ec: 00 20                        	movs	r0, #0
 80079ee: 53 90                        	str	r0, [sp, #332]
 80079f0: 00 20                        	movs	r0, #0
 80079f2: 85 90                        	str	r0, [sp, #532]
 80079f4: 00 20                        	movs	r0, #0
 80079f6: 6c 90                        	str	r0, [sp, #432]
 80079f8: 00 20                        	movs	r0, #0
 80079fa: 56 90                        	str	r0, [sp, #344]
 80079fc: 00 20                        	movs	r0, #0
 80079fe: 48 90                        	str	r0, [sp, #288]
 8007a00: 00 20                        	movs	r0, #0
 8007a02: 7d 90                        	str	r0, [sp, #500]
 8007a04: 00 20                        	movs	r0, #0
 8007a06: 6d 90                        	str	r0, [sp, #436]
 8007a08: 00 20                        	movs	r0, #0
 8007a0a: 57 90                        	str	r0, [sp, #348]
 8007a0c: 00 20                        	movs	r0, #0
 8007a0e: 34 90                        	str	r0, [sp, #208]
 8007a10: 00 20                        	movs	r0, #0
 8007a12: 75 90                        	str	r0, [sp, #468]
 8007a14: 00 20                        	movs	r0, #0
 8007a16: 71 90                        	str	r0, [sp, #452]
 8007a18: 00 20                        	movs	r0, #0
 8007a1a: 58 90                        	str	r0, [sp, #352]
 8007a1c: 00 20                        	movs	r0, #0
 8007a1e: 6f 90                        	str	r0, [sp, #444]
 8007a20: 00 20                        	movs	r0, #0
 8007a22: a7 91                        	str	r1, [sp, #668]
 8007a24: 00 21                        	movs	r1, #0
 8007a26: 72 90                        	str	r0, [sp, #456]
 8007a28: 00 20                        	movs	r0, #0
 8007a2a: 95 91                        	str	r1, [sp, #596]
 8007a2c: 00 21                        	movs	r1, #0
 8007a2e: 89 90                        	str	r0, [sp, #548]
 8007a30: 00 20                        	movs	r0, #0
 8007a32: a6 91                        	str	r1, [sp, #664]
 8007a34: 00 21                        	movs	r1, #0
 8007a36: 8e 90                        	str	r0, [sp, #568]
 8007a38: 00 20                        	movs	r0, #0
 8007a3a: 9c 91                        	str	r1, [sp, #624]
 8007a3c: 00 21                        	movs	r1, #0
 8007a3e: 86 90                        	str	r0, [sp, #536]
 8007a40: 00 20                        	movs	r0, #0
 8007a42: a3 91                        	str	r1, [sp, #652]
 8007a44: 00 21                        	movs	r1, #0
 8007a46: 73 90                        	str	r0, [sp, #460]
 8007a48: 00 20                        	movs	r0, #0
 8007a4a: 9e 91                        	str	r1, [sp, #632]
 8007a4c: 00 21                        	movs	r1, #0
 8007a4e: 91 90                        	str	r0, [sp, #580]
 8007a50: 00 20                        	movs	r0, #0
 8007a52: 9d 91                        	str	r1, [sp, #628]
 8007a54: 00 21                        	movs	r1, #0
 8007a56: a5 90                        	str	r0, [sp, #660]
 8007a58: 00 20                        	movs	r0, #0
 8007a5a: 1e 91                        	str	r1, [sp, #120]
 8007a5c: 00 21                        	movs	r1, #0
 8007a5e: a4 90                        	str	r0, [sp, #656]
 8007a60: 00 20                        	movs	r0, #0
 8007a62: 9b 91                        	str	r1, [sp, #620]
 8007a64: 00 21                        	movs	r1, #0
 8007a66: a0 90                        	str	r0, [sp, #640]
 8007a68: 00 20                        	movs	r0, #0
 8007a6a: 23 91                        	str	r1, [sp, #140]
 8007a6c: 00 21                        	movs	r1, #0
 8007a6e: a2 90                        	str	r0, [sp, #648]
 8007a70: 00 20                        	movs	r0, #0
 8007a72: 27 91                        	str	r1, [sp, #156]
 8007a74: 00 21                        	movs	r1, #0
 8007a76: a1 90                        	str	r0, [sp, #644]
 8007a78: 00 20                        	movs	r0, #0
 8007a7a: 4f f0 00 0e                  	mov.w	lr, #0
 8007a7e: 4f f0 00 0b                  	mov.w	r11, #0
 8007a82: 4f f0 00 08                  	mov.w	r8, #0
 8007a86: 4f f0 00 0a                  	mov.w	r10, #0
 8007a8a: 00 22                        	movs	r2, #0
 8007a8c: 92 91                        	str	r1, [sp, #584]
 8007a8e: 4f f0 00 0c                  	mov.w	r12, #0
 8007a92: 3f e1                        	b	#638 <$t.24+0x3b92>
 8007a94: 13 21                        	movs	r1, #19
 8007a96: 30 e0                        	b	#96 <$t.24+0x3978>
 8007a98: 18 21                        	movs	r1, #24
 8007a9a: 2e e0                        	b	#92 <$t.24+0x3978>
 8007a9c: 1e 21                        	movs	r1, #30
 8007a9e: 2c e0                        	b	#88 <$t.24+0x3978>
 8007aa0: 1b 21                        	movs	r1, #27
 8007aa2: 2a e0                        	b	#84 <$t.24+0x3978>
 8007aa4: 0d 21                        	movs	r1, #13
 8007aa6: 28 e0                        	b	#80 <$t.24+0x3978>
 8007aa8: 0c 21                        	movs	r1, #12
 8007aaa: 26 e0                        	b	#76 <$t.24+0x3978>
 8007aac: 19 21                        	movs	r1, #25
 8007aae: 24 e0                        	b	#72 <$t.24+0x3978>
 8007ab0: 16 21                        	movs	r1, #22
 8007ab2: 22 e0                        	b	#68 <$t.24+0x3978>
 8007ab4: 07 21                        	movs	r1, #7
 8007ab6: 20 e0                        	b	#64 <$t.24+0x3978>
 8007ab8: 08 21                        	movs	r1, #8
 8007aba: 1e e0                        	b	#60 <$t.24+0x3978>
 8007abc: 04 21                        	movs	r1, #4
 8007abe: 1c e0                        	b	#56 <$t.24+0x3978>
 8007ac0: 05 21                        	movs	r1, #5
 8007ac2: 1a e0                        	b	#52 <$t.24+0x3978>
 8007ac4: 1d 21                        	movs	r1, #29
 8007ac6: 18 e0                        	b	#48 <$t.24+0x3978>
 8007ac8: 0a 21                        	movs	r1, #10
 8007aca: 16 e0                        	b	#44 <$t.24+0x3978>
 8007acc: 09 21                        	movs	r1, #9
 8007ace: 14 e0                        	b	#40 <$t.24+0x3978>
 8007ad0: 0f 21                        	movs	r1, #15
 8007ad2: 12 e0                        	b	#36 <$t.24+0x3978>
 8007ad4: 03 21                        	movs	r1, #3
 8007ad6: 10 e0                        	b	#32 <$t.24+0x3978>
 8007ad8: 10 21                        	movs	r1, #16
 8007ada: 0e e0                        	b	#28 <$t.24+0x3978>
 8007adc: 06 21                        	movs	r1, #6
 8007ade: 0c e0                        	b	#24 <$t.24+0x3978>
 8007ae0: 12 21                        	movs	r1, #18
 8007ae2: 0a e0                        	b	#20 <$t.24+0x3978>
 8007ae4: 0b 21                        	movs	r1, #11
 8007ae6: 08 e0                        	b	#16 <$t.24+0x3978>
 8007ae8: 11 21                        	movs	r1, #17
 8007aea: 06 e0                        	b	#12 <$t.24+0x3978>
 8007aec: 0e 21                        	movs	r1, #14
 8007aee: 04 e0                        	b	#8 <$t.24+0x3978>
 8007af0: 17 21                        	movs	r1, #23
 8007af2: 02 e0                        	b	#4 <$t.24+0x3978>
 8007af4: d2 21                        	movs	r1, #210
 8007af6: 00 e0                        	b	#0 <$t.24+0x3978>
 8007af8: 52 21                        	movs	r1, #82
;         error: buffer[8]
 8007afa: 9d f8 b3 22                  	ldrb.w	r2, [sp, #691]
;             0x01 => Ok(AttError::InvalidHandle),
 8007afe: a2 f1 80 03                  	sub.w	r3, r2, #128
 8007b02: 20 2b                        	cmp	r3, #32
 8007b04: 24 bf                        	itt	hs
 8007b06: 53 1e                        	subhs	r3, r2, #1
 8007b08: 11 2b                        	cmphs	r3, #17
 8007b0a: 14 d2                        	bhs	#40 <$t.24+0x39b4>
;             0x0C11 => Ok(Stm32Wb5xEvent::AttErrorResponse(to_att_error_response(
 8007b0c: dd f8 1c 64                  	ldr.w	r6, [sp, #1052]
 8007b10: dd f8 18 34                  	ldr.w	r3, [sp, #1048]
;     copy_nonoverlapping(src, dst, count)
 8007b14: bd f8 b1 52                  	ldrh.w	r5, [sp, #689]
;             0x0C11 => Ok(Stm32Wb5xEvent::AttErrorResponse(to_att_error_response(
 8007b18: cd e9 fe 36                  	strd	r3, r6, [sp, #1016]
 8007b1c: ad f8 f2 03                  	strh.w	r0, [sp, #1010]
 8007b20: 1c 20                        	movs	r0, #28
 8007b22: 8d f8 f7 23                  	strb.w	r2, [sp, #1015]
 8007b26: 8d f8 f6 13                  	strb.w	r1, [sp, #1014]
 8007b2a: ad f8 f4 53                  	strh.w	r5, [sp, #1012]
 8007b2e: 8d f8 f0 03                  	strb.w	r0, [sp, #1008]
 8007b32: fe f7 51 b9                  	b.w	#-7518 <$t.24+0x1c56>
;             0x01 => Ok(AttError::InvalidHandle),
 8007b36: a2 f1 fc 03                  	sub.w	r3, r2, #252
 8007b3a: 03 2b                        	cmp	r3, #3
 8007b3c: e6 d9                        	bls	#-52 <$t.24+0x398a>
 8007b3e: 18 23                        	movs	r3, #24
 8007b40: 12 26                        	movs	r6, #18
 8007b42: fc f7 8b bc                  	b.w	#-14058 <$t.24+0x2da>
 8007b46: 04 21                        	movs	r1, #4
 8007b48: 02 f0 4f bc                  	b.w	#10398 <$t.24+0x6268>
 8007b4c: 0b 21                        	movs	r1, #11
 8007b4e: 4f f0 00 09                  	mov.w	r9, #0
 8007b52: 00 23                        	movs	r3, #0
 8007b54: 00 20                        	movs	r0, #0
 8007b56: 95 90                        	str	r0, [sp, #596]
 8007b58: 00 20                        	movs	r0, #0
 8007b5a: 99 90                        	str	r0, [sp, #612]
 8007b5c: 00 20                        	movs	r0, #0
 8007b5e: a1 90                        	str	r0, [sp, #644]
;         self
 8007b60: 98 93                        	str	r3, [sp, #608]
 8007b62: 06 f4 7f 44                  	and	r4, r6, #65280
 8007b66: 12 23                        	movs	r3, #18
 8007b68: 4d 46                        	mov	r5, r9
 8007b6a: fe f7 e4 b9                  	b.w	#-7224 <$t.24+0x1db4>
 8007b6e: 74 9a                        	ldr	r2, [sp, #464]
 8007b70: 0d f5 83 63                  	add.w	r3, sp, #1048
 8007b74: 00 26                        	movs	r6, #0
 8007b76: 49 46                        	mov	r1, r9
;                     if is_empty!(self) {
 8007b78: ea 2e                        	cmp	r6, #234
 8007b7a: 23 d0                        	beq	#70 <$t.24+0x3a42>
;         assert!($size <= $src.len());
 8007b7c: 01 29                        	cmp	r1, #1
 8007b7e: 7c f6 a1 ae                  	bls.w	#-12990 <$t.24+0x742>
 8007b82: 06 f1 12 00                  	add.w	r0, r6, #18
;     copy_nonoverlapping(src, dst, count)
 8007b86: 46 44                        	add	r6, r8
;         } else if self.end > slice.len() {
 8007b88: 48 45                        	cmp	r0, r9
;     copy_nonoverlapping(src, dst, count)
 8007b8a: b6 f8 09 50                  	ldrh.w	r5, [r6, #9]
;         pair.handle = AttributeHandle(LittleEndian::read_u16(&buffer[index..]));
 8007b8e: 1d 80                        	strh	r5, [r3]
;         } else if self.end > slice.len() {
 8007b90: 04 f2 d5 84                  	bhi.w	#18858 <$t.42+0x384>
 8007b94: 03 f1 12 0c                  	add.w	r12, r3, #18
;     copy_nonoverlapping(src, dst, count)
 8007b98: d6 f8 0b e0                  	ldr.w	lr, [r6, #11]
 8007b9c: d6 f8 0f 50                  	ldr.w	r5, [r6, #15]
 8007ba0: 01 3a                        	subs	r2, #1
 8007ba2: d6 f8 13 40                  	ldr.w	r4, [r6, #19]
;         if self.n != 0 {
 8007ba6: a1 f1 12 01                  	sub.w	r1, r1, #18
;     copy_nonoverlapping(src, dst, count)
 8007baa: d6 f8 17 60                  	ldr.w	r6, [r6, #23]
 8007bae: c3 f8 0e 60                  	str.w	r6, [r3, #14]
 8007bb2: 06 46                        	mov	r6, r0
 8007bb4: c3 f8 0a 40                  	str.w	r4, [r3, #10]
 8007bb8: c3 f8 06 50                  	str.w	r5, [r3, #6]
 8007bbc: c3 f8 02 e0                  	str.w	lr, [r3, #2]
 8007bc0: 63 46                        	mov	r3, r12
;         if self.n != 0 {
 8007bc2: d9 d1                        	bne	#-78 <$t.24+0x39f6>
;     Ok(HandleUuidPairs::Format128(count, pairs))
 8007bc4: bd f8 18 04                  	ldrh.w	r0, [sp, #1048]
 8007bc8: bd f8 52 24                  	ldrh.w	r2, [sp, #1106]
 8007bcc: dd f8 86 14                  	ldr.w	r1, [sp, #1158]
 8007bd0: 00 04                        	lsls	r0, r0, #16
 8007bd2: 68 91                        	str	r1, [sp, #416]
 8007bd4: 01 30                        	adds	r0, #1
 8007bd6: a9 90                        	str	r0, [sp, #676]
 8007bd8: 10 0a                        	lsrs	r0, r2, #8
 8007bda: 9d f8 85 14                  	ldrb.w	r1, [sp, #1157]
 8007bde: 89 90                        	str	r0, [sp, #548]
 8007be0: 9d f8 7d 04                  	ldrb.w	r0, [sp, #1149]
 8007be4: 51 90                        	str	r0, [sp, #324]
 8007be6: 9d f8 7c 04                  	ldrb.w	r0, [sp, #1148]
 8007bea: 50 90                        	str	r0, [sp, #320]
 8007bec: bd f8 7a 04                  	ldrh.w	r0, [sp, #1146]
 8007bf0: 84 90                        	str	r0, [sp, #528]
 8007bf2: dd f8 76 04                  	ldr.w	r0, [sp, #1142]
 8007bf6: 6a 90                        	str	r0, [sp, #424]
 8007bf8: 9d f8 75 04                  	ldrb.w	r0, [sp, #1141]
 8007bfc: 54 90                        	str	r0, [sp, #336]
 8007bfe: 9d f8 74 04                  	ldrb.w	r0, [sp, #1140]
 8007c02: 52 90                        	str	r0, [sp, #328]
 8007c04: bd f8 72 04                  	ldrh.w	r0, [sp, #1138]
 8007c08: 70 90                        	str	r0, [sp, #448]
 8007c0a: dd f8 6e 04                  	ldr.w	r0, [sp, #1134]
 8007c0e: 6b 90                        	str	r0, [sp, #428]
 8007c10: 9d f8 6d 04                  	ldrb.w	r0, [sp, #1133]
 8007c14: 55 90                        	str	r0, [sp, #340]
 8007c16: 9d f8 6c 04                  	ldrb.w	r0, [sp, #1132]
 8007c1a: 53 90                        	str	r0, [sp, #332]
 8007c1c: bd f8 6a 04                  	ldrh.w	r0, [sp, #1130]
 8007c20: 85 90                        	str	r0, [sp, #532]
 8007c22: dd f8 66 04                  	ldr.w	r0, [sp, #1126]
 8007c26: 6c 90                        	str	r0, [sp, #432]
 8007c28: 9d f8 65 04                  	ldrb.w	r0, [sp, #1125]
 8007c2c: 56 90                        	str	r0, [sp, #344]
 8007c2e: 9d f8 64 04                  	ldrb.w	r0, [sp, #1124]
 8007c32: 48 90                        	str	r0, [sp, #288]
 8007c34: bd f8 62 04                  	ldrh.w	r0, [sp, #1122]
 8007c38: 7d 90                        	str	r0, [sp, #500]
 8007c3a: dd f8 5e 04                  	ldr.w	r0, [sp, #1118]
 8007c3e: 6d 90                        	str	r0, [sp, #436]
 8007c40: 9d f8 5d 04                  	ldrb.w	r0, [sp, #1117]
 8007c44: 57 90                        	str	r0, [sp, #348]
 8007c46: 9d f8 5c 04                  	ldrb.w	r0, [sp, #1116]
 8007c4a: 34 90                        	str	r0, [sp, #208]
 8007c4c: bd f8 5a 04                  	ldrh.w	r0, [sp, #1114]
 8007c50: 6e 91                        	str	r1, [sp, #440]
 8007c52: 9d f8 84 14                  	ldrb.w	r1, [sp, #1156]
 8007c56: 75 90                        	str	r0, [sp, #468]
 8007c58: dd f8 56 04                  	ldr.w	r0, [sp, #1110]
 8007c5c: 4f 91                        	str	r1, [sp, #316]
 8007c5e: bd f8 82 14                  	ldrh.w	r1, [sp, #1154]
 8007c62: 71 90                        	str	r0, [sp, #452]
 8007c64: 9d f8 55 04                  	ldrb.w	r0, [sp, #1109]
 8007c68: 83 91                        	str	r1, [sp, #524]
 8007c6a: dd f8 7e 14                  	ldr.w	r1, [sp, #1150]
 8007c6e: 58 90                        	str	r0, [sp, #352]
 8007c70: 9d f8 54 04                  	ldrb.w	r0, [sp, #1108]
 8007c74: 69 91                        	str	r1, [sp, #420]
 8007c76: 6f 90                        	str	r0, [sp, #444]
 8007c78: dd f8 4e 04                  	ldr.w	r0, [sp, #1102]
 8007c7c: bd f8 34 14                  	ldrh.w	r1, [sp, #1076]
 8007c80: 8e 90                        	str	r0, [sp, #568]
 8007c82: bd f8 4c 04                  	ldrh.w	r0, [sp, #1100]
 8007c86: a7 91                        	str	r1, [sp, #668]
 8007c88: 9d f8 33 14                  	ldrb.w	r1, [sp, #1075]
 8007c8c: 86 90                        	str	r0, [sp, #536]
 8007c8e: 9d f8 4b 04                  	ldrb.w	r0, [sp, #1099]
 8007c92: 95 91                        	str	r1, [sp, #596]
 8007c94: bd f8 2c 14                  	ldrh.w	r1, [sp, #1068]
 8007c98: 73 90                        	str	r0, [sp, #460]
 8007c9a: dd f8 46 04                  	ldr.w	r0, [sp, #1094]
 8007c9e: a6 91                        	str	r1, [sp, #664]
 8007ca0: 9d f8 2b 14                  	ldrb.w	r1, [sp, #1067]
 8007ca4: 91 90                        	str	r0, [sp, #580]
 8007ca6: bd f8 44 04                  	ldrh.w	r0, [sp, #1092]
 8007caa: 9c 91                        	str	r1, [sp, #624]
 8007cac: bd f8 24 14                  	ldrh.w	r1, [sp, #1060]
 8007cb0: a5 90                        	str	r0, [sp, #660]
 8007cb2: 9d f8 43 04                  	ldrb.w	r0, [sp, #1091]
 8007cb6: a3 91                        	str	r1, [sp, #652]
 8007cb8: dd f8 1e 14                  	ldr.w	r1, [sp, #1054]
 8007cbc: a4 90                        	str	r0, [sp, #656]
 8007cbe: dd f8 3e 04                  	ldr.w	r0, [sp, #1086]
 8007cc2: 9e 91                        	str	r1, [sp, #632]
 8007cc4: bd f8 1c 14                  	ldrh.w	r1, [sp, #1052]
 8007cc8: a0 90                        	str	r0, [sp, #640]
 8007cca: bd f8 3c 04                  	ldrh.w	r0, [sp, #1084]
 8007cce: 9d 91                        	str	r1, [sp, #628]
 8007cd0: 9d f8 4a 14                  	ldrb.w	r1, [sp, #1098]
 8007cd4: a2 90                        	str	r0, [sp, #648]
 8007cd6: 9d f8 3b 04                  	ldrb.w	r0, [sp, #1083]
 8007cda: 1e 91                        	str	r1, [sp, #120]
 8007cdc: 9d f8 3a 14                  	ldrb.w	r1, [sp, #1082]
 8007ce0: 72 92                        	str	r2, [sp, #456]
 8007ce2: a1 90                        	str	r0, [sp, #644]
 8007ce4: 9b 91                        	str	r1, [sp, #620]
 8007ce6: 9d f8 32 14                  	ldrb.w	r1, [sp, #1074]
 8007cea: dd f8 36 04                  	ldr.w	r0, [sp, #1078]
 8007cee: dd f8 2e e4                  	ldr.w	lr, [sp, #1070]
 8007cf2: dd f8 26 b4                  	ldr.w	r11, [sp, #1062]
 8007cf6: 9d f8 23 84                  	ldrb.w	r8, [sp, #1059]
 8007cfa: 9d f8 1a c4                  	ldrb.w	r12, [sp, #1050]
 8007cfe: 9d f8 1b a4                  	ldrb.w	r10, [sp, #1051]
 8007d02: 9d f8 42 24                  	ldrb.w	r2, [sp, #1090]
 8007d06: 23 91                        	str	r1, [sp, #140]
 8007d08: 9d f8 2a 14                  	ldrb.w	r1, [sp, #1066]
 8007d0c: 27 91                        	str	r1, [sp, #156]
 8007d0e: 9d f8 22 14                  	ldrb.w	r1, [sp, #1058]
 8007d12: 92 91                        	str	r1, [sp, #584]
 8007d14: dd f8 fe 14                  	ldr.w	r1, [sp, #1278]
 8007d18: 59 91                        	str	r1, [sp, #356]
 8007d1a: 9d f8 fd 14                  	ldrb.w	r1, [sp, #1277]
 8007d1e: 2d 91                        	str	r1, [sp, #180]
 8007d20: 9d f8 fc 14                  	ldrb.w	r1, [sp, #1276]
 8007d24: 2c 91                        	str	r1, [sp, #176]
 8007d26: bd f8 fa 14                  	ldrh.w	r1, [sp, #1274]
 8007d2a: 32 91                        	str	r1, [sp, #200]
 8007d2c: dd f8 f6 14                  	ldr.w	r1, [sp, #1270]
 8007d30: 5a 91                        	str	r1, [sp, #360]
 8007d32: 9d f8 f5 14                  	ldrb.w	r1, [sp, #1269]
 8007d36: 2f 91                        	str	r1, [sp, #188]
 8007d38: 9d f8 f4 14                  	ldrb.w	r1, [sp, #1268]
 8007d3c: 2e 91                        	str	r1, [sp, #184]
 8007d3e: bd f8 f2 14                  	ldrh.w	r1, [sp, #1266]
 8007d42: 36 91                        	str	r1, [sp, #216]
 8007d44: dd f8 ee 14                  	ldr.w	r1, [sp, #1262]
 8007d48: 5b 91                        	str	r1, [sp, #364]
 8007d4a: 9d f8 ed 14                  	ldrb.w	r1, [sp, #1261]
 8007d4e: 31 91                        	str	r1, [sp, #196]
 8007d50: 9d f8 ec 14                  	ldrb.w	r1, [sp, #1260]
 8007d54: 30 91                        	str	r1, [sp, #192]
 8007d56: bd f8 ea 14                  	ldrh.w	r1, [sp, #1258]
 8007d5a: 39 91                        	str	r1, [sp, #228]
 8007d5c: dd f8 e6 14                  	ldr.w	r1, [sp, #1254]
 8007d60: 5c 91                        	str	r1, [sp, #368]
 8007d62: 9d f8 e5 14                  	ldrb.w	r1, [sp, #1253]
 8007d66: 35 91                        	str	r1, [sp, #212]
 8007d68: 9d f8 e4 14                  	ldrb.w	r1, [sp, #1252]
 8007d6c: 33 91                        	str	r1, [sp, #204]
 8007d6e: bd f8 e2 14                  	ldrh.w	r1, [sp, #1250]
 8007d72: 76 91                        	str	r1, [sp, #472]
 8007d74: dd f8 de 14                  	ldr.w	r1, [sp, #1246]
 8007d78: 5d 91                        	str	r1, [sp, #372]
 8007d7a: 9d f8 dd 14                  	ldrb.w	r1, [sp, #1245]
 8007d7e: 38 91                        	str	r1, [sp, #224]
 8007d80: 9d f8 dc 14                  	ldrb.w	r1, [sp, #1244]
 8007d84: 37 91                        	str	r1, [sp, #220]
 8007d86: bd f8 da 14                  	ldrh.w	r1, [sp, #1242]
 8007d8a: 77 91                        	str	r1, [sp, #476]
 8007d8c: dd f8 d6 14                  	ldr.w	r1, [sp, #1238]
 8007d90: 5e 91                        	str	r1, [sp, #376]
 8007d92: 9d f8 d5 14                  	ldrb.w	r1, [sp, #1237]
 8007d96: 3b 91                        	str	r1, [sp, #236]
 8007d98: 9d f8 d4 14                  	ldrb.w	r1, [sp, #1236]
 8007d9c: 3a 91                        	str	r1, [sp, #232]
 8007d9e: bd f8 d2 14                  	ldrh.w	r1, [sp, #1234]
 8007da2: 78 91                        	str	r1, [sp, #480]
 8007da4: dd f8 ce 14                  	ldr.w	r1, [sp, #1230]
 8007da8: 5f 91                        	str	r1, [sp, #380]
 8007daa: 9d f8 cd 14                  	ldrb.w	r1, [sp, #1229]
 8007dae: 3d 91                        	str	r1, [sp, #244]
 8007db0: 9d f8 cc 14                  	ldrb.w	r1, [sp, #1228]
 8007db4: 3c 91                        	str	r1, [sp, #240]
 8007db6: bd f8 ca 14                  	ldrh.w	r1, [sp, #1226]
 8007dba: 79 91                        	str	r1, [sp, #484]
 8007dbc: dd f8 c6 14                  	ldr.w	r1, [sp, #1222]
 8007dc0: 60 91                        	str	r1, [sp, #384]
 8007dc2: 9d f8 c5 14                  	ldrb.w	r1, [sp, #1221]
 8007dc6: 3f 91                        	str	r1, [sp, #252]
 8007dc8: 9d f8 c4 14                  	ldrb.w	r1, [sp, #1220]
 8007dcc: 3e 91                        	str	r1, [sp, #248]
 8007dce: bd f8 c2 14                  	ldrh.w	r1, [sp, #1218]
 8007dd2: 7a 91                        	str	r1, [sp, #488]
 8007dd4: dd f8 be 14                  	ldr.w	r1, [sp, #1214]
 8007dd8: 61 91                        	str	r1, [sp, #388]
 8007dda: 9d f8 bd 14                  	ldrb.w	r1, [sp, #1213]
 8007dde: 41 91                        	str	r1, [sp, #260]
 8007de0: 9d f8 bc 14                  	ldrb.w	r1, [sp, #1212]
 8007de4: 40 91                        	str	r1, [sp, #256]
 8007de6: bd f8 ba 14                  	ldrh.w	r1, [sp, #1210]
 8007dea: 7b 91                        	str	r1, [sp, #492]
 8007dec: dd f8 b6 14                  	ldr.w	r1, [sp, #1206]
 8007df0: 62 91                        	str	r1, [sp, #392]
 8007df2: 9d f8 b5 14                  	ldrb.w	r1, [sp, #1205]
 8007df6: 43 91                        	str	r1, [sp, #268]
 8007df8: 9d f8 b4 14                  	ldrb.w	r1, [sp, #1204]
 8007dfc: 42 91                        	str	r1, [sp, #264]
 8007dfe: bd f8 b2 14                  	ldrh.w	r1, [sp, #1202]
 8007e02: 7c 91                        	str	r1, [sp, #496]
 8007e04: dd f8 ae 14                  	ldr.w	r1, [sp, #1198]
 8007e08: 63 91                        	str	r1, [sp, #396]
 8007e0a: 9d f8 ad 14                  	ldrb.w	r1, [sp, #1197]
 8007e0e: 45 91                        	str	r1, [sp, #276]
 8007e10: 9d f8 ac 14                  	ldrb.w	r1, [sp, #1196]
 8007e14: 44 91                        	str	r1, [sp, #272]
 8007e16: bd f8 aa 14                  	ldrh.w	r1, [sp, #1194]
 8007e1a: 7e 91                        	str	r1, [sp, #504]
 8007e1c: dd f8 a6 14                  	ldr.w	r1, [sp, #1190]
 8007e20: 64 91                        	str	r1, [sp, #400]
 8007e22: 9d f8 a5 14                  	ldrb.w	r1, [sp, #1189]
 8007e26: 47 91                        	str	r1, [sp, #284]
 8007e28: 9d f8 a4 14                  	ldrb.w	r1, [sp, #1188]
 8007e2c: 46 91                        	str	r1, [sp, #280]
 8007e2e: bd f8 a2 14                  	ldrh.w	r1, [sp, #1186]
 8007e32: 7f 91                        	str	r1, [sp, #508]
 8007e34: dd f8 9e 14                  	ldr.w	r1, [sp, #1182]
 8007e38: 65 91                        	str	r1, [sp, #404]
 8007e3a: 9d f8 9d 14                  	ldrb.w	r1, [sp, #1181]
 8007e3e: 4a 91                        	str	r1, [sp, #296]
 8007e40: 9d f8 9c 14                  	ldrb.w	r1, [sp, #1180]
 8007e44: 49 91                        	str	r1, [sp, #292]
 8007e46: bd f8 9a 14                  	ldrh.w	r1, [sp, #1178]
 8007e4a: 80 91                        	str	r1, [sp, #512]
 8007e4c: 9d f8 8c 14                  	ldrb.w	r1, [sp, #1164]
 8007e50: 4d 91                        	str	r1, [sp, #308]
 8007e52: 9d f8 8d 14                  	ldrb.w	r1, [sp, #1165]
 8007e56: 4e 91                        	str	r1, [sp, #312]
 8007e58: dd f8 96 14                  	ldr.w	r1, [sp, #1174]
 8007e5c: 66 91                        	str	r1, [sp, #408]
 8007e5e: 9d f8 95 14                  	ldrb.w	r1, [sp, #1173]
 8007e62: 4c 91                        	str	r1, [sp, #304]
 8007e64: 9d f8 94 14                  	ldrb.w	r1, [sp, #1172]
 8007e68: 4b 91                        	str	r1, [sp, #300]
 8007e6a: bd f8 92 14                  	ldrh.w	r1, [sp, #1170]
 8007e6e: 81 91                        	str	r1, [sp, #516]
 8007e70: dd f8 8e 14                  	ldr.w	r1, [sp, #1166]
 8007e74: 67 91                        	str	r1, [sp, #412]
 8007e76: bd f8 8a 14                  	ldrh.w	r1, [sp, #1162]
 8007e7a: 82 91                        	str	r1, [sp, #520]
 8007e7c: 02 f0 27 bc                  	b.w	#10318 <$t.24+0x654c>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8007e80: a9 98                        	ldr	r0, [sp, #676]
 8007e82: 0d f5 83 66                  	add.w	r6, sp, #1048
;         intrinsics::offset(self, count)
 8007e86: 08 f1 06 01                  	add.w	r1, r8, #6
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8007e8a: c2 1e                        	subs	r2, r0, #3
;                 ReturnParameters::GattSetDescriptorValue(to_status(&bytes[3..])?),
 8007e8c: 30 46                        	mov	r0, r6
 8007e8e: 0f f0 9d fa                  	bl	#62778
;         self
 8007e92: b1 1c                        	adds	r1, r6, #2
 8007e94: 0d f5 a4 60                  	add.w	r0, sp, #1312
 8007e98: 16 22                        	movs	r2, #22
 8007e9a: 9d f8 18 54                  	ldrb.w	r5, [sp, #1048]
 8007e9e: 9d f8 19 44                  	ldrb.w	r4, [sp, #1049]
 8007ea2: 14 f0 3a fa                  	bl	#83060
;                 ReturnParameters::GattSetDescriptorValue(to_status(&bytes[3..])?),
 8007ea6: 01 2d                        	cmp	r5, #1
 8007ea8: 01 f0 22 83                  	beq.w	#5700 <$t.24+0x536e>
;             crate::opcode::GATT_SET_DESCRIPTOR_VALUE => Ok(
 8007eac: a7 f1 48 02                  	sub.w	r2, r7, #72
 8007eb0: 37 f8 3c 3c                  	ldrh	r3, [r7, #-60]
 8007eb4: 30 26                        	movs	r6, #48
 8007eb6: 8d f8 f1 43                  	strb.w	r4, [sp, #1009]
 8007eba: 07 ca                        	ldm	r2, {r0, r1, r2}
 8007ebc: 4f f0 00 0b                  	mov.w	r11, #0
 8007ec0: cd f8 f2 03                  	str.w	r0, [sp, #1010]
 8007ec4: 00 20                        	movs	r0, #0
 8007ec6: 0c 90                        	str	r0, [sp, #48]
 8007ec8: 8d f8 f0 63                  	strb.w	r6, [sp, #1008]
 8007ecc: cd f8 f6 13                  	str.w	r1, [sp, #1014]
 8007ed0: cd f8 fa 23                  	str.w	r2, [sp, #1018]
 8007ed4: ad f8 fe 33                  	strh.w	r3, [sp, #1022]
 8007ed8: 00 20                        	movs	r0, #0
 8007eda: a6 90                        	str	r0, [sp, #664]
 8007edc: 00 20                        	movs	r0, #0
 8007ede: a2 90                        	str	r0, [sp, #648]
 8007ee0: 00 20                        	movs	r0, #0
 8007ee2: a3 90                        	str	r0, [sp, #652]
 8007ee4: 00 20                        	movs	r0, #0
 8007ee6: a1 90                        	str	r0, [sp, #644]
 8007ee8: 00 20                        	movs	r0, #0
 8007eea: a7 90                        	str	r0, [sp, #668]
 8007eec: 00 20                        	movs	r0, #0
 8007eee: 9b 90                        	str	r0, [sp, #620]
 8007ef0: 00 20                        	movs	r0, #0
 8007ef2: 9f 90                        	str	r0, [sp, #636]
 8007ef4: 00 20                        	movs	r0, #0
 8007ef6: 06 90                        	str	r0, [sp, #24]
 8007ef8: 00 20                        	movs	r0, #0
 8007efa: 07 90                        	str	r0, [sp, #28]
 8007efc: 00 20                        	movs	r0, #0
 8007efe: 08 90                        	str	r0, [sp, #32]
 8007f00: 00 20                        	movs	r0, #0
 8007f02: 09 90                        	str	r0, [sp, #36]
 8007f04: 00 20                        	movs	r0, #0
 8007f06: 0a 90                        	str	r0, [sp, #40]
 8007f08: 00 20                        	movs	r0, #0
 8007f0a: 0b 90                        	str	r0, [sp, #44]
 8007f0c: 00 20                        	movs	r0, #0
 8007f0e: a9 90                        	str	r0, [sp, #676]
 8007f10: 00 20                        	movs	r0, #0
 8007f12: 05 90                        	str	r0, [sp, #20]
 8007f14: 00 20                        	movs	r0, #0
 8007f16: 9a 90                        	str	r0, [sp, #616]
 8007f18: 00 20                        	movs	r0, #0
 8007f1a: 28 90                        	str	r0, [sp, #160]
 8007f1c: 00 20                        	movs	r0, #0
 8007f1e: 96 90                        	str	r0, [sp, #600]
 8007f20: 00 20                        	movs	r0, #0
 8007f22: 94 90                        	str	r0, [sp, #592]
 8007f24: 00 20                        	movs	r0, #0
 8007f26: 0d 90                        	str	r0, [sp, #52]
 8007f28: 02 f0 c9 be                  	b.w	#11666 <$t.24+0x6b3c>
 8007f2c: 07 20                        	movs	r0, #7
;             other => Err(hci::event::Error::UnknownOpcode(other)),
 8007f2e: ad f8 f2 33                  	strh.w	r3, [sp, #1010]
 8007f32: 8d f8 f0 03                  	strb.w	r0, [sp, #1008]
 8007f36: 01 20                        	movs	r0, #1
 8007f38: 21 90                        	str	r0, [sp, #132]
 8007f3a: 00 20                        	movs	r0, #0
 8007f3c: a6 90                        	str	r0, [sp, #664]
 8007f3e: 02 f0 25 b8                  	b.w	#8266 <$t.24+0x5e0a>
 8007f42: 4f f6 2c 50                  	movw	r0, #64812
 8007f46: 02 f0 18 b8                  	b.w	#8240 <$t.24+0x5df8>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8007f4a: a9 98                        	ldr	r0, [sp, #676]
 8007f4c: 0d f5 83 66                  	add.w	r6, sp, #1048
;         intrinsics::offset(self, count)
 8007f50: 08 f1 06 01                  	add.w	r1, r8, #6
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8007f54: c2 1e                        	subs	r2, r0, #3
;                 ReturnParameters::GattUpdateCharacteristicValue(to_status(&bytes[3..])?),
 8007f56: 30 46                        	mov	r0, r6
 8007f58: 0f f0 38 fa                  	bl	#62576
;         self
 8007f5c: b1 1c                        	adds	r1, r6, #2
 8007f5e: 0d f5 a4 60                  	add.w	r0, sp, #1312
 8007f62: 16 22                        	movs	r2, #22
 8007f64: 9d f8 18 54                  	ldrb.w	r5, [sp, #1048]
 8007f68: 9d f8 19 44                  	ldrb.w	r4, [sp, #1049]
 8007f6c: 14 f0 d5 f9                  	bl	#82858
;                 ReturnParameters::GattUpdateCharacteristicValue(to_status(&bytes[3..])?),
 8007f70: 01 2d                        	cmp	r5, #1
 8007f72: 00 f0 10 83                  	beq.w	#1568 <$t.24+0x4414>
;             crate::opcode::GATT_UPDATE_CHARACTERISTIC_VALUE => Ok(
 8007f76: a7 f1 48 02                  	sub.w	r2, r7, #72
 8007f7a: 37 f8 3c 3c                  	ldrh	r3, [r7, #-60]
 8007f7e: 25 26                        	movs	r6, #37
 8007f80: 8d f8 f1 43                  	strb.w	r4, [sp, #1009]
 8007f84: 07 ca                        	ldm	r2, {r0, r1, r2}
 8007f86: 4f f0 00 0b                  	mov.w	r11, #0
 8007f8a: cd f8 f2 03                  	str.w	r0, [sp, #1010]
 8007f8e: 00 20                        	movs	r0, #0
 8007f90: 08 90                        	str	r0, [sp, #32]
 8007f92: 8d f8 f0 63                  	strb.w	r6, [sp, #1008]
 8007f96: cd f8 f6 13                  	str.w	r1, [sp, #1014]
 8007f9a: cd f8 fa 23                  	str.w	r2, [sp, #1018]
 8007f9e: ad f8 fe 33                  	strh.w	r3, [sp, #1022]
 8007fa2: 00 20                        	movs	r0, #0
 8007fa4: a6 90                        	str	r0, [sp, #664]
 8007fa6: 00 20                        	movs	r0, #0
 8007fa8: a2 90                        	str	r0, [sp, #648]
 8007faa: 00 20                        	movs	r0, #0
 8007fac: a3 90                        	str	r0, [sp, #652]
 8007fae: 00 20                        	movs	r0, #0
 8007fb0: a1 90                        	str	r0, [sp, #644]
 8007fb2: 00 20                        	movs	r0, #0
 8007fb4: a7 90                        	str	r0, [sp, #668]
 8007fb6: 00 20                        	movs	r0, #0
 8007fb8: 9b 90                        	str	r0, [sp, #620]
 8007fba: 00 20                        	movs	r0, #0
 8007fbc: 9f 90                        	str	r0, [sp, #636]
 8007fbe: 00 20                        	movs	r0, #0
 8007fc0: 06 90                        	str	r0, [sp, #24]
 8007fc2: 00 20                        	movs	r0, #0
 8007fc4: 07 90                        	str	r0, [sp, #28]
 8007fc6: 02 f0 64 be                  	b.w	#11464 <$t.24+0x6b10>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8007fca: a9 98                        	ldr	r0, [sp, #676]
 8007fcc: 0d f5 83 66                  	add.w	r6, sp, #1048
;         intrinsics::offset(self, count)
 8007fd0: 08 f1 06 01                  	add.w	r1, r8, #6
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8007fd4: c2 1e                        	subs	r2, r0, #3
;                 ReturnParameters::GattSetSecurityPermission(to_status(&bytes[3..])?),
 8007fd6: 30 46                        	mov	r0, r6
 8007fd8: 0f f0 f8 f9                  	bl	#62448
;         self
 8007fdc: b1 1c                        	adds	r1, r6, #2
 8007fde: 0d f5 a4 60                  	add.w	r0, sp, #1312
 8007fe2: 16 22                        	movs	r2, #22
 8007fe4: 9d f8 18 54                  	ldrb.w	r5, [sp, #1048]
 8007fe8: 9d f8 19 44                  	ldrb.w	r4, [sp, #1049]
 8007fec: 14 f0 95 f9                  	bl	#82730
;                 ReturnParameters::GattSetSecurityPermission(to_status(&bytes[3..])?),
 8007ff0: 01 2d                        	cmp	r5, #1
 8007ff2: 42 f0 a7 83                  	bne.w	#10062 <$t.24+0x65c2>
 8007ff6: 9d f8 57 34                  	ldrb.w	r3, [sp, #1111]
 8007ffa: 8d 93                        	str	r3, [sp, #564]
 8007ffc: 9d f8 56 34                  	ldrb.w	r3, [sp, #1110]
 8008000: 8c 93                        	str	r3, [sp, #560]
 8008002: 9d f8 55 34                  	ldrb.w	r3, [sp, #1109]
 8008006: 8b 93                        	str	r3, [sp, #556]
 8008008: 9d f8 54 34                  	ldrb.w	r3, [sp, #1108]
 800800c: 8e 93                        	str	r3, [sp, #568]
 800800e: 9d f8 53 34                  	ldrb.w	r3, [sp, #1107]
 8008012: 8a 93                        	str	r3, [sp, #552]
 8008014: 9d f8 48 34                  	ldrb.w	r3, [sp, #1096]
 8008018: 01 93                        	str	r3, [sp, #4]
 800801a: 9d f8 49 34                  	ldrb.w	r3, [sp, #1097]
 800801e: 00 93                        	str	r3, [sp]
 8008020: 9d f8 50 34                  	ldrb.w	r3, [sp, #1104]
 8008024: 1e 93                        	str	r3, [sp, #120]
 8008026: 9d f8 51 34                  	ldrb.w	r3, [sp, #1105]
 800802a: 73 93                        	str	r3, [sp, #460]
 800802c: 9d f8 52 34                  	ldrb.w	r3, [sp, #1106]
 8008030: dd f8 40 a4                  	ldr.w	r10, [sp, #1088]
;         Err(v)
 8008034: 86 93                        	str	r3, [sp, #536]
 8008036: dd f8 2a 35                  	ldr.w	r3, [sp, #1322]
 800803a: dd f8 32 45                  	ldr.w	r4, [sp, #1330]
 800803e: dd f8 44 24                  	ldr.w	r2, [sp, #1092]
 8008042: dd f8 2e 55                  	ldr.w	r5, [sp, #1326]
 8008046: dd f8 26 c5                  	ldr.w	r12, [sp, #1318]
 800804a: cd e9 fe 54                  	strd	r5, r4, [sp, #1016]
 800804e: cd e9 fc c3                  	strd	r12, r3, [sp, #1008]
;                 ReturnParameters::GattSetSecurityPermission(to_status(&bytes[3..])?),
 8008052: 4f ea 1a 43                  	lsr.w	r3, r10, #16
 8008056: dd f8 4c 64                  	ldr.w	r6, [sp, #1100]
 800805a: 43 ea 02 43                  	orr.w	r3, r3, r2, lsl #16
 800805e: 9d 93                        	str	r3, [sp, #628]
 8008060: 4f ea 1a 23                  	lsr.w	r3, r10, #8
 8008064: 43 ea 02 63                  	orr.w	r3, r3, r2, lsl #24
;         Err(v)
 8008068: 9a 93                        	str	r3, [sp, #616]
 800806a: 33 0e                        	lsrs	r3, r6, #24
 800806c: bd f8 4a e4                  	ldrh.w	lr, [sp, #1098]
;                 ReturnParameters::GattSetSecurityPermission(to_status(&bytes[3..])?),
 8008070: a5 93                        	str	r3, [sp, #660]
 8008072: 13 0e                        	lsrs	r3, r2, #24
 8008074: 12 0c                        	lsrs	r2, r2, #16
 8008076: dd f8 38 94                  	ldr.w	r9, [sp, #1080]
 800807a: 99 92                        	str	r2, [sp, #612]
 800807c: 01 22                        	movs	r2, #1
;         Err(v)
 800807e: 21 92                        	str	r2, [sp, #132]
 8008080: 32 0c                        	lsrs	r2, r6, #16
 8008082: 0c 92                        	str	r2, [sp, #48]
 8008084: 32 0a                        	lsrs	r2, r6, #8
 8008086: 18 92                        	str	r2, [sp, #96]
 8008088: 4f ea 1e 22                  	lsr.w	r2, lr, #8
 800808c: 98 92                        	str	r2, [sp, #608]
 800808e: 4f ea 19 62                  	lsr.w	r2, r9, #24
 8008092: 96 92                        	str	r2, [sp, #600]
 8008094: 4f ea 19 42                  	lsr.w	r2, r9, #16
 8008098: 97 92                        	str	r2, [sp, #604]
 800809a: 4f ea 19 22                  	lsr.w	r2, r9, #8
 800809e: a9 92                        	str	r2, [sp, #676]
 80080a0: dd f8 34 14                  	ldr.w	r1, [sp, #1076]
 80080a4: dd f8 30 84                  	ldr.w	r8, [sp, #1072]
 80080a8: dd f8 3c 04                  	ldr.w	r0, [sp, #1084]
;                 ReturnParameters::GattSetSecurityPermission(to_status(&bytes[3..])?),
 80080ac: 9c 93                        	str	r3, [sp, #624]
;         Err(v)
 80080ae: 4f ea 11 6c                  	lsr.w	r12, r1, #24
 80080b2: 0c 0c                        	lsrs	r4, r1, #16
 80080b4: 0b 0a                        	lsrs	r3, r1, #8
 80080b6: a7 91                        	str	r1, [sp, #668]
 80080b8: 4f ea 18 65                  	lsr.w	r5, r8, #24
 80080bc: 96 99                        	ldr	r1, [sp, #600]
 80080be: ab 46                        	mov	r11, r5
 80080c0: 06 91                        	str	r1, [sp, #24]
 80080c2: 97 99                        	ldr	r1, [sp, #604]
 80080c4: cd f8 08 a0                  	str.w	r10, [sp, #8]
 80080c8: 4f ea 10 6a                  	lsr.w	r10, r0, #24
 80080cc: 91 96                        	str	r6, [sp, #580]
 80080ce: 4f ea 18 26                  	lsr.w	r6, r8, #8
 80080d2: cd f8 7c e0                  	str.w	lr, [sp, #124]
 80080d6: 4f ea 18 4e                  	lsr.w	lr, r8, #16
 80080da: cd f8 10 90                  	str.w	r9, [sp, #16]
 80080de: 4f ea 10 49                  	lsr.w	r9, r0, #16
 80080e2: cd f8 0c 80                  	str.w	r8, [sp, #12]
 80080e6: 4f ea 10 28                  	lsr.w	r8, r0, #8
 80080ea: 07 91                        	str	r1, [sp, #28]
 80080ec: a9 99                        	ldr	r1, [sp, #676]
 80080ee: a9 90                        	str	r0, [sp, #676]
 80080f0: 9a 98                        	ldr	r0, [sp, #616]
 80080f2: 05 90                        	str	r0, [sp, #20]
 80080f4: 9d 98                        	ldr	r0, [sp, #628]
 80080f6: 9a 90                        	str	r0, [sp, #616]
 80080f8: 99 98                        	ldr	r0, [sp, #612]
 80080fa: 28 90                        	str	r0, [sp, #160]
 80080fc: 9c 98                        	ldr	r0, [sp, #624]
 80080fe: 96 90                        	str	r0, [sp, #600]
 8008100: 98 98                        	ldr	r0, [sp, #608]
 8008102: 94 90                        	str	r0, [sp, #592]
 8008104: a5 98                        	ldr	r0, [sp, #660]
 8008106: a3 96                        	str	r6, [sp, #652]
 8008108: cd e9 a1 3e                  	strd	r3, lr, [sp, #644]
 800810c: cd f8 6c c2                  	str.w	r12, [sp, #620]
 8008110: 9f 94                        	str	r4, [sp, #636]
 8008112: cd e9 08 1a                  	strd	r1, r10, [sp, #32]
 8008116: cd e9 0a 98                  	strd	r9, r8, [sp, #40]
 800811a: 0d 90                        	str	r0, [sp, #52]
 800811c: 02 f0 ac b8                  	b.w	#8536 <$t.24+0x60f6>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8008120: a9 98                        	ldr	r0, [sp, #676]
 8008122: 03 38                        	subs	r0, #3
;     require_len!(bytes, 3);
 8008124: 03 28                        	cmp	r0, #3
 8008126: 41 f0 94 87                  	bne.w	#7976 <$t.24+0x5ed0>
;         intrinsics::offset(self, count)
 800812a: 08 f1 06 01                  	add.w	r1, r8, #6
 800812e: 0d f5 83 60                  	add.w	r0, sp, #1048
;         status: to_status(&bytes)?,
 8008132: 03 22                        	movs	r2, #3
 8008134: 0f f0 4a f9                  	bl	#62100
;         self
 8008138: 9d f8 18 04                  	ldrb.w	r0, [sp, #1048]
;         status: to_status(&bytes)?,
 800813c: 01 28                        	cmp	r0, #1
 800813e: 01 f0 3f 87                  	beq.w	#7806 <$t.24+0x5e3e>
;                 Ok(ReturnParameters::GattAddCharacteristicDescriptor(
 8008142: 57 e9 10 42                  	ldrd	r4, r2, [r7, #-64]
 8008146: dd f8 0c 14                  	ldr.w	r1, [sp, #1036]
 800814a: cd f8 f5 13                  	str.w	r1, [sp, #1013]
 800814e: 11 0e                        	lsrs	r1, r2, #24
 8008150: 9d f8 19 04                  	ldrb.w	r0, [sp, #1049]
 8008154: 09 91                        	str	r1, [sp, #36]
 8008156: 00 21                        	movs	r1, #0
 8008158: bd f8 0a 54                  	ldrh.w	r5, [sp, #1034]
 800815c: 8d f8 f4 03                  	strb.w	r0, [sp, #1012]
 8008160: 24 20                        	movs	r0, #36
 8008162: 6d 91                        	str	r1, [sp, #436]
 8008164: 11 0c                        	lsrs	r1, r2, #16
 8008166: 8d f8 f0 03                  	strb.w	r0, [sp, #1008]
 800816a: 9d f8 08 04                  	ldrb.w	r0, [sp, #1032]
 800816e: 0a 91                        	str	r1, [sp, #40]
 8008170: 11 0a                        	lsrs	r1, r2, #8
 8008172: a9 92                        	str	r2, [sp, #676]
 8008174: 22 0a                        	lsrs	r2, r4, #8
 8008176: dd f8 10 c4                  	ldr.w	r12, [sp, #1040]
;     copy_nonoverlapping(src, dst, count)
 800817a: bd f8 af 62                  	ldrh.w	r6, [sp, #687]
;                 Ok(ReturnParameters::GattAddCharacteristicDescriptor(
 800817e: 01 90                        	str	r0, [sp, #4]
 8008180: 9d f8 09 04                  	ldrb.w	r0, [sp, #1033]
 8008184: 08 92                        	str	r2, [sp, #32]
 8008186: 00 22                        	movs	r2, #0
 8008188: dd f8 13 34                  	ldr.w	r3, [sp, #1043]
 800818c: 00 90                        	str	r0, [sp]
 800818e: 28 0a                        	lsrs	r0, r5, #8
 8008190: cd f8 f9 c3                  	str.w	r12, [sp, #1017]
 8008194: ff 93                        	str	r3, [sp, #1020]
 8008196: 23 0c                        	lsrs	r3, r4, #16
 8008198: 0b 91                        	str	r1, [sp, #44]
 800819a: 21 0e                        	lsrs	r1, r4, #24
 800819c: a4 92                        	str	r2, [sp, #656]
 800819e: ad f8 f2 63                  	strh.w	r6, [sp, #1010]
 80081a2: 1f 95                        	str	r5, [sp, #124]
 80081a4: 04 94                        	str	r4, [sp, #16]
 80081a6: 03 f0 b4 b9                  	b.w	#13160 <$t.28+0x118>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 80081aa: a9 98                        	ldr	r0, [sp, #676]
 80081ac: 03 38                        	subs	r0, #3
;     require_len!(bytes, 3);
 80081ae: 03 28                        	cmp	r0, #3
 80081b0: 41 f0 4f 87                  	bne.w	#7838 <$t.24+0x5ed0>
;         intrinsics::offset(self, count)
 80081b4: 08 f1 06 01                  	add.w	r1, r8, #6
 80081b8: 0d f5 83 60                  	add.w	r0, sp, #1048
;         status: to_status(&bytes)?,
 80081bc: 03 22                        	movs	r2, #3
 80081be: 0f f0 05 f9                  	bl	#61962
;         self
 80081c2: 9d f8 18 04                  	ldrb.w	r0, [sp, #1048]
;         status: to_status(&bytes)?,
 80081c6: 01 28                        	cmp	r0, #1
 80081c8: 01 f0 fa 86                  	beq.w	#7668 <$t.24+0x5e3e>
 80081cc: 9d f8 19 04                  	ldrb.w	r0, [sp, #1049]
;     copy_nonoverlapping(src, dst, count)
 80081d0: bd f8 af 62                  	ldrh.w	r6, [sp, #687]
;             crate::opcode::GATT_INCLUDE_SERVICE => Ok(ReturnParameters::GattIncludeService(
 80081d4: 8d f8 f4 03                  	strb.w	r0, [sp, #1012]
 80081d8: 22 20                        	movs	r0, #34
 80081da: dd f8 0c 14                  	ldr.w	r1, [sp, #1036]
 80081de: dd f8 10 c4                  	ldr.w	r12, [sp, #1040]
 80081e2: dd f8 13 34                  	ldr.w	r3, [sp, #1043]
 80081e6: bd f8 0a 54                  	ldrh.w	r5, [sp, #1034]
 80081ea: 57 e9 10 42                  	ldrd	r4, r2, [r7, #-64]
 80081ee: 03 f0 6f b9                  	b.w	#13022 <$t.28+0xd6>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 80081f2: a9 98                        	ldr	r0, [sp, #676]
 80081f4: 0d f5 83 66                  	add.w	r6, sp, #1048
;         intrinsics::offset(self, count)
 80081f8: 08 f1 06 01                  	add.w	r1, r8, #6
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 80081fc: c2 1e                        	subs	r2, r0, #3
;                 ReturnParameters::GattWriteWithoutResponse(to_status(&bytes[3..])?),
 80081fe: 30 46                        	mov	r0, r6
 8008200: 0f f0 e4 f8                  	bl	#61896
;         self
 8008204: b1 1c                        	adds	r1, r6, #2
 8008206: 0d f5 a4 60                  	add.w	r0, sp, #1312
 800820a: 16 22                        	movs	r2, #22
 800820c: 9d f8 18 54                  	ldrb.w	r5, [sp, #1048]
 8008210: 9d f8 19 44                  	ldrb.w	r4, [sp, #1049]
 8008214: 14 f0 81 f8                  	bl	#82178
;                 ReturnParameters::GattWriteWithoutResponse(to_status(&bytes[3..])?),
 8008218: 01 2d                        	cmp	r5, #1
 800821a: 42 f0 d0 82                  	bne.w	#9632 <$t.24+0x663c>
 800821e: 9d f8 57 34                  	ldrb.w	r3, [sp, #1111]
 8008222: 8d 93                        	str	r3, [sp, #564]
 8008224: 9d f8 56 34                  	ldrb.w	r3, [sp, #1110]
 8008228: 8c 93                        	str	r3, [sp, #560]
 800822a: 9d f8 55 34                  	ldrb.w	r3, [sp, #1109]
 800822e: 8b 93                        	str	r3, [sp, #556]
 8008230: 9d f8 54 34                  	ldrb.w	r3, [sp, #1108]
 8008234: 8e 93                        	str	r3, [sp, #568]
 8008236: 9d f8 53 34                  	ldrb.w	r3, [sp, #1107]
 800823a: 8a 93                        	str	r3, [sp, #552]
 800823c: 9d f8 48 34                  	ldrb.w	r3, [sp, #1096]
 8008240: 01 93                        	str	r3, [sp, #4]
 8008242: 9d f8 49 34                  	ldrb.w	r3, [sp, #1097]
 8008246: 00 93                        	str	r3, [sp]
 8008248: 9d f8 50 34                  	ldrb.w	r3, [sp, #1104]
 800824c: 1e 93                        	str	r3, [sp, #120]
 800824e: 9d f8 51 34                  	ldrb.w	r3, [sp, #1105]
 8008252: 73 93                        	str	r3, [sp, #460]
 8008254: 9d f8 52 34                  	ldrb.w	r3, [sp, #1106]
 8008258: dd f8 40 a4                  	ldr.w	r10, [sp, #1088]
;         Err(v)
 800825c: 86 93                        	str	r3, [sp, #536]
 800825e: dd f8 2a 35                  	ldr.w	r3, [sp, #1322]
 8008262: dd f8 32 45                  	ldr.w	r4, [sp, #1330]
 8008266: dd f8 44 24                  	ldr.w	r2, [sp, #1092]
 800826a: dd f8 2e 55                  	ldr.w	r5, [sp, #1326]
 800826e: dd f8 26 c5                  	ldr.w	r12, [sp, #1318]
 8008272: cd e9 fe 54                  	strd	r5, r4, [sp, #1016]
 8008276: cd e9 fc c3                  	strd	r12, r3, [sp, #1008]
;                 ReturnParameters::GattWriteWithoutResponse(to_status(&bytes[3..])?),
 800827a: 4f ea 1a 43                  	lsr.w	r3, r10, #16
 800827e: dd f8 4c 64                  	ldr.w	r6, [sp, #1100]
 8008282: 43 ea 02 43                  	orr.w	r3, r3, r2, lsl #16
 8008286: 9a 93                        	str	r3, [sp, #616]
 8008288: 4f ea 1a 23                  	lsr.w	r3, r10, #8
 800828c: 43 ea 02 63                  	orr.w	r3, r3, r2, lsl #24
;         Err(v)
 8008290: a5 93                        	str	r3, [sp, #660]
 8008292: 33 0e                        	lsrs	r3, r6, #24
 8008294: bd f8 4a e4                  	ldrh.w	lr, [sp, #1098]
;                 ReturnParameters::GattWriteWithoutResponse(to_status(&bytes[3..])?),
 8008298: 0d 93                        	str	r3, [sp, #52]
 800829a: 13 0e                        	lsrs	r3, r2, #24
 800829c: 12 0c                        	lsrs	r2, r2, #16
 800829e: dd f8 38 94                  	ldr.w	r9, [sp, #1080]
 80082a2: 28 92                        	str	r2, [sp, #160]
 80082a4: 01 22                        	movs	r2, #1
;         Err(v)
 80082a6: 21 92                        	str	r2, [sp, #132]
 80082a8: 32 0c                        	lsrs	r2, r6, #16
 80082aa: 0c 92                        	str	r2, [sp, #48]
 80082ac: 32 0a                        	lsrs	r2, r6, #8
 80082ae: 18 92                        	str	r2, [sp, #96]
 80082b0: 4f ea 1e 22                  	lsr.w	r2, lr, #8
 80082b4: 9d 92                        	str	r2, [sp, #628]
 80082b6: 4f ea 19 62                  	lsr.w	r2, r9, #24
 80082ba: dd f8 3c 04                  	ldr.w	r0, [sp, #1084]
 80082be: 99 92                        	str	r2, [sp, #612]
 80082c0: 4f ea 19 42                  	lsr.w	r2, r9, #16
 80082c4: 9c 92                        	str	r2, [sp, #624]
 80082c6: 4f ea 19 22                  	lsr.w	r2, r9, #8
 80082ca: a9 92                        	str	r2, [sp, #676]
 80082cc: 02 0a                        	lsrs	r2, r0, #8
 80082ce: 0b 92                        	str	r2, [sp, #44]
 80082d0: dd f8 34 14                  	ldr.w	r1, [sp, #1076]
 80082d4: dd f8 30 84                  	ldr.w	r8, [sp, #1072]
;                 ReturnParameters::GattWriteWithoutResponse(to_status(&bytes[3..])?),
 80082d8: 96 93                        	str	r3, [sp, #600]
;         Err(v)
 80082da: 4f ea 11 6c                  	lsr.w	r12, r1, #24
 80082de: 0c 0c                        	lsrs	r4, r1, #16
 80082e0: 0b 0a                        	lsrs	r3, r1, #8
 80082e2: a7 91                        	str	r1, [sp, #668]
 80082e4: 99 99                        	ldr	r1, [sp, #612]
 80082e6: 4f ea 18 6b                  	lsr.w	r11, r8, #24
 80082ea: 06 91                        	str	r1, [sp, #24]
 80082ec: 9c 99                        	ldr	r1, [sp, #624]
 80082ee: cd f8 08 a0                  	str.w	r10, [sp, #8]
 80082f2: 4f ea 10 6a                  	lsr.w	r10, r0, #24
 80082f6: 91 96                        	str	r6, [sp, #580]
 80082f8: 4f ea 18 26                  	lsr.w	r6, r8, #8
 80082fc: cd f8 7c e0                  	str.w	lr, [sp, #124]
 8008300: 4f ea 18 4e                  	lsr.w	lr, r8, #16
 8008304: cd f8 0c 80                  	str.w	r8, [sp, #12]
 8008308: 4f ea 10 48                  	lsr.w	r8, r0, #16
 800830c: 07 91                        	str	r1, [sp, #28]
 800830e: a9 99                        	ldr	r1, [sp, #676]
 8008310: cd f8 10 90                  	str.w	r9, [sp, #16]
 8008314: a3 96                        	str	r6, [sp, #652]
 8008316: cd e9 a1 3e                  	strd	r3, lr, [sp, #644]
 800831a: cd f8 6c c2                  	str.w	r12, [sp, #620]
 800831e: 9f 94                        	str	r4, [sp, #636]
 8008320: cd e9 08 1a                  	strd	r1, r10, [sp, #32]
 8008324: cd f8 28 80                  	str.w	r8, [sp, #40]
 8008328: 00 f0 73 be                  	b.w	#3302 <$t.24+0x4e90>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 800832c: a9 98                        	ldr	r0, [sp, #676]
 800832e: 0d f5 83 66                  	add.w	r6, sp, #1048
;         intrinsics::offset(self, count)
 8008332: 08 f1 06 01                  	add.w	r1, r8, #6
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8008336: c2 1e                        	subs	r2, r0, #3
;                 ReturnParameters::GapUpdateAdvertisingData(to_status(&bytes[3..])?),
 8008338: 30 46                        	mov	r0, r6
 800833a: 0f f0 47 f8                  	bl	#61582
;         self
 800833e: b1 1c                        	adds	r1, r6, #2
 8008340: 0d f5 a4 60                  	add.w	r0, sp, #1312
 8008344: 16 22                        	movs	r2, #22
 8008346: 9d f8 18 54                  	ldrb.w	r5, [sp, #1048]
 800834a: 9d f8 19 44                  	ldrb.w	r4, [sp, #1049]
 800834e: 13 f0 e4 ff                  	bl	#81864
;                 ReturnParameters::GapUpdateAdvertisingData(to_status(&bytes[3..])?),
 8008352: 01 2d                        	cmp	r5, #1
 8008354: 01 f0 7b 84                  	beq.w	#6390 <$t.24+0x5acc>
;             crate::opcode::GAP_UPDATE_ADVERTISING_DATA => Ok(
 8008358: a7 f1 48 02                  	sub.w	r2, r7, #72
 800835c: 37 f8 3c 3c                  	ldrh	r3, [r7, #-60]
 8008360: 8d f8 f1 43                  	strb.w	r4, [sp, #1009]
 8008364: 15 26                        	movs	r6, #21
 8008366: 02 f0 c2 bc                  	b.w	#10628 <$t.24+0x6b6c>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 800836a: a9 98                        	ldr	r0, [sp, #676]
 800836c: 0d f5 83 66                  	add.w	r6, sp, #1048
;         intrinsics::offset(self, count)
 8008370: 08 f1 06 01                  	add.w	r1, r8, #6
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8008374: c2 1e                        	subs	r2, r0, #3
;                 to_status(&bytes[3..])?,
 8008376: 30 46                        	mov	r0, r6
 8008378: 0f f0 28 f8                  	bl	#61520
;         self
 800837c: b1 1c                        	adds	r1, r6, #2
 800837e: 0d f5 a4 60                  	add.w	r0, sp, #1312
 8008382: 16 22                        	movs	r2, #22
 8008384: 9d f8 18 54                  	ldrb.w	r5, [sp, #1048]
 8008388: 9d f8 19 44                  	ldrb.w	r4, [sp, #1049]
 800838c: 13 f0 c5 ff                  	bl	#81802
;                 to_status(&bytes[3..])?,
 8008390: 01 2d                        	cmp	r5, #1
 8008392: 00 f0 cf 83                  	beq.w	#1950 <$t.24+0x49b2>
;             crate::opcode::GAP_CONFIGURE_WHITE_LIST => Ok(ReturnParameters::GapConfigureWhiteList(
 8008396: a7 f1 48 02                  	sub.w	r2, r7, #72
 800839a: 37 f8 3c 3c                  	ldrh	r3, [r7, #-60]
 800839e: 8d f8 f1 43                  	strb.w	r4, [sp, #1009]
 80083a2: 19 26                        	movs	r6, #25
 80083a4: 02 f0 de bc                  	b.w	#10684 <$t.24+0x6be2>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 80083a8: a9 98                        	ldr	r0, [sp, #676]
 80083aa: c3 1e                        	subs	r3, r0, #3
;     require_len!(bytes, 5);
 80083ac: 05 2b                        	cmp	r3, #5
 80083ae: 42 f0 0e 82                  	bne.w	#9244 <$t.24+0x664c>
;         intrinsics::offset(self, count)
 80083b2: 08 f1 06 01                  	add.w	r1, r8, #6
 80083b6: 0d f5 83 60                  	add.w	r0, sp, #1048
;         status: to_status(&bytes[0..])?,
 80083ba: 05 22                        	movs	r2, #5
 80083bc: 0f f0 06 f8                  	bl	#61452
;         self
 80083c0: 9d f8 18 04                  	ldrb.w	r0, [sp, #1048]
;         status: to_status(&bytes[0..])?,
 80083c4: 01 28                        	cmp	r0, #1
 80083c6: 42 f0 fb 86                  	bne.w	#11766 <$t.24+0x703e>
 80083ca: dd f8 34 04                  	ldr.w	r0, [sp, #1076]
 80083ce: a7 90                        	str	r0, [sp, #668]
 80083d0: dd f8 30 04                  	ldr.w	r0, [sp, #1072]
 80083d4: 03 90                        	str	r0, [sp, #12]
 80083d6: 9d f8 53 04                  	ldrb.w	r0, [sp, #1107]
 80083da: 8a 90                        	str	r0, [sp, #552]
 80083dc: 9d f8 52 04                  	ldrb.w	r0, [sp, #1106]
 80083e0: 86 90                        	str	r0, [sp, #536]
 80083e2: 9d f8 51 04                  	ldrb.w	r0, [sp, #1105]
 80083e6: 73 90                        	str	r0, [sp, #460]
 80083e8: 9d f8 50 04                  	ldrb.w	r0, [sp, #1104]
 80083ec: 1e 90                        	str	r0, [sp, #120]
 80083ee: dd f8 4c 04                  	ldr.w	r0, [sp, #1100]
 80083f2: 91 90                        	str	r0, [sp, #580]
 80083f4: 9d f8 49 04                  	ldrb.w	r0, [sp, #1097]
 80083f8: 00 90                        	str	r0, [sp]
 80083fa: 9d f8 48 04                  	ldrb.w	r0, [sp, #1096]
 80083fe: 01 90                        	str	r0, [sp, #4]
 8008400: 9d f8 41 04                  	ldrb.w	r0, [sp, #1089]
 8008404: 05 90                        	str	r0, [sp, #20]
 8008406: 9d f8 40 04                  	ldrb.w	r0, [sp, #1088]
 800840a: dd f8 20 84                  	ldr.w	r8, [sp, #1056]
 800840e: 02 90                        	str	r0, [sp, #8]
 8008410: dd f8 3c 04                  	ldr.w	r0, [sp, #1084]
 8008414: bd f8 4a c4                  	ldrh.w	r12, [sp, #1098]
;         self
 8008418: 4f ea 18 44                  	lsr.w	r4, r8, #16
 800841c: dd f8 24 34                  	ldr.w	r3, [sp, #1060]
 8008420: a9 90                        	str	r0, [sp, #676]
 8008422: dd f8 38 04                  	ldr.w	r0, [sp, #1080]
 8008426: dd f8 28 14                  	ldr.w	r1, [sp, #1064]
 800842a: 44 ea 03 44                  	orr.w	r4, r4, r3, lsl #16
 800842e: dd f8 54 64                  	ldr.w	r6, [sp, #1108]
 8008432: 04 90                        	str	r0, [sp, #16]
 8008434: 4f f6 ff 70                  	movw	r0, #65535
;         status: to_status(&bytes[0..])?,
 8008438: 21 ea 00 0a                  	bic.w	r10, r1, r0
;         self
 800843c: 4f ea 18 20                  	lsr.w	r0, r8, #8
 8008440: 40 ea 03 6b                  	orr.w	r11, r0, r3, lsl #24
;         status: to_status(&bytes[0..])?,
 8008444: 4f ea 1c 20                  	lsr.w	r0, r12, #8
;         Err(v)
 8008448: 94 90                        	str	r0, [sp, #592]
 800844a: 30 0e                        	lsrs	r0, r6, #24
 800844c: dd f8 44 54                  	ldr.w	r5, [sp, #1092]
;         status: to_status(&bytes[0..])?,
 8008450: 5f fa 81 f9                  	uxtb.w	r9, r1
 8008454: bd f8 42 24                  	ldrh.w	r2, [sp, #1090]
;         Err(v)
 8008458: 09 0a                        	lsrs	r1, r1, #8
 800845a: dd f8 2c e4                  	ldr.w	lr, [sp, #1068]
 800845e: 8d 90                        	str	r0, [sp, #564]
 8008460: 30 0c                        	lsrs	r0, r6, #16
 8008462: 8c 90                        	str	r0, [sp, #560]
 8008464: 30 0a                        	lsrs	r0, r6, #8
 8008466: cd f8 7c c0                  	str.w	r12, [sp, #124]
 800846a: 8e 96                        	str	r6, [sp, #568]
 800846c: 8b 90                        	str	r0, [sp, #556]
 800846e: 03 f0 b2 bb                  	b.w	#14180 <$t.28+0x7dc>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8008472: a9 98                        	ldr	r0, [sp, #676]
 8008474: 0d f5 83 66                  	add.w	r6, sp, #1048
;         intrinsics::offset(self, count)
 8008478: 08 f1 06 01                  	add.w	r1, r8, #6
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 800847c: c2 1e                        	subs	r2, r0, #3
;                 Ok(ReturnParameters::GapIsDeviceBonded(to_status(&bytes[3..])?))
 800847e: 30 46                        	mov	r0, r6
 8008480: 0e f0 a4 ff                  	bl	#61256
;         self
 8008484: b1 1c                        	adds	r1, r6, #2
 8008486: 0d f5 a4 60                  	add.w	r0, sp, #1312
 800848a: 16 22                        	movs	r2, #22
 800848c: 9d f8 18 54                  	ldrb.w	r5, [sp, #1048]
 8008490: 9d f8 19 44                  	ldrb.w	r4, [sp, #1049]
 8008494: 13 f0 41 ff                  	bl	#81538
;                 Ok(ReturnParameters::GapIsDeviceBonded(to_status(&bytes[3..])?))
 8008498: 01 2d                        	cmp	r5, #1
 800849a: 00 f0 26 82                  	beq.w	#1100 <$t.24+0x4768>
 800849e: a7 f1 48 02                  	sub.w	r2, r7, #72
 80084a2: 37 f8 3c 3c                  	ldrh	r3, [r7, #-60]
 80084a6: 1f 26                        	movs	r6, #31
 80084a8: 8d f8 f1 43                  	strb.w	r4, [sp, #1009]
 80084ac: 02 f0 a9 bb                  	b.w	#10066 <$t.24+0x6a80>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 80084b0: a9 98                        	ldr	r0, [sp, #676]
 80084b2: 0d f5 83 66                  	add.w	r6, sp, #1048
;         intrinsics::offset(self, count)
 80084b6: 08 f1 06 01                  	add.w	r1, r8, #6
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 80084ba: c2 1e                        	subs	r2, r0, #3
;                 ReturnParameters::GapSetDirectConnectable(to_status(&bytes[3..])?),
 80084bc: 30 46                        	mov	r0, r6
 80084be: 0e f0 85 ff                  	bl	#61194
;         self
 80084c2: b1 1c                        	adds	r1, r6, #2
 80084c4: 0d f5 a4 60                  	add.w	r0, sp, #1312
 80084c8: 16 22                        	movs	r2, #22
 80084ca: 9d f8 18 54                  	ldrb.w	r5, [sp, #1048]
 80084ce: 9d f8 19 44                  	ldrb.w	r4, [sp, #1049]
 80084d2: 13 f0 22 ff                  	bl	#81476
;                 ReturnParameters::GapSetDirectConnectable(to_status(&bytes[3..])?),
 80084d6: 01 2d                        	cmp	r5, #1
 80084d8: 01 f0 82 82                  	beq.w	#5380 <$t.24+0x585e>
;             crate::opcode::GAP_SET_DIRECT_CONNECTABLE => Ok(
 80084dc: a7 f1 48 02                  	sub.w	r2, r7, #72
 80084e0: 37 f8 3c 3c                  	ldrh	r3, [r7, #-60]
 80084e4: 0c 26                        	movs	r6, #12
 80084e6: 8d f8 f1 43                  	strb.w	r4, [sp, #1009]
 80084ea: 02 f0 b1 bb                  	b.w	#10082 <$t.24+0x6ace>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 80084ee: a9 98                        	ldr	r0, [sp, #676]
 80084f0: 0d f5 83 66                  	add.w	r6, sp, #1048
;         intrinsics::offset(self, count)
 80084f4: 08 f1 06 01                  	add.w	r1, r8, #6
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 80084f8: c2 1e                        	subs	r2, r0, #3
;                 to_status(&bytes[3..])?,
 80084fa: 30 46                        	mov	r0, r6
 80084fc: 0e f0 66 ff                  	bl	#61132
;         self
 8008500: b1 1c                        	adds	r1, r6, #2
 8008502: 0d f5 a4 60                  	add.w	r0, sp, #1312
 8008506: 16 22                        	movs	r2, #22
 8008508: 9d f8 18 54                  	ldrb.w	r5, [sp, #1048]
 800850c: 9d f8 19 44                  	ldrb.w	r4, [sp, #1049]
 8008510: 13 f0 03 ff                  	bl	#81414
;                 to_status(&bytes[3..])?,
 8008514: 01 2d                        	cmp	r5, #1
 8008516: 01 f0 63 82                  	beq.w	#5318 <$t.24+0x585e>
;             crate::opcode::GAP_SET_DISCOVERABLE => Ok(ReturnParameters::GapSetDiscoverable(
 800851a: a7 f1 48 02                  	sub.w	r2, r7, #72
 800851e: 37 f8 3c 3c                  	ldrh	r3, [r7, #-60]
 8008522: 8d f8 f1 43                  	strb.w	r4, [sp, #1009]
 8008526: 0b 26                        	movs	r6, #11
 8008528: 02 f0 33 bb                  	b.w	#9830 <$t.24+0x6a10>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 800852c: a9 98                        	ldr	r0, [sp, #676]
 800852e: 0d f5 83 66                  	add.w	r6, sp, #1048
;         intrinsics::offset(self, count)
 8008532: 08 f1 06 01                  	add.w	r1, r8, #6
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8008536: c2 1e                        	subs	r2, r0, #3
;                 to_status(&bytes[3..])?,
 8008538: 30 46                        	mov	r0, r6
 800853a: 0e f0 47 ff                  	bl	#61070
;         self
 800853e: b1 1c                        	adds	r1, r6, #2
 8008540: 0d f5 a4 60                  	add.w	r0, sp, #1312
 8008544: 16 22                        	movs	r2, #22
 8008546: 9d f8 18 54                  	ldrb.w	r5, [sp, #1048]
 800854a: 9d f8 19 44                  	ldrb.w	r4, [sp, #1049]
 800854e: 13 f0 e4 fe                  	bl	#81352
;                 to_status(&bytes[3..])?,
 8008552: 01 2d                        	cmp	r5, #1
 8008554: 01 f0 8c 84                  	beq.w	#6424 <$t.24+0x5cee>
;             crate::opcode::GAP_TERMINATE_PROCEDURE => Ok(ReturnParameters::GapTerminateProcedure(
 8008558: a7 f1 48 02                  	sub.w	r2, r7, #72
 800855c: 37 f8 3c 3c                  	ldrh	r3, [r7, #-60]
 8008560: 8d f8 f1 43                  	strb.w	r4, [sp, #1009]
 8008564: 1c 26                        	movs	r6, #28
 8008566: 02 f0 79 b9                  	b.w	#8946 <$t.24+0x66da>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 800856a: a9 98                        	ldr	r0, [sp, #676]
 800856c: 0d f5 83 66                  	add.w	r6, sp, #1048
;         intrinsics::offset(self, count)
 8008570: 08 f1 06 01                  	add.w	r1, r8, #6
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8008574: c2 1e                        	subs	r2, r0, #3
;                 ReturnParameters::GattDeleteCharacteristic(to_status(&bytes[3..])?),
 8008576: 30 46                        	mov	r0, r6
 8008578: 0e f0 28 ff                  	bl	#61008
;         self
 800857c: b1 1c                        	adds	r1, r6, #2
 800857e: 0d f5 a4 60                  	add.w	r0, sp, #1312
 8008582: 16 22                        	movs	r2, #22
 8008584: 9d f8 18 54                  	ldrb.w	r5, [sp, #1048]
 8008588: 9d f8 19 44                  	ldrb.w	r4, [sp, #1049]
 800858c: 13 f0 c5 fe                  	bl	#81290
;                 ReturnParameters::GattDeleteCharacteristic(to_status(&bytes[3..])?),
 8008590: 01 2d                        	cmp	r5, #1
 8008592: 42 f0 27 81                  	bne.w	#8782 <$t.24+0x6662>
 8008596: 9d f8 57 24                  	ldrb.w	r2, [sp, #1111]
 800859a: 8d 92                        	str	r2, [sp, #564]
 800859c: 9d f8 56 24                  	ldrb.w	r2, [sp, #1110]
 80085a0: 8c 92                        	str	r2, [sp, #560]
 80085a2: 9d f8 55 24                  	ldrb.w	r2, [sp, #1109]
 80085a6: 8b 92                        	str	r2, [sp, #556]
 80085a8: 9d f8 54 24                  	ldrb.w	r2, [sp, #1108]
 80085ac: 8e 92                        	str	r2, [sp, #568]
 80085ae: 9d f8 53 24                  	ldrb.w	r2, [sp, #1107]
 80085b2: 8a 92                        	str	r2, [sp, #552]
 80085b4: 9d f8 48 24                  	ldrb.w	r2, [sp, #1096]
 80085b8: 01 92                        	str	r2, [sp, #4]
 80085ba: 9d f8 49 24                  	ldrb.w	r2, [sp, #1097]
 80085be: 00 92                        	str	r2, [sp]
 80085c0: 9d f8 50 24                  	ldrb.w	r2, [sp, #1104]
 80085c4: dd f8 40 e4                  	ldr.w	lr, [sp, #1088]
 80085c8: 1e 92                        	str	r2, [sp, #120]
 80085ca: 9d f8 51 24                  	ldrb.w	r2, [sp, #1105]
 80085ce: 73 92                        	str	r2, [sp, #460]
 80085d0: 9d f8 52 24                  	ldrb.w	r2, [sp, #1106]
 80085d4: dd f8 44 14                  	ldr.w	r1, [sp, #1092]
 80085d8: 86 92                        	str	r2, [sp, #536]
 80085da: dd f8 32 55                  	ldr.w	r5, [sp, #1330]
 80085de: dd f8 26 25                  	ldr.w	r2, [sp, #1318]
 80085e2: dd f8 2a 35                  	ldr.w	r3, [sp, #1322]
 80085e6: dd f8 2e 65                  	ldr.w	r6, [sp, #1326]
 80085ea: ff 95                        	str	r5, [sp, #1020]
 80085ec: fe 96                        	str	r6, [sp, #1016]
 80085ee: fd 93                        	str	r3, [sp, #1012]
 80085f0: fc 92                        	str	r2, [sp, #1008]
 80085f2: 4f ea 1e 42                  	lsr.w	r2, lr, #16
 80085f6: dd f8 4c 44                  	ldr.w	r4, [sp, #1100]
 80085fa: 42 ea 01 42                  	orr.w	r2, r2, r1, lsl #16
 80085fe: 9a 92                        	str	r2, [sp, #616]
 8008600: 4f ea 1e 22                  	lsr.w	r2, lr, #8
 8008604: 42 ea 01 62                  	orr.w	r2, r2, r1, lsl #24
 8008608: 05 92                        	str	r2, [sp, #20]
 800860a: 22 0e                        	lsrs	r2, r4, #24
 800860c: dd f8 30 04                  	ldr.w	r0, [sp, #1072]
 8008610: 0d 92                        	str	r2, [sp, #52]
 8008612: 0a 0e                        	lsrs	r2, r1, #24
 8008614: 96 92                        	str	r2, [sp, #600]
 8008616: 09 0c                        	lsrs	r1, r1, #16
 8008618: dd f8 3c c4                  	ldr.w	r12, [sp, #1084]
 800861c: 06 0a                        	lsrs	r6, r0, #8
 800861e: cd f8 08 e0                  	str.w	lr, [sp, #8]
 8008622: 4f ea 10 6b                  	lsr.w	r11, r0, #24
 8008626: 4f ea 10 4e                  	lsr.w	lr, r0, #16
 800862a: 03 90                        	str	r0, [sp, #12]
 800862c: 4f ea 1c 60                  	lsr.w	r0, r12, #24
 8008630: bd f8 4a 84                  	ldrh.w	r8, [sp, #1098]
 8008634: 09 90                        	str	r0, [sp, #36]
 8008636: 4f ea 1c 40                  	lsr.w	r0, r12, #16
 800863a: 0a 90                        	str	r0, [sp, #40]
 800863c: 4f ea 1c 20                  	lsr.w	r0, r12, #8
 8008640: 0b 90                        	str	r0, [sp, #44]
 8008642: 28 91                        	str	r1, [sp, #160]
 8008644: 01 21                        	movs	r1, #1
 8008646: dd f8 38 94                  	ldr.w	r9, [sp, #1080]
 800864a: 21 91                        	str	r1, [sp, #132]
 800864c: 21 0c                        	lsrs	r1, r4, #16
 800864e: 0c 91                        	str	r1, [sp, #48]
 8008650: 21 0a                        	lsrs	r1, r4, #8
 8008652: 00 20                        	movs	r0, #0
 8008654: dd f8 34 a4                  	ldr.w	r10, [sp, #1076]
 8008658: 18 91                        	str	r1, [sp, #96]
 800865a: 4f ea 18 21                  	lsr.w	r1, r8, #8
 800865e: a6 90                        	str	r0, [sp, #664]
 8008660: a5 91                        	str	r1, [sp, #660]
 8008662: 4f ea 19 61                  	lsr.w	r1, r9, #24
 8008666: 9d 91                        	str	r1, [sp, #628]
 8008668: 4f ea 1a 21                  	lsr.w	r1, r10, #8
 800866c: 91 94                        	str	r4, [sp, #580]
 800866e: 4f ea 1a 63                  	lsr.w	r3, r10, #24
 8008672: 9d 98                        	ldr	r0, [sp, #628]
 8008674: 4f ea 1a 44                  	lsr.w	r4, r10, #16
 8008678: cd e9 a1 1e                  	strd	r1, lr, [sp, #644]
 800867c: 06 a9                        	add	r1, sp, #24
 800867e: cd f8 7c 80                  	str.w	r8, [sp, #124]
 8008682: 4f ea 19 48                  	lsr.w	r8, r9, #16
 8008686: cd f8 10 90                  	str.w	r9, [sp, #16]
 800868a: 4f ea 19 29                  	lsr.w	r9, r9, #8
 800868e: cd f8 a4 c2                  	str.w	r12, [sp, #676]
 8008692: a3 96                        	str	r6, [sp, #652]
 8008694: cd f8 9c a2                  	str.w	r10, [sp, #668]
 8008698: 9b 93                        	str	r3, [sp, #620]
 800869a: 9f 94                        	str	r4, [sp, #636]
 800869c: 81 e8 01 03                  	stm.w	r1, {r0, r8, r9}
 80086a0: 01 f0 84 b9                  	b.w	#4872 <$t.24+0x582a>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 80086a4: a9 98                        	ldr	r0, [sp, #676]
 80086a6: 0d f5 83 65                  	add.w	r5, sp, #1048
;         intrinsics::offset(self, count)
 80086aa: 08 f1 06 01                  	add.w	r1, r8, #6
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 80086ae: c2 1e                        	subs	r2, r0, #3
;                 Ok(ReturnParameters::GapDeleteAdType(to_status(&bytes[3..])?))
 80086b0: 28 46                        	mov	r0, r5
 80086b2: 0e f0 8b fe                  	bl	#60694
;         self
 80086b6: a9 1c                        	adds	r1, r5, #2
 80086b8: 0d f5 a4 60                  	add.w	r0, sp, #1312
 80086bc: 16 22                        	movs	r2, #22
 80086be: 9d f8 18 64                  	ldrb.w	r6, [sp, #1048]
 80086c2: 9d f8 19 44                  	ldrb.w	r4, [sp, #1049]
 80086c6: 16 25                        	movs	r5, #22
 80086c8: 13 f0 27 fe                  	bl	#80974
;                 Ok(ReturnParameters::GapDeleteAdType(to_status(&bytes[3..])?))
 80086cc: 01 2e                        	cmp	r6, #1
 80086ce: 42 f0 b4 80                  	bne.w	#8552 <$t.24+0x66b8>
 80086d2: 9d f8 57 24                  	ldrb.w	r2, [sp, #1111]
 80086d6: 8d 92                        	str	r2, [sp, #564]
 80086d8: 9d f8 56 24                  	ldrb.w	r2, [sp, #1110]
 80086dc: 8c 92                        	str	r2, [sp, #560]
 80086de: 9d f8 55 24                  	ldrb.w	r2, [sp, #1109]
 80086e2: 8b 92                        	str	r2, [sp, #556]
 80086e4: 9d f8 54 24                  	ldrb.w	r2, [sp, #1108]
 80086e8: 8e 92                        	str	r2, [sp, #568]
 80086ea: 9d f8 53 24                  	ldrb.w	r2, [sp, #1107]
 80086ee: 8a 92                        	str	r2, [sp, #552]
 80086f0: 9d f8 48 24                  	ldrb.w	r2, [sp, #1096]
 80086f4: 01 92                        	str	r2, [sp, #4]
 80086f6: 9d f8 49 24                  	ldrb.w	r2, [sp, #1097]
 80086fa: 00 92                        	str	r2, [sp]
 80086fc: 9d f8 50 24                  	ldrb.w	r2, [sp, #1104]
 8008700: 1e 92                        	str	r2, [sp, #120]
 8008702: 9d f8 51 24                  	ldrb.w	r2, [sp, #1105]
 8008706: dd f8 40 94                  	ldr.w	r9, [sp, #1088]
 800870a: 73 92                        	str	r2, [sp, #460]
 800870c: 9d f8 52 24                  	ldrb.w	r2, [sp, #1106]
;         Err(v)
 8008710: 86 92                        	str	r2, [sp, #536]
 8008712: dd f8 32 55                  	ldr.w	r5, [sp, #1330]
 8008716: dd f8 44 14                  	ldr.w	r1, [sp, #1092]
 800871a: dd f8 26 25                  	ldr.w	r2, [sp, #1318]
 800871e: ff 95                        	str	r5, [sp, #1020]
 8008720: fc ad                        	add	r5, sp, #1008
 8008722: dd f8 2a 35                  	ldr.w	r3, [sp, #1322]
 8008726: dd f8 2e 65                  	ldr.w	r6, [sp, #1326]
 800872a: 4c c5                        	stm	r5!, {r2, r3, r6}
;                 Ok(ReturnParameters::GapDeleteAdType(to_status(&bytes[3..])?))
 800872c: 4f ea 19 42                  	lsr.w	r2, r9, #16
 8008730: 42 ea 01 42                  	orr.w	r2, r2, r1, lsl #16
 8008734: dd f8 4c 44                  	ldr.w	r4, [sp, #1100]
 8008738: 9a 92                        	str	r2, [sp, #616]
 800873a: 4f ea 19 22                  	lsr.w	r2, r9, #8
 800873e: 42 ea 01 62                  	orr.w	r2, r2, r1, lsl #24
;         Err(v)
 8008742: 05 92                        	str	r2, [sp, #20]
 8008744: 22 0e                        	lsrs	r2, r4, #24
 8008746: bd f8 4a e4                  	ldrh.w	lr, [sp, #1098]
;                 Ok(ReturnParameters::GapDeleteAdType(to_status(&bytes[3..])?))
 800874a: 0d 92                        	str	r2, [sp, #52]
 800874c: 0a 0e                        	lsrs	r2, r1, #24
 800874e: 96 92                        	str	r2, [sp, #600]
 8008750: 09 0c                        	lsrs	r1, r1, #16
 8008752: 28 91                        	str	r1, [sp, #160]
 8008754: 01 21                        	movs	r1, #1
 8008756: dd f8 38 04                  	ldr.w	r0, [sp, #1080]
;         Err(v)
 800875a: 21 91                        	str	r1, [sp, #132]
 800875c: 21 0c                        	lsrs	r1, r4, #16
 800875e: 0c 91                        	str	r1, [sp, #48]
 8008760: 21 0a                        	lsrs	r1, r4, #8
 8008762: dd f8 3c a4                  	ldr.w	r10, [sp, #1084]
 8008766: 18 91                        	str	r1, [sp, #96]
 8008768: 4f ea 1e 21                  	lsr.w	r1, lr, #8
 800876c: 94 91                        	str	r1, [sp, #592]
 800876e: 01 0e                        	lsrs	r1, r0, #24
 8008770: 06 91                        	str	r1, [sp, #24]
 8008772: 01 0c                        	lsrs	r1, r0, #16
 8008774: 04 90                        	str	r0, [sp, #16]
 8008776: 00 0a                        	lsrs	r0, r0, #8
 8008778: dd f8 34 c4                  	ldr.w	r12, [sp, #1076]
 800877c: 08 90                        	str	r0, [sp, #32]
 800877e: 4f ea 1a 60                  	lsr.w	r0, r10, #24
 8008782: 09 90                        	str	r0, [sp, #36]
 8008784: 4f ea 1a 40                  	lsr.w	r0, r10, #16
 8008788: 0a 90                        	str	r0, [sp, #40]
 800878a: 4f ea 1a 20                  	lsr.w	r0, r10, #8
 800878e: 0b 90                        	str	r0, [sp, #44]
 8008790: 4f ea 1c 40                  	lsr.w	r0, r12, #16
 8008794: 9f 90                        	str	r0, [sp, #636]
 8008796: 4f ea 1c 63                  	lsr.w	r3, r12, #24
 800879a: dd f8 30 84                  	ldr.w	r8, [sp, #1072]
 800879e: 91 94                        	str	r4, [sp, #580]
 80087a0: 4f ea 1c 24                  	lsr.w	r4, r12, #8
 80087a4: 07 91                        	str	r1, [sp, #28]
 80087a6: 4f ea 18 41                  	lsr.w	r1, r8, #16
 80087aa: 4f ea 18 26                  	lsr.w	r6, r8, #8
 80087ae: 00 20                        	movs	r0, #0
 80087b0: cd f8 08 90                  	str.w	r9, [sp, #8]
 80087b4: a6 90                        	str	r0, [sp, #664]
 80087b6: 4f ea 18 6b                  	lsr.w	r11, r8, #24
 80087ba: cd f8 7c e0                  	str.w	lr, [sp, #124]
 80087be: cd f8 0c 80                  	str.w	r8, [sp, #12]
 80087c2: cd f8 a4 a2                  	str.w	r10, [sp, #676]
 80087c6: a3 96                        	str	r6, [sp, #652]
 80087c8: cd e9 a1 41                  	strd	r4, r1, [sp, #644]
 80087cc: cd f8 9c c2                  	str.w	r12, [sp, #668]
 80087d0: 9b 93                        	str	r3, [sp, #620]
 80087d2: 01 f0 cf bb                  	b.w	#6046 <$t.24+0x5df2>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 80087d6: a9 98                        	ldr	r0, [sp, #676]
 80087d8: 0d f5 83 66                  	add.w	r6, sp, #1048
;         intrinsics::offset(self, count)
 80087dc: 08 f1 06 01                  	add.w	r1, r8, #6
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 80087e0: c2 1e                        	subs	r2, r0, #3
;                 Ok(ReturnParameters::HalStartTone(to_status(&bytes[3..])?))
 80087e2: 30 46                        	mov	r0, r6
 80087e4: 0e f0 f2 fd                  	bl	#60388
;         self
 80087e8: b1 1c                        	adds	r1, r6, #2
 80087ea: 0d f5 a4 60                  	add.w	r0, sp, #1312
 80087ee: 16 22                        	movs	r2, #22
 80087f0: 9d f8 18 54                  	ldrb.w	r5, [sp, #1048]
 80087f4: 9d f8 19 44                  	ldrb.w	r4, [sp, #1049]
 80087f8: 13 f0 8f fd                  	bl	#80670
;                 Ok(ReturnParameters::HalStartTone(to_status(&bytes[3..])?))
 80087fc: 01 2d                        	cmp	r5, #1
 80087fe: 00 f0 25 87                  	beq.w	#3658 <$t.24+0x54ca>
 8008802: a7 f1 48 02                  	sub.w	r2, r7, #72
 8008806: 37 f8 3c 3c                  	ldrh	r3, [r7, #-60]
 800880a: 8d f8 f1 43                  	strb.w	r4, [sp, #1009]
 800880e: 06 26                        	movs	r6, #6
 8008810: 00 f0 45 be                  	b.w	#3210 <$t.24+0x531c>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8008814: a9 98                        	ldr	r0, [sp, #676]
 8008816: 0d f5 83 66                  	add.w	r6, sp, #1048
;         intrinsics::offset(self, count)
 800881a: 08 f1 06 01                  	add.w	r1, r8, #6
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 800881e: c2 1e                        	subs	r2, r0, #3
;                 Ok(ReturnParameters::HalStopTone(to_status(&bytes[3..])?))
 8008820: 30 46                        	mov	r0, r6
 8008822: 0e f0 d3 fd                  	bl	#60326
;         self
 8008826: b1 1c                        	adds	r1, r6, #2
 8008828: 0d f5 a4 60                  	add.w	r0, sp, #1312
 800882c: 16 22                        	movs	r2, #22
 800882e: 9d f8 18 54                  	ldrb.w	r5, [sp, #1048]
 8008832: 9d f8 19 44                  	ldrb.w	r4, [sp, #1049]
 8008836: 13 f0 70 fd                  	bl	#80608
;                 Ok(ReturnParameters::HalStopTone(to_status(&bytes[3..])?))
 800883a: 01 2d                        	cmp	r5, #1
 800883c: 00 f0 06 87                  	beq.w	#3596 <$t.24+0x54ca>
 8008840: a7 f1 48 02                  	sub.w	r2, r7, #72
 8008844: 37 f8 3c 3c                  	ldrh	r3, [r7, #-60]
 8008848: 07 26                        	movs	r6, #7
 800884a: 8d f8 f1 43                  	strb.w	r4, [sp, #1009]
 800884e: 02 f0 a0 b9                  	b.w	#9024 <$t.24+0x6a10>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8008852: a9 98                        	ldr	r0, [sp, #676]
 8008854: 0d f5 83 66                  	add.w	r6, sp, #1048
;         intrinsics::offset(self, count)
 8008858: 08 f1 06 01                  	add.w	r1, r8, #6
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 800885c: c2 1e                        	subs	r2, r0, #3
;                 to_status(&bytes[3..])?,
 800885e: 30 46                        	mov	r0, r6
 8008860: 0e f0 b4 fd                  	bl	#60264
;         self
 8008864: b1 1c                        	adds	r1, r6, #2
 8008866: 0d f5 a4 60                  	add.w	r0, sp, #1312
 800886a: 16 22                        	movs	r2, #22
 800886c: 9d f8 18 54                  	ldrb.w	r5, [sp, #1048]
 8008870: 9d f8 19 44                  	ldrb.w	r4, [sp, #1049]
 8008874: 13 f0 51 fd                  	bl	#80546
;                 to_status(&bytes[3..])?,
 8008878: 01 2d                        	cmp	r5, #1
 800887a: 01 f0 e8 81                  	beq.w	#5072 <$t.24+0x5acc>
;             crate::opcode::GAP_SET_NONCONNECTABLE => Ok(ReturnParameters::GapSetNonConnectable(
 800887e: a7 f1 48 02                  	sub.w	r2, r7, #72
 8008882: 37 f8 3c 3c                  	ldrh	r3, [r7, #-60]
 8008886: 13 26                        	movs	r6, #19
 8008888: 8d f8 f1 43                  	strb.w	r4, [sp, #1009]
 800888c: 07 ca                        	ldm	r2, {r0, r1, r2}
 800888e: 4f f0 00 0b                  	mov.w	r11, #0
 8008892: cd f8 f2 03                  	str.w	r0, [sp, #1010]
 8008896: 00 20                        	movs	r0, #0
 8008898: a7 90                        	str	r0, [sp, #668]
 800889a: 8d f8 f0 63                  	strb.w	r6, [sp, #1008]
 800889e: cd f8 f6 13                  	str.w	r1, [sp, #1014]
 80088a2: cd f8 fa 23                  	str.w	r2, [sp, #1018]
 80088a6: ad f8 fe 33                  	strh.w	r3, [sp, #1022]
 80088aa: 00 20                        	movs	r0, #0
 80088ac: a6 90                        	str	r0, [sp, #664]
 80088ae: 00 20                        	movs	r0, #0
 80088b0: a2 90                        	str	r0, [sp, #648]
 80088b2: 00 20                        	movs	r0, #0
 80088b4: a3 90                        	str	r0, [sp, #652]
 80088b6: 00 20                        	movs	r0, #0
 80088b8: a1 90                        	str	r0, [sp, #644]
 80088ba: 02 f0 e0 b9                  	b.w	#9152 <$t.24+0x6afc>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 80088be: a9 98                        	ldr	r0, [sp, #676]
 80088c0: 0d f5 83 66                  	add.w	r6, sp, #1048
;         intrinsics::offset(self, count)
 80088c4: 08 f1 06 01                  	add.w	r1, r8, #6
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 80088c8: c2 1e                        	subs	r2, r0, #3
;                     Ok(ReturnParameters::GapResolvePrivateAddress(to_status(
 80088ca: 30 46                        	mov	r0, r6
 80088cc: 0e f0 7e fd                  	bl	#60156
;         self
 80088d0: b1 1c                        	adds	r1, r6, #2
 80088d2: 0d f5 a4 60                  	add.w	r0, sp, #1312
 80088d6: 16 22                        	movs	r2, #22
 80088d8: 9d f8 18 54                  	ldrb.w	r5, [sp, #1048]
 80088dc: 9d f8 19 44                  	ldrb.w	r4, [sp, #1049]
 80088e0: 13 f0 1b fd                  	bl	#80438
;                     )?))
 80088e4: 01 2d                        	cmp	r5, #1
 80088e6: 41 f0 b2 87                  	bne.w	#8036 <$t.24+0x66cc>
 80088ea: 9d f8 57 24                  	ldrb.w	r2, [sp, #1111]
 80088ee: 8d 92                        	str	r2, [sp, #564]
 80088f0: 9d f8 56 24                  	ldrb.w	r2, [sp, #1110]
 80088f4: 8c 92                        	str	r2, [sp, #560]
 80088f6: 9d f8 55 24                  	ldrb.w	r2, [sp, #1109]
 80088fa: 8b 92                        	str	r2, [sp, #556]
 80088fc: 9d f8 54 24                  	ldrb.w	r2, [sp, #1108]
 8008900: 8e 92                        	str	r2, [sp, #568]
 8008902: 9d f8 53 24                  	ldrb.w	r2, [sp, #1107]
 8008906: 8a 92                        	str	r2, [sp, #552]
 8008908: 9d f8 48 24                  	ldrb.w	r2, [sp, #1096]
 800890c: 01 92                        	str	r2, [sp, #4]
 800890e: 9d f8 49 24                  	ldrb.w	r2, [sp, #1097]
 8008912: 00 92                        	str	r2, [sp]
 8008914: 9d f8 50 24                  	ldrb.w	r2, [sp, #1104]
 8008918: dd f8 40 e4                  	ldr.w	lr, [sp, #1088]
 800891c: 1e 92                        	str	r2, [sp, #120]
 800891e: 9d f8 51 24                  	ldrb.w	r2, [sp, #1105]
 8008922: 73 92                        	str	r2, [sp, #460]
 8008924: 9d f8 52 24                  	ldrb.w	r2, [sp, #1106]
 8008928: dd f8 44 14                  	ldr.w	r1, [sp, #1092]
 800892c: 86 92                        	str	r2, [sp, #536]
 800892e: dd f8 32 55                  	ldr.w	r5, [sp, #1330]
 8008932: dd f8 26 25                  	ldr.w	r2, [sp, #1318]
 8008936: dd f8 2a 35                  	ldr.w	r3, [sp, #1322]
 800893a: dd f8 2e 65                  	ldr.w	r6, [sp, #1326]
 800893e: ff 95                        	str	r5, [sp, #1020]
 8008940: fe 96                        	str	r6, [sp, #1016]
 8008942: fd 93                        	str	r3, [sp, #1012]
 8008944: fc 92                        	str	r2, [sp, #1008]
 8008946: 4f ea 1e 42                  	lsr.w	r2, lr, #16
 800894a: dd f8 4c 44                  	ldr.w	r4, [sp, #1100]
 800894e: 42 ea 01 42                  	orr.w	r2, r2, r1, lsl #16
 8008952: 9a 92                        	str	r2, [sp, #616]
 8008954: 4f ea 1e 22                  	lsr.w	r2, lr, #8
 8008958: 42 ea 01 62                  	orr.w	r2, r2, r1, lsl #24
 800895c: 05 92                        	str	r2, [sp, #20]
 800895e: 22 0e                        	lsrs	r2, r4, #24
 8008960: dd f8 38 04                  	ldr.w	r0, [sp, #1080]
 8008964: 0d 92                        	str	r2, [sp, #52]
 8008966: 0a 0e                        	lsrs	r2, r1, #24
 8008968: 96 92                        	str	r2, [sp, #600]
 800896a: 09 0c                        	lsrs	r1, r1, #16
 800896c: 28 91                        	str	r1, [sp, #160]
 800896e: 01 21                        	movs	r1, #1
 8008970: dd f8 3c b4                  	ldr.w	r11, [sp, #1084]
 8008974: 21 91                        	str	r1, [sp, #132]
 8008976: 21 0c                        	lsrs	r1, r4, #16
 8008978: 0c 91                        	str	r1, [sp, #48]
 800897a: 21 0a                        	lsrs	r1, r4, #8
 800897c: cd f8 08 e0                  	str.w	lr, [sp, #8]
 8008980: 4f ea 10 6e                  	lsr.w	lr, r0, #24
 8008984: 18 91                        	str	r1, [sp, #96]
 8008986: 01 0c                        	lsrs	r1, r0, #16
 8008988: 04 90                        	str	r0, [sp, #16]
 800898a: 00 0a                        	lsrs	r0, r0, #8
 800898c: 08 90                        	str	r0, [sp, #32]
 800898e: 4f ea 1b 60                  	lsr.w	r0, r11, #24
 8008992: 09 90                        	str	r0, [sp, #36]
 8008994: 4f ea 1b 40                  	lsr.w	r0, r11, #16
 8008998: 0a 90                        	str	r0, [sp, #40]
 800899a: 4f ea 1b 20                  	lsr.w	r0, r11, #8
 800899e: 0b 90                        	str	r0, [sp, #44]
 80089a0: dd f8 30 a4                  	ldr.w	r10, [sp, #1072]
 80089a4: dd f8 34 94                  	ldr.w	r9, [sp, #1076]
 80089a8: bd f8 4a c4                  	ldrh.w	r12, [sp, #1098]
 80089ac: 91 94                        	str	r4, [sp, #580]
 80089ae: 4f ea 1a 26                  	lsr.w	r6, r10, #8
 80089b2: 00 20                        	movs	r0, #0
 80089b4: cd f8 7c c0                  	str.w	r12, [sp, #124]
 80089b8: a6 90                        	str	r0, [sp, #664]
 80089ba: 4f ea 1c 2c                  	lsr.w	r12, r12, #8
 80089be: 07 91                        	str	r1, [sp, #28]
 80089c0: 4f ea 19 63                  	lsr.w	r3, r9, #24
 80089c4: 4f ea 19 44                  	lsr.w	r4, r9, #16
 80089c8: 4f ea 1a 65                  	lsr.w	r5, r10, #24
 80089cc: 4f ea 1a 48                  	lsr.w	r8, r10, #16
 80089d0: 4f ea 19 21                  	lsr.w	r1, r9, #8
 80089d4: cd f8 a4 b2                  	str.w	r11, [sp, #676]
 80089d8: ab 46                        	mov	r11, r5
 80089da: cd f8 0c a0                  	str.w	r10, [sp, #12]
 80089de: a3 96                        	str	r6, [sp, #652]
 80089e0: cd e9 a1 18                  	strd	r1, r8, [sp, #644]
 80089e4: cd f8 9c 92                  	str.w	r9, [sp, #668]
 80089e8: 9b 93                        	str	r3, [sp, #620]
 80089ea: 9f 94                        	str	r4, [sp, #636]
 80089ec: cd f8 18 e0                  	str.w	lr, [sp, #24]
 80089f0: cd f8 50 c2                  	str.w	r12, [sp, #592]
 80089f4: 01 f0 be ba                  	b.w	#5500 <$t.24+0x5df2>
;                     Err(hci::event::Error::UnknownOpcode(
 80089f8: a3 30                        	adds	r0, #163
 80089fa: 61 e2                        	b	#1218 <$t.24+0x4d3e>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 80089fc: a9 98                        	ldr	r0, [sp, #676]
 80089fe: 0d f5 83 66                  	add.w	r6, sp, #1048
;         intrinsics::offset(self, count)
 8008a02: 08 f1 06 01                  	add.w	r1, r8, #6
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8008a06: c2 1e                        	subs	r2, r0, #3
;                 to_status(&bytes[3..])?,
 8008a08: 30 46                        	mov	r0, r6
 8008a0a: 0e f0 df fc                  	bl	#59838
;         self
 8008a0e: b1 1c                        	adds	r1, r6, #2
 8008a10: 0d f5 a4 60                  	add.w	r0, sp, #1312
 8008a14: 16 22                        	movs	r2, #22
 8008a16: 9d f8 18 54                  	ldrb.w	r5, [sp, #1048]
 8008a1a: 9d f8 19 44                  	ldrb.w	r4, [sp, #1049]
 8008a1e: 13 f0 7c fc                  	bl	#80120
;                 to_status(&bytes[3..])?,
 8008a22: 01 2d                        	cmp	r5, #1
 8008a24: 00 f0 12 86                  	beq.w	#3108 <$t.24+0x54ca>
;             crate::opcode::HAL_WRITE_CONFIG_DATA => Ok(ReturnParameters::HalWriteConfigData(
 8008a28: a7 f1 48 02                  	sub.w	r2, r7, #72
 8008a2c: 37 f8 3c 3c                  	ldrh	r3, [r7, #-60]
 8008a30: 01 26                        	movs	r6, #1
 8008a32: 8d f8 f1 43                  	strb.w	r4, [sp, #1009]
 8008a36: 07 ca                        	ldm	r2, {r0, r1, r2}
 8008a38: 8d f8 f0 63                  	strb.w	r6, [sp, #1008]
 8008a3c: cd f8 f2 03                  	str.w	r0, [sp, #1010]
 8008a40: cd f8 f6 13                  	str.w	r1, [sp, #1014]
 8008a44: cd f8 fa 23                  	str.w	r2, [sp, #1018]
 8008a48: 00 20                        	movs	r0, #0
 8008a4a: ad f8 fe 33                  	strh.w	r3, [sp, #1022]
 8008a4e: a6 90                        	str	r0, [sp, #664]
 8008a50: 4f f0 00 0b                  	mov.w	r11, #0
 8008a54: 00 f0 32 bd                  	b.w	#2660 <$t.24+0x533a>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8008a58: a9 98                        	ldr	r0, [sp, #676]
 8008a5a: c2 1e                        	subs	r2, r0, #3
;     require_len!(bytes, 9);
 8008a5c: 09 2a                        	cmp	r2, #9
 8008a5e: 41 f0 1b 87                  	bne.w	#7734 <$t.24+0x6716>
;         intrinsics::offset(self, count)
 8008a62: 08 f1 06 01                  	add.w	r1, r8, #6
 8008a66: 0d f5 83 60                  	add.w	r0, sp, #1048
;         status: to_status(bytes)?,
 8008a6a: 09 22                        	movs	r2, #9
 8008a6c: 0e f0 ae fc                  	bl	#59740
;         self
 8008a70: 9d f8 18 04                  	ldrb.w	r0, [sp, #1048]
;         status: to_status(bytes)?,
 8008a74: 01 28                        	cmp	r0, #1
 8008a76: 42 f0 b2 83                  	bne.w	#10084 <$t.24+0x705c>
 8008a7a: dd f8 34 04                  	ldr.w	r0, [sp, #1076]
 8008a7e: a9 90                        	str	r0, [sp, #676]
 8008a80: dd f8 30 04                  	ldr.w	r0, [sp, #1072]
 8008a84: 04 90                        	str	r0, [sp, #16]
 8008a86: 9d f8 53 04                  	ldrb.w	r0, [sp, #1107]
 8008a8a: 8a 90                        	str	r0, [sp, #552]
 8008a8c: 9d f8 52 04                  	ldrb.w	r0, [sp, #1106]
 8008a90: 86 90                        	str	r0, [sp, #536]
 8008a92: 9d f8 51 04                  	ldrb.w	r0, [sp, #1105]
 8008a96: 73 90                        	str	r0, [sp, #460]
 8008a98: 9d f8 50 04                  	ldrb.w	r0, [sp, #1104]
 8008a9c: 1e 90                        	str	r0, [sp, #120]
 8008a9e: bd f8 42 04                  	ldrh.w	r0, [sp, #1090]
 8008aa2: 1f 90                        	str	r0, [sp, #124]
 8008aa4: 9d f8 41 04                  	ldrb.w	r0, [sp, #1089]
 8008aa8: 00 90                        	str	r0, [sp]
 8008aaa: 9d f8 40 04                  	ldrb.w	r0, [sp, #1088]
 8008aae: 01 90                        	str	r0, [sp, #4]
 8008ab0: dd f8 38 04                  	ldr.w	r0, [sp, #1080]
 8008ab4: dd f8 20 64                  	ldr.w	r6, [sp, #1056]
 8008ab8: bd f8 4a c4                  	ldrh.w	r12, [sp, #1098]
 8008abc: dd f8 54 54                  	ldr.w	r5, [sp, #1108]
 8008ac0: 02 90                        	str	r0, [sp, #8]
 8008ac2: dd f8 2c 04                  	ldr.w	r0, [sp, #1068]
 8008ac6: dd f8 24 24                  	ldr.w	r2, [sp, #1060]
;         Err(v)
 8008aca: 2c 0e                        	lsrs	r4, r5, #24
 8008acc: dd f8 44 14                  	ldr.w	r1, [sp, #1092]
 8008ad0: a7 90                        	str	r0, [sp, #668]
 8008ad2: dd f8 28 04                  	ldr.w	r0, [sp, #1064]
 8008ad6: 91 91                        	str	r1, [sp, #580]
 8008ad8: 31 0a                        	lsrs	r1, r6, #8
 8008ada: 03 90                        	str	r0, [sp, #12]
;         status: to_status(bytes)?,
 8008adc: 4f ea 1c 20                  	lsr.w	r0, r12, #8
 8008ae0: dd f8 4c 94                  	ldr.w	r9, [sp, #1100]
;         Err(v)
 8008ae4: 41 ea 02 61                  	orr.w	r1, r1, r2, lsl #24
 8008ae8: 9d f8 49 e4                  	ldrb.w	lr, [sp, #1097]
 8008aec: 9d f8 48 84                  	ldrb.w	r8, [sp, #1096]
 8008af0: dd f8 3c 34                  	ldr.w	r3, [sp, #1084]
 8008af4: 94 90                        	str	r0, [sp, #592]
 8008af6: 28 0c                        	lsrs	r0, r5, #16
 8008af8: 8d 94                        	str	r4, [sp, #564]
 8008afa: 01 24                        	movs	r4, #1
 8008afc: 8c 90                        	str	r0, [sp, #560]
 8008afe: 28 0a                        	lsrs	r0, r5, #8
 8008b00: 8e 95                        	str	r5, [sp, #568]
 8008b02: 8b 90                        	str	r0, [sp, #556]
 8008b04: 02 f0 9e bb                  	b.w	#10044 <$t.24+0x70c2>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8008b08: a9 98                        	ldr	r0, [sp, #676]
 8008b0a: 0d f5 83 66                  	add.w	r6, sp, #1048
;         intrinsics::offset(self, count)
 8008b0e: 08 f1 06 01                  	add.w	r1, r8, #6
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8008b12: c2 1e                        	subs	r2, r0, #3
;                 Ok(ReturnParameters::GapSetEventMask(to_status(&bytes[3..])?))
 8008b14: 30 46                        	mov	r0, r6
 8008b16: 0e f0 59 fc                  	bl	#59570
;         self
 8008b1a: b1 1c                        	adds	r1, r6, #2
 8008b1c: 0d f5 a4 60                  	add.w	r0, sp, #1312
 8008b20: 16 22                        	movs	r2, #22
 8008b22: 9d f8 18 54                  	ldrb.w	r5, [sp, #1048]
 8008b26: 9d f8 19 44                  	ldrb.w	r4, [sp, #1049]
 8008b2a: 13 f0 f6 fb                  	bl	#79852
;                 Ok(ReturnParameters::GapSetEventMask(to_status(&bytes[3..])?))
 8008b2e: 01 2d                        	cmp	r5, #1
 8008b30: 41 f0 bb 86                  	bne.w	#7542 <$t.24+0x6728>
 8008b34: 9d f8 57 24                  	ldrb.w	r2, [sp, #1111]
 8008b38: 8d 92                        	str	r2, [sp, #564]
 8008b3a: 9d f8 56 24                  	ldrb.w	r2, [sp, #1110]
 8008b3e: 8c 92                        	str	r2, [sp, #560]
 8008b40: 9d f8 55 24                  	ldrb.w	r2, [sp, #1109]
 8008b44: 8b 92                        	str	r2, [sp, #556]
 8008b46: 9d f8 54 24                  	ldrb.w	r2, [sp, #1108]
 8008b4a: 8e 92                        	str	r2, [sp, #568]
 8008b4c: 9d f8 53 24                  	ldrb.w	r2, [sp, #1107]
 8008b50: 8a 92                        	str	r2, [sp, #552]
 8008b52: 9d f8 48 24                  	ldrb.w	r2, [sp, #1096]
 8008b56: 01 92                        	str	r2, [sp, #4]
 8008b58: 9d f8 49 24                  	ldrb.w	r2, [sp, #1097]
 8008b5c: 00 92                        	str	r2, [sp]
 8008b5e: 9d f8 50 24                  	ldrb.w	r2, [sp, #1104]
 8008b62: dd f8 40 94                  	ldr.w	r9, [sp, #1088]
 8008b66: 1e 92                        	str	r2, [sp, #120]
 8008b68: 9d f8 51 24                  	ldrb.w	r2, [sp, #1105]
 8008b6c: 73 92                        	str	r2, [sp, #460]
 8008b6e: 9d f8 52 24                  	ldrb.w	r2, [sp, #1106]
 8008b72: dd f8 44 14                  	ldr.w	r1, [sp, #1092]
 8008b76: 86 92                        	str	r2, [sp, #536]
 8008b78: dd f8 32 55                  	ldr.w	r5, [sp, #1330]
 8008b7c: dd f8 26 25                  	ldr.w	r2, [sp, #1318]
 8008b80: dd f8 2a 35                  	ldr.w	r3, [sp, #1322]
 8008b84: dd f8 2e 65                  	ldr.w	r6, [sp, #1326]
 8008b88: ff 95                        	str	r5, [sp, #1020]
 8008b8a: fe 96                        	str	r6, [sp, #1016]
 8008b8c: fd 93                        	str	r3, [sp, #1012]
 8008b8e: fc 92                        	str	r2, [sp, #1008]
 8008b90: 4f ea 19 42                  	lsr.w	r2, r9, #16
 8008b94: dd f8 4c 44                  	ldr.w	r4, [sp, #1100]
 8008b98: 42 ea 01 42                  	orr.w	r2, r2, r1, lsl #16
 8008b9c: 9a 92                        	str	r2, [sp, #616]
 8008b9e: 4f ea 19 22                  	lsr.w	r2, r9, #8
 8008ba2: 42 ea 01 62                  	orr.w	r2, r2, r1, lsl #24
 8008ba6: 05 92                        	str	r2, [sp, #20]
 8008ba8: 22 0e                        	lsrs	r2, r4, #24
 8008baa: dd f8 38 04                  	ldr.w	r0, [sp, #1080]
 8008bae: 0d 92                        	str	r2, [sp, #52]
 8008bb0: 0a 0e                        	lsrs	r2, r1, #24
 8008bb2: 96 92                        	str	r2, [sp, #600]
 8008bb4: 09 0c                        	lsrs	r1, r1, #16
 8008bb6: 28 91                        	str	r1, [sp, #160]
 8008bb8: 01 21                        	movs	r1, #1
 8008bba: 21 91                        	str	r1, [sp, #132]
 8008bbc: 21 0c                        	lsrs	r1, r4, #16
 8008bbe: dd f8 3c a4                  	ldr.w	r10, [sp, #1084]
 8008bc2: 0c 91                        	str	r1, [sp, #48]
 8008bc4: 21 0a                        	lsrs	r1, r4, #8
 8008bc6: 18 91                        	str	r1, [sp, #96]
 8008bc8: 01 0e                        	lsrs	r1, r0, #24
 8008bca: 06 91                        	str	r1, [sp, #24]
 8008bcc: 01 0c                        	lsrs	r1, r0, #16
 8008bce: 04 90                        	str	r0, [sp, #16]
 8008bd0: 00 0a                        	lsrs	r0, r0, #8
 8008bd2: dd f8 34 e4                  	ldr.w	lr, [sp, #1076]
 8008bd6: 08 90                        	str	r0, [sp, #32]
 8008bd8: 4f ea 1a 60                  	lsr.w	r0, r10, #24
 8008bdc: 09 90                        	str	r0, [sp, #36]
 8008bde: 4f ea 1a 40                  	lsr.w	r0, r10, #16
 8008be2: 0a 90                        	str	r0, [sp, #40]
 8008be4: 4f ea 1a 20                  	lsr.w	r0, r10, #8
 8008be8: 0b 90                        	str	r0, [sp, #44]
 8008bea: 4f ea 1e 40                  	lsr.w	r0, lr, #16
 8008bee: 9f 90                        	str	r0, [sp, #636]
 8008bf0: bd f8 4a c4                  	ldrh.w	r12, [sp, #1098]
 8008bf4: dd f8 30 84                  	ldr.w	r8, [sp, #1072]
 8008bf8: 91 94                        	str	r4, [sp, #580]
 8008bfa: 4f ea 1e 64                  	lsr.w	r4, lr, #24
 8008bfe: cd f8 7c c0                  	str.w	r12, [sp, #124]
 8008c02: 4f ea 1c 2c                  	lsr.w	r12, r12, #8
 8008c06: 00 20                        	movs	r0, #0
 8008c08: 07 91                        	str	r1, [sp, #28]
 8008c0a: a6 90                        	str	r0, [sp, #664]
 8008c0c: 4f ea 1e 21                  	lsr.w	r1, lr, #8
 8008c10: cd f8 08 90                  	str.w	r9, [sp, #8]
 8008c14: 4f ea 18 6b                  	lsr.w	r11, r8, #24
 8008c18: 4f ea 18 43                  	lsr.w	r3, r8, #16
 8008c1c: cd f8 0c 80                  	str.w	r8, [sp, #12]
 8008c20: a1 a8                        	add	r0, sp, #644
 8008c22: 4f ea 18 26                  	lsr.w	r6, r8, #8
 8008c26: cd f8 a4 a2                  	str.w	r10, [sp, #676]
 8008c2a: 4a c0                        	stm	r0!, {r1, r3, r6}
 8008c2c: cd f8 9c e2                  	str.w	lr, [sp, #668]
 8008c30: 9b 94                        	str	r4, [sp, #620]
 8008c32: 01 f0 9d b9                  	b.w	#4922 <$t.24+0x5dee>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8008c36: a9 98                        	ldr	r0, [sp, #676]
 8008c38: 0d f5 83 66                  	add.w	r6, sp, #1048
;         intrinsics::offset(self, count)
 8008c3c: 08 f1 06 01                  	add.w	r1, r8, #6
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8008c40: c2 1e                        	subs	r2, r0, #3
;                 Ok(ReturnParameters::GattDeleteService(to_status(&bytes[3..])?))
 8008c42: 30 46                        	mov	r0, r6
 8008c44: 0e f0 c2 fb                  	bl	#59268
;         self
 8008c48: b1 1c                        	adds	r1, r6, #2
 8008c4a: 0d f5 a4 60                  	add.w	r0, sp, #1312
 8008c4e: 16 22                        	movs	r2, #22
 8008c50: 9d f8 18 54                  	ldrb.w	r5, [sp, #1048]
 8008c54: 9d f8 19 44                  	ldrb.w	r4, [sp, #1049]
 8008c58: 13 f0 5f fb                  	bl	#79550
;                 Ok(ReturnParameters::GattDeleteService(to_status(&bytes[3..])?))
 8008c5c: 01 2d                        	cmp	r5, #1
 8008c5e: 00 f0 58 87                  	beq.w	#3760 <$t.24+0x5990>
 8008c62: a7 f1 48 02                  	sub.w	r2, r7, #72
 8008c66: 37 f8 3c 3c                  	ldrh	r3, [r7, #-60]
 8008c6a: 8d f8 f1 43                  	strb.w	r4, [sp, #1009]
 8008c6e: 27 26                        	movs	r6, #39
 8008c70: 01 f0 bf bd                  	b.w	#7038 <$t.24+0x6670>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8008c74: a9 98                        	ldr	r0, [sp, #676]
 8008c76: 03 38                        	subs	r0, #3
;     require_len!(bytes, 25);
 8008c78: 19 28                        	cmp	r0, #25
 8008c7a: 41 f0 1e 86                  	bne.w	#7228 <$t.24+0x6738>
;         intrinsics::offset(self, count)
 8008c7e: 08 f1 06 01                  	add.w	r1, r8, #6
 8008c82: 0d f5 83 60                  	add.w	r0, sp, #1048
;         status: to_status(&bytes[0..])?,
 8008c86: 19 22                        	movs	r2, #25
 8008c88: 0e f0 a0 fb                  	bl	#59200
;         self
 8008c8c: dd f8 20 14                  	ldr.w	r1, [sp, #1056]
 8008c90: dd f8 34 24                  	ldr.w	r2, [sp, #1076]
 8008c94: dd f8 24 04                  	ldr.w	r0, [sp, #1060]
 8008c98: a7 92                        	str	r2, [sp, #668]
 8008c9a: dd f8 30 24                  	ldr.w	r2, [sp, #1072]
 8008c9e: 03 92                        	str	r2, [sp, #12]
 8008ca0: 0a 0c                        	lsrs	r2, r1, #16
 8008ca2: 42 ea 00 49                  	orr.w	r9, r2, r0, lsl #16
 8008ca6: 0a 0a                        	lsrs	r2, r1, #8
 8008ca8: 42 ea 00 6c                  	orr.w	r12, r2, r0, lsl #24
 8008cac: 9d f8 41 24                  	ldrb.w	r2, [sp, #1089]
 8008cb0: 05 92                        	str	r2, [sp, #20]
 8008cb2: 9d f8 40 24                  	ldrb.w	r2, [sp, #1088]
 8008cb6: 02 92                        	str	r2, [sp, #8]
 8008cb8: dd f8 3c 24                  	ldr.w	r2, [sp, #1084]
 8008cbc: a9 92                        	str	r2, [sp, #676]
 8008cbe: 9d f8 18 24                  	ldrb.w	r2, [sp, #1048]
 8008cc2: dd f8 44 34                  	ldr.w	r3, [sp, #1092]
 8008cc6: bd f8 42 84                  	ldrh.w	r8, [sp, #1090]
;         status: to_status(&bytes[0..])?,
 8008cca: 01 2a                        	cmp	r2, #1
;         self
 8008ccc: dd f8 2c 54                  	ldr.w	r5, [sp, #1068]
 8008cd0: dd f8 38 64                  	ldr.w	r6, [sp, #1080]
 8008cd4: 04 96                        	str	r6, [sp, #16]
;         status: to_status(&bytes[0..])?,
 8008cd6: 42 f0 47 83                  	bne.w	#9870 <$t.24+0x71e6>
 8008cda: 9d f8 53 24                  	ldrb.w	r2, [sp, #1107]
 8008cde: 8a 92                        	str	r2, [sp, #552]
 8008ce0: 9d f8 52 24                  	ldrb.w	r2, [sp, #1106]
 8008ce4: 86 92                        	str	r2, [sp, #536]
 8008ce6: 9d f8 51 24                  	ldrb.w	r2, [sp, #1105]
 8008cea: 73 92                        	str	r2, [sp, #460]
 8008cec: 9d f8 50 24                  	ldrb.w	r2, [sp, #1104]
 8008cf0: 1e 92                        	str	r2, [sp, #120]
 8008cf2: dd f8 4c 24                  	ldr.w	r2, [sp, #1100]
 8008cf6: bd f8 4a 44                  	ldrh.w	r4, [sp, #1098]
 8008cfa: dd f8 54 64                  	ldr.w	r6, [sp, #1108]
 8008cfe: 91 92                        	str	r2, [sp, #580]
 8008d00: 9d f8 49 24                  	ldrb.w	r2, [sp, #1097]
 8008d04: 00 92                        	str	r2, [sp]
 8008d06: 9d f8 48 24                  	ldrb.w	r2, [sp, #1096]
 8008d0a: 01 92                        	str	r2, [sp, #4]
 8008d0c: dd f8 28 24                  	ldr.w	r2, [sp, #1064]
 8008d10: 1f 94                        	str	r4, [sp, #124]
 8008d12: 24 0a                        	lsrs	r4, r4, #8
;         Err(v)
 8008d14: 94 94                        	str	r4, [sp, #592]
 8008d16: 34 0e                        	lsrs	r4, r6, #24
 8008d18: 8d 94                        	str	r4, [sp, #564]
 8008d1a: 34 0c                        	lsrs	r4, r6, #16
 8008d1c: 8e 96                        	str	r6, [sp, #568]
 8008d1e: 36 0a                        	lsrs	r6, r6, #8
 8008d20: 8c 94                        	str	r4, [sp, #560]
 8008d22: 14 0c                        	lsrs	r4, r2, #16
 8008d24: 4f ea 12 2e                  	lsr.w	lr, r2, #8
;         status: to_status(&bytes[0..])?,
 8008d28: 8b 96                        	str	r6, [sp, #556]
 8008d2a: 03 f0 55 ba                  	b.w	#13482 <$t.42+0x1e>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8008d2e: a9 98                        	ldr	r0, [sp, #676]
 8008d30: 0d f5 83 66                  	add.w	r6, sp, #1048
;         intrinsics::offset(self, count)
 8008d34: 08 f1 06 01                  	add.w	r1, r8, #6
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8008d38: c2 1e                        	subs	r2, r0, #3
;                 ReturnParameters::GapSetAuthenticationRequirement(to_status(&bytes[3..])?),
 8008d3a: 30 46                        	mov	r0, r6
 8008d3c: 0e f0 46 fb                  	bl	#59020
;         self
 8008d40: b1 1c                        	adds	r1, r6, #2
 8008d42: 0d f5 a4 60                  	add.w	r0, sp, #1312
 8008d46: 16 22                        	movs	r2, #22
 8008d48: 9d f8 18 54                  	ldrb.w	r5, [sp, #1048]
 8008d4c: 9d f8 19 44                  	ldrb.w	r4, [sp, #1049]
 8008d50: 13 f0 e3 fa                  	bl	#79302
;                 ReturnParameters::GapSetAuthenticationRequirement(to_status(&bytes[3..])?),
 8008d54: 01 2d                        	cmp	r5, #1
 8008d56: 00 f0 12 85                  	beq.w	#2596 <$t.24+0x55fc>
;             crate::opcode::GAP_SET_AUTHENTICATION_REQUIREMENT => Ok(
 8008d5a: a7 f1 48 02                  	sub.w	r2, r7, #72
 8008d5e: 37 f8 3c 3c                  	ldrh	r3, [r7, #-60]
 8008d62: 8d f8 f1 43                  	strb.w	r4, [sp, #1009]
 8008d66: 0e 26                        	movs	r6, #14
 8008d68: 01 f0 72 bf                  	b.w	#7908 <$t.24+0x6ace>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8008d6c: a9 98                        	ldr	r0, [sp, #676]
 8008d6e: 0d f5 83 66                  	add.w	r6, sp, #1048
;         intrinsics::offset(self, count)
 8008d72: 08 f1 06 01                  	add.w	r1, r8, #6
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8008d76: c2 1e                        	subs	r2, r0, #3
;                 ReturnParameters::GapSetAuthorizationRequirement(to_status(&bytes[3..])?),
 8008d78: 30 46                        	mov	r0, r6
 8008d7a: 0e f0 27 fb                  	bl	#58958
;         self
 8008d7e: b1 1c                        	adds	r1, r6, #2
 8008d80: 0d f5 a4 60                  	add.w	r0, sp, #1312
 8008d84: 16 22                        	movs	r2, #22
 8008d86: 9d f8 18 54                  	ldrb.w	r5, [sp, #1048]
 8008d8a: 9d f8 19 44                  	ldrb.w	r4, [sp, #1049]
 8008d8e: 13 f0 c4 fa                  	bl	#79240
;                 ReturnParameters::GapSetAuthorizationRequirement(to_status(&bytes[3..])?),
 8008d92: 01 2d                        	cmp	r5, #1
 8008d94: 00 f0 f3 84                  	beq.w	#2534 <$t.24+0x55fc>
;             crate::opcode::GAP_SET_AUTHORIZATION_REQUIREMENT => Ok(
 8008d98: a7 f1 48 02                  	sub.w	r2, r7, #72
 8008d9c: 37 f8 3c 3c                  	ldrh	r3, [r7, #-60]
 8008da0: 0f 26                        	movs	r6, #15
 8008da2: 8d f8 f1 43                  	strb.w	r4, [sp, #1009]
 8008da6: 01 f0 0f bf                  	b.w	#7710 <$t.24+0x6a46>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8008daa: a9 98                        	ldr	r0, [sp, #676]
 8008dac: 0d f5 83 66                  	add.w	r6, sp, #1048
;         intrinsics::offset(self, count)
 8008db0: 08 f1 06 01                  	add.w	r1, r8, #6
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8008db4: c2 1e                        	subs	r2, r0, #3
;                 to_status(&bytes[3..])?,
 8008db6: 30 46                        	mov	r0, r6
 8008db8: 0e f0 08 fb                  	bl	#58896
;         self
 8008dbc: b1 1c                        	adds	r1, r6, #2
 8008dbe: 0d f5 a4 60                  	add.w	r0, sp, #1312
 8008dc2: 16 22                        	movs	r2, #22
 8008dc4: 9d f8 18 54                  	ldrb.w	r5, [sp, #1048]
 8008dc8: 9d f8 19 44                  	ldrb.w	r4, [sp, #1049]
 8008dcc: 13 f0 a5 fa                  	bl	#79178
;                 to_status(&bytes[3..])?,
 8008dd0: 01 2d                        	cmp	r5, #1
 8008dd2: 00 f0 3b 84                  	beq.w	#2166 <$t.24+0x54ca>
;             crate::opcode::HAL_SET_TX_POWER_LEVEL => Ok(ReturnParameters::HalSetTxPowerLevel(
 8008dd6: a7 f1 48 02                  	sub.w	r2, r7, #72
 8008dda: 37 f8 3c 3c                  	ldrh	r3, [r7, #-60]
 8008dde: 03 26                        	movs	r6, #3
 8008de0: 8d f8 f1 43                  	strb.w	r4, [sp, #1009]
 8008de4: 5b e3                        	b	#1718 <$t.24+0x531c>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8008de6: a9 98                        	ldr	r0, [sp, #676]
 8008de8: 03 38                        	subs	r0, #3
;     require_len!(bytes, 5);
 8008dea: 05 28                        	cmp	r0, #5
 8008dec: 41 f0 74 85                  	bne.w	#6888 <$t.24+0x6756>
;         intrinsics::offset(self, count)
 8008df0: 08 f1 06 01                  	add.w	r1, r8, #6
 8008df4: 0d f5 83 60                  	add.w	r0, sp, #1048
;         status: to_status(bytes)?,
 8008df8: 05 22                        	movs	r2, #5
 8008dfa: 05 24                        	movs	r4, #5
 8008dfc: 0e f0 e6 fa                  	bl	#58828
;         self
 8008e00: 9d f8 18 04                  	ldrb.w	r0, [sp, #1048]
;         status: to_status(bytes)?,
 8008e04: 01 28                        	cmp	r0, #1
 8008e06: 42 f0 c6 82                  	bne.w	#9612 <$t.26+0xa>
 8008e0a: 9d f8 53 24                  	ldrb.w	r2, [sp, #1107]
 8008e0e: dd f8 34 04                  	ldr.w	r0, [sp, #1076]
 8008e12: 8a 92                        	str	r2, [sp, #552]
 8008e14: 9d f8 52 24                  	ldrb.w	r2, [sp, #1106]
 8008e18: 9d f8 41 54                  	ldrb.w	r5, [sp, #1089]
 8008e1c: a7 90                        	str	r0, [sp, #668]
 8008e1e: dd f8 30 04                  	ldr.w	r0, [sp, #1072]
 8008e22: 86 92                        	str	r2, [sp, #536]
 8008e24: 9d f8 51 24                  	ldrb.w	r2, [sp, #1105]
 8008e28: 05 95                        	str	r5, [sp, #20]
 8008e2a: 9d f8 40 54                  	ldrb.w	r5, [sp, #1088]
 8008e2e: dd f8 20 14                  	ldr.w	r1, [sp, #1056]
 8008e32: 03 90                        	str	r0, [sp, #12]
 8008e34: 73 92                        	str	r2, [sp, #460]
 8008e36: 9d f8 50 24                  	ldrb.w	r2, [sp, #1104]
 8008e3a: 02 95                        	str	r5, [sp, #8]
 8008e3c: dd f8 3c 54                  	ldr.w	r5, [sp, #1084]
 8008e40: dd f8 24 04                  	ldr.w	r0, [sp, #1060]
 8008e44: dd f8 54 44                  	ldr.w	r4, [sp, #1108]
 8008e48: 1e 92                        	str	r2, [sp, #120]
 8008e4a: dd f8 4c 24                  	ldr.w	r2, [sp, #1100]
 8008e4e: 9d f8 49 34                  	ldrb.w	r3, [sp, #1097]
 8008e52: a9 95                        	str	r5, [sp, #676]
 8008e54: dd f8 38 54                  	ldr.w	r5, [sp, #1080]
 8008e58: 91 92                        	str	r2, [sp, #580]
 8008e5a: bd f8 4a 24                  	ldrh.w	r2, [sp, #1098]
 8008e5e: 00 93                        	str	r3, [sp]
 8008e60: 9d f8 48 34                  	ldrb.w	r3, [sp, #1096]
 8008e64: 04 95                        	str	r5, [sp, #16]
 8008e66: 0d 0a                        	lsrs	r5, r1, #8
 8008e68: 01 93                        	str	r3, [sp, #4]
 8008e6a: 45 ea 00 6e                  	orr.w	lr, r5, r0, lsl #24
 8008e6e: 0d 0c                        	lsrs	r5, r1, #16
 8008e70: dd f8 44 34                  	ldr.w	r3, [sp, #1092]
 8008e74: bd f8 42 64                  	ldrh.w	r6, [sp, #1090]
 8008e78: 45 ea 00 48                  	orr.w	r8, r5, r0, lsl #16
 8008e7c: dd f8 2c c4                  	ldr.w	r12, [sp, #1068]
 8008e80: 25 0e                        	lsrs	r5, r4, #24
 8008e82: dd f8 28 94                  	ldr.w	r9, [sp, #1064]
 8008e86: 1f 92                        	str	r2, [sp, #124]
 8008e88: 12 0a                        	lsrs	r2, r2, #8
 8008e8a: 8d 95                        	str	r5, [sp, #564]
 8008e8c: 25 0c                        	lsrs	r5, r4, #16
 8008e8e: 8e 94                        	str	r4, [sp, #568]
 8008e90: 24 0a                        	lsrs	r4, r4, #8
 8008e92: 94 92                        	str	r2, [sp, #592]
 8008e94: 8c 95                        	str	r5, [sp, #560]
 8008e96: 8b 94                        	str	r4, [sp, #556]
 8008e98: 01 f0 26 bd                  	b.w	#6732 <$t.24+0x6766>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8008e9c: a9 98                        	ldr	r0, [sp, #676]
 8008e9e: c2 1e                        	subs	r2, r0, #3
;     require_len_at_least!(bytes, 2);
 8008ea0: 02 2a                        	cmp	r2, #2
 8008ea2: 81 f0 30 85                  	bhs.w	#6752 <$t.24+0x6784>
 8008ea6: 00 20                        	movs	r0, #0
 8008ea8: 4f f0 01 09                  	mov.w	r9, #1
 8008eac: 94 90                        	str	r0, [sp, #592]
 8008eae: 02 21                        	movs	r1, #2
 8008eb0: 00 25                        	movs	r5, #0
 8008eb2: 00 24                        	movs	r4, #0
 8008eb4: 00 23                        	movs	r3, #0
 8008eb6: 00 20                        	movs	r0, #0
 8008eb8: a7 90                        	str	r0, [sp, #668]
 8008eba: 01 f0 7b bd                  	b.w	#6902 <$t.24+0x6832>
;                     Err(hci::event::Error::UnknownOpcode(
 8008ebe: a2 30                        	adds	r0, #162
 8008ec0: ad f8 f2 03                  	strh.w	r0, [sp, #1010]
 8008ec4: 07 20                        	movs	r0, #7
 8008ec6: 8d f8 f0 03                  	strb.w	r0, [sp, #1008]
 8008eca: 01 20                        	movs	r0, #1
 8008ecc: 21 90                        	str	r0, [sp, #132]
 8008ece: 00 20                        	movs	r0, #0
 8008ed0: 05 90                        	str	r0, [sp, #20]
 8008ed2: 00 20                        	movs	r0, #0
 8008ed4: a6 90                        	str	r0, [sp, #664]
 8008ed6: 01 f0 5b b8                  	b.w	#4278 <$t.24+0x5e0e>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8008eda: a9 98                        	ldr	r0, [sp, #676]
 8008edc: 0d f5 83 66                  	add.w	r6, sp, #1048
;         intrinsics::offset(self, count)
 8008ee0: 08 f1 06 01                  	add.w	r1, r8, #6
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8008ee4: c2 1e                        	subs	r2, r0, #3
;                 ReturnParameters::GattSignedWriteWithoutResponse(to_status(&bytes[3..])?),
 8008ee6: 30 46                        	mov	r0, r6
 8008ee8: 0e f0 70 fa                  	bl	#58592
;         self
 8008eec: b1 1c                        	adds	r1, r6, #2
 8008eee: 0d f5 a4 60                  	add.w	r0, sp, #1312
 8008ef2: 16 22                        	movs	r2, #22
 8008ef4: 9d f8 18 54                  	ldrb.w	r5, [sp, #1048]
 8008ef8: 9d f8 19 44                  	ldrb.w	r4, [sp, #1049]
 8008efc: 13 f0 0d fa                  	bl	#78874
;                 ReturnParameters::GattSignedWriteWithoutResponse(to_status(&bytes[3..])?),
 8008f00: 01 2d                        	cmp	r5, #1
 8008f02: 41 f0 6e 85                  	bne.w	#6876 <$t.24+0x6860>
 8008f06: 9d f8 57 34                  	ldrb.w	r3, [sp, #1111]
 8008f0a: 8d 93                        	str	r3, [sp, #564]
 8008f0c: 9d f8 56 34                  	ldrb.w	r3, [sp, #1110]
 8008f10: 8c 93                        	str	r3, [sp, #560]
 8008f12: 9d f8 55 34                  	ldrb.w	r3, [sp, #1109]
 8008f16: 8b 93                        	str	r3, [sp, #556]
 8008f18: 9d f8 54 34                  	ldrb.w	r3, [sp, #1108]
 8008f1c: 8e 93                        	str	r3, [sp, #568]
 8008f1e: 9d f8 53 34                  	ldrb.w	r3, [sp, #1107]
 8008f22: 8a 93                        	str	r3, [sp, #552]
 8008f24: 9d f8 48 34                  	ldrb.w	r3, [sp, #1096]
 8008f28: 01 93                        	str	r3, [sp, #4]
 8008f2a: 9d f8 49 34                  	ldrb.w	r3, [sp, #1097]
 8008f2e: 00 93                        	str	r3, [sp]
 8008f30: 9d f8 50 34                  	ldrb.w	r3, [sp, #1104]
 8008f34: 1e 93                        	str	r3, [sp, #120]
 8008f36: 9d f8 51 34                  	ldrb.w	r3, [sp, #1105]
 8008f3a: 73 93                        	str	r3, [sp, #460]
 8008f3c: 9d f8 52 34                  	ldrb.w	r3, [sp, #1106]
 8008f40: dd f8 40 a4                  	ldr.w	r10, [sp, #1088]
;         Err(v)
 8008f44: 86 93                        	str	r3, [sp, #536]
 8008f46: dd f8 2a 35                  	ldr.w	r3, [sp, #1322]
 8008f4a: dd f8 32 45                  	ldr.w	r4, [sp, #1330]
 8008f4e: dd f8 44 24                  	ldr.w	r2, [sp, #1092]
 8008f52: dd f8 2e 55                  	ldr.w	r5, [sp, #1326]
 8008f56: dd f8 26 c5                  	ldr.w	r12, [sp, #1318]
 8008f5a: cd e9 fe 54                  	strd	r5, r4, [sp, #1016]
 8008f5e: cd e9 fc c3                  	strd	r12, r3, [sp, #1008]
;                 ReturnParameters::GattSignedWriteWithoutResponse(to_status(&bytes[3..])?),
 8008f62: 4f ea 1a 43                  	lsr.w	r3, r10, #16
 8008f66: dd f8 4c 64                  	ldr.w	r6, [sp, #1100]
 8008f6a: 43 ea 02 43                  	orr.w	r3, r3, r2, lsl #16
 8008f6e: 9a 93                        	str	r3, [sp, #616]
 8008f70: 4f ea 1a 23                  	lsr.w	r3, r10, #8
 8008f74: 43 ea 02 63                  	orr.w	r3, r3, r2, lsl #24
;         Err(v)
 8008f78: a5 93                        	str	r3, [sp, #660]
 8008f7a: 33 0e                        	lsrs	r3, r6, #24
 8008f7c: bd f8 4a e4                  	ldrh.w	lr, [sp, #1098]
;                 ReturnParameters::GattSignedWriteWithoutResponse(to_status(&bytes[3..])?),
 8008f80: 0d 93                        	str	r3, [sp, #52]
 8008f82: 13 0e                        	lsrs	r3, r2, #24
 8008f84: 12 0c                        	lsrs	r2, r2, #16
 8008f86: dd f8 38 94                  	ldr.w	r9, [sp, #1080]
 8008f8a: 28 92                        	str	r2, [sp, #160]
 8008f8c: 01 22                        	movs	r2, #1
;         Err(v)
 8008f8e: 21 92                        	str	r2, [sp, #132]
 8008f90: 32 0c                        	lsrs	r2, r6, #16
 8008f92: 0c 92                        	str	r2, [sp, #48]
 8008f94: 32 0a                        	lsrs	r2, r6, #8
 8008f96: 18 92                        	str	r2, [sp, #96]
 8008f98: 4f ea 1e 22                  	lsr.w	r2, lr, #8
 8008f9c: 9d 92                        	str	r2, [sp, #628]
 8008f9e: 4f ea 19 62                  	lsr.w	r2, r9, #24
 8008fa2: dd f8 3c 04                  	ldr.w	r0, [sp, #1084]
 8008fa6: 99 92                        	str	r2, [sp, #612]
 8008fa8: 4f ea 19 42                  	lsr.w	r2, r9, #16
 8008fac: 9c 92                        	str	r2, [sp, #624]
 8008fae: 4f ea 19 22                  	lsr.w	r2, r9, #8
 8008fb2: a9 92                        	str	r2, [sp, #676]
 8008fb4: 02 0c                        	lsrs	r2, r0, #16
 8008fb6: 98 92                        	str	r2, [sp, #608]
 8008fb8: dd f8 34 14                  	ldr.w	r1, [sp, #1076]
 8008fbc: dd f8 30 84                  	ldr.w	r8, [sp, #1072]
;                 ReturnParameters::GattSignedWriteWithoutResponse(to_status(&bytes[3..])?),
 8008fc0: 96 93                        	str	r3, [sp, #600]
;         Err(v)
 8008fc2: 4f ea 11 6c                  	lsr.w	r12, r1, #24
 8008fc6: 0c 0c                        	lsrs	r4, r1, #16
 8008fc8: 0b 0a                        	lsrs	r3, r1, #8
 8008fca: a7 91                        	str	r1, [sp, #668]
 8008fcc: 99 99                        	ldr	r1, [sp, #612]
 8008fce: 4f ea 18 6b                  	lsr.w	r11, r8, #24
 8008fd2: 06 91                        	str	r1, [sp, #24]
 8008fd4: 9c 99                        	ldr	r1, [sp, #624]
 8008fd6: 91 96                        	str	r6, [sp, #580]
 8008fd8: 4f ea 18 26                  	lsr.w	r6, r8, #8
 8008fdc: cd f8 7c e0                  	str.w	lr, [sp, #124]
 8008fe0: 4f ea 18 4e                  	lsr.w	lr, r8, #16
 8008fe4: cd f8 0c 80                  	str.w	r8, [sp, #12]
 8008fe8: 4f ea 10 68                  	lsr.w	r8, r0, #24
 8008fec: 07 91                        	str	r1, [sp, #28]
 8008fee: a9 99                        	ldr	r1, [sp, #676]
 8008ff0: cd f8 10 90                  	str.w	r9, [sp, #16]
 8008ff4: 4f ea 10 29                  	lsr.w	r9, r0, #8
 8008ff8: cd e9 08 18                  	strd	r1, r8, [sp, #32]
 8008ffc: 98 99                        	ldr	r1, [sp, #608]
 8008ffe: cd f8 08 a0                  	str.w	r10, [sp, #8]
 8009002: a3 96                        	str	r6, [sp, #652]
 8009004: cd e9 a1 3e                  	strd	r3, lr, [sp, #644]
 8009008: cd f8 6c c2                  	str.w	r12, [sp, #620]
 800900c: 9f 94                        	str	r4, [sp, #636]
 800900e: cd e9 0a 19                  	strd	r1, r9, [sp, #40]
 8009012: 00 22                        	movs	r2, #0
 8009014: a6 92                        	str	r2, [sp, #664]
 8009016: a9 90                        	str	r0, [sp, #676]
 8009018: 01 f0 d1 b9                  	b.w	#5026 <$t.24+0x623c>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 800901c: a9 98                        	ldr	r0, [sp, #676]
 800901e: 03 38                        	subs	r0, #3
;     require_len!(bytes, 3);
 8009020: 03 28                        	cmp	r0, #3
 8009022: 41 f0 16 80                  	bne.w	#4140 <$t.24+0x5ed0>
;         intrinsics::offset(self, count)
 8009026: 08 f1 06 01                  	add.w	r1, r8, #6
 800902a: 0d f5 83 60                  	add.w	r0, sp, #1048
;         status: to_status(&bytes)?,
 800902e: 03 22                        	movs	r2, #3
 8009030: 0e f0 cc f9                  	bl	#58264
;         self
 8009034: 9d f8 18 04                  	ldrb.w	r0, [sp, #1048]
;         status: to_status(&bytes)?,
 8009038: 01 28                        	cmp	r0, #1
 800903a: 00 f0 c1 87                  	beq.w	#3970 <$t.24+0x5e3e>
 800903e: 9d f8 19 04                  	ldrb.w	r0, [sp, #1049]
 8009042: 4f f0 00 0b                  	mov.w	r11, #0
;             crate::opcode::GATT_ADD_CHARACTERISTIC => Ok(ReturnParameters::GattAddCharacteristic(
 8009046: 8d f8 f4 03                  	strb.w	r0, [sp, #1012]
 800904a: 23 20                        	movs	r0, #35
 800904c: 8d f8 f0 03                  	strb.w	r0, [sp, #1008]
 8009050: 00 20                        	movs	r0, #0
 8009052: 08 90                        	str	r0, [sp, #32]
 8009054: dd f8 20 15                  	ldr.w	r1, [sp, #1312]
 8009058: dd f8 24 25                  	ldr.w	r2, [sp, #1316]
;     copy_nonoverlapping(src, dst, count)
 800905c: bd f8 af 62                  	ldrh.w	r6, [sp, #687]
;             crate::opcode::GATT_ADD_CHARACTERISTIC => Ok(ReturnParameters::GattAddCharacteristic(
 8009060: dd f8 27 35                  	ldr.w	r3, [sp, #1319]
 8009064: cd f8 f9 23                  	str.w	r2, [sp, #1017]
 8009068: ad f8 f2 63                  	strh.w	r6, [sp, #1010]
 800906c: cd f8 f5 13                  	str.w	r1, [sp, #1013]
 8009070: ff 93                        	str	r3, [sp, #1020]
 8009072: 00 20                        	movs	r0, #0
 8009074: a6 90                        	str	r0, [sp, #664]
 8009076: 00 20                        	movs	r0, #0
 8009078: a2 90                        	str	r0, [sp, #648]
 800907a: 00 20                        	movs	r0, #0
 800907c: a3 90                        	str	r0, [sp, #652]
 800907e: 00 20                        	movs	r0, #0
 8009080: a1 90                        	str	r0, [sp, #644]
 8009082: 00 20                        	movs	r0, #0
 8009084: a7 90                        	str	r0, [sp, #668]
 8009086: 00 20                        	movs	r0, #0
 8009088: 9b 90                        	str	r0, [sp, #620]
 800908a: 00 20                        	movs	r0, #0
 800908c: 9f 90                        	str	r0, [sp, #636]
 800908e: 00 20                        	movs	r0, #0
 8009090: 06 90                        	str	r0, [sp, #24]
 8009092: 00 20                        	movs	r0, #0
 8009094: 07 90                        	str	r0, [sp, #28]
 8009096: 02 f0 e6 b9                  	b.w	#9164 <$t.28+0x6c>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 800909a: a9 98                        	ldr	r0, [sp, #676]
 800909c: 0d f5 83 66                  	add.w	r6, sp, #1048
;         intrinsics::offset(self, count)
 80090a0: 08 f1 06 01                  	add.w	r1, r8, #6
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 80090a4: c2 1e                        	subs	r2, r0, #3
;                 ReturnParameters::GapAuthorizationResponse(to_status(&bytes[3..])?),
 80090a6: 30 46                        	mov	r0, r6
 80090a8: 0e f0 90 f9                  	bl	#58144
;         self
 80090ac: b1 1c                        	adds	r1, r6, #2
 80090ae: 0d f5 a4 60                  	add.w	r0, sp, #1312
 80090b2: 16 22                        	movs	r2, #22
 80090b4: 9d f8 18 54                  	ldrb.w	r5, [sp, #1048]
 80090b8: 9d f8 19 44                  	ldrb.w	r4, [sp, #1049]
 80090bc: 13 f0 2d f9                  	bl	#78426
;                 ReturnParameters::GapAuthorizationResponse(to_status(&bytes[3..])?),
 80090c0: 01 2d                        	cmp	r5, #1
 80090c2: 41 f0 bd 84                  	bne.w	#6522 <$t.24+0x68be>
 80090c6: 9d f8 57 14                  	ldrb.w	r1, [sp, #1111]
;         Err(v)
 80090ca: 0d f5 7c 7b                  	add.w	r11, sp, #1008
 80090ce: 8d 91                        	str	r1, [sp, #564]
 80090d0: 9d f8 56 14                  	ldrb.w	r1, [sp, #1110]
 80090d4: 8c 91                        	str	r1, [sp, #560]
 80090d6: 9d f8 55 14                  	ldrb.w	r1, [sp, #1109]
 80090da: 8b 91                        	str	r1, [sp, #556]
 80090dc: 9d f8 54 14                  	ldrb.w	r1, [sp, #1108]
 80090e0: 8e 91                        	str	r1, [sp, #568]
 80090e2: 9d f8 53 14                  	ldrb.w	r1, [sp, #1107]
 80090e6: 8a 91                        	str	r1, [sp, #552]
 80090e8: 9d f8 48 14                  	ldrb.w	r1, [sp, #1096]
 80090ec: 01 91                        	str	r1, [sp, #4]
 80090ee: 9d f8 49 14                  	ldrb.w	r1, [sp, #1097]
 80090f2: 00 91                        	str	r1, [sp]
 80090f4: 9d f8 50 14                  	ldrb.w	r1, [sp, #1104]
 80090f8: 1e 91                        	str	r1, [sp, #120]
 80090fa: 9d f8 51 14                  	ldrb.w	r1, [sp, #1105]
 80090fe: 73 91                        	str	r1, [sp, #460]
 8009100: 9d f8 52 14                  	ldrb.w	r1, [sp, #1106]
 8009104: 86 91                        	str	r1, [sp, #536]
 8009106: dd f8 26 15                  	ldr.w	r1, [sp, #1318]
 800910a: dd f8 2a 25                  	ldr.w	r2, [sp, #1322]
 800910e: dd f8 2e 35                  	ldr.w	r3, [sp, #1326]
 8009112: dd f8 32 65                  	ldr.w	r6, [sp, #1330]
 8009116: 8b e8 4e 00                  	stm.w	r11, {r1, r2, r3, r6}
 800911a: dd f8 40 84                  	ldr.w	r8, [sp, #1088]
 800911e: dd f8 44 04                  	ldr.w	r0, [sp, #1092]
 8009122: dd f8 4c 54                  	ldr.w	r5, [sp, #1100]
;                 ReturnParameters::GapAuthorizationResponse(to_status(&bytes[3..])?),
 8009126: 4f ea 18 41                  	lsr.w	r1, r8, #16
 800912a: dd f8 3c 94                  	ldr.w	r9, [sp, #1084]
 800912e: 41 ea 00 41                  	orr.w	r1, r1, r0, lsl #16
 8009132: 9a 91                        	str	r1, [sp, #616]
 8009134: 4f ea 18 21                  	lsr.w	r1, r8, #8
 8009138: bd f8 4a c4                  	ldrh.w	r12, [sp, #1098]
 800913c: 41 ea 00 61                  	orr.w	r1, r1, r0, lsl #24
;         Err(v)
 8009140: 05 91                        	str	r1, [sp, #20]
 8009142: 29 0e                        	lsrs	r1, r5, #24
 8009144: dd f8 38 44                  	ldr.w	r4, [sp, #1080]
;                 ReturnParameters::GapAuthorizationResponse(to_status(&bytes[3..])?),
 8009148: 0d 91                        	str	r1, [sp, #52]
 800914a: 01 0e                        	lsrs	r1, r0, #24
 800914c: 00 0c                        	lsrs	r0, r0, #16
 800914e: dd f8 34 a4                  	ldr.w	r10, [sp, #1076]
 8009152: 28 90                        	str	r0, [sp, #160]
 8009154: 01 20                        	movs	r0, #1
;         Err(v)
 8009156: 21 90                        	str	r0, [sp, #132]
 8009158: 28 0c                        	lsrs	r0, r5, #16
;                 ReturnParameters::GapAuthorizationResponse(to_status(&bytes[3..])?),
 800915a: 96 91                        	str	r1, [sp, #600]
;         Err(v)
 800915c: 4f ea 19 61                  	lsr.w	r1, r9, #24
 8009160: 0c 90                        	str	r0, [sp, #48]
 8009162: 28 0a                        	lsrs	r0, r5, #8
 8009164: 18 90                        	str	r0, [sp, #96]
 8009166: 4f ea 1c 20                  	lsr.w	r0, r12, #8
 800916a: 09 91                        	str	r1, [sp, #36]
 800916c: 4f ea 19 41                  	lsr.w	r1, r9, #16
 8009170: dd f8 30 e4                  	ldr.w	lr, [sp, #1072]
 8009174: 94 90                        	str	r0, [sp, #592]
 8009176: 20 0e                        	lsrs	r0, r4, #24
 8009178: 0a 91                        	str	r1, [sp, #40]
 800917a: 4f ea 19 21                  	lsr.w	r1, r9, #8
 800917e: 06 90                        	str	r0, [sp, #24]
 8009180: 20 0c                        	lsrs	r0, r4, #16
 8009182: 0b 91                        	str	r1, [sp, #44]
 8009184: 4f ea 1a 61                  	lsr.w	r1, r10, #24
 8009188: 07 90                        	str	r0, [sp, #28]
 800918a: 20 0a                        	lsrs	r0, r4, #8
 800918c: 9b 91                        	str	r1, [sp, #620]
 800918e: 4f ea 1a 41                  	lsr.w	r1, r10, #16
 8009192: 08 90                        	str	r0, [sp, #32]
 8009194: 4f ea 1e 26                  	lsr.w	r6, lr, #8
 8009198: 9f 91                        	str	r1, [sp, #636]
 800919a: 4f ea 1e 40                  	lsr.w	r0, lr, #16
 800919e: 4f ea 1a 21                  	lsr.w	r1, r10, #8
 80091a2: cd f8 08 80                  	str.w	r8, [sp, #8]
 80091a6: 91 95                        	str	r5, [sp, #580]
 80091a8: 4f ea 1e 6b                  	lsr.w	r11, lr, #24
 80091ac: cd f8 7c c0                  	str.w	r12, [sp, #124]
 80091b0: 04 94                        	str	r4, [sp, #16]
 80091b2: cd f8 0c e0                  	str.w	lr, [sp, #12]
 80091b6: cd f8 a4 92                  	str.w	r9, [sp, #676]
 80091ba: cd f8 9c a2                  	str.w	r10, [sp, #668]
 80091be: a3 96                        	str	r6, [sp, #652]
 80091c0: cd e9 a1 10                  	strd	r1, r0, [sp, #644]
 80091c4: 01 f0 58 b8                  	b.w	#4272 <$t.24+0x60f6>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 80091c8: a9 98                        	ldr	r0, [sp, #676]
 80091ca: 0d f5 83 66                  	add.w	r6, sp, #1048
;         intrinsics::offset(self, count)
 80091ce: 08 f1 06 01                  	add.w	r1, r8, #6
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 80091d2: c2 1e                        	subs	r2, r0, #3
;                 Ok(ReturnParameters::GattAllowRead(to_status(&bytes[3..])?))
 80091d4: 30 46                        	mov	r0, r6
 80091d6: 0e f0 f9 f8                  	bl	#57842
;         self
 80091da: b1 1c                        	adds	r1, r6, #2
 80091dc: 0d f5 a4 60                  	add.w	r0, sp, #1312
 80091e0: 16 22                        	movs	r2, #22
 80091e2: 9d f8 18 54                  	ldrb.w	r5, [sp, #1048]
 80091e6: 9d f8 19 44                  	ldrb.w	r4, [sp, #1049]
 80091ea: 13 f0 96 f8                  	bl	#78124
;                 Ok(ReturnParameters::GattAllowRead(to_status(&bytes[3..])?))
 80091ee: 01 2d                        	cmp	r5, #1
 80091f0: 41 f0 2e 84                  	bne.w	#6236 <$t.24+0x68ce>
 80091f4: 9d f8 57 34                  	ldrb.w	r3, [sp, #1111]
 80091f8: 8d 93                        	str	r3, [sp, #564]
 80091fa: 9d f8 56 34                  	ldrb.w	r3, [sp, #1110]
 80091fe: 8c 93                        	str	r3, [sp, #560]
 8009200: 9d f8 55 34                  	ldrb.w	r3, [sp, #1109]
 8009204: 8b 93                        	str	r3, [sp, #556]
 8009206: 9d f8 54 34                  	ldrb.w	r3, [sp, #1108]
 800920a: 8e 93                        	str	r3, [sp, #568]
 800920c: 9d f8 53 34                  	ldrb.w	r3, [sp, #1107]
 8009210: 8a 93                        	str	r3, [sp, #552]
 8009212: 9d f8 48 34                  	ldrb.w	r3, [sp, #1096]
 8009216: 01 93                        	str	r3, [sp, #4]
 8009218: 9d f8 49 34                  	ldrb.w	r3, [sp, #1097]
 800921c: 00 93                        	str	r3, [sp]
 800921e: 9d f8 50 34                  	ldrb.w	r3, [sp, #1104]
 8009222: 1e 93                        	str	r3, [sp, #120]
 8009224: 9d f8 51 34                  	ldrb.w	r3, [sp, #1105]
 8009228: 73 93                        	str	r3, [sp, #460]
 800922a: 9d f8 52 34                  	ldrb.w	r3, [sp, #1106]
 800922e: dd f8 40 a4                  	ldr.w	r10, [sp, #1088]
;         Err(v)
 8009232: 86 93                        	str	r3, [sp, #536]
 8009234: dd f8 2a 35                  	ldr.w	r3, [sp, #1322]
 8009238: dd f8 32 45                  	ldr.w	r4, [sp, #1330]
 800923c: dd f8 44 24                  	ldr.w	r2, [sp, #1092]
 8009240: dd f8 2e 55                  	ldr.w	r5, [sp, #1326]
 8009244: dd f8 26 c5                  	ldr.w	r12, [sp, #1318]
 8009248: cd e9 fe 54                  	strd	r5, r4, [sp, #1016]
 800924c: cd e9 fc c3                  	strd	r12, r3, [sp, #1008]
;                 Ok(ReturnParameters::GattAllowRead(to_status(&bytes[3..])?))
 8009250: 4f ea 1a 43                  	lsr.w	r3, r10, #16
 8009254: dd f8 4c 64                  	ldr.w	r6, [sp, #1100]
 8009258: 43 ea 02 43                  	orr.w	r3, r3, r2, lsl #16
 800925c: a5 93                        	str	r3, [sp, #660]
 800925e: 4f ea 1a 23                  	lsr.w	r3, r10, #8
 8009262: 43 ea 02 63                  	orr.w	r3, r3, r2, lsl #24
;         Err(v)
 8009266: 9c 93                        	str	r3, [sp, #624]
 8009268: 33 0e                        	lsrs	r3, r6, #24
 800926a: bd f8 4a e4                  	ldrh.w	lr, [sp, #1098]
;                 Ok(ReturnParameters::GattAllowRead(to_status(&bytes[3..])?))
 800926e: 0d 93                        	str	r3, [sp, #52]
 8009270: 13 0e                        	lsrs	r3, r2, #24
 8009272: 12 0c                        	lsrs	r2, r2, #16
 8009274: dd f8 38 94                  	ldr.w	r9, [sp, #1080]
 8009278: 99 92                        	str	r2, [sp, #612]
 800927a: 01 22                        	movs	r2, #1
;         Err(v)
 800927c: 21 92                        	str	r2, [sp, #132]
 800927e: 32 0c                        	lsrs	r2, r6, #16
 8009280: 0c 92                        	str	r2, [sp, #48]
 8009282: 32 0a                        	lsrs	r2, r6, #8
 8009284: 18 92                        	str	r2, [sp, #96]
 8009286: 4f ea 1e 22                  	lsr.w	r2, lr, #8
 800928a: 98 92                        	str	r2, [sp, #608]
 800928c: 4f ea 19 62                  	lsr.w	r2, r9, #24
 8009290: 97 92                        	str	r2, [sp, #604]
 8009292: 4f ea 19 42                  	lsr.w	r2, r9, #16
 8009296: 9a 92                        	str	r2, [sp, #616]
 8009298: 4f ea 19 22                  	lsr.w	r2, r9, #8
 800929c: a9 92                        	str	r2, [sp, #676]
 800929e: dd f8 34 14                  	ldr.w	r1, [sp, #1076]
 80092a2: dd f8 30 84                  	ldr.w	r8, [sp, #1072]
 80092a6: dd f8 3c 04                  	ldr.w	r0, [sp, #1084]
;                 Ok(ReturnParameters::GattAllowRead(to_status(&bytes[3..])?))
 80092aa: 9d 93                        	str	r3, [sp, #628]
;         Err(v)
 80092ac: 4f ea 11 6c                  	lsr.w	r12, r1, #24
 80092b0: 0c 0c                        	lsrs	r4, r1, #16
 80092b2: 0b 0a                        	lsrs	r3, r1, #8
 80092b4: a7 91                        	str	r1, [sp, #668]
 80092b6: 4f ea 18 65                  	lsr.w	r5, r8, #24
 80092ba: 97 99                        	ldr	r1, [sp, #604]
 80092bc: ab 46                        	mov	r11, r5
 80092be: 06 91                        	str	r1, [sp, #24]
 80092c0: 9a 99                        	ldr	r1, [sp, #616]
 80092c2: cd f8 08 a0                  	str.w	r10, [sp, #8]
 80092c6: 4f ea 10 6a                  	lsr.w	r10, r0, #24
 80092ca: 91 96                        	str	r6, [sp, #580]
 80092cc: 4f ea 18 26                  	lsr.w	r6, r8, #8
 80092d0: cd f8 7c e0                  	str.w	lr, [sp, #124]
 80092d4: 4f ea 18 4e                  	lsr.w	lr, r8, #16
 80092d8: cd f8 10 90                  	str.w	r9, [sp, #16]
 80092dc: 4f ea 10 49                  	lsr.w	r9, r0, #16
 80092e0: cd f8 0c 80                  	str.w	r8, [sp, #12]
 80092e4: 4f ea 10 28                  	lsr.w	r8, r0, #8
 80092e8: 07 91                        	str	r1, [sp, #28]
 80092ea: a9 99                        	ldr	r1, [sp, #676]
 80092ec: a9 90                        	str	r0, [sp, #676]
 80092ee: 9c 98                        	ldr	r0, [sp, #624]
 80092f0: 05 90                        	str	r0, [sp, #20]
 80092f2: a5 98                        	ldr	r0, [sp, #660]
 80092f4: 9a 90                        	str	r0, [sp, #616]
 80092f6: 99 98                        	ldr	r0, [sp, #612]
 80092f8: 28 90                        	str	r0, [sp, #160]
 80092fa: 9d 98                        	ldr	r0, [sp, #628]
 80092fc: 96 90                        	str	r0, [sp, #600]
 80092fe: 98 98                        	ldr	r0, [sp, #608]
 8009300: a3 96                        	str	r6, [sp, #652]
 8009302: cd e9 a1 3e                  	strd	r3, lr, [sp, #644]
 8009306: cd f8 6c c2                  	str.w	r12, [sp, #620]
 800930a: 9f 94                        	str	r4, [sp, #636]
 800930c: cd e9 08 1a                  	strd	r1, r10, [sp, #32]
 8009310: cd e9 0a 98                  	strd	r9, r8, [sp, #40]
 8009314: 94 90                        	str	r0, [sp, #592]
 8009316: 00 f0 af bf                  	b.w	#3934 <$t.24+0x60f6>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 800931a: a9 98                        	ldr	r0, [sp, #676]
 800931c: 0d f5 83 66                  	add.w	r6, sp, #1048
;         intrinsics::offset(self, count)
 8009320: 08 f1 06 01                  	add.w	r1, r8, #6
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8009324: c2 1e                        	subs	r2, r0, #3
;                 to_status(&bytes[3..])?,
 8009326: 30 46                        	mov	r0, r6
 8009328: 0e f0 50 f8                  	bl	#57504
;         self
 800932c: b1 1c                        	adds	r1, r6, #2
 800932e: 0d f5 a4 60                  	add.w	r0, sp, #1312
 8009332: 16 22                        	movs	r2, #22
 8009334: 9d f8 18 54                  	ldrb.w	r5, [sp, #1048]
 8009338: 9d f8 19 44                  	ldrb.w	r4, [sp, #1049]
 800933c: 12 f0 ed ff                  	bl	#77786
;                 to_status(&bytes[3..])?,
 8009340: 01 2d                        	cmp	r5, #1
 8009342: 41 f0 be 83                  	bne.w	#6012 <$t.24+0x6940>
 8009346: 9d f8 57 34                  	ldrb.w	r3, [sp, #1111]
 800934a: 8d 93                        	str	r3, [sp, #564]
 800934c: 9d f8 56 34                  	ldrb.w	r3, [sp, #1110]
 8009350: 8c 93                        	str	r3, [sp, #560]
 8009352: 9d f8 55 34                  	ldrb.w	r3, [sp, #1109]
 8009356: 8b 93                        	str	r3, [sp, #556]
 8009358: 9d f8 54 34                  	ldrb.w	r3, [sp, #1108]
 800935c: 8e 93                        	str	r3, [sp, #568]
 800935e: 9d f8 53 34                  	ldrb.w	r3, [sp, #1107]
 8009362: 8a 93                        	str	r3, [sp, #552]
 8009364: 9d f8 48 34                  	ldrb.w	r3, [sp, #1096]
 8009368: 01 93                        	str	r3, [sp, #4]
 800936a: 9d f8 49 34                  	ldrb.w	r3, [sp, #1097]
 800936e: 00 93                        	str	r3, [sp]
 8009370: 9d f8 50 34                  	ldrb.w	r3, [sp, #1104]
 8009374: 1e 93                        	str	r3, [sp, #120]
 8009376: 9d f8 51 34                  	ldrb.w	r3, [sp, #1105]
 800937a: 73 93                        	str	r3, [sp, #460]
 800937c: 9d f8 52 34                  	ldrb.w	r3, [sp, #1106]
 8009380: dd f8 40 a4                  	ldr.w	r10, [sp, #1088]
;         Err(v)
 8009384: 86 93                        	str	r3, [sp, #536]
 8009386: dd f8 2a 35                  	ldr.w	r3, [sp, #1322]
 800938a: dd f8 32 45                  	ldr.w	r4, [sp, #1330]
 800938e: dd f8 44 24                  	ldr.w	r2, [sp, #1092]
 8009392: dd f8 2e 55                  	ldr.w	r5, [sp, #1326]
 8009396: dd f8 26 c5                  	ldr.w	r12, [sp, #1318]
 800939a: cd e9 fe 54                  	strd	r5, r4, [sp, #1016]
 800939e: cd e9 fc c3                  	strd	r12, r3, [sp, #1008]
;                 to_status(&bytes[3..])?,
 80093a2: 4f ea 1a 43                  	lsr.w	r3, r10, #16
 80093a6: dd f8 4c 64                  	ldr.w	r6, [sp, #1100]
 80093aa: 43 ea 02 43                  	orr.w	r3, r3, r2, lsl #16
 80093ae: a5 93                        	str	r3, [sp, #660]
 80093b0: 4f ea 1a 23                  	lsr.w	r3, r10, #8
 80093b4: 43 ea 02 63                  	orr.w	r3, r3, r2, lsl #24
;         Err(v)
 80093b8: 9d 93                        	str	r3, [sp, #628]
 80093ba: 33 0e                        	lsrs	r3, r6, #24
 80093bc: bd f8 4a e4                  	ldrh.w	lr, [sp, #1098]
;                 to_status(&bytes[3..])?,
 80093c0: 0d 93                        	str	r3, [sp, #52]
 80093c2: 13 0e                        	lsrs	r3, r2, #24
 80093c4: 12 0c                        	lsrs	r2, r2, #16
 80093c6: dd f8 38 94                  	ldr.w	r9, [sp, #1080]
 80093ca: 28 92                        	str	r2, [sp, #160]
 80093cc: 01 22                        	movs	r2, #1
;         Err(v)
 80093ce: 21 92                        	str	r2, [sp, #132]
 80093d0: 32 0c                        	lsrs	r2, r6, #16
 80093d2: 0c 92                        	str	r2, [sp, #48]
 80093d4: 32 0a                        	lsrs	r2, r6, #8
 80093d6: 18 92                        	str	r2, [sp, #96]
 80093d8: 4f ea 1e 22                  	lsr.w	r2, lr, #8
 80093dc: 9c 92                        	str	r2, [sp, #624]
 80093de: 4f ea 19 62                  	lsr.w	r2, r9, #24
 80093e2: 99 92                        	str	r2, [sp, #612]
 80093e4: 4f ea 19 42                  	lsr.w	r2, r9, #16
 80093e8: 9a 92                        	str	r2, [sp, #616]
 80093ea: 4f ea 19 22                  	lsr.w	r2, r9, #8
 80093ee: a9 92                        	str	r2, [sp, #676]
 80093f0: dd f8 34 14                  	ldr.w	r1, [sp, #1076]
 80093f4: dd f8 30 84                  	ldr.w	r8, [sp, #1072]
 80093f8: dd f8 3c 04                  	ldr.w	r0, [sp, #1084]
;                 to_status(&bytes[3..])?,
 80093fc: 96 93                        	str	r3, [sp, #600]
;         Err(v)
 80093fe: 4f ea 11 6c                  	lsr.w	r12, r1, #24
 8009402: 0c 0c                        	lsrs	r4, r1, #16
 8009404: 0b 0a                        	lsrs	r3, r1, #8
 8009406: a7 91                        	str	r1, [sp, #668]
 8009408: 4f ea 18 65                  	lsr.w	r5, r8, #24
 800940c: 99 99                        	ldr	r1, [sp, #612]
 800940e: ab 46                        	mov	r11, r5
 8009410: 06 91                        	str	r1, [sp, #24]
 8009412: 9a 99                        	ldr	r1, [sp, #616]
 8009414: cd f8 08 a0                  	str.w	r10, [sp, #8]
 8009418: 4f ea 10 6a                  	lsr.w	r10, r0, #24
 800941c: 91 96                        	str	r6, [sp, #580]
 800941e: 4f ea 18 26                  	lsr.w	r6, r8, #8
 8009422: cd f8 7c e0                  	str.w	lr, [sp, #124]
 8009426: 4f ea 18 4e                  	lsr.w	lr, r8, #16
 800942a: cd f8 10 90                  	str.w	r9, [sp, #16]
 800942e: 4f ea 10 49                  	lsr.w	r9, r0, #16
 8009432: cd f8 0c 80                  	str.w	r8, [sp, #12]
 8009436: 4f ea 10 28                  	lsr.w	r8, r0, #8
 800943a: 07 91                        	str	r1, [sp, #28]
 800943c: a9 99                        	ldr	r1, [sp, #676]
 800943e: a9 90                        	str	r0, [sp, #676]
 8009440: 9d 98                        	ldr	r0, [sp, #628]
 8009442: 05 90                        	str	r0, [sp, #20]
 8009444: a5 98                        	ldr	r0, [sp, #660]
 8009446: 9a 90                        	str	r0, [sp, #616]
 8009448: 9c 98                        	ldr	r0, [sp, #624]
 800944a: a3 96                        	str	r6, [sp, #652]
 800944c: cd e9 a1 3e                  	strd	r3, lr, [sp, #644]
 8009450: cd f8 6c c2                  	str.w	r12, [sp, #620]
 8009454: 9f 94                        	str	r4, [sp, #636]
 8009456: cd e9 08 1a                  	strd	r1, r10, [sp, #32]
 800945a: cd e9 0a 98                  	strd	r9, r8, [sp, #40]
 800945e: 94 90                        	str	r0, [sp, #592]
 8009460: 00 f0 0a bf                  	b.w	#3604 <$t.24+0x60f6>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8009464: a9 98                        	ldr	r0, [sp, #676]
 8009466: 0d f5 83 66                  	add.w	r6, sp, #1048
;         intrinsics::offset(self, count)
 800946a: 08 f1 06 01                  	add.w	r1, r8, #6
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 800946e: c2 1e                        	subs	r2, r0, #3
;                 Ok(ReturnParameters::HalDeviceStandby(to_status(&bytes[3..])?))
 8009470: 30 46                        	mov	r0, r6
 8009472: 0d f0 ab ff                  	bl	#57174
;         self
 8009476: b1 1c                        	adds	r1, r6, #2
 8009478: 0d f5 a4 60                  	add.w	r0, sp, #1312
 800947c: 16 22                        	movs	r2, #22
 800947e: 9d f8 18 54                  	ldrb.w	r5, [sp, #1048]
 8009482: 9d f8 19 44                  	ldrb.w	r4, [sp, #1049]
 8009486: 12 f0 48 ff                  	bl	#77456
;                 Ok(ReturnParameters::HalDeviceStandby(to_status(&bytes[3..])?))
 800948a: 01 2d                        	cmp	r5, #1
 800948c: 00 f0 de 80                  	beq.w	#444 <$t.24+0x54ca>
 8009490: a7 f1 48 02                  	sub.w	r2, r7, #72
 8009494: 37 f8 3c 3c                  	ldrh	r3, [r7, #-60]
 8009498: 8d f8 f1 43                  	strb.w	r4, [sp, #1009]
 800949c: 04 26                        	movs	r6, #4
 800949e: 07 ca                        	ldm	r2, {r0, r1, r2}
 80094a0: 8d f8 f0 63                  	strb.w	r6, [sp, #1008]
 80094a4: cd f8 f2 03                  	str.w	r0, [sp, #1010]
 80094a8: cd f8 f6 13                  	str.w	r1, [sp, #1014]
 80094ac: cd f8 fa 23                  	str.w	r2, [sp, #1018]
 80094b0: ad f8 fe 33                  	strh.w	r3, [sp, #1022]
 80094b4: 4f f0 00 0b                  	mov.w	r11, #0
 80094b8: 00 20                        	movs	r0, #0
 80094ba: a6 90                        	str	r0, [sp, #664]
 80094bc: 00 20                        	movs	r0, #0
 80094be: a2 90                        	str	r0, [sp, #648]
 80094c0: 01 f0 78 bb                  	b.w	#5872 <$t.24+0x6a32>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 80094c4: a9 98                        	ldr	r0, [sp, #676]
 80094c6: 0d f5 83 66                  	add.w	r6, sp, #1048
;         intrinsics::offset(self, count)
 80094ca: 08 f1 06 01                  	add.w	r1, r8, #6
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 80094ce: c2 1e                        	subs	r2, r0, #3
;                 ReturnParameters::L2CapConnectionParameterUpdateResponse(to_status(&bytes[3..])?),
 80094d0: 30 46                        	mov	r0, r6
 80094d2: 0d f0 7b ff                  	bl	#57078
;         self
 80094d6: b1 1c                        	adds	r1, r6, #2
 80094d8: 0d f5 a4 60                  	add.w	r0, sp, #1312
 80094dc: 16 22                        	movs	r2, #22
 80094de: 9d f8 18 54                  	ldrb.w	r5, [sp, #1048]
 80094e2: 9d f8 19 44                  	ldrb.w	r4, [sp, #1049]
 80094e6: 12 f0 18 ff                  	bl	#77360
;                 ReturnParameters::L2CapConnectionParameterUpdateResponse(to_status(&bytes[3..])?),
 80094ea: 01 2d                        	cmp	r5, #1
 80094ec: 41 f0 1e 83                  	bne.w	#5692 <$t.24+0x69aa>
 80094f0: 9d f8 57 34                  	ldrb.w	r3, [sp, #1111]
 80094f4: 8d 93                        	str	r3, [sp, #564]
 80094f6: 9d f8 56 34                  	ldrb.w	r3, [sp, #1110]
 80094fa: 8c 93                        	str	r3, [sp, #560]
 80094fc: 9d f8 55 34                  	ldrb.w	r3, [sp, #1109]
 8009500: 8b 93                        	str	r3, [sp, #556]
 8009502: 9d f8 54 34                  	ldrb.w	r3, [sp, #1108]
 8009506: 8e 93                        	str	r3, [sp, #568]
 8009508: 9d f8 53 34                  	ldrb.w	r3, [sp, #1107]
 800950c: 8a 93                        	str	r3, [sp, #552]
 800950e: 9d f8 48 34                  	ldrb.w	r3, [sp, #1096]
 8009512: 01 93                        	str	r3, [sp, #4]
 8009514: 9d f8 49 34                  	ldrb.w	r3, [sp, #1097]
 8009518: 00 93                        	str	r3, [sp]
 800951a: 9d f8 50 34                  	ldrb.w	r3, [sp, #1104]
 800951e: dd f8 40 a4                  	ldr.w	r10, [sp, #1088]
 8009522: 1e 93                        	str	r3, [sp, #120]
 8009524: 9d f8 51 34                  	ldrb.w	r3, [sp, #1105]
 8009528: 73 93                        	str	r3, [sp, #460]
 800952a: 9d f8 52 34                  	ldrb.w	r3, [sp, #1106]
 800952e: dd f8 44 24                  	ldr.w	r2, [sp, #1092]
 8009532: 86 93                        	str	r3, [sp, #536]
 8009534: dd f8 32 45                  	ldr.w	r4, [sp, #1330]
 8009538: dd f8 2a 35                  	ldr.w	r3, [sp, #1322]
 800953c: dd f8 2e 55                  	ldr.w	r5, [sp, #1326]
 8009540: ff 94                        	str	r4, [sp, #1020]
 8009542: fe 95                        	str	r5, [sp, #1016]
 8009544: fd 93                        	str	r3, [sp, #1012]
 8009546: 4f ea 1a 43                  	lsr.w	r3, r10, #16
 800954a: dd f8 4c 64                  	ldr.w	r6, [sp, #1100]
 800954e: 43 ea 02 43                  	orr.w	r3, r3, r2, lsl #16
 8009552: 9d 93                        	str	r3, [sp, #628]
 8009554: 4f ea 1a 23                  	lsr.w	r3, r10, #8
 8009558: 43 ea 02 63                  	orr.w	r3, r3, r2, lsl #24
 800955c: 9a 93                        	str	r3, [sp, #616]
 800955e: 33 0e                        	lsrs	r3, r6, #24
 8009560: bd f8 4a e4                  	ldrh.w	lr, [sp, #1098]
 8009564: a5 93                        	str	r3, [sp, #660]
 8009566: 13 0e                        	lsrs	r3, r2, #24
 8009568: 12 0c                        	lsrs	r2, r2, #16
 800956a: dd f8 38 94                  	ldr.w	r9, [sp, #1080]
 800956e: 98 92                        	str	r2, [sp, #608]
 8009570: 01 22                        	movs	r2, #1
 8009572: 21 92                        	str	r2, [sp, #132]
 8009574: 32 0c                        	lsrs	r2, r6, #16
 8009576: 99 92                        	str	r2, [sp, #612]
 8009578: 32 0a                        	lsrs	r2, r6, #8
 800957a: 18 92                        	str	r2, [sp, #96]
 800957c: 4f ea 1e 22                  	lsr.w	r2, lr, #8
 8009580: 97 92                        	str	r2, [sp, #604]
 8009582: 4f ea 19 62                  	lsr.w	r2, r9, #24
 8009586: 95 92                        	str	r2, [sp, #596]
 8009588: 4f ea 19 42                  	lsr.w	r2, r9, #16
 800958c: 96 92                        	str	r2, [sp, #600]
 800958e: 4f ea 19 22                  	lsr.w	r2, r9, #8
 8009592: a9 92                        	str	r2, [sp, #676]
 8009594: dd f8 34 14                  	ldr.w	r1, [sp, #1076]
 8009598: dd f8 30 84                  	ldr.w	r8, [sp, #1072]
 800959c: dd f8 26 c5                  	ldr.w	r12, [sp, #1318]
 80095a0: dd f8 3c 04                  	ldr.w	r0, [sp, #1084]
 80095a4: 0c 0c                        	lsrs	r4, r1, #16
 80095a6: cd f8 f0 c3                  	str.w	r12, [sp, #1008]
 80095aa: 4f ea 11 6c                  	lsr.w	r12, r1, #24
 80095ae: 9c 93                        	str	r3, [sp, #624]
 80095b0: 0b 0a                        	lsrs	r3, r1, #8
 80095b2: a7 91                        	str	r1, [sp, #668]
 80095b4: 4f ea 18 65                  	lsr.w	r5, r8, #24
 80095b8: 95 99                        	ldr	r1, [sp, #596]
 80095ba: ab 46                        	mov	r11, r5
 80095bc: 06 91                        	str	r1, [sp, #24]
 80095be: 96 99                        	ldr	r1, [sp, #600]
 80095c0: cd f8 08 a0                  	str.w	r10, [sp, #8]
 80095c4: 4f ea 10 6a                  	lsr.w	r10, r0, #24
 80095c8: 91 96                        	str	r6, [sp, #580]
 80095ca: 4f ea 18 26                  	lsr.w	r6, r8, #8
 80095ce: cd f8 7c e0                  	str.w	lr, [sp, #124]
 80095d2: 4f ea 18 4e                  	lsr.w	lr, r8, #16
 80095d6: cd f8 10 90                  	str.w	r9, [sp, #16]
 80095da: 4f ea 10 49                  	lsr.w	r9, r0, #16
 80095de: cd f8 0c 80                  	str.w	r8, [sp, #12]
 80095e2: 4f ea 10 28                  	lsr.w	r8, r0, #8
 80095e6: 07 91                        	str	r1, [sp, #28]
 80095e8: a9 99                        	ldr	r1, [sp, #676]
 80095ea: a9 90                        	str	r0, [sp, #676]
 80095ec: 9a 98                        	ldr	r0, [sp, #616]
 80095ee: 05 90                        	str	r0, [sp, #20]
 80095f0: 9d 98                        	ldr	r0, [sp, #628]
 80095f2: 9a 90                        	str	r0, [sp, #616]
 80095f4: 98 98                        	ldr	r0, [sp, #608]
 80095f6: 28 90                        	str	r0, [sp, #160]
 80095f8: 9c 98                        	ldr	r0, [sp, #624]
 80095fa: 96 90                        	str	r0, [sp, #600]
 80095fc: 97 98                        	ldr	r0, [sp, #604]
 80095fe: 94 90                        	str	r0, [sp, #592]
 8009600: a5 98                        	ldr	r0, [sp, #660]
 8009602: 0d 90                        	str	r0, [sp, #52]
 8009604: 99 98                        	ldr	r0, [sp, #612]
 8009606: a3 96                        	str	r6, [sp, #652]
 8009608: cd e9 a1 3e                  	strd	r3, lr, [sp, #644]
 800960c: cd f8 6c c2                  	str.w	r12, [sp, #620]
 8009610: 9f 94                        	str	r4, [sp, #636]
 8009612: cd e9 08 1a                  	strd	r1, r10, [sp, #32]
 8009616: cd e9 0a 98                  	strd	r9, r8, [sp, #40]
 800961a: 0c 90                        	str	r0, [sp, #48]
 800961c: 00 f0 2c be                  	b.w	#3160 <$t.24+0x60f6>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8009620: a9 98                        	ldr	r0, [sp, #676]
 8009622: 0d f5 83 66                  	add.w	r6, sp, #1048
;         intrinsics::offset(self, count)
 8009626: 08 f1 06 01                  	add.w	r1, r8, #6
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 800962a: c2 1e                        	subs	r2, r0, #3
;                 to_status(&bytes[3..])?,
 800962c: 30 46                        	mov	r0, r6
 800962e: 0d f0 cd fe                  	bl	#56730
;         self
 8009632: b1 1c                        	adds	r1, r6, #2
 8009634: 0d f5 a4 60                  	add.w	r0, sp, #1312
 8009638: 16 22                        	movs	r2, #22
 800963a: 9d f8 18 54                  	ldrb.w	r5, [sp, #1048]
 800963e: 9d f8 19 44                  	ldrb.w	r4, [sp, #1049]
 8009642: 12 f0 6a fe                  	bl	#77012
;                 to_status(&bytes[3..])?,
 8009646: 01 2d                        	cmp	r5, #1
 8009648: 41 f0 9c 82                  	bne.w	#5432 <$t.24+0x6a02>
 800964c: 9d f8 57 14                  	ldrb.w	r1, [sp, #1111]
 8009650: 8d 91                        	str	r1, [sp, #564]
 8009652: 9d f8 56 14                  	ldrb.w	r1, [sp, #1110]
 8009656: 8c 91                        	str	r1, [sp, #560]
 8009658: 9d f8 55 14                  	ldrb.w	r1, [sp, #1109]
 800965c: 8b 91                        	str	r1, [sp, #556]
 800965e: 9d f8 54 14                  	ldrb.w	r1, [sp, #1108]
 8009662: 8e 91                        	str	r1, [sp, #568]
 8009664: 9d f8 53 14                  	ldrb.w	r1, [sp, #1107]
 8009668: 8a 91                        	str	r1, [sp, #552]
 800966a: 9d f8 48 14                  	ldrb.w	r1, [sp, #1096]
 800966e: 01 91                        	str	r1, [sp, #4]
 8009670: 9d f8 49 14                  	ldrb.w	r1, [sp, #1097]
 8009674: 00 91                        	str	r1, [sp]
 8009676: 9d f8 50 14                  	ldrb.w	r1, [sp, #1104]
 800967a: dd f8 40 84                  	ldr.w	r8, [sp, #1088]
 800967e: 1e 91                        	str	r1, [sp, #120]
 8009680: 9d f8 51 14                  	ldrb.w	r1, [sp, #1105]
 8009684: 73 91                        	str	r1, [sp, #460]
 8009686: 9d f8 52 14                  	ldrb.w	r1, [sp, #1106]
 800968a: dd f8 44 04                  	ldr.w	r0, [sp, #1092]
 800968e: 86 91                        	str	r1, [sp, #536]
 8009690: dd f8 32 65                  	ldr.w	r6, [sp, #1330]
 8009694: dd f8 26 15                  	ldr.w	r1, [sp, #1318]
 8009698: dd f8 2a 25                  	ldr.w	r2, [sp, #1322]
 800969c: dd f8 2e 35                  	ldr.w	r3, [sp, #1326]
 80096a0: ff 96                        	str	r6, [sp, #1020]
 80096a2: fe 93                        	str	r3, [sp, #1016]
 80096a4: fd 92                        	str	r2, [sp, #1012]
 80096a6: fc 91                        	str	r1, [sp, #1008]
 80096a8: 4f ea 18 41                  	lsr.w	r1, r8, #16
 80096ac: dd f8 4c 54                  	ldr.w	r5, [sp, #1100]
 80096b0: 41 ea 00 41                  	orr.w	r1, r1, r0, lsl #16
 80096b4: 9a 91                        	str	r1, [sp, #616]
 80096b6: 4f ea 18 21                  	lsr.w	r1, r8, #8
 80096ba: 41 ea 00 61                  	orr.w	r1, r1, r0, lsl #24
 80096be: 05 91                        	str	r1, [sp, #20]
 80096c0: 29 0e                        	lsrs	r1, r5, #24
 80096c2: bd f8 4a c4                  	ldrh.w	r12, [sp, #1098]
 80096c6: 0d 91                        	str	r1, [sp, #52]
 80096c8: 01 0e                        	lsrs	r1, r0, #24
 80096ca: 00 0c                        	lsrs	r0, r0, #16
 80096cc: dd f8 38 44                  	ldr.w	r4, [sp, #1080]
 80096d0: 28 90                        	str	r0, [sp, #160]
 80096d2: 01 20                        	movs	r0, #1
 80096d4: 21 90                        	str	r0, [sp, #132]
 80096d6: 28 0c                        	lsrs	r0, r5, #16
 80096d8: 0c 90                        	str	r0, [sp, #48]
 80096da: 28 0a                        	lsrs	r0, r5, #8
 80096dc: 18 90                        	str	r0, [sp, #96]
 80096de: 4f ea 1c 20                  	lsr.w	r0, r12, #8
 80096e2: dd f8 30 e4                  	ldr.w	lr, [sp, #1072]
 80096e6: 94 90                        	str	r0, [sp, #592]
 80096e8: 20 0e                        	lsrs	r0, r4, #24
 80096ea: 06 90                        	str	r0, [sp, #24]
 80096ec: 20 0c                        	lsrs	r0, r4, #16
 80096ee: dd f8 3c 94                  	ldr.w	r9, [sp, #1084]
 80096f2: 4f ea 1e 6b                  	lsr.w	r11, lr, #24
 80096f6: 07 90                        	str	r0, [sp, #28]
 80096f8: 20 0a                        	lsrs	r0, r4, #8
 80096fa: 08 90                        	str	r0, [sp, #32]
 80096fc: 4f ea 1e 40                  	lsr.w	r0, lr, #16
 8009700: a2 90                        	str	r0, [sp, #648]
 8009702: 4f ea 1e 20                  	lsr.w	r0, lr, #8
 8009706: dd f8 34 a4                  	ldr.w	r10, [sp, #1076]
 800970a: a3 90                        	str	r0, [sp, #652]
 800970c: 4f ea 19 60                  	lsr.w	r0, r9, #24
 8009710: 09 90                        	str	r0, [sp, #36]
 8009712: 4f ea 19 40                  	lsr.w	r0, r9, #16
 8009716: 0a 90                        	str	r0, [sp, #40]
 8009718: 4f ea 19 20                  	lsr.w	r0, r9, #8
 800971c: 0b 90                        	str	r0, [sp, #44]
 800971e: 4f ea 1a 60                  	lsr.w	r0, r10, #24
 8009722: 9b 90                        	str	r0, [sp, #620]
 8009724: 4f ea 1a 40                  	lsr.w	r0, r10, #16
 8009728: 9f 90                        	str	r0, [sp, #636]
 800972a: 4f ea 1a 20                  	lsr.w	r0, r10, #8
 800972e: a1 90                        	str	r0, [sp, #644]
 8009730: cd f8 08 80                  	str.w	r8, [sp, #8]
 8009734: 96 91                        	str	r1, [sp, #600]
 8009736: 91 95                        	str	r5, [sp, #580]
 8009738: cd f8 7c c0                  	str.w	r12, [sp, #124]
 800973c: 04 94                        	str	r4, [sp, #16]
 800973e: cd f8 0c e0                  	str.w	lr, [sp, #12]
 8009742: cd f8 a4 92                  	str.w	r9, [sp, #676]
 8009746: cd f8 9c a2                  	str.w	r10, [sp, #668]
 800974a: 00 20                        	movs	r0, #0
 800974c: a6 90                        	str	r0, [sp, #664]
 800974e: 02 f0 82 bd                  	b.w	#11012 <$t.42+0x9c>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8009752: a9 98                        	ldr	r0, [sp, #676]
 8009754: 0d f5 83 66                  	add.w	r6, sp, #1048
;         intrinsics::offset(self, count)
 8009758: 08 f1 06 01                  	add.w	r1, r8, #6
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 800975c: c2 1e                        	subs	r2, r0, #3
;                 to_status(&bytes[3..])?,
 800975e: 30 46                        	mov	r0, r6
 8009760: 0d f0 34 fe                  	bl	#56424
;         self
 8009764: b1 1c                        	adds	r1, r6, #2
 8009766: 0d f5 a4 60                  	add.w	r0, sp, #1312
 800976a: 16 22                        	movs	r2, #22
 800976c: 9d f8 18 54                  	ldrb.w	r5, [sp, #1048]
 8009770: 9d f8 19 44                  	ldrb.w	r4, [sp, #1049]
 8009774: 12 f0 d1 fd                  	bl	#76706
;                 to_status(&bytes[3..])?,
 8009778: 01 2d                        	cmp	r5, #1
 800977a: 41 f0 1e 82                  	bne.w	#5180 <$t.24+0x6a38>
 800977e: 9d f8 57 14                  	ldrb.w	r1, [sp, #1111]
 8009782: 8d 91                        	str	r1, [sp, #564]
 8009784: 9d f8 56 14                  	ldrb.w	r1, [sp, #1110]
 8009788: 8c 91                        	str	r1, [sp, #560]
 800978a: 9d f8 55 14                  	ldrb.w	r1, [sp, #1109]
 800978e: 8b 91                        	str	r1, [sp, #556]
 8009790: 9d f8 54 14                  	ldrb.w	r1, [sp, #1108]
 8009794: 8e 91                        	str	r1, [sp, #568]
 8009796: 9d f8 53 14                  	ldrb.w	r1, [sp, #1107]
 800979a: 8a 91                        	str	r1, [sp, #552]
 800979c: 9d f8 48 14                  	ldrb.w	r1, [sp, #1096]
 80097a0: 01 91                        	str	r1, [sp, #4]
 80097a2: 9d f8 49 14                  	ldrb.w	r1, [sp, #1097]
 80097a6: 00 91                        	str	r1, [sp]
 80097a8: 9d f8 50 14                  	ldrb.w	r1, [sp, #1104]
 80097ac: dd f8 40 84                  	ldr.w	r8, [sp, #1088]
 80097b0: 1e 91                        	str	r1, [sp, #120]
 80097b2: 9d f8 51 14                  	ldrb.w	r1, [sp, #1105]
 80097b6: 73 91                        	str	r1, [sp, #460]
 80097b8: 9d f8 52 14                  	ldrb.w	r1, [sp, #1106]
 80097bc: dd f8 44 04                  	ldr.w	r0, [sp, #1092]
 80097c0: 86 91                        	str	r1, [sp, #536]
 80097c2: dd f8 32 65                  	ldr.w	r6, [sp, #1330]
 80097c6: dd f8 26 15                  	ldr.w	r1, [sp, #1318]
 80097ca: dd f8 2a 25                  	ldr.w	r2, [sp, #1322]
 80097ce: dd f8 2e 35                  	ldr.w	r3, [sp, #1326]
 80097d2: ff 96                        	str	r6, [sp, #1020]
 80097d4: fe 93                        	str	r3, [sp, #1016]
 80097d6: fd 92                        	str	r2, [sp, #1012]
 80097d8: fc 91                        	str	r1, [sp, #1008]
 80097da: 4f ea 18 41                  	lsr.w	r1, r8, #16
 80097de: dd f8 4c 54                  	ldr.w	r5, [sp, #1100]
 80097e2: 41 ea 00 41                  	orr.w	r1, r1, r0, lsl #16
 80097e6: 9a 91                        	str	r1, [sp, #616]
 80097e8: 4f ea 18 21                  	lsr.w	r1, r8, #8
 80097ec: dd f8 3c 94                  	ldr.w	r9, [sp, #1084]
 80097f0: 41 ea 00 61                  	orr.w	r1, r1, r0, lsl #24
 80097f4: 05 91                        	str	r1, [sp, #20]
 80097f6: 29 0e                        	lsrs	r1, r5, #24
 80097f8: 0d 91                        	str	r1, [sp, #52]
 80097fa: 01 0e                        	lsrs	r1, r0, #24
 80097fc: dd f8 34 a4                  	ldr.w	r10, [sp, #1076]
 8009800: 00 0c                        	lsrs	r0, r0, #16
 8009802: 96 91                        	str	r1, [sp, #600]
 8009804: 4f ea 19 61                  	lsr.w	r1, r9, #24
 8009808: 09 91                        	str	r1, [sp, #36]
 800980a: 4f ea 19 41                  	lsr.w	r1, r9, #16
 800980e: 0a 91                        	str	r1, [sp, #40]
 8009810: 4f ea 19 21                  	lsr.w	r1, r9, #8
 8009814: 0b 91                        	str	r1, [sp, #44]
 8009816: 4f ea 1a 61                  	lsr.w	r1, r10, #24
 800981a: 9b 91                        	str	r1, [sp, #620]
 800981c: 4f ea 1a 41                  	lsr.w	r1, r10, #16
 8009820: 9f 91                        	str	r1, [sp, #636]
 8009822: 4f ea 1a 21                  	lsr.w	r1, r10, #8
 8009826: a1 91                        	str	r1, [sp, #644]
 8009828: bd f8 4a c4                  	ldrh.w	r12, [sp, #1098]
 800982c: 28 90                        	str	r0, [sp, #160]
 800982e: 01 20                        	movs	r0, #1
 8009830: dd f8 38 44                  	ldr.w	r4, [sp, #1080]
 8009834: 21 90                        	str	r0, [sp, #132]
 8009836: 28 0c                        	lsrs	r0, r5, #16
 8009838: 0c 90                        	str	r0, [sp, #48]
 800983a: 28 0a                        	lsrs	r0, r5, #8
 800983c: 18 90                        	str	r0, [sp, #96]
 800983e: 4f ea 1c 20                  	lsr.w	r0, r12, #8
 8009842: dd f8 30 e4                  	ldr.w	lr, [sp, #1072]
 8009846: 94 90                        	str	r0, [sp, #592]
 8009848: 20 0e                        	lsrs	r0, r4, #24
 800984a: 06 90                        	str	r0, [sp, #24]
 800984c: 20 0c                        	lsrs	r0, r4, #16
 800984e: 07 90                        	str	r0, [sp, #28]
 8009850: 20 0a                        	lsrs	r0, r4, #8
 8009852: 08 90                        	str	r0, [sp, #32]
 8009854: 4f ea 1e 40                  	lsr.w	r0, lr, #16
 8009858: 4f ea 1e 26                  	lsr.w	r6, lr, #8
 800985c: cd f8 08 80                  	str.w	r8, [sp, #8]
 8009860: 91 95                        	str	r5, [sp, #580]
 8009862: 4f ea 1e 6b                  	lsr.w	r11, lr, #24
 8009866: cd f8 7c c0                  	str.w	r12, [sp, #124]
 800986a: 04 94                        	str	r4, [sp, #16]
 800986c: cd f8 0c e0                  	str.w	lr, [sp, #12]
 8009870: cd f8 a4 92                  	str.w	r9, [sp, #676]
 8009874: cd f8 9c a2                  	str.w	r10, [sp, #668]
 8009878: cd e9 a2 06                  	strd	r0, r6, [sp, #648]
 800987c: 2f e1                        	b	#606 <$t.24+0x595c>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 800987e: a9 98                        	ldr	r0, [sp, #676]
 8009880: 0d f5 83 66                  	add.w	r6, sp, #1048
;         intrinsics::offset(self, count)
 8009884: 08 f1 06 01                  	add.w	r1, r8, #6
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8009888: c2 1e                        	subs	r2, r0, #3
;             crate::opcode::GATT_INIT => Ok(ReturnParameters::GattInit(to_status(&bytes[3..])?)),
 800988a: 30 46                        	mov	r0, r6
 800988c: 0d f0 9e fd                  	bl	#56124
;         self
 8009890: b1 1c                        	adds	r1, r6, #2
 8009892: 0d f5 a4 60                  	add.w	r0, sp, #1312
 8009896: 16 22                        	movs	r2, #22
 8009898: 9d f8 18 54                  	ldrb.w	r5, [sp, #1048]
 800989c: 9d f8 19 44                  	ldrb.w	r4, [sp, #1049]
 80098a0: 12 f0 3b fd                  	bl	#76406
;             crate::opcode::GATT_INIT => Ok(ReturnParameters::GattInit(to_status(&bytes[3..])?)),
 80098a4: 01 2d                        	cmp	r5, #1
 80098a6: 41 f0 a5 81                  	bne.w	#4938 <$t.24+0x6a72>
 80098aa: 9d f8 57 24                  	ldrb.w	r2, [sp, #1111]
 80098ae: 0d f5 87 6e                  	add.w	lr, sp, #1080
 80098b2: 8d 92                        	str	r2, [sp, #564]
 80098b4: 9d f8 56 24                  	ldrb.w	r2, [sp, #1110]
 80098b8: 8c 92                        	str	r2, [sp, #560]
 80098ba: 9d f8 55 24                  	ldrb.w	r2, [sp, #1109]
 80098be: 8b 92                        	str	r2, [sp, #556]
 80098c0: 9d f8 54 24                  	ldrb.w	r2, [sp, #1108]
 80098c4: 8e 92                        	str	r2, [sp, #568]
 80098c6: 9d f8 53 24                  	ldrb.w	r2, [sp, #1107]
 80098ca: 8a 92                        	str	r2, [sp, #552]
 80098cc: 9d f8 48 24                  	ldrb.w	r2, [sp, #1096]
 80098d0: 01 92                        	str	r2, [sp, #4]
 80098d2: 9d f8 49 24                  	ldrb.w	r2, [sp, #1097]
 80098d6: 00 92                        	str	r2, [sp]
 80098d8: 9d f8 50 24                  	ldrb.w	r2, [sp, #1104]
 80098dc: 1e 92                        	str	r2, [sp, #120]
 80098de: 9d f8 51 24                  	ldrb.w	r2, [sp, #1105]
 80098e2: 73 92                        	str	r2, [sp, #460]
 80098e4: 9d f8 52 24                  	ldrb.w	r2, [sp, #1106]
;         Err(v)
 80098e8: 86 92                        	str	r2, [sp, #536]
 80098ea: dd f8 32 55                  	ldr.w	r5, [sp, #1330]
 80098ee: dd f8 44 14                  	ldr.w	r1, [sp, #1092]
 80098f2: dd f8 26 25                  	ldr.w	r2, [sp, #1318]
 80098f6: ff 95                        	str	r5, [sp, #1020]
 80098f8: fc ad                        	add	r5, sp, #1008
 80098fa: 9e e8 01 50                  	ldm.w	lr, {r0, r12, lr}
 80098fe: dd f8 2a 35                  	ldr.w	r3, [sp, #1322]
 8009902: dd f8 2e 65                  	ldr.w	r6, [sp, #1326]
 8009906: 4c c5                        	stm	r5!, {r2, r3, r6}
;             crate::opcode::GATT_INIT => Ok(ReturnParameters::GattInit(to_status(&bytes[3..])?)),
 8009908: 4f ea 1e 42                  	lsr.w	r2, lr, #16
 800990c: 42 ea 01 42                  	orr.w	r2, r2, r1, lsl #16
 8009910: dd f8 4c 44                  	ldr.w	r4, [sp, #1100]
 8009914: 9a 92                        	str	r2, [sp, #616]
 8009916: 4f ea 1e 22                  	lsr.w	r2, lr, #8
 800991a: 42 ea 01 62                  	orr.w	r2, r2, r1, lsl #24
;         Err(v)
 800991e: 05 92                        	str	r2, [sp, #20]
 8009920: 22 0e                        	lsrs	r2, r4, #24
 8009922: bd f8 4a 84                  	ldrh.w	r8, [sp, #1098]
;             crate::opcode::GATT_INIT => Ok(ReturnParameters::GattInit(to_status(&bytes[3..])?)),
 8009926: 0d 92                        	str	r2, [sp, #52]
 8009928: 0a 0e                        	lsrs	r2, r1, #24
 800992a: 96 92                        	str	r2, [sp, #600]
 800992c: 09 0c                        	lsrs	r1, r1, #16
 800992e: 28 91                        	str	r1, [sp, #160]
 8009930: 01 21                        	movs	r1, #1
;         Err(v)
 8009932: 21 91                        	str	r1, [sp, #132]
 8009934: 21 0c                        	lsrs	r1, r4, #16
 8009936: 0c 91                        	str	r1, [sp, #48]
 8009938: 21 0a                        	lsrs	r1, r4, #8
 800993a: cd f8 08 e0                  	str.w	lr, [sp, #8]
 800993e: 4f ea 10 6e                  	lsr.w	lr, r0, #24
 8009942: 18 91                        	str	r1, [sp, #96]
 8009944: 4f ea 18 21                  	lsr.w	r1, r8, #8
 8009948: cd f8 7c 80                  	str.w	r8, [sp, #124]
 800994c: 4f ea 10 48                  	lsr.w	r8, r0, #16
 8009950: 04 90                        	str	r0, [sp, #16]
 8009952: 00 0a                        	lsrs	r0, r0, #8
 8009954: 08 90                        	str	r0, [sp, #32]
 8009956: 4f ea 1c 60                  	lsr.w	r0, r12, #24
 800995a: 09 90                        	str	r0, [sp, #36]
 800995c: 4f ea 1c 40                  	lsr.w	r0, r12, #16
 8009960: 0a 90                        	str	r0, [sp, #40]
 8009962: 4f ea 1c 20                  	lsr.w	r0, r12, #8
 8009966: 0b 90                        	str	r0, [sp, #44]
 8009968: dd f8 30 b4                  	ldr.w	r11, [sp, #1072]
 800996c: dd f8 34 a4                  	ldr.w	r10, [sp, #1076]
 8009970: 91 94                        	str	r4, [sp, #580]
 8009972: 4f ea 1b 65                  	lsr.w	r5, r11, #24
 8009976: a5 91                        	str	r1, [sp, #660]
 8009978: 00 20                        	movs	r0, #0
 800997a: 4f ea 1b 26                  	lsr.w	r6, r11, #8
 800997e: a6 90                        	str	r0, [sp, #664]
 8009980: 4f ea 1a 63                  	lsr.w	r3, r10, #24
 8009984: 4f ea 1a 44                  	lsr.w	r4, r10, #16
 8009988: 4f ea 1b 49                  	lsr.w	r9, r11, #16
 800998c: cd f8 0c b0                  	str.w	r11, [sp, #12]
 8009990: 4f ea 1a 21                  	lsr.w	r1, r10, #8
 8009994: ab 46                        	mov	r11, r5
 8009996: cd f8 a4 c2                  	str.w	r12, [sp, #676]
 800999a: a3 96                        	str	r6, [sp, #652]
 800999c: cd e9 a1 19                  	strd	r1, r9, [sp, #644]
 80099a0: cd f8 9c a2                  	str.w	r10, [sp, #668]
 80099a4: 9b 93                        	str	r3, [sp, #620]
 80099a6: 9f 94                        	str	r4, [sp, #636]
 80099a8: cd e9 06 e8                  	strd	lr, r8, [sp, #24]
 80099ac: a5 98                        	ldr	r0, [sp, #660]
 80099ae: 94 90                        	str	r0, [sp, #592]
 80099b0: 02 f0 51 bc                  	b.w	#10402 <$t.42+0x9c>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 80099b4: a9 98                        	ldr	r0, [sp, #676]
 80099b6: 0d f5 83 66                  	add.w	r6, sp, #1048
;         intrinsics::offset(self, count)
 80099ba: 08 f1 06 01                  	add.w	r1, r8, #6
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 80099be: c2 1e                        	subs	r2, r0, #3
;                 to_status(&bytes[3..])?,
 80099c0: 30 46                        	mov	r0, r6
 80099c2: 0d f0 03 fd                  	bl	#55814
;         self
 80099c6: b1 1c                        	adds	r1, r6, #2
 80099c8: 0d f5 a4 60                  	add.w	r0, sp, #1312
 80099cc: 16 22                        	movs	r2, #22
 80099ce: 9d f8 18 54                  	ldrb.w	r5, [sp, #1048]
 80099d2: 9d f8 19 44                  	ldrb.w	r4, [sp, #1049]
 80099d6: 12 f0 a0 fc                  	bl	#76096
;                 to_status(&bytes[3..])?,
 80099da: 01 2d                        	cmp	r5, #1
 80099dc: 41 f0 31 81                  	bne.w	#4706 <$t.24+0x6ac0>
 80099e0: 9d f8 57 14                  	ldrb.w	r1, [sp, #1111]
 80099e4: 8d 91                        	str	r1, [sp, #564]
 80099e6: 9d f8 56 14                  	ldrb.w	r1, [sp, #1110]
 80099ea: 8c 91                        	str	r1, [sp, #560]
 80099ec: 9d f8 55 14                  	ldrb.w	r1, [sp, #1109]
 80099f0: 8b 91                        	str	r1, [sp, #556]
 80099f2: 9d f8 54 14                  	ldrb.w	r1, [sp, #1108]
 80099f6: 8e 91                        	str	r1, [sp, #568]
 80099f8: 9d f8 53 14                  	ldrb.w	r1, [sp, #1107]
 80099fc: 8a 91                        	str	r1, [sp, #552]
 80099fe: 9d f8 48 14                  	ldrb.w	r1, [sp, #1096]
 8009a02: 01 91                        	str	r1, [sp, #4]
 8009a04: 9d f8 49 14                  	ldrb.w	r1, [sp, #1097]
 8009a08: 00 91                        	str	r1, [sp]
 8009a0a: 9d f8 50 14                  	ldrb.w	r1, [sp, #1104]
 8009a0e: dd f8 40 84                  	ldr.w	r8, [sp, #1088]
 8009a12: 1e 91                        	str	r1, [sp, #120]
 8009a14: 9d f8 51 14                  	ldrb.w	r1, [sp, #1105]
 8009a18: 73 91                        	str	r1, [sp, #460]
 8009a1a: 9d f8 52 14                  	ldrb.w	r1, [sp, #1106]
 8009a1e: dd f8 44 04                  	ldr.w	r0, [sp, #1092]
 8009a22: 86 91                        	str	r1, [sp, #536]
 8009a24: dd f8 32 65                  	ldr.w	r6, [sp, #1330]
 8009a28: dd f8 26 15                  	ldr.w	r1, [sp, #1318]
 8009a2c: dd f8 2a 25                  	ldr.w	r2, [sp, #1322]
 8009a30: dd f8 2e 35                  	ldr.w	r3, [sp, #1326]
 8009a34: ff 96                        	str	r6, [sp, #1020]
 8009a36: fe 93                        	str	r3, [sp, #1016]
 8009a38: fd 92                        	str	r2, [sp, #1012]
 8009a3a: fc 91                        	str	r1, [sp, #1008]
 8009a3c: 4f ea 18 41                  	lsr.w	r1, r8, #16
 8009a40: dd f8 4c 54                  	ldr.w	r5, [sp, #1100]
 8009a44: 41 ea 00 41                  	orr.w	r1, r1, r0, lsl #16
 8009a48: 9a 91                        	str	r1, [sp, #616]
 8009a4a: 4f ea 18 21                  	lsr.w	r1, r8, #8
 8009a4e: dd f8 30 e4                  	ldr.w	lr, [sp, #1072]
 8009a52: 41 ea 00 61                  	orr.w	r1, r1, r0, lsl #24
 8009a56: dd f8 3c 94                  	ldr.w	r9, [sp, #1084]
 8009a5a: 05 91                        	str	r1, [sp, #20]
 8009a5c: 29 0e                        	lsrs	r1, r5, #24
 8009a5e: 0d 91                        	str	r1, [sp, #52]
 8009a60: 01 0e                        	lsrs	r1, r0, #24
 8009a62: 96 91                        	str	r1, [sp, #600]
 8009a64: 4f ea 1e 21                  	lsr.w	r1, lr, #8
 8009a68: dd f8 34 a4                  	ldr.w	r10, [sp, #1076]
 8009a6c: 00 0c                        	lsrs	r0, r0, #16
 8009a6e: a3 91                        	str	r1, [sp, #652]
 8009a70: 4f ea 19 61                  	lsr.w	r1, r9, #24
 8009a74: 09 91                        	str	r1, [sp, #36]
 8009a76: 4f ea 19 41                  	lsr.w	r1, r9, #16
 8009a7a: 0a 91                        	str	r1, [sp, #40]
 8009a7c: 4f ea 19 21                  	lsr.w	r1, r9, #8
 8009a80: 0b 91                        	str	r1, [sp, #44]
 8009a82: 4f ea 1a 61                  	lsr.w	r1, r10, #24
 8009a86: 9b 91                        	str	r1, [sp, #620]
 8009a88: 4f ea 1a 41                  	lsr.w	r1, r10, #16
 8009a8c: 9f 91                        	str	r1, [sp, #636]
 8009a8e: 4f ea 1a 21                  	lsr.w	r1, r10, #8
 8009a92: a1 91                        	str	r1, [sp, #644]
 8009a94: 4f ea 1e 6b                  	lsr.w	r11, lr, #24
 8009a98: bd f8 4a c4                  	ldrh.w	r12, [sp, #1098]
 8009a9c: 28 90                        	str	r0, [sp, #160]
 8009a9e: 01 20                        	movs	r0, #1
 8009aa0: dd f8 38 44                  	ldr.w	r4, [sp, #1080]
 8009aa4: 21 90                        	str	r0, [sp, #132]
 8009aa6: 28 0c                        	lsrs	r0, r5, #16
 8009aa8: 0c 90                        	str	r0, [sp, #48]
 8009aaa: 28 0a                        	lsrs	r0, r5, #8
 8009aac: 18 90                        	str	r0, [sp, #96]
 8009aae: 4f ea 1c 20                  	lsr.w	r0, r12, #8
 8009ab2: 94 90                        	str	r0, [sp, #592]
 8009ab4: 20 0e                        	lsrs	r0, r4, #24
 8009ab6: 06 90                        	str	r0, [sp, #24]
 8009ab8: 20 0c                        	lsrs	r0, r4, #16
 8009aba: 07 90                        	str	r0, [sp, #28]
 8009abc: 20 0a                        	lsrs	r0, r4, #8
 8009abe: 08 90                        	str	r0, [sp, #32]
 8009ac0: 4f ea 1e 40                  	lsr.w	r0, lr, #16
 8009ac4: cd f8 08 80                  	str.w	r8, [sp, #8]
 8009ac8: 91 95                        	str	r5, [sp, #580]
 8009aca: cd f8 7c c0                  	str.w	r12, [sp, #124]
 8009ace: 04 94                        	str	r4, [sp, #16]
 8009ad0: cd f8 0c e0                  	str.w	lr, [sp, #12]
 8009ad4: cd f8 a4 92                  	str.w	r9, [sp, #676]
 8009ad8: cd f8 9c a2                  	str.w	r10, [sp, #668]
 8009adc: a2 90                        	str	r0, [sp, #648]
 8009ade: 00 21                        	movs	r1, #0
 8009ae0: a6 91                        	str	r1, [sp, #664]
 8009ae2: 02 f0 b8 bb                  	b.w	#10096 <$t.42+0x9c>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8009ae6: a9 98                        	ldr	r0, [sp, #676]
 8009ae8: 0d f5 83 66                  	add.w	r6, sp, #1048
;         intrinsics::offset(self, count)
 8009aec: 08 f1 06 01                  	add.w	r1, r8, #6
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8009af0: c2 1e                        	subs	r2, r0, #3
;                 ReturnParameters::GattDeleteIncludedService(to_status(&bytes[3..])?),
 8009af2: 30 46                        	mov	r0, r6
 8009af4: 0d f0 6a fc                  	bl	#55508
;         self
 8009af8: b1 1c                        	adds	r1, r6, #2
 8009afa: 0d f5 a4 60                  	add.w	r0, sp, #1312
 8009afe: 16 22                        	movs	r2, #22
 8009b00: 9d f8 18 54                  	ldrb.w	r5, [sp, #1048]
 8009b04: 9d f8 19 44                  	ldrb.w	r4, [sp, #1049]
 8009b08: 12 f0 07 fc                  	bl	#75790
;                 ReturnParameters::GattDeleteIncludedService(to_status(&bytes[3..])?),
 8009b0c: 01 2d                        	cmp	r5, #1
 8009b0e: 41 f0 df 80                  	bne.w	#4542 <$t.24+0x6b4e>
 8009b12: 9d f8 57 24                  	ldrb.w	r2, [sp, #1111]
 8009b16: 8d 92                        	str	r2, [sp, #564]
 8009b18: 9d f8 56 24                  	ldrb.w	r2, [sp, #1110]
 8009b1c: 8c 92                        	str	r2, [sp, #560]
 8009b1e: 9d f8 55 24                  	ldrb.w	r2, [sp, #1109]
 8009b22: 8b 92                        	str	r2, [sp, #556]
 8009b24: 9d f8 54 24                  	ldrb.w	r2, [sp, #1108]
 8009b28: 8e 92                        	str	r2, [sp, #568]
 8009b2a: 9d f8 53 24                  	ldrb.w	r2, [sp, #1107]
 8009b2e: 8a 92                        	str	r2, [sp, #552]
 8009b30: 9d f8 48 24                  	ldrb.w	r2, [sp, #1096]
 8009b34: 01 92                        	str	r2, [sp, #4]
 8009b36: 9d f8 49 24                  	ldrb.w	r2, [sp, #1097]
 8009b3a: 00 92                        	str	r2, [sp]
 8009b3c: 9d f8 50 24                  	ldrb.w	r2, [sp, #1104]
 8009b40: dd f8 40 84                  	ldr.w	r8, [sp, #1088]
 8009b44: 1e 92                        	str	r2, [sp, #120]
 8009b46: 9d f8 51 24                  	ldrb.w	r2, [sp, #1105]
 8009b4a: 73 92                        	str	r2, [sp, #460]
 8009b4c: 9d f8 52 24                  	ldrb.w	r2, [sp, #1106]
 8009b50: dd f8 44 14                  	ldr.w	r1, [sp, #1092]
 8009b54: 86 92                        	str	r2, [sp, #536]
 8009b56: dd f8 32 55                  	ldr.w	r5, [sp, #1330]
 8009b5a: dd f8 26 25                  	ldr.w	r2, [sp, #1318]
 8009b5e: dd f8 2a 35                  	ldr.w	r3, [sp, #1322]
 8009b62: dd f8 2e 65                  	ldr.w	r6, [sp, #1326]
 8009b66: ff 95                        	str	r5, [sp, #1020]
 8009b68: fe 96                        	str	r6, [sp, #1016]
 8009b6a: fd 93                        	str	r3, [sp, #1012]
 8009b6c: fc 92                        	str	r2, [sp, #1008]
 8009b6e: 4f ea 18 42                  	lsr.w	r2, r8, #16
 8009b72: dd f8 4c 44                  	ldr.w	r4, [sp, #1100]
 8009b76: 42 ea 01 42                  	orr.w	r2, r2, r1, lsl #16
 8009b7a: 9a 92                        	str	r2, [sp, #616]
 8009b7c: 4f ea 18 22                  	lsr.w	r2, r8, #8
 8009b80: 42 ea 01 62                  	orr.w	r2, r2, r1, lsl #24
 8009b84: a5 92                        	str	r2, [sp, #660]
 8009b86: 22 0e                        	lsrs	r2, r4, #24
 8009b88: bd f8 4a c4                  	ldrh.w	r12, [sp, #1098]
 8009b8c: 0d 92                        	str	r2, [sp, #52]
 8009b8e: 0a 0e                        	lsrs	r2, r1, #24
 8009b90: 96 92                        	str	r2, [sp, #600]
 8009b92: 09 0c                        	lsrs	r1, r1, #16
 8009b94: 28 91                        	str	r1, [sp, #160]
 8009b96: 01 21                        	movs	r1, #1
 8009b98: dd f8 38 94                  	ldr.w	r9, [sp, #1080]
 8009b9c: 21 91                        	str	r1, [sp, #132]
 8009b9e: 21 0c                        	lsrs	r1, r4, #16
 8009ba0: 0c 91                        	str	r1, [sp, #48]
 8009ba2: 21 0a                        	lsrs	r1, r4, #8
 8009ba4: dd f8 3c 04                  	ldr.w	r0, [sp, #1084]
 8009ba8: 18 91                        	str	r1, [sp, #96]
 8009baa: 4f ea 1c 21                  	lsr.w	r1, r12, #8
 8009bae: 9d 91                        	str	r1, [sp, #628]
 8009bb0: 4f ea 19 61                  	lsr.w	r1, r9, #24
 8009bb4: 99 91                        	str	r1, [sp, #612]
 8009bb6: 4f ea 19 41                  	lsr.w	r1, r9, #16
 8009bba: cd f8 08 80                  	str.w	r8, [sp, #8]
 8009bbe: 4f ea 10 68                  	lsr.w	r8, r0, #24
 8009bc2: 9c 91                        	str	r1, [sp, #624]
 8009bc4: 01 0c                        	lsrs	r1, r0, #16
 8009bc6: a9 90                        	str	r0, [sp, #676]
 8009bc8: 00 0a                        	lsrs	r0, r0, #8
 8009bca: 0b 90                        	str	r0, [sp, #44]
 8009bcc: 00 20                        	movs	r0, #0
 8009bce: dd f8 30 e4                  	ldr.w	lr, [sp, #1072]
 8009bd2: dd f8 34 a4                  	ldr.w	r10, [sp, #1076]
 8009bd6: a6 90                        	str	r0, [sp, #664]
 8009bd8: 91 94                        	str	r4, [sp, #580]
 8009bda: 4f ea 1e 26                  	lsr.w	r6, lr, #8
 8009bde: 99 98                        	ldr	r0, [sp, #612]
 8009be0: 4f ea 1a 63                  	lsr.w	r3, r10, #24
 8009be4: cd f8 7c c0                  	str.w	r12, [sp, #124]
 8009be8: 4f ea 1a 44                  	lsr.w	r4, r10, #16
 8009bec: cd f8 10 90                  	str.w	r9, [sp, #16]
 8009bf0: 4f ea 19 29                  	lsr.w	r9, r9, #8
 8009bf4: 0a 91                        	str	r1, [sp, #40]
 8009bf6: 4f ea 1e 4c                  	lsr.w	r12, lr, #16
 8009bfa: 4f ea 1a 21                  	lsr.w	r1, r10, #8
 8009bfe: 06 90                        	str	r0, [sp, #24]
 8009c00: 9c 98                        	ldr	r0, [sp, #624]
 8009c02: 4f ea 1e 6b                  	lsr.w	r11, lr, #24
 8009c06: cd f8 0c e0                  	str.w	lr, [sp, #12]
 8009c0a: a3 96                        	str	r6, [sp, #652]
 8009c0c: cd e9 a1 1c                  	strd	r1, r12, [sp, #644]
 8009c10: cd f8 9c a2                  	str.w	r10, [sp, #668]
 8009c14: 9b 93                        	str	r3, [sp, #620]
 8009c16: 9f 94                        	str	r4, [sp, #636]
 8009c18: cd e9 07 09                  	strd	r0, r9, [sp, #28]
 8009c1c: cd f8 24 80                  	str.w	r8, [sp, #36]
 8009c20: cd e3                        	b	#1946 <$t.24+0x623c>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8009c22: a9 98                        	ldr	r0, [sp, #676]
 8009c24: 0d f5 83 66                  	add.w	r6, sp, #1048
;         intrinsics::offset(self, count)
 8009c28: 08 f1 06 01                  	add.w	r1, r8, #6
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8009c2c: c2 1e                        	subs	r2, r0, #3
;                 ReturnParameters::GapSetUndirectedConnectable(to_status(&bytes[3..])?),
 8009c2e: 30 46                        	mov	r0, r6
 8009c30: 0d f0 cc fb                  	bl	#55192
;         self
 8009c34: b1 1c                        	adds	r1, r6, #2
 8009c36: 0d f5 a4 60                  	add.w	r0, sp, #1312
 8009c3a: 16 22                        	movs	r2, #22
 8009c3c: 9d f8 18 54                  	ldrb.w	r5, [sp, #1048]
 8009c40: 9d f8 19 44                  	ldrb.w	r4, [sp, #1049]
 8009c44: 12 f0 69 fb                  	bl	#75474
;                 ReturnParameters::GapSetUndirectedConnectable(to_status(&bytes[3..])?),
 8009c48: 01 2d                        	cmp	r5, #1
 8009c4a: 41 f0 49 80                  	bne.w	#4242 <$t.24+0x6b5e>
 8009c4e: 9d f8 57 24                  	ldrb.w	r2, [sp, #1111]
 8009c52: 8d 92                        	str	r2, [sp, #564]
 8009c54: 9d f8 56 24                  	ldrb.w	r2, [sp, #1110]
 8009c58: 8c 92                        	str	r2, [sp, #560]
 8009c5a: 9d f8 55 24                  	ldrb.w	r2, [sp, #1109]
 8009c5e: 8b 92                        	str	r2, [sp, #556]
 8009c60: 9d f8 54 24                  	ldrb.w	r2, [sp, #1108]
 8009c64: 8e 92                        	str	r2, [sp, #568]
 8009c66: 9d f8 53 24                  	ldrb.w	r2, [sp, #1107]
 8009c6a: 8a 92                        	str	r2, [sp, #552]
 8009c6c: 9d f8 48 24                  	ldrb.w	r2, [sp, #1096]
 8009c70: 01 92                        	str	r2, [sp, #4]
 8009c72: 9d f8 49 24                  	ldrb.w	r2, [sp, #1097]
 8009c76: 00 92                        	str	r2, [sp]
 8009c78: 9d f8 50 24                  	ldrb.w	r2, [sp, #1104]
 8009c7c: dd f8 40 94                  	ldr.w	r9, [sp, #1088]
 8009c80: 1e 92                        	str	r2, [sp, #120]
 8009c82: 9d f8 51 24                  	ldrb.w	r2, [sp, #1105]
 8009c86: 73 92                        	str	r2, [sp, #460]
 8009c88: 9d f8 52 24                  	ldrb.w	r2, [sp, #1106]
 8009c8c: dd f8 44 14                  	ldr.w	r1, [sp, #1092]
 8009c90: 86 92                        	str	r2, [sp, #536]
 8009c92: dd f8 32 55                  	ldr.w	r5, [sp, #1330]
 8009c96: dd f8 26 25                  	ldr.w	r2, [sp, #1318]
 8009c9a: dd f8 2a 35                  	ldr.w	r3, [sp, #1322]
 8009c9e: dd f8 2e 65                  	ldr.w	r6, [sp, #1326]
 8009ca2: ff 95                        	str	r5, [sp, #1020]
 8009ca4: fe 96                        	str	r6, [sp, #1016]
 8009ca6: fd 93                        	str	r3, [sp, #1012]
 8009ca8: fc 92                        	str	r2, [sp, #1008]
 8009caa: 4f ea 19 42                  	lsr.w	r2, r9, #16
 8009cae: dd f8 4c 44                  	ldr.w	r4, [sp, #1100]
 8009cb2: 42 ea 01 42                  	orr.w	r2, r2, r1, lsl #16
 8009cb6: 9a 92                        	str	r2, [sp, #616]
 8009cb8: 4f ea 19 22                  	lsr.w	r2, r9, #8
 8009cbc: 42 ea 01 62                  	orr.w	r2, r2, r1, lsl #24
 8009cc0: 05 92                        	str	r2, [sp, #20]
 8009cc2: 22 0e                        	lsrs	r2, r4, #24
 8009cc4: bd f8 4a e4                  	ldrh.w	lr, [sp, #1098]
 8009cc8: 0d 92                        	str	r2, [sp, #52]
 8009cca: 0a 0e                        	lsrs	r2, r1, #24
 8009ccc: 96 92                        	str	r2, [sp, #600]
 8009cce: 09 0c                        	lsrs	r1, r1, #16
 8009cd0: 28 91                        	str	r1, [sp, #160]
 8009cd2: 01 21                        	movs	r1, #1
 8009cd4: dd f8 38 04                  	ldr.w	r0, [sp, #1080]
 8009cd8: 21 91                        	str	r1, [sp, #132]
 8009cda: 21 0c                        	lsrs	r1, r4, #16
 8009cdc: 0c 91                        	str	r1, [sp, #48]
 8009cde: 21 0a                        	lsrs	r1, r4, #8
 8009ce0: dd f8 3c a4                  	ldr.w	r10, [sp, #1084]
 8009ce4: 18 91                        	str	r1, [sp, #96]
 8009ce6: 4f ea 1e 21                  	lsr.w	r1, lr, #8
 8009cea: 94 91                        	str	r1, [sp, #592]
 8009cec: 01 0e                        	lsrs	r1, r0, #24
 8009cee: 06 91                        	str	r1, [sp, #24]
 8009cf0: 01 0c                        	lsrs	r1, r0, #16
 8009cf2: 04 90                        	str	r0, [sp, #16]
 8009cf4: 00 0a                        	lsrs	r0, r0, #8
 8009cf6: dd f8 34 c4                  	ldr.w	r12, [sp, #1076]
 8009cfa: 08 90                        	str	r0, [sp, #32]
 8009cfc: 4f ea 1a 60                  	lsr.w	r0, r10, #24
 8009d00: 09 90                        	str	r0, [sp, #36]
 8009d02: 4f ea 1a 40                  	lsr.w	r0, r10, #16
 8009d06: 0a 90                        	str	r0, [sp, #40]
 8009d08: 4f ea 1a 20                  	lsr.w	r0, r10, #8
 8009d0c: 0b 90                        	str	r0, [sp, #44]
 8009d0e: 4f ea 1c 60                  	lsr.w	r0, r12, #24
 8009d12: 9b 90                        	str	r0, [sp, #620]
 8009d14: 4f ea 1c 40                  	lsr.w	r0, r12, #16
 8009d18: 9f 90                        	str	r0, [sp, #636]
 8009d1a: 4f ea 1c 23                  	lsr.w	r3, r12, #8
 8009d1e: dd f8 30 84                  	ldr.w	r8, [sp, #1072]
 8009d22: 07 91                        	str	r1, [sp, #28]
 8009d24: cd f8 08 90                  	str.w	r9, [sp, #8]
 8009d28: 4f ea 18 41                  	lsr.w	r1, r8, #16
 8009d2c: 4f ea 18 26                  	lsr.w	r6, r8, #8
 8009d30: 00 20                        	movs	r0, #0
 8009d32: 91 94                        	str	r4, [sp, #580]
 8009d34: a6 90                        	str	r0, [sp, #664]
 8009d36: 4f ea 18 6b                  	lsr.w	r11, r8, #24
 8009d3a: cd f8 7c e0                  	str.w	lr, [sp, #124]
 8009d3e: cd f8 0c 80                  	str.w	r8, [sp, #12]
 8009d42: cd f8 a4 a2                  	str.w	r10, [sp, #676]
 8009d46: a3 96                        	str	r6, [sp, #652]
 8009d48: cd e9 a1 31                  	strd	r3, r1, [sp, #644]
 8009d4c: cd f8 9c c2                  	str.w	r12, [sp, #668]
 8009d50: 10 e1                        	b	#544 <$t.24+0x5df2>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8009d52: a9 98                        	ldr	r0, [sp, #676]
 8009d54: 03 38                        	subs	r0, #3
;     require_len!(bytes, 7);
 8009d56: 07 28                        	cmp	r0, #7
 8009d58: 40 f0 e3 87                  	bne.w	#4038 <$t.24+0x6ba0>
;         intrinsics::offset(self, count)
 8009d5c: 08 f1 06 01                  	add.w	r1, r8, #6
 8009d60: 0d f5 83 60                  	add.w	r0, sp, #1048
;         status: to_status(bytes)?,
 8009d64: 07 22                        	movs	r2, #7
 8009d66: 0d f0 31 fb                  	bl	#54882
;         self
 8009d6a: 9d f8 18 04                  	ldrb.w	r0, [sp, #1048]
;         status: to_status(bytes)?,
 8009d6e: 01 28                        	cmp	r0, #1
 8009d70: 41 f0 4c 83                  	bne.w	#5784 <$t.28+0x12>
 8009d74: 9d f8 53 34                  	ldrb.w	r3, [sp, #1107]
 8009d78: 8a 93                        	str	r3, [sp, #552]
 8009d7a: 9d f8 52 34                  	ldrb.w	r3, [sp, #1106]
 8009d7e: dd f8 34 04                  	ldr.w	r0, [sp, #1076]
 8009d82: 86 93                        	str	r3, [sp, #536]
 8009d84: 9d f8 51 34                  	ldrb.w	r3, [sp, #1105]
 8009d88: a7 90                        	str	r0, [sp, #668]
 8009d8a: dd f8 30 04                  	ldr.w	r0, [sp, #1072]
 8009d8e: dd f8 20 14                  	ldr.w	r1, [sp, #1056]
 8009d92: 73 93                        	str	r3, [sp, #460]
 8009d94: 9d f8 50 34                  	ldrb.w	r3, [sp, #1104]
 8009d98: 9d f8 41 54                  	ldrb.w	r5, [sp, #1089]
;         self
 8009d9c: 0c 0c                        	lsrs	r4, r1, #16
 8009d9e: 03 90                        	str	r0, [sp, #12]
 8009da0: dd f8 24 04                  	ldr.w	r0, [sp, #1060]
 8009da4: 1e 93                        	str	r3, [sp, #120]
 8009da6: dd f8 4c 34                  	ldr.w	r3, [sp, #1100]
 8009daa: bd f8 4a 64                  	ldrh.w	r6, [sp, #1098]
 8009dae: 44 ea 00 48                  	orr.w	r8, r4, r0, lsl #16
 8009db2: 05 95                        	str	r5, [sp, #20]
 8009db4: 9d f8 40 54                  	ldrb.w	r5, [sp, #1088]
 8009db8: dd f8 54 24                  	ldr.w	r2, [sp, #1108]
;         status: to_status(bytes)?,
 8009dbc: 34 0a                        	lsrs	r4, r6, #8
 8009dbe: 91 93                        	str	r3, [sp, #580]
 8009dc0: 9d f8 49 34                  	ldrb.w	r3, [sp, #1097]
 8009dc4: 02 95                        	str	r5, [sp, #8]
 8009dc6: dd f8 3c 54                  	ldr.w	r5, [sp, #1084]
 8009dca: 00 93                        	str	r3, [sp]
 8009dcc: 9d f8 48 34                  	ldrb.w	r3, [sp, #1096]
 8009dd0: a9 95                        	str	r5, [sp, #676]
 8009dd2: dd f8 38 54                  	ldr.w	r5, [sp, #1080]
 8009dd6: 01 93                        	str	r3, [sp, #4]
 8009dd8: 04 95                        	str	r5, [sp, #16]
 8009dda: 4f f0 7f 45                  	mov.w	r5, #4278190080
 8009dde: dd f8 44 34                  	ldr.w	r3, [sp, #1092]
;         self
 8009de2: 05 ea 01 45                  	and.w	r5, r5, r1, lsl #16
 8009de6: bd f8 42 94                  	ldrh.w	r9, [sp, #1090]
 8009dea: dd f8 2c c4                  	ldr.w	r12, [sp, #1068]
 8009dee: dd f8 28 e4                  	ldr.w	lr, [sp, #1064]
;         Err(v)
 8009df2: 94 94                        	str	r4, [sp, #592]
 8009df4: 14 0e                        	lsrs	r4, r2, #24
 8009df6: 8d 94                        	str	r4, [sp, #564]
 8009df8: 14 0c                        	lsrs	r4, r2, #16
 8009dfa: 8e 92                        	str	r2, [sp, #568]
 8009dfc: 12 0a                        	lsrs	r2, r2, #8
 8009dfe: 1f 96                        	str	r6, [sp, #124]
 8009e00: 8c 94                        	str	r4, [sp, #560]
;         status: to_status(bytes)?,
 8009e02: 8b 92                        	str	r2, [sp, #556]
 8009e04: 00 f0 97 bf                  	b.w	#3886 <$t.24+0x6bb4>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8009e08: a9 98                        	ldr	r0, [sp, #676]
 8009e0a: 0d f5 83 66                  	add.w	r6, sp, #1048
;         intrinsics::offset(self, count)
 8009e0e: 08 f1 06 01                  	add.w	r1, r8, #6
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8009e12: c2 1e                        	subs	r2, r0, #3
;                 Ok(ReturnParameters::GapAllowRebond(to_status(&bytes[3..])?))
 8009e14: 30 46                        	mov	r0, r6
 8009e16: 0d f0 d9 fa                  	bl	#54706
;         self
 8009e1a: b1 1c                        	adds	r1, r6, #2
 8009e1c: 0d f5 a4 60                  	add.w	r0, sp, #1312
 8009e20: 16 22                        	movs	r2, #22
 8009e22: 9d f8 18 54                  	ldrb.w	r5, [sp, #1048]
 8009e26: 9d f8 19 44                  	ldrb.w	r4, [sp, #1049]
 8009e2a: 12 f0 76 fa                  	bl	#74988
;                 Ok(ReturnParameters::GapAllowRebond(to_status(&bytes[3..])?))
 8009e2e: 01 2d                        	cmp	r5, #1
 8009e30: 1e d0                        	beq	#60 <$t.24+0x5cee>
 8009e32: a7 f1 48 02                  	sub.w	r2, r7, #72
 8009e36: 37 f8 3c 3c                  	ldrh	r3, [r7, #-60]
 8009e3a: 1b 26                        	movs	r6, #27
 8009e3c: 8d f8 f1 43                  	strb.w	r4, [sp, #1009]
 8009e40: 00 f0 0c bd                  	b.w	#2584 <$t.24+0x66da>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8009e44: a9 98                        	ldr	r0, [sp, #676]
 8009e46: 0d f5 83 66                  	add.w	r6, sp, #1048
;         intrinsics::offset(self, count)
 8009e4a: 08 f1 06 01                  	add.w	r1, r8, #6
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8009e4e: c2 1e                        	subs	r2, r0, #3
;                 ReturnParameters::GapClearSecurityDatabase(to_status(&bytes[3..])?),
 8009e50: 30 46                        	mov	r0, r6
 8009e52: 0d f0 bb fa                  	bl	#54646
;         self
 8009e56: b1 1c                        	adds	r1, r6, #2
 8009e58: 0d f5 a4 60                  	add.w	r0, sp, #1312
 8009e5c: 16 22                        	movs	r2, #22
 8009e5e: 9d f8 18 54                  	ldrb.w	r5, [sp, #1048]
 8009e62: 9d f8 19 44                  	ldrb.w	r4, [sp, #1049]
 8009e66: 12 f0 58 fa                  	bl	#74928
;                 ReturnParameters::GapClearSecurityDatabase(to_status(&bytes[3..])?),
 8009e6a: 01 2d                        	cmp	r5, #1
 8009e6c: 40 f0 73 87                  	bne.w	#3814 <$t.24+0x6bd4>
 8009e70: 9d f8 57 24                  	ldrb.w	r2, [sp, #1111]
 8009e74: 8d 92                        	str	r2, [sp, #564]
 8009e76: 9d f8 56 24                  	ldrb.w	r2, [sp, #1110]
 8009e7a: 8c 92                        	str	r2, [sp, #560]
 8009e7c: 9d f8 55 24                  	ldrb.w	r2, [sp, #1109]
 8009e80: 8b 92                        	str	r2, [sp, #556]
 8009e82: 9d f8 54 24                  	ldrb.w	r2, [sp, #1108]
 8009e86: 8e 92                        	str	r2, [sp, #568]
 8009e88: 9d f8 53 24                  	ldrb.w	r2, [sp, #1107]
 8009e8c: 8a 92                        	str	r2, [sp, #552]
 8009e8e: 9d f8 48 24                  	ldrb.w	r2, [sp, #1096]
 8009e92: 01 92                        	str	r2, [sp, #4]
 8009e94: 9d f8 49 24                  	ldrb.w	r2, [sp, #1097]
 8009e98: 00 92                        	str	r2, [sp]
 8009e9a: 9d f8 50 24                  	ldrb.w	r2, [sp, #1104]
 8009e9e: dd f8 40 e4                  	ldr.w	lr, [sp, #1088]
 8009ea2: 1e 92                        	str	r2, [sp, #120]
 8009ea4: 9d f8 51 24                  	ldrb.w	r2, [sp, #1105]
 8009ea8: 73 92                        	str	r2, [sp, #460]
 8009eaa: 9d f8 52 24                  	ldrb.w	r2, [sp, #1106]
 8009eae: dd f8 44 14                  	ldr.w	r1, [sp, #1092]
 8009eb2: 86 92                        	str	r2, [sp, #536]
 8009eb4: dd f8 32 55                  	ldr.w	r5, [sp, #1330]
 8009eb8: dd f8 26 25                  	ldr.w	r2, [sp, #1318]
 8009ebc: dd f8 2a 35                  	ldr.w	r3, [sp, #1322]
 8009ec0: dd f8 2e 65                  	ldr.w	r6, [sp, #1326]
 8009ec4: ff 95                        	str	r5, [sp, #1020]
 8009ec6: fe 96                        	str	r6, [sp, #1016]
 8009ec8: fd 93                        	str	r3, [sp, #1012]
 8009eca: fc 92                        	str	r2, [sp, #1008]
 8009ecc: 4f ea 1e 42                  	lsr.w	r2, lr, #16
 8009ed0: dd f8 4c 44                  	ldr.w	r4, [sp, #1100]
 8009ed4: 42 ea 01 42                  	orr.w	r2, r2, r1, lsl #16
 8009ed8: 9a 92                        	str	r2, [sp, #616]
 8009eda: 4f ea 1e 22                  	lsr.w	r2, lr, #8
 8009ede: 42 ea 01 62                  	orr.w	r2, r2, r1, lsl #24
 8009ee2: 05 92                        	str	r2, [sp, #20]
 8009ee4: 22 0e                        	lsrs	r2, r4, #24
 8009ee6: dd f8 38 04                  	ldr.w	r0, [sp, #1080]
 8009eea: 0d 92                        	str	r2, [sp, #52]
 8009eec: 0a 0e                        	lsrs	r2, r1, #24
 8009eee: 96 92                        	str	r2, [sp, #600]
 8009ef0: 09 0c                        	lsrs	r1, r1, #16
 8009ef2: 28 91                        	str	r1, [sp, #160]
 8009ef4: 01 21                        	movs	r1, #1
 8009ef6: 21 91                        	str	r1, [sp, #132]
 8009ef8: 21 0c                        	lsrs	r1, r4, #16
 8009efa: dd f8 3c a4                  	ldr.w	r10, [sp, #1084]
 8009efe: 0c 91                        	str	r1, [sp, #48]
 8009f00: 21 0a                        	lsrs	r1, r4, #8
 8009f02: 18 91                        	str	r1, [sp, #96]
 8009f04: 01 0e                        	lsrs	r1, r0, #24
 8009f06: 06 91                        	str	r1, [sp, #24]
 8009f08: 01 0c                        	lsrs	r1, r0, #16
 8009f0a: 04 90                        	str	r0, [sp, #16]
 8009f0c: 00 0a                        	lsrs	r0, r0, #8
 8009f0e: 08 90                        	str	r0, [sp, #32]
 8009f10: 4f ea 1a 60                  	lsr.w	r0, r10, #24
 8009f14: 09 90                        	str	r0, [sp, #36]
 8009f16: 4f ea 1a 40                  	lsr.w	r0, r10, #16
 8009f1a: 0a 90                        	str	r0, [sp, #40]
 8009f1c: 4f ea 1a 20                  	lsr.w	r0, r10, #8
 8009f20: 0b 90                        	str	r0, [sp, #44]
 8009f22: dd f8 30 94                  	ldr.w	r9, [sp, #1072]
 8009f26: dd f8 34 84                  	ldr.w	r8, [sp, #1076]
 8009f2a: bd f8 4a c4                  	ldrh.w	r12, [sp, #1098]
 8009f2e: cd f8 08 e0                  	str.w	lr, [sp, #8]
 8009f32: 4f ea 19 26                  	lsr.w	r6, r9, #8
 8009f36: 00 20                        	movs	r0, #0
 8009f38: 91 94                        	str	r4, [sp, #580]
 8009f3a: a6 90                        	str	r0, [sp, #664]
 8009f3c: 4f ea 18 44                  	lsr.w	r4, r8, #16
 8009f40: cd f8 7c c0                  	str.w	r12, [sp, #124]
 8009f44: 4f ea 1c 2c                  	lsr.w	r12, r12, #8
 8009f48: 07 91                        	str	r1, [sp, #28]
 8009f4a: 4f ea 18 61                  	lsr.w	r1, r8, #24
 8009f4e: 4f ea 19 4e                  	lsr.w	lr, r9, #16
 8009f52: 4f ea 18 23                  	lsr.w	r3, r8, #8
 8009f56: 4f ea 19 6b                  	lsr.w	r11, r9, #24
 8009f5a: cd f8 0c 90                  	str.w	r9, [sp, #12]
 8009f5e: cd f8 a4 a2                  	str.w	r10, [sp, #676]
 8009f62: a3 96                        	str	r6, [sp, #652]
 8009f64: cd e9 a1 3e                  	strd	r3, lr, [sp, #644]
 8009f68: cd f8 9c 82                  	str.w	r8, [sp, #668]
 8009f6c: 9b 91                        	str	r1, [sp, #620]
 8009f6e: 9f 94                        	str	r4, [sp, #636]
 8009f70: cd f8 50 c2                  	str.w	r12, [sp, #592]
 8009f74: 82 e1                        	b	#772 <$t.24+0x60fa>
;                     Err(hci::event::Error::UnknownOpcode(
 8009f76: 00 f5 96 70                  	add.w	r0, r0, #300
 8009f7a: ad f8 f2 03                  	strh.w	r0, [sp, #1010]
 8009f7e: 07 20                        	movs	r0, #7
 8009f80: 8d f8 f0 03                  	strb.w	r0, [sp, #1008]
 8009f84: 01 20                        	movs	r0, #1
 8009f86: 21 90                        	str	r0, [sp, #132]
 8009f88: 00 20                        	movs	r0, #0
 8009f8a: a6 90                        	str	r0, [sp, #664]
 8009f8c: 00 20                        	movs	r0, #0
 8009f8e: 05 90                        	str	r0, [sp, #20]
 8009f90: 00 20                        	movs	r0, #0
 8009f92: 9a 90                        	str	r0, [sp, #616]
 8009f94: 00 20                        	movs	r0, #0
 8009f96: 28 90                        	str	r0, [sp, #160]
 8009f98: 00 20                        	movs	r0, #0
 8009f9a: 96 90                        	str	r0, [sp, #600]
 8009f9c: 02 f0 5b b9                  	b.w	#8886 <$t.42+0x9c>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8009fa0: a9 98                        	ldr	r0, [sp, #676]
 8009fa2: 03 38                        	subs	r0, #3
;     require_len!(bytes, 3);
 8009fa4: 03 28                        	cmp	r0, #3
 8009fa6: 54 d1                        	bne	#168 <$t.24+0x5ed0>
;         intrinsics::offset(self, count)
 8009fa8: 08 f1 06 01                  	add.w	r1, r8, #6
 8009fac: 0d f5 83 60                  	add.w	r0, sp, #1048
;         status: to_status(&bytes)?,
 8009fb0: 03 22                        	movs	r2, #3
 8009fb2: 0d f0 0b fa                  	bl	#54294
;         self
 8009fb6: 9d f8 18 04                  	ldrb.w	r0, [sp, #1048]
;         status: to_status(&bytes)?,
 8009fba: 01 28                        	cmp	r0, #1
 8009fbc: 41 f0 77 82                  	bne.w	#5358 <$t.28+0xb4>
 8009fc0: 9d f8 53 34                  	ldrb.w	r3, [sp, #1107]
 8009fc4: 8a 93                        	str	r3, [sp, #552]
 8009fc6: 9d f8 52 34                  	ldrb.w	r3, [sp, #1106]
 8009fca: 86 93                        	str	r3, [sp, #536]
 8009fcc: 9d f8 51 34                  	ldrb.w	r3, [sp, #1105]
 8009fd0: 9d f8 41 54                  	ldrb.w	r5, [sp, #1089]
 8009fd4: dd f8 30 04                  	ldr.w	r0, [sp, #1072]
 8009fd8: dd f8 20 14                  	ldr.w	r1, [sp, #1056]
 8009fdc: 73 93                        	str	r3, [sp, #460]
 8009fde: 9d f8 50 34                  	ldrb.w	r3, [sp, #1104]
 8009fe2: 05 95                        	str	r5, [sp, #20]
 8009fe4: 0c 0a                        	lsrs	r4, r1, #8
 8009fe6: 9d f8 40 54                  	ldrb.w	r5, [sp, #1088]
 8009fea: 03 90                        	str	r0, [sp, #12]
 8009fec: dd f8 24 04                  	ldr.w	r0, [sp, #1060]
 8009ff0: dd f8 54 24                  	ldr.w	r2, [sp, #1108]
 8009ff4: 1e 93                        	str	r3, [sp, #120]
 8009ff6: dd f8 4c 34                  	ldr.w	r3, [sp, #1100]
 8009ffa: 44 ea 00 68                  	orr.w	r8, r4, r0, lsl #24
 8009ffe: 9d f8 49 64                  	ldrb.w	r6, [sp, #1097]
 800a002: 02 95                        	str	r5, [sp, #8]
 800a004: dd f8 3c 54                  	ldr.w	r5, [sp, #1084]
 800a008: 91 93                        	str	r3, [sp, #580]
 800a00a: bd f8 4a 34                  	ldrh.w	r3, [sp, #1098]
 800a00e: 00 96                        	str	r6, [sp]
 800a010: 9d f8 48 64                  	ldrb.w	r6, [sp, #1096]
 800a014: a9 95                        	str	r5, [sp, #676]
 800a016: 1c 0a                        	lsrs	r4, r3, #8
 800a018: dd f8 38 54                  	ldr.w	r5, [sp, #1080]
 800a01c: 01 96                        	str	r6, [sp, #4]
 800a01e: 04 95                        	str	r5, [sp, #16]
 800a020: 0d 0c                        	lsrs	r5, r1, #16
 800a022: dd f8 44 64                  	ldr.w	r6, [sp, #1092]
 800a026: 45 ea 00 4a                  	orr.w	r10, r5, r0, lsl #16
 800a02a: bd f8 42 94                  	ldrh.w	r9, [sp, #1090]
 800a02e: 15 0e                        	lsrs	r5, r2, #24
 800a030: dd f8 2c c4                  	ldr.w	r12, [sp, #1068]
 800a034: dd f8 28 b4                  	ldr.w	r11, [sp, #1064]
 800a038: dd f8 34 e4                  	ldr.w	lr, [sp, #1076]
 800a03c: 8d 95                        	str	r5, [sp, #564]
 800a03e: 15 0c                        	lsrs	r5, r2, #16
 800a040: 8e 92                        	str	r2, [sp, #568]
 800a042: 12 0a                        	lsrs	r2, r2, #8
 800a044: 1f 93                        	str	r3, [sp, #124]
 800a046: 8c 95                        	str	r5, [sp, #560]
 800a048: 8b 92                        	str	r2, [sp, #556]
 800a04a: 94 94                        	str	r4, [sp, #592]
 800a04c: cd f8 9c e2                  	str.w	lr, [sp, #668]
 800a050: 08 e0                        	b	#16 <$t.24+0x5ee2>
 800a052: 4f f0 00 09                  	mov.w	r9, #0
 800a056: 4f f0 03 0b                  	mov.w	r11, #3
 800a05a: 01 21                        	movs	r1, #1
 800a05c: 00 22                        	movs	r2, #0
 800a05e: 94 92                        	str	r2, [sp, #592]
 800a060: 00 22                        	movs	r2, #0
 800a062: a7 92                        	str	r2, [sp, #668]
 800a064: cd f8 fc c3                  	str.w	r12, [sp, #1020]
 800a068: cd f8 f8 b3                  	str.w	r11, [sp, #1016]
 800a06c: fd 90                        	str	r0, [sp, #1012]
 800a06e: 49 ea 06 40                  	orr.w	r0, r9, r6, lsl #16
 800a072: ad f8 f2 a3                  	strh.w	r10, [sp, #1010]
 800a076: 8d f8 f1 83                  	strb.w	r8, [sp, #1009]
 800a07a: 8d f8 f0 13                  	strb.w	r1, [sp, #1008]
 800a07e: 00 f0 aa bc                  	b.w	#2388 <$t.24+0x6854>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 800a082: a9 98                        	ldr	r0, [sp, #676]
;         intrinsics::offset(self, count)
 800a084: 08 f1 06 01                  	add.w	r1, r8, #6
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 800a088: c6 1e                        	subs	r6, r0, #3
 800a08a: 0d f5 83 60                  	add.w	r0, sp, #1048
;     let status = to_status(&bytes)?;
 800a08e: 32 46                        	mov	r2, r6
 800a090: 0d f0 9c f9                  	bl	#54072
;         self
 800a094: 9d f8 18 04                  	ldrb.w	r0, [sp, #1048]
;     let status = to_status(&bytes)?;
 800a098: 01 28                        	cmp	r0, #1
 800a09a: 40 f0 7f 86                  	bne.w	#3326 <$t.24+0x6c1a>
 800a09e: dd f8 54 14                  	ldr.w	r1, [sp, #1108]
 800a0a2: 4f f6 ff 72                  	movw	r2, #65535
 800a0a6: 8e 91                        	str	r1, [sp, #568]
 800a0a8: 9d f8 53 14                  	ldrb.w	r1, [sp, #1107]
 800a0ac: 8a 91                        	str	r1, [sp, #552]
 800a0ae: 9d f8 52 14                  	ldrb.w	r1, [sp, #1106]
 800a0b2: 86 91                        	str	r1, [sp, #536]
 800a0b4: 9d f8 51 14                  	ldrb.w	r1, [sp, #1105]
 800a0b8: 73 91                        	str	r1, [sp, #460]
 800a0ba: 9d f8 50 14                  	ldrb.w	r1, [sp, #1104]
 800a0be: 1e 91                        	str	r1, [sp, #120]
 800a0c0: dd f8 4c 14                  	ldr.w	r1, [sp, #1100]
 800a0c4: 91 91                        	str	r1, [sp, #580]
 800a0c6: 9d f8 49 14                  	ldrb.w	r1, [sp, #1097]
 800a0ca: 00 91                        	str	r1, [sp]
 800a0cc: 9d f8 48 14                  	ldrb.w	r1, [sp, #1096]
 800a0d0: 01 91                        	str	r1, [sp, #4]
 800a0d2: 9d f8 41 14                  	ldrb.w	r1, [sp, #1089]
 800a0d6: 05 91                        	str	r1, [sp, #20]
 800a0d8: 9d f8 40 14                  	ldrb.w	r1, [sp, #1088]
 800a0dc: dd f8 30 04                  	ldr.w	r0, [sp, #1072]
 800a0e0: 02 91                        	str	r1, [sp, #8]
 800a0e2: dd f8 3c 14                  	ldr.w	r1, [sp, #1084]
 800a0e6: 03 90                        	str	r0, [sp, #12]
 800a0e8: a9 91                        	str	r1, [sp, #676]
 800a0ea: dd f8 38 14                  	ldr.w	r1, [sp, #1080]
 800a0ee: dd f8 20 04                  	ldr.w	r0, [sp, #1056]
 800a0f2: 04 91                        	str	r1, [sp, #16]
 800a0f4: dd f8 28 14                  	ldr.w	r1, [sp, #1064]
 800a0f8: dd f8 24 64                  	ldr.w	r6, [sp, #1060]
 800a0fc: bd f8 4a 34                  	ldrh.w	r3, [sp, #1098]
;         self
 800a100: 21 ea 02 0c                  	bic.w	r12, r1, r2
 800a104: 02 0a                        	lsrs	r2, r0, #8
 800a106: dd f8 44 44                  	ldr.w	r4, [sp, #1092]
 800a10a: bd f8 42 84                  	ldrh.w	r8, [sp, #1090]
 800a10e: 42 ea 06 69                  	orr.w	r9, r2, r6, lsl #24
 800a112: dd f8 2c e4                  	ldr.w	lr, [sp, #1068]
 800a116: 02 0c                        	lsrs	r2, r0, #16
 800a118: 42 ea 06 4a                  	orr.w	r10, r2, r6, lsl #16
 800a11c: dd f8 34 54                  	ldr.w	r5, [sp, #1076]
;         Err(v)
 800a120: 0a 0a                        	lsrs	r2, r1, #8
 800a122: 1f 93                        	str	r3, [sp, #124]
;     let status = to_status(&bytes)?;
 800a124: 1b 0a                        	lsrs	r3, r3, #8
 800a126: a7 95                        	str	r5, [sp, #668]
 800a128: 94 93                        	str	r3, [sp, #592]
 800a12a: 01 f0 c3 bd                  	b.w	#7046 <$t.28+0x8ba>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 800a12e: a9 98                        	ldr	r0, [sp, #676]
 800a130: 0d f5 83 66                  	add.w	r6, sp, #1048
;         intrinsics::offset(self, count)
 800a134: 08 f1 06 01                  	add.w	r1, r8, #6
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 800a138: c2 1e                        	subs	r2, r0, #3
;                 Ok(ReturnParameters::GattWriteResponse(to_status(&bytes[3..])?))
 800a13a: 30 46                        	mov	r0, r6
 800a13c: 0d f0 46 f9                  	bl	#53900
;         self
 800a140: b1 1c                        	adds	r1, r6, #2
 800a142: 0d f5 a4 60                  	add.w	r0, sp, #1312
 800a146: 16 22                        	movs	r2, #22
 800a148: 9d f8 18 54                  	ldrb.w	r5, [sp, #1048]
 800a14c: 9d f8 19 44                  	ldrb.w	r4, [sp, #1049]
 800a150: 12 f0 e3 f8                  	bl	#74182
;                 Ok(ReturnParameters::GattWriteResponse(to_status(&bytes[3..])?))
 800a154: 01 2d                        	cmp	r5, #1
 800a156: 40 f0 6d 87                  	bne.w	#3802 <$t.24+0x6eb2>
 800a15a: 9d f8 57 34                  	ldrb.w	r3, [sp, #1111]
 800a15e: 8d 93                        	str	r3, [sp, #564]
 800a160: 9d f8 56 34                  	ldrb.w	r3, [sp, #1110]
 800a164: 8c 93                        	str	r3, [sp, #560]
 800a166: 9d f8 55 34                  	ldrb.w	r3, [sp, #1109]
 800a16a: 8b 93                        	str	r3, [sp, #556]
 800a16c: 9d f8 54 34                  	ldrb.w	r3, [sp, #1108]
 800a170: 8e 93                        	str	r3, [sp, #568]
 800a172: 9d f8 53 34                  	ldrb.w	r3, [sp, #1107]
 800a176: 8a 93                        	str	r3, [sp, #552]
 800a178: 9d f8 48 34                  	ldrb.w	r3, [sp, #1096]
 800a17c: 01 93                        	str	r3, [sp, #4]
 800a17e: 9d f8 49 34                  	ldrb.w	r3, [sp, #1097]
 800a182: 00 93                        	str	r3, [sp]
 800a184: 9d f8 50 34                  	ldrb.w	r3, [sp, #1104]
 800a188: 1e 93                        	str	r3, [sp, #120]
 800a18a: 9d f8 51 34                  	ldrb.w	r3, [sp, #1105]
 800a18e: 73 93                        	str	r3, [sp, #460]
 800a190: 9d f8 52 34                  	ldrb.w	r3, [sp, #1106]
 800a194: dd f8 40 a4                  	ldr.w	r10, [sp, #1088]
;         Err(v)
 800a198: 86 93                        	str	r3, [sp, #536]
 800a19a: dd f8 2a 35                  	ldr.w	r3, [sp, #1322]
 800a19e: dd f8 32 45                  	ldr.w	r4, [sp, #1330]
 800a1a2: dd f8 44 24                  	ldr.w	r2, [sp, #1092]
 800a1a6: dd f8 2e 55                  	ldr.w	r5, [sp, #1326]
 800a1aa: dd f8 26 c5                  	ldr.w	r12, [sp, #1318]
 800a1ae: cd e9 fe 54                  	strd	r5, r4, [sp, #1016]
 800a1b2: cd e9 fc c3                  	strd	r12, r3, [sp, #1008]
;                 Ok(ReturnParameters::GattWriteResponse(to_status(&bytes[3..])?))
 800a1b6: 4f ea 1a 43                  	lsr.w	r3, r10, #16
 800a1ba: dd f8 4c 64                  	ldr.w	r6, [sp, #1100]
 800a1be: 43 ea 02 43                  	orr.w	r3, r3, r2, lsl #16
 800a1c2: a5 93                        	str	r3, [sp, #660]
 800a1c4: 4f ea 1a 23                  	lsr.w	r3, r10, #8
 800a1c8: 43 ea 02 63                  	orr.w	r3, r3, r2, lsl #24
;         Err(v)
 800a1cc: 9d 93                        	str	r3, [sp, #628]
 800a1ce: 33 0e                        	lsrs	r3, r6, #24
 800a1d0: bd f8 4a e4                  	ldrh.w	lr, [sp, #1098]
;                 Ok(ReturnParameters::GattWriteResponse(to_status(&bytes[3..])?))
 800a1d4: 0d 93                        	str	r3, [sp, #52]
 800a1d6: 13 0e                        	lsrs	r3, r2, #24
 800a1d8: 12 0c                        	lsrs	r2, r2, #16
 800a1da: dd f8 38 94                  	ldr.w	r9, [sp, #1080]
 800a1de: 9c 92                        	str	r2, [sp, #624]
 800a1e0: 01 22                        	movs	r2, #1
;         Err(v)
 800a1e2: 21 92                        	str	r2, [sp, #132]
 800a1e4: 32 0c                        	lsrs	r2, r6, #16
 800a1e6: 0c 92                        	str	r2, [sp, #48]
 800a1e8: 32 0a                        	lsrs	r2, r6, #8
 800a1ea: 18 92                        	str	r2, [sp, #96]
 800a1ec: 4f ea 1e 22                  	lsr.w	r2, lr, #8
 800a1f0: 99 92                        	str	r2, [sp, #612]
 800a1f2: 4f ea 19 62                  	lsr.w	r2, r9, #24
 800a1f6: 98 92                        	str	r2, [sp, #608]
 800a1f8: 4f ea 19 42                  	lsr.w	r2, r9, #16
 800a1fc: 9a 92                        	str	r2, [sp, #616]
 800a1fe: 4f ea 19 22                  	lsr.w	r2, r9, #8
 800a202: a9 92                        	str	r2, [sp, #676]
 800a204: dd f8 34 14                  	ldr.w	r1, [sp, #1076]
 800a208: dd f8 30 84                  	ldr.w	r8, [sp, #1072]
 800a20c: dd f8 3c 04                  	ldr.w	r0, [sp, #1084]
;                 Ok(ReturnParameters::GattWriteResponse(to_status(&bytes[3..])?))
 800a210: 96 93                        	str	r3, [sp, #600]
;         Err(v)
 800a212: 4f ea 11 6c                  	lsr.w	r12, r1, #24
 800a216: 0c 0c                        	lsrs	r4, r1, #16
 800a218: 0b 0a                        	lsrs	r3, r1, #8
 800a21a: a7 91                        	str	r1, [sp, #668]
 800a21c: 4f ea 18 65                  	lsr.w	r5, r8, #24
 800a220: 98 99                        	ldr	r1, [sp, #608]
 800a222: ab 46                        	mov	r11, r5
 800a224: 06 91                        	str	r1, [sp, #24]
 800a226: 9a 99                        	ldr	r1, [sp, #616]
 800a228: cd f8 08 a0                  	str.w	r10, [sp, #8]
 800a22c: 4f ea 10 6a                  	lsr.w	r10, r0, #24
 800a230: 91 96                        	str	r6, [sp, #580]
 800a232: 4f ea 18 26                  	lsr.w	r6, r8, #8
 800a236: cd f8 7c e0                  	str.w	lr, [sp, #124]
 800a23a: 4f ea 18 4e                  	lsr.w	lr, r8, #16
 800a23e: cd f8 10 90                  	str.w	r9, [sp, #16]
 800a242: 4f ea 10 49                  	lsr.w	r9, r0, #16
 800a246: cd f8 0c 80                  	str.w	r8, [sp, #12]
 800a24a: 4f ea 10 28                  	lsr.w	r8, r0, #8
 800a24e: 07 91                        	str	r1, [sp, #28]
 800a250: a9 99                        	ldr	r1, [sp, #676]
 800a252: a9 90                        	str	r0, [sp, #676]
 800a254: 9d 98                        	ldr	r0, [sp, #628]
 800a256: 05 90                        	str	r0, [sp, #20]
 800a258: a5 98                        	ldr	r0, [sp, #660]
 800a25a: 9a 90                        	str	r0, [sp, #616]
 800a25c: 9c 98                        	ldr	r0, [sp, #624]
 800a25e: 28 90                        	str	r0, [sp, #160]
 800a260: 99 98                        	ldr	r0, [sp, #612]
 800a262: a3 96                        	str	r6, [sp, #652]
 800a264: cd e9 a1 3e                  	strd	r3, lr, [sp, #644]
 800a268: cd f8 6c c2                  	str.w	r12, [sp, #620]
 800a26c: 9f 94                        	str	r4, [sp, #636]
 800a26e: cd e9 08 1a                  	strd	r1, r10, [sp, #32]
 800a272: cd e9 0a 98                  	strd	r9, r8, [sp, #40]
 800a276: 94 90                        	str	r0, [sp, #592]
 800a278: 00 22                        	movs	r2, #0
 800a27a: a6 92                        	str	r2, [sp, #664]
 800a27c: 01 f0 eb bf                  	b.w	#8150 <$t.42+0x9c>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 800a280: a9 98                        	ldr	r0, [sp, #676]
 800a282: 0d f5 83 66                  	add.w	r6, sp, #1048
;         intrinsics::offset(self, count)
 800a286: 08 f1 06 01                  	add.w	r1, r8, #6
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 800a28a: c2 1e                        	subs	r2, r0, #3
;                 Ok(ReturnParameters::GattSetEventMask(to_status(&bytes[3..])?))
 800a28c: 30 46                        	mov	r0, r6
 800a28e: 0d f0 9d f8                  	bl	#53562
;         self
 800a292: b1 1c                        	adds	r1, r6, #2
 800a294: 0d f5 a4 60                  	add.w	r0, sp, #1312
 800a298: 16 22                        	movs	r2, #22
 800a29a: 9d f8 18 54                  	ldrb.w	r5, [sp, #1048]
 800a29e: 9d f8 19 44                  	ldrb.w	r4, [sp, #1049]
 800a2a2: 12 f0 3a f8                  	bl	#73844
;                 Ok(ReturnParameters::GattSetEventMask(to_status(&bytes[3..])?))
 800a2a6: 01 2d                        	cmp	r5, #1
 800a2a8: 40 f0 fb 86                  	bne.w	#3574 <$t.24+0x6f20>
 800a2ac: 9d f8 57 24                  	ldrb.w	r2, [sp, #1111]
 800a2b0: 8d 92                        	str	r2, [sp, #564]
 800a2b2: 9d f8 56 24                  	ldrb.w	r2, [sp, #1110]
 800a2b6: 8c 92                        	str	r2, [sp, #560]
 800a2b8: 9d f8 55 24                  	ldrb.w	r2, [sp, #1109]
 800a2bc: 8b 92                        	str	r2, [sp, #556]
 800a2be: 9d f8 54 24                  	ldrb.w	r2, [sp, #1108]
 800a2c2: 8e 92                        	str	r2, [sp, #568]
 800a2c4: 9d f8 53 24                  	ldrb.w	r2, [sp, #1107]
 800a2c8: 8a 92                        	str	r2, [sp, #552]
 800a2ca: 9d f8 48 24                  	ldrb.w	r2, [sp, #1096]
 800a2ce: 01 92                        	str	r2, [sp, #4]
 800a2d0: 9d f8 49 24                  	ldrb.w	r2, [sp, #1097]
 800a2d4: 00 92                        	str	r2, [sp]
 800a2d6: 9d f8 50 24                  	ldrb.w	r2, [sp, #1104]
 800a2da: 1e 92                        	str	r2, [sp, #120]
 800a2dc: 9d f8 51 24                  	ldrb.w	r2, [sp, #1105]
 800a2e0: dd f8 40 94                  	ldr.w	r9, [sp, #1088]
 800a2e4: 73 92                        	str	r2, [sp, #460]
 800a2e6: 9d f8 52 24                  	ldrb.w	r2, [sp, #1106]
;         Err(v)
 800a2ea: 86 92                        	str	r2, [sp, #536]
 800a2ec: dd f8 32 55                  	ldr.w	r5, [sp, #1330]
 800a2f0: dd f8 44 14                  	ldr.w	r1, [sp, #1092]
 800a2f4: dd f8 26 25                  	ldr.w	r2, [sp, #1318]
 800a2f8: ff 95                        	str	r5, [sp, #1020]
 800a2fa: fc ad                        	add	r5, sp, #1008
 800a2fc: dd f8 2a 35                  	ldr.w	r3, [sp, #1322]
 800a300: dd f8 2e 65                  	ldr.w	r6, [sp, #1326]
 800a304: 4c c5                        	stm	r5!, {r2, r3, r6}
;                 Ok(ReturnParameters::GattSetEventMask(to_status(&bytes[3..])?))
 800a306: 4f ea 19 42                  	lsr.w	r2, r9, #16
 800a30a: 42 ea 01 42                  	orr.w	r2, r2, r1, lsl #16
 800a30e: dd f8 4c 44                  	ldr.w	r4, [sp, #1100]
 800a312: 9a 92                        	str	r2, [sp, #616]
 800a314: 4f ea 19 22                  	lsr.w	r2, r9, #8
 800a318: 42 ea 01 62                  	orr.w	r2, r2, r1, lsl #24
;         Err(v)
 800a31c: a5 92                        	str	r2, [sp, #660]
 800a31e: 22 0e                        	lsrs	r2, r4, #24
 800a320: dd f8 30 e4                  	ldr.w	lr, [sp, #1072]
;                 Ok(ReturnParameters::GattSetEventMask(to_status(&bytes[3..])?))
 800a324: 0d 92                        	str	r2, [sp, #52]
 800a326: 0a 0e                        	lsrs	r2, r1, #24
 800a328: 96 92                        	str	r2, [sp, #600]
 800a32a: 09 0c                        	lsrs	r1, r1, #16
 800a32c: dd f8 3c 04                  	ldr.w	r0, [sp, #1084]
;         Err(v)
 800a330: 4f ea 1e 26                  	lsr.w	r6, lr, #8
 800a334: bd f8 4a c4                  	ldrh.w	r12, [sp, #1098]
 800a338: 4f ea 1e 6b                  	lsr.w	r11, lr, #24
 800a33c: 28 91                        	str	r1, [sp, #160]
 800a33e: 01 21                        	movs	r1, #1
 800a340: 21 91                        	str	r1, [sp, #132]
 800a342: 21 0c                        	lsrs	r1, r4, #16
 800a344: dd f8 38 84                  	ldr.w	r8, [sp, #1080]
 800a348: 0c 91                        	str	r1, [sp, #48]
 800a34a: 21 0a                        	lsrs	r1, r4, #8
 800a34c: cd f8 08 90                  	str.w	r9, [sp, #8]
 800a350: 4f ea 10 49                  	lsr.w	r9, r0, #16
 800a354: 18 91                        	str	r1, [sp, #96]
 800a356: 4f ea 1c 21                  	lsr.w	r1, r12, #8
 800a35a: cd f8 7c c0                  	str.w	r12, [sp, #124]
 800a35e: 4f ea 1e 4c                  	lsr.w	r12, lr, #16
 800a362: cd f8 0c e0                  	str.w	lr, [sp, #12]
 800a366: 4f ea 10 6e                  	lsr.w	lr, r0, #24
 800a36a: a9 90                        	str	r0, [sp, #676]
 800a36c: 00 0a                        	lsrs	r0, r0, #8
 800a36e: 0b 90                        	str	r0, [sp, #44]
 800a370: 00 20                        	movs	r0, #0
 800a372: 9d 91                        	str	r1, [sp, #628]
 800a374: 4f ea 18 61                  	lsr.w	r1, r8, #24
 800a378: a6 90                        	str	r0, [sp, #664]
 800a37a: dd f8 34 a4                  	ldr.w	r10, [sp, #1076]
 800a37e: 98 91                        	str	r1, [sp, #608]
 800a380: 4f ea 18 41                  	lsr.w	r1, r8, #16
 800a384: 99 91                        	str	r1, [sp, #612]
 800a386: 4f ea 18 21                  	lsr.w	r1, r8, #8
 800a38a: 98 98                        	ldr	r0, [sp, #608]
 800a38c: 4f ea 1a 63                  	lsr.w	r3, r10, #24
 800a390: 9c 91                        	str	r1, [sp, #624]
 800a392: 4f ea 1a 21                  	lsr.w	r1, r10, #8
 800a396: 06 90                        	str	r0, [sp, #24]
 800a398: 99 98                        	ldr	r0, [sp, #612]
 800a39a: 91 94                        	str	r4, [sp, #580]
 800a39c: 4f ea 1a 44                  	lsr.w	r4, r10, #16
 800a3a0: 07 90                        	str	r0, [sp, #28]
 800a3a2: 9c 98                        	ldr	r0, [sp, #624]
 800a3a4: cd f8 10 80                  	str.w	r8, [sp, #16]
 800a3a8: a3 96                        	str	r6, [sp, #652]
 800a3aa: cd e9 a1 1c                  	strd	r1, r12, [sp, #644]
 800a3ae: cd f8 9c a2                  	str.w	r10, [sp, #668]
 800a3b2: 9b 93                        	str	r3, [sp, #620]
 800a3b4: 9f 94                        	str	r4, [sp, #636]
 800a3b6: cd e9 08 0e                  	strd	r0, lr, [sp, #32]
 800a3ba: cd f8 28 90                  	str.w	r9, [sp, #40]
 800a3be: a5 98                        	ldr	r0, [sp, #660]
 800a3c0: 05 90                        	str	r0, [sp, #20]
 800a3c2: 9d 98                        	ldr	r0, [sp, #628]
 800a3c4: 94 90                        	str	r0, [sp, #592]
 800a3c6: 01 f0 46 bf                  	b.w	#7820 <$t.42+0x9c>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 800a3ca: a9 98                        	ldr	r0, [sp, #676]
 800a3cc: c5 1e                        	subs	r5, r0, #3
;     require_len_at_least!(bytes, 3);
 800a3ce: 03 2d                        	cmp	r5, #3
 800a3d0: 80 f0 94 86                  	bhs.w	#3368 <$t.24+0x6f7a>
 800a3d4: 03 21                        	movs	r1, #3
 800a3d6: 01 20                        	movs	r0, #1
 800a3d8: 00 22                        	movs	r2, #0
 800a3da: 94 92                        	str	r2, [sp, #592]
 800a3dc: 00 22                        	movs	r2, #0
 800a3de: a7 92                        	str	r2, [sp, #668]
 800a3e0: 00 f0 dc be                  	b.w	#3512 <$t.24+0x701a>
 800a3e4: 02 21                        	movs	r1, #2
 800a3e6: 00 e0                        	b	#0 <$t.24+0x6268>
 800a3e8: 00 21                        	movs	r1, #0
;             0x0800 => Ok(Stm32Wb5xEvent::L2CapConnectionUpdateResponse(
 800a3ea: ad f8 f2 03                  	strh.w	r0, [sp, #1010]
 800a3ee: 0a 20                        	movs	r0, #10
 800a3f0: dd f8 18 24                  	ldr.w	r2, [sp, #1048]
 800a3f4: dd f8 1c 34                  	ldr.w	r3, [sp, #1052]
 800a3f8: dd f8 1f 64                  	ldr.w	r6, [sp, #1055]
 800a3fc: fb f7 7f bd                  	b.w	#-17666 <$t.24+0x1d7c>
;         self
 800a400: 37 f8 2e 5c                  	ldrh	r5, [r7, #-46]
 800a404: 09 21                        	movs	r1, #9
 800a406: 37 f8 36 cc                  	ldrh	r12, [r7, #-54]
 800a40a: d4 f8 12 00                  	ldr.w	r0, [r4, #18]
 800a40e: a7 90                        	str	r0, [sp, #668]
 800a410: 57 f8 22 0c                  	ldr	r0, [r7, #-34]
;             LittleEndian::read_u16(&buffer[9..]).try_into()?,
 800a414: 91 90                        	str	r0, [sp, #580]
 800a416: 28 0a                        	lsrs	r0, r5, #8
 800a418: a1 90                        	str	r0, [sp, #644]
 800a41a: 4f ea 1c 20                  	lsr.w	r0, r12, #8
;         self
 800a41e: 95 90                        	str	r0, [sp, #596]
 800a420: 57 f8 2a 0c                  	ldr	r0, [r7, #-42]
 800a424: d4 f8 00 b0                  	ldr.w	r11, [r4]
 800a428: d4 f8 04 90                  	ldr.w	r9, [r4, #4]
 800a42c: e4 8a                        	ldrh	r4, [r4, #22]
 800a42e: cd f8 8c c0                  	str.w	r12, [sp, #140]
 800a432: a0 90                        	str	r0, [sp, #640]
 800a434: 37 f8 2c 0c                  	ldrh	r0, [r7, #-44]
;             LittleEndian::read_u16(&buffer[9..]).try_into()?,
 800a438: 23 0a                        	lsrs	r3, r4, #8
;         self
 800a43a: 57 f8 26 cc                  	ldr	r12, [r7, #-38]
 800a43e: 57 f8 3a ec                  	ldr	lr, [r7, #-58]
 800a442: 37 f8 3c 8c                  	ldrh	r8, [r7, #-60]
 800a446: a2 90                        	str	r0, [sp, #648]
 800a448: 17 f8 3e 0c                  	ldrb	r0, [r7, #-62]
 800a44c: 27 90                        	str	r0, [sp, #156]
 800a44e: 17 f8 3d 0c                  	ldrb	r0, [r7, #-61]
 800a452: 9b 95                        	str	r5, [sp, #620]
 800a454: 9c 90                        	str	r0, [sp, #624]
 800a456: 99 94                        	str	r4, [sp, #612]
 800a458: fd f7 82 bb                  	b.w	#-10492 <$t.24+0x39de>
;     Ok(HandleUuidPairs::Format16(count, pairs))
 800a45c: 00 20                        	movs	r0, #0
 800a45e: 00 22                        	movs	r2, #0
 800a460: 4f 90                        	str	r0, [sp, #316]
 800a462: 00 20                        	movs	r0, #0
 800a464: 83 90                        	str	r0, [sp, #524]
 800a466: 00 20                        	movs	r0, #0
 800a468: 69 90                        	str	r0, [sp, #420]
 800a46a: 00 20                        	movs	r0, #0
 800a46c: 51 90                        	str	r0, [sp, #324]
 800a46e: 00 20                        	movs	r0, #0
 800a470: 50 90                        	str	r0, [sp, #320]
 800a472: 00 20                        	movs	r0, #0
 800a474: 84 90                        	str	r0, [sp, #528]
 800a476: 00 20                        	movs	r0, #0
 800a478: 6a 90                        	str	r0, [sp, #424]
 800a47a: 00 20                        	movs	r0, #0
 800a47c: 54 90                        	str	r0, [sp, #336]
 800a47e: 00 20                        	movs	r0, #0
 800a480: 52 90                        	str	r0, [sp, #328]
 800a482: 00 20                        	movs	r0, #0
 800a484: 70 90                        	str	r0, [sp, #448]
 800a486: 00 20                        	movs	r0, #0
 800a488: 6b 90                        	str	r0, [sp, #428]
 800a48a: 00 20                        	movs	r0, #0
 800a48c: 55 90                        	str	r0, [sp, #340]
 800a48e: 00 20                        	movs	r0, #0
 800a490: 53 90                        	str	r0, [sp, #332]
 800a492: 00 20                        	movs	r0, #0
 800a494: 85 90                        	str	r0, [sp, #532]
 800a496: 00 20                        	movs	r0, #0
 800a498: 6c 90                        	str	r0, [sp, #432]
 800a49a: 00 20                        	movs	r0, #0
 800a49c: 56 90                        	str	r0, [sp, #344]
 800a49e: 00 20                        	movs	r0, #0
 800a4a0: 48 90                        	str	r0, [sp, #288]
 800a4a2: 00 20                        	movs	r0, #0
 800a4a4: 7d 90                        	str	r0, [sp, #500]
 800a4a6: 00 20                        	movs	r0, #0
 800a4a8: 6d 90                        	str	r0, [sp, #436]
 800a4aa: 00 20                        	movs	r0, #0
 800a4ac: 57 90                        	str	r0, [sp, #348]
 800a4ae: 00 20                        	movs	r0, #0
 800a4b0: 34 90                        	str	r0, [sp, #208]
 800a4b2: 00 20                        	movs	r0, #0
 800a4b4: 75 90                        	str	r0, [sp, #468]
 800a4b6: 00 20                        	movs	r0, #0
 800a4b8: 71 90                        	str	r0, [sp, #452]
 800a4ba: 00 20                        	movs	r0, #0
 800a4bc: 58 90                        	str	r0, [sp, #352]
 800a4be: 00 20                        	movs	r0, #0
 800a4c0: 6f 90                        	str	r0, [sp, #444]
 800a4c2: 00 20                        	movs	r0, #0
 800a4c4: 72 90                        	str	r0, [sp, #456]
 800a4c6: 00 20                        	movs	r0, #0
 800a4c8: 89 90                        	str	r0, [sp, #548]
 800a4ca: 00 20                        	movs	r0, #0
 800a4cc: 8e 90                        	str	r0, [sp, #568]
 800a4ce: 00 20                        	movs	r0, #0
 800a4d0: 86 90                        	str	r0, [sp, #536]
 800a4d2: 00 20                        	movs	r0, #0
 800a4d4: 73 90                        	str	r0, [sp, #460]
 800a4d6: 00 20                        	movs	r0, #0
 800a4d8: 91 90                        	str	r0, [sp, #580]
 800a4da: 00 20                        	movs	r0, #0
 800a4dc: a5 90                        	str	r0, [sp, #660]
 800a4de: 00 20                        	movs	r0, #0
 800a4e0: 00 21                        	movs	r1, #0
 800a4e2: a3 92                        	str	r2, [sp, #652]
 800a4e4: 00 22                        	movs	r2, #0
 800a4e6: 00 26                        	movs	r6, #0
 800a4e8: a4 90                        	str	r0, [sp, #656]
 800a4ea: 00 20                        	movs	r0, #0
 800a4ec: a7 91                        	str	r1, [sp, #668]
 800a4ee: 00 21                        	movs	r1, #0
 800a4f0: 9e 92                        	str	r2, [sp, #632]
 800a4f2: 00 22                        	movs	r2, #0
 800a4f4: 9b 96                        	str	r6, [sp, #620]
 800a4f6: 00 26                        	movs	r6, #0
 800a4f8: a0 90                        	str	r0, [sp, #640]
 800a4fa: 00 20                        	movs	r0, #0
 800a4fc: 95 91                        	str	r1, [sp, #596]
 800a4fe: 00 21                        	movs	r1, #0
 800a500: 9d 92                        	str	r2, [sp, #628]
 800a502: 00 22                        	movs	r2, #0
 800a504: 23 96                        	str	r6, [sp, #140]
 800a506: 00 26                        	movs	r6, #0
 800a508: a2 90                        	str	r0, [sp, #648]
 800a50a: 00 20                        	movs	r0, #0
 800a50c: a6 91                        	str	r1, [sp, #664]
 800a50e: 00 21                        	movs	r1, #0
 800a510: 74 92                        	str	r2, [sp, #464]
 800a512: 00 22                        	movs	r2, #0
 800a514: 27 96                        	str	r6, [sp, #156]
 800a516: 00 26                        	movs	r6, #0
 800a518: 00 24                        	movs	r4, #0
 800a51a: a1 90                        	str	r0, [sp, #644]
 800a51c: 9c 91                        	str	r1, [sp, #624]
 800a51e: 00 20                        	movs	r0, #0
 800a520: 1e 92                        	str	r2, [sp, #120]
 800a522: 4f f0 00 0e                  	mov.w	lr, #0
 800a526: 00 23                        	movs	r3, #0
 800a528: 00 21                        	movs	r1, #0
 800a52a: 4f f0 00 08                  	mov.w	r8, #0
 800a52e: 4f f0 00 0a                  	mov.w	r10, #0
 800a532: 00 22                        	movs	r2, #0
 800a534: 92 96                        	str	r6, [sp, #584]
 800a536: 4f f0 00 0c                  	mov.w	r12, #0
 800a53a: a9 94                        	str	r4, [sp, #676]
 800a53c: 9d f8 0d 45                  	ldrb.w	r4, [sp, #1293]
;             Ok(t) => Ok(t),
 800a540: 43 ea 01 0b                  	orr.w	r11, r3, r1
;     Ok(HandleUuidPairs::Format16(count, pairs))
 800a544: bd f8 0b 95                  	ldrh.w	r9, [sp, #1291]
 800a548: 9d f8 fd 14                  	ldrb.w	r1, [sp, #1277]
 800a54c: 2d 91                        	str	r1, [sp, #180]
 800a54e: 49 ea 04 41                  	orr.w	r1, r9, r4, lsl #16
 800a552: 2a 91                        	str	r1, [sp, #168]
 800a554: 9d f8 fc 14                  	ldrb.w	r1, [sp, #1276]
 800a558: 2c 91                        	str	r1, [sp, #176]
 800a55a: bd f8 fa 14                  	ldrh.w	r1, [sp, #1274]
 800a55e: 32 91                        	str	r1, [sp, #200]
 800a560: dd f8 f6 14                  	ldr.w	r1, [sp, #1270]
 800a564: 5a 91                        	str	r1, [sp, #360]
 800a566: 9d f8 f5 14                  	ldrb.w	r1, [sp, #1269]
 800a56a: 2f 91                        	str	r1, [sp, #188]
 800a56c: 9d f8 f4 14                  	ldrb.w	r1, [sp, #1268]
 800a570: 2e 91                        	str	r1, [sp, #184]
 800a572: bd f8 f2 14                  	ldrh.w	r1, [sp, #1266]
 800a576: 36 91                        	str	r1, [sp, #216]
 800a578: dd f8 ee 14                  	ldr.w	r1, [sp, #1262]
 800a57c: 5b 91                        	str	r1, [sp, #364]
 800a57e: 9d f8 ed 14                  	ldrb.w	r1, [sp, #1261]
 800a582: 31 91                        	str	r1, [sp, #196]
 800a584: 9d f8 ec 14                  	ldrb.w	r1, [sp, #1260]
 800a588: 30 91                        	str	r1, [sp, #192]
 800a58a: bd f8 ea 14                  	ldrh.w	r1, [sp, #1258]
 800a58e: 39 91                        	str	r1, [sp, #228]
 800a590: dd f8 e6 14                  	ldr.w	r1, [sp, #1254]
 800a594: 5c 91                        	str	r1, [sp, #368]
 800a596: 9d f8 e5 14                  	ldrb.w	r1, [sp, #1253]
 800a59a: 35 91                        	str	r1, [sp, #212]
 800a59c: 9d f8 e4 14                  	ldrb.w	r1, [sp, #1252]
 800a5a0: 33 91                        	str	r1, [sp, #204]
 800a5a2: bd f8 e2 14                  	ldrh.w	r1, [sp, #1250]
 800a5a6: 76 91                        	str	r1, [sp, #472]
 800a5a8: dd f8 de 14                  	ldr.w	r1, [sp, #1246]
 800a5ac: 5d 91                        	str	r1, [sp, #372]
 800a5ae: 9d f8 dd 14                  	ldrb.w	r1, [sp, #1245]
 800a5b2: 38 91                        	str	r1, [sp, #224]
 800a5b4: 9d f8 dc 14                  	ldrb.w	r1, [sp, #1244]
 800a5b8: 37 91                        	str	r1, [sp, #220]
 800a5ba: bd f8 da 14                  	ldrh.w	r1, [sp, #1242]
 800a5be: 77 91                        	str	r1, [sp, #476]
 800a5c0: dd f8 d6 14                  	ldr.w	r1, [sp, #1238]
 800a5c4: 5e 91                        	str	r1, [sp, #376]
 800a5c6: 9d f8 d5 14                  	ldrb.w	r1, [sp, #1237]
 800a5ca: 3b 91                        	str	r1, [sp, #236]
 800a5cc: 9d f8 d4 14                  	ldrb.w	r1, [sp, #1236]
 800a5d0: 3a 91                        	str	r1, [sp, #232]
 800a5d2: bd f8 d2 14                  	ldrh.w	r1, [sp, #1234]
 800a5d6: 78 91                        	str	r1, [sp, #480]
 800a5d8: dd f8 ce 14                  	ldr.w	r1, [sp, #1230]
 800a5dc: 5f 91                        	str	r1, [sp, #380]
 800a5de: 9d f8 cd 14                  	ldrb.w	r1, [sp, #1229]
 800a5e2: 3d 91                        	str	r1, [sp, #244]
 800a5e4: 9d f8 cc 14                  	ldrb.w	r1, [sp, #1228]
 800a5e8: 3c 91                        	str	r1, [sp, #240]
 800a5ea: bd f8 ca 14                  	ldrh.w	r1, [sp, #1226]
 800a5ee: 79 91                        	str	r1, [sp, #484]
 800a5f0: dd f8 c6 14                  	ldr.w	r1, [sp, #1222]
 800a5f4: 60 91                        	str	r1, [sp, #384]
 800a5f6: 9d f8 c5 14                  	ldrb.w	r1, [sp, #1221]
 800a5fa: 3f 91                        	str	r1, [sp, #252]
 800a5fc: 9d f8 c4 14                  	ldrb.w	r1, [sp, #1220]
 800a600: 3e 91                        	str	r1, [sp, #248]
 800a602: bd f8 c2 14                  	ldrh.w	r1, [sp, #1218]
 800a606: 7a 91                        	str	r1, [sp, #488]
 800a608: dd f8 be 14                  	ldr.w	r1, [sp, #1214]
 800a60c: 61 91                        	str	r1, [sp, #388]
 800a60e: 9d f8 bd 14                  	ldrb.w	r1, [sp, #1213]
 800a612: 41 91                        	str	r1, [sp, #260]
 800a614: 9d f8 bc 14                  	ldrb.w	r1, [sp, #1212]
 800a618: 40 91                        	str	r1, [sp, #256]
 800a61a: bd f8 ba 14                  	ldrh.w	r1, [sp, #1210]
 800a61e: 7b 91                        	str	r1, [sp, #492]
 800a620: dd f8 b6 14                  	ldr.w	r1, [sp, #1206]
 800a624: 62 91                        	str	r1, [sp, #392]
 800a626: 9d f8 b5 14                  	ldrb.w	r1, [sp, #1205]
 800a62a: 43 91                        	str	r1, [sp, #268]
 800a62c: 9d f8 b4 14                  	ldrb.w	r1, [sp, #1204]
 800a630: 42 91                        	str	r1, [sp, #264]
 800a632: bd f8 b2 14                  	ldrh.w	r1, [sp, #1202]
 800a636: 7c 91                        	str	r1, [sp, #496]
 800a638: dd f8 ae 14                  	ldr.w	r1, [sp, #1198]
 800a63c: 63 91                        	str	r1, [sp, #396]
 800a63e: 9d f8 ad 14                  	ldrb.w	r1, [sp, #1197]
 800a642: 45 91                        	str	r1, [sp, #276]
 800a644: 9d f8 ac 14                  	ldrb.w	r1, [sp, #1196]
 800a648: 44 91                        	str	r1, [sp, #272]
 800a64a: bd f8 aa 14                  	ldrh.w	r1, [sp, #1194]
 800a64e: 7e 91                        	str	r1, [sp, #504]
 800a650: dd f8 a6 14                  	ldr.w	r1, [sp, #1190]
 800a654: 64 91                        	str	r1, [sp, #400]
 800a656: 9d f8 a5 14                  	ldrb.w	r1, [sp, #1189]
 800a65a: 47 91                        	str	r1, [sp, #284]
 800a65c: 9d f8 a4 14                  	ldrb.w	r1, [sp, #1188]
 800a660: 46 91                        	str	r1, [sp, #280]
 800a662: bd f8 a2 14                  	ldrh.w	r1, [sp, #1186]
 800a666: 7f 91                        	str	r1, [sp, #508]
 800a668: dd f8 9e 14                  	ldr.w	r1, [sp, #1182]
 800a66c: 65 91                        	str	r1, [sp, #404]
 800a66e: 9d f8 9d 14                  	ldrb.w	r1, [sp, #1181]
 800a672: 4a 91                        	str	r1, [sp, #296]
 800a674: 9d f8 9c 14                  	ldrb.w	r1, [sp, #1180]
 800a678: 49 91                        	str	r1, [sp, #292]
 800a67a: bd f8 9a 14                  	ldrh.w	r1, [sp, #1178]
 800a67e: 80 91                        	str	r1, [sp, #512]
 800a680: dd f8 96 14                  	ldr.w	r1, [sp, #1174]
 800a684: 66 91                        	str	r1, [sp, #408]
 800a686: 9d f8 95 14                  	ldrb.w	r1, [sp, #1173]
 800a68a: 4c 91                        	str	r1, [sp, #304]
 800a68c: 9d f8 94 14                  	ldrb.w	r1, [sp, #1172]
 800a690: 4b 91                        	str	r1, [sp, #300]
 800a692: bd f8 92 14                  	ldrh.w	r1, [sp, #1170]
 800a696: 81 91                        	str	r1, [sp, #516]
 800a698: dd f8 8e 14                  	ldr.w	r1, [sp, #1166]
 800a69c: bd f8 0e 55                  	ldrh.w	r5, [sp, #1294]
 800a6a0: 67 91                        	str	r1, [sp, #412]
 800a6a2: 9d f8 8d 14                  	ldrb.w	r1, [sp, #1165]
 800a6a6: 2b 95                        	str	r5, [sp, #172]
 800a6a8: 9d f8 0a 55                  	ldrb.w	r5, [sp, #1290]
 800a6ac: 4e 91                        	str	r1, [sp, #312]
 800a6ae: 9d f8 8c 14                  	ldrb.w	r1, [sp, #1164]
 800a6b2: 88 95                        	str	r5, [sp, #544]
 800a6b4: dd f8 06 55                  	ldr.w	r5, [sp, #1286]
 800a6b8: 4d 91                        	str	r1, [sp, #308]
 800a6ba: bd f8 8a 14                  	ldrh.w	r1, [sp, #1162]
 800a6be: 87 95                        	str	r5, [sp, #540]
 800a6c0: dd f8 fe 54                  	ldr.w	r5, [sp, #1278]
 800a6c4: 82 91                        	str	r1, [sp, #520]
 800a6c6: dd f8 86 14                  	ldr.w	r1, [sp, #1158]
 800a6ca: 59 95                        	str	r5, [sp, #356]
;             1 => to_handle_uuid16_pairs(&buffer[6..]).map_err(hci::event::Error::Vendor)?,
 800a6cc: 68 91                        	str	r1, [sp, #416]
;             0x0C04 => Ok(Stm32Wb5xEvent::AttFindInformationResponse(
 800a6ce: 9e 99                        	ldr	r1, [sp, #632]
 800a6d0: 10 25                        	movs	r5, #16
 800a6d2: ff 91                        	str	r1, [sp, #1020]
 800a6d4: 4f ea 1b 49                  	lsr.w	r9, r11, #16
 800a6d8: 9d 99                        	ldr	r1, [sp, #628]
 800a6da: ad f8 fa 13                  	strh.w	r1, [sp, #1018]
 800a6de: a9 99                        	ldr	r1, [sp, #676]
 800a6e0: fd 91                        	str	r1, [sp, #1012]
 800a6e2: a7 99                        	ldr	r1, [sp, #668]
 800a6e4: 8e 9b                        	ldr	r3, [sp, #568]
 800a6e6: 41 ea 00 41                  	orr.w	r1, r1, r0, lsl #16
 800a6ea: a7 91                        	str	r1, [sp, #668]
 800a6ec: a4 99                        	ldr	r1, [sp, #656]
 800a6ee: 8d f8 f8 c3                  	strb.w	r12, [sp, #1016]
 800a6f2: 8d f8 f0 53                  	strb.w	r5, [sp, #1008]
 800a6f6: 5d 46                        	mov	r5, r11
 800a6f8: 42 ea 01 22                  	orr.w	r2, r2, r1, lsl #8
 800a6fc: a5 99                        	ldr	r1, [sp, #660]
 800a6fe: 9d f8 22 45                  	ldrb.w	r4, [sp, #1314]
 800a702: bd f8 20 65                  	ldrh.w	r6, [sp, #1312]
 800a706: 42 ea 01 4c                  	orr.w	r12, r2, r1, lsl #16
;         match event_code {
 800a70a: 01 0e                        	lsrs	r1, r0, #24
 800a70c: 00 0c                        	lsrs	r0, r0, #16
;             0x0C04 => Ok(Stm32Wb5xEvent::AttFindInformationResponse(
 800a70e: 8d f8 f3 43                  	strb.w	r4, [sp, #1011]
 800a712: 99 90                        	str	r0, [sp, #612]
 800a714: 18 0e                        	lsrs	r0, r3, #24
 800a716: 8d 90                        	str	r0, [sp, #564]
 800a718: 18 0c                        	lsrs	r0, r3, #16
 800a71a: 8c 90                        	str	r0, [sp, #560]
 800a71c: 18 0a                        	lsrs	r0, r3, #8
 800a71e: 8b 90                        	str	r0, [sp, #556]
 800a720: 86 98                        	ldr	r0, [sp, #536]
 800a722: 8d f8 f9 a3                  	strb.w	r10, [sp, #1017]
 800a726: c2 46                        	mov	r10, r8
;         match event_code {
 800a728: 98 91                        	str	r1, [sp, #608]
;             0x0C04 => Ok(Stm32Wb5xEvent::AttFindInformationResponse(
 800a72a: 00 0a                        	lsrs	r0, r0, #8
 800a72c: ad f8 f1 63                  	strh.w	r6, [sp, #1009]
 800a730: 8a 90                        	str	r0, [sp, #552]
; }
 800a732: 9f 98                        	ldr	r0, [sp, #636]
 800a734: 95 99                        	ldr	r1, [sp, #596]
 800a736: 9c 9c                        	ldr	r4, [sp, #624]
 800a738: 4f ea 10 2b                  	lsr.w	r11, r0, #8
 800a73c: dd f8 98 82                  	ldr.w	r8, [sp, #664]
 800a740: fb f7 64 bb                  	b.w	#-18744 <$t.24+0x1c8a>
;             crate::opcode::GATT_SET_SECURITY_PERMISSION => Ok(
 800a744: a7 f1 48 02                  	sub.w	r2, r7, #72
 800a748: 37 f8 3c 3c                  	ldrh	r3, [r7, #-60]
 800a74c: 2f 26                        	movs	r6, #47
 800a74e: 8d f8 f1 43                  	strb.w	r4, [sp, #1009]
 800a752: 07 ca                        	ldm	r2, {r0, r1, r2}
 800a754: 4f f0 00 0b                  	mov.w	r11, #0
 800a758: cd f8 f2 03                  	str.w	r0, [sp, #1010]
 800a75c: 00 20                        	movs	r0, #0
 800a75e: 0d 90                        	str	r0, [sp, #52]
 800a760: 8d f8 f0 63                  	strb.w	r6, [sp, #1008]
 800a764: cd f8 f6 13                  	str.w	r1, [sp, #1014]
 800a768: cd f8 fa 23                  	str.w	r2, [sp, #1018]
 800a76c: ad f8 fe 33                  	strh.w	r3, [sp, #1022]
 800a770: 00 20                        	movs	r0, #0
 800a772: a6 90                        	str	r0, [sp, #664]
 800a774: 00 20                        	movs	r0, #0
 800a776: a2 90                        	str	r0, [sp, #648]
 800a778: 00 20                        	movs	r0, #0
 800a77a: a3 90                        	str	r0, [sp, #652]
 800a77c: 00 20                        	movs	r0, #0
 800a77e: a1 90                        	str	r0, [sp, #644]
 800a780: 00 20                        	movs	r0, #0
 800a782: a7 90                        	str	r0, [sp, #668]
 800a784: 00 20                        	movs	r0, #0
 800a786: 9b 90                        	str	r0, [sp, #620]
 800a788: 00 20                        	movs	r0, #0
 800a78a: 9f 90                        	str	r0, [sp, #636]
 800a78c: 00 20                        	movs	r0, #0
 800a78e: 06 90                        	str	r0, [sp, #24]
 800a790: 00 20                        	movs	r0, #0
 800a792: 07 90                        	str	r0, [sp, #28]
 800a794: 00 20                        	movs	r0, #0
 800a796: 08 90                        	str	r0, [sp, #32]
 800a798: 00 20                        	movs	r0, #0
 800a79a: 09 90                        	str	r0, [sp, #36]
 800a79c: 00 20                        	movs	r0, #0
 800a79e: 0a 90                        	str	r0, [sp, #40]
 800a7a0: 00 20                        	movs	r0, #0
 800a7a2: 0b 90                        	str	r0, [sp, #44]
 800a7a4: 00 20                        	movs	r0, #0
 800a7a6: a9 90                        	str	r0, [sp, #676]
 800a7a8: 00 20                        	movs	r0, #0
 800a7aa: 05 90                        	str	r0, [sp, #20]
 800a7ac: 00 20                        	movs	r0, #0
 800a7ae: 9a 90                        	str	r0, [sp, #616]
 800a7b0: 00 20                        	movs	r0, #0
 800a7b2: 28 90                        	str	r0, [sp, #160]
 800a7b4: 00 20                        	movs	r0, #0
 800a7b6: 96 90                        	str	r0, [sp, #600]
 800a7b8: 00 20                        	movs	r0, #0
 800a7ba: 94 90                        	str	r0, [sp, #592]
 800a7bc: 7d e2                        	b	#1274 <$t.24+0x6b38>
;             crate::opcode::GATT_WRITE_WITHOUT_RESPONSE => Ok(
 800a7be: a7 f1 48 02                  	sub.w	r2, r7, #72
 800a7c2: 37 f8 3c 3c                  	ldrh	r3, [r7, #-60]
 800a7c6: 2a 26                        	movs	r6, #42
 800a7c8: 8d f8 f1 43                  	strb.w	r4, [sp, #1009]
 800a7cc: 10 e1                        	b	#544 <$t.24+0x686e>
 800a7ce: 00 20                        	movs	r0, #0
 800a7d0: 4f f0 01 08                  	mov.w	r8, #1
 800a7d4: 94 90                        	str	r0, [sp, #592]
 800a7d6: 4f f0 05 09                  	mov.w	r9, #5
 800a7da: 4f f0 00 0a                  	mov.w	r10, #0
 800a7de: 00 21                        	movs	r1, #0
 800a7e0: 01 f0 f6 b9                  	b.w	#5100 <$t.28+0x7d6>
;             crate::opcode::GATT_DELETE_CHARACTERISTIC => Ok(
 800a7e4: a7 f1 48 02                  	sub.w	r2, r7, #72
 800a7e8: 37 f8 3c 3c                  	ldrh	r3, [r7, #-60]
 800a7ec: 26 26                        	movs	r6, #38
 800a7ee: 8d f8 f1 43                  	strb.w	r4, [sp, #1009]
 800a7f2: 07 ca                        	ldm	r2, {r0, r1, r2}
 800a7f4: 8d f8 f0 63                  	strb.w	r6, [sp, #1008]
 800a7f8: 4f f0 00 0b                  	mov.w	r11, #0
 800a7fc: cd f8 f2 03                  	str.w	r0, [sp, #1010]
 800a800: 00 20                        	movs	r0, #0
 800a802: 09 90                        	str	r0, [sp, #36]
 800a804: cd f8 f6 13                  	str.w	r1, [sp, #1014]
 800a808: cd f8 fa 23                  	str.w	r2, [sp, #1018]
 800a80c: ad f8 fe 33                  	strh.w	r3, [sp, #1022]
 800a810: 00 20                        	movs	r0, #0
 800a812: a6 90                        	str	r0, [sp, #664]
 800a814: 00 20                        	movs	r0, #0
 800a816: a2 90                        	str	r0, [sp, #648]
 800a818: 00 20                        	movs	r0, #0
 800a81a: a3 90                        	str	r0, [sp, #652]
 800a81c: 00 20                        	movs	r0, #0
 800a81e: a1 90                        	str	r0, [sp, #644]
 800a820: 00 20                        	movs	r0, #0
 800a822: a7 90                        	str	r0, [sp, #668]
 800a824: 00 20                        	movs	r0, #0
 800a826: 9b 90                        	str	r0, [sp, #620]
 800a828: 00 20                        	movs	r0, #0
 800a82a: 9f 90                        	str	r0, [sp, #636]
 800a82c: 00 20                        	movs	r0, #0
 800a82e: 06 90                        	str	r0, [sp, #24]
 800a830: 00 20                        	movs	r0, #0
 800a832: 07 90                        	str	r0, [sp, #28]
 800a834: 00 20                        	movs	r0, #0
 800a836: 08 90                        	str	r0, [sp, #32]
 800a838: 2d e2                        	b	#1114 <$t.24+0x6b14>
;                 Ok(ReturnParameters::GapDeleteAdType(to_status(&bytes[3..])?))
 800a83a: a7 f1 48 02                  	sub.w	r2, r7, #72
 800a83e: 37 f8 3c 3c                  	ldrh	r3, [r7, #-60]
 800a842: 8d f8 f1 43                  	strb.w	r4, [sp, #1009]
 800a846: 07 ca                        	ldm	r2, {r0, r1, r2}
 800a848: 8d f8 f0 53                  	strb.w	r5, [sp, #1008]
 800a84c: 52 e2                        	b	#1188 <$t.24+0x6b72>
;                     Ok(ReturnParameters::GapResolvePrivateAddress(to_status(
 800a84e: a7 f1 48 02                  	sub.w	r2, r7, #72
 800a852: 37 f8 3c 3c                  	ldrh	r3, [r7, #-60]
 800a856: 8d f8 f1 43                  	strb.w	r4, [sp, #1009]
 800a85a: 1d 26                        	movs	r6, #29
 800a85c: 07 ca                        	ldm	r2, {r0, r1, r2}
 800a85e: 8d f8 f0 63                  	strb.w	r6, [sp, #1008]
 800a862: 4f f0 00 0b                  	mov.w	r11, #0
 800a866: cd f8 f2 03                  	str.w	r0, [sp, #1010]
 800a86a: 00 20                        	movs	r0, #0
 800a86c: 06 90                        	str	r0, [sp, #24]
 800a86e: cd f8 f6 13                  	str.w	r1, [sp, #1014]
 800a872: cd f8 fa 23                  	str.w	r2, [sp, #1018]
 800a876: ad f8 fe 33                  	strh.w	r3, [sp, #1022]
 800a87a: 00 20                        	movs	r0, #0
 800a87c: a6 90                        	str	r0, [sp, #664]
 800a87e: 00 20                        	movs	r0, #0
 800a880: a2 90                        	str	r0, [sp, #648]
 800a882: 00 20                        	movs	r0, #0
 800a884: a3 90                        	str	r0, [sp, #652]
 800a886: 00 20                        	movs	r0, #0
 800a888: a1 90                        	str	r0, [sp, #644]
 800a88a: 00 20                        	movs	r0, #0
 800a88c: a7 90                        	str	r0, [sp, #668]
 800a88e: 00 20                        	movs	r0, #0
 800a890: 9b 90                        	str	r0, [sp, #620]
 800a892: 00 20                        	movs	r0, #0
 800a894: 9f 90                        	str	r0, [sp, #636]
 800a896: f8 e1                        	b	#1008 <$t.24+0x6b08>
 800a898: 09 20                        	movs	r0, #9
 800a89a: 01 26                        	movs	r6, #1
 800a89c: 03 90                        	str	r0, [sp, #12]
 800a89e: 00 20                        	movs	r0, #0
 800a8a0: 94 90                        	str	r0, [sp, #592]
 800a8a2: 01 24                        	movs	r4, #1
 800a8a4: 00 20                        	movs	r0, #0
 800a8a6: 00 f0 cc bc                  	b.w	#2456 <$t.24+0x70c0>
;                 Ok(ReturnParameters::GapSetEventMask(to_status(&bytes[3..])?))
 800a8aa: a7 f1 48 02                  	sub.w	r2, r7, #72
 800a8ae: 37 f8 3c 3c                  	ldrh	r3, [r7, #-60]
 800a8b2: 18 26                        	movs	r6, #24
 800a8b4: 8d f8 f1 43                  	strb.w	r4, [sp, #1009]
 800a8b8: 54 e2                        	b	#1192 <$t.24+0x6be2>
 800a8ba: 00 23                        	movs	r3, #0
 800a8bc: 01 21                        	movs	r1, #1
 800a8be: 94 93                        	str	r3, [sp, #592]
 800a8c0: 19 22                        	movs	r2, #25
 800a8c2: 00 24                        	movs	r4, #0
 800a8c4: 4f f0 00 0e                  	mov.w	lr, #0
 800a8c8: 00 23                        	movs	r3, #0
 800a8ca: a7 93                        	str	r3, [sp, #668]
 800a8cc: 01 f0 84 bc                  	b.w	#6408 <$t.42+0x1e>
 800a8d0: 01 21                        	movs	r1, #1
 800a8d2: 4f f0 03 09                  	mov.w	r9, #3
 800a8d6: 02 e0                        	b	#4 <$t.24+0x675c>
 800a8d8: 01 21                        	movs	r1, #1
 800a8da: 4f f0 05 09                  	mov.w	r9, #5
 800a8de: 00 22                        	movs	r2, #0
 800a8e0: 00 26                        	movs	r6, #0
 800a8e2: 94 92                        	str	r2, [sp, #592]
 800a8e4: 00 22                        	movs	r2, #0
 800a8e6: a7 92                        	str	r2, [sp, #668]
 800a8e8: cd f8 fc c3                  	str.w	r12, [sp, #1020]
 800a8ec: cd f8 f8 93                  	str.w	r9, [sp, #1016]
 800a8f0: fd 90                        	str	r0, [sp, #1012]
 800a8f2: 46 ea 03 40                  	orr.w	r0, r6, r3, lsl #16
 800a8f6: ad f8 f2 83                  	strh.w	r8, [sp, #1010]
 800a8fa: 8d f8 f1 e3                  	strb.w	lr, [sp, #1009]
 800a8fe: 8d f8 f0 13                  	strb.w	r1, [sp, #1008]
 800a902: 01 f0 7b bc                  	b.w	#6390 <$t.42+0x42>
;         intrinsics::offset(self, count)
 800a906: 08 f1 06 01                  	add.w	r1, r8, #6
 800a90a: 0d f5 83 60                  	add.w	r0, sp, #1048
;         status: to_status(bytes)?,
 800a90e: 0c f0 5d fd                  	bl	#51898
;         self
 800a912: 9d f8 18 04                  	ldrb.w	r0, [sp, #1048]
;         status: to_status(bytes)?,
 800a916: 01 28                        	cmp	r0, #1
 800a918: 40 f0 57 85                  	bne.w	#2734 <$t.26+0x3e>
;         self
 800a91c: 9d f8 53 14                  	ldrb.w	r1, [sp, #1107]
 800a920: 8a 91                        	str	r1, [sp, #552]
 800a922: 9d f8 52 14                  	ldrb.w	r1, [sp, #1106]
 800a926: 86 91                        	str	r1, [sp, #536]
 800a928: 9d f8 51 14                  	ldrb.w	r1, [sp, #1105]
 800a92c: 73 91                        	str	r1, [sp, #460]
 800a92e: 9d f8 50 14                  	ldrb.w	r1, [sp, #1104]
 800a932: 1e 91                        	str	r1, [sp, #120]
 800a934: dd f8 4c 14                  	ldr.w	r1, [sp, #1100]
 800a938: dd f8 20 94                  	ldr.w	r9, [sp, #1056]
 800a93c: 91 91                        	str	r1, [sp, #580]
 800a93e: 9d f8 49 14                  	ldrb.w	r1, [sp, #1097]
 800a942: dd f8 34 04                  	ldr.w	r0, [sp, #1076]
 800a946: 4f ea 19 23                  	lsr.w	r3, r9, #8
 800a94a: dd f8 24 24                  	ldr.w	r2, [sp, #1060]
 800a94e: 00 91                        	str	r1, [sp]
 800a950: 9d f8 48 14                  	ldrb.w	r1, [sp, #1096]
 800a954: a7 90                        	str	r0, [sp, #668]
 800a956: 43 ea 02 6e                  	orr.w	lr, r3, r2, lsl #24
 800a95a: dd f8 30 04                  	ldr.w	r0, [sp, #1072]
 800a95e: 4f ea 19 43                  	lsr.w	r3, r9, #16
 800a962: bd f8 4a 44                  	ldrh.w	r4, [sp, #1098]
 800a966: 43 ea 02 48                  	orr.w	r8, r3, r2, lsl #16
 800a96a: 01 91                        	str	r1, [sp, #4]
 800a96c: 9d f8 41 14                  	ldrb.w	r1, [sp, #1089]
 800a970: 03 90                        	str	r0, [sp, #12]
;         status: to_status(bytes)?,
 800a972: 23 0a                        	lsrs	r3, r4, #8
;         self
 800a974: dd f8 54 04                  	ldr.w	r0, [sp, #1108]
 800a978: 05 91                        	str	r1, [sp, #20]
 800a97a: 9d f8 40 14                  	ldrb.w	r1, [sp, #1088]
 800a97e: 02 91                        	str	r1, [sp, #8]
 800a980: dd f8 3c 14                  	ldr.w	r1, [sp, #1084]
 800a984: a9 91                        	str	r1, [sp, #676]
 800a986: dd f8 38 14                  	ldr.w	r1, [sp, #1080]
 800a98a: 04 91                        	str	r1, [sp, #16]
;         Err(v)
 800a98c: 94 93                        	str	r3, [sp, #592]
 800a98e: 03 0e                        	lsrs	r3, r0, #24
;         self
 800a990: dd f8 2c c4                  	ldr.w	r12, [sp, #1068]
 800a994: dd f8 28 14                  	ldr.w	r1, [sp, #1064]
;         Err(v)
 800a998: 8d 93                        	str	r3, [sp, #564]
 800a99a: 03 0c                        	lsrs	r3, r0, #16
;         self
 800a99c: dd f8 44 64                  	ldr.w	r6, [sp, #1092]
 800a9a0: bd f8 42 54                  	ldrh.w	r5, [sp, #1090]
 800a9a4: 8c 93                        	str	r3, [sp, #560]
 800a9a6: 2c f0 ff 03                  	bic	r3, r12, #255
 800a9aa: 1f 94                        	str	r4, [sp, #124]
;         Err(v)
 800a9ac: 0c 0a                        	lsrs	r4, r1, #8
 800a9ae: 8e 90                        	str	r0, [sp, #568]
 800a9b0: 00 0a                        	lsrs	r0, r0, #8
;         self
 800a9b2: 8b 90                        	str	r0, [sp, #556]
 800a9b4: 5f fa 8c f0                  	uxtb.w	r0, r12
 800a9b8: 18 43                        	orrs	r0, r3
;         Err(v)
 800a9ba: ff 90                        	str	r0, [sp, #1020]
;         self
 800a9bc: c8 b2                        	uxtb	r0, r1
 800a9be: 40 ea 04 20                  	orr.w	r0, r0, r4, lsl #8
;         Err(v)
 800a9c2: cd e9 fd 20                  	strd	r2, r0, [sp, #1012]
 800a9c6: 45 ea 06 40                  	orr.w	r0, r5, r6, lsl #16
 800a9ca: ad f8 f2 83                  	strh.w	r8, [sp, #1010]
 800a9ce: 8d f8 f1 e3                  	strb.w	lr, [sp, #1009]
 800a9d2: 8d f8 f0 93                  	strb.w	r9, [sp, #1008]
 800a9d6: 9a 90                        	str	r0, [sp, #616]
 800a9d8: 30 0e                        	lsrs	r0, r6, #24
 800a9da: 96 90                        	str	r0, [sp, #600]
 800a9dc: 30 0c                        	lsrs	r0, r6, #16
 800a9de: 01 f0 11 bc                  	b.w	#6178 <$t.42+0x4a>
;             crate::opcode::GATT_SIGNED_WRITE_WITHOUT_RESPONSE => Ok(
 800a9e2: a7 f1 48 02                  	sub.w	r2, r7, #72
 800a9e6: 37 f8 3c 3c                  	ldrh	r3, [r7, #-60]
 800a9ea: 8d f8 f1 43                  	strb.w	r4, [sp, #1009]
 800a9ee: 2b 26                        	movs	r6, #43
 800a9f0: 07 ca                        	ldm	r2, {r0, r1, r2}
 800a9f2: 8d f8 f0 63                  	strb.w	r6, [sp, #1008]
 800a9f6: 4f f0 00 0b                  	mov.w	r11, #0
 800a9fa: cd f8 f2 03                  	str.w	r0, [sp, #1010]
 800a9fe: 00 20                        	movs	r0, #0
 800aa00: 0b 90                        	str	r0, [sp, #44]
 800aa02: cd f8 f6 13                  	str.w	r1, [sp, #1014]
 800aa06: cd f8 fa 23                  	str.w	r2, [sp, #1018]
 800aa0a: ad f8 fe 33                  	strh.w	r3, [sp, #1022]
 800aa0e: 00 20                        	movs	r0, #0
 800aa10: a6 90                        	str	r0, [sp, #664]
 800aa12: 00 20                        	movs	r0, #0
 800aa14: a2 90                        	str	r0, [sp, #648]
 800aa16: 00 20                        	movs	r0, #0
 800aa18: a3 90                        	str	r0, [sp, #652]
 800aa1a: 00 20                        	movs	r0, #0
 800aa1c: a1 90                        	str	r0, [sp, #644]
 800aa1e: 00 20                        	movs	r0, #0
 800aa20: a7 90                        	str	r0, [sp, #668]
 800aa22: 00 20                        	movs	r0, #0
 800aa24: 9b 90                        	str	r0, [sp, #620]
 800aa26: 00 20                        	movs	r0, #0
 800aa28: 9f 90                        	str	r0, [sp, #636]
 800aa2a: 00 20                        	movs	r0, #0
 800aa2c: 06 90                        	str	r0, [sp, #24]
 800aa2e: 00 20                        	movs	r0, #0
 800aa30: 07 90                        	str	r0, [sp, #28]
 800aa32: 00 20                        	movs	r0, #0
 800aa34: 08 90                        	str	r0, [sp, #32]
 800aa36: 00 20                        	movs	r0, #0
 800aa38: 09 90                        	str	r0, [sp, #36]
 800aa3a: 00 20                        	movs	r0, #0
 800aa3c: 0a 90                        	str	r0, [sp, #40]
 800aa3e: 2e e1                        	b	#604 <$t.24+0x6b1c>
;             crate::opcode::GAP_AUTHORIZATION_RESPONSE => Ok(
 800aa40: a7 f1 48 02                  	sub.w	r2, r7, #72
 800aa44: 37 f8 3c 3c                  	ldrh	r3, [r7, #-60]
 800aa48: 8d f8 f1 43                  	strb.w	r4, [sp, #1009]
 800aa4c: 11 26                        	movs	r6, #17
 800aa4e: bb e0                        	b	#374 <$t.24+0x6a46>
;                 Ok(ReturnParameters::GattAllowRead(to_status(&bytes[3..])?))
 800aa50: a7 f1 48 02                  	sub.w	r2, r7, #72
 800aa54: 37 f8 3c 3c                  	ldrh	r3, [r7, #-60]
 800aa58: 2e 26                        	movs	r6, #46
 800aa5a: 8d f8 f1 43                  	strb.w	r4, [sp, #1009]
 800aa5e: 07 ca                        	ldm	r2, {r0, r1, r2}
 800aa60: 4f f0 00 0b                  	mov.w	r11, #0
 800aa64: cd f8 f2 03                  	str.w	r0, [sp, #1010]
 800aa68: 00 20                        	movs	r0, #0
 800aa6a: 96 90                        	str	r0, [sp, #600]
 800aa6c: 8d f8 f0 63                  	strb.w	r6, [sp, #1008]
 800aa70: cd f8 f6 13                  	str.w	r1, [sp, #1014]
 800aa74: cd f8 fa 23                  	str.w	r2, [sp, #1018]
 800aa78: ad f8 fe 33                  	strh.w	r3, [sp, #1022]
 800aa7c: 00 20                        	movs	r0, #0
 800aa7e: a6 90                        	str	r0, [sp, #664]
 800aa80: 00 20                        	movs	r0, #0
 800aa82: a2 90                        	str	r0, [sp, #648]
 800aa84: 00 20                        	movs	r0, #0
 800aa86: a3 90                        	str	r0, [sp, #652]
 800aa88: 00 20                        	movs	r0, #0
 800aa8a: a1 90                        	str	r0, [sp, #644]
 800aa8c: 00 20                        	movs	r0, #0
 800aa8e: a7 90                        	str	r0, [sp, #668]
 800aa90: 00 20                        	movs	r0, #0
 800aa92: 9b 90                        	str	r0, [sp, #620]
 800aa94: 00 20                        	movs	r0, #0
 800aa96: 9f 90                        	str	r0, [sp, #636]
 800aa98: 00 20                        	movs	r0, #0
 800aa9a: 06 90                        	str	r0, [sp, #24]
 800aa9c: 00 20                        	movs	r0, #0
 800aa9e: 07 90                        	str	r0, [sp, #28]
 800aaa0: 00 20                        	movs	r0, #0
 800aaa2: 08 90                        	str	r0, [sp, #32]
 800aaa4: 00 20                        	movs	r0, #0
 800aaa6: 09 90                        	str	r0, [sp, #36]
 800aaa8: 00 20                        	movs	r0, #0
 800aaaa: 0a 90                        	str	r0, [sp, #40]
 800aaac: 00 20                        	movs	r0, #0
 800aaae: 0b 90                        	str	r0, [sp, #44]
 800aab0: 00 20                        	movs	r0, #0
 800aab2: a9 90                        	str	r0, [sp, #676]
 800aab4: 00 20                        	movs	r0, #0
 800aab6: 05 90                        	str	r0, [sp, #20]
 800aab8: 00 20                        	movs	r0, #0
 800aaba: 9a 90                        	str	r0, [sp, #616]
 800aabc: 00 20                        	movs	r0, #0
 800aabe: 28 90                        	str	r0, [sp, #160]
 800aac0: f7 e0                        	b	#494 <$t.24+0x6b30>
;             crate::opcode::GATT_CONFIRM_INDICATION => Ok(ReturnParameters::GattConfirmIndication(
 800aac2: a7 f1 48 02                  	sub.w	r2, r7, #72
 800aac6: 37 f8 3c 3c                  	ldrh	r3, [r7, #-60]
 800aaca: 2c 26                        	movs	r6, #44
 800aacc: 8d f8 f1 43                  	strb.w	r4, [sp, #1009]
 800aad0: 07 ca                        	ldm	r2, {r0, r1, r2}
 800aad2: 4f f0 00 0b                  	mov.w	r11, #0
 800aad6: cd f8 f2 03                  	str.w	r0, [sp, #1010]
 800aada: 00 20                        	movs	r0, #0
 800aadc: 9a 90                        	str	r0, [sp, #616]
 800aade: 8d f8 f0 63                  	strb.w	r6, [sp, #1008]
 800aae2: cd f8 f6 13                  	str.w	r1, [sp, #1014]
 800aae6: cd f8 fa 23                  	str.w	r2, [sp, #1018]
 800aaea: ad f8 fe 33                  	strh.w	r3, [sp, #1022]
 800aaee: 00 20                        	movs	r0, #0
 800aaf0: a6 90                        	str	r0, [sp, #664]
 800aaf2: 00 20                        	movs	r0, #0
 800aaf4: a2 90                        	str	r0, [sp, #648]
 800aaf6: 00 20                        	movs	r0, #0
 800aaf8: a3 90                        	str	r0, [sp, #652]
 800aafa: 00 20                        	movs	r0, #0
 800aafc: a1 90                        	str	r0, [sp, #644]
 800aafe: 00 20                        	movs	r0, #0
 800ab00: a7 90                        	str	r0, [sp, #668]
 800ab02: 00 20                        	movs	r0, #0
 800ab04: 9b 90                        	str	r0, [sp, #620]
 800ab06: 00 20                        	movs	r0, #0
 800ab08: 9f 90                        	str	r0, [sp, #636]
 800ab0a: 00 20                        	movs	r0, #0
 800ab0c: 06 90                        	str	r0, [sp, #24]
 800ab0e: 00 20                        	movs	r0, #0
 800ab10: 07 90                        	str	r0, [sp, #28]
 800ab12: 00 20                        	movs	r0, #0
 800ab14: 08 90                        	str	r0, [sp, #32]
 800ab16: 00 20                        	movs	r0, #0
 800ab18: 09 90                        	str	r0, [sp, #36]
 800ab1a: 00 20                        	movs	r0, #0
 800ab1c: 0a 90                        	str	r0, [sp, #40]
 800ab1e: 00 20                        	movs	r0, #0
 800ab20: 0b 90                        	str	r0, [sp, #44]
 800ab22: 00 20                        	movs	r0, #0
 800ab24: a9 90                        	str	r0, [sp, #676]
 800ab26: 00 20                        	movs	r0, #0
 800ab28: 05 90                        	str	r0, [sp, #20]
 800ab2a: be e0                        	b	#380 <$t.24+0x6b28>
;             crate::opcode::L2CAP_CONN_PARAM_UPDATE_RESP => Ok(
 800ab2c: a7 f1 48 02                  	sub.w	r2, r7, #72
 800ab30: 37 f8 3c 3c                  	ldrh	r3, [r7, #-60]
 800ab34: 32 26                        	movs	r6, #50
 800ab36: 8d f8 f1 43                  	strb.w	r4, [sp, #1009]
 800ab3a: 07 ca                        	ldm	r2, {r0, r1, r2}
 800ab3c: 4f f0 00 0b                  	mov.w	r11, #0
 800ab40: cd f8 f2 03                  	str.w	r0, [sp, #1010]
 800ab44: 00 20                        	movs	r0, #0
 800ab46: 04 90                        	str	r0, [sp, #16]
 800ab48: 8d f8 f0 63                  	strb.w	r6, [sp, #1008]
 800ab4c: cd f8 f6 13                  	str.w	r1, [sp, #1014]
 800ab50: cd f8 fa 23                  	str.w	r2, [sp, #1018]
 800ab54: ad f8 fe 33                  	strh.w	r3, [sp, #1022]
 800ab58: 00 20                        	movs	r0, #0
 800ab5a: a6 90                        	str	r0, [sp, #664]
 800ab5c: 00 20                        	movs	r0, #0
 800ab5e: a2 90                        	str	r0, [sp, #648]
 800ab60: 00 20                        	movs	r0, #0
 800ab62: a3 90                        	str	r0, [sp, #652]
 800ab64: 00 20                        	movs	r0, #0
 800ab66: a1 90                        	str	r0, [sp, #644]
 800ab68: 00 20                        	movs	r0, #0
 800ab6a: a7 90                        	str	r0, [sp, #668]
 800ab6c: 00 20                        	movs	r0, #0
 800ab6e: 9b 90                        	str	r0, [sp, #620]
 800ab70: 00 20                        	movs	r0, #0
 800ab72: 9f 90                        	str	r0, [sp, #636]
 800ab74: 00 20                        	movs	r0, #0
 800ab76: 06 90                        	str	r0, [sp, #24]
 800ab78: 00 20                        	movs	r0, #0
 800ab7a: 07 90                        	str	r0, [sp, #28]
 800ab7c: 00 20                        	movs	r0, #0
 800ab7e: 08 90                        	str	r0, [sp, #32]
 800ab80: 00 f0 73 bc                  	b.w	#2278 <$t.28+0x70>
;             crate::opcode::GAP_SET_NONDISCOVERABLE => Ok(ReturnParameters::GapSetNonDiscoverable(
 800ab84: a7 f1 48 02                  	sub.w	r2, r7, #72
 800ab88: 37 f8 3c 3c                  	ldrh	r3, [r7, #-60]
 800ab8c: 8d f8 f1 43                  	strb.w	r4, [sp, #1009]
 800ab90: 0a 26                        	movs	r6, #10
 800ab92: 07 ca                        	ldm	r2, {r0, r1, r2}
 800ab94: 8d f8 f0 63                  	strb.w	r6, [sp, #1008]
 800ab98: 4f f0 00 0b                  	mov.w	r11, #0
 800ab9c: cd f8 f2 03                  	str.w	r0, [sp, #1010]
 800aba0: 00 20                        	movs	r0, #0
 800aba2: a2 90                        	str	r0, [sp, #648]
 800aba4: cd f8 f6 13                  	str.w	r1, [sp, #1014]
 800aba8: cd f8 fa 23                  	str.w	r2, [sp, #1018]
 800abac: ad f8 fe 33                  	strh.w	r3, [sp, #1022]
 800abb0: 00 20                        	movs	r0, #0
 800abb2: a6 90                        	str	r0, [sp, #664]
 800abb4: 00 20                        	movs	r0, #0
 800abb6: a3 90                        	str	r0, [sp, #652]
 800abb8: 5d e0                        	b	#186 <$t.24+0x6af4>
;             crate::opcode::GAP_PASS_KEY_RESPONSE => Ok(ReturnParameters::GapPassKeyResponse(
 800abba: a7 f1 48 02                  	sub.w	r2, r7, #72
 800abbe: 37 f8 3c 3c                  	ldrh	r3, [r7, #-60]
 800abc2: 8d f8 f1 43                  	strb.w	r4, [sp, #1009]
 800abc6: 10 26                        	movs	r6, #16
 800abc8: 07 ca                        	ldm	r2, {r0, r1, r2}
 800abca: 8d f8 f0 63                  	strb.w	r6, [sp, #1008]
 800abce: 4f f0 00 0b                  	mov.w	r11, #0
 800abd2: cd f8 f2 03                  	str.w	r0, [sp, #1010]
 800abd6: 00 20                        	movs	r0, #0
 800abd8: a1 90                        	str	r0, [sp, #644]
 800abda: cd f8 f6 13                  	str.w	r1, [sp, #1014]
 800abde: cd f8 fa 23                  	str.w	r2, [sp, #1018]
 800abe2: ad f8 fe 33                  	strh.w	r3, [sp, #1022]
 800abe6: 00 20                        	movs	r0, #0
 800abe8: a6 90                        	str	r0, [sp, #664]
 800abea: 00 20                        	movs	r0, #0
 800abec: a2 90                        	str	r0, [sp, #648]
 800abee: 00 20                        	movs	r0, #0
 800abf0: a3 90                        	str	r0, [sp, #652]
 800abf2: 42 e0                        	b	#132 <$t.24+0x6af8>
;             crate::opcode::GATT_INIT => Ok(ReturnParameters::GattInit(to_status(&bytes[3..])?)),
 800abf4: a7 f1 48 02                  	sub.w	r2, r7, #72
 800abf8: 37 f8 3c 3c                  	ldrh	r3, [r7, #-60]
 800abfc: 8d f8 f1 43                  	strb.w	r4, [sp, #1009]
 800ac00: 20 26                        	movs	r6, #32
 800ac02: 07 ca                        	ldm	r2, {r0, r1, r2}
 800ac04: 8d f8 f0 63                  	strb.w	r6, [sp, #1008]
 800ac08: 4f f0 00 0b                  	mov.w	r11, #0
 800ac0c: cd f8 f2 03                  	str.w	r0, [sp, #1010]
 800ac10: 00 20                        	movs	r0, #0
 800ac12: 07 90                        	str	r0, [sp, #28]
 800ac14: cd f8 f6 13                  	str.w	r1, [sp, #1014]
 800ac18: cd f8 fa 23                  	str.w	r2, [sp, #1018]
 800ac1c: ad f8 fe 33                  	strh.w	r3, [sp, #1022]
 800ac20: 00 20                        	movs	r0, #0
 800ac22: a6 90                        	str	r0, [sp, #664]
 800ac24: 00 20                        	movs	r0, #0
 800ac26: a2 90                        	str	r0, [sp, #648]
 800ac28: 00 20                        	movs	r0, #0
 800ac2a: a3 90                        	str	r0, [sp, #652]
 800ac2c: 00 20                        	movs	r0, #0
 800ac2e: a1 90                        	str	r0, [sp, #644]
 800ac30: 00 20                        	movs	r0, #0
 800ac32: a7 90                        	str	r0, [sp, #668]
 800ac34: 00 20                        	movs	r0, #0
 800ac36: 9b 90                        	str	r0, [sp, #620]
 800ac38: 00 20                        	movs	r0, #0
 800ac3a: 9f 90                        	str	r0, [sp, #636]
 800ac3c: 00 20                        	movs	r0, #0
 800ac3e: 06 90                        	str	r0, [sp, #24]
 800ac40: 25 e0                        	b	#74 <$t.24+0x6b0c>
;             crate::opcode::GAP_SET_IO_CAPABILITY => Ok(ReturnParameters::GapSetIoCapability(
 800ac42: a7 f1 48 02                  	sub.w	r2, r7, #72
 800ac46: 37 f8 3c 3c                  	ldrh	r3, [r7, #-60]
 800ac4a: 8d f8 f1 43                  	strb.w	r4, [sp, #1009]
 800ac4e: 0d 26                        	movs	r6, #13
 800ac50: 07 ca                        	ldm	r2, {r0, r1, r2}
 800ac52: 8d f8 f0 63                  	strb.w	r6, [sp, #1008]
 800ac56: 4f f0 00 0b                  	mov.w	r11, #0
 800ac5a: cd f8 f2 03                  	str.w	r0, [sp, #1010]
 800ac5e: 00 20                        	movs	r0, #0
 800ac60: a3 90                        	str	r0, [sp, #652]
 800ac62: cd f8 f6 13                  	str.w	r1, [sp, #1014]
 800ac66: cd f8 fa 23                  	str.w	r2, [sp, #1018]
 800ac6a: ad f8 fe 33                  	strh.w	r3, [sp, #1022]
 800ac6e: 00 20                        	movs	r0, #0
 800ac70: a6 90                        	str	r0, [sp, #664]
 800ac72: 00 20                        	movs	r0, #0
 800ac74: a2 90                        	str	r0, [sp, #648]
 800ac76: 00 20                        	movs	r0, #0
 800ac78: a1 90                        	str	r0, [sp, #644]
 800ac7a: 00 20                        	movs	r0, #0
 800ac7c: a7 90                        	str	r0, [sp, #668]
 800ac7e: 00 20                        	movs	r0, #0
 800ac80: 9b 90                        	str	r0, [sp, #620]
 800ac82: 00 20                        	movs	r0, #0
 800ac84: 9f 90                        	str	r0, [sp, #636]
 800ac86: 00 20                        	movs	r0, #0
 800ac88: 06 90                        	str	r0, [sp, #24]
 800ac8a: 00 20                        	movs	r0, #0
 800ac8c: 07 90                        	str	r0, [sp, #28]
 800ac8e: 00 20                        	movs	r0, #0
 800ac90: 08 90                        	str	r0, [sp, #32]
 800ac92: 00 20                        	movs	r0, #0
 800ac94: 09 90                        	str	r0, [sp, #36]
 800ac96: 00 20                        	movs	r0, #0
 800ac98: 0a 90                        	str	r0, [sp, #40]
 800ac9a: 00 20                        	movs	r0, #0
 800ac9c: 0b 90                        	str	r0, [sp, #44]
 800ac9e: 00 20                        	movs	r0, #0
 800aca0: a9 90                        	str	r0, [sp, #676]
 800aca2: 00 20                        	movs	r0, #0
 800aca4: 05 90                        	str	r0, [sp, #20]
 800aca6: 00 20                        	movs	r0, #0
 800aca8: 9a 90                        	str	r0, [sp, #616]
 800acaa: 00 20                        	movs	r0, #0
 800acac: 28 90                        	str	r0, [sp, #160]
 800acae: 00 20                        	movs	r0, #0
 800acb0: 96 90                        	str	r0, [sp, #600]
 800acb2: 00 20                        	movs	r0, #0
 800acb4: 94 90                        	str	r0, [sp, #592]
 800acb6: 00 20                        	movs	r0, #0
 800acb8: 0d 90                        	str	r0, [sp, #52]
 800acba: 00 20                        	movs	r0, #0
 800acbc: 0c 90                        	str	r0, [sp, #48]
 800acbe: 00 20                        	movs	r0, #0
 800acc0: 4f f0 00 0a                  	mov.w	r10, #0
 800acc4: 18 90                        	str	r0, [sp, #96]
 800acc6: 00 20                        	movs	r0, #0
 800acc8: 00 21                        	movs	r1, #0
;         match hci::Opcode(LittleEndian::read_u16(&bytes[1..])) {
 800acca: 21 91                        	str	r1, [sp, #132]
 800accc: 01 f0 c3 ba                  	b.w	#5510 <$t.42+0x9c>
;             crate::opcode::GATT_DELETE_INCLUDED_SERVICE => Ok(
 800acd0: a7 f1 48 02                  	sub.w	r2, r7, #72
 800acd4: 37 f8 3c 3c                  	ldrh	r3, [r7, #-60]
 800acd8: 28 26                        	movs	r6, #40
 800acda: 8d f8 f1 43                  	strb.w	r4, [sp, #1009]
 800acde: e7 e1                        	b	#974 <$t.24+0x6f2e>
;             crate::opcode::GAP_SET_UNDIRECTED_CONNECTABLE => Ok(
 800ace0: a7 f1 48 02                  	sub.w	r2, r7, #72
 800ace4: 37 f8 3c 3c                  	ldrh	r3, [r7, #-60]
 800ace8: 14 26                        	movs	r6, #20
 800acea: 8d f8 f1 43                  	strb.w	r4, [sp, #1009]
 800acee: 07 ca                        	ldm	r2, {r0, r1, r2}
 800acf0: 8d f8 f0 63                  	strb.w	r6, [sp, #1008]
 800acf4: cd f8 f2 03                  	str.w	r0, [sp, #1010]
 800acf8: 00 20                        	movs	r0, #0
 800acfa: 9b 90                        	str	r0, [sp, #620]
 800acfc: 4f f0 00 0b                  	mov.w	r11, #0
 800ad00: cd f8 f6 13                  	str.w	r1, [sp, #1014]
 800ad04: cd f8 fa 23                  	str.w	r2, [sp, #1018]
 800ad08: ad f8 fe 33                  	strh.w	r3, [sp, #1022]
 800ad0c: 00 20                        	movs	r0, #0
 800ad0e: a6 90                        	str	r0, [sp, #664]
 800ad10: 00 20                        	movs	r0, #0
 800ad12: a2 90                        	str	r0, [sp, #648]
 800ad14: 00 20                        	movs	r0, #0
 800ad16: a3 90                        	str	r0, [sp, #652]
 800ad18: 00 20                        	movs	r0, #0
 800ad1a: a1 90                        	str	r0, [sp, #644]
 800ad1c: 00 20                        	movs	r0, #0
 800ad1e: a7 90                        	str	r0, [sp, #668]
 800ad20: af e7                        	b	#-162 <$t.24+0x6b00>
 800ad22: 00 21                        	movs	r1, #0
 800ad24: 4f f0 07 0e                  	mov.w	lr, #7
 800ad28: 94 91                        	str	r1, [sp, #592]
 800ad2a: 01 21                        	movs	r1, #1
 800ad2c: 00 25                        	movs	r5, #0
 800ad2e: 4f f0 00 09                  	mov.w	r9, #0
 800ad32: 00 22                        	movs	r2, #0
 800ad34: a7 92                        	str	r2, [sp, #668]
;         Err(v)
 800ad36: cd f8 fc c3                  	str.w	r12, [sp, #1020]
 800ad3a: cd e9 fd 0e                  	strd	r0, lr, [sp, #1012]
;         self
 800ad3e: c8 b2                        	uxtb	r0, r1
 800ad40: 45 ea 00 40                  	orr.w	r0, r5, r0, lsl #16
;         Err(v)
 800ad44: ad f8 f2 83                  	strh.w	r8, [sp, #1010]
;             crate::opcode::GAP_INIT => Ok(ReturnParameters::GapInit(to_gap_init(&bytes[3..])?)),
 800ad48: 00 0c                        	lsrs	r0, r0, #16
;         Err(v)
 800ad4a: ad f8 f0 03                  	strh.w	r0, [sp, #1008]
 800ad4e: 49 ea 03 40                  	orr.w	r0, r9, r3, lsl #16
 800ad52: 01 f0 53 ba                  	b.w	#5286 <$t.42+0x42>
;             crate::opcode::GAP_CLEAR_SECURITY_DATABASE => Ok(
 800ad56: a7 f1 48 02                  	sub.w	r2, r7, #72
 800ad5a: 37 f8 3c 3c                  	ldrh	r3, [r7, #-60]
 800ad5e: 8d f8 f1 43                  	strb.w	r4, [sp, #1009]
 800ad62: 1a 26                        	movs	r6, #26
 800ad64: 07 ca                        	ldm	r2, {r0, r1, r2}
 800ad66: 8d f8 f0 63                  	strb.w	r6, [sp, #1008]
 800ad6a: 4f f0 00 0b                  	mov.w	r11, #0
 800ad6e: cd f8 f2 03                  	str.w	r0, [sp, #1010]
 800ad72: 00 20                        	movs	r0, #0
 800ad74: 9f 90                        	str	r0, [sp, #636]
 800ad76: cd f8 f6 13                  	str.w	r1, [sp, #1014]
 800ad7a: cd f8 fa 23                  	str.w	r2, [sp, #1018]
 800ad7e: ad f8 fe 33                  	strh.w	r3, [sp, #1022]
 800ad82: 00 20                        	movs	r0, #0
 800ad84: a6 90                        	str	r0, [sp, #664]
 800ad86: 00 20                        	movs	r0, #0
 800ad88: a2 90                        	str	r0, [sp, #648]
 800ad8a: 00 20                        	movs	r0, #0
 800ad8c: a3 90                        	str	r0, [sp, #652]
 800ad8e: 00 20                        	movs	r0, #0
 800ad90: a1 90                        	str	r0, [sp, #644]
 800ad92: 00 20                        	movs	r0, #0
 800ad94: a7 90                        	str	r0, [sp, #668]
 800ad96: 00 20                        	movs	r0, #0
 800ad98: 9b 90                        	str	r0, [sp, #620]
 800ad9a: 74 e7                        	b	#-280 <$t.24+0x6b04>
 800ad9c: 9d f8 19 b4                  	ldrb.w	r11, [sp, #1049]
;         hci::Status::Success => {
 800ada0: bb f1 00 0f                  	cmp.w	r11, #0
 800ada4: 00 f0 01 86                  	beq.w	#3074 <$t.28+0x5b0>
 800ada8: 00 20                        	movs	r0, #0
 800adaa: 00 21                        	movs	r1, #0
 800adac: 25 90                        	str	r0, [sp, #148]
 800adae: 00 20                        	movs	r0, #0
 800adb0: 2b 90                        	str	r0, [sp, #172]
 800adb2: 00 20                        	movs	r0, #0
 800adb4: a6 90                        	str	r0, [sp, #664]
 800adb6: 00 20                        	movs	r0, #0
 800adb8: 2a 90                        	str	r0, [sp, #168]
 800adba: 00 20                        	movs	r0, #0
 800adbc: 87 90                        	str	r0, [sp, #540]
 800adbe: 00 20                        	movs	r0, #0
 800adc0: a5 90                        	str	r0, [sp, #660]
 800adc2: 00 20                        	movs	r0, #0
 800adc4: 59 90                        	str	r0, [sp, #356]
 800adc6: 00 20                        	movs	r0, #0
 800adc8: 2d 90                        	str	r0, [sp, #180]
 800adca: 00 20                        	movs	r0, #0
 800adcc: 32 90                        	str	r0, [sp, #200]
 800adce: 00 20                        	movs	r0, #0
 800add0: 5a 90                        	str	r0, [sp, #360]
 800add2: 00 20                        	movs	r0, #0
 800add4: 2f 90                        	str	r0, [sp, #188]
 800add6: 00 20                        	movs	r0, #0
 800add8: 2e 90                        	str	r0, [sp, #184]
 800adda: 00 20                        	movs	r0, #0
 800addc: 36 90                        	str	r0, [sp, #216]
 800adde: 00 20                        	movs	r0, #0
 800ade0: 5b 90                        	str	r0, [sp, #364]
 800ade2: 00 20                        	movs	r0, #0
 800ade4: 31 90                        	str	r0, [sp, #196]
 800ade6: 00 20                        	movs	r0, #0
 800ade8: 30 90                        	str	r0, [sp, #192]
 800adea: 00 20                        	movs	r0, #0
 800adec: 39 90                        	str	r0, [sp, #228]
 800adee: 00 20                        	movs	r0, #0
 800adf0: 5c 90                        	str	r0, [sp, #368]
 800adf2: 00 20                        	movs	r0, #0
 800adf4: 35 90                        	str	r0, [sp, #212]
 800adf6: 00 20                        	movs	r0, #0
 800adf8: 33 90                        	str	r0, [sp, #204]
 800adfa: 00 20                        	movs	r0, #0
 800adfc: 76 90                        	str	r0, [sp, #472]
 800adfe: 00 20                        	movs	r0, #0
 800ae00: 5d 90                        	str	r0, [sp, #372]
 800ae02: 00 20                        	movs	r0, #0
 800ae04: 38 90                        	str	r0, [sp, #224]
 800ae06: 00 20                        	movs	r0, #0
 800ae08: 37 90                        	str	r0, [sp, #220]
 800ae0a: 00 20                        	movs	r0, #0
 800ae0c: 77 90                        	str	r0, [sp, #476]
 800ae0e: 00 20                        	movs	r0, #0
 800ae10: 5e 90                        	str	r0, [sp, #376]
 800ae12: 00 20                        	movs	r0, #0
 800ae14: 3b 90                        	str	r0, [sp, #236]
 800ae16: 00 20                        	movs	r0, #0
 800ae18: 3a 90                        	str	r0, [sp, #232]
 800ae1a: 00 20                        	movs	r0, #0
 800ae1c: 78 90                        	str	r0, [sp, #480]
 800ae1e: 00 20                        	movs	r0, #0
 800ae20: 5f 90                        	str	r0, [sp, #380]
 800ae22: 00 20                        	movs	r0, #0
 800ae24: 3d 90                        	str	r0, [sp, #244]
 800ae26: 00 20                        	movs	r0, #0
 800ae28: 3c 90                        	str	r0, [sp, #240]
 800ae2a: 00 20                        	movs	r0, #0
 800ae2c: 79 90                        	str	r0, [sp, #484]
 800ae2e: 00 20                        	movs	r0, #0
 800ae30: 60 90                        	str	r0, [sp, #384]
 800ae32: 00 20                        	movs	r0, #0
 800ae34: 3f 90                        	str	r0, [sp, #252]
 800ae36: 00 20                        	movs	r0, #0
 800ae38: 3e 90                        	str	r0, [sp, #248]
 800ae3a: 00 20                        	movs	r0, #0
 800ae3c: 7a 90                        	str	r0, [sp, #488]
 800ae3e: 00 20                        	movs	r0, #0
 800ae40: 61 90                        	str	r0, [sp, #388]
 800ae42: 00 20                        	movs	r0, #0
 800ae44: 41 90                        	str	r0, [sp, #260]
 800ae46: 00 20                        	movs	r0, #0
 800ae48: 40 90                        	str	r0, [sp, #256]
 800ae4a: 00 20                        	movs	r0, #0
 800ae4c: 7b 90                        	str	r0, [sp, #492]
 800ae4e: 00 20                        	movs	r0, #0
 800ae50: 62 90                        	str	r0, [sp, #392]
 800ae52: 00 20                        	movs	r0, #0
 800ae54: 43 90                        	str	r0, [sp, #268]
 800ae56: 00 20                        	movs	r0, #0
 800ae58: 42 90                        	str	r0, [sp, #264]
 800ae5a: 00 20                        	movs	r0, #0
 800ae5c: 7c 90                        	str	r0, [sp, #496]
 800ae5e: 00 20                        	movs	r0, #0
 800ae60: 63 90                        	str	r0, [sp, #396]
 800ae62: 00 20                        	movs	r0, #0
 800ae64: 45 90                        	str	r0, [sp, #276]
 800ae66: 00 20                        	movs	r0, #0
 800ae68: 44 90                        	str	r0, [sp, #272]
 800ae6a: 00 20                        	movs	r0, #0
 800ae6c: 7e 90                        	str	r0, [sp, #504]
 800ae6e: 00 20                        	movs	r0, #0
 800ae70: 64 90                        	str	r0, [sp, #400]
 800ae72: 00 20                        	movs	r0, #0
 800ae74: 47 90                        	str	r0, [sp, #284]
 800ae76: 00 20                        	movs	r0, #0
 800ae78: 46 90                        	str	r0, [sp, #280]
 800ae7a: 00 20                        	movs	r0, #0
 800ae7c: 7f 90                        	str	r0, [sp, #508]
 800ae7e: 00 20                        	movs	r0, #0
 800ae80: 65 90                        	str	r0, [sp, #404]
 800ae82: 00 20                        	movs	r0, #0
 800ae84: 4a 90                        	str	r0, [sp, #296]
 800ae86: 00 20                        	movs	r0, #0
 800ae88: 49 90                        	str	r0, [sp, #292]
 800ae8a: 00 20                        	movs	r0, #0
 800ae8c: 80 90                        	str	r0, [sp, #512]
 800ae8e: 00 20                        	movs	r0, #0
 800ae90: 66 90                        	str	r0, [sp, #408]
 800ae92: 00 20                        	movs	r0, #0
 800ae94: 4c 90                        	str	r0, [sp, #304]
 800ae96: 00 20                        	movs	r0, #0
 800ae98: 4b 90                        	str	r0, [sp, #300]
 800ae9a: 00 20                        	movs	r0, #0
 800ae9c: 81 90                        	str	r0, [sp, #516]
 800ae9e: 00 20                        	movs	r0, #0
 800aea0: 67 90                        	str	r0, [sp, #412]
 800aea2: 00 20                        	movs	r0, #0
 800aea4: 4e 90                        	str	r0, [sp, #312]
 800aea6: 00 20                        	movs	r0, #0
 800aea8: 4d 90                        	str	r0, [sp, #308]
 800aeaa: 00 20                        	movs	r0, #0
 800aeac: 82 90                        	str	r0, [sp, #520]
 800aeae: 00 20                        	movs	r0, #0
 800aeb0: 68 90                        	str	r0, [sp, #416]
 800aeb2: 00 20                        	movs	r0, #0
 800aeb4: 6e 90                        	str	r0, [sp, #440]
 800aeb6: 00 20                        	movs	r0, #0
 800aeb8: 4f 90                        	str	r0, [sp, #316]
 800aeba: 00 20                        	movs	r0, #0
 800aebc: 83 90                        	str	r0, [sp, #524]
 800aebe: 00 20                        	movs	r0, #0
 800aec0: 69 90                        	str	r0, [sp, #420]
 800aec2: 00 20                        	movs	r0, #0
 800aec4: 51 90                        	str	r0, [sp, #324]
 800aec6: 00 20                        	movs	r0, #0
 800aec8: 50 90                        	str	r0, [sp, #320]
 800aeca: 00 20                        	movs	r0, #0
 800aecc: 84 90                        	str	r0, [sp, #528]
 800aece: 00 20                        	movs	r0, #0
 800aed0: 6a 90                        	str	r0, [sp, #424]
 800aed2: 00 20                        	movs	r0, #0
 800aed4: 54 90                        	str	r0, [sp, #336]
 800aed6: 00 20                        	movs	r0, #0
 800aed8: 52 90                        	str	r0, [sp, #328]
 800aeda: 00 20                        	movs	r0, #0
 800aedc: 70 90                        	str	r0, [sp, #448]
 800aede: 00 20                        	movs	r0, #0
 800aee0: 6b 90                        	str	r0, [sp, #428]
 800aee2: 00 20                        	movs	r0, #0
 800aee4: 55 90                        	str	r0, [sp, #340]
 800aee6: 00 20                        	movs	r0, #0
 800aee8: 53 90                        	str	r0, [sp, #332]
 800aeea: 00 20                        	movs	r0, #0
 800aeec: 85 90                        	str	r0, [sp, #532]
 800aeee: 00 20                        	movs	r0, #0
 800aef0: 6c 90                        	str	r0, [sp, #432]
 800aef2: 00 20                        	movs	r0, #0
 800aef4: 56 90                        	str	r0, [sp, #344]
 800aef6: 00 20                        	movs	r0, #0
 800aef8: 48 90                        	str	r0, [sp, #288]
 800aefa: 00 20                        	movs	r0, #0
 800aefc: 7d 90                        	str	r0, [sp, #500]
 800aefe: 00 20                        	movs	r0, #0
 800af00: 6d 90                        	str	r0, [sp, #436]
 800af02: 00 20                        	movs	r0, #0
 800af04: 57 90                        	str	r0, [sp, #348]
 800af06: 00 20                        	movs	r0, #0
 800af08: 34 90                        	str	r0, [sp, #208]
 800af0a: 00 20                        	movs	r0, #0
 800af0c: 75 90                        	str	r0, [sp, #468]
 800af0e: 00 20                        	movs	r0, #0
 800af10: a4 90                        	str	r0, [sp, #656]
 800af12: 00 20                        	movs	r0, #0
 800af14: 58 90                        	str	r0, [sp, #352]
 800af16: 00 20                        	movs	r0, #0
 800af18: 6f 90                        	str	r0, [sp, #444]
 800af1a: 00 20                        	movs	r0, #0
 800af1c: 89 90                        	str	r0, [sp, #548]
 800af1e: 00 20                        	movs	r0, #0
 800af20: 72 90                        	str	r0, [sp, #456]
 800af22: 00 20                        	movs	r0, #0
 800af24: 8e 90                        	str	r0, [sp, #568]
 800af26: 00 20                        	movs	r0, #0
 800af28: 86 90                        	str	r0, [sp, #536]
 800af2a: 00 20                        	movs	r0, #0
 800af2c: 8a 90                        	str	r0, [sp, #552]
 800af2e: 00 20                        	movs	r0, #0
 800af30: 73 90                        	str	r0, [sp, #460]
 800af32: 00 20                        	movs	r0, #0
 800af34: 1e 90                        	str	r0, [sp, #120]
 800af36: 00 20                        	movs	r0, #0
 800af38: a2 90                        	str	r0, [sp, #648]
 800af3a: 00 20                        	movs	r0, #0
 800af3c: a1 90                        	str	r0, [sp, #644]
 800af3e: 00 20                        	movs	r0, #0
 800af40: 03 90                        	str	r0, [sp, #12]
 800af42: 00 20                        	movs	r0, #0
 800af44: a3 90                        	str	r0, [sp, #652]
 800af46: 00 20                        	movs	r0, #0
 800af48: a7 90                        	str	r0, [sp, #668]
 800af4a: 00 20                        	movs	r0, #0
 800af4c: 04 90                        	str	r0, [sp, #16]
 800af4e: 00 20                        	movs	r0, #0
 800af50: a9 90                        	str	r0, [sp, #676]
 800af52: 00 20                        	movs	r0, #0
 800af54: 02 90                        	str	r0, [sp, #8]
 800af56: 00 20                        	movs	r0, #0
 800af58: 01 90                        	str	r0, [sp, #4]
 800af5a: 00 20                        	movs	r0, #0
 800af5c: a0 90                        	str	r0, [sp, #640]
 800af5e: 00 20                        	movs	r0, #0
 800af60: 9f 90                        	str	r0, [sp, #636]
 800af62: 00 20                        	movs	r0, #0
 800af64: 00 90                        	str	r0, [sp]
 800af66: 00 20                        	movs	r0, #0
 800af68: 1f 90                        	str	r0, [sp, #124]
 800af6a: 00 20                        	movs	r0, #0
 800af6c: 91 90                        	str	r0, [sp, #580]
 800af6e: 00 20                        	movs	r0, #0
 800af70: 2c 90                        	str	r0, [sp, #176]
 800af72: 4f f0 00 09                  	mov.w	r9, #0
 800af76: 88 91                        	str	r1, [sp, #544]
 800af78: 00 21                        	movs	r1, #0
 800af7a: 4f f0 00 0a                  	mov.w	r10, #0
 800af7e: 4f f0 00 08                  	mov.w	r8, #0
 800af82: 4f f0 00 0c                  	mov.w	r12, #0
 800af86: 00 20                        	movs	r0, #0
 800af88: 24 91                        	str	r1, [sp, #144]
;             crate::opcode::GAP_GET_BONDED_DEVICES => Ok(ReturnParameters::GapGetBondedDevices(
 800af8a: a1 99                        	ldr	r1, [sp, #644]
 800af8c: 4f f0 1e 0e                  	mov.w	lr, #30
 800af90: ff 91                        	str	r1, [sp, #1020]
 800af92: 9f 99                        	ldr	r1, [sp, #636]
 800af94: ad f8 fa 13                  	strh.w	r1, [sp, #1018]
 800af98: a0 99                        	ldr	r1, [sp, #640]
 800af9a: 8d f8 f9 13                  	strb.w	r1, [sp, #1017]
 800af9e: a2 99                        	ldr	r1, [sp, #648]
 800afa0: fd 91                        	str	r1, [sp, #1012]
 800afa2: 02 99                        	ldr	r1, [sp, #8]
 800afa4: bd f8 20 55                  	ldrh.w	r5, [sp, #1312]
 800afa8: ad f8 f1 53                  	strh.w	r5, [sp, #1009]
;         match hci::Opcode(LittleEndian::read_u16(&bytes[1..])) {
 800afac: 0d 0c                        	lsrs	r5, r1, #16
 800afae: 45 ea 0c 42                  	orr.w	r2, r5, r12, lsl #16
 800afb2: a7 9e                        	ldr	r6, [sp, #668]
 800afb4: 09 0a                        	lsrs	r1, r1, #8
 800afb6: 9a 92                        	str	r2, [sp, #616]
 800afb8: 4f ea 1c 62                  	lsr.w	r2, r12, #24
;             crate::opcode::GAP_GET_BONDED_DEVICES => Ok(ReturnParameters::GapGetBondedDevices(
 800afbc: 9d f8 22 45                  	ldrb.w	r4, [sp, #1314]
;         match hci::Opcode(LittleEndian::read_u16(&bytes[1..])) {
 800afc0: 96 92                        	str	r2, [sp, #600]
 800afc2: 4f ea 1c 42                  	lsr.w	r2, r12, #16
;             crate::opcode::GAP_GET_BONDED_DEVICES => Ok(ReturnParameters::GapGetBondedDevices(
 800afc6: 8d f8 f3 43                  	strb.w	r4, [sp, #1011]
 800afca: b4 b2                        	uxth	r4, r6
 800afcc: 28 92                        	str	r2, [sp, #160]
 800afce: 4f ea 18 42                  	lsr.w	r2, r8, #16
 800afd2: 05 91                        	str	r1, [sp, #20]
 800afd4: 91 99                        	ldr	r1, [sp, #580]
 800afd6: a2 92                        	str	r2, [sp, #648]
 800afd8: 22 0a                        	lsrs	r2, r4, #8
 800afda: a1 92                        	str	r2, [sp, #644]
 800afdc: 00 22                        	movs	r2, #0
;         match hci::Opcode(LittleEndian::read_u16(&bytes[1..])) {
 800afde: 21 92                        	str	r2, [sp, #132]
;             crate::opcode::GAP_GET_BONDED_DEVICES => Ok(ReturnParameters::GapGetBondedDevices(
 800afe0: 0a 0e                        	lsrs	r2, r1, #24
 800afe2: 0d 92                        	str	r2, [sp, #52]
 800afe4: 0a 0c                        	lsrs	r2, r1, #16
 800afe6: 09 0a                        	lsrs	r1, r1, #8
 800afe8: 0c 92                        	str	r2, [sp, #48]
 800afea: 18 91                        	str	r1, [sp, #96]
 800afec: 1f 99                        	ldr	r1, [sp, #124]
 800afee: 8d f8 f8 b3                  	strb.w	r11, [sp, #1016]
 800aff2: 4f ea 18 6b                  	lsr.w	r11, r8, #24
 800aff6: 8d f8 f0 e3                  	strb.w	lr, [sp, #1008]
 800affa: 09 0a                        	lsrs	r1, r1, #8
 800affc: 94 91                        	str	r1, [sp, #592]
 800affe: a9 99                        	ldr	r1, [sp, #676]
 800b000: 0a 0e                        	lsrs	r2, r1, #24
 800b002: 09 92                        	str	r2, [sp, #36]
 800b004: 0a 0c                        	lsrs	r2, r1, #16
 800b006: 09 0a                        	lsrs	r1, r1, #8
 800b008: 0a 92                        	str	r2, [sp, #40]
 800b00a: 0b 91                        	str	r1, [sp, #44]
 800b00c: 04 99                        	ldr	r1, [sp, #16]
 800b00e: 0a 0e                        	lsrs	r2, r1, #24
 800b010: 06 92                        	str	r2, [sp, #24]
 800b012: 0a 0c                        	lsrs	r2, r1, #16
 800b014: 09 0a                        	lsrs	r1, r1, #8
 800b016: 07 92                        	str	r2, [sp, #28]
 800b018: 08 91                        	str	r1, [sp, #32]
 800b01a: 31 0e                        	lsrs	r1, r6, #24
 800b01c: 9b 91                        	str	r1, [sp, #620]
 800b01e: 31 0c                        	lsrs	r1, r6, #16
 800b020: 9f 91                        	str	r1, [sp, #636]
 800b022: 8e 99                        	ldr	r1, [sp, #568]
;         self
 800b024: 0c 0e                        	lsrs	r4, r1, #24
 800b026: 8d 94                        	str	r4, [sp, #564]
 800b028: 0c 0c                        	lsrs	r4, r1, #16
 800b02a: 09 0a                        	lsrs	r1, r1, #8
 800b02c: 8c 94                        	str	r4, [sp, #560]
 800b02e: 8b 91                        	str	r1, [sp, #556]
 800b030: 01 f0 11 b9                  	b.w	#4642 <$t.42+0x9c>
;                 Ok(ReturnParameters::GattWriteResponse(to_status(&bytes[3..])?))
 800b034: a7 f1 48 02                  	sub.w	r2, r7, #72
 800b038: 37 f8 3c 3c                  	ldrh	r3, [r7, #-60]
 800b03c: 2d 26                        	movs	r6, #45
 800b03e: 8d f8 f1 43                  	strb.w	r4, [sp, #1009]
 800b042: 07 ca                        	ldm	r2, {r0, r1, r2}
 800b044: 4f f0 00 0b                  	mov.w	r11, #0
 800b048: cd f8 f2 03                  	str.w	r0, [sp, #1010]
 800b04c: 00 20                        	movs	r0, #0
 800b04e: 28 90                        	str	r0, [sp, #160]
 800b050: 8d f8 f0 63                  	strb.w	r6, [sp, #1008]
 800b054: cd f8 f6 13                  	str.w	r1, [sp, #1014]
 800b058: cd f8 fa 23                  	str.w	r2, [sp, #1018]
 800b05c: ad f8 fe 33                  	strh.w	r3, [sp, #1022]
 800b060: 00 20                        	movs	r0, #0
 800b062: a6 90                        	str	r0, [sp, #664]
 800b064: 00 20                        	movs	r0, #0
 800b066: a2 90                        	str	r0, [sp, #648]
 800b068: 00 20                        	movs	r0, #0
 800b06a: a3 90                        	str	r0, [sp, #652]
 800b06c: 00 20                        	movs	r0, #0
 800b06e: a1 90                        	str	r0, [sp, #644]
 800b070: 00 20                        	movs	r0, #0
 800b072: a7 90                        	str	r0, [sp, #668]
 800b074: 00 20                        	movs	r0, #0
 800b076: 9b 90                        	str	r0, [sp, #620]
 800b078: 00 20                        	movs	r0, #0
 800b07a: 9f 90                        	str	r0, [sp, #636]
 800b07c: 00 20                        	movs	r0, #0
 800b07e: 06 90                        	str	r0, [sp, #24]
 800b080: 00 20                        	movs	r0, #0
 800b082: 07 90                        	str	r0, [sp, #28]
 800b084: 00 20                        	movs	r0, #0
 800b086: 08 90                        	str	r0, [sp, #32]
 800b088: 00 20                        	movs	r0, #0
 800b08a: 09 90                        	str	r0, [sp, #36]
 800b08c: 00 20                        	movs	r0, #0
 800b08e: 0a 90                        	str	r0, [sp, #40]
 800b090: 00 20                        	movs	r0, #0
 800b092: 0b 90                        	str	r0, [sp, #44]
 800b094: 00 20                        	movs	r0, #0
 800b096: a9 90                        	str	r0, [sp, #676]
 800b098: 00 20                        	movs	r0, #0
 800b09a: 05 90                        	str	r0, [sp, #20]
 800b09c: 00 20                        	movs	r0, #0
 800b09e: 9a 90                        	str	r0, [sp, #616]
 800b0a0: 05 e6                        	b	#-1014 <$t.24+0x6b2c>
;                 Ok(ReturnParameters::GattSetEventMask(to_status(&bytes[3..])?))
 800b0a2: a7 f1 48 02                  	sub.w	r2, r7, #72
 800b0a6: 37 f8 3c 3c                  	ldrh	r3, [r7, #-60]
 800b0aa: 8d f8 f1 43                  	strb.w	r4, [sp, #1009]
 800b0ae: 29 26                        	movs	r6, #41
 800b0b0: 07 ca                        	ldm	r2, {r0, r1, r2}
 800b0b2: 8d f8 f0 63                  	strb.w	r6, [sp, #1008]
 800b0b6: 4f f0 00 0b                  	mov.w	r11, #0
 800b0ba: cd f8 f2 03                  	str.w	r0, [sp, #1010]
 800b0be: 00 20                        	movs	r0, #0
 800b0c0: 0a 90                        	str	r0, [sp, #40]
 800b0c2: cd f8 f6 13                  	str.w	r1, [sp, #1014]
 800b0c6: cd f8 fa 23                  	str.w	r2, [sp, #1018]
 800b0ca: ad f8 fe 33                  	strh.w	r3, [sp, #1022]
 800b0ce: 00 20                        	movs	r0, #0
 800b0d0: a6 90                        	str	r0, [sp, #664]
 800b0d2: 00 20                        	movs	r0, #0
 800b0d4: a2 90                        	str	r0, [sp, #648]
 800b0d6: 00 20                        	movs	r0, #0
 800b0d8: a3 90                        	str	r0, [sp, #652]
 800b0da: 00 20                        	movs	r0, #0
 800b0dc: a1 90                        	str	r0, [sp, #644]
 800b0de: 00 20                        	movs	r0, #0
 800b0e0: a7 90                        	str	r0, [sp, #668]
 800b0e2: 00 20                        	movs	r0, #0
 800b0e4: 9b 90                        	str	r0, [sp, #620]
 800b0e6: 00 20                        	movs	r0, #0
 800b0e8: 9f 90                        	str	r0, [sp, #636]
 800b0ea: 00 20                        	movs	r0, #0
 800b0ec: 06 90                        	str	r0, [sp, #24]
 800b0ee: 00 20                        	movs	r0, #0
 800b0f0: 07 90                        	str	r0, [sp, #28]
 800b0f2: 00 20                        	movs	r0, #0
 800b0f4: 08 90                        	str	r0, [sp, #32]
 800b0f6: 00 20                        	movs	r0, #0
 800b0f8: 09 90                        	str	r0, [sp, #36]
 800b0fa: ce e5                        	b	#-1124 <$t.24+0x6b18>
;         intrinsics::offset(self, count)
 800b0fc: 08 f1 06 01                  	add.w	r1, r8, #6
 800b100: 0d f5 83 60                  	add.w	r0, sp, #1048
;     let status = to_status(bytes)?;
 800b104: 2a 46                        	mov	r2, r5
 800b106: 0c f0 61 f9                  	bl	#49858
;         self
 800b10a: 9d f8 18 04                  	ldrb.w	r0, [sp, #1048]
;     let status = to_status(bytes)?;
 800b10e: 01 28                        	cmp	r0, #1
 800b110: 40 f0 55 82                  	bne.w	#1194 <$t.28+0x1c4>
;         self
 800b114: dd f8 54 14                  	ldr.w	r1, [sp, #1108]
 800b118: 8e 91                        	str	r1, [sp, #568]
 800b11a: 9d f8 53 14                  	ldrb.w	r1, [sp, #1107]
 800b11e: 8a 91                        	str	r1, [sp, #552]
 800b120: 9d f8 52 14                  	ldrb.w	r1, [sp, #1106]
 800b124: 86 91                        	str	r1, [sp, #536]
 800b126: 9d f8 51 14                  	ldrb.w	r1, [sp, #1105]
 800b12a: 73 91                        	str	r1, [sp, #460]
 800b12c: 9d f8 50 14                  	ldrb.w	r1, [sp, #1104]
 800b130: 1e 91                        	str	r1, [sp, #120]
 800b132: dd f8 4c 14                  	ldr.w	r1, [sp, #1100]
 800b136: dd f8 30 04                  	ldr.w	r0, [sp, #1072]
 800b13a: 91 91                        	str	r1, [sp, #580]
 800b13c: 9d f8 49 14                  	ldrb.w	r1, [sp, #1097]
 800b140: 03 90                        	str	r0, [sp, #12]
 800b142: dd f8 20 04                  	ldr.w	r0, [sp, #1056]
 800b146: 00 91                        	str	r1, [sp]
 800b148: 9d f8 48 14                  	ldrb.w	r1, [sp, #1096]
 800b14c: 01 91                        	str	r1, [sp, #4]
 800b14e: 02 0a                        	lsrs	r2, r0, #8
 800b150: dd f8 24 54                  	ldr.w	r5, [sp, #1060]
 800b154: 04 0c                        	lsrs	r4, r0, #16
 800b156: 9d f8 40 14                  	ldrb.w	r1, [sp, #1088]
 800b15a: bd f8 4a 64                  	ldrh.w	r6, [sp, #1098]
 800b15e: 02 91                        	str	r1, [sp, #8]
 800b160: 42 ea 05 62                  	orr.w	r2, r2, r5, lsl #24
 800b164: dd f8 38 14                  	ldr.w	r1, [sp, #1080]
 800b168: 44 ea 05 44                  	orr.w	r4, r4, r5, lsl #16
 800b16c: 04 91                        	str	r1, [sp, #16]
 800b16e: dd f8 44 34                  	ldr.w	r3, [sp, #1092]
 800b172: bd f8 42 a4                  	ldrh.w	r10, [sp, #1090]
 800b176: dd f8 2c c4                  	ldr.w	r12, [sp, #1068]
 800b17a: dd f8 28 14                  	ldr.w	r1, [sp, #1064]
 800b17e: dd f8 34 e4                  	ldr.w	lr, [sp, #1076]
 800b182: 9d f8 41 84                  	ldrb.w	r8, [sp, #1089]
 800b186: dd f8 3c 94                  	ldr.w	r9, [sp, #1084]
 800b18a: 1f 96                        	str	r6, [sp, #124]
;     let status = to_status(bytes)?;
 800b18c: 36 0a                        	lsrs	r6, r6, #8
 800b18e: 94 96                        	str	r6, [sp, #592]
 800b190: cd f8 9c e2                  	str.w	lr, [sp, #668]
 800b194: cd f8 a4 92                  	str.w	r9, [sp, #676]
 800b198: cd f8 14 80                  	str.w	r8, [sp, #20]
;         Err(v)
 800b19c: cd f8 fc c3                  	str.w	r12, [sp, #1020]
 800b1a0: cd e9 fd 51                  	strd	r5, r1, [sp, #1012]
 800b1a4: 8d f8 f0 03                  	strb.w	r0, [sp, #1008]
 800b1a8: ca ea 03 40                  	pkhbt	r0, r10, r3, lsl #16
;                 to_gatt_handle_value(&bytes[3..])?,
 800b1ac: 9a 90                        	str	r0, [sp, #616]
 800b1ae: 18 0e                        	lsrs	r0, r3, #24
 800b1b0: 96 90                        	str	r0, [sp, #600]
 800b1b2: 18 0c                        	lsrs	r0, r3, #16
;         Err(v)
 800b1b4: ad f8 f2 43                  	strh.w	r4, [sp, #1010]
 800b1b8: 8d f8 f1 23                  	strb.w	r2, [sp, #1009]
 800b1bc: 00 f0 90 bd                  	b.w	#2848 <$t.28+0x8e6>
;         mitm_protection_required: to_boolean(bytes[1]).map_err(hci::event::Error::Vendor)?,
 800b1c0: 9d f8 af 12                  	ldrb.w	r1, [sp, #687]
 800b1c4: 00 22                        	movs	r2, #0
 800b1c6: 9d f8 19 04                  	ldrb.w	r0, [sp, #1049]
;         0 => Ok(false),
 800b1ca: 00 29                        	cmp	r1, #0
 800b1cc: 94 92                        	str	r2, [sp, #592]
 800b1ce: 00 f0 e1 84                  	beq.w	#2498 <$t.28+0x79a>
 800b1d2: 01 29                        	cmp	r1, #1
 800b1d4: 40 f0 f6 84                  	bne.w	#2540 <$t.28+0x7ca>
 800b1d8: 01 22                        	movs	r2, #1
 800b1da: 00 f0 dc bc                  	b.w	#2488 <$t.28+0x79c>
;     copy_nonoverlapping(src, dst, count)
 800b1de: dd f8 af 42                  	ldr.w	r4, [sp, #687]
 800b1e2: 40 f2 71 29                  	movw	r9, #625
 800b1e6: 9d f8 19 04                  	ldrb.w	r0, [sp, #1049]
 800b1ea: 44 f2 40 28                  	movw	r8, #16960
 800b1ee: 01 90                        	str	r0, [sp, #4]
 800b1f0: 00 22                        	movs	r2, #0
;             625 * u64::from(LittleEndian::read_u32(&bytes[1..5])),
 800b1f2: a4 fb 09 01                  	umull	r0, r1, r4, r9
 800b1f6: c0 f2 0f 08                  	movt	r8, #15
;             nanos: ((micros % MICROS_PER_SEC) as u32) * NANOS_PER_MICRO,
 800b1fa: 94 92                        	str	r2, [sp, #592]
 800b1fc: 42 46                        	mov	r2, r8
 800b1fe: 00 23                        	movs	r3, #0
;     copy_nonoverlapping(src, dst, count)
 800b200: dd f8 b3 52                  	ldr.w	r5, [sp, #691]
;             nanos: ((micros % MICROS_PER_SEC) as u32) * NANOS_PER_MICRO,
 800b204: 11 f0 7e f8                  	bl	#69884
;         max_slot: Duration::from_micros(625 * u64::from(LittleEndian::read_u32(&bytes[5..9]))),
 800b208: a5 fb 09 01                  	umull	r0, r1, r5, r9
;             nanos: ((micros % MICROS_PER_SEC) as u32) * NANOS_PER_MICRO,
 800b20c: 16 46                        	mov	r6, r2
 800b20e: 48 f2 1f 52                  	movw	r2, #34079
 800b212: c5 f2 eb 12                  	movt	r2, #20971
;             secs: micros / MICROS_PER_SEC,
 800b216: a4 fb 02 34                  	umull	r3, r4, r4, r2
;             nanos: ((micros % MICROS_PER_SEC) as u32) * NANOS_PER_MICRO,
 800b21a: 00 23                        	movs	r3, #0
;             secs: micros / MICROS_PER_SEC,
 800b21c: a5 fb 02 25                  	umull	r2, r5, r5, r2
;             nanos: ((micros % MICROS_PER_SEC) as u32) * NANOS_PER_MICRO,
 800b220: 42 46                        	mov	r2, r8
 800b222: 11 f0 6f f8                  	bl	#69854
 800b226: 4f f4 7a 70                  	mov.w	r0, #1000
 800b22a: 02 fb 00 f1                  	mul	r1, r2, r0
 800b22e: 70 43                        	muls	r0, r6, r0
;             secs: micros / MICROS_PER_SEC,
 800b230: 66 0a                        	lsrs	r6, r4, #9
;             nanos: ((micros % MICROS_PER_SEC) as u32) * NANOS_PER_MICRO,
 800b232: 02 91                        	str	r1, [sp, #8]
;     Ok(HalAnchorPeriod {
 800b234: 61 0c                        	lsrs	r1, r4, #17
 800b236: 00 24                        	movs	r4, #0
 800b238: 03 90                        	str	r0, [sp, #12]
;             secs: micros / MICROS_PER_SEC,
 800b23a: 68 0a                        	lsrs	r0, r5, #9
 800b23c: 04 90                        	str	r0, [sp, #16]
 800b23e: 00 20                        	movs	r0, #0
 800b240: 00 22                        	movs	r2, #0
 800b242: a9 90                        	str	r0, [sp, #676]
;         self
 800b244: f6 b2                        	uxtb	r6, r6
;                 to_hal_anchor_period(&bytes[3..])?,
 800b246: 00 2c                        	cmp	r4, #0
;         self
 800b248: 46 ea 01 26                  	orr.w	r6, r6, r1, lsl #8
;                 to_hal_anchor_period(&bytes[3..])?,
 800b24c: 47 d0                        	beq	#142 <$t.24+0x715c>
;         Err(v)
 800b24e: a7 98                        	ldr	r0, [sp, #668]
 800b250: ff 90                        	str	r0, [sp, #1020]
 800b252: 03 98                        	ldr	r0, [sp, #12]
 800b254: 91 99                        	ldr	r1, [sp, #580]
 800b256: fc 96                        	str	r6, [sp, #1008]
 800b258: cd e9 fd 20                  	strd	r2, r0, [sp, #1012]
 800b25c: 1f 98                        	ldr	r0, [sp, #124]
 800b25e: a9 9e                        	ldr	r6, [sp, #676]
 800b260: c0 ea 01 40                  	pkhbt	r0, r0, r1, lsl #16
;                 to_hal_anchor_period(&bytes[3..])?,
 800b264: 9a 90                        	str	r0, [sp, #616]
 800b266: 08 0e                        	lsrs	r0, r1, #24
 800b268: 02 9a                        	ldr	r2, [sp, #8]
 800b26a: 96 90                        	str	r0, [sp, #600]
 800b26c: 08 0c                        	lsrs	r0, r1, #16
;         Err(v)
 800b26e: 28 90                        	str	r0, [sp, #160]
 800b270: 4f ea 19 60                  	lsr.w	r0, r9, #24
 800b274: b1 b2                        	uxth	r1, r6
 800b276: 0d 90                        	str	r0, [sp, #52]
 800b278: 08 0a                        	lsrs	r0, r1, #8
 800b27a: 04 9c                        	ldr	r4, [sp, #16]
 800b27c: a1 90                        	str	r0, [sp, #644]
 800b27e: 01 20                        	movs	r0, #1
 800b280: 21 90                        	str	r0, [sp, #132]
 800b282: 4f ea 19 40                  	lsr.w	r0, r9, #16
 800b286: 0c 90                        	str	r0, [sp, #48]
 800b288: 4f ea 19 20                  	lsr.w	r0, r9, #8
 800b28c: 18 90                        	str	r0, [sp, #96]
 800b28e: 18 0e                        	lsrs	r0, r3, #24
 800b290: 09 90                        	str	r0, [sp, #36]
 800b292: 18 0c                        	lsrs	r0, r3, #16
 800b294: 0a 90                        	str	r0, [sp, #40]
 800b296: 18 0a                        	lsrs	r0, r3, #8
 800b298: 0b 90                        	str	r0, [sp, #44]
 800b29a: 10 0e                        	lsrs	r0, r2, #24
 800b29c: 06 90                        	str	r0, [sp, #24]
 800b29e: 10 0c                        	lsrs	r0, r2, #16
 800b2a0: 07 90                        	str	r0, [sp, #28]
 800b2a2: 10 0a                        	lsrs	r0, r2, #8
 800b2a4: 08 90                        	str	r0, [sp, #32]
 800b2a6: 30 0e                        	lsrs	r0, r6, #24
 800b2a8: 9b 90                        	str	r0, [sp, #620]
 800b2aa: 30 0c                        	lsrs	r0, r6, #16
 800b2ac: 9f 90                        	str	r0, [sp, #636]
 800b2ae: 20 0c                        	lsrs	r0, r4, #16
 800b2b0: a2 90                        	str	r0, [sp, #648]
 800b2b2: 20 0a                        	lsrs	r0, r4, #8
 800b2b4: a3 90                        	str	r0, [sp, #652]
 800b2b6: 4f ea 14 6b                  	lsr.w	r11, r4, #24
 800b2ba: cd f8 44 92                  	str.w	r9, [sp, #580]
 800b2be: a7 96                        	str	r6, [sp, #668]
 800b2c0: cd e9 03 42                  	strd	r4, r2, [sp, #12]
 800b2c4: a9 93                        	str	r3, [sp, #676]
 800b2c6: cd f8 7c c0                  	str.w	r12, [sp, #124]
 800b2ca: 00 20                        	movs	r0, #0
 800b2cc: a6 90                        	str	r0, [sp, #664]
 800b2ce: 01 98                        	ldr	r0, [sp, #4]
 800b2d0: 02 90                        	str	r0, [sp, #8]
 800b2d2: 00 98                        	ldr	r0, [sp]
 800b2d4: 05 90                        	str	r0, [sp, #20]
 800b2d6: cd e9 00 e8                  	strd	lr, r8, [sp]
 800b2da: 00 f0 bc bf                  	b.w	#3960 <$t.42+0x9c>
;             crate::opcode::HAL_GET_ANCHOR_PERIOD => Ok(ReturnParameters::HalGetAnchorPeriod(
 800b2de: 57 f8 48 0c                  	ldr	r0, [r7, #-72]
 800b2e2: 4f f0 00 0a                  	mov.w	r10, #0
 800b2e6: 57 f8 45 1c                  	ldr	r1, [r7, #-69]
 800b2ea: cd f8 f1 03                  	str.w	r0, [sp, #1009]
 800b2ee: fd 91                        	str	r1, [sp, #1012]
 800b2f0: 02 99                        	ldr	r1, [sp, #8]
 800b2f2: ff 92                        	str	r2, [sp, #1020]
 800b2f4: a7 9a                        	ldr	r2, [sp, #668]
;         match hci::Opcode(LittleEndian::read_u16(&bytes[1..])) {
 800b2f6: 08 0c                        	lsrs	r0, r1, #16
;             crate::opcode::HAL_GET_ANCHOR_PERIOD => Ok(ReturnParameters::HalGetAnchorPeriod(
 800b2f8: fe 96                        	str	r6, [sp, #1016]
;         match hci::Opcode(LittleEndian::read_u16(&bytes[1..])) {
 800b2fa: 40 ea 03 40                  	orr.w	r0, r0, r3, lsl #16
 800b2fe: 9a 90                        	str	r0, [sp, #616]
 800b300: 18 0e                        	lsrs	r0, r3, #24
 800b302: 09 26                        	movs	r6, #9
 800b304: 96 90                        	str	r0, [sp, #600]
 800b306: 18 0c                        	lsrs	r0, r3, #16
;             crate::opcode::HAL_GET_ANCHOR_PERIOD => Ok(ReturnParameters::HalGetAnchorPeriod(
 800b308: 28 90                        	str	r0, [sp, #160]
 800b30a: 1f 98                        	ldr	r0, [sp, #124]
 800b30c: 8d f8 f0 63                  	strb.w	r6, [sp, #1008]
 800b310: 80 b2                        	uxth	r0, r0
 800b312: 00 0a                        	lsrs	r0, r0, #8
 800b314: 94 90                        	str	r0, [sp, #592]
 800b316: 90 b2                        	uxth	r0, r2
 800b318: 00 0a                        	lsrs	r0, r0, #8
 800b31a: a1 90                        	str	r0, [sp, #644]
;         match hci::Opcode(LittleEndian::read_u16(&bytes[1..])) {
 800b31c: 08 0a                        	lsrs	r0, r1, #8
 800b31e: 05 90                        	str	r0, [sp, #20]
 800b320: 91 98                        	ldr	r0, [sp, #580]
;             crate::opcode::HAL_GET_ANCHOR_PERIOD => Ok(ReturnParameters::HalGetAnchorPeriod(
 800b322: 01 0e                        	lsrs	r1, r0, #24
 800b324: 0d 91                        	str	r1, [sp, #52]
 800b326: 01 0c                        	lsrs	r1, r0, #16
 800b328: 00 0a                        	lsrs	r0, r0, #8
 800b32a: 0c 91                        	str	r1, [sp, #48]
 800b32c: 18 90                        	str	r0, [sp, #96]
 800b32e: a9 98                        	ldr	r0, [sp, #676]
 800b330: 01 0e                        	lsrs	r1, r0, #24
 800b332: 09 91                        	str	r1, [sp, #36]
 800b334: 01 0c                        	lsrs	r1, r0, #16
 800b336: 00 0a                        	lsrs	r0, r0, #8
 800b338: 0a 91                        	str	r1, [sp, #40]
 800b33a: 0b 90                        	str	r0, [sp, #44]
 800b33c: 04 98                        	ldr	r0, [sp, #16]
 800b33e: 01 0e                        	lsrs	r1, r0, #24
 800b340: 06 91                        	str	r1, [sp, #24]
 800b342: 01 0c                        	lsrs	r1, r0, #16
 800b344: 00 0a                        	lsrs	r0, r0, #8
 800b346: 07 91                        	str	r1, [sp, #28]
 800b348: 08 90                        	str	r0, [sp, #32]
 800b34a: 10 0e                        	lsrs	r0, r2, #24
 800b34c: 9b 90                        	str	r0, [sp, #620]
 800b34e: 10 0c                        	lsrs	r0, r2, #16
 800b350: 9f 90                        	str	r0, [sp, #636]
 800b352: 03 98                        	ldr	r0, [sp, #12]
 800b354: 01 0c                        	lsrs	r1, r0, #16
 800b356: 4f ea 10 6b                  	lsr.w	r11, r0, #24
 800b35a: 00 0a                        	lsrs	r0, r0, #8
 800b35c: a2 91                        	str	r1, [sp, #648]
 800b35e: a3 90                        	str	r0, [sp, #652]
 800b360: 00 20                        	movs	r0, #0
 800b362: a6 90                        	str	r0, [sp, #664]
 800b364: 00 20                        	movs	r0, #0
 800b366: af e4                        	b	#-1698 <$t.24+0x6b46>
;         status.clients[client].state = bytes[1 + client]
 800b368: 9d f8 af e2                  	ldrb.w	lr, [sp, #687]
;             0 => Ok(LinkState::Idle),
 800b36c: be f1 07 0f                  	cmp.w	lr, #7
 800b370: 00 f2 27 87                  	bhi.w	#3662 <$t.42+0x8>
 800b374: 00 21                        	movs	r1, #0
 800b376: 9d f8 19 64                  	ldrb.w	r6, [sp, #1049]
 800b37a: a6 91                        	str	r1, [sp, #664]
 800b37c: df e8 1e f0                  	tbh	[pc, lr, lsl #1]

0800b380 $d.25:
 800b380:	e3 04 08 00	.word	0x000804e3
 800b384:	d9 04 db 04	.word	0x04db04d9
 800b388:	d7 04 df 04	.word	0x04df04d7
 800b38c:	e1 04 dd 04	.word	0x04dd04e1

0800b390 $t.26:
 800b390: 01 21                        	movs	r1, #1
 800b392: 00 f0 d7 bc                  	b.w	#2478 <$t.28+0x94a>
 800b396: 9d f8 19 04                  	ldrb.w	r0, [sp, #1049]
;     copy_nonoverlapping(src, dst, count)
 800b39a: dd f8 af 12                  	ldr.w	r1, [sp, #687]
;                 Ok(ReturnParameters::HalGetTxTestPacketCount(
 800b39e: dd f8 20 25                  	ldr.w	r2, [sp, #1312]
 800b3a2: 17 f8 46 6c                  	ldrb	r6, [r7, #-70]
 800b3a6: 37 f8 48 5c                  	ldrh	r5, [r7, #-72]
 800b3aa: dd f8 23 35                  	ldr.w	r3, [sp, #1315]
 800b3ae: cd f8 f9 23                  	str.w	r2, [sp, #1017]
 800b3b2: 8d f8 f0 43                  	strb.w	r4, [sp, #1008]
 800b3b6: ad f8 f1 53                  	strh.w	r5, [sp, #1009]
 800b3ba: 8d f8 f3 63                  	strb.w	r6, [sp, #1011]
 800b3be: 8d f8 f8 03                  	strb.w	r0, [sp, #1016]
 800b3c2: fd 91                        	str	r1, [sp, #1012]
 800b3c4: ff 93                        	str	r3, [sp, #1020]
 800b3c6: fe f7 75 b8                  	b.w	#-7958 <$t.24+0x5332>
;         6 => {
 800b3ca: a9 98                        	ldr	r0, [sp, #676]
 800b3cc: 05 38                        	subs	r0, #5
 800b3ce: 0f 28                        	cmp	r0, #15
 800b3d0: 00 f2 5a 84                  	bhi.w	#2228 <$t.28+0x88e>
 800b3d4: 9d f8 19 14                  	ldrb.w	r1, [sp, #1049]
 800b3d8: a7 91                        	str	r1, [sp, #668]
 800b3da: df e8 10 f0                  	tbh	[pc, r0, lsl #1]

0800b3de $d.27:
 800b3de:	10 00 1e 04	.word	0x041e0010
 800b3e2:	55 04 55 04	.word	0x04550455
 800b3e6:	55 04 12 04	.word	0x04120455
 800b3ea:	55 04 55 04	.word	0x04550455
 800b3ee:	55 04 55 04	.word	0x04550455
 800b3f2:	55 04 55 04	.word	0x04550455
 800b3f6:	55 04 55 04	.word	0x04550455
 800b3fa:	55 04 24 04	.word	0x04240455

0800b3fe $t.28:
 800b3fe: 00 22                        	movs	r2, #0
;         1 => Ok(HalConfigParameter::Byte(bytes[0])),
 800b400: 9d f8 af 02                  	ldrb.w	r0, [sp, #687]
 800b404: a3 92                        	str	r2, [sp, #652]
 800b406: 04 21                        	movs	r1, #4
 800b408: 00 f0 21 bc                  	b.w	#2114 <$t.28+0x854>
 800b40c: 9d f8 19 04                  	ldrb.w	r0, [sp, #1049]
 800b410: 4f f0 00 0b                  	mov.w	r11, #0
;     copy_nonoverlapping(src, dst, count)
 800b414: bd f8 b3 22                  	ldrh.w	r2, [sp, #691]
;         self
 800b418: dd f8 af 62                  	ldr.w	r6, [sp, #687]
 800b41c: 42 ea 00 40                  	orr.w	r0, r2, r0, lsl #16
;             crate::opcode::GAP_INIT => Ok(ReturnParameters::GapInit(to_gap_init(&bytes[3..])?)),
 800b420: cd f8 f6 03                  	str.w	r0, [sp, #1014]
 800b424: 00 20                        	movs	r0, #0
 800b426: dd f8 20 15                  	ldr.w	r1, [sp, #1312]
 800b42a: a7 90                        	str	r0, [sp, #668]
 800b42c: bd f8 24 35                  	ldrh.w	r3, [sp, #1316]
 800b430: cd f8 f2 63                  	str.w	r6, [sp, #1010]
 800b434: 12 26                        	movs	r6, #18
 800b436: 8d f8 f0 63                  	strb.w	r6, [sp, #1008]
 800b43a: cd f8 fa 13                  	str.w	r1, [sp, #1018]
 800b43e: ad f8 fe 33                  	strh.w	r3, [sp, #1022]
 800b442: 00 20                        	movs	r0, #0
 800b444: a6 90                        	str	r0, [sp, #664]
 800b446: 00 20                        	movs	r0, #0
 800b448: a2 90                        	str	r0, [sp, #648]
 800b44a: 00 20                        	movs	r0, #0
 800b44c: a3 90                        	str	r0, [sp, #652]
 800b44e: 00 20                        	movs	r0, #0
 800b450: a1 90                        	str	r0, [sp, #644]
 800b452: 00 20                        	movs	r0, #0
 800b454: 9b 90                        	str	r0, [sp, #620]
 800b456: 00 20                        	movs	r0, #0
 800b458: 9f 90                        	str	r0, [sp, #636]
 800b45a: 00 20                        	movs	r0, #0
 800b45c: 06 90                        	str	r0, [sp, #24]
 800b45e: 00 20                        	movs	r0, #0
 800b460: 07 90                        	str	r0, [sp, #28]
 800b462: 00 20                        	movs	r0, #0
 800b464: 08 90                        	str	r0, [sp, #32]
 800b466: 00 20                        	movs	r0, #0
 800b468: 04 90                        	str	r0, [sp, #16]
 800b46a: 00 20                        	movs	r0, #0
 800b46c: 4f f0 00 0a                  	mov.w	r10, #0
 800b470: 09 90                        	str	r0, [sp, #36]
 800b472: 00 20                        	movs	r0, #0
 800b474: 0a 90                        	str	r0, [sp, #40]
 800b476: 00 20                        	movs	r0, #0
 800b478: 0b 90                        	str	r0, [sp, #44]
 800b47a: 00 20                        	movs	r0, #0
 800b47c: a9 90                        	str	r0, [sp, #676]
 800b47e: 00 20                        	movs	r0, #0
 800b480: 02 90                        	str	r0, [sp, #8]
 800b482: 00 20                        	movs	r0, #0
 800b484: 05 90                        	str	r0, [sp, #20]
 800b486: 00 20                        	movs	r0, #0
 800b488: 9a 90                        	str	r0, [sp, #616]
 800b48a: 00 20                        	movs	r0, #0
 800b48c: 28 90                        	str	r0, [sp, #160]
 800b48e: 00 20                        	movs	r0, #0
 800b490: 96 90                        	str	r0, [sp, #600]
 800b492: 00 20                        	movs	r0, #0
 800b494: 94 90                        	str	r0, [sp, #592]
 800b496: 00 21                        	movs	r1, #0
 800b498: 00 20                        	movs	r0, #0
 800b49a: 25 91                        	str	r1, [sp, #148]
 800b49c: 0d 90                        	str	r0, [sp, #52]
 800b49e: 00 20                        	movs	r0, #0
 800b4a0: 0c 90                        	str	r0, [sp, #48]
 800b4a2: 00 20                        	movs	r0, #0
 800b4a4: 18 90                        	str	r0, [sp, #96]
 800b4a6: 00 20                        	movs	r0, #0
 800b4a8: a5 90                        	str	r0, [sp, #660]
 800b4aa: ff f7 0c bc                  	b.w	#-2024 <$t.24+0x6b44>
;             crate::opcode::GATT_ADD_SERVICE => Ok(ReturnParameters::GattAddService(
 800b4ae: dd f8 0c 14                  	ldr.w	r1, [sp, #1036]
 800b4b2: dd f8 10 c4                  	ldr.w	r12, [sp, #1040]
 800b4b6: dd f8 13 34                  	ldr.w	r3, [sp, #1043]
 800b4ba: bd f8 0a 54                  	ldrh.w	r5, [sp, #1034]
 800b4be: 57 e9 10 42                  	ldrd	r4, r2, [r7, #-64]
 800b4c2: 9d f8 19 04                  	ldrb.w	r0, [sp, #1049]
;     copy_nonoverlapping(src, dst, count)
 800b4c6: bd f8 af 62                  	ldrh.w	r6, [sp, #687]
;             crate::opcode::GATT_ADD_SERVICE => Ok(ReturnParameters::GattAddService(
 800b4ca: 8d f8 f4 03                  	strb.w	r0, [sp, #1012]
 800b4ce: 21 20                        	movs	r0, #33
 800b4d0: ad f8 f2 63                  	strh.w	r6, [sp, #1010]
 800b4d4: 8d f8 f0 03                  	strb.w	r0, [sp, #1008]
 800b4d8: cd f8 f5 13                  	str.w	r1, [sp, #1013]
 800b4dc: 11 0e                        	lsrs	r1, r2, #24
 800b4de: 09 91                        	str	r1, [sp, #36]
 800b4e0: 00 21                        	movs	r1, #0
 800b4e2: a4 91                        	str	r1, [sp, #656]
 800b4e4: 11 0c                        	lsrs	r1, r2, #16
 800b4e6: 9d f8 08 04                  	ldrb.w	r0, [sp, #1032]
 800b4ea: 0a 91                        	str	r1, [sp, #40]
 800b4ec: 11 0a                        	lsrs	r1, r2, #8
 800b4ee: a9 92                        	str	r2, [sp, #676]
 800b4f0: 22 0a                        	lsrs	r2, r4, #8
 800b4f2: 01 90                        	str	r0, [sp, #4]
 800b4f4: 9d f8 09 04                  	ldrb.w	r0, [sp, #1033]
 800b4f8: 08 92                        	str	r2, [sp, #32]
 800b4fa: 00 90                        	str	r0, [sp]
 800b4fc: 00 22                        	movs	r2, #0
 800b4fe: cd f8 f9 c3                  	str.w	r12, [sp, #1017]
 800b502: 28 0a                        	lsrs	r0, r5, #8
 800b504: ff 93                        	str	r3, [sp, #1020]
 800b506: 23 0c                        	lsrs	r3, r4, #16
 800b508: 0b 91                        	str	r1, [sp, #44]
 800b50a: 21 0e                        	lsrs	r1, r4, #24
 800b50c: 1f 95                        	str	r5, [sp, #124]
 800b50e: 04 94                        	str	r4, [sp, #16]
 800b510: 6d 92                        	str	r2, [sp, #436]
 800b512: cd e9 06 13                  	strd	r1, r3, [sp, #24]
 800b516: 4f f0 00 0b                  	mov.w	r11, #0
 800b51a: 00 22                        	movs	r2, #0
 800b51c: 00 21                        	movs	r1, #0
 800b51e: 6c 92                        	str	r2, [sp, #432]
 800b520: 00 22                        	movs	r2, #0
 800b522: 05 91                        	str	r1, [sp, #20]
 800b524: 6b 92                        	str	r2, [sp, #428]
 800b526: 00 21                        	movs	r1, #0
 800b528: 9a 91                        	str	r1, [sp, #616]
 800b52a: 00 21                        	movs	r1, #0
 800b52c: 28 91                        	str	r1, [sp, #160]
 800b52e: 00 21                        	movs	r1, #0
 800b530: 00 22                        	movs	r2, #0
 800b532: 96 91                        	str	r1, [sp, #600]
 800b534: 6a 92                        	str	r2, [sp, #424]
 800b536: 94 90                        	str	r0, [sp, #592]
 800b538: 00 22                        	movs	r2, #0
 800b53a: 69 92                        	str	r2, [sp, #420]
 800b53c: 00 22                        	movs	r2, #0
 800b53e: 68 92                        	str	r2, [sp, #416]
 800b540: 00 22                        	movs	r2, #0
 800b542: 67 92                        	str	r2, [sp, #412]
 800b544: 00 22                        	movs	r2, #0
 800b546: 66 92                        	str	r2, [sp, #408]
 800b548: 00 22                        	movs	r2, #0
 800b54a: 65 92                        	str	r2, [sp, #404]
 800b54c: 00 22                        	movs	r2, #0
 800b54e: 64 92                        	str	r2, [sp, #400]
 800b550: 00 22                        	movs	r2, #0
 800b552: 63 92                        	str	r2, [sp, #396]
 800b554: 00 22                        	movs	r2, #0
 800b556: 62 92                        	str	r2, [sp, #392]
 800b558: 00 22                        	movs	r2, #0
 800b55a: 61 92                        	str	r2, [sp, #388]
 800b55c: 00 22                        	movs	r2, #0
 800b55e: 60 92                        	str	r2, [sp, #384]
 800b560: 00 22                        	movs	r2, #0
 800b562: 5f 92                        	str	r2, [sp, #380]
 800b564: 00 22                        	movs	r2, #0
 800b566: 5e 92                        	str	r2, [sp, #376]
 800b568: 00 22                        	movs	r2, #0
 800b56a: 5d 92                        	str	r2, [sp, #372]
 800b56c: 00 22                        	movs	r2, #0
 800b56e: 5c 92                        	str	r2, [sp, #368]
 800b570: 00 22                        	movs	r2, #0
 800b572: 5b 92                        	str	r2, [sp, #364]
 800b574: 00 22                        	movs	r2, #0
 800b576: 5a 92                        	str	r2, [sp, #360]
 800b578: 00 22                        	movs	r2, #0
 800b57a: 59 92                        	str	r2, [sp, #356]
 800b57c: 00 22                        	movs	r2, #0
 800b57e: a6 92                        	str	r2, [sp, #664]
 800b580: 00 22                        	movs	r2, #0
 800b582: a0 92                        	str	r2, [sp, #640]
 800b584: 00 22                        	movs	r2, #0
 800b586: 9e 92                        	str	r2, [sp, #632]
 800b588: 00 22                        	movs	r2, #0
 800b58a: a2 92                        	str	r2, [sp, #648]
 800b58c: 00 22                        	movs	r2, #0
 800b58e: a3 92                        	str	r2, [sp, #652]
 800b590: 00 22                        	movs	r2, #0
 800b592: a1 92                        	str	r2, [sp, #644]
 800b594: 00 22                        	movs	r2, #0
 800b596: a7 92                        	str	r2, [sp, #668]
 800b598: 00 22                        	movs	r2, #0
 800b59a: 9b 92                        	str	r2, [sp, #620]
 800b59c: 00 22                        	movs	r2, #0
 800b59e: 9f 92                        	str	r2, [sp, #636]
 800b5a0: 00 20                        	movs	r0, #0
 800b5a2: 4f f0 00 0a                  	mov.w	r10, #0
 800b5a6: 0d 90                        	str	r0, [sp, #52]
 800b5a8: 00 20                        	movs	r0, #0
 800b5aa: 0c 90                        	str	r0, [sp, #48]
 800b5ac: 00 20                        	movs	r0, #0
 800b5ae: 18 90                        	str	r0, [sp, #96]
 800b5b0: 00 20                        	movs	r0, #0
 800b5b2: 91 90                        	str	r0, [sp, #580]
 800b5b4: 00 21                        	movs	r1, #0
 800b5b6: 00 20                        	movs	r0, #0
 800b5b8: 87 91                        	str	r1, [sp, #540]
 800b5ba: ff f7 85 bb                  	b.w	#-2294 <$t.24+0x6b46>
;     copy_nonoverlapping(src, dst, count)
 800b5be: bd f8 af 62                  	ldrh.w	r6, [sp, #687]
;     require_len!(bytes, 3 + value_len);
 800b5c2: f1 1c                        	adds	r1, r6, #3
 800b5c4: a9 42                        	cmp	r1, r5
 800b5c6: 7e f4 06 af                  	bne.w	#-4596 <$t.24+0x6254>
 800b5ca: 9d f8 19 04                  	ldrb.w	r0, [sp, #1049]
;     let mut handle_value = GattHandleValue {
 800b5ce: f9 21                        	movs	r1, #249
 800b5d0: a7 90                        	str	r0, [sp, #668]
 800b5d2: 0d f5 83 60                  	add.w	r0, sp, #1048
 800b5d6: 11 f0 15 f8                  	bl	#69674
;         } else if self.end > slice.len() {
 800b5da: fa 2e                        	cmp	r6, #250
 800b5dc: 80 f0 c2 87                  	bhs.w	#3972 <$t.42+0x3aa>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 800b5e0: a9 98                        	ldr	r0, [sp, #676]
 800b5e2: 06 38                        	subs	r0, #6
;                 if !(*left_val == *right_val) {
 800b5e4: b0 42                        	cmp	r0, r6
 800b5e6: 40 f0 67 87                  	bne.w	#3790 <$t.42+0x2fe>
 800b5ea: 02 46                        	mov	r2, r0
;         intrinsics::offset(self, count)
 800b5ec: 08 f1 09 01                  	add.w	r1, r8, #9
 800b5f0: 0d f5 83 60                  	add.w	r0, sp, #1048
;     copy_nonoverlapping(src, dst, count)
 800b5f4: a6 92                        	str	r2, [sp, #664]
 800b5f6: 10 f0 90 fe                  	bl	#68896
;     Ok(handle_value)
 800b5fa: 9d f8 37 04                  	ldrb.w	r0, [sp, #1079]
 800b5fe: 01 90                        	str	r0, [sp, #4]
 800b600: 9d f8 38 04                  	ldrb.w	r0, [sp, #1080]
 800b604: 00 90                        	str	r0, [sp]
 800b606: 9d f8 3f 04                  	ldrb.w	r0, [sp, #1087]
 800b60a: 1e 90                        	str	r0, [sp, #120]
 800b60c: 9d f8 40 04                  	ldrb.w	r0, [sp, #1088]
 800b610: 73 90                        	str	r0, [sp, #460]
 800b612: 9d f8 47 04                  	ldrb.w	r0, [sp, #1095]
 800b616: 72 90                        	str	r0, [sp, #456]
 800b618: 9d f8 48 04                  	ldrb.w	r0, [sp, #1096]
 800b61c: 89 90                        	str	r0, [sp, #548]
 800b61e: 9d f8 49 04                  	ldrb.w	r0, [sp, #1097]
 800b622: 6f 90                        	str	r0, [sp, #444]
 800b624: 9d f8 4a 04                  	ldrb.w	r0, [sp, #1098]
 800b628: 58 90                        	str	r0, [sp, #352]
 800b62a: dd f8 4b 04                  	ldr.w	r0, [sp, #1099]
 800b62e: a9 90                        	str	r0, [sp, #676]
 800b630: bd f8 4f 04                  	ldrh.w	r0, [sp, #1103]
 800b634: 75 90                        	str	r0, [sp, #468]
 800b636: 9d f8 51 04                  	ldrb.w	r0, [sp, #1105]
 800b63a: 34 90                        	str	r0, [sp, #208]
 800b63c: 9d f8 52 04                  	ldrb.w	r0, [sp, #1106]
 800b640: 57 90                        	str	r0, [sp, #348]
 800b642: dd f8 53 04                  	ldr.w	r0, [sp, #1107]
 800b646: 6d 90                        	str	r0, [sp, #436]
 800b648: bd f8 57 04                  	ldrh.w	r0, [sp, #1111]
 800b64c: 7d 90                        	str	r0, [sp, #500]
 800b64e: 9d f8 59 04                  	ldrb.w	r0, [sp, #1113]
 800b652: 48 90                        	str	r0, [sp, #288]
 800b654: 9d f8 5a 04                  	ldrb.w	r0, [sp, #1114]
 800b658: 56 90                        	str	r0, [sp, #344]
 800b65a: dd f8 5b 04                  	ldr.w	r0, [sp, #1115]
 800b65e: 6c 90                        	str	r0, [sp, #432]
 800b660: bd f8 5f 04                  	ldrh.w	r0, [sp, #1119]
 800b664: 85 90                        	str	r0, [sp, #532]
 800b666: 9d f8 61 04                  	ldrb.w	r0, [sp, #1121]
 800b66a: 53 90                        	str	r0, [sp, #332]
 800b66c: 9d f8 62 04                  	ldrb.w	r0, [sp, #1122]
 800b670: 55 90                        	str	r0, [sp, #340]
 800b672: dd f8 63 04                  	ldr.w	r0, [sp, #1123]
 800b676: 6b 90                        	str	r0, [sp, #428]
 800b678: bd f8 67 04                  	ldrh.w	r0, [sp, #1127]
 800b67c: 70 90                        	str	r0, [sp, #448]
 800b67e: 9d f8 69 04                  	ldrb.w	r0, [sp, #1129]
 800b682: 52 90                        	str	r0, [sp, #328]
 800b684: 9d f8 6a 04                  	ldrb.w	r0, [sp, #1130]
 800b688: 54 90                        	str	r0, [sp, #336]
 800b68a: dd f8 6b 04                  	ldr.w	r0, [sp, #1131]
 800b68e: 6a 90                        	str	r0, [sp, #424]
 800b690: bd f8 6f 04                  	ldrh.w	r0, [sp, #1135]
 800b694: 84 90                        	str	r0, [sp, #528]
 800b696: 9d f8 71 04                  	ldrb.w	r0, [sp, #1137]
 800b69a: 50 90                        	str	r0, [sp, #320]
 800b69c: 9d f8 72 04                  	ldrb.w	r0, [sp, #1138]
 800b6a0: 51 90                        	str	r0, [sp, #324]
 800b6a2: dd f8 73 04                  	ldr.w	r0, [sp, #1139]
 800b6a6: 69 90                        	str	r0, [sp, #420]
 800b6a8: bd f8 77 04                  	ldrh.w	r0, [sp, #1143]
 800b6ac: 83 90                        	str	r0, [sp, #524]
 800b6ae: 9d f8 79 04                  	ldrb.w	r0, [sp, #1145]
 800b6b2: 4f 90                        	str	r0, [sp, #316]
 800b6b4: 9d f8 7a 04                  	ldrb.w	r0, [sp, #1146]
 800b6b8: 6e 90                        	str	r0, [sp, #440]
 800b6ba: dd f8 7b 04                  	ldr.w	r0, [sp, #1147]
 800b6be: 68 90                        	str	r0, [sp, #416]
 800b6c0: bd f8 7f 04                  	ldrh.w	r0, [sp, #1151]
 800b6c4: 82 90                        	str	r0, [sp, #520]
 800b6c6: 9d f8 81 04                  	ldrb.w	r0, [sp, #1153]
 800b6ca: 4d 90                        	str	r0, [sp, #308]
 800b6cc: 9d f8 82 04                  	ldrb.w	r0, [sp, #1154]
 800b6d0: 4e 90                        	str	r0, [sp, #312]
 800b6d2: dd f8 83 04                  	ldr.w	r0, [sp, #1155]
 800b6d6: 67 90                        	str	r0, [sp, #412]
 800b6d8: bd f8 87 04                  	ldrh.w	r0, [sp, #1159]
 800b6dc: 81 90                        	str	r0, [sp, #516]
 800b6de: 9d f8 89 04                  	ldrb.w	r0, [sp, #1161]
 800b6e2: 4b 90                        	str	r0, [sp, #300]
 800b6e4: 9d f8 8a 04                  	ldrb.w	r0, [sp, #1162]
 800b6e8: 4c 90                        	str	r0, [sp, #304]
 800b6ea: dd f8 8b 04                  	ldr.w	r0, [sp, #1163]
 800b6ee: 66 90                        	str	r0, [sp, #408]
 800b6f0: bd f8 8f 04                  	ldrh.w	r0, [sp, #1167]
 800b6f4: 80 90                        	str	r0, [sp, #512]
 800b6f6: 9d f8 91 04                  	ldrb.w	r0, [sp, #1169]
 800b6fa: 49 90                        	str	r0, [sp, #292]
 800b6fc: 9d f8 92 04                  	ldrb.w	r0, [sp, #1170]
 800b700: 4a 90                        	str	r0, [sp, #296]
 800b702: dd f8 93 04                  	ldr.w	r0, [sp, #1171]
 800b706: 65 90                        	str	r0, [sp, #404]
 800b708: bd f8 97 04                  	ldrh.w	r0, [sp, #1175]
 800b70c: 7f 90                        	str	r0, [sp, #508]
 800b70e: 9d f8 99 04                  	ldrb.w	r0, [sp, #1177]
 800b712: 46 90                        	str	r0, [sp, #280]
 800b714: 9d f8 9a 04                  	ldrb.w	r0, [sp, #1178]
 800b718: 47 90                        	str	r0, [sp, #284]
 800b71a: dd f8 9b 04                  	ldr.w	r0, [sp, #1179]
 800b71e: 64 90                        	str	r0, [sp, #400]
 800b720: bd f8 9f 04                  	ldrh.w	r0, [sp, #1183]
 800b724: 7e 90                        	str	r0, [sp, #504]
 800b726: 9d f8 a1 04                  	ldrb.w	r0, [sp, #1185]
 800b72a: 44 90                        	str	r0, [sp, #272]
 800b72c: 9d f8 a2 04                  	ldrb.w	r0, [sp, #1186]
 800b730: 45 90                        	str	r0, [sp, #276]
 800b732: dd f8 a3 04                  	ldr.w	r0, [sp, #1187]
 800b736: 63 90                        	str	r0, [sp, #396]
 800b738: bd f8 a7 04                  	ldrh.w	r0, [sp, #1191]
 800b73c: 7c 90                        	str	r0, [sp, #496]
 800b73e: 9d f8 a9 04                  	ldrb.w	r0, [sp, #1193]
 800b742: 42 90                        	str	r0, [sp, #264]
 800b744: 9d f8 aa 04                  	ldrb.w	r0, [sp, #1194]
 800b748: 43 90                        	str	r0, [sp, #268]
 800b74a: dd f8 ab 04                  	ldr.w	r0, [sp, #1195]
 800b74e: 62 90                        	str	r0, [sp, #392]
 800b750: bd f8 af 04                  	ldrh.w	r0, [sp, #1199]
 800b754: 7b 90                        	str	r0, [sp, #492]
 800b756: 9d f8 b1 04                  	ldrb.w	r0, [sp, #1201]
 800b75a: 40 90                        	str	r0, [sp, #256]
 800b75c: 9d f8 b2 04                  	ldrb.w	r0, [sp, #1202]
 800b760: 41 90                        	str	r0, [sp, #260]
 800b762: dd f8 b3 04                  	ldr.w	r0, [sp, #1203]
 800b766: 61 90                        	str	r0, [sp, #388]
 800b768: bd f8 b7 04                  	ldrh.w	r0, [sp, #1207]
 800b76c: 7a 90                        	str	r0, [sp, #488]
 800b76e: 9d f8 b9 04                  	ldrb.w	r0, [sp, #1209]
 800b772: 3e 90                        	str	r0, [sp, #248]
 800b774: 9d f8 ba 04                  	ldrb.w	r0, [sp, #1210]
 800b778: 3f 90                        	str	r0, [sp, #252]
 800b77a: dd f8 bb 04                  	ldr.w	r0, [sp, #1211]
 800b77e: 60 90                        	str	r0, [sp, #384]
 800b780: bd f8 bf 04                  	ldrh.w	r0, [sp, #1215]
 800b784: 79 90                        	str	r0, [sp, #484]
 800b786: 9d f8 c1 04                  	ldrb.w	r0, [sp, #1217]
 800b78a: 3c 90                        	str	r0, [sp, #240]
 800b78c: 9d f8 c2 04                  	ldrb.w	r0, [sp, #1218]
 800b790: 3d 90                        	str	r0, [sp, #244]
 800b792: dd f8 c3 04                  	ldr.w	r0, [sp, #1219]
 800b796: 5f 90                        	str	r0, [sp, #380]
 800b798: bd f8 c7 04                  	ldrh.w	r0, [sp, #1223]
 800b79c: 78 90                        	str	r0, [sp, #480]
 800b79e: 9d f8 c9 04                  	ldrb.w	r0, [sp, #1225]
 800b7a2: 3a 90                        	str	r0, [sp, #232]
 800b7a4: 9d f8 ca 04                  	ldrb.w	r0, [sp, #1226]
 800b7a8: 3b 90                        	str	r0, [sp, #236]
 800b7aa: dd f8 cb 04                  	ldr.w	r0, [sp, #1227]
 800b7ae: 5e 90                        	str	r0, [sp, #376]
 800b7b0: bd f8 cf 04                  	ldrh.w	r0, [sp, #1231]
 800b7b4: 77 90                        	str	r0, [sp, #476]
 800b7b6: 9d f8 d1 04                  	ldrb.w	r0, [sp, #1233]
 800b7ba: 37 90                        	str	r0, [sp, #220]
 800b7bc: 9d f8 d2 04                  	ldrb.w	r0, [sp, #1234]
 800b7c0: 38 90                        	str	r0, [sp, #224]
 800b7c2: dd f8 d3 04                  	ldr.w	r0, [sp, #1235]
 800b7c6: 5d 90                        	str	r0, [sp, #372]
 800b7c8: bd f8 d7 04                  	ldrh.w	r0, [sp, #1239]
 800b7cc: 76 90                        	str	r0, [sp, #472]
 800b7ce: 9d f8 d9 04                  	ldrb.w	r0, [sp, #1241]
 800b7d2: 33 90                        	str	r0, [sp, #204]
 800b7d4: 9d f8 da 04                  	ldrb.w	r0, [sp, #1242]
 800b7d8: 35 90                        	str	r0, [sp, #212]
 800b7da: dd f8 db 04                  	ldr.w	r0, [sp, #1243]
 800b7de: 5c 90                        	str	r0, [sp, #368]
 800b7e0: bd f8 df 04                  	ldrh.w	r0, [sp, #1247]
 800b7e4: 39 90                        	str	r0, [sp, #228]
 800b7e6: 9d f8 e1 04                  	ldrb.w	r0, [sp, #1249]
 800b7ea: 30 90                        	str	r0, [sp, #192]
 800b7ec: 9d f8 e2 04                  	ldrb.w	r0, [sp, #1250]
 800b7f0: 31 90                        	str	r0, [sp, #196]
 800b7f2: dd f8 e3 04                  	ldr.w	r0, [sp, #1251]
 800b7f6: 5b 90                        	str	r0, [sp, #364]
 800b7f8: bd f8 e7 04                  	ldrh.w	r0, [sp, #1255]
 800b7fc: 36 90                        	str	r0, [sp, #216]
 800b7fe: 9d f8 e9 04                  	ldrb.w	r0, [sp, #1257]
 800b802: 2e 90                        	str	r0, [sp, #184]
 800b804: 9d f8 ea 04                  	ldrb.w	r0, [sp, #1258]
 800b808: 2f 90                        	str	r0, [sp, #188]
 800b80a: dd f8 eb 04                  	ldr.w	r0, [sp, #1259]
 800b80e: 5a 90                        	str	r0, [sp, #360]
 800b810: bd f8 ef 04                  	ldrh.w	r0, [sp, #1263]
 800b814: 32 90                        	str	r0, [sp, #200]
 800b816: 9d f8 f1 04                  	ldrb.w	r0, [sp, #1265]
 800b81a: 2c 90                        	str	r0, [sp, #176]
 800b81c: 9d f8 f2 04                  	ldrb.w	r0, [sp, #1266]
 800b820: 2d 90                        	str	r0, [sp, #180]
 800b822: dd f8 f3 04                  	ldr.w	r0, [sp, #1267]
 800b826: 59 90                        	str	r0, [sp, #356]
 800b828: dd f8 fb 04                  	ldr.w	r0, [sp, #1275]
 800b82c: 87 90                        	str	r0, [sp, #540]
 800b82e: dd f8 07 05                  	ldr.w	r0, [sp, #1287]
 800b832: 25 90                        	str	r0, [sp, #148]
 800b834: bd f8 0b 05                  	ldrh.w	r0, [sp, #1291]
 800b838: 9d 90                        	str	r0, [sp, #628]
 800b83a: 9d f8 0d 05                  	ldrb.w	r0, [sp, #1293]
 800b83e: 9e 90                        	str	r0, [sp, #632]
 800b840: 9d f8 0e 05                  	ldrb.w	r0, [sp, #1294]
 800b844: a0 90                        	str	r0, [sp, #640]
 800b846: dd f8 0f 05                  	ldr.w	r0, [sp, #1295]
 800b84a: 20 90                        	str	r0, [sp, #128]
 800b84c: bd f8 41 04                  	ldrh.w	r0, [sp, #1089]
 800b850: 86 90                        	str	r0, [sp, #536]
 800b852: dd f8 ff 04                  	ldr.w	r0, [sp, #1279]
 800b856: bd f8 19 14                  	ldrh.w	r1, [sp, #1049]
 800b85a: 88 90                        	str	r0, [sp, #544]
 800b85c: dd f8 2b 04                  	ldr.w	r0, [sp, #1067]
 800b860: dd f8 2f b4                  	ldr.w	r11, [sp, #1071]
;             crate::opcode::GATT_READ_HANDLE_VALUE => Ok(ReturnParameters::GattReadHandleValue(
 800b864: ad f8 fa 13                  	strh.w	r1, [sp, #1018]
 800b868: a7 99                        	ldr	r1, [sp, #668]
;     Ok(handle_value)
 800b86a: 71 90                        	str	r0, [sp, #452]
;             crate::opcode::GATT_READ_HANDLE_VALUE => Ok(ReturnParameters::GattReadHandleValue(
 800b86c: 8d f8 f8 13                  	strb.w	r1, [sp, #1016]
 800b870: a6 99                        	ldr	r1, [sp, #664]
 800b872: dd f8 33 04                  	ldr.w	r0, [sp, #1075]
 800b876: fd 91                        	str	r1, [sp, #1012]
 800b878: 31 21                        	movs	r1, #49
 800b87a: 8d f8 f0 13                  	strb.w	r1, [sp, #1008]
;         match hci::Opcode(LittleEndian::read_u16(&bytes[1..])) {
 800b87e: 4f ea 1b 41                  	lsr.w	r1, r11, #16
;     Ok(handle_value)
 800b882: dd f8 23 84                  	ldr.w	r8, [sp, #1059]
;         match hci::Opcode(LittleEndian::read_u16(&bytes[1..])) {
 800b886: 41 ea 00 41                  	orr.w	r1, r1, r0, lsl #16
 800b88a: 9a 91                        	str	r1, [sp, #616]
 800b88c: 01 0e                        	lsrs	r1, r0, #24
 800b88e: 00 0c                        	lsrs	r0, r0, #16
;     Ok(handle_value)
 800b890: dd f8 3b 64                  	ldr.w	r6, [sp, #1083]
;             crate::opcode::GATT_READ_HANDLE_VALUE => Ok(ReturnParameters::GattReadHandleValue(
 800b894: 99 90                        	str	r0, [sp, #612]
 800b896: 1f fa 88 f0                  	uxth.w	r0, r8
 800b89a: 00 0a                        	lsrs	r0, r0, #8
;     Ok(handle_value)
 800b89c: dd f8 03 55                  	ldr.w	r5, [sp, #1283]
 800b8a0: a7 90                        	str	r0, [sp, #668]
 800b8a2: 00 20                        	movs	r0, #0
 800b8a4: dd f8 f7 24                  	ldr.w	r2, [sp, #1271]
 800b8a8: 21 90                        	str	r0, [sp, #132]
;         match hci::Opcode(LittleEndian::read_u16(&bytes[1..])) {
 800b8aa: 4f ea 1b 20                  	lsr.w	r0, r11, #8
;     Ok(handle_value)
 800b8ae: 9d f8 18 a4                  	ldrb.w	r10, [sp, #1048]
 800b8b2: dd f8 1b 34                  	ldr.w	r3, [sp, #1051]
;         match hci::Opcode(LittleEndian::read_u16(&bytes[1..])) {
 800b8b6: 9c 91                        	str	r1, [sp, #624]
;             crate::opcode::GATT_READ_HANDLE_VALUE => Ok(ReturnParameters::GattReadHandleValue(
 800b8b8: 31 0e                        	lsrs	r1, r6, #24
;         match hci::Opcode(LittleEndian::read_u16(&bytes[1..])) {
 800b8ba: 96 90                        	str	r0, [sp, #600]
;         self
 800b8bc: 28 0e                        	lsrs	r0, r5, #24
;     Ok(handle_value)
 800b8be: bd f8 39 e4                  	ldrh.w	lr, [sp, #1081]
;             crate::opcode::GATT_READ_HANDLE_VALUE => Ok(ReturnParameters::GattReadHandleValue(
 800b8c2: 8d f8 f9 a3                  	strb.w	r10, [sp, #1017]
 800b8c6: 4f ea 12 4a                  	lsr.w	r10, r2, #16
;     Ok(handle_value)
 800b8ca: dd f8 43 44                  	ldr.w	r4, [sp, #1091]
 800b8ce: dd f8 1f c4                  	ldr.w	r12, [sp, #1055]
 800b8d2: dd f8 27 94                  	ldr.w	r9, [sp, #1063]
;             crate::opcode::GATT_READ_HANDLE_VALUE => Ok(ReturnParameters::GattReadHandleValue(
 800b8d6: ff 93                        	str	r3, [sp, #1020]
 800b8d8: cd f8 08 b0                  	str.w	r11, [sp, #8]
;         match hci::Opcode(LittleEndian::read_u16(&bytes[1..])) {
 800b8dc: c5 f3 07 4b                  	ubfx	r11, r5, #16, #8
;             crate::opcode::GATT_READ_HANDLE_VALUE => Ok(ReturnParameters::GattReadHandleValue(
 800b8e0: 24 90                        	str	r0, [sp, #144]
 800b8e2: 10 0a                        	lsrs	r0, r2, #8
 800b8e4: a5 92                        	str	r2, [sp, #660]
 800b8e6: 97 91                        	str	r1, [sp, #604]
 800b8e8: 31 0c                        	lsrs	r1, r6, #16
 800b8ea: 71 9a                        	ldr	r2, [sp, #452]
 800b8ec: 98 91                        	str	r1, [sp, #608]
 800b8ee: 31 0a                        	lsrs	r1, r6, #8
 800b8f0: 18 91                        	str	r1, [sp, #96]
 800b8f2: 4f ea 1e 21                  	lsr.w	r1, lr, #8
 800b8f6: 95 91                        	str	r1, [sp, #596]
 800b8f8: 11 0e                        	lsrs	r1, r2, #24
 800b8fa: 92 91                        	str	r1, [sp, #584]
 800b8fc: 11 0c                        	lsrs	r1, r2, #16
 800b8fe: 93 91                        	str	r1, [sp, #588]
 800b900: 11 0a                        	lsrs	r1, r2, #8
 800b902: 94 91                        	str	r1, [sp, #592]
 800b904: 4f ea 19 61                  	lsr.w	r1, r9, #24
 800b908: 74 91                        	str	r1, [sp, #464]
 800b90a: 4f ea 19 41                  	lsr.w	r1, r9, #16
 800b90e: 8f 91                        	str	r1, [sp, #572]
 800b910: 4f ea 19 21                  	lsr.w	r1, r9, #8
 800b914: 90 91                        	str	r1, [sp, #576]
 800b916: 4f ea 18 41                  	lsr.w	r1, r8, #16
 800b91a: 9f 91                        	str	r1, [sp, #636]
;         self
 800b91c: 88 99                        	ldr	r1, [sp, #544]
 800b91e: 8e 94                        	str	r4, [sp, #568]
 800b920: 2b 95                        	str	r5, [sp, #172]
;             crate::opcode::GATT_READ_HANDLE_VALUE => Ok(ReturnParameters::GattReadHandleValue(
 800b922: 4f ea 1c 65                  	lsr.w	r5, r12, #24
;         self
 800b926: 09 0a                        	lsrs	r1, r1, #8
 800b928: 91 96                        	str	r6, [sp, #580]
 800b92a: 2a 91                        	str	r1, [sp, #168]
 800b92c: 21 0e                        	lsrs	r1, r4, #24
 800b92e: 8d 91                        	str	r1, [sp, #564]
 800b930: 21 0c                        	lsrs	r1, r4, #16
 800b932: 8c 91                        	str	r1, [sp, #560]
 800b934: 21 0a                        	lsrs	r1, r4, #8
 800b936: 8b 91                        	str	r1, [sp, #556]
;             crate::opcode::GATT_READ_HANDLE_VALUE => Ok(ReturnParameters::GattReadHandleValue(
 800b938: 4f ea 1c 26                  	lsr.w	r6, r12, #8
; }
 800b93c: 86 99                        	ldr	r1, [sp, #536]
 800b93e: cd f8 7c e0                  	str.w	lr, [sp, #124]
;             crate::opcode::GATT_READ_HANDLE_VALUE => Ok(ReturnParameters::GattReadHandleValue(
 800b942: 4f ea 1c 4e                  	lsr.w	lr, r12, #16
 800b946: cd f8 10 90                  	str.w	r9, [sp, #16]
 800b94a: 4f ea 18 69                  	lsr.w	r9, r8, #24
; }
 800b94e: 0c 0a                        	lsrs	r4, r1, #8
 800b950: a9 99                        	ldr	r1, [sp, #676]
 800b952: a4 91                        	str	r1, [sp, #656]
 800b954: a7 99                        	ldr	r1, [sp, #668]
 800b956: a1 91                        	str	r1, [sp, #644]
 800b958: 74 99                        	ldr	r1, [sp, #464]
 800b95a: 06 91                        	str	r1, [sp, #24]
 800b95c: 8f 99                        	ldr	r1, [sp, #572]
 800b95e: 07 91                        	str	r1, [sp, #28]
 800b960: 90 99                        	ldr	r1, [sp, #576]
 800b962: 08 91                        	str	r1, [sp, #32]
 800b964: 92 99                        	ldr	r1, [sp, #584]
 800b966: 09 91                        	str	r1, [sp, #36]
 800b968: 93 99                        	ldr	r1, [sp, #588]
 800b96a: 0a 91                        	str	r1, [sp, #40]
 800b96c: 94 99                        	ldr	r1, [sp, #592]
 800b96e: 0b 91                        	str	r1, [sp, #44]
 800b970: 96 99                        	ldr	r1, [sp, #600]
 800b972: 05 91                        	str	r1, [sp, #20]
 800b974: 99 99                        	ldr	r1, [sp, #612]
 800b976: 28 91                        	str	r1, [sp, #160]
 800b978: 9c 99                        	ldr	r1, [sp, #624]
 800b97a: 96 91                        	str	r1, [sp, #600]
 800b97c: 95 99                        	ldr	r1, [sp, #596]
 800b97e: 94 91                        	str	r1, [sp, #592]
 800b980: 97 99                        	ldr	r1, [sp, #604]
 800b982: 0d 91                        	str	r1, [sp, #52]
 800b984: 98 99                        	ldr	r1, [sp, #608]
 800b986: cd f8 98 b2                  	str.w	r11, [sp, #664]
 800b98a: ab 46                        	mov	r11, r5
 800b98c: cd f8 6c 92                  	str.w	r9, [sp, #620]
 800b990: cd f8 0c c0                  	str.w	r12, [sp, #12]
 800b994: 8a 94                        	str	r4, [sp, #552]
 800b996: cd e9 a2 e6                  	strd	lr, r6, [sp, #648]
 800b99a: cd f8 9c 82                  	str.w	r8, [sp, #668]
 800b99e: a9 92                        	str	r2, [sp, #676]
 800b9a0: 0c 91                        	str	r1, [sp, #48]
 800b9a2: dd f8 74 92                  	ldr.w	r9, [sp, #628]
 800b9a6: 00 f0 56 bc                  	b.w	#2220 <$t.42+0x9c>
;             require_len_at_least!(bytes, HEADER_LEN);
 800b9aa: 02 2e                        	cmp	r6, #2
 800b9ac: 1f d2                        	bhs	#62 <$t.28+0x5f4>
 800b9ae: 00 22                        	movs	r2, #0
 800b9b0: 02 21                        	movs	r1, #2
 800b9b2: 01 20                        	movs	r0, #1
 800b9b4: 4f f0 00 0c                  	mov.w	r12, #0
 800b9b8: 00 23                        	movs	r3, #0
 800b9ba: 94 93                        	str	r3, [sp, #592]
 800b9bc: 78 e1                        	b	#752 <$t.28+0x8b6>
;                 Some(flags)
 800b9be: 9d f8 b3 22                  	ldrb.w	r2, [sp, #691]
; }
 800b9c2: c9 b2                        	uxtb	r1, r1
;                 Some(flags)
 800b9c4: bd f8 b1 62                  	ldrh.w	r6, [sp, #689]
;         self
 800b9c8: 40 ea 01 40                  	orr.w	r0, r0, r1, lsl #16
 800b9cc: 9d f8 b5 32                  	ldrb.w	r3, [sp, #693]
; }
 800b9d0: e1 b2                        	uxtb	r1, r4
;                 Some(flags)
 800b9d2: 46 ea 02 42                  	orr.w	r2, r6, r2, lsl #16
;         self
 800b9d6: 40 ea 02 60                  	orr.w	r0, r0, r2, lsl #24
;                 ReturnParameters::LeReadChannelMap(to_le_channel_map_parameters(&bytes[3..])?)
 800b9da: f8 90                        	str	r0, [sp, #992]
; }
 800b9dc: 10 0a                        	lsrs	r0, r2, #8
;         self
 800b9de: 40 ea 01 40                  	orr.w	r0, r0, r1, lsl #16
 800b9e2: 40 ea 03 60                  	orr.w	r0, r0, r3, lsl #24
;                 ReturnParameters::LeReadChannelMap(to_le_channel_map_parameters(&bytes[3..])?)
 800b9e6: f9 90                        	str	r0, [sp, #996]
 800b9e8: 1a 20                        	movs	r0, #26
 800b9ea: f6 f7 e3 bf                  	b.w	#-36922 <$t.16+0x5ae>
;             let address_count = bytes[1] as usize;
 800b9ee: 9d f8 af 02                  	ldrb.w	r0, [sp, #687]
 800b9f2: a2 90                        	str	r0, [sp, #648]
;             if bytes.len() != HEADER_LEN + ADDR_LEN * address_count {
 800b9f4: c0 eb c0 00                  	rsb	r0, r0, r0, lsl #3
 800b9f8: 02 30                        	adds	r0, #2
 800b9fa: b0 42                        	cmp	r0, r6
 800b9fc: 40 f0 52 81                  	bne.w	#676 <$t.28+0x8aa>
 800ba00: 0d f5 83 60                  	add.w	r0, sp, #1048
 800ba04: f5 21                        	movs	r1, #245
 800ba06: 10 f0 fd fd                  	bl	#68602
;         if self.n != 0 {
 800ba0a: a2 98                        	ldr	r0, [sp, #648]
 800ba0c: 00 28                        	cmp	r0, #0
 800ba0e: 00 f0 39 82                  	beq.w	#1138 <$t.36+0x56>
 800ba12: 0d f5 83 60                  	add.w	r0, sp, #1048
 800ba16: a2 9d                        	ldr	r5, [sp, #648]
 800ba18: 00 f1 0f 0c                  	add.w	r12, r0, #15
 800ba1c: 0d f5 83 64                  	add.w	r4, sp, #1048
 800ba20: 00 23                        	movs	r3, #0
;                     if is_empty!(self) {
 800ba22: f5 2b                        	cmp	r3, #245
 800ba24: 20 d0                        	beq	#64 <$t.28+0x66e>
;         } else if self.end > slice.len() {
 800ba26: 03 f1 09 00                  	add.w	r0, r3, #9
 800ba2a: b0 42                        	cmp	r0, r6
 800ba2c: 9c bf                        	itt	ls
 800ba2e: 98 1c                        	addls	r0, r3, #2
;                 *byte = hci::to_bd_addr_type(bytes[index], hci::BdAddr(addr)).map_err(|e| {
 800ba30: b0 42                        	cmpls	r0, r6
 800ba32: 80 f0 9b 81                  	bhs.w	#822 <$t.30+0x8>
 800ba36: 08 eb 03 02                  	add.w	r2, r8, r3
 800ba3a: d2 f8 0b 10                  	ldr.w	r1, [r2, #11]
 800ba3e: b2 f8 09 e0                  	ldrh.w	lr, [r2, #9]
 800ba42: 12 7a                        	ldrb	r2, [r2, #8]
;         0 => Ok(BdAddrType::Public(addr)),
 800ba44: 22 b1                        	cbz	r2, #8
 800ba46: 01 2a                        	cmp	r2, #1
 800ba48: 40 f0 2b 85                  	bne.w	#2646 <$t.42+0x2e8>
 800ba4c: 01 22                        	movs	r2, #1
 800ba4e: 00 e0                        	b	#0 <$t.28+0x658>
 800ba50: 00 22                        	movs	r2, #0
 800ba52: e0 1d                        	adds	r0, r4, #7
 800ba54: 01 3d                        	subs	r5, #1
;         if self.n != 0 {
 800ba56: 03 f1 07 03                  	add.w	r3, r3, #7
;                 *byte = hci::to_bd_addr_type(bytes[index], hci::BdAddr(addr)).map_err(|e| {
 800ba5a: c4 f8 03 10                  	str.w	r1, [r4, #3]
 800ba5e: a4 f8 01 e0                  	strh.w	lr, [r4, #1]
 800ba62: 22 70                        	strb	r2, [r4]
 800ba64: 04 46                        	mov	r4, r0
;         if self.n != 0 {
 800ba66: dc d1                        	bne	#-72 <$t.28+0x628>
;             Ok(GapBondedDevices {
 800ba68: dd f8 7b 04                  	ldr.w	r0, [sp, #1147]
 800ba6c: 68 90                        	str	r0, [sp, #416]
 800ba6e: 9d f8 7a 04                  	ldrb.w	r0, [sp, #1146]
 800ba72: 6e 90                        	str	r0, [sp, #440]
 800ba74: 9d f8 79 04                  	ldrb.w	r0, [sp, #1145]
 800ba78: bd f8 41 14                  	ldrh.w	r1, [sp, #1089]
 800ba7c: 4f 90                        	str	r0, [sp, #316]
 800ba7e: bd f8 77 04                  	ldrh.w	r0, [sp, #1143]
 800ba82: 83 90                        	str	r0, [sp, #524]
 800ba84: dc f8 00 00                  	ldr.w	r0, [r12]
 800ba88: 04 90                        	str	r0, [sp, #16]
 800ba8a: dc f8 04 00                  	ldr.w	r0, [r12, #4]
 800ba8e: a9 90                        	str	r0, [sp, #676]
 800ba90: 08 0a                        	lsrs	r0, r1, #8
 800ba92: 8a 90                        	str	r0, [sp, #552]
 800ba94: dd f8 73 04                  	ldr.w	r0, [sp, #1139]
 800ba98: 69 90                        	str	r0, [sp, #420]
 800ba9a: 9d f8 72 04                  	ldrb.w	r0, [sp, #1138]
 800ba9e: 51 90                        	str	r0, [sp, #324]
 800baa0: 9d f8 71 04                  	ldrb.w	r0, [sp, #1137]
 800baa4: 50 90                        	str	r0, [sp, #320]
 800baa6: bd f8 6f 04                  	ldrh.w	r0, [sp, #1135]
 800baaa: 84 90                        	str	r0, [sp, #528]
 800baac: dd f8 6b 04                  	ldr.w	r0, [sp, #1131]
 800bab0: 6a 90                        	str	r0, [sp, #424]
 800bab2: 9d f8 6a 04                  	ldrb.w	r0, [sp, #1130]
 800bab6: 54 90                        	str	r0, [sp, #336]
 800bab8: 9d f8 69 04                  	ldrb.w	r0, [sp, #1129]
 800babc: 52 90                        	str	r0, [sp, #328]
 800babe: bd f8 67 04                  	ldrh.w	r0, [sp, #1127]
 800bac2: 70 90                        	str	r0, [sp, #448]
 800bac4: dd f8 63 04                  	ldr.w	r0, [sp, #1123]
 800bac8: 6b 90                        	str	r0, [sp, #428]
 800baca: 9d f8 62 04                  	ldrb.w	r0, [sp, #1122]
 800bace: 55 90                        	str	r0, [sp, #340]
 800bad0: 9d f8 61 04                  	ldrb.w	r0, [sp, #1121]
 800bad4: 53 90                        	str	r0, [sp, #332]
 800bad6: bd f8 5f 04                  	ldrh.w	r0, [sp, #1119]
 800bada: 85 90                        	str	r0, [sp, #532]
 800badc: dd f8 5b 04                  	ldr.w	r0, [sp, #1115]
 800bae0: 6c 90                        	str	r0, [sp, #432]
 800bae2: 9d f8 5a 04                  	ldrb.w	r0, [sp, #1114]
 800bae6: 56 90                        	str	r0, [sp, #344]
 800bae8: 9d f8 59 04                  	ldrb.w	r0, [sp, #1113]
 800baec: 48 90                        	str	r0, [sp, #288]
 800baee: bd f8 57 04                  	ldrh.w	r0, [sp, #1111]
 800baf2: 7d 90                        	str	r0, [sp, #500]
 800baf4: dd f8 53 04                  	ldr.w	r0, [sp, #1107]
 800baf8: 6d 90                        	str	r0, [sp, #436]
 800bafa: 9d f8 52 04                  	ldrb.w	r0, [sp, #1106]
 800bafe: 57 90                        	str	r0, [sp, #348]
 800bb00: 9d f8 51 04                  	ldrb.w	r0, [sp, #1105]
 800bb04: 34 90                        	str	r0, [sp, #208]
 800bb06: bd f8 4f 04                  	ldrh.w	r0, [sp, #1103]
 800bb0a: 86 91                        	str	r1, [sp, #536]
 800bb0c: 75 90                        	str	r0, [sp, #468]
 800bb0e: dd f8 4b 04                  	ldr.w	r0, [sp, #1099]
 800bb12: 9d f8 f1 14                  	ldrb.w	r1, [sp, #1265]
 800bb16: a4 90                        	str	r0, [sp, #656]
 800bb18: 9d f8 4a 04                  	ldrb.w	r0, [sp, #1098]
 800bb1c: 2c 91                        	str	r1, [sp, #176]
 800bb1e: dd f8 3b 14                  	ldr.w	r1, [sp, #1083]
 800bb22: 58 90                        	str	r0, [sp, #352]
 800bb24: 9d f8 49 04                  	ldrb.w	r0, [sp, #1097]
 800bb28: 91 91                        	str	r1, [sp, #580]
 800bb2a: bd f8 39 14                  	ldrh.w	r1, [sp, #1081]
 800bb2e: 6f 90                        	str	r0, [sp, #444]
 800bb30: 9d f8 48 04                  	ldrb.w	r0, [sp, #1096]
 800bb34: 1f 91                        	str	r1, [sp, #124]
 800bb36: 9d f8 38 14                  	ldrb.w	r1, [sp, #1080]
 800bb3a: 89 90                        	str	r0, [sp, #548]
 800bb3c: 9d f8 47 04                  	ldrb.w	r0, [sp, #1095]
 800bb40: 00 91                        	str	r1, [sp]
 800bb42: 9d f8 37 14                  	ldrb.w	r1, [sp, #1079]
 800bb46: 72 90                        	str	r0, [sp, #456]
 800bb48: dd f8 43 04                  	ldr.w	r0, [sp, #1091]
 800bb4c: 01 91                        	str	r1, [sp, #4]
 800bb4e: dd f8 2f 14                  	ldr.w	r1, [sp, #1071]
 800bb52: 8e 90                        	str	r0, [sp, #568]
 800bb54: 9d f8 40 04                  	ldrb.w	r0, [sp, #1088]
 800bb58: 02 91                        	str	r1, [sp, #8]
 800bb5a: dd f8 23 14                  	ldr.w	r1, [sp, #1059]
 800bb5e: 73 90                        	str	r0, [sp, #460]
 800bb60: 9d f8 3f 04                  	ldrb.w	r0, [sp, #1087]
 800bb64: a7 91                        	str	r1, [sp, #668]
 800bb66: dd f8 1f 14                  	ldr.w	r1, [sp, #1055]
 800bb6a: 1e 90                        	str	r0, [sp, #120]
 800bb6c: 9d f8 06 05                  	ldrb.w	r0, [sp, #1286]
 800bb70: 03 91                        	str	r1, [sp, #12]
 800bb72: dd f8 1b 14                  	ldr.w	r1, [sp, #1051]
 800bb76: 24 90                        	str	r0, [sp, #144]
 800bb78: 9d f8 ff 04                  	ldrb.w	r0, [sp, #1279]
 800bb7c: a1 91                        	str	r1, [sp, #644]
 800bb7e: bd f8 19 14                  	ldrh.w	r1, [sp, #1049]
 800bb82: 88 90                        	str	r0, [sp, #544]
 800bb84: 9f 91                        	str	r1, [sp, #636]
 800bb86: 9d f8 f8 04                  	ldrb.w	r0, [sp, #1272]
 800bb8a: dd f8 33 c4                  	ldr.w	r12, [sp, #1075]
 800bb8e: 9d f8 18 14                  	ldrb.w	r1, [sp, #1048]
 800bb92: db e1                        	b	#950 <$t.36+0x11e>
 800bb94: 00 22                        	movs	r2, #0
;         bonding_required: to_boolean(bytes[2]).map_err(hci::event::Error::Vendor)?,
 800bb96: 9d f8 b0 12                  	ldrb.w	r1, [sp, #688]
 800bb9a: 00 23                        	movs	r3, #0
;         0 => Ok(false),
 800bb9c: 94 93                        	str	r3, [sp, #592]
 800bb9e: 21 b1                        	cbz	r1, #8
 800bba0: 01 29                        	cmp	r1, #1
 800bba2: 0f d1                        	bne	#30 <$t.28+0x7ca>
 800bba4: 4f f0 01 0c                  	mov.w	r12, #1
 800bba8: 01 e0                        	b	#2 <$t.28+0x7b4>
 800bbaa: 4f f0 00 0c                  	mov.w	r12, #0
;         out_of_band_data_present: to_boolean(bytes[3]).map_err(hci::event::Error::Vendor)?,
 800bbae: 9d f8 b1 12                  	ldrb.w	r1, [sp, #689]
 800bbb2: 00 23                        	movs	r3, #0
;         0 => Ok(false),
 800bbb4: 94 93                        	str	r3, [sp, #592]
 800bbb6: 00 29                        	cmp	r1, #0
 800bbb8: 00 f0 a9 80                  	beq.w	#338 <$t.28+0x914>
 800bbbc: 01 29                        	cmp	r1, #1
 800bbbe: 01 d1                        	bne	#2 <$t.28+0x7ca>
 800bbc0: 01 26                        	movs	r6, #1
 800bbc2: a5 e0                        	b	#330 <$t.28+0x916>
 800bbc4: 4f f0 12 08                  	mov.w	r8, #18
 800bbc8: 4f f0 1c 09                  	mov.w	r9, #28
 800bbcc: 4f f0 00 0a                  	mov.w	r10, #0
 800bbd0: 00 22                        	movs	r2, #0
 800bbd2: 00 20                        	movs	r0, #0
 800bbd4: a7 90                        	str	r0, [sp, #668]
;         self
 800bbd6: 49 ea 0a 00                  	orr.w	r0, r9, r10
 800bbda: c9 b2                        	uxtb	r1, r1
 800bbdc: 40 ea 01 20                  	orr.w	r0, r0, r1, lsl #8
;         Err(v)
 800bbe0: fe 90                        	str	r0, [sp, #1016]
 800bbe2: 42 ea 05 40                  	orr.w	r0, r2, r5, lsl #16
;                 to_gap_security_level(&bytes[3..])?,
 800bbe6: 9a 90                        	str	r0, [sp, #616]
 800bbe8: 28 0e                        	lsrs	r0, r5, #24
;         Err(v)
 800bbea: cd f8 fc e3                  	str.w	lr, [sp, #1020]
;                 to_gap_security_level(&bytes[3..])?,
 800bbee: 96 90                        	str	r0, [sp, #600]
 800bbf0: 28 0c                        	lsrs	r0, r5, #16
;         Err(v)
 800bbf2: fd 93                        	str	r3, [sp, #1012]
 800bbf4: ad f8 f2 43                  	strh.w	r4, [sp, #1010]
 800bbf8: 8d f8 f1 b3                  	strb.w	r11, [sp, #1009]
 800bbfc: 8d f8 f0 83                  	strb.w	r8, [sp, #1008]
 800bc00: 00 e3                        	b	#1536 <$t.42+0x4a>
 800bc02: 00 21                        	movs	r1, #0
;             Ok(HalConfigParameter::PublicAddress(hci::BdAddr(buf)))
 800bc04: 9d f8 af 02                  	ldrb.w	r0, [sp, #687]
 800bc08: 9d f8 b4 22                  	ldrb.w	r2, [sp, #692]
 800bc0c: bd f8 b2 52                  	ldrh.w	r5, [sp, #690]
 800bc10: bd f8 b0 32                  	ldrh.w	r3, [sp, #688]
 800bc14: a3 91                        	str	r1, [sp, #652]
 800bc16: 00 21                        	movs	r1, #0
 800bc18: 19 e0                        	b	#50 <$t.28+0x854>
 800bc1a: 00 20                        	movs	r0, #0
;     copy_nonoverlapping(src, dst, count)
 800bc1c: bd f8 af 32                  	ldrh.w	r3, [sp, #687]
 800bc20: a3 90                        	str	r0, [sp, #652]
 800bc22: 02 21                        	movs	r1, #2
 800bc24: 13 e0                        	b	#38 <$t.28+0x854>
;             Ok(HalConfigParameter::EncryptionKey(hci::host::EncryptionKey(
 800bc26: bd f8 bd 02                  	ldrh.w	r0, [sp, #701]
 800bc2a: 9d f8 bc 12                  	ldrb.w	r1, [sp, #700]
 800bc2e: a3 90                        	str	r0, [sp, #652]
 800bc30: 03 91                        	str	r1, [sp, #12]
 800bc32: 03 21                        	movs	r1, #3
 800bc34: 9d f8 af 02                  	ldrb.w	r0, [sp, #687]
 800bc38: 9d f8 b4 22                  	ldrb.w	r2, [sp, #692]
 800bc3c: 9d f8 b5 c2                  	ldrb.w	r12, [sp, #693]
 800bc40: ae 9c                        	ldr	r4, [sp, #696]
 800bc42: bd f8 b6 e2                  	ldrh.w	lr, [sp, #694]
 800bc46: bd f8 b2 52                  	ldrh.w	r5, [sp, #690]
 800bc4a: bd f8 b0 32                  	ldrh.w	r3, [sp, #688]
;             crate::opcode::HAL_READ_CONFIG_DATA => Ok(ReturnParameters::HalReadConfigData(
 800bc4e: 8d f8 f3 03                  	strb.w	r0, [sp, #1011]
 800bc52: 02 20                        	movs	r0, #2
 800bc54: 8d f8 f0 03                  	strb.w	r0, [sp, #1008]
 800bc58: 4f f0 00 0b                  	mov.w	r11, #0
 800bc5c: a3 98                        	ldr	r0, [sp, #652]
 800bc5e: ff 94                        	str	r4, [sp, #1020]
 800bc60: ad f8 fa e3                  	strh.w	lr, [sp, #1018]
 800bc64: 00 0a                        	lsrs	r0, r0, #8
 800bc66: 8d f8 f9 c3                  	strb.w	r12, [sp, #1017]
 800bc6a: a2 90                        	str	r0, [sp, #648]
 800bc6c: 00 20                        	movs	r0, #0
 800bc6e: a6 90                        	str	r0, [sp, #664]
 800bc70: 8d f8 f8 23                  	strb.w	r2, [sp, #1016]
 800bc74: ad f8 f6 53                  	strh.w	r5, [sp, #1014]
 800bc78: ad f8 f4 33                  	strh.w	r3, [sp, #1012]
 800bc7c: 8d f8 f2 13                  	strb.w	r1, [sp, #1010]
 800bc80: 00 20                        	movs	r0, #0
 800bc82: a1 90                        	str	r0, [sp, #644]
 800bc84: fe f7 ff bf                  	b.w	#-4098 <$t.24+0x6b04>
 800bc88: a9 98                        	ldr	r0, [sp, #676]
 800bc8a: 4f f0 12 09                  	mov.w	r9, #18
 800bc8e: 1a 21                        	movs	r1, #26
 800bc90: 00 25                        	movs	r5, #0
 800bc92: a0 f1 04 0c                  	sub.w	r12, r0, #4
 800bc96: 00 20                        	movs	r0, #0
 800bc98: 94 90                        	str	r0, [sp, #592]
;         self
 800bc9a: 2c f0 ff 03                  	bic	r3, r12, #255
 800bc9e: 00 24                        	movs	r4, #0
 800bca0: fd f7 09 b9                  	b.w	#-11758 <$t.24+0x4d34>
 800bca4: 4f f0 00 0c                  	mov.w	r12, #0
 800bca8: 1e 21                        	movs	r1, #30
 800bcaa: 12 20                        	movs	r0, #18
 800bcac: 00 22                        	movs	r2, #0
 800bcae: 94 92                        	str	r2, [sp, #592]
 800bcb0: 00 23                        	movs	r3, #0
 800bcb2: a7 93                        	str	r3, [sp, #668]
;         Err(v)
 800bcb4: 8d f8 f0 03                  	strb.w	r0, [sp, #1008]
;         self
 800bcb8: c8 b2                        	uxtb	r0, r1
 800bcba: 40 ea 0c 00                  	orr.w	r0, r0, r12
 800bcbe: d1 b2                        	uxtb	r1, r2
 800bcc0: 40 ea 01 20                  	orr.w	r0, r0, r1, lsl #8
;         Err(v)
 800bcc4: fe 90                        	str	r0, [sp, #1016]
 800bcc6: c8 ea 04 40                  	pkhbt	r0, r8, r4, lsl #16
;                 to_gap_bonded_devices(&bytes[3..])?,
 800bcca: 9a 90                        	str	r0, [sp, #616]
 800bccc: 20 0e                        	lsrs	r0, r4, #24
;         Err(v)
 800bcce: cd f8 fc e3                  	str.w	lr, [sp, #1020]
;                 to_gap_bonded_devices(&bytes[3..])?,
 800bcd2: 96 90                        	str	r0, [sp, #600]
 800bcd4: 20 0c                        	lsrs	r0, r4, #16
;         Err(v)
 800bcd6: fd 96                        	str	r6, [sp, #1012]
 800bcd8: ad f8 f2 a3                  	strh.w	r10, [sp, #1010]
 800bcdc: 8d f8 f1 93                  	strb.w	r9, [sp, #1009]
 800bce0: 8e 99                        	ldr	r1, [sp, #568]
 800bce2: a7 9a                        	ldr	r2, [sp, #668]
 800bce4: 28 90                        	str	r0, [sp, #160]
 800bce6: 08 0e                        	lsrs	r0, r1, #24
 800bce8: 8d 90                        	str	r0, [sp, #564]
 800bcea: 90 b2                        	uxth	r0, r2
 800bcec: 00 0a                        	lsrs	r0, r0, #8
 800bcee: a1 90                        	str	r0, [sp, #644]
 800bcf0: 01 20                        	movs	r0, #1
 800bcf2: 21 90                        	str	r0, [sp, #132]
 800bcf4: 00 20                        	movs	r0, #0
 800bcf6: a6 90                        	str	r0, [sp, #664]
 800bcf8: 08 0c                        	lsrs	r0, r1, #16
 800bcfa: 8c 90                        	str	r0, [sp, #560]
 800bcfc: 08 0a                        	lsrs	r0, r1, #8
 800bcfe: 8b 90                        	str	r0, [sp, #556]
 800bd00: 91 98                        	ldr	r0, [sp, #580]
 800bd02: 01 0e                        	lsrs	r1, r0, #24
 800bd04: 0d 91                        	str	r1, [sp, #52]
 800bd06: 01 0c                        	lsrs	r1, r0, #16
 800bd08: 0c 91                        	str	r1, [sp, #48]
 800bd0a: 00 0a                        	lsrs	r0, r0, #8
 800bd0c: 89 e2                        	b	#1298 <$t.42+0x68>
 800bd0e: 00 26                        	movs	r6, #0
;         pass_key_required: bytes[4].try_into().map_err(hci::event::Error::Vendor)?,
 800bd10: 9d f8 b2 12                  	ldrb.w	r1, [sp, #690]
 800bd14: 00 23                        	movs	r3, #0
;             0x00 => Ok(PassKeyRequirement::NotRequired),
 800bd16: 94 93                        	str	r3, [sp, #592]
 800bd18: 00 29                        	cmp	r1, #0
 800bd1a: 00 f0 8e 80                  	beq.w	#284 <$t.36+0xc>
 800bd1e: 02 29                        	cmp	r1, #2
 800bd20: 00 f0 89 80                  	beq.w	#274 <$t.36+0x8>
 800bd24: 01 29                        	cmp	r1, #1
 800bd26: 40 f0 a2 80                  	bne.w	#324 <$t.36+0x40>
 800bd2a: 01 21                        	movs	r1, #1
 800bd2c: 86 e0                        	b	#268 <$t.36+0xe>
 800bd2e: 04 21                        	movs	r1, #4
 800bd30: 08 e0                        	b	#16 <$t.28+0x94a>
 800bd32: 02 21                        	movs	r1, #2
 800bd34: 06 e0                        	b	#12 <$t.28+0x94a>
 800bd36: 03 21                        	movs	r1, #3
 800bd38: 04 e0                        	b	#8 <$t.28+0x94a>
 800bd3a: 07 21                        	movs	r1, #7
 800bd3c: 02 e0                        	b	#4 <$t.28+0x94a>
 800bd3e: 05 21                        	movs	r1, #5
 800bd40: 00 e0                        	b	#0 <$t.28+0x94a>
 800bd42: 06 21                        	movs	r1, #6
;         match value {
 800bd44: a6 91                        	str	r1, [sp, #664]
;         status.clients[client].state = bytes[1 + client]
 800bd46: 9d f8 b0 e2                  	ldrb.w	lr, [sp, #688]
;             0 => Ok(LinkState::Idle),
 800bd4a: be f1 07 0f                  	cmp.w	lr, #7
 800bd4e: 00 f2 38 82                  	bhi.w	#1136 <$t.42+0x8>
 800bd52: bd f8 b7 12                  	ldrh.w	r1, [sp, #695]
 800bd56: a0 91                        	str	r1, [sp, #640]
 800bd58: 00 21                        	movs	r1, #0
 800bd5a: a5 91                        	str	r1, [sp, #660]
 800bd5c: df e8 0e f0                  	tbb	[pc, lr]

0800bd60 $d.29:
 800bd60:	16 04 0c 0e	.word	0x0e0c0416
 800bd64:	0a 12 14 10	.word	0x1014120a

0800bd68 $t.30:
 800bd68: 01 21                        	movs	r1, #1
 800bd6a: 0e e0                        	b	#28 <$t.30+0x26>
 800bd6c: 31 46                        	mov	r1, r6
 800bd6e: 0a f0 52 f8                  	bl	#41124
 800bd72: fe de                        	trap
 800bd74: 04 21                        	movs	r1, #4
 800bd76: 08 e0                        	b	#16 <$t.30+0x26>
 800bd78: 02 21                        	movs	r1, #2
 800bd7a: 06 e0                        	b	#12 <$t.30+0x26>
 800bd7c: 03 21                        	movs	r1, #3
 800bd7e: 04 e0                        	b	#8 <$t.30+0x26>
 800bd80: 07 21                        	movs	r1, #7
 800bd82: 02 e0                        	b	#4 <$t.30+0x26>
 800bd84: 05 21                        	movs	r1, #5
 800bd86: 00 e0                        	b	#0 <$t.30+0x26>
 800bd88: 06 21                        	movs	r1, #6
 800bd8a: a5 91                        	str	r1, [sp, #660]
;         status.clients[client].state = bytes[1 + client]
 800bd8c: 9d f8 b1 e2                  	ldrb.w	lr, [sp, #689]
;             0 => Ok(LinkState::Idle),
 800bd90: be f1 07 0f                  	cmp.w	lr, #7
 800bd94: 00 f2 15 82                  	bhi.w	#1066 <$t.42+0x8>
 800bd98: bd f8 b9 12                  	ldrh.w	r1, [sp, #697]
 800bd9c: 9f 91                        	str	r1, [sp, #636]
 800bd9e: 00 21                        	movs	r1, #0
 800bda0: a4 91                        	str	r1, [sp, #656]
 800bda2: df e8 0e f0                  	tbb	[pc, lr]

0800bda6 $d.31:
 800bda6:	12 04 08 0a	.word	0x0a080412
 800bdaa:	06 0e 10 0c	.word	0x0c100e06

0800bdae $t.32:
 800bdae: 01 21                        	movs	r1, #1
 800bdb0: 0a e0                        	b	#20 <$t.32+0x1e>
 800bdb2: 04 21                        	movs	r1, #4
 800bdb4: 08 e0                        	b	#16 <$t.32+0x1e>
 800bdb6: 02 21                        	movs	r1, #2
 800bdb8: 06 e0                        	b	#12 <$t.32+0x1e>
 800bdba: 03 21                        	movs	r1, #3
 800bdbc: 04 e0                        	b	#8 <$t.32+0x1e>
 800bdbe: 07 21                        	movs	r1, #7
 800bdc0: 02 e0                        	b	#4 <$t.32+0x1e>
 800bdc2: 05 21                        	movs	r1, #5
 800bdc4: 00 e0                        	b	#0 <$t.32+0x1e>
 800bdc6: 06 21                        	movs	r1, #6
 800bdc8: a4 91                        	str	r1, [sp, #656]
;         status.clients[client].state = bytes[1 + client]
 800bdca: 9d f8 b2 e2                  	ldrb.w	lr, [sp, #690]
;             0 => Ok(LinkState::Idle),
 800bdce: be f1 07 0f                  	cmp.w	lr, #7
 800bdd2: 00 f2 f6 81                  	bhi.w	#1004 <$t.42+0x8>
 800bdd6: bd f8 bb 12                  	ldrh.w	r1, [sp, #699]
 800bdda: 9e 91                        	str	r1, [sp, #632]
 800bddc: 00 21                        	movs	r1, #0
 800bdde: a3 91                        	str	r1, [sp, #652]
 800bde0: df e8 0e f0                  	tbb	[pc, lr]

0800bde4 $d.33:
 800bde4:	12 04 08 0a	.word	0x0a080412
 800bde8:	06 0e 10 0c	.word	0x0c100e06

0800bdec $t.34:
 800bdec: 01 21                        	movs	r1, #1
 800bdee: 0a e0                        	b	#20 <$t.34+0x1e>
 800bdf0: 04 21                        	movs	r1, #4
 800bdf2: 08 e0                        	b	#16 <$t.34+0x1e>
 800bdf4: 02 21                        	movs	r1, #2
 800bdf6: 06 e0                        	b	#12 <$t.34+0x1e>
 800bdf8: 03 21                        	movs	r1, #3
 800bdfa: 04 e0                        	b	#8 <$t.34+0x1e>
 800bdfc: 07 21                        	movs	r1, #7
 800bdfe: 02 e0                        	b	#4 <$t.34+0x1e>
 800be00: 05 21                        	movs	r1, #5
 800be02: 00 e0                        	b	#0 <$t.34+0x1e>
 800be04: 06 21                        	movs	r1, #6
 800be06: a3 91                        	str	r1, [sp, #652]
;         status.clients[client].state = bytes[1 + client]
 800be08: 9d f8 b3 e2                  	ldrb.w	lr, [sp, #691]
;             0 => Ok(LinkState::Idle),
 800be0c: be f1 07 0f                  	cmp.w	lr, #7
 800be10: 00 f2 d7 81                  	bhi.w	#942 <$t.42+0x8>
 800be14: bd f8 bd 12                  	ldrh.w	r1, [sp, #701]
 800be18: 9d 91                        	str	r1, [sp, #628]
 800be1a: 00 21                        	movs	r1, #0
 800be1c: a1 91                        	str	r1, [sp, #644]
 800be1e: df e8 1e f0                  	tbh	[pc, lr, lsl #1]

0800be22 $d.35:
 800be22:	7b 01 08 00	.word	0x0008017b
 800be26:	71 01 73 01	.word	0x01730171
 800be2a:	6f 01 77 01	.word	0x0177016f
 800be2e:	79 01 75 01	.word	0x01750179

0800be32 $t.36:
 800be32: 01 21                        	movs	r1, #1
 800be34: 6f e1                        	b	#734 <$t.36+0x2e8>
 800be36: 02 21                        	movs	r1, #2
 800be38: 00 e0                        	b	#0 <$t.36+0xe>
 800be3a: 00 21                        	movs	r1, #0
;             crate::opcode::GAP_GET_SECURITY_LEVEL => Ok(ReturnParameters::GapGetSecurityLevel(
 800be3c: dd f8 20 55                  	ldr.w	r5, [sp, #1312]
 800be40: dd f8 24 45                  	ldr.w	r4, [sp, #1316]
 800be44: 8d f8 f1 03                  	strb.w	r0, [sp, #1009]
 800be48: 17 20                        	movs	r0, #23
 800be4a: bd f8 28 35                  	ldrh.w	r3, [sp, #1320]
 800be4e: 8d f8 f5 13                  	strb.w	r1, [sp, #1013]
 800be52: 8d f8 f4 63                  	strb.w	r6, [sp, #1012]
 800be56: 8d f8 f3 c3                  	strb.w	r12, [sp, #1011]
 800be5a: 8d f8 f2 23                  	strb.w	r2, [sp, #1010]
 800be5e: 8d f8 f0 03                  	strb.w	r0, [sp, #1008]
 800be62: cd f8 f6 53                  	str.w	r5, [sp, #1014]
 800be66: cd f8 fa 43                  	str.w	r4, [sp, #1018]
 800be6a: fc f7 ed bd                  	b.w	#-13350 <$t.24+0x48c6>
 800be6e: 4f f0 12 08                  	mov.w	r8, #18
 800be72: 4f f0 1d 09                  	mov.w	r9, #29
 800be76: 00 20                        	movs	r0, #0
 800be78: 8b 90                        	str	r0, [sp, #556]
 800be7a: 00 20                        	movs	r0, #0
 800be7c: 8c 90                        	str	r0, [sp, #560]
 800be7e: 00 20                        	movs	r0, #0
 800be80: 8d 90                        	str	r0, [sp, #564]
 800be82: a3 e6                        	b	#-698 <$t.28+0x7d2>
 800be84: 00 20                        	movs	r0, #0
;             Ok(GapBondedDevices {
 800be86: 00 21                        	movs	r1, #0
 800be88: 68 90                        	str	r0, [sp, #416]
 800be8a: 00 20                        	movs	r0, #0
 800be8c: 6e 90                        	str	r0, [sp, #440]
 800be8e: 00 20                        	movs	r0, #0
 800be90: 4f 90                        	str	r0, [sp, #316]
 800be92: 00 20                        	movs	r0, #0
 800be94: 83 90                        	str	r0, [sp, #524]
 800be96: 00 20                        	movs	r0, #0
 800be98: 69 90                        	str	r0, [sp, #420]
 800be9a: 00 20                        	movs	r0, #0
 800be9c: 51 90                        	str	r0, [sp, #324]
 800be9e: 00 20                        	movs	r0, #0
 800bea0: 50 90                        	str	r0, [sp, #320]
 800bea2: 00 20                        	movs	r0, #0
 800bea4: 84 90                        	str	r0, [sp, #528]
 800bea6: 00 20                        	movs	r0, #0
 800bea8: 6a 90                        	str	r0, [sp, #424]
 800beaa: 00 20                        	movs	r0, #0
 800beac: 54 90                        	str	r0, [sp, #336]
 800beae: 00 20                        	movs	r0, #0
 800beb0: 52 90                        	str	r0, [sp, #328]
 800beb2: 00 20                        	movs	r0, #0
 800beb4: 70 90                        	str	r0, [sp, #448]
 800beb6: 00 20                        	movs	r0, #0
 800beb8: 6b 90                        	str	r0, [sp, #428]
 800beba: 00 20                        	movs	r0, #0
 800bebc: 55 90                        	str	r0, [sp, #340]
 800bebe: 00 20                        	movs	r0, #0
 800bec0: 53 90                        	str	r0, [sp, #332]
 800bec2: 00 20                        	movs	r0, #0
 800bec4: 85 90                        	str	r0, [sp, #532]
 800bec6: 00 20                        	movs	r0, #0
 800bec8: 6c 90                        	str	r0, [sp, #432]
 800beca: 00 20                        	movs	r0, #0
 800becc: 56 90                        	str	r0, [sp, #344]
 800bece: 00 20                        	movs	r0, #0
 800bed0: 48 90                        	str	r0, [sp, #288]
 800bed2: 00 20                        	movs	r0, #0
 800bed4: 7d 90                        	str	r0, [sp, #500]
 800bed6: 00 20                        	movs	r0, #0
 800bed8: 6d 90                        	str	r0, [sp, #436]
 800beda: 00 20                        	movs	r0, #0
 800bedc: 57 90                        	str	r0, [sp, #348]
 800bede: 00 20                        	movs	r0, #0
 800bee0: 34 90                        	str	r0, [sp, #208]
 800bee2: 00 20                        	movs	r0, #0
 800bee4: 75 90                        	str	r0, [sp, #468]
 800bee6: 00 20                        	movs	r0, #0
 800bee8: a4 90                        	str	r0, [sp, #656]
 800beea: 00 20                        	movs	r0, #0
 800beec: 2c 91                        	str	r1, [sp, #176]
 800beee: 00 21                        	movs	r1, #0
 800bef0: 58 90                        	str	r0, [sp, #352]
 800bef2: 00 20                        	movs	r0, #0
 800bef4: 91 91                        	str	r1, [sp, #580]
 800bef6: 00 21                        	movs	r1, #0
 800bef8: 6f 90                        	str	r0, [sp, #444]
 800befa: 00 20                        	movs	r0, #0
 800befc: 1f 91                        	str	r1, [sp, #124]
 800befe: 00 21                        	movs	r1, #0
 800bf00: 89 90                        	str	r0, [sp, #548]
 800bf02: 00 20                        	movs	r0, #0
 800bf04: 00 91                        	str	r1, [sp]
 800bf06: 00 21                        	movs	r1, #0
 800bf08: 72 90                        	str	r0, [sp, #456]
 800bf0a: 00 20                        	movs	r0, #0
 800bf0c: 01 91                        	str	r1, [sp, #4]
 800bf0e: 00 21                        	movs	r1, #0
 800bf10: 8e 90                        	str	r0, [sp, #568]
 800bf12: 00 20                        	movs	r0, #0
 800bf14: 02 91                        	str	r1, [sp, #8]
 800bf16: 00 21                        	movs	r1, #0
 800bf18: 86 90                        	str	r0, [sp, #536]
 800bf1a: 00 20                        	movs	r0, #0
 800bf1c: 04 91                        	str	r1, [sp, #16]
 800bf1e: 00 21                        	movs	r1, #0
 800bf20: 8a 90                        	str	r0, [sp, #552]
 800bf22: 00 20                        	movs	r0, #0
 800bf24: a9 91                        	str	r1, [sp, #676]
 800bf26: 00 21                        	movs	r1, #0
 800bf28: 73 90                        	str	r0, [sp, #460]
 800bf2a: 00 20                        	movs	r0, #0
 800bf2c: a7 91                        	str	r1, [sp, #668]
 800bf2e: 00 21                        	movs	r1, #0
 800bf30: 1e 90                        	str	r0, [sp, #120]
 800bf32: 00 20                        	movs	r0, #0
 800bf34: 03 91                        	str	r1, [sp, #12]
 800bf36: 00 21                        	movs	r1, #0
 800bf38: 24 90                        	str	r0, [sp, #144]
 800bf3a: 00 20                        	movs	r0, #0
 800bf3c: a1 91                        	str	r1, [sp, #644]
 800bf3e: 00 21                        	movs	r1, #0
 800bf40: 88 90                        	str	r0, [sp, #544]
 800bf42: 00 20                        	movs	r0, #0
 800bf44: 9f 91                        	str	r1, [sp, #636]
 800bf46: 4f f0 00 0c                  	mov.w	r12, #0
 800bf4a: 00 21                        	movs	r1, #0
 800bf4c: 0d f5 83 62                  	add.w	r2, sp, #1048
 800bf50: a0 91                        	str	r1, [sp, #640]
 800bf52: e8 32                        	adds	r2, #232
 800bf54: 03 99                        	ldr	r1, [sp, #12]
 800bf56: 4f f6 ff 76                  	movw	r6, #65535
 800bf5a: bd f8 0b 95                  	ldrh.w	r9, [sp, #1291]
 800bf5e: 93 78                        	ldrb	r3, [r2, #2]
;         self
 800bf60: 21 ea 06 08                  	bic.w	r8, r1, r6
;             Ok(GapBondedDevices {
 800bf64: 54 79                        	ldrb	r4, [r2, #5]
 800bf66: 09 0a                        	lsrs	r1, r1, #8
 800bf68: 15 88                        	ldrh	r5, [r2]
 800bf6a: 4f f0 00 0b                  	mov.w	r11, #0
 800bf6e: b2 f8 03 20                  	ldrh.w	r2, [r2, #3]
 800bf72: 45 ea 03 43                  	orr.w	r3, r5, r3, lsl #16
 800bf76: a3 91                        	str	r1, [sp, #652]
 800bf78: 42 ea 04 45                  	orr.w	r5, r2, r4, lsl #16
 800bf7c: dd f8 f3 24                  	ldr.w	r2, [sp, #1267]
 800bf80: 59 92                        	str	r2, [sp, #356]
 800bf82: 9d f8 f2 24                  	ldrb.w	r2, [sp, #1266]
 800bf86: 2d 92                        	str	r2, [sp, #180]
 800bf88: bd f8 ef 24                  	ldrh.w	r2, [sp, #1263]
 800bf8c: 32 92                        	str	r2, [sp, #200]
 800bf8e: dd f8 eb 24                  	ldr.w	r2, [sp, #1259]
 800bf92: 5a 92                        	str	r2, [sp, #360]
 800bf94: 9d f8 ea 24                  	ldrb.w	r2, [sp, #1258]
 800bf98: 2f 92                        	str	r2, [sp, #188]
 800bf9a: 9d f8 e9 24                  	ldrb.w	r2, [sp, #1257]
 800bf9e: 2e 92                        	str	r2, [sp, #184]
 800bfa0: bd f8 e7 24                  	ldrh.w	r2, [sp, #1255]
 800bfa4: 36 92                        	str	r2, [sp, #216]
 800bfa6: dd f8 e3 24                  	ldr.w	r2, [sp, #1251]
 800bfaa: 5b 92                        	str	r2, [sp, #364]
 800bfac: 9d f8 e2 24                  	ldrb.w	r2, [sp, #1250]
 800bfb0: 31 92                        	str	r2, [sp, #196]
 800bfb2: 9d f8 e1 24                  	ldrb.w	r2, [sp, #1249]
 800bfb6: 30 92                        	str	r2, [sp, #192]
 800bfb8: bd f8 df 24                  	ldrh.w	r2, [sp, #1247]
 800bfbc: 39 92                        	str	r2, [sp, #228]
 800bfbe: dd f8 db 24                  	ldr.w	r2, [sp, #1243]
 800bfc2: 5c 92                        	str	r2, [sp, #368]
 800bfc4: 9d f8 da 24                  	ldrb.w	r2, [sp, #1242]
 800bfc8: 35 92                        	str	r2, [sp, #212]
 800bfca: 9d f8 d9 24                  	ldrb.w	r2, [sp, #1241]
 800bfce: 33 92                        	str	r2, [sp, #204]
 800bfd0: bd f8 d7 24                  	ldrh.w	r2, [sp, #1239]
 800bfd4: 76 92                        	str	r2, [sp, #472]
 800bfd6: dd f8 d3 24                  	ldr.w	r2, [sp, #1235]
 800bfda: 5d 92                        	str	r2, [sp, #372]
 800bfdc: 9d f8 d2 24                  	ldrb.w	r2, [sp, #1234]
 800bfe0: 38 92                        	str	r2, [sp, #224]
 800bfe2: 9d f8 d1 24                  	ldrb.w	r2, [sp, #1233]
 800bfe6: 37 92                        	str	r2, [sp, #220]
 800bfe8: bd f8 cf 24                  	ldrh.w	r2, [sp, #1231]
 800bfec: 77 92                        	str	r2, [sp, #476]
 800bfee: dd f8 cb 24                  	ldr.w	r2, [sp, #1227]
 800bff2: 5e 92                        	str	r2, [sp, #376]
 800bff4: 9d f8 ca 24                  	ldrb.w	r2, [sp, #1226]
 800bff8: 3b 92                        	str	r2, [sp, #236]
 800bffa: 9d f8 c9 24                  	ldrb.w	r2, [sp, #1225]
 800bffe: 3a 92                        	str	r2, [sp, #232]
 800c000: bd f8 c7 24                  	ldrh.w	r2, [sp, #1223]
 800c004: 78 92                        	str	r2, [sp, #480]
 800c006: dd f8 c3 24                  	ldr.w	r2, [sp, #1219]
 800c00a: 5f 92                        	str	r2, [sp, #380]
 800c00c: 9d f8 c2 24                  	ldrb.w	r2, [sp, #1218]
 800c010: 3d 92                        	str	r2, [sp, #244]
 800c012: 9d f8 c1 24                  	ldrb.w	r2, [sp, #1217]
 800c016: 3c 92                        	str	r2, [sp, #240]
 800c018: bd f8 bf 24                  	ldrh.w	r2, [sp, #1215]
 800c01c: 79 92                        	str	r2, [sp, #484]
 800c01e: dd f8 bb 24                  	ldr.w	r2, [sp, #1211]
 800c022: 60 92                        	str	r2, [sp, #384]
 800c024: 9d f8 ba 24                  	ldrb.w	r2, [sp, #1210]
 800c028: 3f 92                        	str	r2, [sp, #252]
 800c02a: 9d f8 b9 24                  	ldrb.w	r2, [sp, #1209]
 800c02e: 3e 92                        	str	r2, [sp, #248]
 800c030: bd f8 b7 24                  	ldrh.w	r2, [sp, #1207]
 800c034: 7a 92                        	str	r2, [sp, #488]
 800c036: dd f8 b3 24                  	ldr.w	r2, [sp, #1203]
 800c03a: 61 92                        	str	r2, [sp, #388]
 800c03c: 9d f8 b2 24                  	ldrb.w	r2, [sp, #1202]
 800c040: 41 92                        	str	r2, [sp, #260]
 800c042: 9d f8 b1 24                  	ldrb.w	r2, [sp, #1201]
 800c046: 40 92                        	str	r2, [sp, #256]
 800c048: bd f8 af 24                  	ldrh.w	r2, [sp, #1199]
 800c04c: 7b 92                        	str	r2, [sp, #492]
 800c04e: dd f8 ab 24                  	ldr.w	r2, [sp, #1195]
 800c052: 62 92                        	str	r2, [sp, #392]
 800c054: 9d f8 aa 24                  	ldrb.w	r2, [sp, #1194]
 800c058: 43 92                        	str	r2, [sp, #268]
 800c05a: 9d f8 a9 24                  	ldrb.w	r2, [sp, #1193]
 800c05e: 42 92                        	str	r2, [sp, #264]
 800c060: bd f8 a7 24                  	ldrh.w	r2, [sp, #1191]
 800c064: 7c 92                        	str	r2, [sp, #496]
 800c066: dd f8 a3 24                  	ldr.w	r2, [sp, #1187]
 800c06a: 63 92                        	str	r2, [sp, #396]
 800c06c: 9d f8 a2 24                  	ldrb.w	r2, [sp, #1186]
 800c070: 45 92                        	str	r2, [sp, #276]
 800c072: 9d f8 a1 24                  	ldrb.w	r2, [sp, #1185]
 800c076: 44 92                        	str	r2, [sp, #272]
 800c078: bd f8 9f 24                  	ldrh.w	r2, [sp, #1183]
 800c07c: 7e 92                        	str	r2, [sp, #504]
 800c07e: dd f8 9b 24                  	ldr.w	r2, [sp, #1179]
 800c082: 64 92                        	str	r2, [sp, #400]
 800c084: 9d f8 9a 24                  	ldrb.w	r2, [sp, #1178]
 800c088: 47 92                        	str	r2, [sp, #284]
 800c08a: 9d f8 99 24                  	ldrb.w	r2, [sp, #1177]
 800c08e: 46 92                        	str	r2, [sp, #280]
 800c090: bd f8 97 24                  	ldrh.w	r2, [sp, #1175]
 800c094: 7f 92                        	str	r2, [sp, #508]
 800c096: dd f8 93 24                  	ldr.w	r2, [sp, #1171]
 800c09a: 65 92                        	str	r2, [sp, #404]
 800c09c: 9d f8 92 24                  	ldrb.w	r2, [sp, #1170]
 800c0a0: 4a 92                        	str	r2, [sp, #296]
 800c0a2: 9d f8 91 24                  	ldrb.w	r2, [sp, #1169]
 800c0a6: 49 92                        	str	r2, [sp, #292]
 800c0a8: bd f8 8f 24                  	ldrh.w	r2, [sp, #1167]
 800c0ac: 80 92                        	str	r2, [sp, #512]
 800c0ae: dd f8 8b 24                  	ldr.w	r2, [sp, #1163]
 800c0b2: 66 92                        	str	r2, [sp, #408]
 800c0b4: 9d f8 8a 24                  	ldrb.w	r2, [sp, #1162]
 800c0b8: 4c 92                        	str	r2, [sp, #304]
 800c0ba: 9d f8 89 24                  	ldrb.w	r2, [sp, #1161]
 800c0be: 4b 92                        	str	r2, [sp, #300]
 800c0c0: bd f8 87 24                  	ldrh.w	r2, [sp, #1159]
 800c0c4: 81 92                        	str	r2, [sp, #516]
 800c0c6: 9d f8 81 24                  	ldrb.w	r2, [sp, #1153]
 800c0ca: 4d 92                        	str	r2, [sp, #308]
 800c0cc: 9d f8 82 24                  	ldrb.w	r2, [sp, #1154]
 800c0d0: 9d f8 f7 14                  	ldrb.w	r1, [sp, #1271]
 800c0d4: 4e 92                        	str	r2, [sp, #312]
 800c0d6: dd f8 83 24                  	ldr.w	r2, [sp, #1155]
 800c0da: dd f8 07 65                  	ldr.w	r6, [sp, #1287]
 800c0de: 2a 93                        	str	r3, [sp, #168]
 800c0e0: dd f8 fb 34                  	ldr.w	r3, [sp, #1275]
 800c0e4: a5 91                        	str	r1, [sp, #660]
;     match status {
 800c0e6: 29 0c                        	lsrs	r1, r5, #16
;             Ok(GapBondedDevices {
 800c0e8: 67 92                        	str	r2, [sp, #412]
 800c0ea: bd f8 7f 24                  	ldrh.w	r2, [sp, #1151]
 800c0ee: 25 96                        	str	r6, [sp, #148]
 800c0f0: 87 93                        	str	r3, [sp, #540]
 800c0f2: bd f8 f9 a4                  	ldrh.w	r10, [sp, #1273]
;     match status {
 800c0f6: 82 92                        	str	r2, [sp, #520]
 800c0f8: 2b 95                        	str	r5, [sp, #172]
 800c0fa: a6 91                        	str	r1, [sp, #664]
 800c0fc: fe f7 45 bf                  	b.w	#-4470 <$t.24+0x6e08>
 800c100: 04 21                        	movs	r1, #4
 800c102: 08 e0                        	b	#16 <$t.36+0x2e8>
 800c104: 02 21                        	movs	r1, #2
 800c106: 06 e0                        	b	#12 <$t.36+0x2e8>
 800c108: 03 21                        	movs	r1, #3
 800c10a: 04 e0                        	b	#8 <$t.36+0x2e8>
 800c10c: 07 21                        	movs	r1, #7
 800c10e: 02 e0                        	b	#4 <$t.36+0x2e8>
 800c110: 05 21                        	movs	r1, #5
 800c112: 00 e0                        	b	#0 <$t.36+0x2e8>
 800c114: 06 21                        	movs	r1, #6
 800c116: a1 91                        	str	r1, [sp, #644]
;         status.clients[client].state = bytes[1 + client]
 800c118: 9d f8 b4 e2                  	ldrb.w	lr, [sp, #692]
;             0 => Ok(LinkState::Idle),
 800c11c: be f1 07 0f                  	cmp.w	lr, #7
 800c120: 4f d8                        	bhi	#158 <$t.42+0x8>
 800c122: bd f8 bf 12                  	ldrh.w	r1, [sp, #703]
 800c126: 4f f0 00 0a                  	mov.w	r10, #0
 800c12a: a2 91                        	str	r1, [sp, #648]
 800c12c: df e8 0e f0                  	tbb	[pc, lr]

0800c130 $d.37:
 800c130:	18 04 0a 0d	.word	0x0d0a0418
 800c134:	07 13 16 10	.word	0x10161307

0800c138 $t.38:
 800c138: 4f f0 01 0a                  	mov.w	r10, #1
 800c13c: 10 e0                        	b	#32 <$t.38+0x2c>
 800c13e: 4f f0 04 0a                  	mov.w	r10, #4
 800c142: 0d e0                        	b	#26 <$t.38+0x2c>
 800c144: 4f f0 02 0a                  	mov.w	r10, #2
 800c148: 0a e0                        	b	#20 <$t.38+0x2c>
 800c14a: 4f f0 03 0a                  	mov.w	r10, #3
 800c14e: 07 e0                        	b	#14 <$t.38+0x2c>
 800c150: 4f f0 07 0a                  	mov.w	r10, #7
 800c154: 04 e0                        	b	#8 <$t.38+0x2c>
 800c156: 4f f0 05 0a                  	mov.w	r10, #5
 800c15a: 01 e0                        	b	#2 <$t.38+0x2c>
 800c15c: 4f f0 06 0a                  	mov.w	r10, #6
;         status.clients[client].state = bytes[1 + client]
 800c160: 9d f8 b5 e2                  	ldrb.w	lr, [sp, #693]
;             0 => Ok(LinkState::Idle),
 800c164: be f1 07 0f                  	cmp.w	lr, #7
 800c168: 2b d8                        	bhi	#86 <$t.42+0x8>
 800c16a: bd f8 c1 12                  	ldrh.w	r1, [sp, #705]
 800c16e: 00 22                        	movs	r2, #0
 800c170: 9c 91                        	str	r1, [sp, #624]
 800c172: df e8 0e f0                  	tbb	[pc, lr]

0800c176 $d.39:
 800c176:	11 04 08 0a	.word	0x0a080411
 800c17a:	06 0e 10 0c	.word	0x0c100e06

0800c17e $t.40:
 800c17e: 01 22                        	movs	r2, #1
 800c180: 0a e0                        	b	#20 <$t.40+0x1e>
 800c182: 04 22                        	movs	r2, #4
 800c184: 08 e0                        	b	#16 <$t.40+0x1e>
 800c186: 02 22                        	movs	r2, #2
 800c188: 06 e0                        	b	#12 <$t.40+0x1e>
 800c18a: 03 22                        	movs	r2, #3
 800c18c: 04 e0                        	b	#8 <$t.40+0x1e>
 800c18e: 07 22                        	movs	r2, #7
 800c190: 02 e0                        	b	#4 <$t.40+0x1e>
 800c192: 05 22                        	movs	r2, #5
 800c194: 00 e0                        	b	#0 <$t.40+0x1e>
 800c196: 06 22                        	movs	r2, #6
;         status.clients[client].state = bytes[1 + client]
 800c198: 9d f8 b6 e2                  	ldrb.w	lr, [sp, #694]
;             0 => Ok(LinkState::Idle),
 800c19c: be f1 07 0f                  	cmp.w	lr, #7
 800c1a0: 0f d8                        	bhi	#30 <$t.42+0x8>
 800c1a2: bd f8 c3 32                  	ldrh.w	r3, [sp, #707]
 800c1a6: 30 04                        	lsls	r0, r6, #16
 800c1a8: 00 26                        	movs	r6, #0
 800c1aa: df e8 1e f0                  	tbh	[pc, lr, lsl #1]

0800c1ae $d.41:
 800c1ae:	29 01 08 00	.word	0x00080129
 800c1b2:	20 01 22 01	.word	0x01220120
 800c1b6:	1e 01 26 01	.word	0x0126011e
 800c1ba:	28 01 24 01	.word	0x01240128

0800c1be $t.42:
 800c1be: 01 26                        	movs	r6, #1
 800c1c0: 1e e1                        	b	#572 <$t.42+0x246>
 800c1c2: 00 24                        	movs	r4, #0
 800c1c4: 12 21                        	movs	r1, #18
 800c1c6: 94 94                        	str	r4, [sp, #592]
 800c1c8: 1b 22                        	movs	r2, #27
 800c1ca: 00 24                        	movs	r4, #0
 800c1cc: 8b 94                        	str	r4, [sp, #556]
 800c1ce: 00 24                        	movs	r4, #0
 800c1d0: 8c 94                        	str	r4, [sp, #560]
 800c1d2: 00 24                        	movs	r4, #0
 800c1d4: 8d 94                        	str	r4, [sp, #564]
 800c1d6: 00 24                        	movs	r4, #0
;         Err(v)
 800c1d8: fd 90                        	str	r0, [sp, #1012]
;         self
 800c1da: 5f fa 8e f0                  	uxtb.w	r0, lr
 800c1de: 00 02                        	lsls	r0, r0, #8
;         Err(v)
 800c1e0: 8d f8 f0 13                  	strb.w	r1, [sp, #1008]
;         self
 800c1e4: 40 ea 04 40                  	orr.w	r0, r0, r4, lsl #16
 800c1e8: d1 b2                        	uxtb	r1, r2
 800c1ea: 08 44                        	add	r0, r1
;         Err(v)
 800c1ec: fe 90                        	str	r0, [sp, #1016]
 800c1ee: ff 95                        	str	r5, [sp, #1020]
 800c1f0: c8 ea 03 40                  	pkhbt	r0, r8, r3, lsl #16
 800c1f4: ad f8 f2 93                  	strh.w	r9, [sp, #1010]
 800c1f8: 8d f8 f1 c3                  	strb.w	r12, [sp, #1009]
 800c1fc: 9a 90                        	str	r0, [sp, #616]
 800c1fe: 18 0e                        	lsrs	r0, r3, #24
 800c200: 96 90                        	str	r0, [sp, #600]
 800c202: 18 0c                        	lsrs	r0, r3, #16
 800c204: 91 99                        	ldr	r1, [sp, #580]
 800c206: a7 9a                        	ldr	r2, [sp, #668]
 800c208: 28 90                        	str	r0, [sp, #160]
 800c20a: 08 0e                        	lsrs	r0, r1, #24
 800c20c: 0d 90                        	str	r0, [sp, #52]
 800c20e: 90 b2                        	uxth	r0, r2
 800c210: 00 0a                        	lsrs	r0, r0, #8
 800c212: a1 90                        	str	r0, [sp, #644]
 800c214: 01 20                        	movs	r0, #1
 800c216: 21 90                        	str	r0, [sp, #132]
 800c218: 00 20                        	movs	r0, #0
 800c21a: a6 90                        	str	r0, [sp, #664]
 800c21c: 08 0c                        	lsrs	r0, r1, #16
 800c21e: 0c 90                        	str	r0, [sp, #48]
 800c220: 08 0a                        	lsrs	r0, r1, #8
 800c222: 18 90                        	str	r0, [sp, #96]
 800c224: a9 98                        	ldr	r0, [sp, #676]
 800c226: 01 0e                        	lsrs	r1, r0, #24
 800c228: 09 91                        	str	r1, [sp, #36]
 800c22a: 01 0c                        	lsrs	r1, r0, #16
 800c22c: 00 0a                        	lsrs	r0, r0, #8
 800c22e: 0a 91                        	str	r1, [sp, #40]
 800c230: 0b 90                        	str	r0, [sp, #44]
 800c232: 04 98                        	ldr	r0, [sp, #16]
 800c234: 01 0e                        	lsrs	r1, r0, #24
 800c236: 06 91                        	str	r1, [sp, #24]
 800c238: 01 0c                        	lsrs	r1, r0, #16
 800c23a: 00 0a                        	lsrs	r0, r0, #8
 800c23c: 07 91                        	str	r1, [sp, #28]
 800c23e: 08 90                        	str	r0, [sp, #32]
 800c240: 10 0e                        	lsrs	r0, r2, #24
 800c242: 9b 90                        	str	r0, [sp, #620]
 800c244: 10 0c                        	lsrs	r0, r2, #16
 800c246: 9f 90                        	str	r0, [sp, #636]
 800c248: 03 98                        	ldr	r0, [sp, #12]
 800c24a: 4f ea 10 6b                  	lsr.w	r11, r0, #24
 800c24e: 01 0c                        	lsrs	r1, r0, #16
 800c250: 00 0a                        	lsrs	r0, r0, #8
 800c252: a2 91                        	str	r1, [sp, #648]
 800c254: a3 90                        	str	r0, [sp, #652]
;         self
 800c256: 9d f8 ff 43                  	ldrb.w	r4, [sp, #1023]
 800c25a: dd f8 f9 23                  	ldr.w	r2, [sp, #1017]
 800c25e: bd f8 fd 13                  	ldrh.w	r1, [sp, #1021]
 800c262: 12 92                        	str	r2, [sp, #72]
 800c264: 9d f8 f8 23                  	ldrb.w	r2, [sp, #1016]
 800c268: 92 92                        	str	r2, [sp, #584]
 800c26a: 41 ea 04 42                  	orr.w	r2, r1, r4, lsl #16
;                 ReturnParameters::Vendor(V::ReturnParameters::new(&bytes)?)
 800c26e: 21 99                        	ldr	r1, [sp, #132]
;         self
 800c270: dd e9 fc 63                  	ldrd	r6, r3, [sp, #1008]
;                 ReturnParameters::Vendor(V::ReturnParameters::new(&bytes)?)
 800c274: 00 29                        	cmp	r1, #0
 800c276: 60 d0                        	beq	#192 <$t.42+0x180>
 800c278: 12 99                        	ldr	r1, [sp, #72]
 800c27a: 1c 46                        	mov	r4, r3
 800c27c: 14 96                        	str	r6, [sp, #80]
 800c27e: cd f8 74 b0                  	str.w	r11, [sp, #116]
;         Err(v)
 800c282: 08 0e                        	lsrs	r0, r1, #24
 800c284: 40 ea 02 22                  	orr.w	r2, r0, r2, lsl #8
 800c288: 92 98                        	ldr	r0, [sp, #584]
 800c28a: 40 ea 01 20                  	orr.w	r0, r0, r1, lsl #8
 800c28e: a6 90                        	str	r0, [sp, #664]
 800c290: 30 0c                        	lsrs	r0, r6, #16
 800c292: 40 ea 03 40                  	orr.w	r0, r0, r3, lsl #16
 800c296: 0e 90                        	str	r0, [sp, #56]
 800c298: b0 b2                        	uxth	r0, r6
 800c29a: 13 46                        	mov	r3, r2
 800c29c: 00 0a                        	lsrs	r0, r0, #8
 800c29e: a4 90                        	str	r0, [sp, #656]
 800c2a0: 9a 98                        	ldr	r0, [sp, #616]
 800c2a2: 17 90                        	str	r0, [sp, #92]
 800c2a4: 01 0e                        	lsrs	r1, r0, #24
 800c2a6: 1a 91                        	str	r1, [sp, #104]
 800c2a8: 01 0c                        	lsrs	r1, r0, #16
 800c2aa: 13 91                        	str	r1, [sp, #76]
 800c2ac: 01 0a                        	lsrs	r1, r0, #8
 800c2ae: 19 91                        	str	r1, [sp, #100]
 800c2b0: a2 98                        	ldr	r0, [sp, #648]
 800c2b2: 94 99                        	ldr	r1, [sp, #592]
 800c2b4: 1c 90                        	str	r0, [sp, #112]
 800c2b6: a3 98                        	ldr	r0, [sp, #652]
 800c2b8: 0f 91                        	str	r1, [sp, #60]
 800c2ba: 1f 99                        	ldr	r1, [sp, #124]
 800c2bc: 12 90                        	str	r0, [sp, #72]
 800c2be: 9b 98                        	ldr	r0, [sp, #620]
 800c2c0: 11 91                        	str	r1, [sp, #68]
 800c2c2: 8d 99                        	ldr	r1, [sp, #564]
 800c2c4: 1b 90                        	str	r0, [sp, #108]
 800c2c6: 9f 98                        	ldr	r0, [sp, #636]
 800c2c8: 94 91                        	str	r1, [sp, #592]
 800c2ca: 8c 99                        	ldr	r1, [sp, #560]
 800c2cc: a5 90                        	str	r0, [sp, #660]
 800c2ce: a1 98                        	ldr	r0, [sp, #644]
 800c2d0: 93 91                        	str	r1, [sp, #588]
 800c2d2: 8b 99                        	ldr	r1, [sp, #556]
 800c2d4: 8f 90                        	str	r0, [sp, #572]
 800c2d6: 18 98                        	ldr	r0, [sp, #96]
 800c2d8: 18 91                        	str	r1, [sp, #96]
 800c2da: 8e 99                        	ldr	r1, [sp, #568]
 800c2dc: 10 90                        	str	r0, [sp, #64]
 800c2de: 91 98                        	ldr	r0, [sp, #580]
 800c2e0: 91 91                        	str	r1, [sp, #580]
 800c2e2: 8a 99                        	ldr	r1, [sp, #552]
 800c2e4: 90 91                        	str	r1, [sp, #576]
 800c2e6: 86 99                        	ldr	r1, [sp, #536]
 800c2e8: 1f 91                        	str	r1, [sp, #124]
 800c2ea: 73 99                        	ldr	r1, [sp, #460]
 800c2ec: 9a 91                        	str	r1, [sp, #616]
 800c2ee: 1e 99                        	ldr	r1, [sp, #120]
 800c2f0: 97 91                        	str	r1, [sp, #604]
 800c2f2: 0d 99                        	ldr	r1, [sp, #52]
 800c2f4: 15 91                        	str	r1, [sp, #84]
 800c2f6: 0c 99                        	ldr	r1, [sp, #48]
 800c2f8: 16 91                        	str	r1, [sp, #88]
 800c2fa: 00 99                        	ldr	r1, [sp]
 800c2fc: a1 91                        	str	r1, [sp, #644]
 800c2fe: 01 99                        	ldr	r1, [sp, #4]
 800c300: 9b 91                        	str	r1, [sp, #620]
 800c302: 96 99                        	ldr	r1, [sp, #600]
 800c304: 98 91                        	str	r1, [sp, #608]
 800c306: 28 99                        	ldr	r1, [sp, #160]
 800c308: 99 91                        	str	r1, [sp, #612]
 800c30a: 05 99                        	ldr	r1, [sp, #20]
 800c30c: 95 91                        	str	r1, [sp, #596]
 800c30e: 02 99                        	ldr	r1, [sp, #8]
 800c310: 23 91                        	str	r1, [sp, #140]
 800c312: 09 99                        	ldr	r1, [sp, #36]
 800c314: 9f 91                        	str	r1, [sp, #636]
 800c316: 0a 99                        	ldr	r1, [sp, #40]
 800c318: 9e 91                        	str	r1, [sp, #632]
 800c31a: 0b 99                        	ldr	r1, [sp, #44]
 800c31c: a0 91                        	str	r1, [sp, #640]
 800c31e: a9 99                        	ldr	r1, [sp, #676]
 800c320: a3 91                        	str	r1, [sp, #652]
 800c322: 06 99                        	ldr	r1, [sp, #24]
 800c324: a2 91                        	str	r1, [sp, #648]
 800c326: 07 99                        	ldr	r1, [sp, #28]
 800c328: 9d 91                        	str	r1, [sp, #628]
 800c32a: 08 99                        	ldr	r1, [sp, #32]
 800c32c: 9c 91                        	str	r1, [sp, #624]
 800c32e: 04 99                        	ldr	r1, [sp, #16]
 800c330: 27 91                        	str	r1, [sp, #156]
 800c332: 03 99                        	ldr	r1, [sp, #12]
;                 ReturnParameters::Vendor(V::ReturnParameters::new(&bytes)?)
 800c334: 92 91                        	str	r1, [sp, #584]
 800c336: f9 f7 44 ba                  	b.w	#-27512 <$t.24+0x1640>
;         self
 800c33a: 9e 99                        	ldr	r1, [sp, #632]
 800c33c: c0 b2                        	uxtb	r0, r0
;                 ReturnParameters::Vendor(V::ReturnParameters::new(&bytes)?)
 800c33e: cd f8 ea 33                  	str.w	r3, [sp, #1002]
;         self
 800c342: a0 9b                        	ldr	r3, [sp, #640]
 800c344: c9 b2                        	uxtb	r1, r1
;                 ReturnParameters::Vendor(V::ReturnParameters::new(&bytes)?)
 800c346: cd f8 e6 63                  	str.w	r6, [sp, #998]
 800c34a: 8f 92                        	str	r2, [sp, #572]
;         self
 800c34c: 41 ea 03 21                  	orr.w	r1, r1, r3, lsl #8
 800c350: 22 91                        	str	r1, [sp, #136]
 800c352: 4f ea 0a 41                  	lsl.w	r1, r10, #16
 800c356: 41 ea 00 20                  	orr.w	r0, r1, r0, lsl #8
 800c35a: a5 99                        	ldr	r1, [sp, #660]
 800c35c: cd f8 a4 90                  	str.w	r9, [sp, #164]
 800c360: c9 b2                        	uxtb	r1, r1
 800c362: 08 44                        	add	r0, r1
;         let params = match crate::opcode::Opcode(LittleEndian::read_u16(&bytes[1..])) {
 800c364: 74 90                        	str	r0, [sp, #464]
 800c366: 22 f0 7f 40                  	bic	r0, r2, #4278190080
 800c36a: 01 0c                        	lsrs	r1, r0, #16
 800c36c: 00 0a                        	lsrs	r0, r0, #8
 800c36e: a5 90                        	str	r0, [sp, #660]
 800c370: 23 20                        	movs	r0, #35
 800c372: 14 90                        	str	r0, [sp, #80]
 800c374: a4 98                        	ldr	r0, [sp, #656]
 800c376: 71 90                        	str	r0, [sp, #452]
 800c378: a6 98                        	ldr	r0, [sp, #664]
 800c37a: 26 90                        	str	r0, [sp, #152]
 800c37c: 03 98                        	ldr	r0, [sp, #12]
 800c37e: 27 90                        	str	r0, [sp, #156]
 800c380: a3 98                        	ldr	r0, [sp, #652]
 800c382: 9c 90                        	str	r0, [sp, #624]
 800c384: a2 98                        	ldr	r0, [sp, #648]
 800c386: 9d 90                        	str	r0, [sp, #628]
 800c388: a7 98                        	ldr	r0, [sp, #668]
 800c38a: a3 90                        	str	r0, [sp, #652]
 800c38c: a1 98                        	ldr	r0, [sp, #644]
 800c38e: a0 90                        	str	r0, [sp, #640]
 800c390: 9f 98                        	ldr	r0, [sp, #636]
 800c392: 9e 90                        	str	r0, [sp, #632]
 800c394: 9b 98                        	ldr	r0, [sp, #620]
 800c396: 9f 90                        	str	r0, [sp, #636]
 800c398: 04 98                        	ldr	r0, [sp, #16]
 800c39a: 23 90                        	str	r0, [sp, #140]
 800c39c: 08 98                        	ldr	r0, [sp, #32]
 800c39e: 95 90                        	str	r0, [sp, #596]
 800c3a0: 07 98                        	ldr	r0, [sp, #28]
 800c3a2: 17 90                        	str	r0, [sp, #92]
 800c3a4: 06 98                        	ldr	r0, [sp, #24]
 800c3a6: 19 90                        	str	r0, [sp, #100]
 800c3a8: a9 98                        	ldr	r0, [sp, #676]
 800c3aa: 13 90                        	str	r0, [sp, #76]
 800c3ac: 0b 98                        	ldr	r0, [sp, #44]
 800c3ae: 1a 90                        	str	r0, [sp, #104]
 800c3b0: 0a 98                        	ldr	r0, [sp, #40]
 800c3b2: 99 90                        	str	r0, [sp, #612]
 800c3b4: 09 98                        	ldr	r0, [sp, #36]
 800c3b6: 98 90                        	str	r0, [sp, #608]
 800c3b8: 02 98                        	ldr	r0, [sp, #8]
 800c3ba: 9b 90                        	str	r0, [sp, #620]
 800c3bc: 05 98                        	ldr	r0, [sp, #20]
 800c3be: a1 90                        	str	r0, [sp, #644]
 800c3c0: 9a 98                        	ldr	r0, [sp, #616]
 800c3c2: 11 90                        	str	r0, [sp, #68]
 800c3c4: 28 98                        	ldr	r0, [sp, #160]
 800c3c6: 16 90                        	str	r0, [sp, #88]
 800c3c8: 96 98                        	ldr	r0, [sp, #600]
 800c3ca: 15 90                        	str	r0, [sp, #84]
 800c3cc: 01 98                        	ldr	r0, [sp, #4]
 800c3ce: 97 90                        	str	r0, [sp, #604]
 800c3d0: 00 98                        	ldr	r0, [sp]
 800c3d2: 9a 90                        	str	r0, [sp, #616]
 800c3d4: 94 98                        	ldr	r0, [sp, #592]
 800c3d6: 90 90                        	str	r0, [sp, #576]
 800c3d8: 0c 98                        	ldr	r0, [sp, #48]
 800c3da: 93 90                        	str	r0, [sp, #588]
 800c3dc: 0d 98                        	ldr	r0, [sp, #52]
 800c3de: 1b 91                        	str	r1, [sp, #108]
 800c3e0: cd f8 88 b2                  	str.w	r11, [sp, #648]
 800c3e4: 94 90                        	str	r0, [sp, #592]
 800c3e6: f9 f7 99 b9                  	b.w	#-27854 <$t.24+0x159a>
 800c3ea: 04 26                        	movs	r6, #4
 800c3ec: 08 e0                        	b	#16 <$t.42+0x246>
 800c3ee: 02 26                        	movs	r6, #2
 800c3f0: 06 e0                        	b	#12 <$t.42+0x246>
 800c3f2: 03 26                        	movs	r6, #3
 800c3f4: 04 e0                        	b	#8 <$t.42+0x246>
 800c3f6: 07 26                        	movs	r6, #7
 800c3f8: 02 e0                        	b	#4 <$t.42+0x246>
 800c3fa: 05 26                        	movs	r6, #5
 800c3fc: 00 e0                        	b	#0 <$t.42+0x246>
 800c3fe: 06 26                        	movs	r6, #6
;     Ok(status)
 800c400: 9d 9c                        	ldr	r4, [sp, #628]
;         status.clients[client].state = bytes[1 + client]
 800c402: 06 43                        	orrs	r6, r0
;     Ok(status)
 800c404: a4 99                        	ldr	r1, [sp, #656]
 800c406: bd f8 c5 52                  	ldrh.w	r5, [sp, #709]
;         match hci::Opcode(LittleEndian::read_u16(&bytes[1..])) {
 800c40a: 30 0c                        	lsrs	r0, r6, #16
;     Ok(status)
 800c40c: 41 ea 04 44                  	orr.w	r4, r1, r4, lsl #16
;             crate::opcode::HAL_GET_LINK_STATUS => Ok(ReturnParameters::HalGetLinkStatus(
 800c410: 9e 99                        	ldr	r1, [sp, #632]
 800c412: ad f8 fa 13                  	strh.w	r1, [sp, #1018]
 800c416: a5 99                        	ldr	r1, [sp, #660]
;     Ok(status)
 800c418: 42 ea 05 42                  	orr.w	r2, r2, r5, lsl #16
;             crate::opcode::HAL_GET_LINK_STATUS => Ok(ReturnParameters::HalGetLinkStatus(
 800c41c: 8d f8 f8 13                  	strb.w	r1, [sp, #1016]
 800c420: 9f 99                        	ldr	r1, [sp, #636]
 800c422: ad f8 f6 13                  	strh.w	r1, [sp, #1014]
 800c426: a6 99                        	ldr	r1, [sp, #664]
 800c428: ff 94                        	str	r4, [sp, #1020]
 800c42a: 08 24                        	movs	r4, #8
 800c42c: 8d f8 f4 13                  	strb.w	r1, [sp, #1012]
 800c430: a0 99                        	ldr	r1, [sp, #640]
 800c432: ad f8 f2 13                  	strh.w	r1, [sp, #1010]
 800c436: 8d f8 f0 43                  	strb.w	r4, [sp, #1008]
 800c43a: dd e9 a2 14                  	ldrd	r1, r4, [sp, #648]
;     Ok(status)
 800c43e: 9c 9d                        	ldr	r5, [sp, #624]
 800c440: 9a 90                        	str	r0, [sp, #616]
 800c442: a1 98                        	ldr	r0, [sp, #644]
 800c444: 44 ea 01 44                  	orr.w	r4, r4, r1, lsl #16
;         status.clients[client].state = bytes[1 + client]
 800c448: 03 94                        	str	r4, [sp, #12]
;             crate::opcode::HAL_GET_LINK_STATUS => Ok(ReturnParameters::HalGetLinkStatus(
 800c44a: 4f ea 11 2b                  	lsr.w	r11, r1, #8
;     Ok(status)
 800c44e: 40 ea 05 44                  	orr.w	r4, r0, r5, lsl #16
 800c452: 4a ea 03 40                  	orr.w	r0, r10, r3, lsl #16
;         match hci::Opcode(LittleEndian::read_u16(&bytes[1..])) {
 800c456: 31 0a                        	lsrs	r1, r6, #8
 800c458: 04 90                        	str	r0, [sp, #16]
;             crate::opcode::HAL_GET_LINK_STATUS => Ok(ReturnParameters::HalGetLinkStatus(
 800c45a: 05 91                        	str	r1, [sp, #20]
 800c45c: 01 0e                        	lsrs	r1, r0, #24
 800c45e: 06 91                        	str	r1, [sp, #24]
 800c460: 01 0c                        	lsrs	r1, r0, #16
 800c462: 00 0a                        	lsrs	r0, r0, #8
 800c464: 00 23                        	movs	r3, #0
 800c466: 08 90                        	str	r0, [sp, #32]
 800c468: 20 0e                        	lsrs	r0, r4, #24
 800c46a: 9b 90                        	str	r0, [sp, #620]
 800c46c: 20 0c                        	lsrs	r0, r4, #16
 800c46e: 9f 90                        	str	r0, [sp, #636]
 800c470: 10 0e                        	lsrs	r0, r2, #24
 800c472: 09 90                        	str	r0, [sp, #36]
 800c474: 10 0c                        	lsrs	r0, r2, #16
 800c476: 0a 90                        	str	r0, [sp, #40]
 800c478: 10 0a                        	lsrs	r0, r2, #8
 800c47a: 0b 90                        	str	r0, [sp, #44]
 800c47c: a6 93                        	str	r3, [sp, #664]
 800c47e: 02 96                        	str	r6, [sp, #8]
 800c480: 07 91                        	str	r1, [sp, #28]
 800c482: a7 94                        	str	r4, [sp, #668]
 800c484: a9 92                        	str	r2, [sp, #676]
 800c486: 00 20                        	movs	r0, #0
 800c488: a3 90                        	str	r0, [sp, #652]
 800c48a: 00 20                        	movs	r0, #0
 800c48c: a1 90                        	str	r0, [sp, #644]
 800c48e: fe f7 0c bc                  	b.w	#-6120 <$t.24+0x6b28>
 800c492: 4f f2 b0 30                  	movw	r0, #62384
 800c496: 39 21                        	movs	r1, #57
 800c498: c0 f6 01 00                  	movt	r0, #2049
 800c49c: 09 f0 dc ff                  	bl	#40888
 800c4a0: fe de                        	trap
 800c4a2: 4f f0 00 0c                  	mov.w	r12, #0
 800c4a6: 1f 21                        	movs	r1, #31
 800c4a8: 12 20                        	movs	r0, #18
 800c4aa: ff f7 85 ba                  	b.w	#-2806 <$t.28+0x5be>
;         let data_len = self.event_data[data_len_index] as usize;
 800c4ae: 10 46                        	mov	r0, r2
 800c4b0: 21 46                        	mov	r1, r4
 800c4b2: 09 f0 b0 fc                  	bl	#39264
 800c4b6: fe de                        	trap
 800c4b8: 09 f0 3a fb                  	bl	#38516
 800c4bc: fe de                        	trap
;             slice_index_len_fail(self.end, slice.len());
 800c4be: 30 46                        	mov	r0, r6
 800c4c0: fe 21                        	movs	r1, #254
 800c4c2: 09 f0 a8 fc                  	bl	#39248
 800c4c6: fe de                        	trap
;             slice_index_order_fail(self.start, self.end);
 800c4c8: 18 46                        	mov	r0, r3
 800c4ca: 11 46                        	mov	r1, r2
 800c4cc: 09 f0 a3 fc                  	bl	#39238
 800c4d0: fe de                        	trap
;             address: crate::to_bd_addr_type(self.event_data[addr_type_index], bd_addr)
 800c4d2: 10 46                        	mov	r0, r2
 800c4d4: 09 f0 9f fc                  	bl	#39230
 800c4d8: fe de                        	trap
 800c4da: 50 46                        	mov	r0, r10
 800c4dc: 21 46                        	mov	r1, r4
 800c4de: 09 f0 9a fc                  	bl	#39220
 800c4e2: fe de                        	trap
 800c4e4: 00 20                        	movs	r0, #0
 800c4e6: 00 21                        	movs	r1, #0
 800c4e8: 09 f0 95 fc                  	bl	#39210
 800c4ec: fe de                        	trap
;             slice_index_order_fail(self.start, self.end);
 800c4ee: 02 20                        	movs	r0, #2
 800c4f0: 21 46                        	mov	r1, r4
 800c4f2: 09 f0 90 fc                  	bl	#39200
 800c4f6: fe de                        	trap
;             slice_index_len_fail(self.end, slice.len());
 800c4f8: 20 46                        	mov	r0, r4
 800c4fa: fd 21                        	movs	r1, #253
 800c4fc: 09 f0 8b fc                  	bl	#39190
 800c500: fe de                        	trap
;             slice_index_order_fail(self.start, self.end);
 800c502: 08 46                        	mov	r0, r1
 800c504: 51 46                        	mov	r1, r10
 800c506: 09 f0 86 fc                  	bl	#39180
 800c50a: fe de                        	trap
;                 ReturnParameters::LeReadWhiteListSize(to_status(&bytes[3..])?, bytes[4] as usize)
 800c50c: 04 20                        	movs	r0, #4
 800c50e: a9 99                        	ldr	r1, [sp, #676]
 800c510: 09 f0 81 fc                  	bl	#39170
 800c514: fe de                        	trap
;             slice_index_order_fail(self.start, self.end);
 800c516: 08 46                        	mov	r0, r1
 800c518: 21 46                        	mov	r1, r4
 800c51a: 09 f0 7c fc                  	bl	#39160
 800c51e: fe de                        	trap
;             slice_index_len_fail(self.end, slice.len());
 800c520: 20 46                        	mov	r0, r4
 800c522: f8 21                        	movs	r1, #248
 800c524: 09 f0 77 fc                  	bl	#39150
 800c528: fe de                        	trap
 800c52a: 30 46                        	mov	r0, r6
 800c52c: f8 21                        	movs	r1, #248
 800c52e: 09 f0 72 fc                  	bl	#39140
 800c532: fe de                        	trap
 800c534: a6 98                        	ldr	r0, [sp, #664]
 800c536: f6 21                        	movs	r1, #246
 800c538: 09 f0 6d fc                  	bl	#39130
 800c53c: fe de                        	trap
;             slice_index_len_fail(self.end, slice.len());
 800c53e: 49 46                        	mov	r1, r9
 800c540: 09 f0 69 fc                  	bl	#39122
 800c544: fe de                        	trap
;             slice_index_len_fail(self.end, slice.len());
 800c546: 28 46                        	mov	r0, r5
 800c548: 1f 21                        	movs	r1, #31
 800c54a: 09 f0 64 fc                  	bl	#39112
 800c54e: fe de                        	trap
 800c550: 58 46                        	mov	r0, r11
 800c552: f9 21                        	movs	r1, #249
 800c554: 09 f0 5f fc                  	bl	#39102
 800c558: fe de                        	trap
 800c55a: 25 98                        	ldr	r0, [sp, #148]
 800c55c: f8 21                        	movs	r1, #248
 800c55e: 09 f0 5a fc                  	bl	#39092
 800c562: fe de                        	trap
 800c564: 30 46                        	mov	r0, r6
 800c566: f9 21                        	movs	r1, #249
 800c568: 09 f0 55 fc                  	bl	#39082
 800c56c: fe de                        	trap

0800c56e _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h00cf8ebd8c145a82:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800c56e: 08 46                        	mov	r0, r1
;         f.pad("()")
 800c570: 4f f2 6a 61                  	movw	r1, #63082
 800c574: c0 f6 01 01                  	movt	r1, #2049
 800c578: 02 22                        	movs	r2, #2
 800c57a: 09 f0 51 bc                  	b.w	#39074 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0x4>

0800c57e _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h09d08e48f107cdd8:
 800c57e: 0a 68                        	ldr	r2, [r1]
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800c580: 00 68                        	ldr	r0, [r0]
;                 if f.debug_lower_hex() {
 800c582: d3 06                        	lsls	r3, r2, #27
;                     fmt::LowerHex::fmt(self, f)
 800c584: 44 bf                        	itt	mi
 800c586: 00 68                        	ldrmi	r0, [r0]
 800c588: 0a f0 5c bd                  	bmi.w	#43704 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb4a458a38e11c9e2E+0x4>
;                 } else if f.debug_upper_hex() {
 800c58c: 92 06                        	lsls	r2, r2, #26
;                     fmt::Display::fmt(self, f)
 800c58e: 58 bf                        	it	pl
 800c590: 09 f0 4e ba                  	bpl.w	#38044 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hae72f8ec025f0cfcE+0x4>
;                     fmt::UpperHex::fmt(self, f)
 800c594: 00 68                        	ldr	r0, [r0]
 800c596: 0a f0 b9 bd                  	b.w	#43890 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h4b769b3137071b17E+0x4>

0800c59a _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h102113343c4bc97e:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800c59a: f0 b5                        	push	{r4, r5, r6, r7, lr}
 800c59c: 03 af                        	add	r7, sp, #12
 800c59e: 4d f8 04 bd                  	str	r11, [sp, #-4]!
 800c5a2: a2 b0                        	sub	sp, #136
 800c5a4: 00 68                        	ldr	r0, [r0]
 800c5a6: 0c 46                        	mov	r4, r1
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800c5a8: 05 78                        	ldrb	r5, [r0]
 800c5aa: e8 07                        	lsls	r0, r5, #31
 800c5ac: 31 d1                        	bne	#98 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h102113343c4bc97eE+0x7c>
 800c5ae: 01 20                        	movs	r0, #1
 800c5b0: a9 07                        	lsls	r1, r5, #30
 800c5b2: 3c d4                        	bmi	#120 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h102113343c4bc97eE+0x98>
 800c5b4: 69 07                        	lsls	r1, r5, #29
 800c5b6: 52 d4                        	bmi	#164 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h102113343c4bc97eE+0xc8>
;                 let extra_bits = self.bits & !$BitFlags::all().bits();
 800c5b8: 15 f0 f8 06                  	ands	r6, r5, #248
;                 if extra_bits != 0 {
 800c5bc: 68 d0                        	beq	#208 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h102113343c4bc97eE+0xfa>
;                     if !first {
 800c5be: 50 b9                        	cbnz	r0, #20
 800c5c0: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800c5c4: 03 22                        	movs	r2, #3
 800c5c6: cb 68                        	ldr	r3, [r1, #12]
 800c5c8: 4d f6 97 71                  	movw	r1, #57239
 800c5cc: c0 f6 01 01                  	movt	r1, #2049
 800c5d0: 98 47                        	blx	r3
;                         f.write_str(" | ")?;
 800c5d2: 00 28                        	cmp	r0, #0
 800c5d4: 67 d1                        	bne	#206 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h102113343c4bc97eE+0x110>
 800c5d6: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800c5da: 02 22                        	movs	r2, #2
 800c5dc: cb 68                        	ldr	r3, [r1, #12]
 800c5de: 4e f6 b5 31                  	movw	r1, #60341
 800c5e2: c0 f6 01 01                  	movt	r1, #2049
 800c5e6: 98 47                        	blx	r3
;                     f.write_str("0x")?;
 800c5e8: 00 28                        	cmp	r0, #0
 800c5ea: 5c d1                        	bne	#184 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h102113343c4bc97eE+0x110>
 800c5ec: 05 f0 08 00                  	and	r0, r5, #8
 800c5f0: 00 21                        	movs	r1, #0
 800c5f2: 30 30                        	adds	r0, #48
 800c5f4: b1 eb 15 1f                  	cmp.w	r1, r5, lsr #4
 800c5f8: 61 d0                        	beq	#194 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h102113343c4bc97eE+0x128>
 800c5fa: 29 09                        	lsrs	r1, r5, #4
 800c5fc: 01 f1 57 02                  	add.w	r2, r1, #87
 800c600: a0 2e                        	cmp	r6, #160
 800c602: 38 bf                        	it	lo
 800c604: 01 f1 30 02                  	addlo.w	r2, r1, #48
 800c608: 8d f8 86 20                  	strb.w	r2, [sp, #134]
 800c60c: 7e 21                        	movs	r1, #126
 800c60e: 02 22                        	movs	r2, #2
 800c610: 57 e0                        	b	#174 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h102113343c4bc97eE+0x12c>
 800c612: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800c616: 05 22                        	movs	r2, #5
 800c618: cb 68                        	ldr	r3, [r1, #12]
 800c61a: 4e f6 ca 11                  	movw	r1, #59850
 800c61e: c0 f6 01 01                  	movt	r1, #2049
 800c622: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800c624: 00 28                        	cmp	r0, #0
 800c626: 3e d1                        	bne	#124 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h102113343c4bc97eE+0x110>
 800c628: 00 20                        	movs	r0, #0
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800c62a: a9 07                        	lsls	r1, r5, #30
 800c62c: c2 d5                        	bpl	#-124 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h102113343c4bc97eE+0x1e>
;                         if !first {
 800c62e: 48 b9                        	cbnz	r0, #18
 800c630: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800c634: 03 22                        	movs	r2, #3
 800c636: cb 68                        	ldr	r3, [r1, #12]
 800c638: 4d f6 97 71                  	movw	r1, #57239
 800c63c: c0 f6 01 01                  	movt	r1, #2049
 800c640: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800c642: 80 bb                        	cbnz	r0, #96
 800c644: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800c648: 05 22                        	movs	r2, #5
 800c64a: cb 68                        	ldr	r3, [r1, #12]
 800c64c: 4e f6 cf 11                  	movw	r1, #59855
 800c650: c0 f6 01 01                  	movt	r1, #2049
 800c654: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800c656: 30 bb                        	cbnz	r0, #76
 800c658: 00 20                        	movs	r0, #0
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800c65a: 69 07                        	lsls	r1, r5, #29
 800c65c: ac d5                        	bpl	#-168 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h102113343c4bc97eE+0x22>
;                         if !first {
 800c65e: 48 b9                        	cbnz	r0, #18
 800c660: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800c664: 03 22                        	movs	r2, #3
 800c666: cb 68                        	ldr	r3, [r1, #12]
 800c668: 4d f6 97 71                  	movw	r1, #57239
 800c66c: c0 f6 01 01                  	movt	r1, #2049
 800c670: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800c672: c0 b9                        	cbnz	r0, #48
 800c674: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800c678: 05 22                        	movs	r2, #5
 800c67a: cb 68                        	ldr	r3, [r1, #12]
 800c67c: 4e f6 d4 11                  	movw	r1, #59860
 800c680: c0 f6 01 01                  	movt	r1, #2049
 800c684: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800c686: 70 b9                        	cbnz	r0, #28
 800c688: 00 20                        	movs	r0, #0
;                 let extra_bits = self.bits & !$BitFlags::all().bits();
 800c68a: 15 f0 f8 06                  	ands	r6, r5, #248
;                 if extra_bits != 0 {
 800c68e: 96 d1                        	bne	#-212 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h102113343c4bc97eE+0x28>
;                 if first {
 800c690: 78 b1                        	cbz	r0, #30
 800c692: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800c696: 07 22                        	movs	r2, #7
 800c698: cb 68                        	ldr	r3, [r1, #12]
 800c69a: 4e f2 66 41                  	movw	r1, #58470
 800c69e: c0 f6 01 01                  	movt	r1, #2049
 800c6a2: 98 47                        	blx	r3
;                     f.write_str("(empty)")?;
 800c6a4: 28 b1                        	cbz	r0, #10
 800c6a6: 01 25                        	movs	r5, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800c6a8: 28 46                        	mov	r0, r5
 800c6aa: 22 b0                        	add	sp, #136
 800c6ac: 5d f8 04 bb                  	ldr	r11, [sp], #4
 800c6b0: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 800c6b2: 00 25                        	movs	r5, #0
 800c6b4: 28 46                        	mov	r0, r5
 800c6b6: 22 b0                        	add	sp, #136
 800c6b8: 5d f8 04 bb                  	ldr	r11, [sp], #4
 800c6bc: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 800c6be: 7f 21                        	movs	r1, #127
 800c6c0: 01 22                        	movs	r2, #1
 800c6c2: 8d f8 87 00                  	strb.w	r0, [sp, #135]
 800c6c6: 02 a8                        	add	r0, sp, #8
 800c6c8: 08 44                        	add	r0, r1
 800c6ca: cd e9 00 02                  	strd	r0, r2, [sp]
 800c6ce: 4e f6 b5 32                  	movw	r2, #60341
 800c6d2: 20 46                        	mov	r0, r4
 800c6d4: c0 f6 01 02                  	movt	r2, #2049
 800c6d8: 01 21                        	movs	r1, #1
 800c6da: 02 23                        	movs	r3, #2
 800c6dc: 01 25                        	movs	r5, #1
 800c6de: 09 f0 2d fa                  	bl	#37978
;                     $crate::_core::fmt::LowerHex::fmt(&extra_bits, f)?;
 800c6e2: 00 28                        	cmp	r0, #0
 800c6e4: 08 bf                        	it	eq
 800c6e6: 00 25                        	moveq	r5, #0
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800c6e8: 28 46                        	mov	r0, r5
 800c6ea: 22 b0                        	add	sp, #136
 800c6ec: 5d f8 04 bb                  	ldr	r11, [sp], #4
 800c6f0: f0 bd                        	pop	{r4, r5, r6, r7, pc}

0800c6f2 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h11bf0485e8bc9fd4:
 800c6f2: 80 b5                        	push	{r7, lr}
 800c6f4: 6f 46                        	mov	r7, sp
 800c6f6: a2 b0                        	sub	sp, #136
 800c6f8: 0a 68                        	ldr	r2, [r1]
 800c6fa: 00 68                        	ldr	r0, [r0]
;                 if f.debug_lower_hex() {
 800c6fc: d3 06                        	lsls	r3, r2, #27
 800c6fe: 07 d4                        	bmi	#14 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h11bf0485e8bc9fd4E+0x22>
 800c700: 00 78                        	ldrb	r0, [r0]
;                 } else if f.debug_upper_hex() {
 800c702: 92 06                        	lsls	r2, r2, #26
 800c704: 1e d4                        	bmi	#60 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h11bf0485e8bc9fd4E+0x56>
;                     fmt::Display::fmt(self, f)
 800c706: 22 b0                        	add	sp, #136
 800c708: bd e8 80 40                  	pop.w	{r7, lr}
 800c70c: 0a f0 62 bd                  	b.w	#43716 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$i8$GT$3fmt17h77effd64fc661fa4E+0x4>
 800c710: 02 78                        	ldrb	r2, [r0]
 800c712: 02 f0 0f 03                  	and	r3, r2, #15
 800c716: 03 f1 57 00                  	add.w	r0, r3, #87
 800c71a: 0a 2b                        	cmp	r3, #10
 800c71c: 38 bf                        	it	lo
 800c71e: 03 f1 30 00                  	addlo.w	r0, r3, #48
 800c722: 00 23                        	movs	r3, #0
 800c724: b3 eb 12 1f                  	cmp.w	r3, r2, lsr #4
 800c728: 25 d0                        	beq	#74 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h11bf0485e8bc9fd4E+0x88>
 800c72a: 4f ea 12 1c                  	lsr.w	r12, r2, #4
 800c72e: 0c f1 57 03                  	add.w	r3, r12, #87
 800c732: a0 2a                        	cmp	r2, #160
 800c734: 38 bf                        	it	lo
 800c736: 0c f1 30 03                  	addlo.w	r3, r12, #48
 800c73a: 8d f8 86 30                  	strb.w	r3, [sp, #134]
 800c73e: 7e 22                        	movs	r2, #126
 800c740: 02 23                        	movs	r3, #2
 800c742: 1a e0                        	b	#52 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h11bf0485e8bc9fd4E+0x8c>
 800c744: 00 f0 0f 03                  	and	r3, r0, #15
 800c748: 03 f1 37 02                  	add.w	r2, r3, #55
 800c74c: 0a 2b                        	cmp	r3, #10
 800c74e: 38 bf                        	it	lo
 800c750: 03 f1 30 02                  	addlo.w	r2, r3, #48
 800c754: 00 23                        	movs	r3, #0
 800c756: b3 eb 10 1f                  	cmp.w	r3, r0, lsr #4
 800c75a: 13 d0                        	beq	#38 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h11bf0485e8bc9fd4E+0x96>
 800c75c: 4f ea 10 1c                  	lsr.w	r12, r0, #4
 800c760: 0c f1 37 03                  	add.w	r3, r12, #55
 800c764: a0 28                        	cmp	r0, #160
 800c766: 38 bf                        	it	lo
 800c768: 0c f1 30 03                  	addlo.w	r3, r12, #48
 800c76c: 8d f8 86 30                  	strb.w	r3, [sp, #134]
 800c770: 7e 20                        	movs	r0, #126
 800c772: 02 23                        	movs	r3, #2
 800c774: 08 e0                        	b	#16 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h11bf0485e8bc9fd4E+0x9a>
 800c776: 7f 22                        	movs	r2, #127
 800c778: 01 23                        	movs	r3, #1
 800c77a: 8d f8 87 00                  	strb.w	r0, [sp, #135]
 800c77e: 02 a8                        	add	r0, sp, #8
 800c780: 10 44                        	add	r0, r2
 800c782: 05 e0                        	b	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h11bf0485e8bc9fd4E+0xa2>
 800c784: 7f 20                        	movs	r0, #127
 800c786: 01 23                        	movs	r3, #1
 800c788: 8d f8 87 20                  	strb.w	r2, [sp, #135]
 800c78c: 02 aa                        	add	r2, sp, #8
 800c78e: 10 44                        	add	r0, r2
 800c790: 4e f6 b5 32                  	movw	r2, #60341
 800c794: cd e9 00 03                  	strd	r0, r3, [sp]
 800c798: 08 46                        	mov	r0, r1
 800c79a: c0 f6 01 02                  	movt	r2, #2049
 800c79e: 01 21                        	movs	r1, #1
 800c7a0: 02 23                        	movs	r3, #2
 800c7a2: 09 f0 cb f9                  	bl	#37782
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800c7a6: 22 b0                        	add	sp, #136
 800c7a8: 80 bd                        	pop	{r7, pc}

0800c7aa _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h1b0726dee9d09f74:
 800c7aa: f0 b5                        	push	{r4, r5, r6, r7, lr}
 800c7ac: 03 af                        	add	r7, sp, #12
 800c7ae: 4d f8 04 bd                  	str	r11, [sp, #-4]!
 800c7b2: a2 b0                        	sub	sp, #136
 800c7b4: 05 68                        	ldr	r5, [r0]
 800c7b6: 0c 46                        	mov	r4, r1
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800c7b8: 29 68                        	ldr	r1, [r5]
 800c7ba: c8 07                        	lsls	r0, r1, #31
 800c7bc: 19 d1                        	bne	#50 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x4c>
 800c7be: 6a 68                        	ldr	r2, [r5, #4]
 800c7c0: 01 20                        	movs	r0, #1
 800c7c2: 8b 07                        	lsls	r3, r1, #30
 800c7c4: 26 d4                        	bmi	#76 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x6e>
 800c7c6: 4b 07                        	lsls	r3, r1, #29
 800c7c8: 42 d4                        	bmi	#132 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xaa>
 800c7ca: 0b 07                        	lsls	r3, r1, #28
 800c7cc: 5e d4                        	bmi	#188 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xe6>
 800c7ce: cb 06                        	lsls	r3, r1, #27
 800c7d0: 7b d4                        	bmi	#246 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x124>
 800c7d2: 8b 06                        	lsls	r3, r1, #26
 800c7d4: 00 f1 98 80                  	bmi.w	#304 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x162>
 800c7d8: 4b 06                        	lsls	r3, r1, #25
 800c7da: 00 f1 b4 80                  	bmi.w	#360 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x1a0>
 800c7de: 0b 06                        	lsls	r3, r1, #24
 800c7e0: 00 f1 d0 80                  	bmi.w	#416 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x1de>
 800c7e4: 8b 05                        	lsls	r3, r1, #22
 800c7e6: 00 f1 ec 80                  	bmi.w	#472 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x21c>
 800c7ea: 4b 05                        	lsls	r3, r1, #21
 800c7ec: 00 f1 07 81                  	bmi.w	#526 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x258>
 800c7f0: 21 e1                        	b	#578 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x290>
 800c7f2: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800c7f6: 12 22                        	movs	r2, #18
 800c7f8: cb 68                        	ldr	r3, [r1, #12]
 800c7fa: 4d f6 85 71                  	movw	r1, #57221
 800c7fe: c0 f6 01 01                  	movt	r1, #2049
 800c802: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800c804: 00 28                        	cmp	r0, #0
 800c806: 40 f0 a4 86                  	bne.w	#3400 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800c80a: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800c80e: 00 20                        	movs	r0, #0
 800c810: 8b 07                        	lsls	r3, r1, #30
 800c812: d8 d5                        	bpl	#-80 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x20>
;                         if !first {
 800c814: 58 b9                        	cbnz	r0, #22
 800c816: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800c81a: 03 22                        	movs	r2, #3
 800c81c: cb 68                        	ldr	r3, [r1, #12]
 800c81e: 4d f6 97 71                  	movw	r1, #57239
 800c822: c0 f6 01 01                  	movt	r1, #2049
 800c826: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800c828: 00 28                        	cmp	r0, #0
 800c82a: 40 f0 92 86                  	bne.w	#3364 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800c82e: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800c832: 11 22                        	movs	r2, #17
 800c834: cb 68                        	ldr	r3, [r1, #12]
 800c836: 4d f6 9a 71                  	movw	r1, #57242
 800c83a: c0 f6 01 01                  	movt	r1, #2049
 800c83e: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800c840: 00 28                        	cmp	r0, #0
 800c842: 40 f0 86 86                  	bne.w	#3340 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800c846: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800c84a: 00 20                        	movs	r0, #0
 800c84c: 4b 07                        	lsls	r3, r1, #29
 800c84e: bc d5                        	bpl	#-136 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x24>
;                         if !first {
 800c850: 58 b9                        	cbnz	r0, #22
 800c852: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800c856: 03 22                        	movs	r2, #3
 800c858: cb 68                        	ldr	r3, [r1, #12]
 800c85a: 4d f6 97 71                  	movw	r1, #57239
 800c85e: c0 f6 01 01                  	movt	r1, #2049
 800c862: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800c864: 00 28                        	cmp	r0, #0
 800c866: 40 f0 74 86                  	bne.w	#3304 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800c86a: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800c86e: 0a 22                        	movs	r2, #10
 800c870: cb 68                        	ldr	r3, [r1, #12]
 800c872: 4d f6 ab 71                  	movw	r1, #57259
 800c876: c0 f6 01 01                  	movt	r1, #2049
 800c87a: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800c87c: 00 28                        	cmp	r0, #0
 800c87e: 40 f0 68 86                  	bne.w	#3280 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800c882: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800c886: 00 20                        	movs	r0, #0
 800c888: 0b 07                        	lsls	r3, r1, #28
 800c88a: a0 d5                        	bpl	#-192 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x28>
;                         if !first {
 800c88c: 58 b9                        	cbnz	r0, #22
 800c88e: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800c892: 03 22                        	movs	r2, #3
 800c894: cb 68                        	ldr	r3, [r1, #12]
 800c896: 4d f6 97 71                  	movw	r1, #57239
 800c89a: c0 f6 01 01                  	movt	r1, #2049
 800c89e: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800c8a0: 00 28                        	cmp	r0, #0
 800c8a2: 40 f0 56 86                  	bne.w	#3244 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800c8a6: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800c8aa: 0b 22                        	movs	r2, #11
 800c8ac: cb 68                        	ldr	r3, [r1, #12]
 800c8ae: 4d f6 b5 71                  	movw	r1, #57269
 800c8b2: c0 f6 01 01                  	movt	r1, #2049
 800c8b6: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800c8b8: 00 28                        	cmp	r0, #0
 800c8ba: 40 f0 4a 86                  	bne.w	#3220 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800c8be: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800c8c2: 00 20                        	movs	r0, #0
 800c8c4: cb 06                        	lsls	r3, r1, #27
 800c8c6: 7f f5 84 af                  	bpl.w	#-248 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x2c>
;                         if !first {
 800c8ca: 58 b9                        	cbnz	r0, #22
 800c8cc: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800c8d0: 03 22                        	movs	r2, #3
 800c8d2: cb 68                        	ldr	r3, [r1, #12]
 800c8d4: 4d f6 97 71                  	movw	r1, #57239
 800c8d8: c0 f6 01 01                  	movt	r1, #2049
 800c8dc: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800c8de: 00 28                        	cmp	r0, #0
 800c8e0: 40 f0 37 86                  	bne.w	#3182 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800c8e4: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800c8e8: 0f 22                        	movs	r2, #15
 800c8ea: cb 68                        	ldr	r3, [r1, #12]
 800c8ec: 4d f6 c0 71                  	movw	r1, #57280
 800c8f0: c0 f6 01 01                  	movt	r1, #2049
 800c8f4: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800c8f6: 00 28                        	cmp	r0, #0
 800c8f8: 40 f0 2b 86                  	bne.w	#3158 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800c8fc: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800c900: 00 20                        	movs	r0, #0
 800c902: 8b 06                        	lsls	r3, r1, #26
 800c904: 7f f5 68 af                  	bpl.w	#-304 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x32>
;                         if !first {
 800c908: 58 b9                        	cbnz	r0, #22
 800c90a: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800c90e: 03 22                        	movs	r2, #3
 800c910: cb 68                        	ldr	r3, [r1, #12]
 800c912: 4d f6 97 71                  	movw	r1, #57239
 800c916: c0 f6 01 01                  	movt	r1, #2049
 800c91a: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800c91c: 00 28                        	cmp	r0, #0
 800c91e: 40 f0 18 86                  	bne.w	#3120 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800c922: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800c926: 0b 22                        	movs	r2, #11
 800c928: cb 68                        	ldr	r3, [r1, #12]
 800c92a: 4d f6 cf 71                  	movw	r1, #57295
 800c92e: c0 f6 01 01                  	movt	r1, #2049
 800c932: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800c934: 00 28                        	cmp	r0, #0
 800c936: 40 f0 0c 86                  	bne.w	#3096 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800c93a: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800c93e: 00 20                        	movs	r0, #0
 800c940: 4b 06                        	lsls	r3, r1, #25
 800c942: 7f f5 4c af                  	bpl.w	#-360 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x38>
;                         if !first {
 800c946: 58 b9                        	cbnz	r0, #22
 800c948: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800c94c: 03 22                        	movs	r2, #3
 800c94e: cb 68                        	ldr	r3, [r1, #12]
 800c950: 4d f6 97 71                  	movw	r1, #57239
 800c954: c0 f6 01 01                  	movt	r1, #2049
 800c958: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800c95a: 00 28                        	cmp	r0, #0
 800c95c: 40 f0 f9 85                  	bne.w	#3058 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800c960: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800c964: 09 22                        	movs	r2, #9
 800c966: cb 68                        	ldr	r3, [r1, #12]
 800c968: 4d f6 da 71                  	movw	r1, #57306
 800c96c: c0 f6 01 01                  	movt	r1, #2049
 800c970: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800c972: 00 28                        	cmp	r0, #0
 800c974: 40 f0 ed 85                  	bne.w	#3034 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800c978: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800c97c: 00 20                        	movs	r0, #0
 800c97e: 0b 06                        	lsls	r3, r1, #24
 800c980: 7f f5 30 af                  	bpl.w	#-416 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x3e>
;                         if !first {
 800c984: 58 b9                        	cbnz	r0, #22
 800c986: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800c98a: 03 22                        	movs	r2, #3
 800c98c: cb 68                        	ldr	r3, [r1, #12]
 800c98e: 4d f6 97 71                  	movw	r1, #57239
 800c992: c0 f6 01 01                  	movt	r1, #2049
 800c996: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800c998: 00 28                        	cmp	r0, #0
 800c99a: 40 f0 da 85                  	bne.w	#2996 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800c99e: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800c9a2: 0a 22                        	movs	r2, #10
 800c9a4: cb 68                        	ldr	r3, [r1, #12]
 800c9a6: 4d f6 e3 71                  	movw	r1, #57315
 800c9aa: c0 f6 01 01                  	movt	r1, #2049
 800c9ae: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800c9b0: 00 28                        	cmp	r0, #0
 800c9b2: 40 f0 ce 85                  	bne.w	#2972 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800c9b6: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800c9ba: 00 20                        	movs	r0, #0
 800c9bc: 8b 05                        	lsls	r3, r1, #22
 800c9be: 7f f5 14 af                  	bpl.w	#-472 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x44>
;                         if !first {
 800c9c2: 58 b9                        	cbnz	r0, #22
 800c9c4: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800c9c8: 03 22                        	movs	r2, #3
 800c9ca: cb 68                        	ldr	r3, [r1, #12]
 800c9cc: 4d f6 97 71                  	movw	r1, #57239
 800c9d0: c0 f6 01 01                  	movt	r1, #2049
 800c9d4: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800c9d6: 00 28                        	cmp	r0, #0
 800c9d8: 40 f0 bb 85                  	bne.w	#2934 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800c9dc: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800c9e0: 16 22                        	movs	r2, #22
 800c9e2: cb 68                        	ldr	r3, [r1, #12]
 800c9e4: 4d f6 ed 71                  	movw	r1, #57325
 800c9e8: c0 f6 01 01                  	movt	r1, #2049
 800c9ec: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800c9ee: 00 28                        	cmp	r0, #0
 800c9f0: 40 f0 af 85                  	bne.w	#2910 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800c9f4: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800c9f8: 00 20                        	movs	r0, #0
 800c9fa: 4b 05                        	lsls	r3, r1, #21
 800c9fc: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x290>
;                         if !first {
 800c9fe: 58 b9                        	cbnz	r0, #22
 800ca00: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800ca04: 03 22                        	movs	r2, #3
 800ca06: cb 68                        	ldr	r3, [r1, #12]
 800ca08: 4d f6 97 71                  	movw	r1, #57239
 800ca0c: c0 f6 01 01                  	movt	r1, #2049
 800ca10: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800ca12: 00 28                        	cmp	r0, #0
 800ca14: 40 f0 9d 85                  	bne.w	#2874 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800ca18: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800ca1c: 26 22                        	movs	r2, #38
 800ca1e: cb 68                        	ldr	r3, [r1, #12]
 800ca20: 4e f2 03 01                  	movw	r1, #57347
 800ca24: c0 f6 01 01                  	movt	r1, #2049
 800ca28: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800ca2a: 00 28                        	cmp	r0, #0
 800ca2c: 40 f0 91 85                  	bne.w	#2850 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800ca30: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800ca34: 00 20                        	movs	r0, #0
 800ca36: 0b 05                        	lsls	r3, r1, #20
 800ca38: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x2cc>
;                         if !first {
 800ca3a: 58 b9                        	cbnz	r0, #22
 800ca3c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800ca40: 03 22                        	movs	r2, #3
 800ca42: cb 68                        	ldr	r3, [r1, #12]
 800ca44: 4d f6 97 71                  	movw	r1, #57239
 800ca48: c0 f6 01 01                  	movt	r1, #2049
 800ca4c: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800ca4e: 00 28                        	cmp	r0, #0
 800ca50: 40 f0 7f 85                  	bne.w	#2814 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800ca54: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800ca58: 08 22                        	movs	r2, #8
 800ca5a: cb 68                        	ldr	r3, [r1, #12]
 800ca5c: 4c f6 e4 31                  	movw	r1, #52196
 800ca60: c0 f6 01 01                  	movt	r1, #2049
 800ca64: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800ca66: 00 28                        	cmp	r0, #0
 800ca68: 40 f0 73 85                  	bne.w	#2790 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800ca6c: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800ca70: 00 20                        	movs	r0, #0
 800ca72: cb 04                        	lsls	r3, r1, #19
 800ca74: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x308>
;                         if !first {
 800ca76: 58 b9                        	cbnz	r0, #22
 800ca78: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800ca7c: 03 22                        	movs	r2, #3
 800ca7e: cb 68                        	ldr	r3, [r1, #12]
 800ca80: 4d f6 97 71                  	movw	r1, #57239
 800ca84: c0 f6 01 01                  	movt	r1, #2049
 800ca88: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800ca8a: 00 28                        	cmp	r0, #0
 800ca8c: 40 f0 61 85                  	bne.w	#2754 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800ca90: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800ca94: 0b 22                        	movs	r2, #11
 800ca96: cb 68                        	ldr	r3, [r1, #12]
 800ca98: 4e f2 29 01                  	movw	r1, #57385
 800ca9c: c0 f6 01 01                  	movt	r1, #2049
 800caa0: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800caa2: 00 28                        	cmp	r0, #0
 800caa4: 40 f0 55 85                  	bne.w	#2730 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800caa8: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800caac: 00 20                        	movs	r0, #0
 800caae: 8b 04                        	lsls	r3, r1, #18
 800cab0: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x344>
;                         if !first {
 800cab2: 58 b9                        	cbnz	r0, #22
 800cab4: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800cab8: 03 22                        	movs	r2, #3
 800caba: cb 68                        	ldr	r3, [r1, #12]
 800cabc: 4d f6 97 71                  	movw	r1, #57239
 800cac0: c0 f6 01 01                  	movt	r1, #2049
 800cac4: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800cac6: 00 28                        	cmp	r0, #0
 800cac8: 40 f0 43 85                  	bne.w	#2694 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800cacc: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800cad0: 0b 22                        	movs	r2, #11
 800cad2: cb 68                        	ldr	r3, [r1, #12]
 800cad4: 4e f2 34 01                  	movw	r1, #57396
 800cad8: c0 f6 01 01                  	movt	r1, #2049
 800cadc: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800cade: 00 28                        	cmp	r0, #0
 800cae0: 40 f0 37 85                  	bne.w	#2670 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800cae4: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800cae8: 00 20                        	movs	r0, #0
 800caea: 4b 04                        	lsls	r3, r1, #17
 800caec: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x380>
;                         if !first {
 800caee: 58 b9                        	cbnz	r0, #22
 800caf0: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800caf4: 03 22                        	movs	r2, #3
 800caf6: cb 68                        	ldr	r3, [r1, #12]
 800caf8: 4d f6 97 71                  	movw	r1, #57239
 800cafc: c0 f6 01 01                  	movt	r1, #2049
 800cb00: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800cb02: 00 28                        	cmp	r0, #0
 800cb04: 40 f0 25 85                  	bne.w	#2634 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800cb08: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800cb0c: 1b 22                        	movs	r2, #27
 800cb0e: cb 68                        	ldr	r3, [r1, #12]
 800cb10: 4e f2 3f 01                  	movw	r1, #57407
 800cb14: c0 f6 01 01                  	movt	r1, #2049
 800cb18: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800cb1a: 00 28                        	cmp	r0, #0
 800cb1c: 40 f0 19 85                  	bne.w	#2610 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800cb20: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800cb24: 00 20                        	movs	r0, #0
 800cb26: 0b 04                        	lsls	r3, r1, #16
 800cb28: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x3bc>
;                         if !first {
 800cb2a: 58 b9                        	cbnz	r0, #22
 800cb2c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800cb30: 03 22                        	movs	r2, #3
 800cb32: cb 68                        	ldr	r3, [r1, #12]
 800cb34: 4d f6 97 71                  	movw	r1, #57239
 800cb38: c0 f6 01 01                  	movt	r1, #2049
 800cb3c: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800cb3e: 00 28                        	cmp	r0, #0
 800cb40: 40 f0 07 85                  	bne.w	#2574 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800cb44: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800cb48: 1a 22                        	movs	r2, #26
 800cb4a: cb 68                        	ldr	r3, [r1, #12]
 800cb4c: 4e f2 5a 01                  	movw	r1, #57434
 800cb50: c0 f6 01 01                  	movt	r1, #2049
 800cb54: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800cb56: 00 28                        	cmp	r0, #0
 800cb58: 40 f0 fb 84                  	bne.w	#2550 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800cb5c: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800cb60: 00 20                        	movs	r0, #0
 800cb62: cb 03                        	lsls	r3, r1, #15
 800cb64: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x3f8>
;                         if !first {
 800cb66: 58 b9                        	cbnz	r0, #22
 800cb68: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800cb6c: 03 22                        	movs	r2, #3
 800cb6e: cb 68                        	ldr	r3, [r1, #12]
 800cb70: 4d f6 97 71                  	movw	r1, #57239
 800cb74: c0 f6 01 01                  	movt	r1, #2049
 800cb78: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800cb7a: 00 28                        	cmp	r0, #0
 800cb7c: 40 f0 e9 84                  	bne.w	#2514 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800cb80: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800cb84: 15 22                        	movs	r2, #21
 800cb86: cb 68                        	ldr	r3, [r1, #12]
 800cb88: 4e f2 74 01                  	movw	r1, #57460
 800cb8c: c0 f6 01 01                  	movt	r1, #2049
 800cb90: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800cb92: 00 28                        	cmp	r0, #0
 800cb94: 40 f0 dd 84                  	bne.w	#2490 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800cb98: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800cb9c: 00 20                        	movs	r0, #0
 800cb9e: 8b 03                        	lsls	r3, r1, #14
 800cba0: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x434>
;                         if !first {
 800cba2: 58 b9                        	cbnz	r0, #22
 800cba4: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800cba8: 03 22                        	movs	r2, #3
 800cbaa: cb 68                        	ldr	r3, [r1, #12]
 800cbac: 4d f6 97 71                  	movw	r1, #57239
 800cbb0: c0 f6 01 01                  	movt	r1, #2049
 800cbb4: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800cbb6: 00 28                        	cmp	r0, #0
 800cbb8: 40 f0 cb 84                  	bne.w	#2454 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800cbbc: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800cbc0: 1c 22                        	movs	r2, #28
 800cbc2: cb 68                        	ldr	r3, [r1, #12]
 800cbc4: 4e f2 89 01                  	movw	r1, #57481
 800cbc8: c0 f6 01 01                  	movt	r1, #2049
 800cbcc: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800cbce: 00 28                        	cmp	r0, #0
 800cbd0: 40 f0 bf 84                  	bne.w	#2430 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800cbd4: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800cbd8: 00 20                        	movs	r0, #0
 800cbda: 4b 03                        	lsls	r3, r1, #13
 800cbdc: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x470>
;                         if !first {
 800cbde: 58 b9                        	cbnz	r0, #22
 800cbe0: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800cbe4: 03 22                        	movs	r2, #3
 800cbe6: cb 68                        	ldr	r3, [r1, #12]
 800cbe8: 4d f6 97 71                  	movw	r1, #57239
 800cbec: c0 f6 01 01                  	movt	r1, #2049
 800cbf0: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800cbf2: 00 28                        	cmp	r0, #0
 800cbf4: 40 f0 ad 84                  	bne.w	#2394 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800cbf8: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800cbfc: 0d 22                        	movs	r2, #13
 800cbfe: cb 68                        	ldr	r3, [r1, #12]
 800cc00: 4e f2 a5 01                  	movw	r1, #57509
 800cc04: c0 f6 01 01                  	movt	r1, #2049
 800cc08: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800cc0a: 00 28                        	cmp	r0, #0
 800cc0c: 40 f0 a1 84                  	bne.w	#2370 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800cc10: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800cc14: 00 20                        	movs	r0, #0
 800cc16: 0b 03                        	lsls	r3, r1, #12
 800cc18: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x4ac>
;                         if !first {
 800cc1a: 58 b9                        	cbnz	r0, #22
 800cc1c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800cc20: 03 22                        	movs	r2, #3
 800cc22: cb 68                        	ldr	r3, [r1, #12]
 800cc24: 4d f6 97 71                  	movw	r1, #57239
 800cc28: c0 f6 01 01                  	movt	r1, #2049
 800cc2c: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800cc2e: 00 28                        	cmp	r0, #0
 800cc30: 40 f0 8f 84                  	bne.w	#2334 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800cc34: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800cc38: 1c 22                        	movs	r2, #28
 800cc3a: cb 68                        	ldr	r3, [r1, #12]
 800cc3c: 4e f2 b2 01                  	movw	r1, #57522
 800cc40: c0 f6 01 01                  	movt	r1, #2049
 800cc44: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800cc46: 00 28                        	cmp	r0, #0
 800cc48: 40 f0 83 84                  	bne.w	#2310 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800cc4c: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800cc50: 00 20                        	movs	r0, #0
 800cc52: cb 02                        	lsls	r3, r1, #11
 800cc54: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x4e8>
;                         if !first {
 800cc56: 58 b9                        	cbnz	r0, #22
 800cc58: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800cc5c: 03 22                        	movs	r2, #3
 800cc5e: cb 68                        	ldr	r3, [r1, #12]
 800cc60: 4d f6 97 71                  	movw	r1, #57239
 800cc64: c0 f6 01 01                  	movt	r1, #2049
 800cc68: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800cc6a: 00 28                        	cmp	r0, #0
 800cc6c: 40 f0 71 84                  	bne.w	#2274 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800cc70: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800cc74: 14 22                        	movs	r2, #20
 800cc76: cb 68                        	ldr	r3, [r1, #12]
 800cc78: 4e f2 ce 01                  	movw	r1, #57550
 800cc7c: c0 f6 01 01                  	movt	r1, #2049
 800cc80: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800cc82: 00 28                        	cmp	r0, #0
 800cc84: 40 f0 65 84                  	bne.w	#2250 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800cc88: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800cc8c: 00 20                        	movs	r0, #0
 800cc8e: 8b 02                        	lsls	r3, r1, #10
 800cc90: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x524>
;                         if !first {
 800cc92: 58 b9                        	cbnz	r0, #22
 800cc94: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800cc98: 03 22                        	movs	r2, #3
 800cc9a: cb 68                        	ldr	r3, [r1, #12]
 800cc9c: 4d f6 97 71                  	movw	r1, #57239
 800cca0: c0 f6 01 01                  	movt	r1, #2049
 800cca4: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800cca6: 00 28                        	cmp	r0, #0
 800cca8: 40 f0 53 84                  	bne.w	#2214 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800ccac: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800ccb0: 14 22                        	movs	r2, #20
 800ccb2: cb 68                        	ldr	r3, [r1, #12]
 800ccb4: 4e f2 e2 01                  	movw	r1, #57570
 800ccb8: c0 f6 01 01                  	movt	r1, #2049
 800ccbc: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800ccbe: 00 28                        	cmp	r0, #0
 800ccc0: 40 f0 47 84                  	bne.w	#2190 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800ccc4: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800ccc8: 00 20                        	movs	r0, #0
 800ccca: 4b 02                        	lsls	r3, r1, #9
 800cccc: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x560>
;                         if !first {
 800ccce: 58 b9                        	cbnz	r0, #22
 800ccd0: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800ccd4: 03 22                        	movs	r2, #3
 800ccd6: cb 68                        	ldr	r3, [r1, #12]
 800ccd8: 4d f6 97 71                  	movw	r1, #57239
 800ccdc: c0 f6 01 01                  	movt	r1, #2049
 800cce0: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800cce2: 00 28                        	cmp	r0, #0
 800cce4: 40 f0 35 84                  	bne.w	#2154 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800cce8: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800ccec: 14 22                        	movs	r2, #20
 800ccee: cb 68                        	ldr	r3, [r1, #12]
 800ccf0: 4e f2 f6 01                  	movw	r1, #57590
 800ccf4: c0 f6 01 01                  	movt	r1, #2049
 800ccf8: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800ccfa: 00 28                        	cmp	r0, #0
 800ccfc: 40 f0 29 84                  	bne.w	#2130 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800cd00: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800cd04: 00 20                        	movs	r0, #0
 800cd06: 0b 02                        	lsls	r3, r1, #8
 800cd08: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x59c>
;                         if !first {
 800cd0a: 58 b9                        	cbnz	r0, #22
 800cd0c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800cd10: 03 22                        	movs	r2, #3
 800cd12: cb 68                        	ldr	r3, [r1, #12]
 800cd14: 4d f6 97 71                  	movw	r1, #57239
 800cd18: c0 f6 01 01                  	movt	r1, #2049
 800cd1c: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800cd1e: 00 28                        	cmp	r0, #0
 800cd20: 40 f0 17 84                  	bne.w	#2094 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800cd24: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800cd28: 14 22                        	movs	r2, #20
 800cd2a: cb 68                        	ldr	r3, [r1, #12]
 800cd2c: 4e f2 0a 11                  	movw	r1, #57610
 800cd30: c0 f6 01 01                  	movt	r1, #2049
 800cd34: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800cd36: 00 28                        	cmp	r0, #0
 800cd38: 40 f0 0b 84                  	bne.w	#2070 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800cd3c: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800cd40: 00 20                        	movs	r0, #0
 800cd42: 8b 01                        	lsls	r3, r1, #6
 800cd44: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x5d8>
;                         if !first {
 800cd46: 58 b9                        	cbnz	r0, #22
 800cd48: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800cd4c: 03 22                        	movs	r2, #3
 800cd4e: cb 68                        	ldr	r3, [r1, #12]
 800cd50: 4d f6 97 71                  	movw	r1, #57239
 800cd54: c0 f6 01 01                  	movt	r1, #2049
 800cd58: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800cd5a: 00 28                        	cmp	r0, #0
 800cd5c: 40 f0 f9 83                  	bne.w	#2034 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800cd60: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800cd64: 26 22                        	movs	r2, #38
 800cd66: cb 68                        	ldr	r3, [r1, #12]
 800cd68: 4e f2 1e 11                  	movw	r1, #57630
 800cd6c: c0 f6 01 01                  	movt	r1, #2049
 800cd70: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800cd72: 00 28                        	cmp	r0, #0
 800cd74: 40 f0 ed 83                  	bne.w	#2010 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800cd78: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800cd7c: 00 20                        	movs	r0, #0
 800cd7e: 4b 01                        	lsls	r3, r1, #5
 800cd80: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x614>
;                         if !first {
 800cd82: 58 b9                        	cbnz	r0, #22
 800cd84: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800cd88: 03 22                        	movs	r2, #3
 800cd8a: cb 68                        	ldr	r3, [r1, #12]
 800cd8c: 4d f6 97 71                  	movw	r1, #57239
 800cd90: c0 f6 01 01                  	movt	r1, #2049
 800cd94: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800cd96: 00 28                        	cmp	r0, #0
 800cd98: 40 f0 db 83                  	bne.w	#1974 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800cd9c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800cda0: 26 22                        	movs	r2, #38
 800cda2: cb 68                        	ldr	r3, [r1, #12]
 800cda4: 4e f2 44 11                  	movw	r1, #57668
 800cda8: c0 f6 01 01                  	movt	r1, #2049
 800cdac: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800cdae: 00 28                        	cmp	r0, #0
 800cdb0: 40 f0 cf 83                  	bne.w	#1950 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800cdb4: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800cdb8: 00 20                        	movs	r0, #0
 800cdba: 0b 01                        	lsls	r3, r1, #4
 800cdbc: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x650>
;                         if !first {
 800cdbe: 58 b9                        	cbnz	r0, #22
 800cdc0: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800cdc4: 03 22                        	movs	r2, #3
 800cdc6: cb 68                        	ldr	r3, [r1, #12]
 800cdc8: 4d f6 97 71                  	movw	r1, #57239
 800cdcc: c0 f6 01 01                  	movt	r1, #2049
 800cdd0: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800cdd2: 00 28                        	cmp	r0, #0
 800cdd4: 40 f0 bd 83                  	bne.w	#1914 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800cdd8: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800cddc: 15 22                        	movs	r2, #21
 800cdde: cb 68                        	ldr	r3, [r1, #12]
 800cde0: 4e f2 6a 11                  	movw	r1, #57706
 800cde4: c0 f6 01 01                  	movt	r1, #2049
 800cde8: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800cdea: 00 28                        	cmp	r0, #0
 800cdec: 40 f0 b1 83                  	bne.w	#1890 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800cdf0: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800cdf4: 00 20                        	movs	r0, #0
 800cdf6: cb 00                        	lsls	r3, r1, #3
 800cdf8: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x68c>
;                         if !first {
 800cdfa: 58 b9                        	cbnz	r0, #22
 800cdfc: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800ce00: 03 22                        	movs	r2, #3
 800ce02: cb 68                        	ldr	r3, [r1, #12]
 800ce04: 4d f6 97 71                  	movw	r1, #57239
 800ce08: c0 f6 01 01                  	movt	r1, #2049
 800ce0c: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800ce0e: 00 28                        	cmp	r0, #0
 800ce10: 40 f0 9f 83                  	bne.w	#1854 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800ce14: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800ce18: 17 22                        	movs	r2, #23
 800ce1a: cb 68                        	ldr	r3, [r1, #12]
 800ce1c: 4e f2 7f 11                  	movw	r1, #57727
 800ce20: c0 f6 01 01                  	movt	r1, #2049
 800ce24: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800ce26: 00 28                        	cmp	r0, #0
 800ce28: 40 f0 93 83                  	bne.w	#1830 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800ce2c: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800ce30: 00 20                        	movs	r0, #0
 800ce32: 8b 00                        	lsls	r3, r1, #2
 800ce34: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x6c8>
;                         if !first {
 800ce36: 58 b9                        	cbnz	r0, #22
 800ce38: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800ce3c: 03 22                        	movs	r2, #3
 800ce3e: cb 68                        	ldr	r3, [r1, #12]
 800ce40: 4d f6 97 71                  	movw	r1, #57239
 800ce44: c0 f6 01 01                  	movt	r1, #2049
 800ce48: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800ce4a: 00 28                        	cmp	r0, #0
 800ce4c: 40 f0 81 83                  	bne.w	#1794 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800ce50: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800ce54: 14 22                        	movs	r2, #20
 800ce56: cb 68                        	ldr	r3, [r1, #12]
 800ce58: 4e f2 96 11                  	movw	r1, #57750
 800ce5c: c0 f6 01 01                  	movt	r1, #2049
 800ce60: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800ce62: 00 28                        	cmp	r0, #0
 800ce64: 40 f0 75 83                  	bne.w	#1770 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800ce68: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800ce6c: 00 20                        	movs	r0, #0
 800ce6e: 4b 00                        	lsls	r3, r1, #1
 800ce70: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x704>
;                         if !first {
 800ce72: 58 b9                        	cbnz	r0, #22
 800ce74: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800ce78: 03 22                        	movs	r2, #3
 800ce7a: cb 68                        	ldr	r3, [r1, #12]
 800ce7c: 4d f6 97 71                  	movw	r1, #57239
 800ce80: c0 f6 01 01                  	movt	r1, #2049
 800ce84: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800ce86: 00 28                        	cmp	r0, #0
 800ce88: 40 f0 63 83                  	bne.w	#1734 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800ce8c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800ce90: 19 22                        	movs	r2, #25
 800ce92: cb 68                        	ldr	r3, [r1, #12]
 800ce94: 4e f2 aa 11                  	movw	r1, #57770
 800ce98: c0 f6 01 01                  	movt	r1, #2049
 800ce9c: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800ce9e: 00 28                        	cmp	r0, #0
 800cea0: 40 f0 57 83                  	bne.w	#1710 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800cea4: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800cea8: 00 20                        	movs	r0, #0
 800ceaa: b1 f1 ff 3f                  	cmp.w	r1, #4294967295
 800ceae: 1e dd                        	ble	#60 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x748>
 800ceb0: d3 07                        	lsls	r3, r2, #31
 800ceb2: 3a d0                        	beq	#116 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x784>
;                         if !first {
 800ceb4: 58 b9                        	cbnz	r0, #22
 800ceb6: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800ceba: 03 22                        	movs	r2, #3
 800cebc: cb 68                        	ldr	r3, [r1, #12]
 800cebe: 4d f6 97 71                  	movw	r1, #57239
 800cec2: c0 f6 01 01                  	movt	r1, #2049
 800cec6: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800cec8: 00 28                        	cmp	r0, #0
 800ceca: 40 f0 42 83                  	bne.w	#1668 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800cece: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800ced2: 0b 22                        	movs	r2, #11
 800ced4: cb 68                        	ldr	r3, [r1, #12]
 800ced6: 4e f2 e0 11                  	movw	r1, #57824
 800ceda: c0 f6 01 01                  	movt	r1, #2049
 800cede: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800cee0: 00 28                        	cmp	r0, #0
 800cee2: 40 f0 36 83                  	bne.w	#1644 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800cee6: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800ceea: 00 20                        	movs	r0, #0
 800ceec: 1d e0                        	b	#58 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x784>
;                         if !first {
 800ceee: 58 b9                        	cbnz	r0, #22
 800cef0: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800cef4: 03 22                        	movs	r2, #3
 800cef6: cb 68                        	ldr	r3, [r1, #12]
 800cef8: 4d f6 97 71                  	movw	r1, #57239
 800cefc: c0 f6 01 01                  	movt	r1, #2049
 800cf00: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800cf02: 00 28                        	cmp	r0, #0
 800cf04: 40 f0 25 83                  	bne.w	#1610 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800cf08: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800cf0c: 1d 22                        	movs	r2, #29
 800cf0e: cb 68                        	ldr	r3, [r1, #12]
 800cf10: 4e f2 c3 11                  	movw	r1, #57795
 800cf14: c0 f6 01 01                  	movt	r1, #2049
 800cf18: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800cf1a: 00 28                        	cmp	r0, #0
 800cf1c: 40 f0 19 83                  	bne.w	#1586 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800cf20: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800cf24: 00 20                        	movs	r0, #0
 800cf26: d3 07                        	lsls	r3, r2, #31
 800cf28: c4 d1                        	bne	#-120 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x70e>
 800cf2a: 93 07                        	lsls	r3, r2, #30
 800cf2c: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x7c0>
;                         if !first {
 800cf2e: 58 b9                        	cbnz	r0, #22
 800cf30: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800cf34: 03 22                        	movs	r2, #3
 800cf36: cb 68                        	ldr	r3, [r1, #12]
 800cf38: 4d f6 97 71                  	movw	r1, #57239
 800cf3c: c0 f6 01 01                  	movt	r1, #2049
 800cf40: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800cf42: 00 28                        	cmp	r0, #0
 800cf44: 40 f0 05 83                  	bne.w	#1546 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800cf48: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800cf4c: 0b 22                        	movs	r2, #11
 800cf4e: cb 68                        	ldr	r3, [r1, #12]
 800cf50: 4e f2 eb 11                  	movw	r1, #57835
 800cf54: c0 f6 01 01                  	movt	r1, #2049
 800cf58: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800cf5a: 00 28                        	cmp	r0, #0
 800cf5c: 40 f0 f9 82                  	bne.w	#1522 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800cf60: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800cf64: 00 20                        	movs	r0, #0
 800cf66: 13 07                        	lsls	r3, r2, #28
 800cf68: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x7fc>
;                         if !first {
 800cf6a: 58 b9                        	cbnz	r0, #22
 800cf6c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800cf70: 03 22                        	movs	r2, #3
 800cf72: cb 68                        	ldr	r3, [r1, #12]
 800cf74: 4d f6 97 71                  	movw	r1, #57239
 800cf78: c0 f6 01 01                  	movt	r1, #2049
 800cf7c: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800cf7e: 00 28                        	cmp	r0, #0
 800cf80: 40 f0 e7 82                  	bne.w	#1486 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800cf84: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800cf88: 16 22                        	movs	r2, #22
 800cf8a: cb 68                        	ldr	r3, [r1, #12]
 800cf8c: 4e f2 f6 11                  	movw	r1, #57846
 800cf90: c0 f6 01 01                  	movt	r1, #2049
 800cf94: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800cf96: 00 28                        	cmp	r0, #0
 800cf98: 40 f0 db 82                  	bne.w	#1462 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800cf9c: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800cfa0: 00 20                        	movs	r0, #0
 800cfa2: d3 06                        	lsls	r3, r2, #27
 800cfa4: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x838>
;                         if !first {
 800cfa6: 58 b9                        	cbnz	r0, #22
 800cfa8: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800cfac: 03 22                        	movs	r2, #3
 800cfae: cb 68                        	ldr	r3, [r1, #12]
 800cfb0: 4d f6 97 71                  	movw	r1, #57239
 800cfb4: c0 f6 01 01                  	movt	r1, #2049
 800cfb8: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800cfba: 00 28                        	cmp	r0, #0
 800cfbc: 40 f0 c9 82                  	bne.w	#1426 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800cfc0: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800cfc4: 1d 22                        	movs	r2, #29
 800cfc6: cb 68                        	ldr	r3, [r1, #12]
 800cfc8: 4e f2 0c 21                  	movw	r1, #57868
 800cfcc: c0 f6 01 01                  	movt	r1, #2049
 800cfd0: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800cfd2: 00 28                        	cmp	r0, #0
 800cfd4: 40 f0 bd 82                  	bne.w	#1402 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800cfd8: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800cfdc: 00 20                        	movs	r0, #0
 800cfde: 93 06                        	lsls	r3, r2, #26
 800cfe0: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x874>
;                         if !first {
 800cfe2: 58 b9                        	cbnz	r0, #22
 800cfe4: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800cfe8: 03 22                        	movs	r2, #3
 800cfea: cb 68                        	ldr	r3, [r1, #12]
 800cfec: 4d f6 97 71                  	movw	r1, #57239
 800cff0: c0 f6 01 01                  	movt	r1, #2049
 800cff4: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800cff6: 00 28                        	cmp	r0, #0
 800cff8: 40 f0 ab 82                  	bne.w	#1366 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800cffc: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d000: 14 22                        	movs	r2, #20
 800d002: cb 68                        	ldr	r3, [r1, #12]
 800d004: 4e f2 29 21                  	movw	r1, #57897
 800d008: c0 f6 01 01                  	movt	r1, #2049
 800d00c: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800d00e: 00 28                        	cmp	r0, #0
 800d010: 40 f0 9f 82                  	bne.w	#1342 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800d014: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800d018: 00 20                        	movs	r0, #0
 800d01a: 53 06                        	lsls	r3, r2, #25
 800d01c: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x8b0>
;                         if !first {
 800d01e: 58 b9                        	cbnz	r0, #22
 800d020: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d024: 03 22                        	movs	r2, #3
 800d026: cb 68                        	ldr	r3, [r1, #12]
 800d028: 4d f6 97 71                  	movw	r1, #57239
 800d02c: c0 f6 01 01                  	movt	r1, #2049
 800d030: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800d032: 00 28                        	cmp	r0, #0
 800d034: 40 f0 8d 82                  	bne.w	#1306 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800d038: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d03c: 1a 22                        	movs	r2, #26
 800d03e: cb 68                        	ldr	r3, [r1, #12]
 800d040: 4e f2 3d 21                  	movw	r1, #57917
 800d044: c0 f6 01 01                  	movt	r1, #2049
 800d048: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800d04a: 00 28                        	cmp	r0, #0
 800d04c: 40 f0 81 82                  	bne.w	#1282 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800d050: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800d054: 00 20                        	movs	r0, #0
 800d056: 13 06                        	lsls	r3, r2, #24
 800d058: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x8ec>
;                         if !first {
 800d05a: 58 b9                        	cbnz	r0, #22
 800d05c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d060: 03 22                        	movs	r2, #3
 800d062: cb 68                        	ldr	r3, [r1, #12]
 800d064: 4d f6 97 71                  	movw	r1, #57239
 800d068: c0 f6 01 01                  	movt	r1, #2049
 800d06c: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800d06e: 00 28                        	cmp	r0, #0
 800d070: 40 f0 6f 82                  	bne.w	#1246 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800d074: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d078: 29 22                        	movs	r2, #41
 800d07a: cb 68                        	ldr	r3, [r1, #12]
 800d07c: 4e f2 57 21                  	movw	r1, #57943
 800d080: c0 f6 01 01                  	movt	r1, #2049
 800d084: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800d086: 00 28                        	cmp	r0, #0
 800d088: 40 f0 63 82                  	bne.w	#1222 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800d08c: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800d090: 00 20                        	movs	r0, #0
 800d092: d3 05                        	lsls	r3, r2, #23
 800d094: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x928>
;                         if !first {
 800d096: 58 b9                        	cbnz	r0, #22
 800d098: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d09c: 03 22                        	movs	r2, #3
 800d09e: cb 68                        	ldr	r3, [r1, #12]
 800d0a0: 4d f6 97 71                  	movw	r1, #57239
 800d0a4: c0 f6 01 01                  	movt	r1, #2049
 800d0a8: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800d0aa: 00 28                        	cmp	r0, #0
 800d0ac: 40 f0 51 82                  	bne.w	#1186 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800d0b0: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d0b4: 28 22                        	movs	r2, #40
 800d0b6: cb 68                        	ldr	r3, [r1, #12]
 800d0b8: 4e f2 80 21                  	movw	r1, #57984
 800d0bc: c0 f6 01 01                  	movt	r1, #2049
 800d0c0: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800d0c2: 00 28                        	cmp	r0, #0
 800d0c4: 40 f0 45 82                  	bne.w	#1162 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800d0c8: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800d0cc: 00 20                        	movs	r0, #0
 800d0ce: 93 05                        	lsls	r3, r2, #22
 800d0d0: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x964>
;                         if !first {
 800d0d2: 58 b9                        	cbnz	r0, #22
 800d0d4: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d0d8: 03 22                        	movs	r2, #3
 800d0da: cb 68                        	ldr	r3, [r1, #12]
 800d0dc: 4d f6 97 71                  	movw	r1, #57239
 800d0e0: c0 f6 01 01                  	movt	r1, #2049
 800d0e4: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800d0e6: 00 28                        	cmp	r0, #0
 800d0e8: 40 f0 33 82                  	bne.w	#1126 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800d0ec: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d0f0: 0f 22                        	movs	r2, #15
 800d0f2: cb 68                        	ldr	r3, [r1, #12]
 800d0f4: 4e f2 a8 21                  	movw	r1, #58024
 800d0f8: c0 f6 01 01                  	movt	r1, #2049
 800d0fc: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800d0fe: 00 28                        	cmp	r0, #0
 800d100: 40 f0 27 82                  	bne.w	#1102 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800d104: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800d108: 00 20                        	movs	r0, #0
 800d10a: 53 05                        	lsls	r3, r2, #21
 800d10c: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x9a0>
;                         if !first {
 800d10e: 58 b9                        	cbnz	r0, #22
 800d110: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d114: 03 22                        	movs	r2, #3
 800d116: cb 68                        	ldr	r3, [r1, #12]
 800d118: 4d f6 97 71                  	movw	r1, #57239
 800d11c: c0 f6 01 01                  	movt	r1, #2049
 800d120: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800d122: 00 28                        	cmp	r0, #0
 800d124: 40 f0 15 82                  	bne.w	#1066 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800d128: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d12c: 10 22                        	movs	r2, #16
 800d12e: cb 68                        	ldr	r3, [r1, #12]
 800d130: 4d f2 3c 01                  	movw	r1, #53308
 800d134: c0 f6 01 01                  	movt	r1, #2049
 800d138: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800d13a: 00 28                        	cmp	r0, #0
 800d13c: 40 f0 09 82                  	bne.w	#1042 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800d140: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800d144: 00 20                        	movs	r0, #0
 800d146: 13 05                        	lsls	r3, r2, #20
 800d148: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0x9dc>
;                         if !first {
 800d14a: 58 b9                        	cbnz	r0, #22
 800d14c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d150: 03 22                        	movs	r2, #3
 800d152: cb 68                        	ldr	r3, [r1, #12]
 800d154: 4d f6 97 71                  	movw	r1, #57239
 800d158: c0 f6 01 01                  	movt	r1, #2049
 800d15c: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800d15e: 00 28                        	cmp	r0, #0
 800d160: 40 f0 f7 81                  	bne.w	#1006 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800d164: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d168: 1a 22                        	movs	r2, #26
 800d16a: cb 68                        	ldr	r3, [r1, #12]
 800d16c: 4e f2 b7 21                  	movw	r1, #58039
 800d170: c0 f6 01 01                  	movt	r1, #2049
 800d174: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800d176: 00 28                        	cmp	r0, #0
 800d178: 40 f0 eb 81                  	bne.w	#982 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800d17c: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800d180: 00 20                        	movs	r0, #0
 800d182: d3 04                        	lsls	r3, r2, #19
 800d184: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xa18>
;                         if !first {
 800d186: 58 b9                        	cbnz	r0, #22
 800d188: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d18c: 03 22                        	movs	r2, #3
 800d18e: cb 68                        	ldr	r3, [r1, #12]
 800d190: 4d f6 97 71                  	movw	r1, #57239
 800d194: c0 f6 01 01                  	movt	r1, #2049
 800d198: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800d19a: 00 28                        	cmp	r0, #0
 800d19c: 40 f0 d9 81                  	bne.w	#946 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800d1a0: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d1a4: 21 22                        	movs	r2, #33
 800d1a6: cb 68                        	ldr	r3, [r1, #12]
 800d1a8: 4e f2 d1 21                  	movw	r1, #58065
 800d1ac: c0 f6 01 01                  	movt	r1, #2049
 800d1b0: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800d1b2: 00 28                        	cmp	r0, #0
 800d1b4: 40 f0 cd 81                  	bne.w	#922 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800d1b8: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800d1bc: 00 20                        	movs	r0, #0
 800d1be: 93 04                        	lsls	r3, r2, #18
 800d1c0: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xa54>
;                         if !first {
 800d1c2: 58 b9                        	cbnz	r0, #22
 800d1c4: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d1c8: 03 22                        	movs	r2, #3
 800d1ca: cb 68                        	ldr	r3, [r1, #12]
 800d1cc: 4d f6 97 71                  	movw	r1, #57239
 800d1d0: c0 f6 01 01                  	movt	r1, #2049
 800d1d4: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800d1d6: 00 28                        	cmp	r0, #0
 800d1d8: 40 f0 bb 81                  	bne.w	#886 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800d1dc: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d1e0: 27 22                        	movs	r2, #39
 800d1e2: cb 68                        	ldr	r3, [r1, #12]
 800d1e4: 4e f2 f2 21                  	movw	r1, #58098
 800d1e8: c0 f6 01 01                  	movt	r1, #2049
 800d1ec: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800d1ee: 00 28                        	cmp	r0, #0
 800d1f0: 40 f0 af 81                  	bne.w	#862 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800d1f4: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800d1f8: 00 20                        	movs	r0, #0
 800d1fa: 53 04                        	lsls	r3, r2, #17
 800d1fc: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xa90>
;                         if !first {
 800d1fe: 58 b9                        	cbnz	r0, #22
 800d200: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d204: 03 22                        	movs	r2, #3
 800d206: cb 68                        	ldr	r3, [r1, #12]
 800d208: 4d f6 97 71                  	movw	r1, #57239
 800d20c: c0 f6 01 01                  	movt	r1, #2049
 800d210: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800d212: 00 28                        	cmp	r0, #0
 800d214: 40 f0 9d 81                  	bne.w	#826 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800d218: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d21c: 27 22                        	movs	r2, #39
 800d21e: cb 68                        	ldr	r3, [r1, #12]
 800d220: 4e f2 19 31                  	movw	r1, #58137
 800d224: c0 f6 01 01                  	movt	r1, #2049
 800d228: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800d22a: 00 28                        	cmp	r0, #0
 800d22c: 40 f0 91 81                  	bne.w	#802 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800d230: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800d234: 00 20                        	movs	r0, #0
 800d236: 13 04                        	lsls	r3, r2, #16
 800d238: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xacc>
;                         if !first {
 800d23a: 58 b9                        	cbnz	r0, #22
 800d23c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d240: 03 22                        	movs	r2, #3
 800d242: cb 68                        	ldr	r3, [r1, #12]
 800d244: 4d f6 97 71                  	movw	r1, #57239
 800d248: c0 f6 01 01                  	movt	r1, #2049
 800d24c: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800d24e: 00 28                        	cmp	r0, #0
 800d250: 40 f0 7f 81                  	bne.w	#766 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800d254: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d258: 2a 22                        	movs	r2, #42
 800d25a: cb 68                        	ldr	r3, [r1, #12]
 800d25c: 4e f2 40 31                  	movw	r1, #58176
 800d260: c0 f6 01 01                  	movt	r1, #2049
 800d264: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800d266: 00 28                        	cmp	r0, #0
 800d268: 40 f0 73 81                  	bne.w	#742 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800d26c: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800d270: 00 20                        	movs	r0, #0
 800d272: d3 03                        	lsls	r3, r2, #15
 800d274: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xb08>
;                         if !first {
 800d276: 58 b9                        	cbnz	r0, #22
 800d278: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d27c: 03 22                        	movs	r2, #3
 800d27e: cb 68                        	ldr	r3, [r1, #12]
 800d280: 4d f6 97 71                  	movw	r1, #57239
 800d284: c0 f6 01 01                  	movt	r1, #2049
 800d288: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800d28a: 00 28                        	cmp	r0, #0
 800d28c: 40 f0 61 81                  	bne.w	#706 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800d290: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d294: 19 22                        	movs	r2, #25
 800d296: cb 68                        	ldr	r3, [r1, #12]
 800d298: 4e f2 6a 31                  	movw	r1, #58218
 800d29c: c0 f6 01 01                  	movt	r1, #2049
 800d2a0: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800d2a2: 00 28                        	cmp	r0, #0
 800d2a4: 40 f0 55 81                  	bne.w	#682 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800d2a8: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800d2ac: 00 20                        	movs	r0, #0
 800d2ae: 93 03                        	lsls	r3, r2, #14
 800d2b0: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xb44>
;                         if !first {
 800d2b2: 58 b9                        	cbnz	r0, #22
 800d2b4: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d2b8: 03 22                        	movs	r2, #3
 800d2ba: cb 68                        	ldr	r3, [r1, #12]
 800d2bc: 4d f6 97 71                  	movw	r1, #57239
 800d2c0: c0 f6 01 01                  	movt	r1, #2049
 800d2c4: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800d2c6: 00 28                        	cmp	r0, #0
 800d2c8: 40 f0 43 81                  	bne.w	#646 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800d2cc: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d2d0: 31 22                        	movs	r2, #49
 800d2d2: cb 68                        	ldr	r3, [r1, #12]
 800d2d4: 4e f2 83 31                  	movw	r1, #58243
 800d2d8: c0 f6 01 01                  	movt	r1, #2049
 800d2dc: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800d2de: 00 28                        	cmp	r0, #0
 800d2e0: 40 f0 37 81                  	bne.w	#622 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800d2e4: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800d2e8: 00 20                        	movs	r0, #0
 800d2ea: 13 03                        	lsls	r3, r2, #12
 800d2ec: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xb80>
;                         if !first {
 800d2ee: 58 b9                        	cbnz	r0, #22
 800d2f0: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d2f4: 03 22                        	movs	r2, #3
 800d2f6: cb 68                        	ldr	r3, [r1, #12]
 800d2f8: 4d f6 97 71                  	movw	r1, #57239
 800d2fc: c0 f6 01 01                  	movt	r1, #2049
 800d300: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800d302: 00 28                        	cmp	r0, #0
 800d304: 40 f0 25 81                  	bne.w	#586 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800d308: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d30c: 15 22                        	movs	r2, #21
 800d30e: cb 68                        	ldr	r3, [r1, #12]
 800d310: 4e f2 b4 31                  	movw	r1, #58292
 800d314: c0 f6 01 01                  	movt	r1, #2049
 800d318: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800d31a: 00 28                        	cmp	r0, #0
 800d31c: 40 f0 19 81                  	bne.w	#562 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800d320: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800d324: 00 20                        	movs	r0, #0
 800d326: d3 02                        	lsls	r3, r2, #11
 800d328: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xbbc>
;                         if !first {
 800d32a: 58 b9                        	cbnz	r0, #22
 800d32c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d330: 03 22                        	movs	r2, #3
 800d332: cb 68                        	ldr	r3, [r1, #12]
 800d334: 4d f6 97 71                  	movw	r1, #57239
 800d338: c0 f6 01 01                  	movt	r1, #2049
 800d33c: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800d33e: 00 28                        	cmp	r0, #0
 800d340: 40 f0 07 81                  	bne.w	#526 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800d344: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d348: 10 22                        	movs	r2, #16
 800d34a: cb 68                        	ldr	r3, [r1, #12]
 800d34c: 4d f2 4c 01                  	movw	r1, #53324
 800d350: c0 f6 01 01                  	movt	r1, #2049
 800d354: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800d356: 00 28                        	cmp	r0, #0
 800d358: 40 f0 fb 80                  	bne.w	#502 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800d35c: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800d360: 00 20                        	movs	r0, #0
 800d362: 93 02                        	lsls	r3, r2, #10
 800d364: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xbf8>
;                         if !first {
 800d366: 58 b9                        	cbnz	r0, #22
 800d368: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d36c: 03 22                        	movs	r2, #3
 800d36e: cb 68                        	ldr	r3, [r1, #12]
 800d370: 4d f6 97 71                  	movw	r1, #57239
 800d374: c0 f6 01 01                  	movt	r1, #2049
 800d378: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800d37a: 00 28                        	cmp	r0, #0
 800d37c: 40 f0 e9 80                  	bne.w	#466 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800d380: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d384: 18 22                        	movs	r2, #24
 800d386: cb 68                        	ldr	r3, [r1, #12]
 800d388: 4e f2 c9 31                  	movw	r1, #58313
 800d38c: c0 f6 01 01                  	movt	r1, #2049
 800d390: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800d392: 00 28                        	cmp	r0, #0
 800d394: 40 f0 dd 80                  	bne.w	#442 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800d398: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800d39c: 00 20                        	movs	r0, #0
 800d39e: 53 02                        	lsls	r3, r2, #9
 800d3a0: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xc34>
;                         if !first {
 800d3a2: 58 b9                        	cbnz	r0, #22
 800d3a4: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d3a8: 03 22                        	movs	r2, #3
 800d3aa: cb 68                        	ldr	r3, [r1, #12]
 800d3ac: 4d f6 97 71                  	movw	r1, #57239
 800d3b0: c0 f6 01 01                  	movt	r1, #2049
 800d3b4: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800d3b6: 00 28                        	cmp	r0, #0
 800d3b8: 40 f0 cb 80                  	bne.w	#406 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800d3bc: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d3c0: 22 22                        	movs	r2, #34
 800d3c2: cb 68                        	ldr	r3, [r1, #12]
 800d3c4: 4e f2 e1 31                  	movw	r1, #58337
 800d3c8: c0 f6 01 01                  	movt	r1, #2049
 800d3cc: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800d3ce: 00 28                        	cmp	r0, #0
 800d3d0: 40 f0 bf 80                  	bne.w	#382 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800d3d4: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800d3d8: 00 20                        	movs	r0, #0
 800d3da: d3 01                        	lsls	r3, r2, #7
 800d3dc: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xc70>
;                         if !first {
 800d3de: 58 b9                        	cbnz	r0, #22
 800d3e0: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d3e4: 03 22                        	movs	r2, #3
 800d3e6: cb 68                        	ldr	r3, [r1, #12]
 800d3e8: 4d f6 97 71                  	movw	r1, #57239
 800d3ec: c0 f6 01 01                  	movt	r1, #2049
 800d3f0: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800d3f2: 00 28                        	cmp	r0, #0
 800d3f4: 40 f0 ad 80                  	bne.w	#346 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800d3f8: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d3fc: 26 22                        	movs	r2, #38
 800d3fe: cb 68                        	ldr	r3, [r1, #12]
 800d400: 4e f2 03 41                  	movw	r1, #58371
 800d404: c0 f6 01 01                  	movt	r1, #2049
 800d408: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800d40a: 00 28                        	cmp	r0, #0
 800d40c: 40 f0 a1 80                  	bne.w	#322 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800d410: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800d414: 00 20                        	movs	r0, #0
 800d416: 93 01                        	lsls	r3, r2, #6
 800d418: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xcac>
;                         if !first {
 800d41a: 58 b9                        	cbnz	r0, #22
 800d41c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d420: 03 22                        	movs	r2, #3
 800d422: cb 68                        	ldr	r3, [r1, #12]
 800d424: 4d f6 97 71                  	movw	r1, #57239
 800d428: c0 f6 01 01                  	movt	r1, #2049
 800d42c: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800d42e: 00 28                        	cmp	r0, #0
 800d430: 40 f0 8f 80                  	bne.w	#286 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800d434: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d438: 16 22                        	movs	r2, #22
 800d43a: cb 68                        	ldr	r3, [r1, #12]
 800d43c: 4e f2 29 41                  	movw	r1, #58409
 800d440: c0 f6 01 01                  	movt	r1, #2049
 800d444: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800d446: 00 28                        	cmp	r0, #0
 800d448: 40 f0 83 80                  	bne.w	#262 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800d44c: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800d450: 00 20                        	movs	r0, #0
 800d452: 53 01                        	lsls	r3, r2, #5
 800d454: 19 d5                        	bpl	#50 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xce4>
;                         if !first {
 800d456: 50 b9                        	cbnz	r0, #20
 800d458: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d45c: 03 22                        	movs	r2, #3
 800d45e: cb 68                        	ldr	r3, [r1, #12]
 800d460: 4d f6 97 71                  	movw	r1, #57239
 800d464: c0 f6 01 01                  	movt	r1, #2049
 800d468: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800d46a: 00 28                        	cmp	r0, #0
 800d46c: 71 d1                        	bne	#226 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800d46e: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d472: 16 22                        	movs	r2, #22
 800d474: cb 68                        	ldr	r3, [r1, #12]
 800d476: 4e f2 3f 41                  	movw	r1, #58431
 800d47a: c0 f6 01 01                  	movt	r1, #2049
 800d47e: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800d480: 00 28                        	cmp	r0, #0
 800d482: 66 d1                        	bne	#204 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800d484: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800d488: 00 20                        	movs	r0, #0
 800d48a: b2 f1 ff 3f                  	cmp.w	r2, #4294967295
 800d48e: 3c dd                        	ble	#120 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xd64>
 800d490: 04 23                        	movs	r3, #4
;                 let extra_bits = self.bits & !$BitFlags::all().bits();
 800d492: 01 f0 01 26                  	and	r6, r1, #16777472
 800d496: c7 f6 84 03                  	movt	r3, #30852
 800d49a: 02 ea 03 05                  	and.w	r5, r2, r3
;                 if extra_bits != 0 {
 800d49e: 71 19                        	adds	r1, r6, r5
 800d4a0: 4c d0                        	beq	#152 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xd96>
;                     if !first {
 800d4a2: 50 b9                        	cbnz	r0, #20
 800d4a4: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d4a8: 03 22                        	movs	r2, #3
 800d4aa: cb 68                        	ldr	r3, [r1, #12]
 800d4ac: 4d f6 97 71                  	movw	r1, #57239
 800d4b0: c0 f6 01 01                  	movt	r1, #2049
 800d4b4: 98 47                        	blx	r3
;                         f.write_str(" | ")?;
 800d4b6: 00 28                        	cmp	r0, #0
 800d4b8: 4b d1                        	bne	#150 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800d4ba: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d4be: 02 22                        	movs	r2, #2
 800d4c0: cb 68                        	ldr	r3, [r1, #12]
 800d4c2: 4e f6 b5 31                  	movw	r1, #60341
 800d4c6: c0 f6 01 01                  	movt	r1, #2049
 800d4ca: 98 47                        	blx	r3
;                     f.write_str("0x")?;
 800d4cc: 00 28                        	cmp	r0, #0
 800d4ce: 40 d1                        	bne	#128 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdac>
 800d4d0: 02 a9                        	add	r1, sp, #8
 800d4d2: 7f 20                        	movs	r0, #127
 800d4d4: 42 1c                        	adds	r2, r0, #1
 800d4d6: 48 d0                        	beq	#144 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdc4>
 800d4d8: 06 f0 0f 02                  	and	r2, r6, #15
 800d4dc: 02 f1 57 03                  	add.w	r3, r2, #87
 800d4e0: 0a 2a                        	cmp	r2, #10
 800d4e2: 38 bf                        	it	lo
 800d4e4: 02 f1 30 03                  	addlo.w	r3, r2, #48
 800d4e8: 32 09                        	lsrs	r2, r6, #4
 800d4ea: 42 ea 05 76                  	orr.w	r6, r2, r5, lsl #28
 800d4ee: 0b 54                        	strb	r3, [r1, r0]
 800d4f0: 46 ea 15 12                  	orr.w	r2, r6, r5, lsr #4
 800d4f4: 01 38                        	subs	r0, #1
 800d4f6: 2d 09                        	lsrs	r5, r5, #4
 800d4f8: 00 2a                        	cmp	r2, #0
 800d4fa: eb d1                        	bne	#-42 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xd2e>
 800d4fc: 01 30                        	adds	r0, #1
 800d4fe: 81 28                        	cmp	r0, #129
 800d500: 34 d3                        	blo	#104 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xdc6>
 800d502: 80 21                        	movs	r1, #128
 800d504: 08 f0 87 fc                  	bl	#35086
 800d508: fe de                        	trap
;                         if !first {
 800d50a: 48 b9                        	cbnz	r0, #18
 800d50c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d510: 03 22                        	movs	r2, #3
 800d512: cb 68                        	ldr	r3, [r1, #12]
 800d514: 4d f6 97 71                  	movw	r1, #57239
 800d518: c0 f6 01 01                  	movt	r1, #2049
 800d51c: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800d51e: c0 b9                        	cbnz	r0, #48
 800d520: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d524: 11 22                        	movs	r2, #17
 800d526: cb 68                        	ldr	r3, [r1, #12]
 800d528: 4e f2 55 41                  	movw	r1, #58453
 800d52c: c0 f6 01 01                  	movt	r1, #2049
 800d530: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800d532: 70 b9                        	cbnz	r0, #28
;                 let extra_bits = self.bits & !$BitFlags::all().bits();
 800d534: d5 e9 00 12                  	ldrd	r1, r2, [r5]
 800d538: 00 20                        	movs	r0, #0
 800d53a: a9 e7                        	b	#-174 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b0726dee9d09f74E+0xcea>
;                 if first {
 800d53c: 78 b1                        	cbz	r0, #30
 800d53e: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d542: 07 22                        	movs	r2, #7
 800d544: cb 68                        	ldr	r3, [r1, #12]
 800d546: 4e f2 66 41                  	movw	r1, #58470
 800d54a: c0 f6 01 01                  	movt	r1, #2049
 800d54e: 98 47                        	blx	r3
;                     f.write_str("(empty)")?;
 800d550: 28 b1                        	cbz	r0, #10
 800d552: 01 25                        	movs	r5, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800d554: 28 46                        	mov	r0, r5
 800d556: 22 b0                        	add	sp, #136
 800d558: 5d f8 04 bb                  	ldr	r11, [sp], #4
 800d55c: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 800d55e: 00 25                        	movs	r5, #0
 800d560: 28 46                        	mov	r0, r5
 800d562: 22 b0                        	add	sp, #136
 800d564: 5d f8 04 bb                  	ldr	r11, [sp], #4
 800d568: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 800d56a: 00 20                        	movs	r0, #0
 800d56c: c0 f1 80 02                  	rsb.w	r2, r0, #128
 800d570: 08 44                        	add	r0, r1
 800d572: 01 21                        	movs	r1, #1
 800d574: 02 23                        	movs	r3, #2
 800d576: cd e9 00 02                  	strd	r0, r2, [sp]
 800d57a: 4e f6 b5 32                  	movw	r2, #60341
 800d57e: c0 f6 01 02                  	movt	r2, #2049
 800d582: 20 46                        	mov	r0, r4
 800d584: 01 25                        	movs	r5, #1
 800d586: 08 f0 d9 fa                  	bl	#34226
;                     $crate::_core::fmt::LowerHex::fmt(&extra_bits, f)?;
 800d58a: 00 28                        	cmp	r0, #0
 800d58c: 08 bf                        	it	eq
 800d58e: 00 25                        	moveq	r5, #0
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800d590: 28 46                        	mov	r0, r5
 800d592: 22 b0                        	add	sp, #136
 800d594: 5d f8 04 bb                  	ldr	r11, [sp], #4
 800d598: f0 bd                        	pop	{r4, r5, r6, r7, pc}

0800d59a _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h1b64db870398478a:
 800d59a: b0 b5                        	push	{r4, r5, r7, lr}
 800d59c: 02 af                        	add	r7, sp, #8
 800d59e: 84 b0                        	sub	sp, #16
 800d5a0: 0c 46                        	mov	r4, r1
 800d5a2: 05 68                        	ldr	r5, [r0]
 800d5a4: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 800d5a8: 0f 22                        	movs	r2, #15
 800d5aa: cb 68                        	ldr	r3, [r1, #12]
 800d5ac: 4c f6 98 61                  	movw	r1, #52888
 800d5b0: c0 f6 01 01                  	movt	r1, #2049
 800d5b4: 98 47                        	blx	r3
 800d5b6: 8d f8 08 00                  	strb.w	r0, [sp, #8]
;     pub num_hci_command_packets: u8,
 800d5ba: 05 f5 88 70                  	add.w	r0, r5, #272
 800d5be: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Debug)]
 800d5c0: 4d f2 78 30                  	movw	r0, #54136
 800d5c4: 00 21                        	movs	r1, #0
 800d5c6: c0 f6 01 00                  	movt	r0, #2049
 800d5ca: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 800d5ce: 4d f2 cc 41                  	movw	r1, #54476
 800d5d2: 00 90                        	str	r0, [sp]
 800d5d4: 01 a8                        	add	r0, sp, #4
 800d5d6: 03 ab                        	add	r3, sp, #12
 800d5d8: c0 f6 01 01                  	movt	r1, #2049
 800d5dc: 17 22                        	movs	r2, #23
 800d5de: 01 94                        	str	r4, [sp, #4]
 800d5e0: 09 f0 a6 f8                  	bl	#37196
 800d5e4: 4d f2 30 61                  	movw	r1, #54832
 800d5e8: 03 ab                        	add	r3, sp, #12
 800d5ea: c0 f6 01 01                  	movt	r1, #2049
 800d5ee: 0d 22                        	movs	r2, #13
 800d5f0: 00 91                        	str	r1, [sp]
 800d5f2: 4d f2 20 61                  	movw	r1, #54816
 800d5f6: c0 f6 01 01                  	movt	r1, #2049
;     pub return_params: ReturnParameters<V>,
 800d5fa: 03 95                        	str	r5, [sp, #12]
; #[derive(Clone, Debug)]
 800d5fc: 09 f0 98 f8                  	bl	#37168
 800d600: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 800d604: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 800d608: b9 b1                        	cbz	r1, #46
 800d60a: 08 b1                        	cbz	r0, #2
 800d60c: 01 20                        	movs	r0, #1
 800d60e: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b64db870398478aE+0xa0>
 800d610: 01 99                        	ldr	r1, [sp, #4]
 800d612: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 800d616: 09 78                        	ldrb	r1, [r1]
 800d618: d3 68                        	ldr	r3, [r2, #12]
 800d61a: 49 07                        	lsls	r1, r1, #29
 800d61c: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b64db870398478aE+0x94>
 800d61e: 4e f6 1c 41                  	movw	r1, #60444
 800d622: 02 22                        	movs	r2, #2
 800d624: c0 f6 01 01                  	movt	r1, #2049
 800d628: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b64db870398478aE+0x9e>
 800d62a: 4e f6 d6 41                  	movw	r1, #60630
 800d62e: 01 22                        	movs	r2, #1
 800d630: c0 f6 01 01                  	movt	r1, #2049
 800d634: 98 47                        	blx	r3
 800d636: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800d63a: 00 28                        	cmp	r0, #0
 800d63c: 18 bf                        	it	ne
 800d63e: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800d640: 04 b0                        	add	sp, #16
 800d642: b0 bd                        	pop	{r4, r5, r7, pc}

0800d644 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h22716678be215ca3:
 800d644: 00 68                        	ldr	r0, [r0]
; #[derive(Copy, Clone, Debug, PartialEq)]
 800d646: 00 78                        	ldrb	r0, [r0]
 800d648: df e8 00 f0                  	tbb	[pc, r0]

0800d64c $d.50:
 800d64c:	03 0c 15 1e	.word	0x1e150c03
 800d650:	27 00		.short	0x0027

0800d652 $t.51:
 800d652: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 800d656: 4e f6 0b 21                  	movw	r1, #59915
 800d65a: d3 68                        	ldr	r3, [r2, #12]
 800d65c: c0 f6 01 01                  	movt	r1, #2049
 800d660: 15 22                        	movs	r2, #21
 800d662: 18 47                        	bx	r3
 800d664: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 800d668: 4c f6 44 31                  	movw	r1, #52036
 800d66c: d3 68                        	ldr	r3, [r2, #12]
 800d66e: c0 f6 01 01                  	movt	r1, #2049
 800d672: 20 22                        	movs	r2, #32
 800d674: 18 47                        	bx	r3
 800d676: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 800d67a: 4e f6 20 21                  	movw	r1, #59936
 800d67e: d3 68                        	ldr	r3, [r2, #12]
 800d680: c0 f6 01 01                  	movt	r1, #2049
 800d684: 13 22                        	movs	r2, #19
 800d686: 18 47                        	bx	r3
 800d688: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 800d68c: 4e f6 33 21                  	movw	r1, #59955
 800d690: d3 68                        	ldr	r3, [r2, #12]
 800d692: c0 f6 01 01                  	movt	r1, #2049
 800d696: 18 22                        	movs	r2, #24
 800d698: 18 47                        	bx	r3
 800d69a: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 800d69e: 4e f6 ec 11                  	movw	r1, #59884
 800d6a2: d3 68                        	ldr	r3, [r2, #12]
 800d6a4: c0 f6 01 01                  	movt	r1, #2049
 800d6a8: 1f 22                        	movs	r2, #31
 800d6aa: 18 47                        	bx	r3

0800d6ac _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h28e9d82972c0ebe7:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800d6ac: b0 b5                        	push	{r4, r5, r7, lr}
 800d6ae: 02 af                        	add	r7, sp, #8
 800d6b0: 84 b0                        	sub	sp, #16
 800d6b2: 05 68                        	ldr	r5, [r0]
 800d6b4: 0c 46                        	mov	r4, r1
; #[derive(Copy, Clone, Debug)]
 800d6b6: 28 78                        	ldrb	r0, [r5]
 800d6b8: df e8 10 f0                  	tbh	[pc, r0, lsl #1]

0800d6bc $d.53:
 800d6bc:	24 00 2f 00	.word	0x002f0024
 800d6c0:	38 00 41 00	.word	0x00410038
 800d6c4:	58 00 6f 00	.word	0x006f0058
 800d6c8:	86 00 9e 00	.word	0x009e0086
 800d6cc:	b5 00 cc 00	.word	0x00cc00b5
 800d6d0:	d5 00 ec 00	.word	0x00ec00d5
 800d6d4:	04 01 0d 01	.word	0x010d0104
 800d6d8:	16 01 2d 01	.word	0x012d0116
 800d6dc:	36 01 3f 01	.word	0x013f0136
 800d6e0:	48 01 51 01	.word	0x01510148
 800d6e4:	5a 01 63 01	.word	0x0163015a
 800d6e8:	85 01 8e 01	.word	0x018e0185
 800d6ec:	97 01 a0 01	.word	0x01a00197
 800d6f0:	a9 01 c0 01	.word	0x01c001a9
 800d6f4:	d7 01 ef 01	.word	0x01ef01d7
 800d6f8:	f8 01 0f 02	.word	0x020f01f8
 800d6fc:	27 02 30 02	.word	0x02300227
 800d700:	78 02 8f 02	.word	0x028f0278

0800d704 $t.54:
 800d704: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d708: 0b 22                        	movs	r2, #11
 800d70a: cb 68                        	ldr	r3, [r1, #12]
 800d70c: 4d f6 bd 11                  	movw	r1, #55741
 800d710: c0 f6 01 01                  	movt	r1, #2049
 800d714: 98 47                        	blx	r3
 800d716: 04 46                        	mov	r4, r0
 800d718: 42 e2                        	b	#1156 <$t.54+0x4a0>
 800d71a: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d71e: 0c 22                        	movs	r2, #12
 800d720: cb 68                        	ldr	r3, [r1, #12]
 800d722: 4d f6 b1 11                  	movw	r1, #55729
 800d726: c0 f6 01 01                  	movt	r1, #2049
 800d72a: ff e1                        	b	#1022 <$t.54+0x42c>
 800d72c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d730: 05 22                        	movs	r2, #5
 800d732: cb 68                        	ldr	r3, [r1, #12]
 800d734: 4d f6 ac 11                  	movw	r1, #55724
 800d738: c0 f6 01 01                  	movt	r1, #2049
 800d73c: f6 e1                        	b	#1004 <$t.54+0x42c>
 800d73e: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d742: 10 22                        	movs	r2, #16
 800d744: cb 68                        	ldr	r3, [r1, #12]
 800d746: 4c f6 4c 71                  	movw	r1, #53068
 800d74a: c0 f6 01 01                  	movt	r1, #2049
 800d74e: 98 47                        	blx	r3
 800d750: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800d754: 00 20                        	movs	r0, #0
 800d756: 4d f6 9c 12                  	movw	r2, #55708
 800d75a: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 800d75e: 01 90                        	str	r0, [sp, #4]
;     ReadTxPowerLevel(TxPowerLevel<V::Status>),
 800d760: a8 1c                        	adds	r0, r5, #2
 800d762: 03 a9                        	add	r1, sp, #12
 800d764: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800d766: c0 f6 01 02                  	movt	r2, #2049
 800d76a: ed e1                        	b	#986 <$t.54+0x448>
 800d76c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d770: 1b 22                        	movs	r2, #27
 800d772: cb 68                        	ldr	r3, [r1, #12]
 800d774: 4d f6 70 11                  	movw	r1, #55664
 800d778: c0 f6 01 01                  	movt	r1, #2049
 800d77c: 98 47                        	blx	r3
 800d77e: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800d782: 00 20                        	movs	r0, #0
 800d784: 4d f6 8c 12                  	movw	r2, #55692
 800d788: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 800d78c: 01 90                        	str	r0, [sp, #4]
;     ReadLocalVersionInformation(LocalVersionInfo<V::Status>),
 800d78e: a8 1c                        	adds	r0, r5, #2
 800d790: 03 a9                        	add	r1, sp, #12
 800d792: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800d794: c0 f6 01 02                  	movt	r2, #2049
 800d798: d6 e1                        	b	#940 <$t.54+0x448>
 800d79a: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d79e: 1a 22                        	movs	r2, #26
 800d7a0: cb 68                        	ldr	r3, [r1, #12]
 800d7a2: 4d f6 44 11                  	movw	r1, #55620
 800d7a6: c0 f6 01 01                  	movt	r1, #2049
 800d7aa: 98 47                        	blx	r3
 800d7ac: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800d7b0: 00 20                        	movs	r0, #0
 800d7b2: 4d f6 60 12                  	movw	r2, #55648
 800d7b6: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 800d7ba: 01 90                        	str	r0, [sp, #4]
;     ReadLocalSupportedCommands(LocalSupportedCommands<V::Status>),
 800d7bc: 68 1c                        	adds	r0, r5, #1
 800d7be: 03 a9                        	add	r1, sp, #12
 800d7c0: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800d7c2: c0 f6 01 02                  	movt	r2, #2049
 800d7c6: bf e1                        	b	#894 <$t.54+0x448>
 800d7c8: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d7cc: 1a 22                        	movs	r2, #26
 800d7ce: cb 68                        	ldr	r3, [r1, #12]
 800d7d0: 4d f6 18 11                  	movw	r1, #55576
 800d7d4: c0 f6 01 01                  	movt	r1, #2049
 800d7d8: 98 47                        	blx	r3
 800d7da: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800d7de: 00 20                        	movs	r0, #0
 800d7e0: 4d f6 34 12                  	movw	r2, #55604
 800d7e4: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 800d7e8: 01 90                        	str	r0, [sp, #4]
;     ReadLocalSupportedFeatures(LocalSupportedFeatures<V::Status>),
 800d7ea: 05 f1 08 00                  	add.w	r0, r5, #8
 800d7ee: 03 a9                        	add	r1, sp, #12
 800d7f0: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800d7f2: c0 f6 01 02                  	movt	r2, #2049
 800d7f6: a7 e1                        	b	#846 <$t.54+0x448>
 800d7f8: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d7fc: 0a 22                        	movs	r2, #10
 800d7fe: cb 68                        	ldr	r3, [r1, #12]
 800d800: 4d f2 8e 51                  	movw	r1, #54670
 800d804: c0 f6 01 01                  	movt	r1, #2049
 800d808: 98 47                        	blx	r3
 800d80a: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800d80e: 00 20                        	movs	r0, #0
 800d810: 4d f6 08 12                  	movw	r2, #55560
 800d814: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 800d818: 01 90                        	str	r0, [sp, #4]
;     ReadBdAddr(ReadBdAddr<V::Status>),
 800d81a: 68 1c                        	adds	r0, r5, #1
 800d81c: 03 a9                        	add	r1, sp, #12
 800d81e: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800d820: c0 f6 01 02                  	movt	r2, #2049
 800d824: 90 e1                        	b	#800 <$t.54+0x448>
 800d826: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d82a: 08 22                        	movs	r2, #8
 800d82c: cb 68                        	ldr	r3, [r1, #12]
 800d82e: 4c f6 d4 31                  	movw	r1, #52180
 800d832: c0 f6 01 01                  	movt	r1, #2049
 800d836: 98 47                        	blx	r3
 800d838: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800d83c: 00 20                        	movs	r0, #0
 800d83e: 4d f6 f8 02                  	movw	r2, #55544
 800d842: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 800d846: 01 90                        	str	r0, [sp, #4]
;     ReadRssi(ReadRssi<V::Status>),
 800d848: a8 1c                        	adds	r0, r5, #2
 800d84a: 03 a9                        	add	r1, sp, #12
 800d84c: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800d84e: c0 f6 01 02                  	movt	r2, #2049
 800d852: 79 e1                        	b	#754 <$t.54+0x448>
 800d854: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d858: 0e 22                        	movs	r2, #14
 800d85a: cb 68                        	ldr	r3, [r1, #12]
 800d85c: 4d f6 e8 01                  	movw	r1, #55528
 800d860: c0 f6 01 01                  	movt	r1, #2049
 800d864: 62 e1                        	b	#708 <$t.54+0x42c>
 800d866: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d86a: 10 22                        	movs	r2, #16
 800d86c: cb 68                        	ldr	r3, [r1, #12]
 800d86e: 4c f6 3c 71                  	movw	r1, #53052
 800d872: c0 f6 01 01                  	movt	r1, #2049
 800d876: 98 47                        	blx	r3
 800d878: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800d87c: 00 20                        	movs	r0, #0
 800d87e: 4d f6 d8 02                  	movw	r2, #55512
 800d882: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 800d886: 01 90                        	str	r0, [sp, #4]
;     LeReadBufferSize(LeReadBufferSize<V::Status>),
 800d888: a8 1c                        	adds	r0, r5, #2
 800d88a: 03 a9                        	add	r1, sp, #12
 800d88c: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800d88e: c0 f6 01 02                  	movt	r2, #2049
 800d892: 59 e1                        	b	#690 <$t.54+0x448>
 800d894: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d898: 1c 22                        	movs	r2, #28
 800d89a: cb 68                        	ldr	r3, [r1, #12]
 800d89c: 4d f6 ac 01                  	movw	r1, #55468
 800d8a0: c0 f6 01 01                  	movt	r1, #2049
 800d8a4: 98 47                        	blx	r3
 800d8a6: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800d8aa: 00 20                        	movs	r0, #0
 800d8ac: 4d f6 c8 02                  	movw	r2, #55496
 800d8b0: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 800d8b4: 01 90                        	str	r0, [sp, #4]
;     LeReadLocalSupportedFeatures(LeSupportedFeatures<V::Status>),
 800d8b6: 05 f1 08 00                  	add.w	r0, r5, #8
 800d8ba: 03 a9                        	add	r1, sp, #12
 800d8bc: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800d8be: c0 f6 01 02                  	movt	r2, #2049
 800d8c2: 41 e1                        	b	#642 <$t.54+0x448>
 800d8c4: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d8c8: 12 22                        	movs	r2, #18
 800d8ca: cb 68                        	ldr	r3, [r1, #12]
 800d8cc: 4d f6 9a 01                  	movw	r1, #55450
 800d8d0: c0 f6 01 01                  	movt	r1, #2049
 800d8d4: 2a e1                        	b	#596 <$t.54+0x42c>
 800d8d6: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d8da: 1a 22                        	movs	r2, #26
 800d8dc: cb 68                        	ldr	r3, [r1, #12]
 800d8de: 4d f6 80 01                  	movw	r1, #55424
 800d8e2: c0 f6 01 01                  	movt	r1, #2049
 800d8e6: 21 e1                        	b	#578 <$t.54+0x42c>
 800d8e8: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d8ec: 1f 22                        	movs	r2, #31
 800d8ee: cb 68                        	ldr	r3, [r1, #12]
 800d8f0: 4d f6 51 01                  	movw	r1, #55377
 800d8f4: c0 f6 01 01                  	movt	r1, #2049
 800d8f8: 98 47                        	blx	r3
 800d8fa: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800d8fe: 00 20                        	movs	r0, #0
 800d900: 4d f6 70 02                  	movw	r2, #55408
 800d904: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 800d908: 01 90                        	str	r0, [sp, #4]
;     LeReadAdvertisingChannelTxPower(LeAdvertisingChannelTxPower<V::Status>),
 800d90a: 68 1c                        	adds	r0, r5, #1
 800d90c: 03 a9                        	add	r1, sp, #12
 800d90e: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800d910: c0 f6 01 02                  	movt	r2, #2049
 800d914: 18 e1                        	b	#560 <$t.54+0x448>
 800d916: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d91a: 14 22                        	movs	r2, #20
 800d91c: cb 68                        	ldr	r3, [r1, #12]
 800d91e: 4d f6 3d 01                  	movw	r1, #55357
 800d922: c0 f6 01 01                  	movt	r1, #2049
 800d926: 01 e1                        	b	#514 <$t.54+0x42c>
 800d928: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d92c: 15 22                        	movs	r2, #21
 800d92e: cb 68                        	ldr	r3, [r1, #12]
 800d930: 4d f6 28 01                  	movw	r1, #55336
 800d934: c0 f6 01 01                  	movt	r1, #2049
 800d938: f8 e0                        	b	#496 <$t.54+0x42c>
 800d93a: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d93e: 14 22                        	movs	r2, #20
 800d940: cb 68                        	ldr	r3, [r1, #12]
 800d942: 4d f6 14 01                  	movw	r1, #55316
 800d946: c0 f6 01 01                  	movt	r1, #2049
 800d94a: ef e0                        	b	#478 <$t.54+0x42c>
 800d94c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d950: 13 22                        	movs	r2, #19
 800d952: cb 68                        	ldr	r3, [r1, #12]
 800d954: 4d f6 01 01                  	movw	r1, #55297
 800d958: c0 f6 01 01                  	movt	r1, #2049
 800d95c: e6 e0                        	b	#460 <$t.54+0x42c>
 800d95e: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d962: 0f 22                        	movs	r2, #15
 800d964: cb 68                        	ldr	r3, [r1, #12]
 800d966: 4d f2 f2 71                  	movw	r1, #55282
 800d96a: c0 f6 01 01                  	movt	r1, #2049
 800d96e: dd e0                        	b	#442 <$t.54+0x42c>
 800d970: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d974: 18 22                        	movs	r2, #24
 800d976: cb 68                        	ldr	r3, [r1, #12]
 800d978: 4d f2 da 71                  	movw	r1, #55258
 800d97c: c0 f6 01 01                  	movt	r1, #2049
 800d980: d4 e0                        	b	#424 <$t.54+0x42c>
 800d982: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d986: 13 22                        	movs	r2, #19
 800d988: cb 68                        	ldr	r3, [r1, #12]
 800d98a: 4d f2 c7 71                  	movw	r1, #55239
 800d98e: c0 f6 01 01                  	movt	r1, #2049
 800d992: 98 47                        	blx	r3
 800d994: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800d998: 00 20                        	movs	r0, #0
 800d99a: 4c f6 74 22                  	movw	r2, #51828
 800d99e: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 800d9a2: 01 90                        	str	r0, [sp, #4]
;     LeReadWhiteListSize(Status<V::Status>, usize),
 800d9a4: 68 1c                        	adds	r0, r5, #1
 800d9a6: 03 a9                        	add	r1, sp, #12
 800d9a8: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800d9aa: c0 f6 01 02                  	movt	r2, #2049
 800d9ae: 68 46                        	mov	r0, sp
 800d9b0: 00 94                        	str	r4, [sp]
 800d9b2: 09 f0 3a f8                  	bl	#36980
;     LeReadWhiteListSize(Status<V::Status>, usize),
 800d9b6: 29 1d                        	adds	r1, r5, #4
; #[derive(Copy, Clone, Debug)]
 800d9b8: 4d f2 04 32                  	movw	r2, #54020
;     LeReadWhiteListSize(Status<V::Status>, usize),
 800d9bc: 03 91                        	str	r1, [sp, #12]
 800d9be: 03 a9                        	add	r1, sp, #12
; #[derive(Copy, Clone, Debug)]
 800d9c0: c0 f6 01 02                  	movt	r2, #2049
 800d9c4: c2 e0                        	b	#388 <$t.54+0x44c>
 800d9c6: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d9ca: 10 22                        	movs	r2, #16
 800d9cc: cb 68                        	ldr	r3, [r1, #12]
 800d9ce: 4c f6 2c 71                  	movw	r1, #53036
 800d9d2: c0 f6 01 01                  	movt	r1, #2049
 800d9d6: a9 e0                        	b	#338 <$t.54+0x42c>
 800d9d8: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d9dc: 16 22                        	movs	r2, #22
 800d9de: cb 68                        	ldr	r3, [r1, #12]
 800d9e0: 4d f2 b1 71                  	movw	r1, #55217
 800d9e4: c0 f6 01 01                  	movt	r1, #2049
 800d9e8: a0 e0                        	b	#320 <$t.54+0x42c>
 800d9ea: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800d9ee: 1b 22                        	movs	r2, #27
 800d9f0: cb 68                        	ldr	r3, [r1, #12]
 800d9f2: 4d f2 96 71                  	movw	r1, #55190
 800d9f6: c0 f6 01 01                  	movt	r1, #2049
 800d9fa: 97 e0                        	b	#302 <$t.54+0x42c>
 800d9fc: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800da00: 1e 22                        	movs	r2, #30
 800da02: cb 68                        	ldr	r3, [r1, #12]
 800da04: 4d f2 78 71                  	movw	r1, #55160
 800da08: c0 f6 01 01                  	movt	r1, #2049
 800da0c: 8e e0                        	b	#284 <$t.54+0x42c>
 800da0e: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800da12: 10 22                        	movs	r2, #16
 800da14: cb 68                        	ldr	r3, [r1, #12]
 800da16: 4c f6 1c 71                  	movw	r1, #53020
 800da1a: c0 f6 01 01                  	movt	r1, #2049
 800da1e: 98 47                        	blx	r3
 800da20: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800da24: 00 20                        	movs	r0, #0
 800da26: 4d f2 68 72                  	movw	r2, #55144
 800da2a: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 800da2e: 01 90                        	str	r0, [sp, #4]
;     LeReadChannelMap(ChannelMapParameters<V::Status>),
 800da30: a8 1c                        	adds	r0, r5, #2
 800da32: 03 a9                        	add	r1, sp, #12
 800da34: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800da36: c0 f6 01 02                  	movt	r2, #2049
 800da3a: 85 e0                        	b	#266 <$t.54+0x448>
 800da3c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800da40: 09 22                        	movs	r2, #9
 800da42: cb 68                        	ldr	r3, [r1, #12]
 800da44: 4d f2 4c 71                  	movw	r1, #55116
 800da48: c0 f6 01 01                  	movt	r1, #2049
 800da4c: 98 47                        	blx	r3
 800da4e: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800da52: 00 20                        	movs	r0, #0
 800da54: 4d f2 58 72                  	movw	r2, #55128
 800da58: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 800da5c: 01 90                        	str	r0, [sp, #4]
;     LeEncrypt(EncryptedReturnParameters<V::Status>),
 800da5e: 68 1c                        	adds	r0, r5, #1
 800da60: 03 a9                        	add	r1, sp, #12
 800da62: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800da64: c0 f6 01 02                  	movt	r2, #2049
 800da68: 6e e0                        	b	#220 <$t.54+0x448>
 800da6a: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800da6e: 06 22                        	movs	r2, #6
 800da70: cb 68                        	ldr	r3, [r1, #12]
 800da72: 4d f2 35 71                  	movw	r1, #55093
 800da76: c0 f6 01 01                  	movt	r1, #2049
 800da7a: 98 47                        	blx	r3
 800da7c: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800da80: 00 20                        	movs	r0, #0
 800da82: 4d f2 3c 72                  	movw	r2, #55100
 800da86: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 800da8a: 01 90                        	str	r0, [sp, #4]
;     LeRand(LeRandom<V::Status>),
 800da8c: 05 f1 08 00                  	add.w	r0, r5, #8
 800da90: 03 a9                        	add	r1, sp, #12
 800da92: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800da94: c0 f6 01 02                  	movt	r2, #2049
 800da98: 56 e0                        	b	#172 <$t.54+0x448>
 800da9a: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800da9e: 19 22                        	movs	r2, #25
 800daa0: cb 68                        	ldr	r3, [r1, #12]
 800daa2: 4d f2 1c 71                  	movw	r1, #55068
 800daa6: c0 f6 01 01                  	movt	r1, #2049
 800daaa: 07 e0                        	b	#14 <$t.54+0x3bc>
 800daac: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800dab0: 21 22                        	movs	r2, #33
 800dab2: cb 68                        	ldr	r3, [r1, #12]
 800dab4: 4d f2 e8 61                  	movw	r1, #55016
 800dab8: c0 f6 01 01                  	movt	r1, #2049
 800dabc: 98 47                        	blx	r3
 800dabe: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800dac2: 00 20                        	movs	r0, #0
 800dac4: 4d f2 0c 72                  	movw	r2, #55052
 800dac8: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 800dacc: 01 90                        	str	r0, [sp, #4]
 800dace: a8 1c                        	adds	r0, r5, #2
 800dad0: 03 a9                        	add	r1, sp, #12
 800dad2: 03 90                        	str	r0, [sp, #12]
 800dad4: c0 f6 01 02                  	movt	r2, #2049
 800dad8: 36 e0                        	b	#108 <$t.54+0x448>
 800dada: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800dade: 15 22                        	movs	r2, #21
 800dae0: cb 68                        	ldr	r3, [r1, #12]
 800dae2: 4d f2 c3 61                  	movw	r1, #54979
 800dae6: c0 f6 01 01                  	movt	r1, #2049
 800daea: 98 47                        	blx	r3
 800daec: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800daf0: 00 20                        	movs	r0, #0
 800daf2: 4d f2 d8 62                  	movw	r2, #55000
 800daf6: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 800dafa: 01 90                        	str	r0, [sp, #4]
;     LeReadSupportedStates(LeReadSupportedStates<V::Status>),
 800dafc: 05 f1 08 00                  	add.w	r0, r5, #8
 800db00: 03 a9                        	add	r1, sp, #12
 800db02: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800db04: c0 f6 01 02                  	movt	r2, #2049
 800db08: 1e e0                        	b	#60 <$t.54+0x448>
 800db0a: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800db0e: 0e 22                        	movs	r2, #14
 800db10: cb 68                        	ldr	r3, [r1, #12]
 800db12: 4d f2 b5 61                  	movw	r1, #54965
 800db16: c0 f6 01 01                  	movt	r1, #2049
 800db1a: 07 e0                        	b	#14 <$t.54+0x42c>
 800db1c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800db20: 11 22                        	movs	r2, #17
 800db22: cb 68                        	ldr	r3, [r1, #12]
 800db24: 4d f2 a4 61                  	movw	r1, #54948
 800db28: c0 f6 01 01                  	movt	r1, #2049
 800db2c: 98 47                        	blx	r3
 800db2e: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800db32: 00 20                        	movs	r0, #0
 800db34: 4c f6 74 22                  	movw	r2, #51828
 800db38: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 800db3c: 01 90                        	str	r0, [sp, #4]
 800db3e: 68 1c                        	adds	r0, r5, #1
 800db40: 03 a9                        	add	r1, sp, #12
 800db42: 03 90                        	str	r0, [sp, #12]
 800db44: c0 f6 01 02                  	movt	r2, #2049
 800db48: 68 46                        	mov	r0, sp
 800db4a: 00 94                        	str	r4, [sp]
 800db4c: 08 f0 6d ff                  	bl	#36570
 800db50: 01 98                        	ldr	r0, [sp, #4]
 800db52: 9d f8 08 40                  	ldrb.w	r4, [sp, #8]
 800db56: 18 b3                        	cbz	r0, #70
 800db58: 0c b1                        	cbz	r4, #2
 800db5a: 01 24                        	movs	r4, #1
 800db5c: 1e e0                        	b	#60 <$t.54+0x49c>
 800db5e: 01 28                        	cmp	r0, #1
 800db60: 11 d1                        	bne	#34 <$t.54+0x486>
 800db62: 9d f8 09 00                  	ldrb.w	r0, [sp, #9]
 800db66: 70 b1                        	cbz	r0, #28
 800db68: 00 99                        	ldr	r1, [sp]
 800db6a: 08 78                        	ldrb	r0, [r1]
 800db6c: 40 07                        	lsls	r0, r0, #29
 800db6e: 0a d4                        	bmi	#20 <$t.54+0x486>
 800db70: 88 69                        	ldr	r0, [r1, #24]
 800db72: 01 22                        	movs	r2, #1
 800db74: c9 69                        	ldr	r1, [r1, #28]
 800db76: 01 24                        	movs	r4, #1
 800db78: cb 68                        	ldr	r3, [r1, #12]
 800db7a: 4e f6 21 41                  	movw	r1, #60449
 800db7e: c0 f6 01 01                  	movt	r1, #2049
 800db82: 98 47                        	blx	r3
 800db84: 50 b9                        	cbnz	r0, #20
 800db86: 00 99                        	ldr	r1, [sp]
 800db88: 01 22                        	movs	r2, #1
 800db8a: 88 69                        	ldr	r0, [r1, #24]
 800db8c: c9 69                        	ldr	r1, [r1, #28]
 800db8e: cb 68                        	ldr	r3, [r1, #12]
 800db90: 4f f2 69 61                  	movw	r1, #63081
 800db94: c0 f6 01 01                  	movt	r1, #2049
 800db98: 98 47                        	blx	r3
 800db9a: 04 46                        	mov	r4, r0
 800db9c: 8d f8 08 40                  	strb.w	r4, [sp, #8]
 800dba0: 00 2c                        	cmp	r4, #0
 800dba2: 18 bf                        	it	ne
 800dba4: 01 24                        	movne	r4, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800dba6: 20 46                        	mov	r0, r4
 800dba8: 04 b0                        	add	sp, #16
 800dbaa: b0 bd                        	pop	{r4, r5, r7, pc}
 800dbac: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800dbb0: 09 22                        	movs	r2, #9
 800dbb2: cb 68                        	ldr	r3, [r1, #12]
 800dbb4: 4d f2 74 51                  	movw	r1, #54644
 800dbb8: c0 f6 01 01                  	movt	r1, #2049
 800dbbc: 98 47                        	blx	r3
 800dbbe: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800dbc2: 00 20                        	movs	r0, #0
; #[derive(Copy, Clone, Debug)]
 800dbc4: 4d f2 94 62                  	movw	r2, #54932
 800dbc8: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 800dbcc: 01 90                        	str	r0, [sp, #4]
;     LeTestEnd(LeTestEnd<V::Status>),
 800dbce: 28 1d                        	adds	r0, r5, #4
 800dbd0: 03 a9                        	add	r1, sp, #12
 800dbd2: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800dbd4: c0 f6 01 02                  	movt	r2, #2049
 800dbd8: b6 e7                        	b	#-148 <$t.54+0x448>
 800dbda: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800dbde: 06 22                        	movs	r2, #6
 800dbe0: cb 68                        	ldr	r3, [r1, #12]
 800dbe2: 4e f6 fc 41                  	movw	r1, #60668
 800dbe6: c0 f6 01 01                  	movt	r1, #2049
 800dbea: 98 47                        	blx	r3
 800dbec: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800dbf0: 00 20                        	movs	r0, #0
 800dbf2: 4d f2 84 62                  	movw	r2, #54916
 800dbf6: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 800dbfa: 01 90                        	str	r0, [sp, #4]
;     Vendor(V::ReturnParameters),
 800dbfc: 05 f1 08 00                  	add.w	r0, r5, #8
 800dc00: 03 a9                        	add	r1, sp, #12
 800dc02: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800dc04: c0 f6 01 02                  	movt	r2, #2049
 800dc08: 9e e7                        	b	#-196 <$t.54+0x448>

0800dc0a _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h2b83059fbbbd1b20:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800dc0a: b0 b5                        	push	{r4, r5, r7, lr}
 800dc0c: 02 af                        	add	r7, sp, #8
 800dc0e: 84 b0                        	sub	sp, #16
 800dc10: 0c 46                        	mov	r4, r1
 800dc12: 05 68                        	ldr	r5, [r0]
 800dc14: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 800dc18: 06 22                        	movs	r2, #6
 800dc1a: cb 68                        	ldr	r3, [r1, #12]
 800dc1c: 4d f6 ea 41                  	movw	r1, #56554
 800dc20: c0 f6 01 01                  	movt	r1, #2049
 800dc24: 98 47                        	blx	r3
; #[derive(Copy, Clone, Debug, PartialEq)]
 800dc26: 4d f6 f0 42                  	movw	r2, #56560
 800dc2a: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800dc2e: 00 20                        	movs	r0, #0
 800dc30: 03 a9                        	add	r1, sp, #12
 800dc32: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 800dc36: c0 f6 01 02                  	movt	r2, #2049
 800dc3a: 01 90                        	str	r0, [sp, #4]
 800dc3c: 68 46                        	mov	r0, sp
 800dc3e: 00 94                        	str	r4, [sp]
; pub struct BdAddr(pub [u8; 6]);
 800dc40: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug, PartialEq)]
 800dc42: 08 f0 f2 fe                  	bl	#36324
 800dc46: 01 98                        	ldr	r0, [sp, #4]
 800dc48: 9d f8 08 40                  	ldrb.w	r4, [sp, #8]
 800dc4c: 18 b3                        	cbz	r0, #70
 800dc4e: 0c b1                        	cbz	r4, #2
 800dc50: 01 24                        	movs	r4, #1
 800dc52: 1e e0                        	b	#60 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2b83059fbbbd1b20E+0x8c>
 800dc54: 01 28                        	cmp	r0, #1
 800dc56: 11 d1                        	bne	#34 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2b83059fbbbd1b20E+0x76>
 800dc58: 9d f8 09 00                  	ldrb.w	r0, [sp, #9]
 800dc5c: 70 b1                        	cbz	r0, #28
 800dc5e: 00 99                        	ldr	r1, [sp]
 800dc60: 08 78                        	ldrb	r0, [r1]
 800dc62: 40 07                        	lsls	r0, r0, #29
 800dc64: 0a d4                        	bmi	#20 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2b83059fbbbd1b20E+0x76>
 800dc66: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 800dc6a: 01 22                        	movs	r2, #1
 800dc6c: cb 68                        	ldr	r3, [r1, #12]
 800dc6e: 4e f6 21 41                  	movw	r1, #60449
 800dc72: c0 f6 01 01                  	movt	r1, #2049
 800dc76: 01 24                        	movs	r4, #1
 800dc78: 98 47                        	blx	r3
 800dc7a: 50 b9                        	cbnz	r0, #20
 800dc7c: 00 99                        	ldr	r1, [sp]
 800dc7e: 01 22                        	movs	r2, #1
 800dc80: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 800dc84: cb 68                        	ldr	r3, [r1, #12]
 800dc86: 4f f2 69 61                  	movw	r1, #63081
 800dc8a: c0 f6 01 01                  	movt	r1, #2049
 800dc8e: 98 47                        	blx	r3
 800dc90: 04 46                        	mov	r4, r0
 800dc92: 8d f8 08 40                  	strb.w	r4, [sp, #8]
 800dc96: 00 2c                        	cmp	r4, #0
 800dc98: 18 bf                        	it	ne
 800dc9a: 01 24                        	movne	r4, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800dc9c: 20 46                        	mov	r0, r4
 800dc9e: 04 b0                        	add	sp, #16
 800dca0: b0 bd                        	pop	{r4, r5, r7, pc}

0800dca2 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h2e0de58a4b7b5b13:
 800dca2: b0 b5                        	push	{r4, r5, r7, lr}
 800dca4: 02 af                        	add	r7, sp, #8
 800dca6: 84 b0                        	sub	sp, #16
 800dca8: 0c 46                        	mov	r4, r1
 800dcaa: 05 68                        	ldr	r5, [r0]
 800dcac: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 800dcb0: 16 22                        	movs	r2, #22
 800dcb2: cb 68                        	ldr	r3, [r1, #12]
 800dcb4: 4c f6 cc 21                  	movw	r1, #51916
 800dcb8: c0 f6 01 01                  	movt	r1, #2049
 800dcbc: 98 47                        	blx	r3
 800dcbe: 8d f8 08 00                  	strb.w	r0, [sp, #8]
;     pub status: Status<VS>,
 800dcc2: 05 f1 08 00                  	add.w	r0, r5, #8
 800dcc6: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800dcc8: 4c f6 74 20                  	movw	r0, #51828
 800dccc: 00 21                        	movs	r1, #0
 800dcce: c0 f6 01 00                  	movt	r0, #2049
 800dcd2: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 800dcd6: 4f f6 60 31                  	movw	r1, #64352
 800dcda: 00 90                        	str	r0, [sp]
 800dcdc: 01 a8                        	add	r0, sp, #4
 800dcde: 03 ab                        	add	r3, sp, #12
 800dce0: c0 f6 01 01                  	movt	r1, #2049
 800dce4: 06 22                        	movs	r2, #6
 800dce6: 01 94                        	str	r4, [sp, #4]
 800dce8: 08 f0 22 fd                  	bl	#35396
 800dcec: 4c f6 f4 21                  	movw	r1, #51956
 800dcf0: 03 ab                        	add	r3, sp, #12
 800dcf2: c0 f6 01 01                  	movt	r1, #2049
 800dcf6: 12 22                        	movs	r2, #18
 800dcf8: 00 91                        	str	r1, [sp]
 800dcfa: 4c f6 e2 21                  	movw	r1, #51938
 800dcfe: c0 f6 01 01                  	movt	r1, #2049
;     pub supported_features: LmpFeatures,
 800dd02: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800dd04: 08 f0 14 fd                  	bl	#35368
 800dd08: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 800dd0c: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 800dd10: b9 b1                        	cbz	r1, #46
 800dd12: 08 b1                        	cbz	r0, #2
 800dd14: 01 20                        	movs	r0, #1
 800dd16: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e0de58a4b7b5b13E+0xa0>
 800dd18: 01 99                        	ldr	r1, [sp, #4]
 800dd1a: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 800dd1e: 09 78                        	ldrb	r1, [r1]
 800dd20: d3 68                        	ldr	r3, [r2, #12]
 800dd22: 49 07                        	lsls	r1, r1, #29
 800dd24: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e0de58a4b7b5b13E+0x94>
 800dd26: 4e f6 1c 41                  	movw	r1, #60444
 800dd2a: 02 22                        	movs	r2, #2
 800dd2c: c0 f6 01 01                  	movt	r1, #2049
 800dd30: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e0de58a4b7b5b13E+0x9e>
 800dd32: 4e f6 d6 41                  	movw	r1, #60630
 800dd36: 01 22                        	movs	r2, #1
 800dd38: c0 f6 01 01                  	movt	r1, #2049
 800dd3c: 98 47                        	blx	r3
 800dd3e: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800dd42: 00 28                        	cmp	r0, #0
 800dd44: 18 bf                        	it	ne
 800dd46: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800dd48: 04 b0                        	add	sp, #16
 800dd4a: b0 bd                        	pop	{r4, r5, r7, pc}

0800dd4c _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h32efb9422baaf90d:
 800dd4c: b0 b5                        	push	{r4, r5, r7, lr}
 800dd4e: 02 af                        	add	r7, sp, #8
 800dd50: 84 b0                        	sub	sp, #16
 800dd52: 0c 46                        	mov	r4, r1
 800dd54: 05 68                        	ldr	r5, [r0]
 800dd56: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 800dd5a: 16 22                        	movs	r2, #22
 800dd5c: cb 68                        	ldr	r3, [r1, #12]
 800dd5e: 4c f6 5c 21                  	movw	r1, #51804
 800dd62: c0 f6 01 01                  	movt	r1, #2049
 800dd66: 98 47                        	blx	r3
 800dd68: 8d f8 08 00                  	strb.w	r0, [sp, #8]
;     pub status: Status<VS>,
 800dd6c: a8 1c                        	adds	r0, r5, #2
 800dd6e: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800dd70: 4c f6 74 20                  	movw	r0, #51828
 800dd74: 00 21                        	movs	r1, #0
 800dd76: c0 f6 01 00                  	movt	r0, #2049
 800dd7a: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 800dd7e: 4f f6 60 31                  	movw	r1, #64352
 800dd82: 00 90                        	str	r0, [sp]
 800dd84: 01 a8                        	add	r0, sp, #4
 800dd86: 03 ab                        	add	r3, sp, #12
 800dd88: c0 f6 01 01                  	movt	r1, #2049
 800dd8c: 06 22                        	movs	r2, #6
 800dd8e: 01 94                        	str	r4, [sp, #4]
 800dd90: 08 f0 ce fc                  	bl	#35228
 800dd94: 4c f6 84 21                  	movw	r1, #51844
 800dd98: 03 ab                        	add	r3, sp, #12
 800dd9a: c0 f6 01 01                  	movt	r1, #2049
 800dd9e: 0b 22                        	movs	r2, #11
 800dda0: 00 91                        	str	r1, [sp]
 800dda2: 4f f6 0c 51                  	movw	r1, #64780
 800dda6: c0 f6 01 01                  	movt	r1, #2049
;     pub conn_handle: ConnectionHandle,
 800ddaa: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800ddac: 08 f0 c0 fc                  	bl	#35200
 800ddb0: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 800ddb4: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 800ddb8: b9 b1                        	cbz	r1, #46
 800ddba: 08 b1                        	cbz	r0, #2
 800ddbc: 01 20                        	movs	r0, #1
 800ddbe: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h32efb9422baaf90dE+0x9e>
 800ddc0: 01 99                        	ldr	r1, [sp, #4]
 800ddc2: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 800ddc6: 09 78                        	ldrb	r1, [r1]
 800ddc8: d3 68                        	ldr	r3, [r2, #12]
 800ddca: 49 07                        	lsls	r1, r1, #29
 800ddcc: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h32efb9422baaf90dE+0x92>
 800ddce: 4e f6 1c 41                  	movw	r1, #60444
 800ddd2: 02 22                        	movs	r2, #2
 800ddd4: c0 f6 01 01                  	movt	r1, #2049
 800ddd8: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h32efb9422baaf90dE+0x9c>
 800ddda: 4e f6 d6 41                  	movw	r1, #60630
 800ddde: 01 22                        	movs	r2, #1
 800dde0: c0 f6 01 01                  	movt	r1, #2049
 800dde4: 98 47                        	blx	r3
 800dde6: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800ddea: 00 28                        	cmp	r0, #0
 800ddec: 18 bf                        	it	ne
 800ddee: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800ddf0: 04 b0                        	add	sp, #16
 800ddf2: b0 bd                        	pop	{r4, r5, r7, pc}

0800ddf4 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h3441987116732d04:
 800ddf4: 02 46                        	mov	r2, r0
 800ddf6: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 800ddfa: 12 68                        	ldr	r2, [r2]
 800ddfc: cb 68                        	ldr	r3, [r1, #12]
; #[derive(Copy, Clone, Debug, PartialEq)]
 800ddfe: 11 78                        	ldrb	r1, [r2]
 800de00: 01 29                        	cmp	r1, #1
 800de02: 05 d1                        	bne	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3441987116732d04E+0x20>
 800de04: 4e f6 f0 01                  	movw	r1, #59632
 800de08: 0a 22                        	movs	r2, #10
 800de0a: c0 f6 01 01                  	movt	r1, #2049
 800de0e: 18 47                        	bx	r3
 800de10: 4e f6 fa 01                  	movw	r1, #59642
 800de14: 07 22                        	movs	r2, #7
 800de16: c0 f6 01 01                  	movt	r1, #2049
 800de1a: 18 47                        	bx	r3

0800de1c _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h3571888c363b3fdd:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800de1c: f0 b5                        	push	{r4, r5, r6, r7, lr}
 800de1e: 03 af                        	add	r7, sp, #12
 800de20: 4d f8 04 bd                  	str	r11, [sp, #-4]!
 800de24: a2 b0                        	sub	sp, #136
 800de26: 00 68                        	ldr	r0, [r0]
 800de28: 0c 46                        	mov	r4, r1
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800de2a: d0 e9 00 65                  	ldrd	r6, r5, [r0]
 800de2e: f0 07                        	lsls	r0, r6, #31
 800de30: 48 d1                        	bne	#144 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3571888c363b3fddE+0xac>
 800de32: 01 20                        	movs	r0, #1
 800de34: b1 07                        	lsls	r1, r6, #30
 800de36: 53 d4                        	bmi	#166 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3571888c363b3fddE+0xc8>
 800de38: 71 07                        	lsls	r1, r6, #29
 800de3a: 6b d4                        	bmi	#214 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3571888c363b3fddE+0xfc>
 800de3c: 31 07                        	lsls	r1, r6, #28
 800de3e: 00 f1 84 80                  	bmi.w	#264 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3571888c363b3fddE+0x132>
 800de42: f1 06                        	lsls	r1, r6, #27
 800de44: 00 f1 9a 80                  	bmi.w	#308 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3571888c363b3fddE+0x164>
;                 let extra_bits = self.bits & !$BitFlags::all().bits();
 800de48: 26 f0 1f 06                  	bic	r6, r6, #31
;                 if extra_bits != 0 {
 800de4c: 56 ea 05 01                  	orrs.w	r1, r6, r5
 800de50: 00 f0 b0 80                  	beq.w	#352 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3571888c363b3fddE+0x19c>
;                     if !first {
 800de54: 58 b9                        	cbnz	r0, #22
 800de56: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800de5a: 03 22                        	movs	r2, #3
 800de5c: cb 68                        	ldr	r3, [r1, #12]
 800de5e: 4d f6 97 71                  	movw	r1, #57239
 800de62: c0 f6 01 01                  	movt	r1, #2049
 800de66: 98 47                        	blx	r3
;                         f.write_str(" | ")?;
 800de68: 00 28                        	cmp	r0, #0
 800de6a: 40 f0 ae 80                  	bne.w	#348 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3571888c363b3fddE+0x1b2>
 800de6e: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800de72: 02 22                        	movs	r2, #2
 800de74: cb 68                        	ldr	r3, [r1, #12]
 800de76: 4e f6 b5 31                  	movw	r1, #60341
 800de7a: c0 f6 01 01                  	movt	r1, #2049
 800de7e: 98 47                        	blx	r3
;                     f.write_str("0x")?;
 800de80: 00 28                        	cmp	r0, #0
 800de82: 40 f0 a2 80                  	bne.w	#324 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3571888c363b3fddE+0x1b2>
 800de86: 02 a9                        	add	r1, sp, #8
 800de88: 7f 20                        	movs	r0, #127
 800de8a: 42 1c                        	adds	r2, r0, #1
 800de8c: 00 f0 a9 80                  	beq.w	#338 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3571888c363b3fddE+0x1ca>
 800de90: 06 f0 0f 02                  	and	r2, r6, #15
 800de94: 02 f1 57 03                  	add.w	r3, r2, #87
 800de98: 0a 2a                        	cmp	r2, #10
 800de9a: 38 bf                        	it	lo
 800de9c: 02 f1 30 03                  	addlo.w	r3, r2, #48
 800dea0: 32 09                        	lsrs	r2, r6, #4
 800dea2: 42 ea 05 76                  	orr.w	r6, r2, r5, lsl #28
 800dea6: 0b 54                        	strb	r3, [r1, r0]
 800dea8: 46 ea 15 12                  	orr.w	r2, r6, r5, lsr #4
 800deac: 01 38                        	subs	r0, #1
 800deae: 2d 09                        	lsrs	r5, r5, #4
 800deb0: 00 2a                        	cmp	r2, #0
 800deb2: ea d1                        	bne	#-44 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3571888c363b3fddE+0x72>
 800deb4: 01 30                        	adds	r0, #1
 800deb6: 81 28                        	cmp	r0, #129
 800deb8: c0 f0 94 80                  	blo.w	#296 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3571888c363b3fddE+0x1cc>
 800debc: 80 21                        	movs	r1, #128
 800debe: 07 f0 aa ff                  	bl	#32596
 800dec2: fe de                        	trap
 800dec4: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800dec8: 0d 22                        	movs	r2, #13
 800deca: cb 68                        	ldr	r3, [r1, #12]
 800decc: 4e f6 9e 21                  	movw	r1, #60062
 800ded0: c0 f6 01 01                  	movt	r1, #2049
 800ded4: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800ded6: 00 28                        	cmp	r0, #0
 800ded8: 77 d1                        	bne	#238 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3571888c363b3fddE+0x1b2>
 800deda: 00 20                        	movs	r0, #0
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800dedc: b1 07                        	lsls	r1, r6, #30
 800dede: ab d5                        	bpl	#-170 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3571888c363b3fddE+0x20>
;                         if !first {
 800dee0: 50 b9                        	cbnz	r0, #20
 800dee2: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800dee6: 03 22                        	movs	r2, #3
 800dee8: cb 68                        	ldr	r3, [r1, #12]
 800deea: 4d f6 97 71                  	movw	r1, #57239
 800deee: c0 f6 01 01                  	movt	r1, #2049
 800def2: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800def4: 00 28                        	cmp	r0, #0
 800def6: 68 d1                        	bne	#208 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3571888c363b3fddE+0x1b2>
 800def8: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800defc: 27 22                        	movs	r2, #39
 800defe: cb 68                        	ldr	r3, [r1, #12]
 800df00: 4e f2 6d 41                  	movw	r1, #58477
 800df04: c0 f6 01 01                  	movt	r1, #2049
 800df08: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800df0a: 00 28                        	cmp	r0, #0
 800df0c: 5d d1                        	bne	#186 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3571888c363b3fddE+0x1b2>
 800df0e: 00 20                        	movs	r0, #0
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800df10: 71 07                        	lsls	r1, r6, #29
 800df12: 93 d5                        	bpl	#-218 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3571888c363b3fddE+0x24>
;                         if !first {
 800df14: 50 b9                        	cbnz	r0, #20
 800df16: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800df1a: 03 22                        	movs	r2, #3
 800df1c: cb 68                        	ldr	r3, [r1, #12]
 800df1e: 4d f6 97 71                  	movw	r1, #57239
 800df22: c0 f6 01 01                  	movt	r1, #2049
 800df26: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800df28: 00 28                        	cmp	r0, #0
 800df2a: 4e d1                        	bne	#156 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3571888c363b3fddE+0x1b2>
 800df2c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800df30: 1a 22                        	movs	r2, #26
 800df32: cb 68                        	ldr	r3, [r1, #12]
 800df34: 4e f2 94 41                  	movw	r1, #58516
 800df38: c0 f6 01 01                  	movt	r1, #2049
 800df3c: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800df3e: 00 28                        	cmp	r0, #0
 800df40: 43 d1                        	bne	#134 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3571888c363b3fddE+0x1b2>
 800df42: 00 20                        	movs	r0, #0
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800df44: 31 07                        	lsls	r1, r6, #28
 800df46: 7f f5 7c af                  	bpl.w	#-264 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3571888c363b3fddE+0x2a>
;                         if !first {
 800df4a: 48 b9                        	cbnz	r0, #18
 800df4c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800df50: 03 22                        	movs	r2, #3
 800df52: cb 68                        	ldr	r3, [r1, #12]
 800df54: 4d f6 97 71                  	movw	r1, #57239
 800df58: c0 f6 01 01                  	movt	r1, #2049
 800df5c: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800df5e: a0 bb                        	cbnz	r0, #104
 800df60: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800df64: 26 22                        	movs	r2, #38
 800df66: cb 68                        	ldr	r3, [r1, #12]
 800df68: 4e f6 ab 21                  	movw	r1, #60075
 800df6c: c0 f6 01 01                  	movt	r1, #2049
 800df70: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800df72: 50 bb                        	cbnz	r0, #84
 800df74: 00 20                        	movs	r0, #0
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800df76: f1 06                        	lsls	r1, r6, #27
 800df78: 7f f5 66 af                  	bpl.w	#-308 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3571888c363b3fddE+0x30>
;                         if !first {
 800df7c: 48 b9                        	cbnz	r0, #18
 800df7e: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800df82: 03 22                        	movs	r2, #3
 800df84: cb 68                        	ldr	r3, [r1, #12]
 800df86: 4d f6 97 71                  	movw	r1, #57239
 800df8a: c0 f6 01 01                  	movt	r1, #2049
 800df8e: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800df90: d8 b9                        	cbnz	r0, #54
 800df92: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800df96: 07 22                        	movs	r2, #7
 800df98: cb 68                        	ldr	r3, [r1, #12]
 800df9a: 4e f6 d1 21                  	movw	r1, #60113
 800df9e: c0 f6 01 01                  	movt	r1, #2049
 800dfa2: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800dfa4: 88 b9                        	cbnz	r0, #34
 800dfa6: 00 20                        	movs	r0, #0
;                 let extra_bits = self.bits & !$BitFlags::all().bits();
 800dfa8: 26 f0 1f 06                  	bic	r6, r6, #31
;                 if extra_bits != 0 {
 800dfac: 56 ea 05 01                  	orrs.w	r1, r6, r5
 800dfb0: 7f f4 50 af                  	bne.w	#-352 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3571888c363b3fddE+0x3c>
;                 if first {
 800dfb4: 78 b1                        	cbz	r0, #30
 800dfb6: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800dfba: 07 22                        	movs	r2, #7
 800dfbc: cb 68                        	ldr	r3, [r1, #12]
 800dfbe: 4e f2 66 41                  	movw	r1, #58470
 800dfc2: c0 f6 01 01                  	movt	r1, #2049
 800dfc6: 98 47                        	blx	r3
;                     f.write_str("(empty)")?;
 800dfc8: 28 b1                        	cbz	r0, #10
 800dfca: 01 25                        	movs	r5, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800dfcc: 28 46                        	mov	r0, r5
 800dfce: 22 b0                        	add	sp, #136
 800dfd0: 5d f8 04 bb                  	ldr	r11, [sp], #4
 800dfd4: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 800dfd6: 00 25                        	movs	r5, #0
 800dfd8: 28 46                        	mov	r0, r5
 800dfda: 22 b0                        	add	sp, #136
 800dfdc: 5d f8 04 bb                  	ldr	r11, [sp], #4
 800dfe0: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 800dfe2: 00 20                        	movs	r0, #0
 800dfe4: c0 f1 80 02                  	rsb.w	r2, r0, #128
 800dfe8: 08 44                        	add	r0, r1
 800dfea: 01 21                        	movs	r1, #1
 800dfec: 02 23                        	movs	r3, #2
 800dfee: cd e9 00 02                  	strd	r0, r2, [sp]
 800dff2: 4e f6 b5 32                  	movw	r2, #60341
 800dff6: c0 f6 01 02                  	movt	r2, #2049
 800dffa: 20 46                        	mov	r0, r4
 800dffc: 01 25                        	movs	r5, #1
 800dffe: 07 f0 9d fd                  	bl	#31546
;                     $crate::_core::fmt::LowerHex::fmt(&extra_bits, f)?;
 800e002: 00 28                        	cmp	r0, #0
 800e004: 08 bf                        	it	eq
 800e006: 00 25                        	moveq	r5, #0
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800e008: 28 46                        	mov	r0, r5
 800e00a: 22 b0                        	add	sp, #136
 800e00c: 5d f8 04 bb                  	ldr	r11, [sp], #4
 800e010: f0 bd                        	pop	{r4, r5, r6, r7, pc}

0800e012 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h3d946aa770f9177a:
 800e012: b0 b5                        	push	{r4, r5, r7, lr}
 800e014: 02 af                        	add	r7, sp, #8
 800e016: 84 b0                        	sub	sp, #16
 800e018: 0c 46                        	mov	r4, r1
 800e01a: 05 68                        	ldr	r5, [r0]
 800e01c: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 800e020: 10 22                        	movs	r2, #16
 800e022: cb 68                        	ldr	r3, [r1, #12]
 800e024: 4c f6 fc 71                  	movw	r1, #53244
 800e028: c0 f6 01 01                  	movt	r1, #2049
 800e02c: 98 47                        	blx	r3
; #[derive(Clone, Copy, Debug, PartialEq)]
 800e02e: 4d f6 48 42                  	movw	r2, #56392
 800e032: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800e036: 00 20                        	movs	r0, #0
 800e038: 03 a9                        	add	r1, sp, #12
 800e03a: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 800e03e: c0 f6 01 02                  	movt	r2, #2049
 800e042: 01 90                        	str	r0, [sp, #4]
 800e044: 68 46                        	mov	r0, sp
 800e046: 00 94                        	str	r4, [sp]
; pub struct ConnectionHandle(pub u16);
 800e048: 03 95                        	str	r5, [sp, #12]
; #[derive(Clone, Copy, Debug, PartialEq)]
 800e04a: 08 f0 ee fc                  	bl	#35292
 800e04e: 01 98                        	ldr	r0, [sp, #4]
 800e050: 9d f8 08 40                  	ldrb.w	r4, [sp, #8]
 800e054: 18 b3                        	cbz	r0, #70
 800e056: 0c b1                        	cbz	r4, #2
 800e058: 01 24                        	movs	r4, #1
 800e05a: 1e e0                        	b	#60 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3d946aa770f9177aE+0x8c>
 800e05c: 01 28                        	cmp	r0, #1
 800e05e: 11 d1                        	bne	#34 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3d946aa770f9177aE+0x76>
 800e060: 9d f8 09 00                  	ldrb.w	r0, [sp, #9]
 800e064: 70 b1                        	cbz	r0, #28
 800e066: 00 99                        	ldr	r1, [sp]
 800e068: 08 78                        	ldrb	r0, [r1]
 800e06a: 40 07                        	lsls	r0, r0, #29
 800e06c: 0a d4                        	bmi	#20 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3d946aa770f9177aE+0x76>
 800e06e: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 800e072: 01 22                        	movs	r2, #1
 800e074: cb 68                        	ldr	r3, [r1, #12]
 800e076: 4e f6 21 41                  	movw	r1, #60449
 800e07a: c0 f6 01 01                  	movt	r1, #2049
 800e07e: 01 24                        	movs	r4, #1
 800e080: 98 47                        	blx	r3
 800e082: 50 b9                        	cbnz	r0, #20
 800e084: 00 99                        	ldr	r1, [sp]
 800e086: 01 22                        	movs	r2, #1
 800e088: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 800e08c: cb 68                        	ldr	r3, [r1, #12]
 800e08e: 4f f2 69 61                  	movw	r1, #63081
 800e092: c0 f6 01 01                  	movt	r1, #2049
 800e096: 98 47                        	blx	r3
 800e098: 04 46                        	mov	r4, r0
 800e09a: 8d f8 08 40                  	strb.w	r4, [sp, #8]
 800e09e: 00 2c                        	cmp	r4, #0
 800e0a0: 18 bf                        	it	ne
 800e0a2: 01 24                        	movne	r4, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800e0a4: 20 46                        	mov	r0, r4
 800e0a6: 04 b0                        	add	sp, #16
 800e0a8: b0 bd                        	pop	{r4, r5, r7, pc}
 800e0aa: 00 00                        	movs	r0, r0

0800e0ac _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h3f90d6eb6f96565c:
 800e0ac: 00 68                        	ldr	r0, [r0]
; #[derive(Copy, Clone, Debug, PartialEq)]
 800e0ae: 00 78                        	ldrb	r0, [r0]
 800e0b0: df e8 00 f0                  	tbb	[pc, r0]

0800e0b4 $d.62:
 800e0b4:	02 1d 0b 14	.word	0x140b1d02

0800e0b8 $t.63:
 800e0b8: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 800e0bc: 4e f6 7c 11                  	movw	r1, #59772
 800e0c0: d3 68                        	ldr	r3, [r2, #12]
 800e0c2: c0 f6 01 01                  	movt	r1, #2049
 800e0c6: 16 22                        	movs	r2, #22
 800e0c8: 18 47                        	bx	r3
 800e0ca: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 800e0ce: 4e f6 ae 11                  	movw	r1, #59822
 800e0d2: c0 f6 01 01                  	movt	r1, #2049
 800e0d6: d3 68                        	ldr	r3, [r2, #12]
 800e0d8: 1c 22                        	movs	r2, #28
 800e0da: 18 47                        	bx	r3
 800e0dc: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 800e0e0: 4e f6 62 11                  	movw	r1, #59746
 800e0e4: d3 68                        	ldr	r3, [r2, #12]
 800e0e6: c0 f6 01 01                  	movt	r1, #2049
 800e0ea: 1a 22                        	movs	r2, #26
 800e0ec: 18 47                        	bx	r3
 800e0ee: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 800e0f2: 4e f6 92 11                  	movw	r1, #59794
 800e0f6: c0 f6 01 01                  	movt	r1, #2049
 800e0fa: d3 68                        	ldr	r3, [r2, #12]
 800e0fc: 1c 22                        	movs	r2, #28
 800e0fe: 18 47                        	bx	r3

0800e100 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h45d6dc5a617ac7cd:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800e100: b0 b5                        	push	{r4, r5, r7, lr}
 800e102: 02 af                        	add	r7, sp, #8
 800e104: 84 b0                        	sub	sp, #16
 800e106: 0c 46                        	mov	r4, r1
 800e108: 05 68                        	ldr	r5, [r0]
 800e10a: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 800e10e: 13 22                        	movs	r2, #19
 800e110: cb 68                        	ldr	r3, [r1, #12]
 800e112: 4d f6 2c 21                  	movw	r1, #55852
 800e116: c0 f6 01 01                  	movt	r1, #2049
 800e11a: 98 47                        	blx	r3
 800e11c: 8d f8 08 00                  	strb.w	r0, [sp, #8]
;     pub status: Status<VS>,
 800e120: 05 f1 08 00                  	add.w	r0, r5, #8
 800e124: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800e126: 4c f6 74 20                  	movw	r0, #51828
 800e12a: 00 21                        	movs	r1, #0
 800e12c: c0 f6 01 00                  	movt	r0, #2049
 800e130: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 800e134: 4f f6 60 31                  	movw	r1, #64352
 800e138: 00 90                        	str	r0, [sp]
 800e13a: 01 a8                        	add	r0, sp, #4
 800e13c: 03 ab                        	add	r3, sp, #12
 800e13e: c0 f6 01 01                  	movt	r1, #2049
 800e142: 06 22                        	movs	r2, #6
 800e144: 01 94                        	str	r4, [sp, #4]
 800e146: 08 f0 f3 fa                  	bl	#34278
 800e14a: 4d f6 40 21                  	movw	r1, #55872
 800e14e: 03 ab                        	add	r3, sp, #12
 800e150: c0 f6 01 01                  	movt	r1, #2049
 800e154: 12 22                        	movs	r2, #18
 800e156: 00 91                        	str	r1, [sp]
 800e158: 4c f6 e2 21                  	movw	r1, #51938
 800e15c: c0 f6 01 01                  	movt	r1, #2049
;     pub supported_features: LeFeatures,
 800e160: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800e162: 08 f0 e5 fa                  	bl	#34250
 800e166: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 800e16a: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 800e16e: b9 b1                        	cbz	r1, #46
 800e170: 08 b1                        	cbz	r0, #2
 800e172: 01 20                        	movs	r0, #1
 800e174: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h45d6dc5a617ac7cdE+0xa0>
 800e176: 01 99                        	ldr	r1, [sp, #4]
 800e178: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 800e17c: 09 78                        	ldrb	r1, [r1]
 800e17e: d3 68                        	ldr	r3, [r2, #12]
 800e180: 49 07                        	lsls	r1, r1, #29
 800e182: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h45d6dc5a617ac7cdE+0x94>
 800e184: 4e f6 1c 41                  	movw	r1, #60444
 800e188: 02 22                        	movs	r2, #2
 800e18a: c0 f6 01 01                  	movt	r1, #2049
 800e18e: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h45d6dc5a617ac7cdE+0x9e>
 800e190: 4e f6 d6 41                  	movw	r1, #60630
 800e194: 01 22                        	movs	r2, #1
 800e196: c0 f6 01 01                  	movt	r1, #2049
 800e19a: 98 47                        	blx	r3
 800e19c: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800e1a0: 00 28                        	cmp	r0, #0
 800e1a2: 18 bf                        	it	ne
 800e1a4: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800e1a6: 04 b0                        	add	sp, #16
 800e1a8: b0 bd                        	pop	{r4, r5, r7, pc}

0800e1aa _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h4a452a5819e9379b:
 800e1aa: b0 b5                        	push	{r4, r5, r7, lr}
 800e1ac: 02 af                        	add	r7, sp, #8
 800e1ae: 84 b0                        	sub	sp, #16
 800e1b0: 0c 46                        	mov	r4, r1
 800e1b2: 05 68                        	ldr	r5, [r0]
 800e1b4: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 800e1b8: 17 22                        	movs	r2, #23
 800e1ba: cb 68                        	ldr	r3, [r1, #12]
 800e1bc: 4e f6 87 21                  	movw	r1, #60039
 800e1c0: c0 f6 01 01                  	movt	r1, #2049
 800e1c4: 98 47                        	blx	r3
 800e1c6: 00 21                        	movs	r1, #0
 800e1c8: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800e1cc: 8d f8 09 10                  	strb.w	r1, [sp, #9]
; #[derive(Copy, Clone, Debug)]
 800e1d0: 4e f6 5d 21                  	movw	r1, #59997
 800e1d4: 01 94                        	str	r4, [sp, #4]
 800e1d6: 4d f6 f0 64                  	movw	r4, #57072
 800e1da: 01 a8                        	add	r0, sp, #4
 800e1dc: 03 ab                        	add	r3, sp, #12
 800e1de: c0 f6 01 04                  	movt	r4, #2049
 800e1e2: c0 f6 01 01                  	movt	r1, #2049
 800e1e6: 09 22                        	movs	r2, #9
;     interval_: Duration,
 800e1e8: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800e1ea: 00 94                        	str	r4, [sp]
 800e1ec: 08 f0 a0 fa                  	bl	#34112
;     conn_latency_: u16,
 800e1f0: 05 f1 20 01                  	add.w	r1, r5, #32
 800e1f4: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800e1f6: 4d f6 48 41                  	movw	r1, #56392
 800e1fa: 03 ab                        	add	r3, sp, #12
 800e1fc: c0 f6 01 01                  	movt	r1, #2049
 800e200: 0d 22                        	movs	r2, #13
 800e202: 00 91                        	str	r1, [sp]
 800e204: 4e f6 66 21                  	movw	r1, #60006
 800e208: c0 f6 01 01                  	movt	r1, #2049
 800e20c: 08 f0 90 fa                  	bl	#34080
;     supervision_timeout_: Duration,
 800e210: 05 f1 10 01                  	add.w	r1, r5, #16
 800e214: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800e216: 4e f6 73 21                  	movw	r1, #60019
 800e21a: 03 ab                        	add	r3, sp, #12
 800e21c: c0 f6 01 01                  	movt	r1, #2049
 800e220: 14 22                        	movs	r2, #20
 800e222: 00 94                        	str	r4, [sp]
 800e224: 08 f0 84 fa                  	bl	#34056
 800e228: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 800e22c: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 800e230: b9 b1                        	cbz	r1, #46
 800e232: 08 b1                        	cbz	r0, #2
 800e234: 01 20                        	movs	r0, #1
 800e236: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4a452a5819e9379bE+0xb8>
 800e238: 01 99                        	ldr	r1, [sp, #4]
 800e23a: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 800e23e: 09 78                        	ldrb	r1, [r1]
 800e240: d3 68                        	ldr	r3, [r2, #12]
 800e242: 49 07                        	lsls	r1, r1, #29
 800e244: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4a452a5819e9379bE+0xac>
 800e246: 4e f6 1c 41                  	movw	r1, #60444
 800e24a: 02 22                        	movs	r2, #2
 800e24c: c0 f6 01 01                  	movt	r1, #2049
 800e250: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4a452a5819e9379bE+0xb6>
 800e252: 4e f6 d6 41                  	movw	r1, #60630
 800e256: 01 22                        	movs	r2, #1
 800e258: c0 f6 01 01                  	movt	r1, #2049
 800e25c: 98 47                        	blx	r3
 800e25e: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800e262: 00 28                        	cmp	r0, #0
 800e264: 18 bf                        	it	ne
 800e266: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800e268: 04 b0                        	add	sp, #16
 800e26a: b0 bd                        	pop	{r4, r5, r7, pc}

0800e26c _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h4f05d6f2c15edccd:
 800e26c: b0 b5                        	push	{r4, r5, r7, lr}
 800e26e: 02 af                        	add	r7, sp, #8
 800e270: 84 b0                        	sub	sp, #16
 800e272: 0c 46                        	mov	r4, r1
 800e274: 05 68                        	ldr	r5, [r0]
 800e276: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 800e27a: 1c 22                        	movs	r2, #28
 800e27c: cb 68                        	ldr	r3, [r1, #12]
 800e27e: 4c f6 04 61                  	movw	r1, #52740
 800e282: c0 f6 01 01                  	movt	r1, #2049
 800e286: 98 47                        	blx	r3
 800e288: 8d f8 08 00                  	strb.w	r0, [sp, #8]
;     pub status: Status<VS>,
 800e28c: a8 1c                        	adds	r0, r5, #2
 800e28e: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800e290: 4c f6 74 20                  	movw	r0, #51828
 800e294: 00 21                        	movs	r1, #0
 800e296: c0 f6 01 00                  	movt	r0, #2049
 800e29a: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 800e29e: 4f f6 60 31                  	movw	r1, #64352
 800e2a2: 00 90                        	str	r0, [sp]
 800e2a4: 01 a8                        	add	r0, sp, #4
 800e2a6: 03 ab                        	add	r3, sp, #12
 800e2a8: c0 f6 01 01                  	movt	r1, #2049
 800e2ac: 06 22                        	movs	r2, #6
 800e2ae: 01 94                        	str	r4, [sp, #4]
 800e2b0: 08 f0 3e fa                  	bl	#33916
 800e2b4: 4c f6 84 21                  	movw	r1, #51844
 800e2b8: 03 ab                        	add	r3, sp, #12
 800e2ba: c0 f6 01 01                  	movt	r1, #2049
 800e2be: 0b 22                        	movs	r2, #11
 800e2c0: 00 91                        	str	r1, [sp]
 800e2c2: 4f f6 0c 51                  	movw	r1, #64780
 800e2c6: c0 f6 01 01                  	movt	r1, #2049
;     pub conn_handle: ConnectionHandle,
 800e2ca: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800e2cc: 08 f0 30 fa                  	bl	#33888
 800e2d0: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 800e2d4: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 800e2d8: b9 b1                        	cbz	r1, #46
 800e2da: 08 b1                        	cbz	r0, #2
 800e2dc: 01 20                        	movs	r0, #1
 800e2de: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4f05d6f2c15edccdE+0x9e>
 800e2e0: 01 99                        	ldr	r1, [sp, #4]
 800e2e2: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 800e2e6: 09 78                        	ldrb	r1, [r1]
 800e2e8: d3 68                        	ldr	r3, [r2, #12]
 800e2ea: 49 07                        	lsls	r1, r1, #29
 800e2ec: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4f05d6f2c15edccdE+0x92>
 800e2ee: 4e f6 1c 41                  	movw	r1, #60444
 800e2f2: 02 22                        	movs	r2, #2
 800e2f4: c0 f6 01 01                  	movt	r1, #2049
 800e2f8: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4f05d6f2c15edccdE+0x9c>
 800e2fa: 4e f6 d6 41                  	movw	r1, #60630
 800e2fe: 01 22                        	movs	r2, #1
 800e300: c0 f6 01 01                  	movt	r1, #2049
 800e304: 98 47                        	blx	r3
 800e306: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800e30a: 00 28                        	cmp	r0, #0
 800e30c: 18 bf                        	it	ne
 800e30e: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800e310: 04 b0                        	add	sp, #16
 800e312: b0 bd                        	pop	{r4, r5, r7, pc}

0800e314 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h61b0ba650bde3a51:
 800e314: b0 b5                        	push	{r4, r5, r7, lr}
 800e316: 02 af                        	add	r7, sp, #8
 800e318: 84 b0                        	sub	sp, #16
 800e31a: 0c 46                        	mov	r4, r1
 800e31c: 05 68                        	ldr	r5, [r0]
 800e31e: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 800e322: 0c 22                        	movs	r2, #12
 800e324: cb 68                        	ldr	r3, [r1, #12]
 800e326: 4d f2 02 61                  	movw	r1, #54786
 800e32a: c0 f6 01 01                  	movt	r1, #2049
 800e32e: 98 47                        	blx	r3
 800e330: 8d f8 08 00                  	strb.w	r0, [sp, #8]
;     pub status: Status<VS>,
 800e334: a8 1c                        	adds	r0, r5, #2
 800e336: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800e338: 4c f6 74 20                  	movw	r0, #51828
 800e33c: 00 21                        	movs	r1, #0
 800e33e: c0 f6 01 00                  	movt	r0, #2049
 800e342: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 800e346: 4f f6 60 31                  	movw	r1, #64352
 800e34a: 00 90                        	str	r0, [sp]
 800e34c: 01 a8                        	add	r0, sp, #4
 800e34e: 03 ab                        	add	r3, sp, #12
 800e350: c0 f6 01 01                  	movt	r1, #2049
 800e354: 06 22                        	movs	r2, #6
 800e356: 01 94                        	str	r4, [sp, #4]
 800e358: 08 f0 ea f9                  	bl	#33748
 800e35c: 4c f6 84 21                  	movw	r1, #51844
 800e360: 03 ab                        	add	r3, sp, #12
 800e362: c0 f6 01 01                  	movt	r1, #2049
 800e366: 0b 22                        	movs	r2, #11
 800e368: 00 91                        	str	r1, [sp]
 800e36a: 4f f6 0c 51                  	movw	r1, #64780
 800e36e: c0 f6 01 01                  	movt	r1, #2049
;     pub conn_handle: ConnectionHandle,
 800e372: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800e374: 08 f0 dc f9                  	bl	#33720
;     pub tx_power_level_dbm: i8,
 800e378: e9 1c                        	adds	r1, r5, #3
 800e37a: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800e37c: 4c f6 ac 41                  	movw	r1, #52396
 800e380: 03 ab                        	add	r3, sp, #12
 800e382: c0 f6 01 01                  	movt	r1, #2049
 800e386: 12 22                        	movs	r2, #18
 800e388: 00 91                        	str	r1, [sp]
 800e38a: 4d f2 0e 61                  	movw	r1, #54798
 800e38e: c0 f6 01 01                  	movt	r1, #2049
 800e392: 08 f0 cd f9                  	bl	#33690
 800e396: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 800e39a: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 800e39e: b9 b1                        	cbz	r1, #46
 800e3a0: 08 b1                        	cbz	r0, #2
 800e3a2: 01 20                        	movs	r0, #1
 800e3a4: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h61b0ba650bde3a51E+0xbc>
 800e3a6: 01 99                        	ldr	r1, [sp, #4]
 800e3a8: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 800e3ac: 09 78                        	ldrb	r1, [r1]
 800e3ae: d3 68                        	ldr	r3, [r2, #12]
 800e3b0: 49 07                        	lsls	r1, r1, #29
 800e3b2: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h61b0ba650bde3a51E+0xb0>
 800e3b4: 4e f6 1c 41                  	movw	r1, #60444
 800e3b8: 02 22                        	movs	r2, #2
 800e3ba: c0 f6 01 01                  	movt	r1, #2049
 800e3be: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h61b0ba650bde3a51E+0xba>
 800e3c0: 4e f6 d6 41                  	movw	r1, #60630
 800e3c4: 01 22                        	movs	r2, #1
 800e3c6: c0 f6 01 01                  	movt	r1, #2049
 800e3ca: 98 47                        	blx	r3
 800e3cc: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800e3d0: 00 28                        	cmp	r0, #0
 800e3d2: 18 bf                        	it	ne
 800e3d4: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800e3d6: 04 b0                        	add	sp, #16
 800e3d8: b0 bd                        	pop	{r4, r5, r7, pc}

0800e3da _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h66579d1f54b71bfe:
 800e3da: b0 b5                        	push	{r4, r5, r7, lr}
 800e3dc: 02 af                        	add	r7, sp, #8
 800e3de: 84 b0                        	sub	sp, #16
 800e3e0: 0c 46                        	mov	r4, r1
 800e3e2: 05 68                        	ldr	r5, [r0]
 800e3e4: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 800e3e8: 15 22                        	movs	r2, #21
 800e3ea: cb 68                        	ldr	r3, [r1, #12]
 800e3ec: 4d f2 c3 61                  	movw	r1, #54979
 800e3f0: c0 f6 01 01                  	movt	r1, #2049
 800e3f4: 98 47                        	blx	r3
 800e3f6: 8d f8 08 00                  	strb.w	r0, [sp, #8]
;     pub status: Status<VS>,
 800e3fa: 05 f1 08 00                  	add.w	r0, r5, #8
 800e3fe: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800e400: 4c f6 74 20                  	movw	r0, #51828
 800e404: 00 21                        	movs	r1, #0
 800e406: c0 f6 01 00                  	movt	r0, #2049
 800e40a: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 800e40e: 4f f6 60 31                  	movw	r1, #64352
 800e412: 00 90                        	str	r0, [sp]
 800e414: 01 a8                        	add	r0, sp, #4
 800e416: 03 ab                        	add	r3, sp, #12
 800e418: c0 f6 01 01                  	movt	r1, #2049
 800e41c: 06 22                        	movs	r2, #6
 800e41e: 01 94                        	str	r4, [sp, #4]
 800e420: 08 f0 86 f9                  	bl	#33548
 800e424: 4d f6 80 21                  	movw	r1, #55936
 800e428: 03 ab                        	add	r3, sp, #12
 800e42a: c0 f6 01 01                  	movt	r1, #2049
 800e42e: 10 22                        	movs	r2, #16
 800e430: 00 91                        	str	r1, [sp]
 800e432: 4c f6 6c 71                  	movw	r1, #53100
 800e436: c0 f6 01 01                  	movt	r1, #2049
;     pub supported_states: LeStates,
 800e43a: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800e43c: 08 f0 78 f9                  	bl	#33520
 800e440: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 800e444: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 800e448: b9 b1                        	cbz	r1, #46
 800e44a: 08 b1                        	cbz	r0, #2
 800e44c: 01 20                        	movs	r0, #1
 800e44e: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h66579d1f54b71bfeE+0xa0>
 800e450: 01 99                        	ldr	r1, [sp, #4]
 800e452: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 800e456: 09 78                        	ldrb	r1, [r1]
 800e458: d3 68                        	ldr	r3, [r2, #12]
 800e45a: 49 07                        	lsls	r1, r1, #29
 800e45c: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h66579d1f54b71bfeE+0x94>
 800e45e: 4e f6 1c 41                  	movw	r1, #60444
 800e462: 02 22                        	movs	r2, #2
 800e464: c0 f6 01 01                  	movt	r1, #2049
 800e468: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h66579d1f54b71bfeE+0x9e>
 800e46a: 4e f6 d6 41                  	movw	r1, #60630
 800e46e: 01 22                        	movs	r2, #1
 800e470: c0 f6 01 01                  	movt	r1, #2049
 800e474: 98 47                        	blx	r3
 800e476: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800e47a: 00 28                        	cmp	r0, #0
 800e47c: 18 bf                        	it	ne
 800e47e: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800e480: 04 b0                        	add	sp, #16
 800e482: b0 bd                        	pop	{r4, r5, r7, pc}

0800e484 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h6cda870392d2b2da:
 800e484: b0 b5                        	push	{r4, r5, r7, lr}
 800e486: 02 af                        	add	r7, sp, #8
 800e488: 84 b0                        	sub	sp, #16
 800e48a: 0c 46                        	mov	r4, r1
 800e48c: 05 68                        	ldr	r5, [r0]
 800e48e: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 800e492: 1b 22                        	movs	r2, #27
 800e494: cb 68                        	ldr	r3, [r1, #12]
 800e496: 4c f6 8c 41                  	movw	r1, #52364
 800e49a: c0 f6 01 01                  	movt	r1, #2049
 800e49e: 98 47                        	blx	r3
 800e4a0: 8d f8 08 00                  	strb.w	r0, [sp, #8]
; #[derive(Copy, Clone, Debug)]
 800e4a4: 4c f6 74 20                  	movw	r0, #51828
 800e4a8: 00 21                        	movs	r1, #0
 800e4aa: c0 f6 01 00                  	movt	r0, #2049
 800e4ae: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 800e4b2: 4f f6 60 31                  	movw	r1, #64352
 800e4b6: 00 90                        	str	r0, [sp]
 800e4b8: 01 a8                        	add	r0, sp, #4
 800e4ba: 03 ab                        	add	r3, sp, #12
 800e4bc: c0 f6 01 01                  	movt	r1, #2049
 800e4c0: 06 22                        	movs	r2, #6
 800e4c2: 01 94                        	str	r4, [sp, #4]
;     pub status: Status<VS>,
 800e4c4: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800e4c6: 08 f0 33 f9                  	bl	#33382
;     pub power: i8,
 800e4ca: 69 1c                        	adds	r1, r5, #1
 800e4cc: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800e4ce: 4c f6 ac 41                  	movw	r1, #52396
 800e4d2: 03 ab                        	add	r3, sp, #12
 800e4d4: c0 f6 01 01                  	movt	r1, #2049
 800e4d8: 05 22                        	movs	r2, #5
 800e4da: 00 91                        	str	r1, [sp]
 800e4dc: 4c f6 a7 41                  	movw	r1, #52391
 800e4e0: c0 f6 01 01                  	movt	r1, #2049
 800e4e4: 08 f0 24 f9                  	bl	#33352
 800e4e8: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 800e4ec: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 800e4f0: b9 b1                        	cbz	r1, #46
 800e4f2: 08 b1                        	cbz	r0, #2
 800e4f4: 01 20                        	movs	r0, #1
 800e4f6: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6cda870392d2b2daE+0x9e>
 800e4f8: 01 99                        	ldr	r1, [sp, #4]
 800e4fa: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 800e4fe: 09 78                        	ldrb	r1, [r1]
 800e500: d3 68                        	ldr	r3, [r2, #12]
 800e502: 49 07                        	lsls	r1, r1, #29
 800e504: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6cda870392d2b2daE+0x92>
 800e506: 4e f6 1c 41                  	movw	r1, #60444
 800e50a: 02 22                        	movs	r2, #2
 800e50c: c0 f6 01 01                  	movt	r1, #2049
 800e510: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6cda870392d2b2daE+0x9c>
 800e512: 4e f6 d6 41                  	movw	r1, #60630
 800e516: 01 22                        	movs	r2, #1
 800e518: c0 f6 01 01                  	movt	r1, #2049
 800e51c: 98 47                        	blx	r3
 800e51e: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800e522: 00 28                        	cmp	r0, #0
 800e524: 18 bf                        	it	ne
 800e526: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800e528: 04 b0                        	add	sp, #16
 800e52a: b0 bd                        	pop	{r4, r5, r7, pc}

0800e52c _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h70bcc51d0327e5e3:
 800e52c: f0 b5                        	push	{r4, r5, r6, r7, lr}
 800e52e: 03 af                        	add	r7, sp, #12
 800e530: 2d e9 00 0f                  	push.w	{r8, r9, r10, r11}
 800e534: a7 b0                        	sub	sp, #156
 800e536: 4e f6 b4 42                  	movw	r2, #60596
 800e53a: d0 f8 00 80                  	ldr.w	r8, [r0]
 800e53e: 00 20                        	movs	r0, #0
 800e540: c0 f6 01 02                  	movt	r2, #2049
 800e544: 8b 69                        	ldr	r3, [r1, #24]
 800e546: 01 26                        	movs	r6, #1
 800e548: 02 91                        	str	r1, [sp, #8]
 800e54a: 1e 92                        	str	r2, [sp, #120]
 800e54c: 1a aa                        	add	r2, sp, #104
 800e54e: c9 69                        	ldr	r1, [r1, #28]
 800e550: 1f 90                        	str	r0, [sp, #124]
 800e552: cd e9 1c 00                  	strd	r0, r0, [sp, #112]
 800e556: 4e f6 b4 40                  	movw	r0, #60596
 800e55a: c0 f6 01 00                  	movt	r0, #2049
 800e55e: 1b 96                        	str	r6, [sp, #108]
 800e560: 1a 90                        	str	r0, [sp, #104]
 800e562: 18 46                        	mov	r0, r3
 800e564: 07 f0 8e fe                  	bl	#32028
;         write!(f, "{{")?;
 800e568: 00 28                        	cmp	r0, #0
 800e56a: 40 f0 cc 80                  	bne.w	#408 <$t.72+0x122>
;             event_data: &self.data_buf[..self.data_len],
 800e56e: d8 f8 00 a0                  	ldr.w	r10, [r8]
;         } else if self.end > slice.len() {
 800e572: ba f1 fe 0f                  	cmp.w	r10, #254
 800e576: 80 f0 16 81                  	bhs.w	#556 <$t.72+0x1c2>
 800e57a: 07 a8                        	add	r0, sp, #28
 800e57c: 00 24                        	movs	r4, #0
 800e57e: 00 25                        	movs	r5, #0
 800e580: 0a 30                        	adds	r0, #10
 800e582: 00 90                        	str	r0, [sp]
 800e584: cd f8 04 80                  	str.w	r8, [sp, #4]
;         if self.next_index >= self.event_data.len() {
 800e588: 55 45                        	cmp	r5, r10
 800e58a: 80 f0 c1 80                  	bhs.w	#386 <$t.72+0x12c>
;         let data_len_index = addr_index + 6;
 800e58e: 05 f1 08 02                  	add.w	r2, r5, #8
;         let data_len = self.event_data[data_len_index] as usize;
 800e592: 52 45                        	cmp	r2, r10
 800e594: 80 f0 de 80                  	bhs.w	#444 <$t.72+0x170>
 800e598: 08 eb 02 00                  	add.w	r0, r8, r2
 800e59c: 90 f8 04 e0                  	ldrb.w	lr, [r0, #4]
;         let data_start_index = data_len_index + 1;
 800e5a0: 05 f1 09 00                  	add.w	r0, r5, #9
;         let rssi_index = data_start_index + data_len;
 800e5a4: 00 eb 0e 01                  	add.w	r1, r0, lr
;         self.next_index = rssi_index + 1;
 800e5a8: 01 f1 01 0b                  	add.w	r11, r1, #1
;         if self.next_index > self.event_data.len() {
 800e5ac: d3 45                        	cmp	r11, r10
 800e5ae: 00 f2 ea 80                  	bhi.w	#468 <$t.72+0x1a2>
 800e5b2: ab 1c                        	adds	r3, r5, #2
;         let mut bd_addr = crate::BdAddr([0; 6]);
 800e5b4: ad f8 44 40                  	strh.w	r4, [sp, #68]
;         if self.start > self.end {
 800e5b8: 9a 42                        	cmp	r2, r3
;         let mut bd_addr = crate::BdAddr([0; 6]);
 800e5ba: 10 94                        	str	r4, [sp, #64]
;         if self.start > self.end {
 800e5bc: c0 f0 cf 80                  	blo.w	#414 <$t.72+0x17a>
;         intrinsics::offset(self, count)
 800e5c0: 08 f1 04 04                  	add.w	r4, r8, #4
;     copy_nonoverlapping(src, dst, count)
 800e5c4: e2 58                        	ldr	r2, [r4, r3]
;         intrinsics::offset(self, count)
 800e5c6: 23 44                        	add	r3, r4
;     copy_nonoverlapping(src, dst, count)
 800e5c8: 9b 88                        	ldrh	r3, [r3, #4]
 800e5ca: ad f8 44 30                  	strh.w	r3, [sp, #68]
;             event_type: self.event_data[event_type_index]
 800e5ce: 63 5d                        	ldrb	r3, [r4, r5]
;     copy_nonoverlapping(src, dst, count)
 800e5d0: 10 92                        	str	r2, [sp, #64]
;             0 => Ok(AdvertisementEvent::Advertisement),
 800e5d2: 04 2b                        	cmp	r3, #4
 800e5d4: 00 f2 c8 80                  	bhi.w	#400 <$t.72+0x184>
 800e5d8: 6a 1c                        	adds	r2, r5, #1
 800e5da: 4f f0 00 0c                  	mov.w	r12, #0
 800e5de: df e8 03 f0                  	tbb	[pc, r3]

0800e5e2 $d.71:
 800e5e2:	0e 03 09 0c	.word	0x0c09030e
 800e5e6:	06 00		.short	0x0006

0800e5e8 $t.72:
 800e5e8: 4f f0 01 0c                  	mov.w	r12, #1
 800e5ec: 07 e0                        	b	#14 <$t.72+0x1a>
 800e5ee: 4f f0 04 0c                  	mov.w	r12, #4
 800e5f2: 04 e0                        	b	#8 <$t.72+0x1a>
 800e5f4: 4f f0 02 0c                  	mov.w	r12, #2
 800e5f8: 01 e0                        	b	#2 <$t.72+0x1a>
 800e5fa: 4f f0 03 0c                  	mov.w	r12, #3
;         self
 800e5fe: bd f8 6c 30                  	ldrh.w	r3, [sp, #108]
;             address: crate::to_bd_addr_type(self.event_data[addr_type_index], bd_addr)
 800e602: 52 45                        	cmp	r2, r10
;         self
 800e604: 1a 9d                        	ldr	r5, [sp, #104]
 800e606: ad f8 4c 30                  	strh.w	r3, [sp, #76]
 800e60a: 12 95                        	str	r5, [sp, #72]
;             address: crate::to_bd_addr_type(self.event_data[addr_type_index], bd_addr)
 800e60c: 80 f0 a2 80                  	bhs.w	#324 <$t.72+0x170>
 800e610: 42 44                        	add	r2, r8
 800e612: 10 9b                        	ldr	r3, [sp, #64]
 800e614: bd f8 44 50                  	ldrh.w	r5, [sp, #68]
 800e618: 12 79                        	ldrb	r2, [r2, #4]
 800e61a: ad f8 6c 50                  	strh.w	r5, [sp, #108]
 800e61e: 1a 93                        	str	r3, [sp, #104]
;         0 => Ok(BdAddrType::Public(addr)),
 800e620: 1a b1                        	cbz	r2, #6
 800e622: 01 2a                        	cmp	r2, #1
 800e624: 0d d1                        	bne	#26 <$t.72+0x5e>
 800e626: 01 22                        	movs	r2, #1
 800e628: 00 e0                        	b	#0 <$t.72+0x48>
 800e62a: 00 22                        	movs	r2, #0
 800e62c: 1a 9d                        	ldr	r5, [sp, #104]
 800e62e: bd f8 6c 30                  	ldrh.w	r3, [sp, #108]
 800e632: 07 95                        	str	r5, [sp, #28]
;             Ok(t) => Ok(t),
 800e634: 0c 95                        	str	r5, [sp, #48]
 800e636: 00 25                        	movs	r5, #0
 800e638: ad f8 20 30                  	strh.w	r3, [sp, #32]
 800e63c: ad f8 34 30                  	strh.w	r3, [sp, #52]
 800e640: 00 e0                        	b	#0 <$t.72+0x60>
 800e642: 01 25                        	movs	r5, #1
;         self
 800e644: 0c 9b                        	ldr	r3, [sp, #48]
;                 .map_err(rewrap_bd_addr_type_err)?,
 800e646: 00 2d                        	cmp	r5, #0
;         self
 800e648: bd f8 34 60                  	ldrh.w	r6, [sp, #52]
 800e64c: dd f8 68 80                  	ldr.w	r8, [sp, #104]
 800e650: bd f8 6c 90                  	ldrh.w	r9, [sp, #108]
 800e654: 18 93                        	str	r3, [sp, #96]
 800e656: ad f8 64 60                  	strh.w	r6, [sp, #100]
 800e65a: cd f8 58 80                  	str.w	r8, [sp, #88]
 800e65e: ad f8 5c 90                  	strh.w	r9, [sp, #92]
;                 .map_err(rewrap_bd_addr_type_err)?,
 800e662: 40 f0 8a 80                  	bne.w	#276 <$t.72+0x196>
;             address: crate::to_bd_addr_type(self.event_data[addr_type_index], bd_addr)
 800e666: bd f8 64 30                  	ldrh.w	r3, [sp, #100]
;         if self.start > self.end {
 800e66a: 81 42                        	cmp	r1, r0
;             address: crate::to_bd_addr_type(self.event_data[addr_type_index], bd_addr)
 800e66c: 18 9d                        	ldr	r5, [sp, #96]
 800e66e: ad f8 54 30                  	strh.w	r3, [sp, #84]
 800e672: 14 95                        	str	r5, [sp, #80]
;         if self.start > self.end {
 800e674: c0 f0 94 80                  	blo.w	#296 <$t.72+0x1bc>
 800e678: dd f8 04 80                  	ldr.w	r8, [sp, #4]
;         } else if self.end > slice.len() {
 800e67c: 8a 45                        	cmp	r10, r1
 800e67e: 67 d3                        	blo	#206 <$t.72+0x16c>
;             rssi: match unsafe { mem::transmute::<u8, i8>(self.event_data[rssi_index]) } {
 800e680: 51 45                        	cmp	r1, r10
 800e682: 65 d2                        	bhs	#202 <$t.72+0x16c>
 800e684: 61 5c                        	ldrb	r1, [r4, r1]
;         Ok(Some(LeAdvertisement {
 800e686: bd f8 54 50                  	ldrh.w	r5, [sp, #84]
 800e68a: 14 9b                        	ldr	r3, [sp, #80]
;             Ok(t) => t,
 800e68c: ad f8 18 50                  	strh.w	r5, [sp, #24]
;             rssi: match unsafe { mem::transmute::<u8, i8>(self.event_data[rssi_index]) } {
 800e690: b1 f1 7f 05                  	subs.w	r5, r1, #127
;             Ok(t) => t,
 800e694: 05 93                        	str	r3, [sp, #20]
;             rssi: match unsafe { mem::transmute::<u8, i8>(self.event_data[rssi_index]) } {
 800e696: 18 bf                        	it	ne
 800e698: 01 25                        	movne	r5, #1
;         for report in self.iter() {
 800e69a: 02 2a                        	cmp	r2, #2
 800e69c: 3c d0                        	beq	#120 <$t.72+0x134>
 800e69e: 00 9e                        	ldr	r6, [sp]
 800e6a0: 20 44                        	add	r0, r4
 800e6a2: bd f8 18 30                  	ldrh.w	r3, [sp, #24]
 800e6a6: 05 9c                        	ldr	r4, [sp, #20]
 800e6a8: 8d f8 25 20                  	strb.w	r2, [sp, #37]
;             write!(f, "{:?}", report)?;
 800e6ac: 44 f6 ab 22                  	movw	r2, #19115
;         for report in self.iter() {
 800e6b0: 03 94                        	str	r4, [sp, #12]
;             write!(f, "{:?}", report)?;
 800e6b2: c0 f6 01 02                  	movt	r2, #2049
;         for report in self.iter() {
 800e6b6: 34 60                        	str	r4, [r6]
 800e6b8: 00 24                        	movs	r4, #0
 800e6ba: b3 80                        	strh	r3, [r6, #4]
 800e6bc: 01 26                        	movs	r6, #1
 800e6be: 8d f8 24 c0                  	strb.w	r12, [sp, #36]
 800e6c2: cd e9 07 0e                  	strd	r0, lr, [sp, #28]
 800e6c6: 8d f8 2d 10                  	strb.w	r1, [sp, #45]
 800e6ca: 02 99                        	ldr	r1, [sp, #8]
 800e6cc: ad f8 10 30                  	strh.w	r3, [sp, #16]
 800e6d0: ad f8 2e 40                  	strh.w	r4, [sp, #46]
 800e6d4: 8d f8 2c 50                  	strb.w	r5, [sp, #44]
 800e6d8: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
;             write!(f, "{:?}", report)?;
 800e6dc: 0d 92                        	str	r2, [sp, #52]
 800e6de: 07 aa                        	add	r2, sp, #28
 800e6e0: 0c 92                        	str	r2, [sp, #48]
 800e6e2: 0c aa                        	add	r2, sp, #48
 800e6e4: 1f 96                        	str	r6, [sp, #124]
 800e6e6: cd e9 1d 42                  	strd	r4, r2, [sp, #116]
 800e6ea: 4f f2 a0 42                  	movw	r2, #62624
 800e6ee: c0 f6 01 02                  	movt	r2, #2049
 800e6f2: cd e9 1b 64                  	strd	r6, r4, [sp, #108]
 800e6f6: 1a 92                        	str	r2, [sp, #104]
 800e6f8: 1a aa                        	add	r2, sp, #104
 800e6fa: 07 f0 c3 fd                  	bl	#31622
 800e6fe: 00 28                        	cmp	r0, #0
 800e700: 5d 46                        	mov	r5, r11
 800e702: 3f f4 41 af                  	beq.w	#-382 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h70bcc51d0327e5e3E+0x60>
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800e706: 30 46                        	mov	r0, r6
 800e708: 27 b0                        	add	sp, #156
 800e70a: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 800e70e: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 800e710: 00 20                        	movs	r0, #0
;             Ok(t) => t,
 800e712: 05 90                        	str	r0, [sp, #20]
 800e714: ad f8 18 00                  	strh.w	r0, [sp, #24]
 800e718: 02 99                        	ldr	r1, [sp, #8]
 800e71a: 4e f6 b4 43                  	movw	r3, #60596
 800e71e: 00 22                        	movs	r2, #0
 800e720: c0 f6 01 03                  	movt	r3, #2049
 800e724: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 800e728: 1f 92                        	str	r2, [sp, #124]
 800e72a: 1e 93                        	str	r3, [sp, #120]
 800e72c: cd e9 1c 22                  	strd	r2, r2, [sp, #112]
 800e730: 01 22                        	movs	r2, #1
 800e732: 1b 92                        	str	r2, [sp, #108]
 800e734: 4e f6 bc 42                  	movw	r2, #60604
 800e738: c0 f6 01 02                  	movt	r2, #2049
 800e73c: 1a 92                        	str	r2, [sp, #104]
 800e73e: 1a aa                        	add	r2, sp, #104
 800e740: 07 f0 a0 fd                  	bl	#31552
 800e744: 06 46                        	mov	r6, r0
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800e746: 30 46                        	mov	r0, r6
 800e748: 27 b0                        	add	sp, #156
 800e74a: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 800e74e: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 800e750: 08 46                        	mov	r0, r1
 800e752: 00 e0                        	b	#0 <$t.72+0x172>
 800e754: 10 46                        	mov	r0, r2
 800e756: 51 46                        	mov	r1, r10
 800e758: 07 f0 5d fb                  	bl	#30394
 800e75c: fe de                        	trap
;             slice_index_order_fail(self.start, self.end);
 800e75e: 18 46                        	mov	r0, r3
 800e760: 11 46                        	mov	r1, r2
 800e762: 07 f0 58 fb                  	bl	#30384
 800e766: fe de                        	trap
;         self
 800e768: bd f8 6c 00                  	ldrh.w	r0, [sp, #108]
 800e76c: 1a 99                        	ldr	r1, [sp, #104]
 800e76e: ad f8 4c 00                  	strh.w	r0, [sp, #76]
;         Err(v)
 800e772: 0e 91                        	str	r1, [sp, #56]
 800e774: ad f8 3c 00                  	strh.w	r0, [sp, #60]
 800e778: 05 e0                        	b	#10 <$t.72+0x1a2>
 800e77a: bd f8 5c 00                  	ldrh.w	r0, [sp, #92]
 800e77e: 16 99                        	ldr	r1, [sp, #88]
 800e780: ad f8 3c 00                  	strh.w	r0, [sp, #60]
 800e784: 0e 91                        	str	r1, [sp, #56]
;             Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
 800e786: 40 f6 6f 20                  	movw	r0, #2671
 800e78a: 4d f6 48 53                  	movw	r3, #56648
 800e78e: 1a aa                        	add	r2, sp, #104
 800e790: c0 f6 02 00                  	movt	r0, #2050
 800e794: c0 f6 01 03                  	movt	r3, #2049
 800e798: 2b 21                        	movs	r1, #43
 800e79a: 07 f0 62 fe                  	bl	#31940
 800e79e: fe de                        	trap
;             slice_index_order_fail(self.start, self.end);
 800e7a0: 07 f0 39 fb                  	bl	#30322
 800e7a4: fe de                        	trap
;             slice_index_len_fail(self.end, slice.len());
 800e7a6: 50 46                        	mov	r0, r10
 800e7a8: fd 21                        	movs	r1, #253
 800e7aa: 07 f0 34 fb                  	bl	#30312
 800e7ae: fe de                        	trap

0800e7b0 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h752ee32228a65ac1:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800e7b0: b0 b5                        	push	{r4, r5, r7, lr}
 800e7b2: 02 af                        	add	r7, sp, #8
 800e7b4: 84 b0                        	sub	sp, #16
 800e7b6: 0c 46                        	mov	r4, r1
 800e7b8: 05 68                        	ldr	r5, [r0]
 800e7ba: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 800e7be: 09 22                        	movs	r2, #9
 800e7c0: cb 68                        	ldr	r3, [r1, #12]
 800e7c2: 4d f2 74 51                  	movw	r1, #54644
 800e7c6: c0 f6 01 01                  	movt	r1, #2049
 800e7ca: 98 47                        	blx	r3
 800e7cc: 8d f8 08 00                  	strb.w	r0, [sp, #8]
;     pub status: Status<VS>,
 800e7d0: 28 1d                        	adds	r0, r5, #4
 800e7d2: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800e7d4: 4c f6 74 20                  	movw	r0, #51828
 800e7d8: 00 21                        	movs	r1, #0
 800e7da: c0 f6 01 00                  	movt	r0, #2049
 800e7de: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 800e7e2: 4f f6 60 31                  	movw	r1, #64352
 800e7e6: 00 90                        	str	r0, [sp]
 800e7e8: 01 a8                        	add	r0, sp, #4
 800e7ea: 03 ab                        	add	r3, sp, #12
 800e7ec: c0 f6 01 01                  	movt	r1, #2049
 800e7f0: 06 22                        	movs	r2, #6
 800e7f2: 01 94                        	str	r4, [sp, #4]
 800e7f4: 07 f0 9c ff                  	bl	#32568
 800e7f8: 4d f2 04 31                  	movw	r1, #54020
 800e7fc: 03 ab                        	add	r3, sp, #12
 800e7fe: c0 f6 01 01                  	movt	r1, #2049
 800e802: 11 22                        	movs	r2, #17
 800e804: 00 91                        	str	r1, [sp]
 800e806: 4d f2 7d 51                  	movw	r1, #54653
 800e80a: c0 f6 01 01                  	movt	r1, #2049
;     pub number_of_packets: usize,
 800e80e: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800e810: 07 f0 8e ff                  	bl	#32540
 800e814: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 800e818: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 800e81c: b9 b1                        	cbz	r1, #46
 800e81e: 08 b1                        	cbz	r0, #2
 800e820: 01 20                        	movs	r0, #1
 800e822: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h752ee32228a65ac1E+0x9e>
 800e824: 01 99                        	ldr	r1, [sp, #4]
 800e826: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 800e82a: 09 78                        	ldrb	r1, [r1]
 800e82c: d3 68                        	ldr	r3, [r2, #12]
 800e82e: 49 07                        	lsls	r1, r1, #29
 800e830: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h752ee32228a65ac1E+0x92>
 800e832: 4e f6 1c 41                  	movw	r1, #60444
 800e836: 02 22                        	movs	r2, #2
 800e838: c0 f6 01 01                  	movt	r1, #2049
 800e83c: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h752ee32228a65ac1E+0x9c>
 800e83e: 4e f6 d6 41                  	movw	r1, #60630
 800e842: 01 22                        	movs	r2, #1
 800e844: c0 f6 01 01                  	movt	r1, #2049
 800e848: 98 47                        	blx	r3
 800e84a: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800e84e: 00 28                        	cmp	r0, #0
 800e850: 18 bf                        	it	ne
 800e852: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800e854: 04 b0                        	add	sp, #16
 800e856: b0 bd                        	pop	{r4, r5, r7, pc}

0800e858 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h763d73c9ebd018e8:
 800e858: b0 b5                        	push	{r4, r5, r7, lr}
 800e85a: 02 af                        	add	r7, sp, #8
 800e85c: 84 b0                        	sub	sp, #16
 800e85e: 0c 46                        	mov	r4, r1
 800e860: 05 68                        	ldr	r5, [r0]
 800e862: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 800e866: 15 22                        	movs	r2, #21
 800e868: cb 68                        	ldr	r3, [r1, #12]
 800e86a: 4e f6 d8 21                  	movw	r1, #60120
 800e86e: c0 f6 01 01                  	movt	r1, #2049
 800e872: 98 47                        	blx	r3
;     #[derive(Copy, Clone, Debug)]
 800e874: 4d f6 04 62                  	movw	r2, #56836
 800e878: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800e87c: 00 20                        	movs	r0, #0
 800e87e: 03 a9                        	add	r1, sp, #12
 800e880: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 800e884: c0 f6 01 02                  	movt	r2, #2049
 800e888: 01 90                        	str	r0, [sp, #4]
 800e88a: 68 46                        	mov	r0, sp
 800e88c: 00 94                        	str	r4, [sp]
;         pub struct $flags([u8; $size]);
 800e88e: 03 95                        	str	r5, [sp, #12]
;     #[derive(Copy, Clone, Debug)]
 800e890: 08 f0 cb f8                  	bl	#33174
 800e894: 01 98                        	ldr	r0, [sp, #4]
 800e896: 9d f8 08 40                  	ldrb.w	r4, [sp, #8]
 800e89a: 18 b3                        	cbz	r0, #70
 800e89c: 0c b1                        	cbz	r4, #2
 800e89e: 01 24                        	movs	r4, #1
 800e8a0: 1e e0                        	b	#60 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h763d73c9ebd018e8E+0x8c>
 800e8a2: 01 28                        	cmp	r0, #1
 800e8a4: 11 d1                        	bne	#34 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h763d73c9ebd018e8E+0x76>
 800e8a6: 9d f8 09 00                  	ldrb.w	r0, [sp, #9]
 800e8aa: 70 b1                        	cbz	r0, #28
 800e8ac: 00 99                        	ldr	r1, [sp]
 800e8ae: 08 78                        	ldrb	r0, [r1]
 800e8b0: 40 07                        	lsls	r0, r0, #29
 800e8b2: 0a d4                        	bmi	#20 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h763d73c9ebd018e8E+0x76>
 800e8b4: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 800e8b8: 01 22                        	movs	r2, #1
 800e8ba: cb 68                        	ldr	r3, [r1, #12]
 800e8bc: 4e f6 21 41                  	movw	r1, #60449
 800e8c0: c0 f6 01 01                  	movt	r1, #2049
 800e8c4: 01 24                        	movs	r4, #1
 800e8c6: 98 47                        	blx	r3
 800e8c8: 50 b9                        	cbnz	r0, #20
 800e8ca: 00 99                        	ldr	r1, [sp]
 800e8cc: 01 22                        	movs	r2, #1
 800e8ce: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 800e8d2: cb 68                        	ldr	r3, [r1, #12]
 800e8d4: 4f f2 69 61                  	movw	r1, #63081
 800e8d8: c0 f6 01 01                  	movt	r1, #2049
 800e8dc: 98 47                        	blx	r3
 800e8de: 04 46                        	mov	r4, r0
 800e8e0: 8d f8 08 40                  	strb.w	r4, [sp, #8]
 800e8e4: 00 2c                        	cmp	r4, #0
 800e8e6: 18 bf                        	it	ne
 800e8e8: 01 24                        	movne	r4, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800e8ea: 20 46                        	mov	r0, r4
 800e8ec: 04 b0                        	add	sp, #16
 800e8ee: b0 bd                        	pop	{r4, r5, r7, pc}

0800e8f0 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h765a60b9a60bf620:
 800e8f0: b0 b5                        	push	{r4, r5, r7, lr}
 800e8f2: 02 af                        	add	r7, sp, #8
 800e8f4: 84 b0                        	sub	sp, #16
 800e8f6: 0c 46                        	mov	r4, r1
 800e8f8: 05 68                        	ldr	r5, [r0]
 800e8fa: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 800e8fe: 16 22                        	movs	r2, #22
 800e900: cb 68                        	ldr	r3, [r1, #12]
 800e902: 4c f6 94 21                  	movw	r1, #51860
 800e906: c0 f6 01 01                  	movt	r1, #2049
 800e90a: 98 47                        	blx	r3
 800e90c: 8d f8 08 00                  	strb.w	r0, [sp, #8]
; #[derive(Copy, Clone, Debug)]
 800e910: 4c f6 74 20                  	movw	r0, #51828
 800e914: 00 21                        	movs	r1, #0
 800e916: c0 f6 01 00                  	movt	r0, #2049
 800e91a: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 800e91e: 4f f6 60 31                  	movw	r1, #64352
 800e922: 00 90                        	str	r0, [sp]
 800e924: 01 a8                        	add	r0, sp, #4
 800e926: 03 ab                        	add	r3, sp, #12
 800e928: c0 f6 01 01                  	movt	r1, #2049
 800e92c: 06 22                        	movs	r2, #6
 800e92e: 01 94                        	str	r4, [sp, #4]
;     pub status: Status<VS>,
 800e930: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800e932: 07 f0 fd fe                  	bl	#32250
;     pub supported_commands: CommandFlags,
 800e936: 69 1c                        	adds	r1, r5, #1
 800e938: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800e93a: 4c f6 bc 21                  	movw	r1, #51900
 800e93e: 03 ab                        	add	r3, sp, #12
 800e940: c0 f6 01 01                  	movt	r1, #2049
 800e944: 12 22                        	movs	r2, #18
 800e946: 00 91                        	str	r1, [sp]
 800e948: 4c f6 aa 21                  	movw	r1, #51882
 800e94c: c0 f6 01 01                  	movt	r1, #2049
 800e950: 07 f0 ee fe                  	bl	#32220
 800e954: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 800e958: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 800e95c: b9 b1                        	cbz	r1, #46
 800e95e: 08 b1                        	cbz	r0, #2
 800e960: 01 20                        	movs	r0, #1
 800e962: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h765a60b9a60bf620E+0x9e>
 800e964: 01 99                        	ldr	r1, [sp, #4]
 800e966: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 800e96a: 09 78                        	ldrb	r1, [r1]
 800e96c: d3 68                        	ldr	r3, [r2, #12]
 800e96e: 49 07                        	lsls	r1, r1, #29
 800e970: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h765a60b9a60bf620E+0x92>
 800e972: 4e f6 1c 41                  	movw	r1, #60444
 800e976: 02 22                        	movs	r2, #2
 800e978: c0 f6 01 01                  	movt	r1, #2049
 800e97c: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h765a60b9a60bf620E+0x9c>
 800e97e: 4e f6 d6 41                  	movw	r1, #60630
 800e982: 01 22                        	movs	r2, #1
 800e984: c0 f6 01 01                  	movt	r1, #2049
 800e988: 98 47                        	blx	r3
 800e98a: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800e98e: 00 28                        	cmp	r0, #0
 800e990: 18 bf                        	it	ne
 800e992: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800e994: 04 b0                        	add	sp, #16
 800e996: b0 bd                        	pop	{r4, r5, r7, pc}

0800e998 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h8708619feb9fd42d:
 800e998: b0 b5                        	push	{r4, r5, r7, lr}
 800e99a: 02 af                        	add	r7, sp, #8
 800e99c: 84 b0                        	sub	sp, #16
 800e99e: 0c 46                        	mov	r4, r1
 800e9a0: 05 68                        	ldr	r5, [r0]
 800e9a2: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 800e9a6: 0d 22                        	movs	r2, #13
 800e9a8: cb 68                        	ldr	r3, [r1, #12]
 800e9aa: 4c f6 78 61                  	movw	r1, #52856
 800e9ae: c0 f6 01 01                  	movt	r1, #2049
 800e9b2: 98 47                        	blx	r3
 800e9b4: 8d f8 08 00                  	strb.w	r0, [sp, #8]
;     pub status: Status<VS>,
 800e9b8: a8 1c                        	adds	r0, r5, #2
 800e9ba: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800e9bc: 4c f6 74 20                  	movw	r0, #51828
 800e9c0: 00 21                        	movs	r1, #0
 800e9c2: c0 f6 01 00                  	movt	r0, #2049
 800e9c6: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 800e9ca: 4f f6 60 31                  	movw	r1, #64352
 800e9ce: 00 90                        	str	r0, [sp]
 800e9d0: 01 a8                        	add	r0, sp, #4
 800e9d2: 03 ab                        	add	r3, sp, #12
 800e9d4: c0 f6 01 01                  	movt	r1, #2049
 800e9d8: 06 22                        	movs	r2, #6
 800e9da: 01 94                        	str	r4, [sp, #4]
 800e9dc: 07 f0 a8 fe                  	bl	#32080
;     pub num_hci_command_packets: u8,
 800e9e0: e9 1c                        	adds	r1, r5, #3
 800e9e2: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800e9e4: 4d f2 78 31                  	movw	r1, #54136
 800e9e8: 03 ab                        	add	r3, sp, #12
 800e9ea: c0 f6 01 01                  	movt	r1, #2049
 800e9ee: 17 22                        	movs	r2, #23
 800e9f0: 00 91                        	str	r1, [sp]
 800e9f2: 4d f2 cc 41                  	movw	r1, #54476
 800e9f6: c0 f6 01 01                  	movt	r1, #2049
 800e9fa: 07 f0 99 fe                  	bl	#32050
 800e9fe: 4d f2 ec 41                  	movw	r1, #54508
 800ea02: 03 ab                        	add	r3, sp, #12
 800ea04: c0 f6 01 01                  	movt	r1, #2049
 800ea08: 06 22                        	movs	r2, #6
 800ea0a: 00 91                        	str	r1, [sp]
 800ea0c: 4d f2 e3 41                  	movw	r1, #54499
 800ea10: c0 f6 01 01                  	movt	r1, #2049
;     pub opcode: crate::opcode::Opcode,
 800ea14: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800ea16: 07 f0 8b fe                  	bl	#32022
 800ea1a: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 800ea1e: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 800ea22: b9 b1                        	cbz	r1, #46
 800ea24: 08 b1                        	cbz	r0, #2
 800ea26: 01 20                        	movs	r0, #1
 800ea28: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8708619feb9fd42dE+0xbc>
 800ea2a: 01 99                        	ldr	r1, [sp, #4]
 800ea2c: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 800ea30: 09 78                        	ldrb	r1, [r1]
 800ea32: d3 68                        	ldr	r3, [r2, #12]
 800ea34: 49 07                        	lsls	r1, r1, #29
 800ea36: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8708619feb9fd42dE+0xb0>
 800ea38: 4e f6 1c 41                  	movw	r1, #60444
 800ea3c: 02 22                        	movs	r2, #2
 800ea3e: c0 f6 01 01                  	movt	r1, #2049
 800ea42: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8708619feb9fd42dE+0xba>
 800ea44: 4e f6 d6 41                  	movw	r1, #60630
 800ea48: 01 22                        	movs	r2, #1
 800ea4a: c0 f6 01 01                  	movt	r1, #2049
 800ea4e: 98 47                        	blx	r3
 800ea50: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800ea54: 00 28                        	cmp	r0, #0
 800ea56: 18 bf                        	it	ne
 800ea58: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800ea5a: 04 b0                        	add	sp, #16
 800ea5c: b0 bd                        	pop	{r4, r5, r7, pc}

0800ea5e _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h897d2886c44c6d92:
 800ea5e: b0 b5                        	push	{r4, r5, r7, lr}
 800ea60: 02 af                        	add	r7, sp, #8
 800ea62: 84 b0                        	sub	sp, #16
 800ea64: 0c 46                        	mov	r4, r1
 800ea66: 05 68                        	ldr	r5, [r0]
 800ea68: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 800ea6c: 10 22                        	movs	r2, #16
 800ea6e: cb 68                        	ldr	r3, [r1, #12]
 800ea70: 4c f6 ec 61                  	movw	r1, #52972
 800ea74: c0 f6 01 01                  	movt	r1, #2049
 800ea78: 98 47                        	blx	r3
 800ea7a: 8d f8 08 00                  	strb.w	r0, [sp, #8]
;     pub status: Status<VS>,
 800ea7e: a8 1c                        	adds	r0, r5, #2
 800ea80: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800ea82: 4c f6 74 20                  	movw	r0, #51828
 800ea86: 00 21                        	movs	r1, #0
 800ea88: c0 f6 01 00                  	movt	r0, #2049
 800ea8c: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 800ea90: 4f f6 60 31                  	movw	r1, #64352
 800ea94: 00 90                        	str	r0, [sp]
 800ea96: 01 a8                        	add	r0, sp, #4
 800ea98: 03 ab                        	add	r3, sp, #12
 800ea9a: c0 f6 01 01                  	movt	r1, #2049
 800ea9e: 06 22                        	movs	r2, #6
 800eaa0: 01 94                        	str	r4, [sp, #4]
 800eaa2: 07 f0 45 fe                  	bl	#31882
 800eaa6: 4c f6 84 21                  	movw	r1, #51844
 800eaaa: 03 ab                        	add	r3, sp, #12
 800eaac: c0 f6 01 01                  	movt	r1, #2049
 800eab0: 0b 22                        	movs	r2, #11
 800eab2: 00 91                        	str	r1, [sp]
 800eab4: 4f f6 0c 51                  	movw	r1, #64780
 800eab8: c0 f6 01 01                  	movt	r1, #2049
;     pub conn_handle: ConnectionHandle,
 800eabc: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800eabe: 07 f0 37 fe                  	bl	#31854
;     pub encryption: Encryption,
 800eac2: e9 1c                        	adds	r1, r5, #3
 800eac4: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800eac6: 4d f2 08 51                  	movw	r1, #54536
 800eaca: 03 ab                        	add	r3, sp, #12
 800eacc: c0 f6 01 01                  	movt	r1, #2049
 800ead0: 0a 22                        	movs	r2, #10
 800ead2: 00 91                        	str	r1, [sp]
 800ead4: 4d f2 fc 41                  	movw	r1, #54524
 800ead8: c0 f6 01 01                  	movt	r1, #2049
 800eadc: 07 f0 28 fe                  	bl	#31824
 800eae0: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 800eae4: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 800eae8: b9 b1                        	cbz	r1, #46
 800eaea: 08 b1                        	cbz	r0, #2
 800eaec: 01 20                        	movs	r0, #1
 800eaee: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h897d2886c44c6d92E+0xbc>
 800eaf0: 01 99                        	ldr	r1, [sp, #4]
 800eaf2: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 800eaf6: 09 78                        	ldrb	r1, [r1]
 800eaf8: d3 68                        	ldr	r3, [r2, #12]
 800eafa: 49 07                        	lsls	r1, r1, #29
 800eafc: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h897d2886c44c6d92E+0xb0>
 800eafe: 4e f6 1c 41                  	movw	r1, #60444
 800eb02: 02 22                        	movs	r2, #2
 800eb04: c0 f6 01 01                  	movt	r1, #2049
 800eb08: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h897d2886c44c6d92E+0xba>
 800eb0a: 4e f6 d6 41                  	movw	r1, #60630
 800eb0e: 01 22                        	movs	r2, #1
 800eb10: c0 f6 01 01                  	movt	r1, #2049
 800eb14: 98 47                        	blx	r3
 800eb16: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800eb1a: 00 28                        	cmp	r0, #0
 800eb1c: 18 bf                        	it	ne
 800eb1e: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800eb20: 04 b0                        	add	sp, #16
 800eb22: b0 bd                        	pop	{r4, r5, r7, pc}

0800eb24 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h8dfb3f4d59426135:
 800eb24: b0 b5                        	push	{r4, r5, r7, lr}
 800eb26: 02 af                        	add	r7, sp, #8
 800eb28: 84 b0                        	sub	sp, #16
 800eb2a: 0c 46                        	mov	r4, r1
 800eb2c: 05 68                        	ldr	r5, [r0]
 800eb2e: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 800eb32: 14 22                        	movs	r2, #20
 800eb34: cb 68                        	ldr	r3, [r1, #12]
 800eb36: 4d f6 50 21                  	movw	r1, #55888
 800eb3a: c0 f6 01 01                  	movt	r1, #2049
 800eb3e: 98 47                        	blx	r3
 800eb40: 8d f8 08 00                  	strb.w	r0, [sp, #8]
;     pub status: Status<VS>,
 800eb44: a8 1c                        	adds	r0, r5, #2
 800eb46: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800eb48: 4c f6 74 20                  	movw	r0, #51828
 800eb4c: 00 21                        	movs	r1, #0
 800eb4e: c0 f6 01 00                  	movt	r0, #2049
 800eb52: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 800eb56: 4f f6 60 31                  	movw	r1, #64352
 800eb5a: 00 90                        	str	r0, [sp]
 800eb5c: 01 a8                        	add	r0, sp, #4
 800eb5e: 03 ab                        	add	r3, sp, #12
 800eb60: c0 f6 01 01                  	movt	r1, #2049
 800eb64: 06 22                        	movs	r2, #6
 800eb66: 01 94                        	str	r4, [sp, #4]
 800eb68: 07 f0 e2 fd                  	bl	#31684
 800eb6c: 4c f6 84 21                  	movw	r1, #51844
 800eb70: 03 ab                        	add	r3, sp, #12
 800eb72: c0 f6 01 01                  	movt	r1, #2049
 800eb76: 0b 22                        	movs	r2, #11
 800eb78: 00 91                        	str	r1, [sp]
 800eb7a: 4f f6 0c 51                  	movw	r1, #64780
 800eb7e: c0 f6 01 01                  	movt	r1, #2049
;     pub conn_handle: ConnectionHandle,
 800eb82: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800eb84: 07 f0 d4 fd                  	bl	#31656
;     pub channel_map: crate::ChannelClassification,
 800eb88: e9 1c                        	adds	r1, r5, #3
 800eb8a: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800eb8c: 4d f6 70 21                  	movw	r1, #55920
 800eb90: 03 ab                        	add	r3, sp, #12
 800eb92: c0 f6 01 01                  	movt	r1, #2049
 800eb96: 0b 22                        	movs	r2, #11
 800eb98: 00 91                        	str	r1, [sp]
 800eb9a: 4d f6 64 21                  	movw	r1, #55908
 800eb9e: c0 f6 01 01                  	movt	r1, #2049
 800eba2: 07 f0 c5 fd                  	bl	#31626
 800eba6: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 800ebaa: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 800ebae: b9 b1                        	cbz	r1, #46
 800ebb0: 08 b1                        	cbz	r0, #2
 800ebb2: 01 20                        	movs	r0, #1
 800ebb4: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8dfb3f4d59426135E+0xbc>
 800ebb6: 01 99                        	ldr	r1, [sp, #4]
 800ebb8: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 800ebbc: 09 78                        	ldrb	r1, [r1]
 800ebbe: d3 68                        	ldr	r3, [r2, #12]
 800ebc0: 49 07                        	lsls	r1, r1, #29
 800ebc2: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8dfb3f4d59426135E+0xb0>
 800ebc4: 4e f6 1c 41                  	movw	r1, #60444
 800ebc8: 02 22                        	movs	r2, #2
 800ebca: c0 f6 01 01                  	movt	r1, #2049
 800ebce: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8dfb3f4d59426135E+0xba>
 800ebd0: 4e f6 d6 41                  	movw	r1, #60630
 800ebd4: 01 22                        	movs	r2, #1
 800ebd6: c0 f6 01 01                  	movt	r1, #2049
 800ebda: 98 47                        	blx	r3
 800ebdc: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800ebe0: 00 28                        	cmp	r0, #0
 800ebe2: 18 bf                        	it	ne
 800ebe4: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800ebe6: 04 b0                        	add	sp, #16
 800ebe8: b0 bd                        	pop	{r4, r5, r7, pc}

0800ebea _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h9abc981626396e90:
 800ebea: f0 b5                        	push	{r4, r5, r6, r7, lr}
 800ebec: 03 af                        	add	r7, sp, #12
 800ebee: 2d e9 00 0f                  	push.w	{r8, r9, r10, r11}
 800ebf2: 8b b0                        	sub	sp, #44
 800ebf4: 06 68                        	ldr	r6, [r0]
;         writeln!(f, "{:?}", &self.0[..16])?;
 800ebf6: 44 f2 51 60                  	movw	r0, #18001
 800ebfa: c0 f6 01 00                  	movt	r0, #2049
 800ebfe: 0c 46                        	mov	r4, r1
 800ec00: 02 90                        	str	r0, [sp, #8]
 800ec02: 03 a8                        	add	r0, sp, #12
 800ec04: 01 90                        	str	r0, [sp, #4]
 800ec06: 01 aa                        	add	r2, sp, #4
 800ec08: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 800ec0c: 4d f6 a8 3b                  	movw	r11, #56232
 800ec10: 09 92                        	str	r2, [sp, #36]
 800ec12: 05 aa                        	add	r2, sp, #20
 800ec14: 4f f0 10 08                  	mov.w	r8, #16
 800ec18: 01 25                        	movs	r5, #1
 800ec1a: 4f f0 00 09                  	mov.w	r9, #0
 800ec1e: 4f f0 02 0a                  	mov.w	r10, #2
 800ec22: c0 f6 01 0b                  	movt	r11, #2049
 800ec26: 0a 95                        	str	r5, [sp, #40]
 800ec28: cd e9 07 99                  	strd	r9, r9, [sp, #28]
 800ec2c: cd e9 03 68                  	strd	r6, r8, [sp, #12]
 800ec30: cd f8 18 a0                  	str.w	r10, [sp, #24]
 800ec34: cd f8 14 b0                  	str.w	r11, [sp, #20]
 800ec38: 07 f0 24 fb                  	bl	#30280
 800ec3c: a0 bb                        	cbnz	r0, #104
;         writeln!(f, "{:?}", &self.0[16..32])?;
 800ec3e: 44 f2 51 60                  	movw	r0, #18001
;         intrinsics::offset(self, count)
 800ec42: 06 f1 10 02                  	add.w	r2, r6, #16
;         writeln!(f, "{:?}", &self.0[16..32])?;
 800ec46: c0 f6 01 00                  	movt	r0, #2049
 800ec4a: 02 90                        	str	r0, [sp, #8]
 800ec4c: 03 a8                        	add	r0, sp, #12
 800ec4e: 01 90                        	str	r0, [sp, #4]
 800ec50: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800ec54: 03 92                        	str	r2, [sp, #12]
 800ec56: 01 aa                        	add	r2, sp, #4
 800ec58: 09 92                        	str	r2, [sp, #36]
 800ec5a: 05 aa                        	add	r2, sp, #20
 800ec5c: 0a 95                        	str	r5, [sp, #40]
 800ec5e: cd e9 07 99                  	strd	r9, r9, [sp, #28]
 800ec62: cd f8 10 80                  	str.w	r8, [sp, #16]
 800ec66: cd e9 05 ba                  	strd	r11, r10, [sp, #20]
 800ec6a: 07 f0 0b fb                  	bl	#30230
 800ec6e: d8 b9                        	cbnz	r0, #54
;         writeln!(f, "{:?}", &self.0[32..39])
 800ec70: 44 f2 51 60                  	movw	r0, #18001
 800ec74: 07 22                        	movs	r2, #7
 800ec76: c0 f6 01 00                  	movt	r0, #2049
 800ec7a: 02 90                        	str	r0, [sp, #8]
 800ec7c: 03 a8                        	add	r0, sp, #12
 800ec7e: 01 90                        	str	r0, [sp, #4]
 800ec80: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800ec84: 04 92                        	str	r2, [sp, #16]
;         intrinsics::offset(self, count)
 800ec86: 06 f1 20 02                  	add.w	r2, r6, #32
;         writeln!(f, "{:?}", &self.0[32..39])
 800ec8a: 03 92                        	str	r2, [sp, #12]
 800ec8c: 01 22                        	movs	r2, #1
 800ec8e: 0a 92                        	str	r2, [sp, #40]
 800ec90: 01 aa                        	add	r2, sp, #4
 800ec92: 09 92                        	str	r2, [sp, #36]
 800ec94: 00 22                        	movs	r2, #0
 800ec96: cd e9 07 22                  	strd	r2, r2, [sp, #28]
 800ec9a: 02 22                        	movs	r2, #2
 800ec9c: cd e9 05 b2                  	strd	r11, r2, [sp, #20]
 800eca0: 05 aa                        	add	r2, sp, #20
 800eca2: 07 f0 ef fa                  	bl	#30174
 800eca6: 05 46                        	mov	r5, r0
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800eca8: 28 46                        	mov	r0, r5
 800ecaa: 0b b0                        	add	sp, #44
 800ecac: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 800ecb0: f0 bd                        	pop	{r4, r5, r6, r7, pc}

0800ecb2 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h9b3e12ca20917618:
 800ecb2: 00 68                        	ldr	r0, [r0]
 800ecb4: 03 f0 e0 bf                  	b.w	#16320 <_ZN73_$LT$bluetooth_hci..event..Event$LT$V$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h02a43957832844d7E+0x4>

0800ecb8 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h9ec9595cdaaa9fb7:
 800ecb8: 80 b5                        	push	{r7, lr}
 800ecba: 6f 46                        	mov	r7, sp
 800ecbc: a2 b0                        	sub	sp, #136
 800ecbe: 0a 68                        	ldr	r2, [r1]
 800ecc0: 00 68                        	ldr	r0, [r0]
;                 if f.debug_lower_hex() {
 800ecc2: d3 06                        	lsls	r3, r2, #27
 800ecc4: 1a d4                        	bmi	#52 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h9ec9595cdaaa9fb7E+0x48>
 800ecc6: 00 78                        	ldrb	r0, [r0]
;                 } else if f.debug_upper_hex() {
 800ecc8: 92 06                        	lsls	r2, r2, #26
 800ecca: 31 d4                        	bmi	#98 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h9ec9595cdaaa9fb7E+0x7c>
 800eccc: 64 28                        	cmp	r0, #100
 800ecce: 4f d3                        	blo	#158 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h9ec9595cdaaa9fb7E+0xbc>
 800ecd0: 48 f2 1f 52                  	movw	r2, #34079
 800ecd4: c5 f2 eb 12                  	movt	r2, #20971
 800ecd8: a0 fb 02 23                  	umull	r2, r3, r0, r2
 800ecdc: 6f f0 63 02                  	mvn	r2, #99
 800ece0: 5b 09                        	lsrs	r3, r3, #5
 800ece2: 03 fb 02 00                  	mla	r0, r3, r2, r0
 800ece6: 4e f6 ed 22                  	movw	r2, #60141
 800ecea: c0 f6 01 02                  	movt	r2, #2049
 800ecee: c0 b2                        	uxtb	r0, r0
 800ecf0: 32 f8 10 00                  	ldrh.w	r0, [r2, r0, lsl #1]
 800ecf4: 24 22                        	movs	r2, #36
 800ecf6: ad f8 2d 00                  	strh.w	r0, [sp, #45]
 800ecfa: 3d e0                        	b	#122 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h9ec9595cdaaa9fb7E+0xc4>
 800ecfc: 02 78                        	ldrb	r2, [r0]
 800ecfe: 02 f0 0f 03                  	and	r3, r2, #15
 800ed02: 03 f1 57 00                  	add.w	r0, r3, #87
 800ed06: 0a 2b                        	cmp	r3, #10
 800ed08: 38 bf                        	it	lo
 800ed0a: 03 f1 30 00                  	addlo.w	r0, r3, #48
 800ed0e: 00 23                        	movs	r3, #0
 800ed10: b3 eb 12 1f                  	cmp.w	r3, r2, lsr #4
 800ed14: 25 d0                        	beq	#74 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h9ec9595cdaaa9fb7E+0xae>
 800ed16: 4f ea 12 1c                  	lsr.w	r12, r2, #4
 800ed1a: 0c f1 57 03                  	add.w	r3, r12, #87
 800ed1e: a0 2a                        	cmp	r2, #160
 800ed20: 38 bf                        	it	lo
 800ed22: 0c f1 30 03                  	addlo.w	r3, r12, #48
 800ed26: 8d f8 86 30                  	strb.w	r3, [sp, #134]
 800ed2a: 7e 22                        	movs	r2, #126
 800ed2c: 02 23                        	movs	r3, #2
 800ed2e: 1a e0                        	b	#52 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h9ec9595cdaaa9fb7E+0xb2>
 800ed30: 00 f0 0f 03                  	and	r3, r0, #15
 800ed34: 03 f1 37 02                  	add.w	r2, r3, #55
 800ed38: 0a 2b                        	cmp	r3, #10
 800ed3a: 38 bf                        	it	lo
 800ed3c: 03 f1 30 02                  	addlo.w	r2, r3, #48
 800ed40: 00 23                        	movs	r3, #0
 800ed42: b3 eb 10 1f                  	cmp.w	r3, r0, lsr #4
 800ed46: 1c d0                        	beq	#56 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h9ec9595cdaaa9fb7E+0xce>
 800ed48: 4f ea 10 1c                  	lsr.w	r12, r0, #4
 800ed4c: 0c f1 37 03                  	add.w	r3, r12, #55
 800ed50: a0 28                        	cmp	r0, #160
 800ed52: 38 bf                        	it	lo
 800ed54: 0c f1 30 03                  	addlo.w	r3, r12, #48
 800ed58: 8d f8 86 30                  	strb.w	r3, [sp, #134]
 800ed5c: 7e 20                        	movs	r0, #126
 800ed5e: 02 23                        	movs	r3, #2
 800ed60: 11 e0                        	b	#34 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h9ec9595cdaaa9fb7E+0xd2>
 800ed62: 7f 22                        	movs	r2, #127
 800ed64: 01 23                        	movs	r3, #1
 800ed66: 8d f8 87 00                  	strb.w	r0, [sp, #135]
 800ed6a: 02 a8                        	add	r0, sp, #8
 800ed6c: 10 44                        	add	r0, r2
 800ed6e: 0e e0                        	b	#28 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h9ec9595cdaaa9fb7E+0xda>
 800ed70: 0a 28                        	cmp	r0, #10
 800ed72: 19 d2                        	bhs	#50 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h9ec9595cdaaa9fb7E+0xf4>
 800ed74: 26 22                        	movs	r2, #38
 800ed76: 03 46                        	mov	r3, r0
 800ed78: 03 f1 30 00                  	add.w	r0, r3, #48
 800ed7c: 02 ab                        	add	r3, sp, #8
 800ed7e: 98 54                        	strb	r0, [r3, r2]
 800ed80: 1b e0                        	b	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h9ec9595cdaaa9fb7E+0x106>
 800ed82: 7f 20                        	movs	r0, #127
 800ed84: 01 23                        	movs	r3, #1
 800ed86: 8d f8 87 20                  	strb.w	r2, [sp, #135]
 800ed8a: 02 aa                        	add	r2, sp, #8
 800ed8c: 10 44                        	add	r0, r2
 800ed8e: 4e f6 b5 32                  	movw	r2, #60341
 800ed92: cd e9 00 03                  	strd	r0, r3, [sp]
 800ed96: 08 46                        	mov	r0, r1
 800ed98: c0 f6 01 02                  	movt	r2, #2049
 800ed9c: 01 21                        	movs	r1, #1
 800ed9e: 02 23                        	movs	r3, #2
 800eda0: 06 f0 cc fe                  	bl	#28056
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800eda4: 22 b0                        	add	sp, #136
 800eda6: 80 bd                        	pop	{r7, pc}
 800eda8: 4e f6 ed 22                  	movw	r2, #60141
 800edac: c0 f6 01 02                  	movt	r2, #2049
 800edb0: 32 f8 10 00                  	ldrh.w	r0, [r2, r0, lsl #1]
 800edb4: 25 22                        	movs	r2, #37
 800edb6: ad f8 2d 00                  	strh.w	r0, [sp, #45]
 800edba: c2 f1 27 00                  	rsb.w	r0, r2, #39
 800edbe: 02 ab                        	add	r3, sp, #8
 800edc0: 1a 44                        	add	r2, r3
 800edc2: 00 23                        	movs	r3, #0
 800edc4: cd e9 00 20                  	strd	r2, r0, [sp]
 800edc8: 4e f6 b4 42                  	movw	r2, #60596
 800edcc: 08 46                        	mov	r0, r1
 800edce: c0 f6 01 02                  	movt	r2, #2049
 800edd2: 01 21                        	movs	r1, #1
 800edd4: 06 f0 b2 fe                  	bl	#28004
 800edd8: 22 b0                        	add	sp, #136
 800edda: 80 bd                        	pop	{r7, pc}

0800eddc _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::ha3926c3da22c2a93:
 800eddc: 00 68                        	ldr	r0, [r0]
; #[derive(Copy, Clone, Debug, PartialEq)]
 800edde: 00 78                        	ldrb	r0, [r0]
 800ede0: 50 b1                        	cbz	r0, #20
 800ede2: 01 28                        	cmp	r0, #1
 800ede4: 11 d0                        	beq	#34 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17ha3926c3da22c2a93E+0x32>
 800ede6: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 800edea: 4d f2 6c 01                  	movw	r1, #53356
 800edee: d3 68                        	ldr	r3, [r2, #12]
 800edf0: c0 f6 01 01                  	movt	r1, #2049
 800edf4: 10 22                        	movs	r2, #16
 800edf6: 18 47                        	bx	r3
 800edf8: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 800edfc: 4e f6 b0 01                  	movw	r1, #59568
 800ee00: d3 68                        	ldr	r3, [r2, #12]
 800ee02: c0 f6 01 01                  	movt	r1, #2049
 800ee06: 03 22                        	movs	r2, #3
 800ee08: 18 47                        	bx	r3
 800ee0a: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 800ee0e: 4e f6 b3 01                  	movw	r1, #59571
 800ee12: d3 68                        	ldr	r3, [r2, #12]
 800ee14: c0 f6 01 01                  	movt	r1, #2049
 800ee18: 02 22                        	movs	r2, #2
 800ee1a: 18 47                        	bx	r3

0800ee1c _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::ha4af24bb12b85ae9:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800ee1c: b0 b5                        	push	{r4, r5, r7, lr}
 800ee1e: 02 af                        	add	r7, sp, #8
 800ee20: 84 b0                        	sub	sp, #16
 800ee22: 0c 46                        	mov	r4, r1
 800ee24: 05 68                        	ldr	r5, [r0]
 800ee26: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 800ee2a: 20 22                        	movs	r2, #32
 800ee2c: cb 68                        	ldr	r3, [r1, #12]
 800ee2e: 4c f6 04 31                  	movw	r1, #51972
 800ee32: c0 f6 01 01                  	movt	r1, #2049
 800ee36: 98 47                        	blx	r3
 800ee38: 8d f8 08 00                  	strb.w	r0, [sp, #8]
;     pub status: Status<VS>,
 800ee3c: 05 f1 0a 00                  	add.w	r0, r5, #10
 800ee40: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800ee42: 4c f6 74 20                  	movw	r0, #51828
 800ee46: 00 21                        	movs	r1, #0
 800ee48: c0 f6 01 00                  	movt	r0, #2049
 800ee4c: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 800ee50: 4f f6 60 31                  	movw	r1, #64352
 800ee54: 00 90                        	str	r0, [sp]
 800ee56: 01 a8                        	add	r0, sp, #4
 800ee58: 03 ab                        	add	r3, sp, #12
 800ee5a: c0 f6 01 01                  	movt	r1, #2049
 800ee5e: 06 22                        	movs	r2, #6
 800ee60: 01 94                        	str	r4, [sp, #4]
 800ee62: 07 f0 65 fc                  	bl	#30922
;     pub conn_handle: ConnectionHandle,
 800ee66: 05 f1 08 01                  	add.w	r1, r5, #8
 800ee6a: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800ee6c: 4c f6 84 21                  	movw	r1, #51844
 800ee70: 03 ab                        	add	r3, sp, #12
 800ee72: c0 f6 01 01                  	movt	r1, #2049
 800ee76: 0b 22                        	movs	r2, #11
 800ee78: 00 91                        	str	r1, [sp]
 800ee7a: 4f f6 0c 51                  	movw	r1, #64780
 800ee7e: c0 f6 01 01                  	movt	r1, #2049
 800ee82: 07 f0 55 fc                  	bl	#30890
 800ee86: 4c f6 44 41                  	movw	r1, #52292
 800ee8a: 03 ab                        	add	r3, sp, #12
 800ee8c: c0 f6 01 01                  	movt	r1, #2049
 800ee90: 08 22                        	movs	r2, #8
 800ee92: 00 91                        	str	r1, [sp]
 800ee94: 4c f6 c4 31                  	movw	r1, #52164
 800ee98: c0 f6 01 01                  	movt	r1, #2049
;     pub features: crate::LinkLayerFeature,
 800ee9c: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800ee9e: 07 f0 47 fc                  	bl	#30862
 800eea2: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 800eea6: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 800eeaa: b9 b1                        	cbz	r1, #46
 800eeac: 08 b1                        	cbz	r0, #2
 800eeae: 01 20                        	movs	r0, #1
 800eeb0: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17ha4af24bb12b85ae9E+0xc0>
 800eeb2: 01 99                        	ldr	r1, [sp, #4]
 800eeb4: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 800eeb8: 09 78                        	ldrb	r1, [r1]
 800eeba: d3 68                        	ldr	r3, [r2, #12]
 800eebc: 49 07                        	lsls	r1, r1, #29
 800eebe: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17ha4af24bb12b85ae9E+0xb4>
 800eec0: 4e f6 1c 41                  	movw	r1, #60444
 800eec4: 02 22                        	movs	r2, #2
 800eec6: c0 f6 01 01                  	movt	r1, #2049
 800eeca: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17ha4af24bb12b85ae9E+0xbe>
 800eecc: 4e f6 d6 41                  	movw	r1, #60630
 800eed0: 01 22                        	movs	r2, #1
 800eed2: c0 f6 01 01                  	movt	r1, #2049
 800eed6: 98 47                        	blx	r3
 800eed8: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800eedc: 00 28                        	cmp	r0, #0
 800eede: 18 bf                        	it	ne
 800eee0: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800eee2: 04 b0                        	add	sp, #16
 800eee4: b0 bd                        	pop	{r4, r5, r7, pc}

0800eee6 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::haf22ee359747dd4a:
 800eee6: b0 b5                        	push	{r4, r5, r7, lr}
 800eee8: 02 af                        	add	r7, sp, #8
 800eeea: 84 b0                        	sub	sp, #16
 800eeec: 0c 46                        	mov	r4, r1
 800eeee: 05 68                        	ldr	r5, [r0]
 800eef0: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 800eef4: 10 22                        	movs	r2, #16
 800eef6: cb 68                        	ldr	r3, [r1, #12]
 800eef8: 4c f6 3c 71                  	movw	r1, #53052
 800eefc: c0 f6 01 01                  	movt	r1, #2049
 800ef00: 98 47                        	blx	r3
 800ef02: 8d f8 08 00                  	strb.w	r0, [sp, #8]
;     pub status: Status<VS>,
 800ef06: a8 1c                        	adds	r0, r5, #2
 800ef08: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800ef0a: 4c f6 74 20                  	movw	r0, #51828
 800ef0e: 00 21                        	movs	r1, #0
 800ef10: c0 f6 01 00                  	movt	r0, #2049
 800ef14: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 800ef18: 4f f6 60 31                  	movw	r1, #64352
 800ef1c: 00 90                        	str	r0, [sp]
 800ef1e: 01 a8                        	add	r0, sp, #4
 800ef20: 03 ab                        	add	r3, sp, #12
 800ef22: c0 f6 01 01                  	movt	r1, #2049
 800ef26: 06 22                        	movs	r2, #6
 800ef28: 01 94                        	str	r4, [sp, #4]
 800ef2a: 07 f0 01 fc                  	bl	#30722
 800ef2e: 4d f2 68 61                  	movw	r1, #54888
 800ef32: 03 ab                        	add	r3, sp, #12
 800ef34: c0 f6 01 01                  	movt	r1, #2049
 800ef38: 12 22                        	movs	r2, #18
 800ef3a: 00 91                        	str	r1, [sp]
 800ef3c: 4d f6 c8 11                  	movw	r1, #55752
 800ef40: c0 f6 01 01                  	movt	r1, #2049
;     pub data_packet_length: u16,
 800ef44: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800ef46: 07 f0 f3 fb                  	bl	#30694
;     pub data_packet_count: u8,
 800ef4a: e9 1c                        	adds	r1, r5, #3
 800ef4c: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800ef4e: 4d f2 78 31                  	movw	r1, #54136
 800ef52: 03 ab                        	add	r3, sp, #12
 800ef54: c0 f6 01 01                  	movt	r1, #2049
 800ef58: 11 22                        	movs	r2, #17
 800ef5a: 00 91                        	str	r1, [sp]
 800ef5c: 4d f6 da 11                  	movw	r1, #55770
 800ef60: c0 f6 01 01                  	movt	r1, #2049
 800ef64: 07 f0 e4 fb                  	bl	#30664
 800ef68: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 800ef6c: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 800ef70: b9 b1                        	cbz	r1, #46
 800ef72: 08 b1                        	cbz	r0, #2
 800ef74: 01 20                        	movs	r0, #1
 800ef76: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17haf22ee359747dd4aE+0xbc>
 800ef78: 01 99                        	ldr	r1, [sp, #4]
 800ef7a: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 800ef7e: 09 78                        	ldrb	r1, [r1]
 800ef80: d3 68                        	ldr	r3, [r2, #12]
 800ef82: 49 07                        	lsls	r1, r1, #29
 800ef84: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17haf22ee359747dd4aE+0xb0>
 800ef86: 4e f6 1c 41                  	movw	r1, #60444
 800ef8a: 02 22                        	movs	r2, #2
 800ef8c: c0 f6 01 01                  	movt	r1, #2049
 800ef90: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17haf22ee359747dd4aE+0xba>
 800ef92: 4e f6 d6 41                  	movw	r1, #60630
 800ef96: 01 22                        	movs	r2, #1
 800ef98: c0 f6 01 01                  	movt	r1, #2049
 800ef9c: 98 47                        	blx	r3
 800ef9e: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800efa2: 00 28                        	cmp	r0, #0
 800efa4: 18 bf                        	it	ne
 800efa6: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800efa8: 04 b0                        	add	sp, #16
 800efaa: b0 bd                        	pop	{r4, r5, r7, pc}

0800efac _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::hb1564ea3b236f17c:
 800efac: b0 b5                        	push	{r4, r5, r7, lr}
 800efae: 02 af                        	add	r7, sp, #8
 800efb0: 84 b0                        	sub	sp, #16
 800efb2: 05 68                        	ldr	r5, [r0]
 800efb4: 0c 46                        	mov	r4, r1
; #[derive(Copy, Clone, Debug, PartialEq)]
 800efb6: 28 78                        	ldrb	r0, [r5]
 800efb8: 41 28                        	cmp	r0, #65
 800efba: 28 bf                        	it	hs
 800efbc: 41 20                        	movhs	r0, #65
 800efbe: df e8 10 f0                  	tbh	[pc, r0, lsl #1]

0800efc2 $d.86:
 800efc2:	42 00 4b 00	.word	0x004b0042
 800efc6:	54 00 5d 00	.word	0x005d0054
 800efca:	66 00 6f 00	.word	0x006f0066
 800efce:	78 00 81 00	.word	0x00810078
 800efd2:	8a 00 93 00	.word	0x0093008a
 800efd6:	9c 00 a5 00	.word	0x00a5009c
 800efda:	ae 00 b7 00	.word	0x00b700ae
 800efde:	c0 00 c9 00	.word	0x00c900c0
 800efe2:	d2 00 db 00	.word	0x00db00d2
 800efe6:	e4 00 ed 00	.word	0x00ed00e4
 800efea:	f6 00 ff 00	.word	0x00ff00f6
 800efee:	08 01 11 01	.word	0x01110108
 800eff2:	1a 01 23 01	.word	0x0123011a
 800eff6:	2c 01 35 01	.word	0x0135012c
 800effa:	3e 01 47 01	.word	0x0147013e
 800effe:	50 01 59 01	.word	0x01590150
 800f002:	62 01 6b 01	.word	0x016b0162
 800f006:	74 01 7d 01	.word	0x017d0174
 800f00a:	86 01 8f 01	.word	0x018f0186
 800f00e:	98 01 a1 01	.word	0x01a10198
 800f012:	aa 01 b3 01	.word	0x01b301aa
 800f016:	bc 01 c5 01	.word	0x01c501bc
 800f01a:	ce 01 d7 01	.word	0x01d701ce
 800f01e:	e0 01 e9 01	.word	0x01e901e0
 800f022:	f2 01 fb 01	.word	0x01fb01f2
 800f026:	04 02 0d 02	.word	0x020d0204
 800f02a:	16 02 1f 02	.word	0x021f0216
 800f02e:	28 02 31 02	.word	0x02310228
 800f032:	3a 02 43 02	.word	0x0243023a
 800f036:	4c 02 55 02	.word	0x0255024c
 800f03a:	5e 02 67 02	.word	0x0267025e
 800f03e:	70 02 79 02	.word	0x02790270
 800f042:	82 02 92 02	.word	0x02920282

0800f046 $t.87:
 800f046: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f04a: 07 22                        	movs	r2, #7
 800f04c: cb 68                        	ldr	r3, [r1, #12]
 800f04e: 4e f6 14 51                  	movw	r1, #60692
 800f052: c0 f6 01 01                  	movt	r1, #2049
 800f056: 3e e2                        	b	#1148 <$t.87+0x494>
 800f058: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f05c: 0e 22                        	movs	r2, #14
 800f05e: cb 68                        	ldr	r3, [r1, #12]
 800f060: 4e f6 1b 51                  	movw	r1, #60699
 800f064: c0 f6 01 01                  	movt	r1, #2049
 800f068: 35 e2                        	b	#1130 <$t.87+0x494>
 800f06a: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f06e: 13 22                        	movs	r2, #19
 800f070: cb 68                        	ldr	r3, [r1, #12]
 800f072: 4e f6 29 51                  	movw	r1, #60713
 800f076: c0 f6 01 01                  	movt	r1, #2049
 800f07a: 2c e2                        	b	#1112 <$t.87+0x494>
 800f07c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f080: 0f 22                        	movs	r2, #15
 800f082: cb 68                        	ldr	r3, [r1, #12]
 800f084: 4e f6 3c 51                  	movw	r1, #60732
 800f088: c0 f6 01 01                  	movt	r1, #2049
 800f08c: 23 e2                        	b	#1094 <$t.87+0x494>
 800f08e: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f092: 0b 22                        	movs	r2, #11
 800f094: cb 68                        	ldr	r3, [r1, #12]
 800f096: 4e f6 4b 51                  	movw	r1, #60747
 800f09a: c0 f6 01 01                  	movt	r1, #2049
 800f09e: 1a e2                        	b	#1076 <$t.87+0x494>
 800f0a0: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f0a4: 0b 22                        	movs	r2, #11
 800f0a6: cb 68                        	ldr	r3, [r1, #12]
 800f0a8: 4e f6 56 51                  	movw	r1, #60758
 800f0ac: c0 f6 01 01                  	movt	r1, #2049
 800f0b0: 11 e2                        	b	#1058 <$t.87+0x494>
 800f0b2: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f0b6: 0f 22                        	movs	r2, #15
 800f0b8: cb 68                        	ldr	r3, [r1, #12]
 800f0ba: 4e f6 61 51                  	movw	r1, #60769
 800f0be: c0 f6 01 01                  	movt	r1, #2049
 800f0c2: 08 e2                        	b	#1040 <$t.87+0x494>
 800f0c4: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f0c8: 0b 22                        	movs	r2, #11
 800f0ca: cb 68                        	ldr	r3, [r1, #12]
 800f0cc: 4e f6 70 51                  	movw	r1, #60784
 800f0d0: c0 f6 01 01                  	movt	r1, #2049
 800f0d4: ff e1                        	b	#1022 <$t.87+0x494>
 800f0d6: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f0da: 11 22                        	movs	r2, #17
 800f0dc: cb 68                        	ldr	r3, [r1, #12]
 800f0de: 4e f6 7b 51                  	movw	r1, #60795
 800f0e2: c0 f6 01 01                  	movt	r1, #2049
 800f0e6: f6 e1                        	b	#1004 <$t.87+0x494>
 800f0e8: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f0ec: 18 22                        	movs	r2, #24
 800f0ee: cb 68                        	ldr	r3, [r1, #12]
 800f0f0: 4e f6 8c 51                  	movw	r1, #60812
 800f0f4: c0 f6 01 01                  	movt	r1, #2049
 800f0f8: ed e1                        	b	#986 <$t.87+0x494>
 800f0fa: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f0fe: 1b 22                        	movs	r2, #27
 800f100: cb 68                        	ldr	r3, [r1, #12]
 800f102: 4e f6 a4 51                  	movw	r1, #60836
 800f106: c0 f6 01 01                  	movt	r1, #2049
 800f10a: e4 e1                        	b	#968 <$t.87+0x494>
 800f10c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f110: 17 22                        	movs	r2, #23
 800f112: cb 68                        	ldr	r3, [r1, #12]
 800f114: 4e f6 bf 51                  	movw	r1, #60863
 800f118: c0 f6 01 01                  	movt	r1, #2049
 800f11c: db e1                        	b	#950 <$t.87+0x494>
 800f11e: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f122: 11 22                        	movs	r2, #17
 800f124: cb 68                        	ldr	r3, [r1, #12]
 800f126: 4e f6 d6 51                  	movw	r1, #60886
 800f12a: c0 f6 01 01                  	movt	r1, #2049
 800f12e: d2 e1                        	b	#932 <$t.87+0x494>
 800f130: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f134: 10 22                        	movs	r2, #16
 800f136: cb 68                        	ldr	r3, [r1, #12]
 800f138: 4d f2 7c 01                  	movw	r1, #53372
 800f13c: c0 f6 01 01                  	movt	r1, #2049
 800f140: c9 e1                        	b	#914 <$t.87+0x494>
 800f142: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f146: 1a 22                        	movs	r2, #26
 800f148: cb 68                        	ldr	r3, [r1, #12]
 800f14a: 4e f6 e7 51                  	movw	r1, #60903
 800f14e: c0 f6 01 01                  	movt	r1, #2049
 800f152: c0 e1                        	b	#896 <$t.87+0x494>
 800f154: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f158: 12 22                        	movs	r2, #18
 800f15a: cb 68                        	ldr	r3, [r1, #12]
 800f15c: 4e f6 01 61                  	movw	r1, #60929
 800f160: c0 f6 01 01                  	movt	r1, #2049
 800f164: b7 e1                        	b	#878 <$t.87+0x494>
 800f166: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f16a: 15 22                        	movs	r2, #21
 800f16c: cb 68                        	ldr	r3, [r1, #12]
 800f16e: 4e f6 13 61                  	movw	r1, #60947
 800f172: c0 f6 01 01                  	movt	r1, #2049
 800f176: ae e1                        	b	#860 <$t.87+0x494>
 800f178: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f17c: 12 22                        	movs	r2, #18
 800f17e: cb 68                        	ldr	r3, [r1, #12]
 800f180: 4e f6 28 61                  	movw	r1, #60968
 800f184: c0 f6 01 01                  	movt	r1, #2049
 800f188: a5 e1                        	b	#842 <$t.87+0x494>
 800f18a: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f18e: 11 22                        	movs	r2, #17
 800f190: cb 68                        	ldr	r3, [r1, #12]
 800f192: 4e f6 3a 61                  	movw	r1, #60986
 800f196: c0 f6 01 01                  	movt	r1, #2049
 800f19a: 9c e1                        	b	#824 <$t.87+0x494>
 800f19c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f1a0: 17 22                        	movs	r2, #23
 800f1a2: cb 68                        	ldr	r3, [r1, #12]
 800f1a4: 4e f6 4b 61                  	movw	r1, #61003
 800f1a8: c0 f6 01 01                  	movt	r1, #2049
 800f1ac: 93 e1                        	b	#806 <$t.87+0x494>
 800f1ae: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f1b2: 1d 22                        	movs	r2, #29
 800f1b4: cb 68                        	ldr	r3, [r1, #12]
 800f1b6: 4e f6 62 61                  	movw	r1, #61026
 800f1ba: c0 f6 01 01                  	movt	r1, #2049
 800f1be: 8a e1                        	b	#788 <$t.87+0x494>
 800f1c0: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f1c4: 19 22                        	movs	r2, #25
 800f1c6: cb 68                        	ldr	r3, [r1, #12]
 800f1c8: 4e f6 7f 61                  	movw	r1, #61055
 800f1cc: c0 f6 01 01                  	movt	r1, #2049
 800f1d0: 81 e1                        	b	#770 <$t.87+0x494>
 800f1d2: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f1d6: 1a 22                        	movs	r2, #26
 800f1d8: cb 68                        	ldr	r3, [r1, #12]
 800f1da: 4e f6 98 61                  	movw	r1, #61080
 800f1de: c0 f6 01 01                  	movt	r1, #2049
 800f1e2: 78 e1                        	b	#752 <$t.87+0x494>
 800f1e4: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f1e8: 10 22                        	movs	r2, #16
 800f1ea: cb 68                        	ldr	r3, [r1, #12]
 800f1ec: 4d f2 8c 01                  	movw	r1, #53388
 800f1f0: c0 f6 01 01                  	movt	r1, #2049
 800f1f4: 6f e1                        	b	#734 <$t.87+0x494>
 800f1f6: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f1fa: 11 22                        	movs	r2, #17
 800f1fc: cb 68                        	ldr	r3, [r1, #12]
 800f1fe: 4e f6 b2 61                  	movw	r1, #61106
 800f202: c0 f6 01 01                  	movt	r1, #2049
 800f206: 66 e1                        	b	#716 <$t.87+0x494>
 800f208: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f20c: 0d 22                        	movs	r2, #13
 800f20e: cb 68                        	ldr	r3, [r1, #12]
 800f210: 4e f6 c3 61                  	movw	r1, #61123
 800f214: c0 f6 01 01                  	movt	r1, #2049
 800f218: 5d e1                        	b	#698 <$t.87+0x494>
 800f21a: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f21e: 18 22                        	movs	r2, #24
 800f220: cb 68                        	ldr	r3, [r1, #12]
 800f222: 4e f6 d0 61                  	movw	r1, #61136
 800f226: c0 f6 01 01                  	movt	r1, #2049
 800f22a: 54 e1                        	b	#680 <$t.87+0x494>
 800f22c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f230: 11 22                        	movs	r2, #17
 800f232: cb 68                        	ldr	r3, [r1, #12]
 800f234: 4e f6 e8 61                  	movw	r1, #61160
 800f238: c0 f6 01 01                  	movt	r1, #2049
 800f23c: 4b e1                        	b	#662 <$t.87+0x494>
 800f23e: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f242: 13 22                        	movs	r2, #19
 800f244: cb 68                        	ldr	r3, [r1, #12]
 800f246: 4e f6 f9 61                  	movw	r1, #61177
 800f24a: c0 f6 01 01                  	movt	r1, #2049
 800f24e: 42 e1                        	b	#644 <$t.87+0x494>
 800f250: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f254: 12 22                        	movs	r2, #18
 800f256: cb 68                        	ldr	r3, [r1, #12]
 800f258: 4e f6 0c 71                  	movw	r1, #61196
 800f25c: c0 f6 01 01                  	movt	r1, #2049
 800f260: 39 e1                        	b	#626 <$t.87+0x494>
 800f262: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f266: 14 22                        	movs	r2, #20
 800f268: cb 68                        	ldr	r3, [r1, #12]
 800f26a: 4e f6 1e 71                  	movw	r1, #61214
 800f26e: c0 f6 01 01                  	movt	r1, #2049
 800f272: 30 e1                        	b	#608 <$t.87+0x494>
 800f274: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f278: 10 22                        	movs	r2, #16
 800f27a: cb 68                        	ldr	r3, [r1, #12]
 800f27c: 4d f2 9c 01                  	movw	r1, #53404
 800f280: c0 f6 01 01                  	movt	r1, #2049
 800f284: 27 e1                        	b	#590 <$t.87+0x494>
 800f286: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f28a: 1c 22                        	movs	r2, #28
 800f28c: cb 68                        	ldr	r3, [r1, #12]
 800f28e: 4e f6 32 71                  	movw	r1, #61234
 800f292: c0 f6 01 01                  	movt	r1, #2049
 800f296: 1e e1                        	b	#572 <$t.87+0x494>
 800f298: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f29c: 14 22                        	movs	r2, #20
 800f29e: cb 68                        	ldr	r3, [r1, #12]
 800f2a0: 4e f6 4e 71                  	movw	r1, #61262
 800f2a4: c0 f6 01 01                  	movt	r1, #2049
 800f2a8: 15 e1                        	b	#554 <$t.87+0x494>
 800f2aa: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f2ae: 12 22                        	movs	r2, #18
 800f2b0: cb 68                        	ldr	r3, [r1, #12]
 800f2b2: 4e f6 62 71                  	movw	r1, #61282
 800f2b6: c0 f6 01 01                  	movt	r1, #2049
 800f2ba: 0c e1                        	b	#536 <$t.87+0x494>
 800f2bc: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f2c0: 17 22                        	movs	r2, #23
 800f2c2: cb 68                        	ldr	r3, [r1, #12]
 800f2c4: 4e f6 74 71                  	movw	r1, #61300
 800f2c8: c0 f6 01 01                  	movt	r1, #2049
 800f2cc: 03 e1                        	b	#518 <$t.87+0x494>
 800f2ce: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f2d2: 10 22                        	movs	r2, #16
 800f2d4: cb 68                        	ldr	r3, [r1, #12]
 800f2d6: 4d f2 ac 01                  	movw	r1, #53420
 800f2da: c0 f6 01 01                  	movt	r1, #2049
 800f2de: fa e0                        	b	#500 <$t.87+0x494>
 800f2e0: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f2e4: 1b 22                        	movs	r2, #27
 800f2e6: cb 68                        	ldr	r3, [r1, #12]
 800f2e8: 4e f6 8b 71                  	movw	r1, #61323
 800f2ec: c0 f6 01 01                  	movt	r1, #2049
 800f2f0: f1 e0                        	b	#482 <$t.87+0x494>
 800f2f2: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f2f6: 16 22                        	movs	r2, #22
 800f2f8: cb 68                        	ldr	r3, [r1, #12]
 800f2fa: 4e f6 a6 71                  	movw	r1, #61350
 800f2fe: c0 f6 01 01                  	movt	r1, #2049
 800f302: e8 e0                        	b	#464 <$t.87+0x494>
 800f304: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f308: 18 22                        	movs	r2, #24
 800f30a: cb 68                        	ldr	r3, [r1, #12]
 800f30c: 4e f6 bc 71                  	movw	r1, #61372
 800f310: c0 f6 01 01                  	movt	r1, #2049
 800f314: df e0                        	b	#446 <$t.87+0x494>
 800f316: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f31a: 0d 22                        	movs	r2, #13
 800f31c: cb 68                        	ldr	r3, [r1, #12]
 800f31e: 4e f6 d4 71                  	movw	r1, #61396
 800f322: c0 f6 01 01                  	movt	r1, #2049
 800f326: d6 e0                        	b	#428 <$t.87+0x494>
 800f328: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f32c: 1e 22                        	movs	r2, #30
 800f32e: cb 68                        	ldr	r3, [r1, #12]
 800f330: 4e f6 e1 71                  	movw	r1, #61409
 800f334: c0 f6 01 01                  	movt	r1, #2049
 800f338: cd e0                        	b	#410 <$t.87+0x494>
 800f33a: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f33e: 1d 22                        	movs	r2, #29
 800f340: cb 68                        	ldr	r3, [r1, #12]
 800f342: 4e f6 ff 71                  	movw	r1, #61439
 800f346: c0 f6 01 01                  	movt	r1, #2049
 800f34a: c4 e0                        	b	#392 <$t.87+0x494>
 800f34c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f350: 14 22                        	movs	r2, #20
 800f352: cb 68                        	ldr	r3, [r1, #12]
 800f354: 4f f2 1c 01                  	movw	r1, #61468
 800f358: c0 f6 01 01                  	movt	r1, #2049
 800f35c: bb e0                        	b	#374 <$t.87+0x494>
 800f35e: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f362: 18 22                        	movs	r2, #24
 800f364: cb 68                        	ldr	r3, [r1, #12]
 800f366: 4f f2 30 01                  	movw	r1, #61488
 800f36a: c0 f6 01 01                  	movt	r1, #2049
 800f36e: b2 e0                        	b	#356 <$t.87+0x494>
 800f370: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f374: 0b 22                        	movs	r2, #11
 800f376: cb 68                        	ldr	r3, [r1, #12]
 800f378: 4f f2 48 01                  	movw	r1, #61512
 800f37c: c0 f6 01 01                  	movt	r1, #2049
 800f380: a9 e0                        	b	#338 <$t.87+0x494>
 800f382: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f386: 21 22                        	movs	r2, #33
 800f388: cb 68                        	ldr	r3, [r1, #12]
 800f38a: 4f f2 53 01                  	movw	r1, #61523
 800f38e: c0 f6 01 01                  	movt	r1, #2049
 800f392: a0 e0                        	b	#320 <$t.87+0x494>
 800f394: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f398: 14 22                        	movs	r2, #20
 800f39a: cb 68                        	ldr	r3, [r1, #12]
 800f39c: 4f f2 74 01                  	movw	r1, #61556
 800f3a0: c0 f6 01 01                  	movt	r1, #2049
 800f3a4: 97 e0                        	b	#302 <$t.87+0x494>
 800f3a6: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f3aa: 1c 22                        	movs	r2, #28
 800f3ac: cb 68                        	ldr	r3, [r1, #12]
 800f3ae: 4f f2 88 01                  	movw	r1, #61576
 800f3b2: c0 f6 01 01                  	movt	r1, #2049
 800f3b6: 8e e0                        	b	#284 <$t.87+0x494>
 800f3b8: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f3bc: 16 22                        	movs	r2, #22
 800f3be: cb 68                        	ldr	r3, [r1, #12]
 800f3c0: 4f f2 a4 01                  	movw	r1, #61604
 800f3c4: c0 f6 01 01                  	movt	r1, #2049
 800f3c8: 85 e0                        	b	#266 <$t.87+0x494>
 800f3ca: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f3ce: 11 22                        	movs	r2, #17
 800f3d0: cb 68                        	ldr	r3, [r1, #12]
 800f3d2: 4f f2 ba 01                  	movw	r1, #61626
 800f3d6: c0 f6 01 01                  	movt	r1, #2049
 800f3da: 7c e0                        	b	#248 <$t.87+0x494>
 800f3dc: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f3e0: 16 22                        	movs	r2, #22
 800f3e2: cb 68                        	ldr	r3, [r1, #12]
 800f3e4: 4f f2 cb 01                  	movw	r1, #61643
 800f3e8: c0 f6 01 01                  	movt	r1, #2049
 800f3ec: 73 e0                        	b	#230 <$t.87+0x494>
 800f3ee: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f3f2: 15 22                        	movs	r2, #21
 800f3f4: cb 68                        	ldr	r3, [r1, #12]
 800f3f6: 4f f2 e1 01                  	movw	r1, #61665
 800f3fa: c0 f6 01 01                  	movt	r1, #2049
 800f3fe: 6a e0                        	b	#212 <$t.87+0x494>
 800f400: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f404: 10 22                        	movs	r2, #16
 800f406: cb 68                        	ldr	r3, [r1, #12]
 800f408: 4d f2 bc 01                  	movw	r1, #53436
 800f40c: c0 f6 01 01                  	movt	r1, #2049
 800f410: 61 e0                        	b	#194 <$t.87+0x494>
 800f412: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f416: 1f 22                        	movs	r2, #31
 800f418: cb 68                        	ldr	r3, [r1, #12]
 800f41a: 4f f2 f6 01                  	movw	r1, #61686
 800f41e: c0 f6 01 01                  	movt	r1, #2049
 800f422: 58 e0                        	b	#176 <$t.87+0x494>
 800f424: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f428: 25 22                        	movs	r2, #37
 800f42a: cb 68                        	ldr	r3, [r1, #12]
 800f42c: 4f f2 15 11                  	movw	r1, #61717
 800f430: c0 f6 01 01                  	movt	r1, #2049
 800f434: 4f e0                        	b	#158 <$t.87+0x494>
 800f436: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f43a: 0f 22                        	movs	r2, #15
 800f43c: cb 68                        	ldr	r3, [r1, #12]
 800f43e: 4f f2 3a 11                  	movw	r1, #61754
 800f442: c0 f6 01 01                  	movt	r1, #2049
 800f446: 46 e0                        	b	#140 <$t.87+0x494>
 800f448: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f44c: 23 22                        	movs	r2, #35
 800f44e: cb 68                        	ldr	r3, [r1, #12]
 800f450: 4f f2 49 11                  	movw	r1, #61769
 800f454: c0 f6 01 01                  	movt	r1, #2049
 800f458: 3d e0                        	b	#122 <$t.87+0x494>
 800f45a: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f45e: 0e 22                        	movs	r2, #14
 800f460: cb 68                        	ldr	r3, [r1, #12]
 800f462: 4f f2 6c 11                  	movw	r1, #61804
 800f466: c0 f6 01 01                  	movt	r1, #2049
 800f46a: 34 e0                        	b	#104 <$t.87+0x494>
 800f46c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f470: 20 22                        	movs	r2, #32
 800f472: cb 68                        	ldr	r3, [r1, #12]
 800f474: 4c f6 84 31                  	movw	r1, #52100
 800f478: c0 f6 01 01                  	movt	r1, #2049
 800f47c: 2b e0                        	b	#86 <$t.87+0x494>
 800f47e: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f482: 12 22                        	movs	r2, #18
 800f484: cb 68                        	ldr	r3, [r1, #12]
 800f486: 4f f2 7a 11                  	movw	r1, #61818
 800f48a: c0 f6 01 01                  	movt	r1, #2049
 800f48e: 22 e0                        	b	#68 <$t.87+0x494>
 800f490: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f494: 1e 22                        	movs	r2, #30
 800f496: cb 68                        	ldr	r3, [r1, #12]
 800f498: 4f f2 8c 11                  	movw	r1, #61836
 800f49c: c0 f6 01 01                  	movt	r1, #2049
 800f4a0: 19 e0                        	b	#50 <$t.87+0x494>
 800f4a2: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f4a6: 1b 22                        	movs	r2, #27
 800f4a8: cb 68                        	ldr	r3, [r1, #12]
 800f4aa: 4f f2 aa 11                  	movw	r1, #61866
 800f4ae: c0 f6 01 01                  	movt	r1, #2049
 800f4b2: 10 e0                        	b	#32 <$t.87+0x494>
 800f4b4: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f4b8: 13 22                        	movs	r2, #19
 800f4ba: cb 68                        	ldr	r3, [r1, #12]
 800f4bc: 4f f2 c5 11                  	movw	r1, #61893
 800f4c0: c0 f6 01 01                  	movt	r1, #2049
 800f4c4: 07 e0                        	b	#14 <$t.87+0x494>
 800f4c6: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f4ca: 2e 22                        	movs	r2, #46
 800f4cc: cb 68                        	ldr	r3, [r1, #12]
 800f4ce: 4f f2 d8 11                  	movw	r1, #61912
 800f4d2: c0 f6 01 01                  	movt	r1, #2049
 800f4d6: 98 47                        	blx	r3
 800f4d8: 04 46                        	mov	r4, r0
 800f4da: 00 2c                        	cmp	r4, #0
 800f4dc: 18 bf                        	it	ne
 800f4de: 01 24                        	movne	r4, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800f4e0: 20 46                        	mov	r0, r4
 800f4e2: 04 b0                        	add	sp, #16
 800f4e4: b0 bd                        	pop	{r4, r5, r7, pc}
 800f4e6: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f4ea: 06 22                        	movs	r2, #6
 800f4ec: cb 68                        	ldr	r3, [r1, #12]
 800f4ee: 4e f6 fc 41                  	movw	r1, #60668
 800f4f2: c0 f6 01 01                  	movt	r1, #2049
 800f4f6: 98 47                        	blx	r3
; #[derive(Copy, Clone, Debug, PartialEq)]
 800f4f8: 4c f6 50 52                  	movw	r2, #52560
 800f4fc: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800f500: 00 20                        	movs	r0, #0
 800f502: 03 a9                        	add	r1, sp, #12
 800f504: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 800f508: c0 f6 01 02                  	movt	r2, #2049
 800f50c: 01 90                        	str	r0, [sp, #4]
 800f50e: 68 46                        	mov	r0, sp
 800f510: 00 94                        	str	r4, [sp]
;     Vendor(V),
 800f512: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug, PartialEq)]
 800f514: 07 f0 89 fa                  	bl	#29970
 800f518: 01 98                        	ldr	r0, [sp, #4]
 800f51a: 9d f8 08 40                  	ldrb.w	r4, [sp, #8]
 800f51e: 00 28                        	cmp	r0, #0
 800f520: db d0                        	beq	#-74 <$t.87+0x498>
 800f522: 1c b1                        	cbz	r4, #6
 800f524: 01 24                        	movs	r4, #1
 800f526: 8d f8 08 40                  	strb.w	r4, [sp, #8]
 800f52a: d6 e7                        	b	#-84 <$t.87+0x498>
 800f52c: 01 28                        	cmp	r0, #1
 800f52e: 11 d1                        	bne	#34 <$t.87+0x512>
 800f530: 9d f8 09 00                  	ldrb.w	r0, [sp, #9]
 800f534: 70 b1                        	cbz	r0, #28
 800f536: 00 99                        	ldr	r1, [sp]
 800f538: 08 78                        	ldrb	r0, [r1]
 800f53a: 40 07                        	lsls	r0, r0, #29
 800f53c: 0a d4                        	bmi	#20 <$t.87+0x512>
 800f53e: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 800f542: 01 22                        	movs	r2, #1
 800f544: cb 68                        	ldr	r3, [r1, #12]
 800f546: 4e f6 21 41                  	movw	r1, #60449
 800f54a: c0 f6 01 01                  	movt	r1, #2049
 800f54e: 01 24                        	movs	r4, #1
 800f550: 98 47                        	blx	r3
 800f552: 50 b9                        	cbnz	r0, #20
 800f554: 00 99                        	ldr	r1, [sp]
 800f556: 01 22                        	movs	r2, #1
 800f558: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 800f55c: cb 68                        	ldr	r3, [r1, #12]
 800f55e: 4f f2 69 61                  	movw	r1, #63081
 800f562: c0 f6 01 01                  	movt	r1, #2049
 800f566: 98 47                        	blx	r3
 800f568: 04 46                        	mov	r4, r0
 800f56a: 8d f8 08 40                  	strb.w	r4, [sp, #8]
 800f56e: b4 e7                        	b	#-152 <$t.87+0x498>

0800f570 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::hb225de18a2bf8cb1:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800f570: b0 b5                        	push	{r4, r5, r7, lr}
 800f572: 02 af                        	add	r7, sp, #8
 800f574: 84 b0                        	sub	sp, #16
 800f576: 05 68                        	ldr	r5, [r0]
 800f578: 0c 46                        	mov	r4, r1
; #[derive(Clone, Copy, Debug)]
 800f57a: 28 78                        	ldrb	r0, [r5]
 800f57c: df e8 10 f0                  	tbh	[pc, r0, lsl #1]

0800f580 $d.89:
 800f580:	21 00 38 00	.word	0x00380021
 800f584:	41 00 58 00	.word	0x00580041
 800f588:	61 00 6a 00	.word	0x006a0061
 800f58c:	73 00 7e 00	.word	0x007e0073
 800f590:	95 00 ac 00	.word	0x00ac0095
 800f594:	c3 00 da 00	.word	0x00da00c3
 800f598:	e3 00 fb 00	.word	0x00fb00e3
 800f59c:	12 01 1b 01	.word	0x011b0112
 800f5a0:	32 01 49 01	.word	0x01490132
 800f5a4:	60 01 77 01	.word	0x01770160
 800f5a8:	80 01 89 01	.word	0x01890180
 800f5ac:	a0 01 b7 01	.word	0x01b701a0
 800f5b0:	ce 01 e5 01	.word	0x01e501ce
 800f5b4:	ee 01 f7 01	.word	0x01f701ee
 800f5b8:	0e 02 25 02	.word	0x0225020e
 800f5bc:	2e 02 76 02	.word	0x0276022e
 800f5c0:	8d 02		.short	0x028d

0800f5c2 $t.90:
 800f5c2: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f5c6: 10 22                        	movs	r2, #16
 800f5c8: cb 68                        	ldr	r3, [r1, #12]
 800f5ca: 4d f2 8c 11                  	movw	r1, #53644
 800f5ce: c0 f6 01 01                  	movt	r1, #2049
 800f5d2: 98 47                        	blx	r3
 800f5d4: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800f5d8: 00 20                        	movs	r0, #0
 800f5da: 4f f6 54 62                  	movw	r2, #65108
 800f5de: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 800f5e2: 01 90                        	str	r0, [sp, #4]
;     CoprocessorReady(FirmwareKind),
 800f5e4: 68 1c                        	adds	r0, r5, #1
 800f5e6: 03 a9                        	add	r1, sp, #12
 800f5e8: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Copy, Debug)]
 800f5ea: c0 f6 01 02                  	movt	r2, #2049
 800f5ee: 0b e2                        	b	#1046 <$t.90+0x44a>
 800f5f0: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f5f4: 1d 22                        	movs	r2, #29
 800f5f6: cb 68                        	ldr	r3, [r1, #12]
 800f5f8: 4f f6 64 61                  	movw	r1, #65124
 800f5fc: c0 f6 01 01                  	movt	r1, #2049
 800f600: 39 e0                        	b	#114 <$t.90+0xb8>
 800f602: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f606: 12 22                        	movs	r2, #18
 800f608: cb 68                        	ldr	r3, [r1, #12]
 800f60a: 4f f6 81 61                  	movw	r1, #65153
 800f60e: c0 f6 01 01                  	movt	r1, #2049
 800f612: 98 47                        	blx	r3
 800f614: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800f618: 00 20                        	movs	r0, #0
 800f61a: 4f f6 94 62                  	movw	r2, #65172
 800f61e: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 800f622: 01 90                        	str	r0, [sp, #4]
;     GapPairingComplete(GapPairingComplete),
 800f624: a8 1c                        	adds	r0, r5, #2
 800f626: 03 a9                        	add	r1, sp, #12
 800f628: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Copy, Debug)]
 800f62a: c0 f6 01 02                  	movt	r2, #2049
 800f62e: eb e1                        	b	#982 <$t.90+0x44a>
 800f630: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f634: 11 22                        	movs	r2, #17
 800f636: cb 68                        	ldr	r3, [r1, #12]
 800f638: 4f f6 a4 61                  	movw	r1, #65188
 800f63c: c0 f6 01 01                  	movt	r1, #2049
 800f640: 74 e1                        	b	#744 <$t.90+0x36e>
 800f642: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f646: 17 22                        	movs	r2, #23
 800f648: cb 68                        	ldr	r3, [r1, #12]
 800f64a: 4f f6 b5 61                  	movw	r1, #65205
 800f64e: c0 f6 01 01                  	movt	r1, #2049
 800f652: 6b e1                        	b	#726 <$t.90+0x36e>
 800f654: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f658: 1e 22                        	movs	r2, #30
 800f65a: cb 68                        	ldr	r3, [r1, #12]
 800f65c: 4f f6 cc 61                  	movw	r1, #65228
 800f660: c0 f6 01 01                  	movt	r1, #2049
 800f664: 07 e0                        	b	#14 <$t.90+0xb8>
 800f666: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f66a: 0b 22                        	movs	r2, #11
 800f66c: cb 68                        	ldr	r3, [r1, #12]
 800f66e: 4f f6 ea 61                  	movw	r1, #65258
 800f672: c0 f6 01 01                  	movt	r1, #2049
 800f676: 98 47                        	blx	r3
 800f678: 04 46                        	mov	r4, r0
 800f67a: f1 e1                        	b	#994 <$t.90+0x4a2>
 800f67c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f680: 0e 22                        	movs	r2, #14
 800f682: cb 68                        	ldr	r3, [r1, #12]
 800f684: 4f f6 f5 61                  	movw	r1, #65269
 800f688: c0 f6 01 01                  	movt	r1, #2049
 800f68c: 98 47                        	blx	r3
 800f68e: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800f692: 00 20                        	movs	r0, #0
 800f694: 4f f6 04 72                  	movw	r2, #65284
 800f698: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 800f69c: 01 90                        	str	r0, [sp, #4]
;     GapDeviceFound(GapDeviceFound),
 800f69e: 28 1d                        	adds	r0, r5, #4
 800f6a0: 03 a9                        	add	r1, sp, #12
 800f6a2: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Copy, Debug)]
 800f6a4: c0 f6 01 02                  	movt	r2, #2049
 800f6a8: ae e1                        	b	#860 <$t.90+0x44a>
 800f6aa: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f6ae: 14 22                        	movs	r2, #20
 800f6b0: cb 68                        	ldr	r3, [r1, #12]
 800f6b2: 4f f6 14 71                  	movw	r1, #65300
 800f6b6: c0 f6 01 01                  	movt	r1, #2049
 800f6ba: 98 47                        	blx	r3
 800f6bc: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800f6c0: 00 20                        	movs	r0, #0
 800f6c2: 4f f6 28 72                  	movw	r2, #65320
 800f6c6: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 800f6ca: 01 90                        	str	r0, [sp, #4]
;     GapProcedureComplete(GapProcedureComplete),
 800f6cc: 28 1d                        	adds	r0, r5, #4
 800f6ce: 03 a9                        	add	r1, sp, #12
 800f6d0: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Copy, Debug)]
 800f6d2: c0 f6 01 02                  	movt	r2, #2049
 800f6d6: 97 e1                        	b	#814 <$t.90+0x44a>
 800f6d8: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f6dc: 16 22                        	movs	r2, #22
 800f6de: cb 68                        	ldr	r3, [r1, #12]
 800f6e0: 4f f6 38 71                  	movw	r1, #65336
 800f6e4: c0 f6 01 01                  	movt	r1, #2049
 800f6e8: 98 47                        	blx	r3
 800f6ea: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800f6ee: 00 20                        	movs	r0, #0
 800f6f0: 4f f6 cc 52                  	movw	r2, #64972
 800f6f4: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 800f6f8: 01 90                        	str	r0, [sp, #4]
;     GapReconnectionAddress(BdAddr),
 800f6fa: 68 1c                        	adds	r0, r5, #1
 800f6fc: 03 a9                        	add	r1, sp, #12
 800f6fe: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Copy, Debug)]
 800f700: c0 f6 01 02                  	movt	r2, #2049
 800f704: 80 e1                        	b	#768 <$t.90+0x44a>
 800f706: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f70a: 1d 22                        	movs	r2, #29
 800f70c: cb 68                        	ldr	r3, [r1, #12]
 800f70e: 4f f6 4e 71                  	movw	r1, #65358
 800f712: c0 f6 01 01                  	movt	r1, #2049
 800f716: 98 47                        	blx	r3
 800f718: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800f71c: 00 20                        	movs	r0, #0
 800f71e: 4f f6 6c 72                  	movw	r2, #65388
 800f722: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 800f726: 01 90                        	str	r0, [sp, #4]
;     L2CapConnectionUpdateResponse(L2CapConnectionUpdateResponse),
 800f728: a8 1c                        	adds	r0, r5, #2
 800f72a: 03 a9                        	add	r1, sp, #12
 800f72c: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Copy, Debug)]
 800f72e: c0 f6 01 02                  	movt	r2, #2049
 800f732: 69 e1                        	b	#722 <$t.90+0x44a>
 800f734: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f738: 15 22                        	movs	r2, #21
 800f73a: cb 68                        	ldr	r3, [r1, #12]
 800f73c: 4f f6 7c 71                  	movw	r1, #65404
 800f740: c0 f6 01 01                  	movt	r1, #2049
 800f744: f2 e0                        	b	#484 <$t.90+0x36e>
 800f746: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f74a: 1c 22                        	movs	r2, #28
 800f74c: cb 68                        	ldr	r3, [r1, #12]
 800f74e: 4f f6 91 71                  	movw	r1, #65425
 800f752: c0 f6 01 01                  	movt	r1, #2049
 800f756: 98 47                        	blx	r3
 800f758: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800f75c: 00 20                        	movs	r0, #0
 800f75e: 4f f6 b0 72                  	movw	r2, #65456
 800f762: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 800f766: 01 90                        	str	r0, [sp, #4]
;     L2CapConnectionUpdateRequest(L2CapConnectionUpdateRequest),
 800f768: 05 f1 08 00                  	add.w	r0, r5, #8
 800f76c: 03 a9                        	add	r1, sp, #12
 800f76e: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Copy, Debug)]
 800f770: c0 f6 01 02                  	movt	r2, #2049
 800f774: 48 e1                        	b	#656 <$t.90+0x44a>
 800f776: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f77a: 15 22                        	movs	r2, #21
 800f77c: cb 68                        	ldr	r3, [r1, #12]
 800f77e: 4f f6 c0 71                  	movw	r1, #65472
 800f782: c0 f6 01 01                  	movt	r1, #2049
 800f786: 98 47                        	blx	r3
 800f788: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800f78c: 00 20                        	movs	r0, #0
 800f78e: 4f f6 d8 72                  	movw	r2, #65496
 800f792: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 800f796: 01 90                        	str	r0, [sp, #4]
;     GattAttributeModified(GattAttributeModified),
 800f798: 28 1d                        	adds	r0, r5, #4
 800f79a: 03 a9                        	add	r1, sp, #12
 800f79c: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Copy, Debug)]
 800f79e: c0 f6 01 02                  	movt	r2, #2049
 800f7a2: 31 e1                        	b	#610 <$t.90+0x44a>
 800f7a4: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f7a8: 14 22                        	movs	r2, #20
 800f7aa: cb 68                        	ldr	r3, [r1, #12]
 800f7ac: 4f f6 e8 71                  	movw	r1, #65512
 800f7b0: c0 f6 01 01                  	movt	r1, #2049
 800f7b4: ba e0                        	b	#372 <$t.90+0x36e>
 800f7b6: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f7ba: 16 22                        	movs	r2, #22
 800f7bc: cb 68                        	ldr	r3, [r1, #12]
 800f7be: 4f f6 fc 71                  	movw	r1, #65532
 800f7c2: c0 f6 01 01                  	movt	r1, #2049
 800f7c6: 98 47                        	blx	r3
 800f7c8: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800f7cc: 00 20                        	movs	r0, #0
 800f7ce: 40 f2 14 02                  	movw	r2, #20
 800f7d2: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 800f7d6: 01 90                        	str	r0, [sp, #4]
;     AttExchangeMtuResponse(AttExchangeMtuResponse),
 800f7d8: 28 1d                        	adds	r0, r5, #4
 800f7da: 03 a9                        	add	r1, sp, #12
 800f7dc: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Copy, Debug)]
 800f7de: c0 f6 02 02                  	movt	r2, #2050
 800f7e2: 11 e1                        	b	#546 <$t.90+0x44a>
 800f7e4: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f7e8: 1a 22                        	movs	r2, #26
 800f7ea: cb 68                        	ldr	r3, [r1, #12]
 800f7ec: 40 f2 24 01                  	movw	r1, #36
 800f7f0: c0 f6 02 01                  	movt	r1, #2050
 800f7f4: 98 47                        	blx	r3
 800f7f6: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800f7fa: 00 20                        	movs	r0, #0
 800f7fc: 40 f2 40 02                  	movw	r2, #64
 800f800: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 800f804: 01 90                        	str	r0, [sp, #4]
;     AttFindInformationResponse(AttFindInformationResponse),
 800f806: 28 1d                        	adds	r0, r5, #4
 800f808: 03 a9                        	add	r1, sp, #12
 800f80a: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Copy, Debug)]
 800f80c: c0 f6 02 02                  	movt	r2, #2050
 800f810: fa e0                        	b	#500 <$t.90+0x44a>
 800f812: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f816: 1a 22                        	movs	r2, #26
 800f818: cb 68                        	ldr	r3, [r1, #12]
 800f81a: 40 f2 50 01                  	movw	r1, #80
 800f81e: c0 f6 02 01                  	movt	r1, #2050
 800f822: 98 47                        	blx	r3
 800f824: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800f828: 00 20                        	movs	r0, #0
 800f82a: 40 f2 6c 02                  	movw	r2, #108
 800f82e: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 800f832: 01 90                        	str	r0, [sp, #4]
;     AttFindByTypeValueResponse(AttFindByTypeValueResponse),
 800f834: 28 1d                        	adds	r0, r5, #4
 800f836: 03 a9                        	add	r1, sp, #12
 800f838: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Copy, Debug)]
 800f83a: c0 f6 02 02                  	movt	r2, #2050
 800f83e: e3 e0                        	b	#454 <$t.90+0x44a>
 800f840: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f844: 15 22                        	movs	r2, #21
 800f846: cb 68                        	ldr	r3, [r1, #12]
 800f848: 40 f2 7c 01                  	movw	r1, #124
 800f84c: c0 f6 02 01                  	movt	r1, #2050
 800f850: 98 47                        	blx	r3
 800f852: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800f856: 00 20                        	movs	r0, #0
 800f858: 40 f2 94 02                  	movw	r2, #148
 800f85c: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 800f860: 01 90                        	str	r0, [sp, #4]
;     AttReadByTypeResponse(AttReadByTypeResponse),
 800f862: 28 1d                        	adds	r0, r5, #4
 800f864: 03 a9                        	add	r1, sp, #12
 800f866: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Copy, Debug)]
 800f868: c0 f6 02 02                  	movt	r2, #2050
 800f86c: cc e0                        	b	#408 <$t.90+0x44a>
 800f86e: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f872: 0f 22                        	movs	r2, #15
 800f874: cb 68                        	ldr	r3, [r1, #12]
 800f876: 40 f2 a4 01                  	movw	r1, #164
 800f87a: c0 f6 02 01                  	movt	r1, #2050
 800f87e: 10 e0                        	b	#32 <$t.90+0x2e4>
 800f880: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f884: 13 22                        	movs	r2, #19
 800f886: cb 68                        	ldr	r3, [r1, #12]
 800f888: 40 f2 c4 01                  	movw	r1, #196
 800f88c: c0 f6 02 01                  	movt	r1, #2050
 800f890: 07 e0                        	b	#14 <$t.90+0x2e4>
 800f892: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f896: 17 22                        	movs	r2, #23
 800f898: cb 68                        	ldr	r3, [r1, #12]
 800f89a: 40 f2 d7 01                  	movw	r1, #215
 800f89e: c0 f6 02 01                  	movt	r1, #2050
 800f8a2: 98 47                        	blx	r3
 800f8a4: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800f8a8: 00 20                        	movs	r0, #0
 800f8aa: 40 f2 b4 02                  	movw	r2, #180
 800f8ae: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 800f8b2: 01 90                        	str	r0, [sp, #4]
 800f8b4: 28 1d                        	adds	r0, r5, #4
 800f8b6: 03 a9                        	add	r1, sp, #12
 800f8b8: 03 90                        	str	r0, [sp, #12]
 800f8ba: c0 f6 02 02                  	movt	r2, #2050
 800f8be: a3 e0                        	b	#326 <$t.90+0x44a>
 800f8c0: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f8c4: 1a 22                        	movs	r2, #26
 800f8c6: cb 68                        	ldr	r3, [r1, #12]
 800f8c8: 40 f2 ee 01                  	movw	r1, #238
 800f8cc: c0 f6 02 01                  	movt	r1, #2050
 800f8d0: 98 47                        	blx	r3
 800f8d2: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800f8d6: 00 20                        	movs	r0, #0
 800f8d8: 40 f2 08 12                  	movw	r2, #264
 800f8dc: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 800f8e0: 01 90                        	str	r0, [sp, #4]
;     AttReadByGroupTypeResponse(AttReadByGroupTypeResponse),
 800f8e2: 28 1d                        	adds	r0, r5, #4
 800f8e4: 03 a9                        	add	r1, sp, #12
 800f8e6: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Copy, Debug)]
 800f8e8: c0 f6 02 02                  	movt	r2, #2050
 800f8ec: 8c e0                        	b	#280 <$t.90+0x44a>
 800f8ee: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f8f2: 17 22                        	movs	r2, #23
 800f8f4: cb 68                        	ldr	r3, [r1, #12]
 800f8f6: 40 f2 18 11                  	movw	r1, #280
 800f8fa: c0 f6 02 01                  	movt	r1, #2050
 800f8fe: 98 47                        	blx	r3
 800f900: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800f904: 00 20                        	movs	r0, #0
 800f906: 40 f2 30 12                  	movw	r2, #304
 800f90a: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 800f90e: 01 90                        	str	r0, [sp, #4]
;     AttPrepareWriteResponse(AttPrepareWriteResponse),
 800f910: 28 1d                        	adds	r0, r5, #4
 800f912: 03 a9                        	add	r1, sp, #12
 800f914: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Copy, Debug)]
 800f916: c0 f6 02 02                  	movt	r2, #2050
 800f91a: 75 e0                        	b	#234 <$t.90+0x44a>
 800f91c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f920: 17 22                        	movs	r2, #23
 800f922: cb 68                        	ldr	r3, [r1, #12]
 800f924: 40 f2 40 11                  	movw	r1, #320
 800f928: c0 f6 02 01                  	movt	r1, #2050
 800f92c: 98 47                        	blx	r3
 800f92e: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800f932: 00 20                        	movs	r0, #0
 800f934: 4f f6 18 52                  	movw	r2, #64792
 800f938: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 800f93c: 01 90                        	str	r0, [sp, #4]
 800f93e: a8 1c                        	adds	r0, r5, #2
 800f940: 03 a9                        	add	r1, sp, #12
 800f942: 03 90                        	str	r0, [sp, #12]
 800f944: c0 f6 01 02                  	movt	r2, #2049
 800f948: 5e e0                        	b	#188 <$t.90+0x44a>
 800f94a: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f94e: 0e 22                        	movs	r2, #14
 800f950: cb 68                        	ldr	r3, [r1, #12]
 800f952: 40 f2 57 11                  	movw	r1, #343
 800f956: c0 f6 02 01                  	movt	r1, #2050
 800f95a: 47 e0                        	b	#142 <$t.90+0x42e>
 800f95c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f960: 10 22                        	movs	r2, #16
 800f962: cb 68                        	ldr	r3, [r1, #12]
 800f964: 4d f2 9c 11                  	movw	r1, #53660
 800f968: c0 f6 01 01                  	movt	r1, #2049
 800f96c: 3e e0                        	b	#124 <$t.90+0x42e>
 800f96e: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f972: 15 22                        	movs	r2, #21
 800f974: cb 68                        	ldr	r3, [r1, #12]
 800f976: 40 f2 78 11                  	movw	r1, #376
 800f97a: c0 f6 02 01                  	movt	r1, #2050
 800f97e: 98 47                        	blx	r3
 800f980: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800f984: 00 20                        	movs	r0, #0
 800f986: 40 f2 90 12                  	movw	r2, #400
 800f98a: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 800f98e: 01 90                        	str	r0, [sp, #4]
;     GattProcedureComplete(GattProcedureComplete),
 800f990: a8 1c                        	adds	r0, r5, #2
 800f992: 03 a9                        	add	r1, sp, #12
 800f994: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Copy, Debug)]
 800f996: c0 f6 02 02                  	movt	r2, #2050
 800f99a: 35 e0                        	b	#106 <$t.90+0x44a>
 800f99c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f9a0: 10 22                        	movs	r2, #16
 800f9a2: cb 68                        	ldr	r3, [r1, #12]
 800f9a4: 4d f2 ac 11                  	movw	r1, #53676
 800f9a8: c0 f6 01 01                  	movt	r1, #2049
 800f9ac: 98 47                        	blx	r3
 800f9ae: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800f9b2: 00 20                        	movs	r0, #0
 800f9b4: 40 f2 a0 12                  	movw	r2, #416
 800f9b8: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 800f9bc: 01 90                        	str	r0, [sp, #4]
;     AttErrorResponse(AttErrorResponse),
 800f9be: a8 1c                        	adds	r0, r5, #2
 800f9c0: 03 a9                        	add	r1, sp, #12
 800f9c2: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Copy, Debug)]
 800f9c4: c0 f6 02 02                  	movt	r2, #2050
 800f9c8: 1e e0                        	b	#60 <$t.90+0x44a>
 800f9ca: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f9ce: 2e 22                        	movs	r2, #46
 800f9d0: cb 68                        	ldr	r3, [r1, #12]
 800f9d2: 40 f2 b0 11                  	movw	r1, #432
 800f9d6: c0 f6 02 01                  	movt	r1, #2050
 800f9da: 07 e0                        	b	#14 <$t.90+0x42e>
 800f9dc: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800f9e0: 15 22                        	movs	r2, #21
 800f9e2: cb 68                        	ldr	r3, [r1, #12]
 800f9e4: 40 f2 de 11                  	movw	r1, #478
 800f9e8: c0 f6 02 01                  	movt	r1, #2050
 800f9ec: 98 47                        	blx	r3
 800f9ee: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800f9f2: 00 20                        	movs	r0, #0
 800f9f4: 40 f2 68 12                  	movw	r2, #360
 800f9f8: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 800f9fc: 01 90                        	str	r0, [sp, #4]
 800f9fe: 28 1d                        	adds	r0, r5, #4
 800fa00: 03 a9                        	add	r1, sp, #12
 800fa02: 03 90                        	str	r0, [sp, #12]
 800fa04: c0 f6 02 02                  	movt	r2, #2050
 800fa08: 68 46                        	mov	r0, sp
 800fa0a: 00 94                        	str	r4, [sp]
 800fa0c: 07 f0 0d f8                  	bl	#28698
 800fa10: 01 98                        	ldr	r0, [sp, #4]
 800fa12: 9d f8 08 40                  	ldrb.w	r4, [sp, #8]
 800fa16: 18 b3                        	cbz	r0, #70
 800fa18: 0c b1                        	cbz	r4, #2
 800fa1a: 01 24                        	movs	r4, #1
 800fa1c: 1e e0                        	b	#60 <$t.90+0x49e>
 800fa1e: 01 28                        	cmp	r0, #1
 800fa20: 11 d1                        	bne	#34 <$t.90+0x488>
 800fa22: 9d f8 09 00                  	ldrb.w	r0, [sp, #9]
 800fa26: 70 b1                        	cbz	r0, #28
 800fa28: 00 99                        	ldr	r1, [sp]
 800fa2a: 08 78                        	ldrb	r0, [r1]
 800fa2c: 40 07                        	lsls	r0, r0, #29
 800fa2e: 0a d4                        	bmi	#20 <$t.90+0x488>
 800fa30: 88 69                        	ldr	r0, [r1, #24]
 800fa32: 01 22                        	movs	r2, #1
 800fa34: c9 69                        	ldr	r1, [r1, #28]
 800fa36: 01 24                        	movs	r4, #1
 800fa38: cb 68                        	ldr	r3, [r1, #12]
 800fa3a: 4e f6 21 41                  	movw	r1, #60449
 800fa3e: c0 f6 01 01                  	movt	r1, #2049
 800fa42: 98 47                        	blx	r3
 800fa44: 50 b9                        	cbnz	r0, #20
 800fa46: 00 99                        	ldr	r1, [sp]
 800fa48: 01 22                        	movs	r2, #1
 800fa4a: 88 69                        	ldr	r0, [r1, #24]
 800fa4c: c9 69                        	ldr	r1, [r1, #28]
 800fa4e: cb 68                        	ldr	r3, [r1, #12]
 800fa50: 4f f2 69 61                  	movw	r1, #63081
 800fa54: c0 f6 01 01                  	movt	r1, #2049
 800fa58: 98 47                        	blx	r3
 800fa5a: 04 46                        	mov	r4, r0
 800fa5c: 8d f8 08 40                  	strb.w	r4, [sp, #8]
 800fa60: 00 2c                        	cmp	r4, #0
 800fa62: 18 bf                        	it	ne
 800fa64: 01 24                        	movne	r4, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800fa66: 20 46                        	mov	r0, r4
 800fa68: 04 b0                        	add	sp, #16
 800fa6a: b0 bd                        	pop	{r4, r5, r7, pc}
 800fa6c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800fa70: 14 22                        	movs	r2, #20
 800fa72: cb 68                        	ldr	r3, [r1, #12]
 800fa74: 40 f2 f3 11                  	movw	r1, #499
 800fa78: c0 f6 02 01                  	movt	r1, #2050
 800fa7c: 98 47                        	blx	r3
 800fa7e: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800fa82: 00 20                        	movs	r0, #0
; #[derive(Clone, Copy, Debug)]
 800fa84: 40 f2 08 22                  	movw	r2, #520
 800fa88: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 800fa8c: 01 90                        	str	r0, [sp, #4]
;     AttReadPermitRequest(AttReadPermitRequest),
 800fa8e: 28 1d                        	adds	r0, r5, #4
 800fa90: 03 a9                        	add	r1, sp, #12
 800fa92: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Copy, Debug)]
 800fa94: c0 f6 02 02                  	movt	r2, #2050
 800fa98: b6 e7                        	b	#-148 <$t.90+0x44a>
 800fa9a: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800fa9e: 1c 22                        	movs	r2, #28
 800faa0: cb 68                        	ldr	r3, [r1, #12]
 800faa2: 4f f6 27 61                  	movw	r1, #65063
 800faa6: c0 f6 01 01                  	movt	r1, #2049
 800faaa: 98 47                        	blx	r3
 800faac: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800fab0: 00 20                        	movs	r0, #0
 800fab2: 4f f6 44 62                  	movw	r2, #65092
 800fab6: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 800faba: 01 90                        	str	r0, [sp, #4]
;     AttReadMultiplePermitRequest(AttReadMultiplePermitRequest),
 800fabc: 28 1d                        	adds	r0, r5, #4
 800fabe: 03 a9                        	add	r1, sp, #12
 800fac0: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Copy, Debug)]
 800fac2: c0 f6 01 02                  	movt	r2, #2049
 800fac6: 9f e7                        	b	#-194 <$t.90+0x44a>

0800fac8 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::hb45167a32d3be723:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800fac8: b0 b5                        	push	{r4, r5, r7, lr}
 800faca: 02 af                        	add	r7, sp, #8
 800facc: 84 b0                        	sub	sp, #16
 800face: 0c 46                        	mov	r4, r1
 800fad0: 05 68                        	ldr	r5, [r0]
 800fad2: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 800fad6: 14 22                        	movs	r2, #20
 800fad8: cb 68                        	ldr	r3, [r1, #12]
 800fada: 4c f6 e0 51                  	movw	r1, #52704
 800fade: c0 f6 01 01                  	movt	r1, #2049
 800fae2: 98 47                        	blx	r3
 800fae4: 8d f8 08 00                  	strb.w	r0, [sp, #8]
;     pub status: Status<VS>,
 800fae8: 05 f1 2a 00                  	add.w	r0, r5, #42
 800faec: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800faee: 4c f6 74 20                  	movw	r0, #51828
 800faf2: 00 21                        	movs	r1, #0
 800faf4: c0 f6 01 00                  	movt	r0, #2049
 800faf8: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 800fafc: 4f f6 60 31                  	movw	r1, #64352
 800fb00: 00 90                        	str	r0, [sp]
 800fb02: 01 a8                        	add	r0, sp, #4
 800fb04: 03 ab                        	add	r3, sp, #12
 800fb06: c0 f6 01 01                  	movt	r1, #2049
 800fb0a: 06 22                        	movs	r2, #6
 800fb0c: 01 94                        	str	r4, [sp, #4]
 800fb0e: 06 f0 0f fe                  	bl	#27678
;     pub conn_handle: ConnectionHandle,
 800fb12: 05 f1 28 01                  	add.w	r1, r5, #40
 800fb16: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800fb18: 4c f6 84 21                  	movw	r1, #51844
 800fb1c: 03 ab                        	add	r3, sp, #12
 800fb1e: c0 f6 01 01                  	movt	r1, #2049
 800fb22: 0b 22                        	movs	r2, #11
 800fb24: 00 91                        	str	r1, [sp]
 800fb26: 4f f6 0c 51                  	movw	r1, #64780
 800fb2a: c0 f6 01 01                  	movt	r1, #2049
 800fb2e: 06 f0 ff fd                  	bl	#27646
;     pub role: ConnectionRole,
 800fb32: 05 f1 2b 01                  	add.w	r1, r5, #43
 800fb36: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800fb38: 4d f2 98 51                  	movw	r1, #54680
 800fb3c: 03 ab                        	add	r3, sp, #12
 800fb3e: c0 f6 01 01                  	movt	r1, #2049
 800fb42: 04 22                        	movs	r2, #4
 800fb44: 00 91                        	str	r1, [sp]
 800fb46: 4d f2 8c 21                  	movw	r1, #53900
 800fb4a: c0 f6 01 01                  	movt	r1, #2049
 800fb4e: 06 f0 ef fd                  	bl	#27614
;     pub peer_bd_addr: crate::BdAddrType,
 800fb52: 05 f1 2c 01                  	add.w	r1, r5, #44
 800fb56: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800fb58: 4d f2 b4 51                  	movw	r1, #54708
 800fb5c: 03 ab                        	add	r3, sp, #12
 800fb5e: c0 f6 01 01                  	movt	r1, #2049
 800fb62: 0c 22                        	movs	r2, #12
 800fb64: 00 91                        	str	r1, [sp]
 800fb66: 4d f2 a8 51                  	movw	r1, #54696
 800fb6a: c0 f6 01 01                  	movt	r1, #2049
 800fb6e: 06 f0 df fd                  	bl	#27582
 800fb72: 4d f2 c4 51                  	movw	r1, #54724
 800fb76: 03 ab                        	add	r3, sp, #12
 800fb78: c0 f6 01 01                  	movt	r1, #2049
 800fb7c: 0d 22                        	movs	r2, #13
 800fb7e: 00 91                        	str	r1, [sp]
 800fb80: 40 f6 67 01                  	movw	r1, #2151
 800fb84: c0 f6 02 01                  	movt	r1, #2050
;     pub conn_interval: FixedConnectionInterval,
 800fb88: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800fb8a: 06 f0 d1 fd                  	bl	#27554
;     pub central_clock_accuracy: CentralClockAccuracy,
 800fb8e: 05 f1 33 01                  	add.w	r1, r5, #51
 800fb92: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800fb94: 4d f2 ec 51                  	movw	r1, #54764
 800fb98: 03 ab                        	add	r3, sp, #12
 800fb9a: c0 f6 01 01                  	movt	r1, #2049
 800fb9e: 16 22                        	movs	r2, #22
 800fba0: 00 91                        	str	r1, [sp]
 800fba2: 4d f2 d4 51                  	movw	r1, #54740
 800fba6: c0 f6 01 01                  	movt	r1, #2049
 800fbaa: 06 f0 c1 fd                  	bl	#27522
 800fbae: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 800fbb2: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 800fbb6: b9 b1                        	cbz	r1, #46
 800fbb8: 08 b1                        	cbz	r0, #2
 800fbba: 01 20                        	movs	r0, #1
 800fbbc: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hb45167a32d3be723E+0x120>
 800fbbe: 01 99                        	ldr	r1, [sp, #4]
 800fbc0: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 800fbc4: 09 78                        	ldrb	r1, [r1]
 800fbc6: d3 68                        	ldr	r3, [r2, #12]
 800fbc8: 49 07                        	lsls	r1, r1, #29
 800fbca: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hb45167a32d3be723E+0x114>
 800fbcc: 4e f6 1c 41                  	movw	r1, #60444
 800fbd0: 02 22                        	movs	r2, #2
 800fbd2: c0 f6 01 01                  	movt	r1, #2049
 800fbd6: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hb45167a32d3be723E+0x11e>
 800fbd8: 4e f6 d6 41                  	movw	r1, #60630
 800fbdc: 01 22                        	movs	r2, #1
 800fbde: c0 f6 01 01                  	movt	r1, #2049
 800fbe2: 98 47                        	blx	r3
 800fbe4: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800fbe8: 00 28                        	cmp	r0, #0
 800fbea: 18 bf                        	it	ne
 800fbec: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800fbee: 04 b0                        	add	sp, #16
 800fbf0: b0 bd                        	pop	{r4, r5, r7, pc}

0800fbf2 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::hb6555b93ee99d69b:
 800fbf2: b0 b5                        	push	{r4, r5, r7, lr}
 800fbf4: 02 af                        	add	r7, sp, #8
 800fbf6: 84 b0                        	sub	sp, #16
 800fbf8: 0c 46                        	mov	r4, r1
 800fbfa: 05 68                        	ldr	r5, [r0]
 800fbfc: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 800fc00: 08 22                        	movs	r2, #8
 800fc02: cb 68                        	ldr	r3, [r1, #12]
 800fc04: 4c f6 cc 31                  	movw	r1, #52172
 800fc08: c0 f6 01 01                  	movt	r1, #2049
 800fc0c: 98 47                        	blx	r3
 800fc0e: 8d f8 08 00                  	strb.w	r0, [sp, #8]
;     pub status: Status<VS>,
 800fc12: 05 f1 08 00                  	add.w	r0, r5, #8
 800fc16: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800fc18: 4c f6 74 20                  	movw	r0, #51828
 800fc1c: 00 21                        	movs	r1, #0
 800fc1e: c0 f6 01 00                  	movt	r0, #2049
 800fc22: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 800fc26: 4f f6 60 31                  	movw	r1, #64352
 800fc2a: 00 90                        	str	r0, [sp]
 800fc2c: 01 a8                        	add	r0, sp, #4
 800fc2e: 03 ab                        	add	r3, sp, #12
 800fc30: c0 f6 01 01                  	movt	r1, #2049
 800fc34: 06 22                        	movs	r2, #6
 800fc36: 01 94                        	str	r4, [sp, #4]
 800fc38: 06 f0 7a fd                  	bl	#27380
 800fc3c: 4d f2 28 51                  	movw	r1, #54568
 800fc40: 03 ab                        	add	r3, sp, #12
 800fc42: c0 f6 01 01                  	movt	r1, #2049
 800fc46: 0d 22                        	movs	r2, #13
 800fc48: 00 91                        	str	r1, [sp]
 800fc4a: 4d f2 18 51                  	movw	r1, #54552
 800fc4e: c0 f6 01 01                  	movt	r1, #2049
;     pub random_number: u64,
 800fc52: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800fc54: 06 f0 6c fd                  	bl	#27352
 800fc58: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 800fc5c: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 800fc60: b9 b1                        	cbz	r1, #46
 800fc62: 08 b1                        	cbz	r0, #2
 800fc64: 01 20                        	movs	r0, #1
 800fc66: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hb6555b93ee99d69bE+0xa0>
 800fc68: 01 99                        	ldr	r1, [sp, #4]
 800fc6a: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 800fc6e: 09 78                        	ldrb	r1, [r1]
 800fc70: d3 68                        	ldr	r3, [r2, #12]
 800fc72: 49 07                        	lsls	r1, r1, #29
 800fc74: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hb6555b93ee99d69bE+0x94>
 800fc76: 4e f6 1c 41                  	movw	r1, #60444
 800fc7a: 02 22                        	movs	r2, #2
 800fc7c: c0 f6 01 01                  	movt	r1, #2049
 800fc80: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hb6555b93ee99d69bE+0x9e>
 800fc82: 4e f6 d6 41                  	movw	r1, #60630
 800fc86: 01 22                        	movs	r2, #1
 800fc88: c0 f6 01 01                  	movt	r1, #2049
 800fc8c: 98 47                        	blx	r3
 800fc8e: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800fc92: 00 28                        	cmp	r0, #0
 800fc94: 18 bf                        	it	ne
 800fc96: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800fc98: 04 b0                        	add	sp, #16
 800fc9a: b0 bd                        	pop	{r4, r5, r7, pc}

0800fc9c _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::hbe8c89804f356c9f:
 800fc9c: b0 b5                        	push	{r4, r5, r7, lr}
 800fc9e: 02 af                        	add	r7, sp, #8
 800fca0: 84 b0                        	sub	sp, #16
 800fca2: 0c 46                        	mov	r4, r1
 800fca4: 05 68                        	ldr	r5, [r0]
 800fca6: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 800fcaa: 0a 22                        	movs	r2, #10
 800fcac: cb 68                        	ldr	r3, [r1, #12]
 800fcae: 4d f2 8e 51                  	movw	r1, #54670
 800fcb2: c0 f6 01 01                  	movt	r1, #2049
 800fcb6: 98 47                        	blx	r3
 800fcb8: 8d f8 08 00                  	strb.w	r0, [sp, #8]
; #[derive(Copy, Clone, Debug)]
 800fcbc: 4c f6 74 20                  	movw	r0, #51828
 800fcc0: 00 21                        	movs	r1, #0
 800fcc2: c0 f6 01 00                  	movt	r0, #2049
 800fcc6: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 800fcca: 4f f6 60 31                  	movw	r1, #64352
 800fcce: 00 90                        	str	r0, [sp]
 800fcd0: 01 a8                        	add	r0, sp, #4
 800fcd2: 03 ab                        	add	r3, sp, #12
 800fcd4: c0 f6 01 01                  	movt	r1, #2049
 800fcd8: 06 22                        	movs	r2, #6
 800fcda: 01 94                        	str	r4, [sp, #4]
;     pub status: Status<VS>,
 800fcdc: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800fcde: 06 f0 27 fd                  	bl	#27214
;     pub bd_addr: crate::BdAddr,
 800fce2: 69 1c                        	adds	r1, r5, #1
 800fce4: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800fce6: 4d f2 58 41                  	movw	r1, #54360
 800fcea: 03 ab                        	add	r3, sp, #12
 800fcec: c0 f6 01 01                  	movt	r1, #2049
 800fcf0: 07 22                        	movs	r2, #7
 800fcf2: 00 91                        	str	r1, [sp]
 800fcf4: 4d f2 38 51                  	movw	r1, #54584
 800fcf8: c0 f6 01 01                  	movt	r1, #2049
 800fcfc: 06 f0 18 fd                  	bl	#27184
 800fd00: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 800fd04: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 800fd08: b9 b1                        	cbz	r1, #46
 800fd0a: 08 b1                        	cbz	r0, #2
 800fd0c: 01 20                        	movs	r0, #1
 800fd0e: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hbe8c89804f356c9fE+0x9e>
 800fd10: 01 99                        	ldr	r1, [sp, #4]
 800fd12: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 800fd16: 09 78                        	ldrb	r1, [r1]
 800fd18: d3 68                        	ldr	r3, [r2, #12]
 800fd1a: 49 07                        	lsls	r1, r1, #29
 800fd1c: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hbe8c89804f356c9fE+0x92>
 800fd1e: 4e f6 1c 41                  	movw	r1, #60444
 800fd22: 02 22                        	movs	r2, #2
 800fd24: c0 f6 01 01                  	movt	r1, #2049
 800fd28: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hbe8c89804f356c9fE+0x9c>
 800fd2a: 4e f6 d6 41                  	movw	r1, #60630
 800fd2e: 01 22                        	movs	r2, #1
 800fd30: c0 f6 01 01                  	movt	r1, #2049
 800fd34: 98 47                        	blx	r3
 800fd36: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800fd3a: 00 28                        	cmp	r0, #0
 800fd3c: 18 bf                        	it	ne
 800fd3e: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800fd40: 04 b0                        	add	sp, #16
 800fd42: b0 bd                        	pop	{r4, r5, r7, pc}

0800fd44 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::hbff810e8f7fad708:
 800fd44: f0 b5                        	push	{r4, r5, r6, r7, lr}
 800fd46: 03 af                        	add	r7, sp, #12
 800fd48: 4d f8 04 bd                  	str	r11, [sp, #-4]!
 800fd4c: 84 b0                        	sub	sp, #16
 800fd4e: 0c 46                        	mov	r4, r1
 800fd50: 05 68                        	ldr	r5, [r0]
 800fd52: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 800fd56: 10 22                        	movs	r2, #16
 800fd58: cb 68                        	ldr	r3, [r1, #12]
 800fd5a: 4c f6 5c 71                  	movw	r1, #53084
 800fd5e: c0 f6 01 01                  	movt	r1, #2049
 800fd62: 98 47                        	blx	r3
 800fd64: 8d f8 08 00                  	strb.w	r0, [sp, #8]
;     pub status: Status<VS>,
 800fd68: a8 1d                        	adds	r0, r5, #6
 800fd6a: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800fd6c: 4c f6 74 20                  	movw	r0, #51828
 800fd70: 00 21                        	movs	r1, #0
 800fd72: c0 f6 01 00                  	movt	r0, #2049
 800fd76: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 800fd7a: 4f f6 60 31                  	movw	r1, #64352
 800fd7e: 00 90                        	str	r0, [sp]
 800fd80: 01 a8                        	add	r0, sp, #4
 800fd82: 03 ab                        	add	r3, sp, #12
 800fd84: c0 f6 01 01                  	movt	r1, #2049
 800fd88: 06 22                        	movs	r2, #6
 800fd8a: 01 94                        	str	r4, [sp, #4]
 800fd8c: 06 f0 d0 fc                  	bl	#27040
;     pub hci_version: u8,
 800fd90: e9 1d                        	adds	r1, r5, #7
; #[derive(Copy, Clone, Debug)]
 800fd92: 4d f2 78 36                  	movw	r6, #54136
;     pub hci_version: u8,
 800fd96: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800fd98: 4d f6 eb 11                  	movw	r1, #55787
 800fd9c: 03 ab                        	add	r3, sp, #12
 800fd9e: c0 f6 01 06                  	movt	r6, #2049
 800fda2: c0 f6 01 01                  	movt	r1, #2049
 800fda6: 0b 22                        	movs	r2, #11
 800fda8: 00 96                        	str	r6, [sp]
 800fdaa: 06 f0 c1 fc                  	bl	#27010
 800fdae: 4d f2 68 64                  	movw	r4, #54888
 800fdb2: 4d f6 f6 11                  	movw	r1, #55798
 800fdb6: 03 ab                        	add	r3, sp, #12
 800fdb8: c0 f6 01 04                  	movt	r4, #2049
 800fdbc: c0 f6 01 01                  	movt	r1, #2049
 800fdc0: 0c 22                        	movs	r2, #12
;     pub hci_revision: u16,
 800fdc2: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800fdc4: 00 94                        	str	r4, [sp]
 800fdc6: 06 f0 b3 fc                  	bl	#26982
;     pub lmp_version: u8,
 800fdca: 05 f1 08 01                  	add.w	r1, r5, #8
 800fdce: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800fdd0: 4d f6 02 21                  	movw	r1, #55810
 800fdd4: 03 ab                        	add	r3, sp, #12
 800fdd6: c0 f6 01 01                  	movt	r1, #2049
 800fdda: 0b 22                        	movs	r2, #11
 800fddc: 00 96                        	str	r6, [sp]
 800fdde: 06 f0 a7 fc                  	bl	#26958
;     pub manufacturer_name: u16,
 800fde2: a9 1c                        	adds	r1, r5, #2
 800fde4: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800fde6: 4d f6 0d 21                  	movw	r1, #55821
 800fdea: 03 ab                        	add	r3, sp, #12
 800fdec: c0 f6 01 01                  	movt	r1, #2049
 800fdf0: 11 22                        	movs	r2, #17
 800fdf2: 00 94                        	str	r4, [sp]
 800fdf4: 06 f0 9c fc                  	bl	#26936
;     pub lmp_subversion: u16,
 800fdf8: 29 1d                        	adds	r1, r5, #4
 800fdfa: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 800fdfc: 4d f6 1e 21                  	movw	r1, #55838
 800fe00: 03 ab                        	add	r3, sp, #12
 800fe02: c0 f6 01 01                  	movt	r1, #2049
 800fe06: 0e 22                        	movs	r2, #14
 800fe08: 00 94                        	str	r4, [sp]
 800fe0a: 06 f0 91 fc                  	bl	#26914
 800fe0e: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 800fe12: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 800fe16: b9 b1                        	cbz	r1, #46
 800fe18: 08 b1                        	cbz	r0, #2
 800fe1a: 01 20                        	movs	r0, #1
 800fe1c: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hbff810e8f7fad708E+0x104>
 800fe1e: 01 99                        	ldr	r1, [sp, #4]
 800fe20: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 800fe24: 09 78                        	ldrb	r1, [r1]
 800fe26: d3 68                        	ldr	r3, [r2, #12]
 800fe28: 49 07                        	lsls	r1, r1, #29
 800fe2a: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hbff810e8f7fad708E+0xf8>
 800fe2c: 4e f6 1c 41                  	movw	r1, #60444
 800fe30: 02 22                        	movs	r2, #2
 800fe32: c0 f6 01 01                  	movt	r1, #2049
 800fe36: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hbff810e8f7fad708E+0x102>
 800fe38: 4e f6 d6 41                  	movw	r1, #60630
 800fe3c: 01 22                        	movs	r2, #1
 800fe3e: c0 f6 01 01                  	movt	r1, #2049
 800fe42: 98 47                        	blx	r3
 800fe44: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 800fe48: 00 28                        	cmp	r0, #0
 800fe4a: 18 bf                        	it	ne
 800fe4c: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800fe4e: 04 b0                        	add	sp, #16
 800fe50: 5d f8 04 bb                  	ldr	r11, [sp], #4
 800fe54: f0 bd                        	pop	{r4, r5, r6, r7, pc}

0800fe56 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::hc2fcab91a62424dc:
 800fe56: b0 b5                        	push	{r4, r5, r7, lr}
 800fe58: 02 af                        	add	r7, sp, #8
 800fe5a: a2 b0                        	sub	sp, #136
 800fe5c: 05 68                        	ldr	r5, [r0]
 800fe5e: 0c 46                        	mov	r4, r1
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800fe60: 2a 68                        	ldr	r2, [r5]
 800fe62: d0 07                        	lsls	r0, r2, #31
 800fe64: 19 d1                        	bne	#50 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x48>
 800fe66: 69 68                        	ldr	r1, [r5, #4]
 800fe68: 01 20                        	movs	r0, #1
 800fe6a: 93 07                        	lsls	r3, r2, #30
 800fe6c: 26 d4                        	bmi	#76 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x6a>
 800fe6e: 53 07                        	lsls	r3, r2, #29
 800fe70: 42 d4                        	bmi	#132 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa6>
 800fe72: 13 07                        	lsls	r3, r2, #28
 800fe74: 5e d4                        	bmi	#188 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xe2>
 800fe76: d3 06                        	lsls	r3, r2, #27
 800fe78: 7b d4                        	bmi	#246 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x120>
 800fe7a: 93 06                        	lsls	r3, r2, #26
 800fe7c: 00 f1 98 80                  	bmi.w	#304 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x15e>
 800fe80: 53 06                        	lsls	r3, r2, #25
 800fe82: 00 f1 b4 80                  	bmi.w	#360 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x19c>
 800fe86: 13 06                        	lsls	r3, r2, #24
 800fe88: 00 f1 d0 80                  	bmi.w	#416 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x1da>
 800fe8c: d3 05                        	lsls	r3, r2, #23
 800fe8e: 00 f1 ec 80                  	bmi.w	#472 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x218>
 800fe92: 93 05                        	lsls	r3, r2, #22
 800fe94: 00 f1 07 81                  	bmi.w	#526 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x254>
 800fe98: 21 e1                        	b	#578 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x28c>
 800fe9a: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800fe9e: 1b 22                        	movs	r2, #27
 800fea0: cb 68                        	ldr	r3, [r1, #12]
 800fea2: 4e f2 d3 41                  	movw	r1, #58579
 800fea6: c0 f6 01 01                  	movt	r1, #2049
 800feaa: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800feac: 00 28                        	cmp	r0, #0
 800feae: 40 f0 0f 85                  	bne.w	#2590 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800feb2: d5 e9 00 21                  	ldrd	r2, r1, [r5]
 800feb6: 00 20                        	movs	r0, #0
 800feb8: 93 07                        	lsls	r3, r2, #30
 800feba: d8 d5                        	bpl	#-80 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x1c>
;                         if !first {
 800febc: 58 b9                        	cbnz	r0, #22
 800febe: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800fec2: 03 22                        	movs	r2, #3
 800fec4: cb 68                        	ldr	r3, [r1, #12]
 800fec6: 4d f6 97 71                  	movw	r1, #57239
 800feca: c0 f6 01 01                  	movt	r1, #2049
 800fece: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800fed0: 00 28                        	cmp	r0, #0
 800fed2: 40 f0 fd 84                  	bne.w	#2554 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
 800fed6: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800feda: 15 22                        	movs	r2, #21
 800fedc: cb 68                        	ldr	r3, [r1, #12]
 800fede: 4e f2 ee 41                  	movw	r1, #58606
 800fee2: c0 f6 01 01                  	movt	r1, #2049
 800fee6: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800fee8: 00 28                        	cmp	r0, #0
 800feea: 40 f0 f1 84                  	bne.w	#2530 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800feee: d5 e9 00 21                  	ldrd	r2, r1, [r5]
 800fef2: 00 20                        	movs	r0, #0
 800fef4: 53 07                        	lsls	r3, r2, #29
 800fef6: bc d5                        	bpl	#-136 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x20>
;                         if !first {
 800fef8: 58 b9                        	cbnz	r0, #22
 800fefa: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800fefe: 03 22                        	movs	r2, #3
 800ff00: cb 68                        	ldr	r3, [r1, #12]
 800ff02: 4d f6 97 71                  	movw	r1, #57239
 800ff06: c0 f6 01 01                  	movt	r1, #2049
 800ff0a: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800ff0c: 00 28                        	cmp	r0, #0
 800ff0e: 40 f0 df 84                  	bne.w	#2494 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
 800ff12: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800ff16: 17 22                        	movs	r2, #23
 800ff18: cb 68                        	ldr	r3, [r1, #12]
 800ff1a: 4e f2 03 51                  	movw	r1, #58627
 800ff1e: c0 f6 01 01                  	movt	r1, #2049
 800ff22: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800ff24: 00 28                        	cmp	r0, #0
 800ff26: 40 f0 d3 84                  	bne.w	#2470 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800ff2a: d5 e9 00 21                  	ldrd	r2, r1, [r5]
 800ff2e: 00 20                        	movs	r0, #0
 800ff30: 13 07                        	lsls	r3, r2, #28
 800ff32: a0 d5                        	bpl	#-192 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x24>
;                         if !first {
 800ff34: 58 b9                        	cbnz	r0, #22
 800ff36: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800ff3a: 03 22                        	movs	r2, #3
 800ff3c: cb 68                        	ldr	r3, [r1, #12]
 800ff3e: 4d f6 97 71                  	movw	r1, #57239
 800ff42: c0 f6 01 01                  	movt	r1, #2049
 800ff46: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800ff48: 00 28                        	cmp	r0, #0
 800ff4a: 40 f0 c1 84                  	bne.w	#2434 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
 800ff4e: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800ff52: 24 22                        	movs	r2, #36
 800ff54: cb 68                        	ldr	r3, [r1, #12]
 800ff56: 4e f2 1a 51                  	movw	r1, #58650
 800ff5a: c0 f6 01 01                  	movt	r1, #2049
 800ff5e: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800ff60: 00 28                        	cmp	r0, #0
 800ff62: 40 f0 b5 84                  	bne.w	#2410 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800ff66: d5 e9 00 21                  	ldrd	r2, r1, [r5]
 800ff6a: 00 20                        	movs	r0, #0
 800ff6c: d3 06                        	lsls	r3, r2, #27
 800ff6e: 7f f5 84 af                  	bpl.w	#-248 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x28>
;                         if !first {
 800ff72: 58 b9                        	cbnz	r0, #22
 800ff74: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800ff78: 03 22                        	movs	r2, #3
 800ff7a: cb 68                        	ldr	r3, [r1, #12]
 800ff7c: 4d f6 97 71                  	movw	r1, #57239
 800ff80: c0 f6 01 01                  	movt	r1, #2049
 800ff84: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800ff86: 00 28                        	cmp	r0, #0
 800ff88: 40 f0 a2 84                  	bne.w	#2372 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
 800ff8c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800ff90: 10 22                        	movs	r2, #16
 800ff92: cb 68                        	ldr	r3, [r1, #12]
 800ff94: 4d f2 5c 01                  	movw	r1, #53340
 800ff98: c0 f6 01 01                  	movt	r1, #2049
 800ff9c: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800ff9e: 00 28                        	cmp	r0, #0
 800ffa0: 40 f0 96 84                  	bne.w	#2348 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800ffa4: d5 e9 00 21                  	ldrd	r2, r1, [r5]
 800ffa8: 00 20                        	movs	r0, #0
 800ffaa: 93 06                        	lsls	r3, r2, #26
 800ffac: 7f f5 68 af                  	bpl.w	#-304 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x2e>
;                         if !first {
 800ffb0: 58 b9                        	cbnz	r0, #22
 800ffb2: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800ffb6: 03 22                        	movs	r2, #3
 800ffb8: cb 68                        	ldr	r3, [r1, #12]
 800ffba: 4d f6 97 71                  	movw	r1, #57239
 800ffbe: c0 f6 01 01                  	movt	r1, #2049
 800ffc2: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 800ffc4: 00 28                        	cmp	r0, #0
 800ffc6: 40 f0 83 84                  	bne.w	#2310 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
 800ffca: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800ffce: 0f 22                        	movs	r2, #15
 800ffd0: cb 68                        	ldr	r3, [r1, #12]
 800ffd2: 4e f2 3e 51                  	movw	r1, #58686
 800ffd6: c0 f6 01 01                  	movt	r1, #2049
 800ffda: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 800ffdc: 00 28                        	cmp	r0, #0
 800ffde: 40 f0 77 84                  	bne.w	#2286 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 800ffe2: d5 e9 00 21                  	ldrd	r2, r1, [r5]
 800ffe6: 00 20                        	movs	r0, #0
 800ffe8: 53 06                        	lsls	r3, r2, #25
 800ffea: 7f f5 4c af                  	bpl.w	#-360 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x34>
;                         if !first {
 800ffee: 58 b9                        	cbnz	r0, #22
 800fff0: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 800fff4: 03 22                        	movs	r2, #3
 800fff6: cb 68                        	ldr	r3, [r1, #12]
 800fff8: 4d f6 97 71                  	movw	r1, #57239
 800fffc: c0 f6 01 01                  	movt	r1, #2049
 8010000: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 8010002: 00 28                        	cmp	r0, #0
 8010004: 40 f0 64 84                  	bne.w	#2248 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
 8010008: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 801000c: 0a 22                        	movs	r2, #10
 801000e: cb 68                        	ldr	r3, [r1, #12]
 8010010: 4e f2 4d 51                  	movw	r1, #58701
 8010014: c0 f6 01 01                  	movt	r1, #2049
 8010018: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 801001a: 00 28                        	cmp	r0, #0
 801001c: 40 f0 58 84                  	bne.w	#2224 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 8010020: d5 e9 00 21                  	ldrd	r2, r1, [r5]
 8010024: 00 20                        	movs	r0, #0
 8010026: 13 06                        	lsls	r3, r2, #24
 8010028: 7f f5 30 af                  	bpl.w	#-416 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x3a>
;                         if !first {
 801002c: 58 b9                        	cbnz	r0, #22
 801002e: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8010032: 03 22                        	movs	r2, #3
 8010034: cb 68                        	ldr	r3, [r1, #12]
 8010036: 4d f6 97 71                  	movw	r1, #57239
 801003a: c0 f6 01 01                  	movt	r1, #2049
 801003e: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 8010040: 00 28                        	cmp	r0, #0
 8010042: 40 f0 45 84                  	bne.w	#2186 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
 8010046: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 801004a: 15 22                        	movs	r2, #21
 801004c: cb 68                        	ldr	r3, [r1, #12]
 801004e: 4e f2 57 51                  	movw	r1, #58711
 8010052: c0 f6 01 01                  	movt	r1, #2049
 8010056: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 8010058: 00 28                        	cmp	r0, #0
 801005a: 40 f0 39 84                  	bne.w	#2162 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 801005e: d5 e9 00 21                  	ldrd	r2, r1, [r5]
 8010062: 00 20                        	movs	r0, #0
 8010064: d3 05                        	lsls	r3, r2, #23
 8010066: 7f f5 14 af                  	bpl.w	#-472 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x40>
;                         if !first {
 801006a: 58 b9                        	cbnz	r0, #22
 801006c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8010070: 03 22                        	movs	r2, #3
 8010072: cb 68                        	ldr	r3, [r1, #12]
 8010074: 4d f6 97 71                  	movw	r1, #57239
 8010078: c0 f6 01 01                  	movt	r1, #2049
 801007c: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 801007e: 00 28                        	cmp	r0, #0
 8010080: 40 f0 26 84                  	bne.w	#2124 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
 8010084: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8010088: 18 22                        	movs	r2, #24
 801008a: cb 68                        	ldr	r3, [r1, #12]
 801008c: 4e f2 6c 51                  	movw	r1, #58732
 8010090: c0 f6 01 01                  	movt	r1, #2049
 8010094: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 8010096: 00 28                        	cmp	r0, #0
 8010098: 40 f0 1a 84                  	bne.w	#2100 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 801009c: d5 e9 00 21                  	ldrd	r2, r1, [r5]
 80100a0: 00 20                        	movs	r0, #0
 80100a2: 93 05                        	lsls	r3, r2, #22
 80100a4: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x28c>
;                         if !first {
 80100a6: 58 b9                        	cbnz	r0, #22
 80100a8: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 80100ac: 03 22                        	movs	r2, #3
 80100ae: cb 68                        	ldr	r3, [r1, #12]
 80100b0: 4d f6 97 71                  	movw	r1, #57239
 80100b4: c0 f6 01 01                  	movt	r1, #2049
 80100b8: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 80100ba: 00 28                        	cmp	r0, #0
 80100bc: 40 f0 08 84                  	bne.w	#2064 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
 80100c0: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 80100c4: 15 22                        	movs	r2, #21
 80100c6: cb 68                        	ldr	r3, [r1, #12]
 80100c8: 4e f2 84 51                  	movw	r1, #58756
 80100cc: c0 f6 01 01                  	movt	r1, #2049
 80100d0: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 80100d2: 00 28                        	cmp	r0, #0
 80100d4: 40 f0 fc 83                  	bne.w	#2040 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 80100d8: d5 e9 00 21                  	ldrd	r2, r1, [r5]
 80100dc: 00 20                        	movs	r0, #0
 80100de: 53 05                        	lsls	r3, r2, #21
 80100e0: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x2c8>
;                         if !first {
 80100e2: 58 b9                        	cbnz	r0, #22
 80100e4: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 80100e8: 03 22                        	movs	r2, #3
 80100ea: cb 68                        	ldr	r3, [r1, #12]
 80100ec: 4d f6 97 71                  	movw	r1, #57239
 80100f0: c0 f6 01 01                  	movt	r1, #2049
 80100f4: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 80100f6: 00 28                        	cmp	r0, #0
 80100f8: 40 f0 ea 83                  	bne.w	#2004 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
 80100fc: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8010100: 15 22                        	movs	r2, #21
 8010102: cb 68                        	ldr	r3, [r1, #12]
 8010104: 4e f2 99 51                  	movw	r1, #58777
 8010108: c0 f6 01 01                  	movt	r1, #2049
 801010c: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 801010e: 00 28                        	cmp	r0, #0
 8010110: 40 f0 de 83                  	bne.w	#1980 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 8010114: d5 e9 00 21                  	ldrd	r2, r1, [r5]
 8010118: 00 20                        	movs	r0, #0
 801011a: 13 05                        	lsls	r3, r2, #20
 801011c: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x304>
;                         if !first {
 801011e: 58 b9                        	cbnz	r0, #22
 8010120: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8010124: 03 22                        	movs	r2, #3
 8010126: cb 68                        	ldr	r3, [r1, #12]
 8010128: 4d f6 97 71                  	movw	r1, #57239
 801012c: c0 f6 01 01                  	movt	r1, #2049
 8010130: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 8010132: 00 28                        	cmp	r0, #0
 8010134: 40 f0 cc 83                  	bne.w	#1944 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
 8010138: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 801013c: 18 22                        	movs	r2, #24
 801013e: cb 68                        	ldr	r3, [r1, #12]
 8010140: 4e f2 ae 51                  	movw	r1, #58798
 8010144: c0 f6 01 01                  	movt	r1, #2049
 8010148: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 801014a: 00 28                        	cmp	r0, #0
 801014c: 40 f0 c0 83                  	bne.w	#1920 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 8010150: d5 e9 00 21                  	ldrd	r2, r1, [r5]
 8010154: 00 20                        	movs	r0, #0
 8010156: d3 04                        	lsls	r3, r2, #19
 8010158: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x340>
;                         if !first {
 801015a: 58 b9                        	cbnz	r0, #22
 801015c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8010160: 03 22                        	movs	r2, #3
 8010162: cb 68                        	ldr	r3, [r1, #12]
 8010164: 4d f6 97 71                  	movw	r1, #57239
 8010168: c0 f6 01 01                  	movt	r1, #2049
 801016c: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 801016e: 00 28                        	cmp	r0, #0
 8010170: 40 f0 ae 83                  	bne.w	#1884 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
 8010174: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8010178: 17 22                        	movs	r2, #23
 801017a: cb 68                        	ldr	r3, [r1, #12]
 801017c: 4e f2 c6 51                  	movw	r1, #58822
 8010180: c0 f6 01 01                  	movt	r1, #2049
 8010184: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 8010186: 00 28                        	cmp	r0, #0
 8010188: 40 f0 a2 83                  	bne.w	#1860 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 801018c: d5 e9 00 21                  	ldrd	r2, r1, [r5]
 8010190: 00 20                        	movs	r0, #0
 8010192: 93 04                        	lsls	r3, r2, #18
 8010194: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x37c>
;                         if !first {
 8010196: 58 b9                        	cbnz	r0, #22
 8010198: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 801019c: 03 22                        	movs	r2, #3
 801019e: cb 68                        	ldr	r3, [r1, #12]
 80101a0: 4d f6 97 71                  	movw	r1, #57239
 80101a4: c0 f6 01 01                  	movt	r1, #2049
 80101a8: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 80101aa: 00 28                        	cmp	r0, #0
 80101ac: 40 f0 90 83                  	bne.w	#1824 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
 80101b0: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 80101b4: 14 22                        	movs	r2, #20
 80101b6: cb 68                        	ldr	r3, [r1, #12]
 80101b8: 4e f2 dd 51                  	movw	r1, #58845
 80101bc: c0 f6 01 01                  	movt	r1, #2049
 80101c0: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 80101c2: 00 28                        	cmp	r0, #0
 80101c4: 40 f0 84 83                  	bne.w	#1800 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 80101c8: d5 e9 00 21                  	ldrd	r2, r1, [r5]
 80101cc: 00 20                        	movs	r0, #0
 80101ce: 53 04                        	lsls	r3, r2, #17
 80101d0: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x3b8>
;                         if !first {
 80101d2: 58 b9                        	cbnz	r0, #22
 80101d4: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 80101d8: 03 22                        	movs	r2, #3
 80101da: cb 68                        	ldr	r3, [r1, #12]
 80101dc: 4d f6 97 71                  	movw	r1, #57239
 80101e0: c0 f6 01 01                  	movt	r1, #2049
 80101e4: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 80101e6: 00 28                        	cmp	r0, #0
 80101e8: 40 f0 72 83                  	bne.w	#1764 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
 80101ec: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 80101f0: 14 22                        	movs	r2, #20
 80101f2: cb 68                        	ldr	r3, [r1, #12]
 80101f4: 4e f2 f1 51                  	movw	r1, #58865
 80101f8: c0 f6 01 01                  	movt	r1, #2049
 80101fc: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 80101fe: 00 28                        	cmp	r0, #0
 8010200: 40 f0 66 83                  	bne.w	#1740 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 8010204: d5 e9 00 21                  	ldrd	r2, r1, [r5]
 8010208: 00 20                        	movs	r0, #0
 801020a: 13 04                        	lsls	r3, r2, #16
 801020c: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x3f4>
;                         if !first {
 801020e: 58 b9                        	cbnz	r0, #22
 8010210: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8010214: 03 22                        	movs	r2, #3
 8010216: cb 68                        	ldr	r3, [r1, #12]
 8010218: 4d f6 97 71                  	movw	r1, #57239
 801021c: c0 f6 01 01                  	movt	r1, #2049
 8010220: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 8010222: 00 28                        	cmp	r0, #0
 8010224: 40 f0 54 83                  	bne.w	#1704 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
 8010228: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 801022c: 17 22                        	movs	r2, #23
 801022e: cb 68                        	ldr	r3, [r1, #12]
 8010230: 4e f2 05 61                  	movw	r1, #58885
 8010234: c0 f6 01 01                  	movt	r1, #2049
 8010238: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 801023a: 00 28                        	cmp	r0, #0
 801023c: 40 f0 48 83                  	bne.w	#1680 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 8010240: d5 e9 00 21                  	ldrd	r2, r1, [r5]
 8010244: 00 20                        	movs	r0, #0
 8010246: d3 03                        	lsls	r3, r2, #15
 8010248: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x430>
;                         if !first {
 801024a: 58 b9                        	cbnz	r0, #22
 801024c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8010250: 03 22                        	movs	r2, #3
 8010252: cb 68                        	ldr	r3, [r1, #12]
 8010254: 4d f6 97 71                  	movw	r1, #57239
 8010258: c0 f6 01 01                  	movt	r1, #2049
 801025c: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 801025e: 00 28                        	cmp	r0, #0
 8010260: 40 f0 36 83                  	bne.w	#1644 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
 8010264: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8010268: 19 22                        	movs	r2, #25
 801026a: cb 68                        	ldr	r3, [r1, #12]
 801026c: 4e f2 1c 61                  	movw	r1, #58908
 8010270: c0 f6 01 01                  	movt	r1, #2049
 8010274: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 8010276: 00 28                        	cmp	r0, #0
 8010278: 40 f0 2a 83                  	bne.w	#1620 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 801027c: d5 e9 00 21                  	ldrd	r2, r1, [r5]
 8010280: 00 20                        	movs	r0, #0
 8010282: 93 03                        	lsls	r3, r2, #14
 8010284: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x46c>
;                         if !first {
 8010286: 58 b9                        	cbnz	r0, #22
 8010288: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 801028c: 03 22                        	movs	r2, #3
 801028e: cb 68                        	ldr	r3, [r1, #12]
 8010290: 4d f6 97 71                  	movw	r1, #57239
 8010294: c0 f6 01 01                  	movt	r1, #2049
 8010298: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 801029a: 00 28                        	cmp	r0, #0
 801029c: 40 f0 18 83                  	bne.w	#1584 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
 80102a0: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 80102a4: 16 22                        	movs	r2, #22
 80102a6: cb 68                        	ldr	r3, [r1, #12]
 80102a8: 4e f2 35 61                  	movw	r1, #58933
 80102ac: c0 f6 01 01                  	movt	r1, #2049
 80102b0: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 80102b2: 00 28                        	cmp	r0, #0
 80102b4: 40 f0 0c 83                  	bne.w	#1560 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 80102b8: d5 e9 00 21                  	ldrd	r2, r1, [r5]
 80102bc: 00 20                        	movs	r0, #0
 80102be: 53 03                        	lsls	r3, r2, #13
 80102c0: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x4a8>
;                         if !first {
 80102c2: 58 b9                        	cbnz	r0, #22
 80102c4: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 80102c8: 03 22                        	movs	r2, #3
 80102ca: cb 68                        	ldr	r3, [r1, #12]
 80102cc: 4d f6 97 71                  	movw	r1, #57239
 80102d0: c0 f6 01 01                  	movt	r1, #2049
 80102d4: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 80102d6: 00 28                        	cmp	r0, #0
 80102d8: 40 f0 fa 82                  	bne.w	#1524 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
 80102dc: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 80102e0: 1b 22                        	movs	r2, #27
 80102e2: cb 68                        	ldr	r3, [r1, #12]
 80102e4: 4e f2 4b 61                  	movw	r1, #58955
 80102e8: c0 f6 01 01                  	movt	r1, #2049
 80102ec: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 80102ee: 00 28                        	cmp	r0, #0
 80102f0: 40 f0 ee 82                  	bne.w	#1500 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 80102f4: d5 e9 00 21                  	ldrd	r2, r1, [r5]
 80102f8: 00 20                        	movs	r0, #0
 80102fa: 13 03                        	lsls	r3, r2, #12
 80102fc: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x4e4>
;                         if !first {
 80102fe: 58 b9                        	cbnz	r0, #22
 8010300: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8010304: 03 22                        	movs	r2, #3
 8010306: cb 68                        	ldr	r3, [r1, #12]
 8010308: 4d f6 97 71                  	movw	r1, #57239
 801030c: c0 f6 01 01                  	movt	r1, #2049
 8010310: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 8010312: 00 28                        	cmp	r0, #0
 8010314: 40 f0 dc 82                  	bne.w	#1464 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
 8010318: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 801031c: 18 22                        	movs	r2, #24
 801031e: cb 68                        	ldr	r3, [r1, #12]
 8010320: 4e f2 66 61                  	movw	r1, #58982
 8010324: c0 f6 01 01                  	movt	r1, #2049
 8010328: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 801032a: 00 28                        	cmp	r0, #0
 801032c: 40 f0 d0 82                  	bne.w	#1440 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 8010330: d5 e9 00 21                  	ldrd	r2, r1, [r5]
 8010334: 00 20                        	movs	r0, #0
 8010336: d3 02                        	lsls	r3, r2, #11
 8010338: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x520>
;                         if !first {
 801033a: 58 b9                        	cbnz	r0, #22
 801033c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8010340: 03 22                        	movs	r2, #3
 8010342: cb 68                        	ldr	r3, [r1, #12]
 8010344: 4d f6 97 71                  	movw	r1, #57239
 8010348: c0 f6 01 01                  	movt	r1, #2049
 801034c: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 801034e: 00 28                        	cmp	r0, #0
 8010350: 40 f0 be 82                  	bne.w	#1404 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
 8010354: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8010358: 1a 22                        	movs	r2, #26
 801035a: cb 68                        	ldr	r3, [r1, #12]
 801035c: 4e f2 7e 61                  	movw	r1, #59006
 8010360: c0 f6 01 01                  	movt	r1, #2049
 8010364: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 8010366: 00 28                        	cmp	r0, #0
 8010368: 40 f0 b2 82                  	bne.w	#1380 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 801036c: d5 e9 00 21                  	ldrd	r2, r1, [r5]
 8010370: 00 20                        	movs	r0, #0
 8010372: 93 02                        	lsls	r3, r2, #10
 8010374: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x55c>
;                         if !first {
 8010376: 58 b9                        	cbnz	r0, #22
 8010378: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 801037c: 03 22                        	movs	r2, #3
 801037e: cb 68                        	ldr	r3, [r1, #12]
 8010380: 4d f6 97 71                  	movw	r1, #57239
 8010384: c0 f6 01 01                  	movt	r1, #2049
 8010388: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 801038a: 00 28                        	cmp	r0, #0
 801038c: 40 f0 a0 82                  	bne.w	#1344 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
 8010390: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8010394: 17 22                        	movs	r2, #23
 8010396: cb 68                        	ldr	r3, [r1, #12]
 8010398: 4e f2 98 61                  	movw	r1, #59032
 801039c: c0 f6 01 01                  	movt	r1, #2049
 80103a0: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 80103a2: 00 28                        	cmp	r0, #0
 80103a4: 40 f0 94 82                  	bne.w	#1320 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 80103a8: d5 e9 00 21                  	ldrd	r2, r1, [r5]
 80103ac: 00 20                        	movs	r0, #0
 80103ae: 53 02                        	lsls	r3, r2, #9
 80103b0: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x598>
;                         if !first {
 80103b2: 58 b9                        	cbnz	r0, #22
 80103b4: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 80103b8: 03 22                        	movs	r2, #3
 80103ba: cb 68                        	ldr	r3, [r1, #12]
 80103bc: 4d f6 97 71                  	movw	r1, #57239
 80103c0: c0 f6 01 01                  	movt	r1, #2049
 80103c4: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 80103c6: 00 28                        	cmp	r0, #0
 80103c8: 40 f0 82 82                  	bne.w	#1284 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
 80103cc: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 80103d0: 18 22                        	movs	r2, #24
 80103d2: cb 68                        	ldr	r3, [r1, #12]
 80103d4: 4e f2 af 61                  	movw	r1, #59055
 80103d8: c0 f6 01 01                  	movt	r1, #2049
 80103dc: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 80103de: 00 28                        	cmp	r0, #0
 80103e0: 40 f0 76 82                  	bne.w	#1260 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 80103e4: d5 e9 00 21                  	ldrd	r2, r1, [r5]
 80103e8: 00 20                        	movs	r0, #0
 80103ea: 13 02                        	lsls	r3, r2, #8
 80103ec: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x5d4>
;                         if !first {
 80103ee: 58 b9                        	cbnz	r0, #22
 80103f0: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 80103f4: 03 22                        	movs	r2, #3
 80103f6: cb 68                        	ldr	r3, [r1, #12]
 80103f8: 4d f6 97 71                  	movw	r1, #57239
 80103fc: c0 f6 01 01                  	movt	r1, #2049
 8010400: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 8010402: 00 28                        	cmp	r0, #0
 8010404: 40 f0 64 82                  	bne.w	#1224 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
 8010408: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 801040c: 17 22                        	movs	r2, #23
 801040e: cb 68                        	ldr	r3, [r1, #12]
 8010410: 4e f2 c7 61                  	movw	r1, #59079
 8010414: c0 f6 01 01                  	movt	r1, #2049
 8010418: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 801041a: 00 28                        	cmp	r0, #0
 801041c: 40 f0 58 82                  	bne.w	#1200 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 8010420: d5 e9 00 21                  	ldrd	r2, r1, [r5]
 8010424: 00 20                        	movs	r0, #0
 8010426: d3 01                        	lsls	r3, r2, #7
 8010428: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x610>
;                         if !first {
 801042a: 58 b9                        	cbnz	r0, #22
 801042c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8010430: 03 22                        	movs	r2, #3
 8010432: cb 68                        	ldr	r3, [r1, #12]
 8010434: 4d f6 97 71                  	movw	r1, #57239
 8010438: c0 f6 01 01                  	movt	r1, #2049
 801043c: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 801043e: 00 28                        	cmp	r0, #0
 8010440: 40 f0 46 82                  	bne.w	#1164 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
 8010444: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8010448: 1a 22                        	movs	r2, #26
 801044a: cb 68                        	ldr	r3, [r1, #12]
 801044c: 4e f2 de 61                  	movw	r1, #59102
 8010450: c0 f6 01 01                  	movt	r1, #2049
 8010454: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 8010456: 00 28                        	cmp	r0, #0
 8010458: 40 f0 3a 82                  	bne.w	#1140 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 801045c: d5 e9 00 21                  	ldrd	r2, r1, [r5]
 8010460: 00 20                        	movs	r0, #0
 8010462: 93 01                        	lsls	r3, r2, #6
 8010464: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x64c>
;                         if !first {
 8010466: 58 b9                        	cbnz	r0, #22
 8010468: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 801046c: 03 22                        	movs	r2, #3
 801046e: cb 68                        	ldr	r3, [r1, #12]
 8010470: 4d f6 97 71                  	movw	r1, #57239
 8010474: c0 f6 01 01                  	movt	r1, #2049
 8010478: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 801047a: 00 28                        	cmp	r0, #0
 801047c: 40 f0 28 82                  	bne.w	#1104 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
 8010480: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8010484: 19 22                        	movs	r2, #25
 8010486: cb 68                        	ldr	r3, [r1, #12]
 8010488: 4e f2 f8 61                  	movw	r1, #59128
 801048c: c0 f6 01 01                  	movt	r1, #2049
 8010490: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 8010492: 00 28                        	cmp	r0, #0
 8010494: 40 f0 1c 82                  	bne.w	#1080 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 8010498: d5 e9 00 21                  	ldrd	r2, r1, [r5]
 801049c: 00 20                        	movs	r0, #0
 801049e: 53 01                        	lsls	r3, r2, #5
 80104a0: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x688>
;                         if !first {
 80104a2: 58 b9                        	cbnz	r0, #22
 80104a4: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 80104a8: 03 22                        	movs	r2, #3
 80104aa: cb 68                        	ldr	r3, [r1, #12]
 80104ac: 4d f6 97 71                  	movw	r1, #57239
 80104b0: c0 f6 01 01                  	movt	r1, #2049
 80104b4: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 80104b6: 00 28                        	cmp	r0, #0
 80104b8: 40 f0 0a 82                  	bne.w	#1044 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
 80104bc: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 80104c0: 19 22                        	movs	r2, #25
 80104c2: cb 68                        	ldr	r3, [r1, #12]
 80104c4: 4e f2 11 71                  	movw	r1, #59153
 80104c8: c0 f6 01 01                  	movt	r1, #2049
 80104cc: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 80104ce: 00 28                        	cmp	r0, #0
 80104d0: 40 f0 fe 81                  	bne.w	#1020 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 80104d4: d5 e9 00 21                  	ldrd	r2, r1, [r5]
 80104d8: 00 20                        	movs	r0, #0
 80104da: 13 01                        	lsls	r3, r2, #4
 80104dc: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x6c4>
;                         if !first {
 80104de: 58 b9                        	cbnz	r0, #22
 80104e0: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 80104e4: 03 22                        	movs	r2, #3
 80104e6: cb 68                        	ldr	r3, [r1, #12]
 80104e8: 4d f6 97 71                  	movw	r1, #57239
 80104ec: c0 f6 01 01                  	movt	r1, #2049
 80104f0: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 80104f2: 00 28                        	cmp	r0, #0
 80104f4: 40 f0 ec 81                  	bne.w	#984 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
 80104f8: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 80104fc: 18 22                        	movs	r2, #24
 80104fe: cb 68                        	ldr	r3, [r1, #12]
 8010500: 4e f2 2a 71                  	movw	r1, #59178
 8010504: c0 f6 01 01                  	movt	r1, #2049
 8010508: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 801050a: 00 28                        	cmp	r0, #0
 801050c: 40 f0 e0 81                  	bne.w	#960 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 8010510: d5 e9 00 21                  	ldrd	r2, r1, [r5]
 8010514: 00 20                        	movs	r0, #0
 8010516: d3 00                        	lsls	r3, r2, #3
 8010518: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x700>
;                         if !first {
 801051a: 58 b9                        	cbnz	r0, #22
 801051c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8010520: 03 22                        	movs	r2, #3
 8010522: cb 68                        	ldr	r3, [r1, #12]
 8010524: 4d f6 97 71                  	movw	r1, #57239
 8010528: c0 f6 01 01                  	movt	r1, #2049
 801052c: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 801052e: 00 28                        	cmp	r0, #0
 8010530: 40 f0 ce 81                  	bne.w	#924 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
 8010534: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8010538: 1b 22                        	movs	r2, #27
 801053a: cb 68                        	ldr	r3, [r1, #12]
 801053c: 4e f2 42 71                  	movw	r1, #59202
 8010540: c0 f6 01 01                  	movt	r1, #2049
 8010544: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 8010546: 00 28                        	cmp	r0, #0
 8010548: 40 f0 c2 81                  	bne.w	#900 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 801054c: d5 e9 00 21                  	ldrd	r2, r1, [r5]
 8010550: 00 20                        	movs	r0, #0
 8010552: 93 00                        	lsls	r3, r2, #2
 8010554: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x73c>
;                         if !first {
 8010556: 58 b9                        	cbnz	r0, #22
 8010558: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 801055c: 03 22                        	movs	r2, #3
 801055e: cb 68                        	ldr	r3, [r1, #12]
 8010560: 4d f6 97 71                  	movw	r1, #57239
 8010564: c0 f6 01 01                  	movt	r1, #2049
 8010568: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 801056a: 00 28                        	cmp	r0, #0
 801056c: 40 f0 b0 81                  	bne.w	#864 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
 8010570: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8010574: 23 22                        	movs	r2, #35
 8010576: cb 68                        	ldr	r3, [r1, #12]
 8010578: 4e f2 5d 71                  	movw	r1, #59229
 801057c: c0 f6 01 01                  	movt	r1, #2049
 8010580: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 8010582: 00 28                        	cmp	r0, #0
 8010584: 40 f0 a4 81                  	bne.w	#840 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 8010588: d5 e9 00 21                  	ldrd	r2, r1, [r5]
 801058c: 00 20                        	movs	r0, #0
 801058e: 53 00                        	lsls	r3, r2, #1
 8010590: 1b d5                        	bpl	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x778>
;                         if !first {
 8010592: 58 b9                        	cbnz	r0, #22
 8010594: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8010598: 03 22                        	movs	r2, #3
 801059a: cb 68                        	ldr	r3, [r1, #12]
 801059c: 4d f6 97 71                  	movw	r1, #57239
 80105a0: c0 f6 01 01                  	movt	r1, #2049
 80105a4: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 80105a6: 00 28                        	cmp	r0, #0
 80105a8: 40 f0 92 81                  	bne.w	#804 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
 80105ac: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 80105b0: 18 22                        	movs	r2, #24
 80105b2: cb 68                        	ldr	r3, [r1, #12]
 80105b4: 4e f2 80 71                  	movw	r1, #59264
 80105b8: c0 f6 01 01                  	movt	r1, #2049
 80105bc: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 80105be: 00 28                        	cmp	r0, #0
 80105c0: 40 f0 86 81                  	bne.w	#780 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 80105c4: d5 e9 00 21                  	ldrd	r2, r1, [r5]
 80105c8: 00 20                        	movs	r0, #0
 80105ca: b2 f1 ff 3f                  	cmp.w	r2, #4294967295
 80105ce: 1d dd                        	ble	#58 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x7ba>
 80105d0: ca 07                        	lsls	r2, r1, #31
 80105d2: 38 d0                        	beq	#112 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x7f4>
;                         if !first {
 80105d4: 58 b9                        	cbnz	r0, #22
 80105d6: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 80105da: 03 22                        	movs	r2, #3
 80105dc: cb 68                        	ldr	r3, [r1, #12]
 80105de: 4d f6 97 71                  	movw	r1, #57239
 80105e2: c0 f6 01 01                  	movt	r1, #2049
 80105e6: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 80105e8: 00 28                        	cmp	r0, #0
 80105ea: 40 f0 71 81                  	bne.w	#738 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
 80105ee: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 80105f2: 16 22                        	movs	r2, #22
 80105f4: cb 68                        	ldr	r3, [r1, #12]
 80105f6: 4e f2 af 71                  	movw	r1, #59311
 80105fa: c0 f6 01 01                  	movt	r1, #2049
 80105fe: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 8010600: 00 28                        	cmp	r0, #0
 8010602: 40 f0 65 81                  	bne.w	#714 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 8010606: 69 68                        	ldr	r1, [r5, #4]
 8010608: 00 20                        	movs	r0, #0
 801060a: 1c e0                        	b	#56 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x7f4>
;                         if !first {
 801060c: 58 b9                        	cbnz	r0, #22
 801060e: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8010612: 03 22                        	movs	r2, #3
 8010614: cb 68                        	ldr	r3, [r1, #12]
 8010616: 4d f6 97 71                  	movw	r1, #57239
 801061a: c0 f6 01 01                  	movt	r1, #2049
 801061e: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 8010620: 00 28                        	cmp	r0, #0
 8010622: 40 f0 55 81                  	bne.w	#682 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
 8010626: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 801062a: 17 22                        	movs	r2, #23
 801062c: cb 68                        	ldr	r3, [r1, #12]
 801062e: 4e f2 98 71                  	movw	r1, #59288
 8010632: c0 f6 01 01                  	movt	r1, #2049
 8010636: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 8010638: 00 28                        	cmp	r0, #0
 801063a: 40 f0 49 81                  	bne.w	#658 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 801063e: 69 68                        	ldr	r1, [r5, #4]
 8010640: 00 20                        	movs	r0, #0
 8010642: ca 07                        	lsls	r2, r1, #31
 8010644: c6 d1                        	bne	#-116 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x782>
 8010646: 8a 07                        	lsls	r2, r1, #30
 8010648: 1a d5                        	bpl	#52 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x82e>
;                         if !first {
 801064a: 58 b9                        	cbnz	r0, #22
 801064c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8010650: 03 22                        	movs	r2, #3
 8010652: cb 68                        	ldr	r3, [r1, #12]
 8010654: 4d f6 97 71                  	movw	r1, #57239
 8010658: c0 f6 01 01                  	movt	r1, #2049
 801065c: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 801065e: 00 28                        	cmp	r0, #0
 8010660: 40 f0 36 81                  	bne.w	#620 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
 8010664: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8010668: 19 22                        	movs	r2, #25
 801066a: cb 68                        	ldr	r3, [r1, #12]
 801066c: 4e f2 c5 71                  	movw	r1, #59333
 8010670: c0 f6 01 01                  	movt	r1, #2049
 8010674: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 8010676: 00 28                        	cmp	r0, #0
 8010678: 40 f0 2a 81                  	bne.w	#596 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 801067c: 69 68                        	ldr	r1, [r5, #4]
 801067e: 00 20                        	movs	r0, #0
 8010680: 4a 07                        	lsls	r2, r1, #29
 8010682: 1a d5                        	bpl	#52 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x868>
;                         if !first {
 8010684: 58 b9                        	cbnz	r0, #22
 8010686: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 801068a: 03 22                        	movs	r2, #3
 801068c: cb 68                        	ldr	r3, [r1, #12]
 801068e: 4d f6 97 71                  	movw	r1, #57239
 8010692: c0 f6 01 01                  	movt	r1, #2049
 8010696: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 8010698: 00 28                        	cmp	r0, #0
 801069a: 40 f0 19 81                  	bne.w	#562 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
 801069e: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 80106a2: 19 22                        	movs	r2, #25
 80106a4: cb 68                        	ldr	r3, [r1, #12]
 80106a6: 4e f2 de 71                  	movw	r1, #59358
 80106aa: c0 f6 01 01                  	movt	r1, #2049
 80106ae: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 80106b0: 00 28                        	cmp	r0, #0
 80106b2: 40 f0 0d 81                  	bne.w	#538 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 80106b6: 69 68                        	ldr	r1, [r5, #4]
 80106b8: 00 20                        	movs	r0, #0
 80106ba: 0a 07                        	lsls	r2, r1, #28
 80106bc: 1a d5                        	bpl	#52 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x8a2>
;                         if !first {
 80106be: 58 b9                        	cbnz	r0, #22
 80106c0: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 80106c4: 03 22                        	movs	r2, #3
 80106c6: cb 68                        	ldr	r3, [r1, #12]
 80106c8: 4d f6 97 71                  	movw	r1, #57239
 80106cc: c0 f6 01 01                  	movt	r1, #2049
 80106d0: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 80106d2: 00 28                        	cmp	r0, #0
 80106d4: 40 f0 fc 80                  	bne.w	#504 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
 80106d8: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 80106dc: 18 22                        	movs	r2, #24
 80106de: cb 68                        	ldr	r3, [r1, #12]
 80106e0: 4e f2 f7 71                  	movw	r1, #59383
 80106e4: c0 f6 01 01                  	movt	r1, #2049
 80106e8: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 80106ea: 00 28                        	cmp	r0, #0
 80106ec: 40 f0 f0 80                  	bne.w	#480 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 80106f0: 69 68                        	ldr	r1, [r5, #4]
 80106f2: 00 20                        	movs	r0, #0
 80106f4: ca 06                        	lsls	r2, r1, #27
 80106f6: 1a d5                        	bpl	#52 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x8dc>
;                         if !first {
 80106f8: 58 b9                        	cbnz	r0, #22
 80106fa: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 80106fe: 03 22                        	movs	r2, #3
 8010700: cb 68                        	ldr	r3, [r1, #12]
 8010702: 4d f6 97 71                  	movw	r1, #57239
 8010706: c0 f6 01 01                  	movt	r1, #2049
 801070a: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 801070c: 00 28                        	cmp	r0, #0
 801070e: 40 f0 df 80                  	bne.w	#446 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
 8010712: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8010716: 1b 22                        	movs	r2, #27
 8010718: cb 68                        	ldr	r3, [r1, #12]
 801071a: 4e f6 0f 01                  	movw	r1, #59407
 801071e: c0 f6 01 01                  	movt	r1, #2049
 8010722: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 8010724: 00 28                        	cmp	r0, #0
 8010726: 40 f0 d3 80                  	bne.w	#422 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 801072a: 69 68                        	ldr	r1, [r5, #4]
 801072c: 00 20                        	movs	r0, #0
 801072e: 8a 06                        	lsls	r2, r1, #26
 8010730: 1a d5                        	bpl	#52 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x916>
;                         if !first {
 8010732: 58 b9                        	cbnz	r0, #22
 8010734: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8010738: 03 22                        	movs	r2, #3
 801073a: cb 68                        	ldr	r3, [r1, #12]
 801073c: 4d f6 97 71                  	movw	r1, #57239
 8010740: c0 f6 01 01                  	movt	r1, #2049
 8010744: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 8010746: 00 28                        	cmp	r0, #0
 8010748: 40 f0 c2 80                  	bne.w	#388 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
 801074c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8010750: 1b 22                        	movs	r2, #27
 8010752: cb 68                        	ldr	r3, [r1, #12]
 8010754: 4e f6 2a 01                  	movw	r1, #59434
 8010758: c0 f6 01 01                  	movt	r1, #2049
 801075c: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 801075e: 00 28                        	cmp	r0, #0
 8010760: 40 f0 b6 80                  	bne.w	#364 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 8010764: 69 68                        	ldr	r1, [r5, #4]
 8010766: 00 20                        	movs	r0, #0
 8010768: 4a 06                        	lsls	r2, r1, #25
 801076a: 1a d5                        	bpl	#52 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x950>
;                         if !first {
 801076c: 58 b9                        	cbnz	r0, #22
 801076e: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8010772: 03 22                        	movs	r2, #3
 8010774: cb 68                        	ldr	r3, [r1, #12]
 8010776: 4d f6 97 71                  	movw	r1, #57239
 801077a: c0 f6 01 01                  	movt	r1, #2049
 801077e: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 8010780: 00 28                        	cmp	r0, #0
 8010782: 40 f0 a5 80                  	bne.w	#330 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
 8010786: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 801078a: 17 22                        	movs	r2, #23
 801078c: cb 68                        	ldr	r3, [r1, #12]
 801078e: 4e f6 45 01                  	movw	r1, #59461
 8010792: c0 f6 01 01                  	movt	r1, #2049
 8010796: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 8010798: 00 28                        	cmp	r0, #0
 801079a: 40 f0 99 80                  	bne.w	#306 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 801079e: 69 68                        	ldr	r1, [r5, #4]
 80107a0: 00 20                        	movs	r0, #0
 80107a2: 0a 06                        	lsls	r2, r1, #24
 80107a4: 19 d5                        	bpl	#50 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x988>
;                         if !first {
 80107a6: 58 b9                        	cbnz	r0, #22
 80107a8: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 80107ac: 03 22                        	movs	r2, #3
 80107ae: cb 68                        	ldr	r3, [r1, #12]
 80107b0: 4d f6 97 71                  	movw	r1, #57239
 80107b4: c0 f6 01 01                  	movt	r1, #2049
 80107b8: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 80107ba: 00 28                        	cmp	r0, #0
 80107bc: 40 f0 88 80                  	bne.w	#272 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
 80107c0: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 80107c4: 1a 22                        	movs	r2, #26
 80107c6: cb 68                        	ldr	r3, [r1, #12]
 80107c8: 4e f6 5c 01                  	movw	r1, #59484
 80107cc: c0 f6 01 01                  	movt	r1, #2049
 80107d0: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 80107d2: 00 28                        	cmp	r0, #0
 80107d4: 7c d1                        	bne	#248 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 80107d6: 69 68                        	ldr	r1, [r5, #4]
 80107d8: 00 20                        	movs	r0, #0
 80107da: ca 05                        	lsls	r2, r1, #23
 80107dc: 18 d5                        	bpl	#48 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x9be>
;                         if !first {
 80107de: 50 b9                        	cbnz	r0, #20
 80107e0: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 80107e4: 03 22                        	movs	r2, #3
 80107e6: cb 68                        	ldr	r3, [r1, #12]
 80107e8: 4d f6 97 71                  	movw	r1, #57239
 80107ec: c0 f6 01 01                  	movt	r1, #2049
 80107f0: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 80107f2: 00 28                        	cmp	r0, #0
 80107f4: 6c d1                        	bne	#216 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
 80107f6: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 80107fa: 1a 22                        	movs	r2, #26
 80107fc: cb 68                        	ldr	r3, [r1, #12]
 80107fe: 4e f6 76 01                  	movw	r1, #59510
 8010802: c0 f6 01 01                  	movt	r1, #2049
 8010806: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 8010808: 00 28                        	cmp	r0, #0
 801080a: 61 d1                        	bne	#194 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 801080c: 69 68                        	ldr	r1, [r5, #4]
 801080e: 00 20                        	movs	r0, #0
 8010810: 8a 05                        	lsls	r2, r1, #22
 8010812: 18 d5                        	bpl	#48 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0x9f4>
;                         if !first {
 8010814: 50 b9                        	cbnz	r0, #20
 8010816: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 801081a: 03 22                        	movs	r2, #3
 801081c: cb 68                        	ldr	r3, [r1, #12]
 801081e: 4d f6 97 71                  	movw	r1, #57239
 8010822: c0 f6 01 01                  	movt	r1, #2049
 8010826: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 8010828: 00 28                        	cmp	r0, #0
 801082a: 51 d1                        	bne	#162 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
 801082c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8010830: 1a 22                        	movs	r2, #26
 8010832: cb 68                        	ldr	r3, [r1, #12]
 8010834: 4e f6 90 01                  	movw	r1, #59536
 8010838: c0 f6 01 01                  	movt	r1, #2049
 801083c: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 801083e: 00 28                        	cmp	r0, #0
 8010840: 46 d1                        	bne	#140 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa7e>
;                 let extra_bits = self.bits & !$BitFlags::all().bits();
 8010842: 69 68                        	ldr	r1, [r5, #4]
 8010844: 00 20                        	movs	r0, #0
 8010846: 40 f2 ff 32                  	movw	r2, #1023
 801084a: 21 ea 02 05                  	bic.w	r5, r1, r2
;                 if extra_bits != 0 {
 801084e: a5 b3                        	cbz	r5, #104
;                     if !first {
 8010850: 48 b9                        	cbnz	r0, #18
 8010852: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8010856: 03 22                        	movs	r2, #3
 8010858: cb 68                        	ldr	r3, [r1, #12]
 801085a: 4d f6 97 71                  	movw	r1, #57239
 801085e: c0 f6 01 01                  	movt	r1, #2049
 8010862: 98 47                        	blx	r3
;                         f.write_str(" | ")?;
 8010864: a0 bb                        	cbnz	r0, #104
 8010866: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 801086a: 02 22                        	movs	r2, #2
 801086c: cb 68                        	ldr	r3, [r1, #12]
 801086e: 4e f6 b5 31                  	movw	r1, #60341
 8010872: c0 f6 01 01                  	movt	r1, #2049
 8010876: 98 47                        	blx	r3
;                     f.write_str("0x")?;
 8010878: 50 bb                        	cbnz	r0, #84
 801087a: 0d f1 08 0c                  	add.w	r12, sp, #8
 801087e: 00 20                        	movs	r0, #0
 8010880: 7f 22                        	movs	r2, #127
 8010882: 53 1c                        	adds	r3, r2, #1
 8010884: 2c d0                        	beq	#88 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa8e>
 8010886: 00 f0 0f 03                  	and	r3, r0, #15
 801088a: 00 09                        	lsrs	r0, r0, #4
 801088c: 03 f1 57 01                  	add.w	r1, r3, #87
 8010890: 0a 2b                        	cmp	r3, #10
 8010892: 38 bf                        	it	lo
 8010894: 03 f1 30 01                  	addlo.w	r1, r3, #48
 8010898: 40 ea 05 70                  	orr.w	r0, r0, r5, lsl #28
 801089c: 0c f8 02 10                  	strb.w	r1, [r12, r2]
 80108a0: 40 ea 15 11                  	orr.w	r1, r0, r5, lsr #4
 80108a4: 01 3a                        	subs	r2, #1
 80108a6: 2d 09                        	lsrs	r5, r5, #4
 80108a8: 00 29                        	cmp	r1, #0
 80108aa: ea d1                        	bne	#-44 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa30>
 80108ac: 50 1c                        	adds	r0, r2, #1
 80108ae: 81 28                        	cmp	r0, #129
 80108b0: 17 d3                        	blo	#46 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc2fcab91a62424dcE+0xa90>
 80108b2: 80 21                        	movs	r1, #128
 80108b4: 05 f0 af fa                  	bl	#21854
 80108b8: fe de                        	trap
;                 if first {
 80108ba: 68 b1                        	cbz	r0, #26
 80108bc: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 80108c0: 07 22                        	movs	r2, #7
 80108c2: cb 68                        	ldr	r3, [r1, #12]
 80108c4: 4e f2 66 41                  	movw	r1, #58470
 80108c8: c0 f6 01 01                  	movt	r1, #2049
 80108cc: 98 47                        	blx	r3
;                     f.write_str("(empty)")?;
 80108ce: 18 b1                        	cbz	r0, #6
 80108d0: 01 25                        	movs	r5, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 80108d2: 28 46                        	mov	r0, r5
 80108d4: 22 b0                        	add	sp, #136
 80108d6: b0 bd                        	pop	{r4, r5, r7, pc}
 80108d8: 00 25                        	movs	r5, #0
 80108da: 28 46                        	mov	r0, r5
 80108dc: 22 b0                        	add	sp, #136
 80108de: b0 bd                        	pop	{r4, r5, r7, pc}
 80108e0: 00 20                        	movs	r0, #0
 80108e2: c0 f1 80 01                  	rsb.w	r1, r0, #128
 80108e6: 4e f6 b5 32                  	movw	r2, #60341
 80108ea: 60 44                        	add	r0, r12
 80108ec: c0 f6 01 02                  	movt	r2, #2049
 80108f0: cd e9 00 01                  	strd	r0, r1, [sp]
 80108f4: 20 46                        	mov	r0, r4
 80108f6: 01 21                        	movs	r1, #1
 80108f8: 02 23                        	movs	r3, #2
 80108fa: 01 25                        	movs	r5, #1
 80108fc: 05 f0 1e f9                  	bl	#21052
;                     $crate::_core::fmt::LowerHex::fmt(&extra_bits, f)?;
 8010900: 00 28                        	cmp	r0, #0
 8010902: 08 bf                        	it	eq
 8010904: 00 25                        	moveq	r5, #0
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8010906: 28 46                        	mov	r0, r5
 8010908: 22 b0                        	add	sp, #136
 801090a: b0 bd                        	pop	{r4, r5, r7, pc}

0801090c _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::hc3687a2b63970a10:
 801090c: b0 b5                        	push	{r4, r5, r7, lr}
 801090e: 02 af                        	add	r7, sp, #8
 8010910: 84 b0                        	sub	sp, #16
 8010912: 0c 46                        	mov	r4, r1
 8010914: 05 68                        	ldr	r5, [r0]
 8010916: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 801091a: 1a 22                        	movs	r2, #26
 801091c: cb 68                        	ldr	r3, [r1, #12]
 801091e: 4c f6 90 51                  	movw	r1, #52624
 8010922: c0 f6 01 01                  	movt	r1, #2049
 8010926: 98 47                        	blx	r3
 8010928: 8d f8 08 00                  	strb.w	r0, [sp, #8]
;     pub status: Status<VS>,
 801092c: 05 f1 2a 00                  	add.w	r0, r5, #42
 8010930: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 8010932: 4c f6 74 20                  	movw	r0, #51828
 8010936: 00 21                        	movs	r1, #0
 8010938: c0 f6 01 00                  	movt	r0, #2049
 801093c: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 8010940: 4f f6 60 31                  	movw	r1, #64352
 8010944: 00 90                        	str	r0, [sp]
 8010946: 01 a8                        	add	r0, sp, #4
 8010948: 03 ab                        	add	r3, sp, #12
 801094a: c0 f6 01 01                  	movt	r1, #2049
 801094e: 06 22                        	movs	r2, #6
 8010950: 01 94                        	str	r4, [sp, #4]
 8010952: 05 f0 ed fe                  	bl	#24026
;     pub conn_handle: ConnectionHandle,
 8010956: 05 f1 28 01                  	add.w	r1, r5, #40
 801095a: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 801095c: 4c f6 84 21                  	movw	r1, #51844
 8010960: 03 ab                        	add	r3, sp, #12
 8010962: c0 f6 01 01                  	movt	r1, #2049
 8010966: 0b 22                        	movs	r2, #11
 8010968: 00 91                        	str	r1, [sp]
 801096a: 4f f6 0c 51                  	movw	r1, #64780
 801096e: c0 f6 01 01                  	movt	r1, #2049
 8010972: 05 f0 dd fe                  	bl	#23994
 8010976: 4d f2 c4 51                  	movw	r1, #54724
 801097a: 03 ab                        	add	r3, sp, #12
 801097c: c0 f6 01 01                  	movt	r1, #2049
 8010980: 0d 22                        	movs	r2, #13
 8010982: 00 91                        	str	r1, [sp]
 8010984: 40 f6 67 01                  	movw	r1, #2151
 8010988: c0 f6 02 01                  	movt	r1, #2050
;     pub conn_interval: FixedConnectionInterval,
 801098c: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 801098e: 05 f0 cf fe                  	bl	#23966
 8010992: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 8010996: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 801099a: b9 b1                        	cbz	r1, #46
 801099c: 08 b1                        	cbz	r0, #2
 801099e: 01 20                        	movs	r0, #1
 80109a0: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc3687a2b63970a10E+0xc0>
 80109a2: 01 99                        	ldr	r1, [sp, #4]
 80109a4: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 80109a8: 09 78                        	ldrb	r1, [r1]
 80109aa: d3 68                        	ldr	r3, [r2, #12]
 80109ac: 49 07                        	lsls	r1, r1, #29
 80109ae: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc3687a2b63970a10E+0xb4>
 80109b0: 4e f6 1c 41                  	movw	r1, #60444
 80109b4: 02 22                        	movs	r2, #2
 80109b6: c0 f6 01 01                  	movt	r1, #2049
 80109ba: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc3687a2b63970a10E+0xbe>
 80109bc: 4e f6 d6 41                  	movw	r1, #60630
 80109c0: 01 22                        	movs	r2, #1
 80109c2: c0 f6 01 01                  	movt	r1, #2049
 80109c6: 98 47                        	blx	r3
 80109c8: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 80109cc: 00 28                        	cmp	r0, #0
 80109ce: 18 bf                        	it	ne
 80109d0: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 80109d2: 04 b0                        	add	sp, #16
 80109d4: b0 bd                        	pop	{r4, r5, r7, pc}

080109d6 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::hc609237a7597e6d4:
 80109d6: b0 b5                        	push	{r4, r5, r7, lr}
 80109d8: 02 af                        	add	r7, sp, #8
 80109da: 84 b0                        	sub	sp, #16
 80109dc: 0c 46                        	mov	r4, r1
 80109de: 05 68                        	ldr	r5, [r0]
 80109e0: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 80109e4: 14 22                        	movs	r2, #20
 80109e6: cb 68                        	ldr	r3, [r1, #12]
 80109e8: 4e f6 2d 11                  	movw	r1, #59693
 80109ec: c0 f6 01 01                  	movt	r1, #2049
 80109f0: 98 47                        	blx	r3
 80109f2: 8d f8 08 00                  	strb.w	r0, [sp, #8]
;     pub conn_handle: ConnectionHandle,
 80109f6: 05 f1 08 00                  	add.w	r0, r5, #8
 80109fa: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 80109fc: 4d f6 10 40                  	movw	r0, #56336
 8010a00: 00 21                        	movs	r1, #0
 8010a02: c0 f6 01 00                  	movt	r0, #2049
 8010a06: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 8010a0a: 4f f6 0c 51                  	movw	r1, #64780
 8010a0e: 00 90                        	str	r0, [sp]
 8010a10: 01 a8                        	add	r0, sp, #4
 8010a12: 03 ab                        	add	r3, sp, #12
 8010a14: c0 f6 01 01                  	movt	r1, #2049
 8010a18: 0b 22                        	movs	r2, #11
 8010a1a: 01 94                        	str	r4, [sp, #4]
 8010a1c: 05 f0 88 fe                  	bl	#23824
 8010a20: 4d f6 24 61                  	movw	r1, #56868
 8010a24: 03 ab                        	add	r3, sp, #12
 8010a26: c0 f6 01 01                  	movt	r1, #2049
 8010a2a: 0c 22                        	movs	r2, #12
 8010a2c: 00 91                        	str	r1, [sp]
 8010a2e: 4e f6 41 11                  	movw	r1, #59713
 8010a32: c0 f6 01 01                  	movt	r1, #2049
;     pub random_value: u64,
 8010a36: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 8010a38: 05 f0 7a fe                  	bl	#23796
;     pub encrypted_diversifier: u16,
 8010a3c: 05 f1 0a 01                  	add.w	r1, r5, #10
 8010a40: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 8010a42: 4d f6 48 41                  	movw	r1, #56392
 8010a46: 03 ab                        	add	r3, sp, #12
 8010a48: c0 f6 01 01                  	movt	r1, #2049
 8010a4c: 15 22                        	movs	r2, #21
 8010a4e: 00 91                        	str	r1, [sp]
 8010a50: 4e f6 4d 11                  	movw	r1, #59725
 8010a54: c0 f6 01 01                  	movt	r1, #2049
 8010a58: 05 f0 6a fe                  	bl	#23764
 8010a5c: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 8010a60: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 8010a64: b9 b1                        	cbz	r1, #46
 8010a66: 08 b1                        	cbz	r0, #2
 8010a68: 01 20                        	movs	r0, #1
 8010a6a: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc609237a7597e6d4E+0xc0>
 8010a6c: 01 99                        	ldr	r1, [sp, #4]
 8010a6e: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8010a72: 09 78                        	ldrb	r1, [r1]
 8010a74: d3 68                        	ldr	r3, [r2, #12]
 8010a76: 49 07                        	lsls	r1, r1, #29
 8010a78: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc609237a7597e6d4E+0xb4>
 8010a7a: 4e f6 1c 41                  	movw	r1, #60444
 8010a7e: 02 22                        	movs	r2, #2
 8010a80: c0 f6 01 01                  	movt	r1, #2049
 8010a84: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc609237a7597e6d4E+0xbe>
 8010a86: 4e f6 d6 41                  	movw	r1, #60630
 8010a8a: 01 22                        	movs	r2, #1
 8010a8c: c0 f6 01 01                  	movt	r1, #2049
 8010a90: 98 47                        	blx	r3
 8010a92: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8010a96: 00 28                        	cmp	r0, #0
 8010a98: 18 bf                        	it	ne
 8010a9a: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8010a9c: 04 b0                        	add	sp, #16
 8010a9e: b0 bd                        	pop	{r4, r5, r7, pc}

08010aa0 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::hc835878346ce0feb:
 8010aa0: b0 b5                        	push	{r4, r5, r7, lr}
 8010aa2: 02 af                        	add	r7, sp, #8
 8010aa4: 84 b0                        	sub	sp, #16
 8010aa6: 0c 46                        	mov	r4, r1
 8010aa8: 05 68                        	ldr	r5, [r0]
 8010aaa: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8010aae: 18 22                        	movs	r2, #24
 8010ab0: cb 68                        	ldr	r3, [r1, #12]
 8010ab2: 4d f2 40 61                  	movw	r1, #54848
 8010ab6: c0 f6 01 01                  	movt	r1, #2049
 8010aba: 98 47                        	blx	r3
 8010abc: 8d f8 08 00                  	strb.w	r0, [sp, #8]
;     pub status: Status<VS>,
 8010ac0: a8 1d                        	adds	r0, r5, #6
 8010ac2: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 8010ac4: 4c f6 74 20                  	movw	r0, #51828
 8010ac8: 00 21                        	movs	r1, #0
 8010aca: c0 f6 01 00                  	movt	r0, #2049
 8010ace: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 8010ad2: 4f f6 60 31                  	movw	r1, #64352
 8010ad6: 00 90                        	str	r0, [sp]
 8010ad8: 01 a8                        	add	r0, sp, #4
 8010ada: 03 ab                        	add	r3, sp, #12
 8010adc: c0 f6 01 01                  	movt	r1, #2049
 8010ae0: 06 22                        	movs	r2, #6
 8010ae2: 01 94                        	str	r4, [sp, #4]
 8010ae4: 05 f0 24 fe                  	bl	#23624
 8010ae8: 4c f6 84 21                  	movw	r1, #51844
 8010aec: 03 ab                        	add	r3, sp, #12
 8010aee: c0 f6 01 01                  	movt	r1, #2049
 8010af2: 0b 22                        	movs	r2, #11
 8010af4: 00 91                        	str	r1, [sp]
 8010af6: 4f f6 0c 51                  	movw	r1, #64780
 8010afa: c0 f6 01 01                  	movt	r1, #2049
;     pub conn_handle: ConnectionHandle,
 8010afe: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 8010b00: 05 f0 16 fe                  	bl	#23596
;     pub version: u8,
 8010b04: e9 1d                        	adds	r1, r5, #7
 8010b06: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 8010b08: 4d f2 78 31                  	movw	r1, #54136
 8010b0c: 03 ab                        	add	r3, sp, #12
 8010b0e: c0 f6 01 01                  	movt	r1, #2049
 8010b12: 07 22                        	movs	r2, #7
 8010b14: 00 91                        	str	r1, [sp]
 8010b16: 4d f2 58 61                  	movw	r1, #54872
 8010b1a: c0 f6 01 01                  	movt	r1, #2049
 8010b1e: 05 f0 07 fe                  	bl	#23566
;     pub mfgr_name: u16,
 8010b22: a9 1c                        	adds	r1, r5, #2
; #[derive(Copy, Clone, Debug)]
 8010b24: 4d f2 68 64                  	movw	r4, #54888
;     pub mfgr_name: u16,
 8010b28: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 8010b2a: 4d f2 5f 61                  	movw	r1, #54879
 8010b2e: 03 ab                        	add	r3, sp, #12
 8010b30: c0 f6 01 04                  	movt	r4, #2049
 8010b34: c0 f6 01 01                  	movt	r1, #2049
 8010b38: 09 22                        	movs	r2, #9
 8010b3a: 00 94                        	str	r4, [sp]
 8010b3c: 05 f0 f8 fd                  	bl	#23536
;     pub subversion: u16,
 8010b40: 29 1d                        	adds	r1, r5, #4
 8010b42: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 8010b44: 4d f2 78 61                  	movw	r1, #54904
 8010b48: 03 ab                        	add	r3, sp, #12
 8010b4a: c0 f6 01 01                  	movt	r1, #2049
 8010b4e: 0a 22                        	movs	r2, #10
 8010b50: 00 94                        	str	r4, [sp]
 8010b52: 05 f0 ed fd                  	bl	#23514
 8010b56: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 8010b5a: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 8010b5e: b9 b1                        	cbz	r1, #46
 8010b60: 08 b1                        	cbz	r0, #2
 8010b62: 01 20                        	movs	r0, #1
 8010b64: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc835878346ce0febE+0xf0>
 8010b66: 01 99                        	ldr	r1, [sp, #4]
 8010b68: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8010b6c: 09 78                        	ldrb	r1, [r1]
 8010b6e: d3 68                        	ldr	r3, [r2, #12]
 8010b70: 49 07                        	lsls	r1, r1, #29
 8010b72: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc835878346ce0febE+0xe4>
 8010b74: 4e f6 1c 41                  	movw	r1, #60444
 8010b78: 02 22                        	movs	r2, #2
 8010b7a: c0 f6 01 01                  	movt	r1, #2049
 8010b7e: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc835878346ce0febE+0xee>
 8010b80: 4e f6 d6 41                  	movw	r1, #60630
 8010b84: 01 22                        	movs	r2, #1
 8010b86: c0 f6 01 01                  	movt	r1, #2049
 8010b8a: 98 47                        	blx	r3
 8010b8c: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8010b90: 00 28                        	cmp	r0, #0
 8010b92: 18 bf                        	it	ne
 8010b94: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8010b96: 04 b0                        	add	sp, #16
 8010b98: b0 bd                        	pop	{r4, r5, r7, pc}

08010b9a _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::hcb1d8202cd1292a4:
 8010b9a: 00 68                        	ldr	r0, [r0]
 8010b9c: 07 f0 20 bf                  	b.w	#32320 <_ZN80_$LT$stm32wb55..event..command..ReturnParameters$u20$as$u20$core..fmt..Debug$GT$3fmt17h61e4adde080e2541E+0x4>

08010ba0 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::hccc3c6f540b99728:
 8010ba0: b0 b5                        	push	{r4, r5, r7, lr}
 8010ba2: 02 af                        	add	r7, sp, #8
 8010ba4: 84 b0                        	sub	sp, #16
 8010ba6: 0c 46                        	mov	r4, r1
 8010ba8: 05 68                        	ldr	r5, [r0]
 8010baa: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8010bae: 12 22                        	movs	r2, #18
 8010bb0: cb 68                        	ldr	r3, [r1, #12]
 8010bb2: 4d f2 64 21                  	movw	r1, #53860
 8010bb6: c0 f6 01 01                  	movt	r1, #2049
 8010bba: 98 47                        	blx	r3
 8010bbc: 8d f8 08 00                  	strb.w	r0, [sp, #8]
;     pub status: Status<VS>,
 8010bc0: a8 1c                        	adds	r0, r5, #2
 8010bc2: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 8010bc4: 4c f6 74 20                  	movw	r0, #51828
 8010bc8: 00 21                        	movs	r1, #0
 8010bca: c0 f6 01 00                  	movt	r0, #2049
 8010bce: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 8010bd2: 4f f6 60 31                  	movw	r1, #64352
 8010bd6: 00 90                        	str	r0, [sp]
 8010bd8: 01 a8                        	add	r0, sp, #4
 8010bda: 03 ab                        	add	r3, sp, #12
 8010bdc: c0 f6 01 01                  	movt	r1, #2049
 8010be0: 06 22                        	movs	r2, #6
 8010be2: 01 94                        	str	r4, [sp, #4]
 8010be4: 05 f0 a4 fd                  	bl	#23368
 8010be8: 4c f6 84 21                  	movw	r1, #51844
 8010bec: 03 ab                        	add	r3, sp, #12
 8010bee: c0 f6 01 01                  	movt	r1, #2049
 8010bf2: 0b 22                        	movs	r2, #11
 8010bf4: 00 91                        	str	r1, [sp]
 8010bf6: 4f f6 0c 51                  	movw	r1, #64780
 8010bfa: c0 f6 01 01                  	movt	r1, #2049
;     pub conn_handle: ConnectionHandle,
 8010bfe: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 8010c00: 05 f0 96 fd                  	bl	#23340
;     pub bd_addr: crate::BdAddr,
 8010c04: e9 1c                        	adds	r1, r5, #3
 8010c06: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 8010c08: 4d f2 58 41                  	movw	r1, #54360
 8010c0c: 03 ab                        	add	r3, sp, #12
 8010c0e: c0 f6 01 01                  	movt	r1, #2049
 8010c12: 07 22                        	movs	r2, #7
 8010c14: 00 91                        	str	r1, [sp]
 8010c16: 4d f2 38 51                  	movw	r1, #54584
 8010c1a: c0 f6 01 01                  	movt	r1, #2049
 8010c1e: 05 f0 87 fd                  	bl	#23310
;     pub link_type: LinkType,
 8010c22: 05 f1 09 01                  	add.w	r1, r5, #9
 8010c26: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 8010c28: 4d f2 40 51                  	movw	r1, #54592
 8010c2c: 03 ab                        	add	r3, sp, #12
 8010c2e: c0 f6 01 01                  	movt	r1, #2049
 8010c32: 09 22                        	movs	r2, #9
 8010c34: 00 91                        	str	r1, [sp]
 8010c36: 4e f6 d4 01                  	movw	r1, #59604
 8010c3a: c0 f6 01 01                  	movt	r1, #2049
 8010c3e: 05 f0 77 fd                  	bl	#23278
;     pub encryption_enabled: bool,
 8010c42: 05 f1 0a 01                  	add.w	r1, r5, #10
 8010c46: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 8010c48: 4d f2 64 51                  	movw	r1, #54628
 8010c4c: 03 ab                        	add	r3, sp, #12
 8010c4e: c0 f6 01 01                  	movt	r1, #2049
 8010c52: 12 22                        	movs	r2, #18
 8010c54: 00 91                        	str	r1, [sp]
 8010c56: 4d f2 50 51                  	movw	r1, #54608
 8010c5a: c0 f6 01 01                  	movt	r1, #2049
 8010c5e: 05 f0 67 fd                  	bl	#23246
 8010c62: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 8010c66: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 8010c6a: b9 b1                        	cbz	r1, #46
 8010c6c: 08 b1                        	cbz	r0, #2
 8010c6e: 01 20                        	movs	r0, #1
 8010c70: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hccc3c6f540b99728E+0xfc>
 8010c72: 01 99                        	ldr	r1, [sp, #4]
 8010c74: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8010c78: 09 78                        	ldrb	r1, [r1]
 8010c7a: d3 68                        	ldr	r3, [r2, #12]
 8010c7c: 49 07                        	lsls	r1, r1, #29
 8010c7e: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hccc3c6f540b99728E+0xf0>
 8010c80: 4e f6 1c 41                  	movw	r1, #60444
 8010c84: 02 22                        	movs	r2, #2
 8010c86: c0 f6 01 01                  	movt	r1, #2049
 8010c8a: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hccc3c6f540b99728E+0xfa>
 8010c8c: 4e f6 d6 41                  	movw	r1, #60630
 8010c90: 01 22                        	movs	r2, #1
 8010c92: c0 f6 01 01                  	movt	r1, #2049
 8010c96: 98 47                        	blx	r3
 8010c98: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8010c9c: 00 28                        	cmp	r0, #0
 8010c9e: 18 bf                        	it	ne
 8010ca0: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8010ca2: 04 b0                        	add	sp, #16
 8010ca4: b0 bd                        	pop	{r4, r5, r7, pc}

08010ca6 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::hd61517634c877769:
 8010ca6: b0 b5                        	push	{r4, r5, r7, lr}
 8010ca8: 02 af                        	add	r7, sp, #8
 8010caa: 84 b0                        	sub	sp, #16
 8010cac: 0c 46                        	mov	r4, r1
 8010cae: 05 68                        	ldr	r5, [r0]
 8010cb0: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8010cb4: 06 22                        	movs	r2, #6
 8010cb6: cb 68                        	ldr	r3, [r1, #12]
 8010cb8: 4d f6 60 71                  	movw	r1, #57184
 8010cbc: c0 f6 01 01                  	movt	r1, #2049
 8010cc0: 98 47                        	blx	r3
; #[derive(Clone, Copy, Debug, PartialEq, Eq)]
 8010cc2: 4d f6 48 42                  	movw	r2, #56392
 8010cc6: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8010cca: 00 20                        	movs	r0, #0
 8010ccc: 03 a9                        	add	r1, sp, #12
 8010cce: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8010cd2: c0 f6 01 02                  	movt	r2, #2049
 8010cd6: 01 90                        	str	r0, [sp, #4]
 8010cd8: 68 46                        	mov	r0, sp
 8010cda: 00 94                        	str	r4, [sp]
; pub struct Opcode(pub u16);
 8010cdc: 03 95                        	str	r5, [sp, #12]
; #[derive(Clone, Copy, Debug, PartialEq, Eq)]
 8010cde: 05 f0 a4 fe                  	bl	#23880
 8010ce2: 01 98                        	ldr	r0, [sp, #4]
 8010ce4: 9d f8 08 40                  	ldrb.w	r4, [sp, #8]
 8010ce8: 18 b3                        	cbz	r0, #70
 8010cea: 0c b1                        	cbz	r4, #2
 8010cec: 01 24                        	movs	r4, #1
 8010cee: 1e e0                        	b	#60 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hd61517634c877769E+0x8c>
 8010cf0: 01 28                        	cmp	r0, #1
 8010cf2: 11 d1                        	bne	#34 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hd61517634c877769E+0x76>
 8010cf4: 9d f8 09 00                  	ldrb.w	r0, [sp, #9]
 8010cf8: 70 b1                        	cbz	r0, #28
 8010cfa: 00 99                        	ldr	r1, [sp]
 8010cfc: 08 78                        	ldrb	r0, [r1]
 8010cfe: 40 07                        	lsls	r0, r0, #29
 8010d00: 0a d4                        	bmi	#20 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hd61517634c877769E+0x76>
 8010d02: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8010d06: 01 22                        	movs	r2, #1
 8010d08: cb 68                        	ldr	r3, [r1, #12]
 8010d0a: 4e f6 21 41                  	movw	r1, #60449
 8010d0e: c0 f6 01 01                  	movt	r1, #2049
 8010d12: 01 24                        	movs	r4, #1
 8010d14: 98 47                        	blx	r3
 8010d16: 50 b9                        	cbnz	r0, #20
 8010d18: 00 99                        	ldr	r1, [sp]
 8010d1a: 01 22                        	movs	r2, #1
 8010d1c: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8010d20: cb 68                        	ldr	r3, [r1, #12]
 8010d22: 4f f2 69 61                  	movw	r1, #63081
 8010d26: c0 f6 01 01                  	movt	r1, #2049
 8010d2a: 98 47                        	blx	r3
 8010d2c: 04 46                        	mov	r4, r0
 8010d2e: 8d f8 08 40                  	strb.w	r4, [sp, #8]
 8010d32: 00 2c                        	cmp	r4, #0
 8010d34: 18 bf                        	it	ne
 8010d36: 01 24                        	movne	r4, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8010d38: 20 46                        	mov	r0, r4
 8010d3a: 04 b0                        	add	sp, #16
 8010d3c: b0 bd                        	pop	{r4, r5, r7, pc}

08010d3e _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::hde1dcdfca8afcdd2:
 8010d3e: 80 b5                        	push	{r7, lr}
 8010d40: 6f 46                        	mov	r7, sp
 8010d42: 8a b0                        	sub	sp, #40
 8010d44: 02 68                        	ldr	r2, [r0]
;         writeln!(f, "AES-128 Encrypted Data ({:X?})", &self.0)
 8010d46: 44 f2 cb 60                  	movw	r0, #18123
 8010d4a: c0 f6 01 00                  	movt	r0, #2049
 8010d4e: 03 ab                        	add	r3, sp, #12
 8010d50: 02 90                        	str	r0, [sp, #8]
 8010d52: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8010d56: 01 93                        	str	r3, [sp, #4]
 8010d58: 01 ab                        	add	r3, sp, #4
 8010d5a: 03 92                        	str	r2, [sp, #12]
 8010d5c: 01 22                        	movs	r2, #1
 8010d5e: 09 92                        	str	r2, [sp, #36]
 8010d60: cd e9 07 23                  	strd	r2, r3, [sp, #28]
 8010d64: 4c f6 24 32                  	movw	r2, #52004
 8010d68: c0 f6 01 02                  	movt	r2, #2049
 8010d6c: 06 92                        	str	r2, [sp, #24]
 8010d6e: 02 22                        	movs	r2, #2
 8010d70: 05 92                        	str	r2, [sp, #20]
 8010d72: 4d f6 c8 32                  	movw	r2, #56264
 8010d76: c0 f6 01 02                  	movt	r2, #2049
 8010d7a: 04 92                        	str	r2, [sp, #16]
 8010d7c: 04 aa                        	add	r2, sp, #16
 8010d7e: 05 f0 81 fa                  	bl	#21762
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8010d82: 0a b0                        	add	sp, #40
 8010d84: 80 bd                        	pop	{r7, pc}

08010d86 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::hdf1a34d27082c2c6:
 8010d86: b0 b5                        	push	{r4, r5, r7, lr}
 8010d88: 02 af                        	add	r7, sp, #8
 8010d8a: 84 b0                        	sub	sp, #16
 8010d8c: 0c 46                        	mov	r4, r1
 8010d8e: 05 68                        	ldr	r5, [r0]
 8010d90: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8010d94: 0d 22                        	movs	r2, #13
 8010d96: cb 68                        	ldr	r3, [r1, #12]
 8010d98: 4e f6 b5 01                  	movw	r1, #59573
 8010d9c: c0 f6 01 01                  	movt	r1, #2049
 8010da0: 98 47                        	blx	r3
 8010da2: 8d f8 08 00                  	strb.w	r0, [sp, #8]
; #[derive(Copy, Clone, Debug)]
 8010da6: 4d f6 b8 30                  	movw	r0, #56248
 8010daa: 00 21                        	movs	r1, #0
 8010dac: c0 f6 01 00                  	movt	r0, #2049
 8010db0: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 8010db4: 4d f2 9c 21                  	movw	r1, #53916
 8010db8: 00 90                        	str	r0, [sp]
 8010dba: 01 a8                        	add	r0, sp, #4
 8010dbc: 03 ab                        	add	r3, sp, #12
 8010dbe: c0 f6 01 01                  	movt	r1, #2049
 8010dc2: 04 22                        	movs	r2, #4
 8010dc4: 01 94                        	str	r4, [sp, #4]
;     pub code: u8,
 8010dc6: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 8010dc8: 05 f0 b2 fc                  	bl	#22884
 8010dcc: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 8010dd0: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 8010dd4: b9 b1                        	cbz	r1, #46
 8010dd6: 08 b1                        	cbz	r0, #2
 8010dd8: 01 20                        	movs	r0, #1
 8010dda: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hdf1a34d27082c2c6E+0x80>
 8010ddc: 01 99                        	ldr	r1, [sp, #4]
 8010dde: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8010de2: 09 78                        	ldrb	r1, [r1]
 8010de4: d3 68                        	ldr	r3, [r2, #12]
 8010de6: 49 07                        	lsls	r1, r1, #29
 8010de8: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hdf1a34d27082c2c6E+0x74>
 8010dea: 4e f6 1c 41                  	movw	r1, #60444
 8010dee: 02 22                        	movs	r2, #2
 8010df0: c0 f6 01 01                  	movt	r1, #2049
 8010df4: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hdf1a34d27082c2c6E+0x7e>
 8010df6: 4e f6 d6 41                  	movw	r1, #60630
 8010dfa: 01 22                        	movs	r2, #1
 8010dfc: c0 f6 01 01                  	movt	r1, #2049
 8010e00: 98 47                        	blx	r3
 8010e02: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8010e06: 00 28                        	cmp	r0, #0
 8010e08: 18 bf                        	it	ne
 8010e0a: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8010e0c: 04 b0                        	add	sp, #16
 8010e0e: b0 bd                        	pop	{r4, r5, r7, pc}

08010e10 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::he2a7eb12db11f28f:
 8010e10: f0 b5                        	push	{r4, r5, r6, r7, lr}
 8010e12: 03 af                        	add	r7, sp, #12
 8010e14: 4d f8 04 bd                  	str	r11, [sp, #-4]!
 8010e18: a2 b0                        	sub	sp, #136
 8010e1a: 00 68                        	ldr	r0, [r0]
 8010e1c: 0c 46                        	mov	r4, r1
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 8010e1e: d0 e9 00 65                  	ldrd	r6, r5, [r0]
 8010e22: f0 07                        	lsls	r0, r6, #31
 8010e24: 48 d1                        	bne	#144 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he2a7eb12db11f28fE+0xac>
 8010e26: 01 20                        	movs	r0, #1
 8010e28: b1 07                        	lsls	r1, r6, #30
 8010e2a: 53 d4                        	bmi	#166 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he2a7eb12db11f28fE+0xc8>
 8010e2c: 71 07                        	lsls	r1, r6, #29
 8010e2e: 6b d4                        	bmi	#214 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he2a7eb12db11f28fE+0xfc>
 8010e30: 31 07                        	lsls	r1, r6, #28
 8010e32: 00 f1 84 80                  	bmi.w	#264 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he2a7eb12db11f28fE+0x132>
 8010e36: f1 06                        	lsls	r1, r6, #27
 8010e38: 00 f1 9a 80                  	bmi.w	#308 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he2a7eb12db11f28fE+0x164>
;                 let extra_bits = self.bits & !$BitFlags::all().bits();
 8010e3c: 26 f0 1f 06                  	bic	r6, r6, #31
;                 if extra_bits != 0 {
 8010e40: 56 ea 05 01                  	orrs.w	r1, r6, r5
 8010e44: 00 f0 b0 80                  	beq.w	#352 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he2a7eb12db11f28fE+0x19c>
;                     if !first {
 8010e48: 58 b9                        	cbnz	r0, #22
 8010e4a: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8010e4e: 03 22                        	movs	r2, #3
 8010e50: cb 68                        	ldr	r3, [r1, #12]
 8010e52: 4d f6 97 71                  	movw	r1, #57239
 8010e56: c0 f6 01 01                  	movt	r1, #2049
 8010e5a: 98 47                        	blx	r3
;                         f.write_str(" | ")?;
 8010e5c: 00 28                        	cmp	r0, #0
 8010e5e: 40 f0 ae 80                  	bne.w	#348 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he2a7eb12db11f28fE+0x1b2>
 8010e62: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8010e66: 02 22                        	movs	r2, #2
 8010e68: cb 68                        	ldr	r3, [r1, #12]
 8010e6a: 4e f6 b5 31                  	movw	r1, #60341
 8010e6e: c0 f6 01 01                  	movt	r1, #2049
 8010e72: 98 47                        	blx	r3
;                     f.write_str("0x")?;
 8010e74: 00 28                        	cmp	r0, #0
 8010e76: 40 f0 a2 80                  	bne.w	#324 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he2a7eb12db11f28fE+0x1b2>
 8010e7a: 02 a9                        	add	r1, sp, #8
 8010e7c: 7f 20                        	movs	r0, #127
 8010e7e: 42 1c                        	adds	r2, r0, #1
 8010e80: 00 f0 a9 80                  	beq.w	#338 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he2a7eb12db11f28fE+0x1ca>
 8010e84: 06 f0 0f 02                  	and	r2, r6, #15
 8010e88: 02 f1 57 03                  	add.w	r3, r2, #87
 8010e8c: 0a 2a                        	cmp	r2, #10
 8010e8e: 38 bf                        	it	lo
 8010e90: 02 f1 30 03                  	addlo.w	r3, r2, #48
 8010e94: 32 09                        	lsrs	r2, r6, #4
 8010e96: 42 ea 05 76                  	orr.w	r6, r2, r5, lsl #28
 8010e9a: 0b 54                        	strb	r3, [r1, r0]
 8010e9c: 46 ea 15 12                  	orr.w	r2, r6, r5, lsr #4
 8010ea0: 01 38                        	subs	r0, #1
 8010ea2: 2d 09                        	lsrs	r5, r5, #4
 8010ea4: 00 2a                        	cmp	r2, #0
 8010ea6: ea d1                        	bne	#-44 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he2a7eb12db11f28fE+0x72>
 8010ea8: 01 30                        	adds	r0, #1
 8010eaa: 81 28                        	cmp	r0, #129
 8010eac: c0 f0 94 80                  	blo.w	#296 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he2a7eb12db11f28fE+0x1cc>
 8010eb0: 80 21                        	movs	r1, #128
 8010eb2: 04 f0 b0 ff                  	bl	#20320
 8010eb6: fe de                        	trap
 8010eb8: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8010ebc: 0a 22                        	movs	r2, #10
 8010ebe: cb 68                        	ldr	r3, [r1, #12]
 8010ec0: 4d f6 ab 71                  	movw	r1, #57259
 8010ec4: c0 f6 01 01                  	movt	r1, #2049
 8010ec8: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 8010eca: 00 28                        	cmp	r0, #0
 8010ecc: 77 d1                        	bne	#238 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he2a7eb12db11f28fE+0x1b2>
 8010ece: 00 20                        	movs	r0, #0
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 8010ed0: b1 07                        	lsls	r1, r6, #30
 8010ed2: ab d5                        	bpl	#-170 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he2a7eb12db11f28fE+0x20>
;                         if !first {
 8010ed4: 50 b9                        	cbnz	r0, #20
 8010ed6: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8010eda: 03 22                        	movs	r2, #3
 8010edc: cb 68                        	ldr	r3, [r1, #12]
 8010ede: 4d f6 97 71                  	movw	r1, #57239
 8010ee2: c0 f6 01 01                  	movt	r1, #2049
 8010ee6: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 8010ee8: 00 28                        	cmp	r0, #0
 8010eea: 68 d1                        	bne	#208 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he2a7eb12db11f28fE+0x1b2>
 8010eec: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8010ef0: 27 22                        	movs	r2, #39
 8010ef2: cb 68                        	ldr	r3, [r1, #12]
 8010ef4: 4e f2 6d 41                  	movw	r1, #58477
 8010ef8: c0 f6 01 01                  	movt	r1, #2049
 8010efc: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 8010efe: 00 28                        	cmp	r0, #0
 8010f00: 5d d1                        	bne	#186 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he2a7eb12db11f28fE+0x1b2>
 8010f02: 00 20                        	movs	r0, #0
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 8010f04: 71 07                        	lsls	r1, r6, #29
 8010f06: 93 d5                        	bpl	#-218 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he2a7eb12db11f28fE+0x24>
;                         if !first {
 8010f08: 50 b9                        	cbnz	r0, #20
 8010f0a: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8010f0e: 03 22                        	movs	r2, #3
 8010f10: cb 68                        	ldr	r3, [r1, #12]
 8010f12: 4d f6 97 71                  	movw	r1, #57239
 8010f16: c0 f6 01 01                  	movt	r1, #2049
 8010f1a: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 8010f1c: 00 28                        	cmp	r0, #0
 8010f1e: 4e d1                        	bne	#156 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he2a7eb12db11f28fE+0x1b2>
 8010f20: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8010f24: 1a 22                        	movs	r2, #26
 8010f26: cb 68                        	ldr	r3, [r1, #12]
 8010f28: 4e f2 94 41                  	movw	r1, #58516
 8010f2c: c0 f6 01 01                  	movt	r1, #2049
 8010f30: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 8010f32: 00 28                        	cmp	r0, #0
 8010f34: 43 d1                        	bne	#134 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he2a7eb12db11f28fE+0x1b2>
 8010f36: 00 20                        	movs	r0, #0
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 8010f38: 31 07                        	lsls	r1, r6, #28
 8010f3a: 7f f5 7c af                  	bpl.w	#-264 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he2a7eb12db11f28fE+0x2a>
;                         if !first {
 8010f3e: 48 b9                        	cbnz	r0, #18
 8010f40: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8010f44: 03 22                        	movs	r2, #3
 8010f46: cb 68                        	ldr	r3, [r1, #12]
 8010f48: 4d f6 97 71                  	movw	r1, #57239
 8010f4c: c0 f6 01 01                  	movt	r1, #2049
 8010f50: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 8010f52: a0 bb                        	cbnz	r0, #104
 8010f54: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8010f58: 25 22                        	movs	r2, #37
 8010f5a: cb 68                        	ldr	r3, [r1, #12]
 8010f5c: 4e f2 ae 41                  	movw	r1, #58542
 8010f60: c0 f6 01 01                  	movt	r1, #2049
 8010f64: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 8010f66: 50 bb                        	cbnz	r0, #84
 8010f68: 00 20                        	movs	r0, #0
;                     if <$BitFlags as __BitFlags>::$Flag(self) {
 8010f6a: f1 06                        	lsls	r1, r6, #27
 8010f6c: 7f f5 66 af                  	bpl.w	#-308 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he2a7eb12db11f28fE+0x30>
;                         if !first {
 8010f70: 48 b9                        	cbnz	r0, #18
 8010f72: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8010f76: 03 22                        	movs	r2, #3
 8010f78: cb 68                        	ldr	r3, [r1, #12]
 8010f7a: 4d f6 97 71                  	movw	r1, #57239
 8010f7e: c0 f6 01 01                  	movt	r1, #2049
 8010f82: 98 47                        	blx	r3
;                             f.write_str(" | ")?;
 8010f84: d8 b9                        	cbnz	r0, #54
 8010f86: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8010f8a: 04 22                        	movs	r2, #4
 8010f8c: cb 68                        	ldr	r3, [r1, #12]
 8010f8e: 4d f2 98 21                  	movw	r1, #53912
 8010f92: c0 f6 01 01                  	movt	r1, #2049
 8010f96: 98 47                        	blx	r3
;                         f.write_str(__bitflags_stringify!($Flag))?;
 8010f98: 88 b9                        	cbnz	r0, #34
 8010f9a: 00 20                        	movs	r0, #0
;                 let extra_bits = self.bits & !$BitFlags::all().bits();
 8010f9c: 26 f0 1f 06                  	bic	r6, r6, #31
;                 if extra_bits != 0 {
 8010fa0: 56 ea 05 01                  	orrs.w	r1, r6, r5
 8010fa4: 7f f4 50 af                  	bne.w	#-352 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he2a7eb12db11f28fE+0x3c>
;                 if first {
 8010fa8: 78 b1                        	cbz	r0, #30
 8010faa: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8010fae: 07 22                        	movs	r2, #7
 8010fb0: cb 68                        	ldr	r3, [r1, #12]
 8010fb2: 4e f2 66 41                  	movw	r1, #58470
 8010fb6: c0 f6 01 01                  	movt	r1, #2049
 8010fba: 98 47                        	blx	r3
;                     f.write_str("(empty)")?;
 8010fbc: 28 b1                        	cbz	r0, #10
 8010fbe: 01 25                        	movs	r5, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8010fc0: 28 46                        	mov	r0, r5
 8010fc2: 22 b0                        	add	sp, #136
 8010fc4: 5d f8 04 bb                  	ldr	r11, [sp], #4
 8010fc8: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 8010fca: 00 25                        	movs	r5, #0
 8010fcc: 28 46                        	mov	r0, r5
 8010fce: 22 b0                        	add	sp, #136
 8010fd0: 5d f8 04 bb                  	ldr	r11, [sp], #4
 8010fd4: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 8010fd6: 00 20                        	movs	r0, #0
 8010fd8: c0 f1 80 02                  	rsb.w	r2, r0, #128
 8010fdc: 08 44                        	add	r0, r1
 8010fde: 01 21                        	movs	r1, #1
 8010fe0: 02 23                        	movs	r3, #2
 8010fe2: cd e9 00 02                  	strd	r0, r2, [sp]
 8010fe6: 4e f6 b5 32                  	movw	r2, #60341
 8010fea: c0 f6 01 02                  	movt	r2, #2049
 8010fee: 20 46                        	mov	r0, r4
 8010ff0: 01 25                        	movs	r5, #1
 8010ff2: 04 f0 a3 fd                  	bl	#19270
;                     $crate::_core::fmt::LowerHex::fmt(&extra_bits, f)?;
 8010ff6: 00 28                        	cmp	r0, #0
 8010ff8: 08 bf                        	it	eq
 8010ffa: 00 25                        	moveq	r5, #0
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8010ffc: 28 46                        	mov	r0, r5
 8010ffe: 22 b0                        	add	sp, #136
 8011000: 5d f8 04 bb                  	ldr	r11, [sp], #4
 8011004: f0 bd                        	pop	{r4, r5, r6, r7, pc}

08011006 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::he58c6f33e012fe27:
 8011006: b0 b5                        	push	{r4, r5, r7, lr}
 8011008: 02 af                        	add	r7, sp, #8
 801100a: 84 b0                        	sub	sp, #16
 801100c: 0c 46                        	mov	r4, r1
 801100e: 05 68                        	ldr	r5, [r0]
 8011010: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8011014: 12 22                        	movs	r2, #18
 8011016: cb 68                        	ldr	r3, [r1, #12]
 8011018: 4e f6 c2 01                  	movw	r1, #59586
 801101c: c0 f6 01 01                  	movt	r1, #2049
 8011020: 98 47                        	blx	r3
 8011022: 8d f8 08 00                  	strb.w	r0, [sp, #8]
; #[derive(Copy, Clone, Debug)]
 8011026: 4e f6 e0 00                  	movw	r0, #59616
 801102a: 00 21                        	movs	r1, #0
 801102c: c0 f6 01 00                  	movt	r0, #2049
 8011030: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 8011034: 4e f6 d4 01                  	movw	r1, #59604
 8011038: 00 90                        	str	r0, [sp]
 801103a: 01 a8                        	add	r0, sp, #4
 801103c: 03 ab                        	add	r3, sp, #12
 801103e: c0 f6 01 01                  	movt	r1, #2049
 8011042: 09 22                        	movs	r2, #9
 8011044: 01 94                        	str	r4, [sp, #4]
;     pub link_type: LinkType,
 8011046: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 8011048: 05 f0 72 fb                  	bl	#22244
 801104c: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 8011050: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 8011054: b9 b1                        	cbz	r1, #46
 8011056: 08 b1                        	cbz	r0, #2
 8011058: 01 20                        	movs	r0, #1
 801105a: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he58c6f33e012fe27E+0x80>
 801105c: 01 99                        	ldr	r1, [sp, #4]
 801105e: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8011062: 09 78                        	ldrb	r1, [r1]
 8011064: d3 68                        	ldr	r3, [r2, #12]
 8011066: 49 07                        	lsls	r1, r1, #29
 8011068: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he58c6f33e012fe27E+0x74>
 801106a: 4e f6 1c 41                  	movw	r1, #60444
 801106e: 02 22                        	movs	r2, #2
 8011070: c0 f6 01 01                  	movt	r1, #2049
 8011074: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he58c6f33e012fe27E+0x7e>
 8011076: 4e f6 d6 41                  	movw	r1, #60630
 801107a: 01 22                        	movs	r2, #1
 801107c: c0 f6 01 01                  	movt	r1, #2049
 8011080: 98 47                        	blx	r3
 8011082: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8011086: 00 28                        	cmp	r0, #0
 8011088: 18 bf                        	it	ne
 801108a: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801108c: 04 b0                        	add	sp, #16
 801108e: b0 bd                        	pop	{r4, r5, r7, pc}

08011090 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::hf00da069fcdf98ce:
 8011090: b0 b5                        	push	{r4, r5, r7, lr}
 8011092: 02 af                        	add	r7, sp, #8
 8011094: 84 b0                        	sub	sp, #16
 8011096: 0c 46                        	mov	r4, r1
 8011098: 05 68                        	ldr	r5, [r0]
 801109a: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 801109e: 15 22                        	movs	r2, #21
 80110a0: cb 68                        	ldr	r3, [r1, #12]
 80110a2: 4d f2 3c 21                  	movw	r1, #53820
 80110a6: c0 f6 01 01                  	movt	r1, #2049
 80110aa: 98 47                        	blx	r3
 80110ac: 00 21                        	movs	r1, #0
 80110ae: 8d f8 08 00                  	strb.w	r0, [sp, #8]
;     pub status: Status<VS>,
 80110b2: a8 1c                        	adds	r0, r5, #2
 80110b4: 8d f8 09 10                  	strb.w	r1, [sp, #9]
; #[derive(Copy, Clone, Debug)]
 80110b8: 4f f6 60 31                  	movw	r1, #64352
 80110bc: 01 94                        	str	r4, [sp, #4]
 80110be: 4c f6 74 24                  	movw	r4, #51828
;     pub status: Status<VS>,
 80110c2: 03 90                        	str	r0, [sp, #12]
 80110c4: 01 a8                        	add	r0, sp, #4
 80110c6: 03 ab                        	add	r3, sp, #12
; #[derive(Copy, Clone, Debug)]
 80110c8: c0 f6 01 04                  	movt	r4, #2049
 80110cc: c0 f6 01 01                  	movt	r1, #2049
 80110d0: 06 22                        	movs	r2, #6
 80110d2: 00 94                        	str	r4, [sp]
 80110d4: 05 f0 2c fb                  	bl	#22104
 80110d8: 4c f6 84 21                  	movw	r1, #51844
 80110dc: 03 ab                        	add	r3, sp, #12
 80110de: c0 f6 01 01                  	movt	r1, #2049
 80110e2: 0b 22                        	movs	r2, #11
 80110e4: 00 91                        	str	r1, [sp]
 80110e6: 4f f6 0c 51                  	movw	r1, #64780
 80110ea: c0 f6 01 01                  	movt	r1, #2049
;     pub conn_handle: ConnectionHandle,
 80110ee: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 80110f0: 05 f0 1e fb                  	bl	#22076
;     pub reason: Status<VS>,
 80110f4: e9 1c                        	adds	r1, r5, #3
 80110f6: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 80110f8: 4d f2 fc 51                  	movw	r1, #54780
 80110fc: 03 ab                        	add	r3, sp, #12
 80110fe: c0 f6 01 01                  	movt	r1, #2049
 8011102: 06 22                        	movs	r2, #6
 8011104: 00 94                        	str	r4, [sp]
 8011106: 05 f0 13 fb                  	bl	#22054
 801110a: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 801110e: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 8011112: b9 b1                        	cbz	r1, #46
 8011114: 08 b1                        	cbz	r0, #2
 8011116: 01 20                        	movs	r0, #1
 8011118: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hf00da069fcdf98ceE+0xb4>
 801111a: 01 99                        	ldr	r1, [sp, #4]
 801111c: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8011120: 09 78                        	ldrb	r1, [r1]
 8011122: d3 68                        	ldr	r3, [r2, #12]
 8011124: 49 07                        	lsls	r1, r1, #29
 8011126: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hf00da069fcdf98ceE+0xa8>
 8011128: 4e f6 1c 41                  	movw	r1, #60444
 801112c: 02 22                        	movs	r2, #2
 801112e: c0 f6 01 01                  	movt	r1, #2049
 8011132: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hf00da069fcdf98ceE+0xb2>
 8011134: 4e f6 d6 41                  	movw	r1, #60630
 8011138: 01 22                        	movs	r2, #1
 801113a: c0 f6 01 01                  	movt	r1, #2049
 801113e: 98 47                        	blx	r3
 8011140: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8011144: 00 28                        	cmp	r0, #0
 8011146: 18 bf                        	it	ne
 8011148: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801114a: 04 b0                        	add	sp, #16
 801114c: b0 bd                        	pop	{r4, r5, r7, pc}
 801114e: 00 00                        	movs	r0, r0

08011150 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::hf0590a4b71e1e5a2:
 8011150: 00 68                        	ldr	r0, [r0]
; #[derive(Copy, Clone, Debug, PartialEq)]
 8011152: 00 78                        	ldrb	r0, [r0]
 8011154: df e8 00 f0                  	tbb	[pc, r0]

08011158 $d.108:
 8011158:	04 0d 16 1f	.word	0x1f160d04
 801115c:	28 31 3a 43	.word	0x433a3128

08011160 $t.109:
 8011160: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8011164: 4e f6 06 11                  	movw	r1, #59654
 8011168: c0 f6 01 01                  	movt	r1, #2049
 801116c: d3 68                        	ldr	r3, [r2, #12]
 801116e: 06 22                        	movs	r2, #6
 8011170: 18 47                        	bx	r3
 8011172: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8011176: 4e f6 0c 11                  	movw	r1, #59660
 801117a: c0 f6 01 01                  	movt	r1, #2049
 801117e: d3 68                        	ldr	r3, [r2, #12]
 8011180: 06 22                        	movs	r2, #6
 8011182: 18 47                        	bx	r3
 8011184: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8011188: 4e f6 12 11                  	movw	r1, #59666
 801118c: c0 f6 01 01                  	movt	r1, #2049
 8011190: d3 68                        	ldr	r3, [r2, #12]
 8011192: 06 22                        	movs	r2, #6
 8011194: 18 47                        	bx	r3
 8011196: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801119a: 4e f6 18 11                  	movw	r1, #59672
 801119e: c0 f6 01 01                  	movt	r1, #2049
 80111a2: d3 68                        	ldr	r3, [r2, #12]
 80111a4: 06 22                        	movs	r2, #6
 80111a6: 18 47                        	bx	r3
 80111a8: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 80111ac: 4e f6 1e 11                  	movw	r1, #59678
 80111b0: c0 f6 01 01                  	movt	r1, #2049
 80111b4: d3 68                        	ldr	r3, [r2, #12]
 80111b6: 05 22                        	movs	r2, #5
 80111b8: 18 47                        	bx	r3
 80111ba: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 80111be: 4e f6 23 11                  	movw	r1, #59683
 80111c2: c0 f6 01 01                  	movt	r1, #2049
 80111c6: d3 68                        	ldr	r3, [r2, #12]
 80111c8: 05 22                        	movs	r2, #5
 80111ca: 18 47                        	bx	r3
 80111cc: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 80111d0: 4e f6 28 11                  	movw	r1, #59688
 80111d4: c0 f6 01 01                  	movt	r1, #2049
 80111d8: d3 68                        	ldr	r3, [r2, #12]
 80111da: 05 22                        	movs	r2, #5
 80111dc: 18 47                        	bx	r3
 80111de: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 80111e2: 4e f6 01 11                  	movw	r1, #59649
 80111e6: c0 f6 01 01                  	movt	r1, #2049
 80111ea: d3 68                        	ldr	r3, [r2, #12]
 80111ec: 05 22                        	movs	r2, #5
 80111ee: 18 47                        	bx	r3

080111f0 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::hf10a1df2d93f640d:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 80111f0: b0 b5                        	push	{r4, r5, r7, lr}
 80111f2: 02 af                        	add	r7, sp, #8
 80111f4: 84 b0                        	sub	sp, #16
 80111f6: 0c 46                        	mov	r4, r1
 80111f8: 05 68                        	ldr	r5, [r0]
 80111fa: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 80111fe: 19 22                        	movs	r2, #25
 8011200: cb 68                        	ldr	r3, [r1, #12]
 8011202: 4c f6 54 41                  	movw	r1, #52308
 8011206: c0 f6 01 01                  	movt	r1, #2049
 801120a: 98 47                        	blx	r3
 801120c: 8d f8 08 00                  	strb.w	r0, [sp, #8]
; #[derive(Copy, Clone, Debug)]
 8011210: 4c f6 74 20                  	movw	r0, #51828
 8011214: 00 21                        	movs	r1, #0
 8011216: c0 f6 01 00                  	movt	r0, #2049
 801121a: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 801121e: 4f f6 60 31                  	movw	r1, #64352
 8011222: 00 90                        	str	r0, [sp]
 8011224: 01 a8                        	add	r0, sp, #4
 8011226: 03 ab                        	add	r3, sp, #12
 8011228: c0 f6 01 01                  	movt	r1, #2049
 801122c: 06 22                        	movs	r2, #6
 801122e: 01 94                        	str	r4, [sp, #4]
;     pub status: Status<VS>,
 8011230: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 8011232: 05 f0 7d fa                  	bl	#21754
;     pub encrypted_data: EncryptedBlock,
 8011236: 69 1c                        	adds	r1, r5, #1
 8011238: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 801123a: 4c f6 7c 41                  	movw	r1, #52348
 801123e: 03 ab                        	add	r3, sp, #12
 8011240: c0 f6 01 01                  	movt	r1, #2049
 8011244: 0e 22                        	movs	r2, #14
 8011246: 00 91                        	str	r1, [sp]
 8011248: 4c f6 6d 41                  	movw	r1, #52333
 801124c: c0 f6 01 01                  	movt	r1, #2049
 8011250: 05 f0 6e fa                  	bl	#21724
 8011254: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 8011258: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 801125c: b9 b1                        	cbz	r1, #46
 801125e: 08 b1                        	cbz	r0, #2
 8011260: 01 20                        	movs	r0, #1
 8011262: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hf10a1df2d93f640dE+0x9e>
 8011264: 01 99                        	ldr	r1, [sp, #4]
 8011266: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801126a: 09 78                        	ldrb	r1, [r1]
 801126c: d3 68                        	ldr	r3, [r2, #12]
 801126e: 49 07                        	lsls	r1, r1, #29
 8011270: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hf10a1df2d93f640dE+0x92>
 8011272: 4e f6 1c 41                  	movw	r1, #60444
 8011276: 02 22                        	movs	r2, #2
 8011278: c0 f6 01 01                  	movt	r1, #2049
 801127c: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hf10a1df2d93f640dE+0x9c>
 801127e: 4e f6 d6 41                  	movw	r1, #60630
 8011282: 01 22                        	movs	r2, #1
 8011284: c0 f6 01 01                  	movt	r1, #2049
 8011288: 98 47                        	blx	r3
 801128a: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 801128e: 00 28                        	cmp	r0, #0
 8011290: 18 bf                        	it	ne
 8011292: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8011294: 04 b0                        	add	sp, #16
 8011296: b0 bd                        	pop	{r4, r5, r7, pc}

08011298 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::hf21f7102b9f47ff7:
 8011298: f0 b5                        	push	{r4, r5, r6, r7, lr}
 801129a: 03 af                        	add	r7, sp, #12
 801129c: 2d e9 00 0f                  	push.w	{r8, r9, r10, r11}
 80112a0: 8b b0                        	sub	sp, #44
 80112a2: d0 f8 00 a0                  	ldr.w	r10, [r0]
 80112a6: 4e f6 b4 40                  	movw	r0, #60596
 80112aa: 0c 46                        	mov	r4, r1
 80112ac: d1 e9 06 31                  	ldrd	r3, r1, [r1, #24]
 80112b0: c0 f6 01 00                  	movt	r0, #2049
 80112b4: 4f f0 00 0b                  	mov.w	r11, #0
 80112b8: 09 90                        	str	r0, [sp, #36]
 80112ba: 4e f6 b4 40                  	movw	r0, #60596
 80112be: c0 f6 01 00                  	movt	r0, #2049
 80112c2: 05 aa                        	add	r2, sp, #20
 80112c4: cd f8 28 b0                  	str.w	r11, [sp, #40]
 80112c8: 01 25                        	movs	r5, #1
 80112ca: cd e9 07 bb                  	strd	r11, r11, [sp, #28]
 80112ce: 05 90                        	str	r0, [sp, #20]
 80112d0: 18 46                        	mov	r0, r3
 80112d2: 06 95                        	str	r5, [sp, #24]
 80112d4: 04 f0 d6 ff                  	bl	#20396
;         write!(f, "{{")?;
 80112d8: 70 bb                        	cbnz	r0, #92
 80112da: da f8 00 00                  	ldr.w	r0, [r10]
 80112de: 0d f1 14 09                  	add.w	r9, sp, #20
 80112e2: 4f f0 00 08                  	mov.w	r8, #0
 80112e6: 01 25                        	movs	r5, #1
 80112e8: 86 00                        	lsls	r6, r0, #2
;         if self.next_index >= self.event.num_handles * NUM_COMPLETED_PACKETS_PAIR_LEN {
 80112ea: b0 45                        	cmp	r8, r6
 80112ec: 29 d2                        	bhs	#82 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hf21f7102b9f47ff7E+0xae>
;         assert!($size <= $src.len());
 80112ee: b8 f1 fb 0f                  	cmp.w	r8, #251
 80112f2: 41 d2                        	bhs	#130 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hf21f7102b9f47ff7E+0xe4>
;     copy_nonoverlapping(src, dst, count)
 80112f4: 0a eb 08 00                  	add.w	r0, r10, r8
;             write!(f, "{:?}", pair)?;
 80112f8: 44 f6 0b 02                  	movw	r2, #18443
 80112fc: c0 f6 01 02                  	movt	r2, #2049
;     copy_nonoverlapping(src, dst, count)
 8011300: c1 88                        	ldrh	r1, [r0, #6]
 8011302: 80 88                        	ldrh	r0, [r0, #4]
;         for pair in self.iter() {
 8011304: ad f8 08 00                  	strh.w	r0, [sp, #8]
 8011308: 01 91                        	str	r1, [sp, #4]
 801130a: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
;             write!(f, "{:?}", pair)?;
 801130e: 04 92                        	str	r2, [sp, #16]
 8011310: 01 aa                        	add	r2, sp, #4
 8011312: 03 92                        	str	r2, [sp, #12]
 8011314: 03 aa                        	add	r2, sp, #12
 8011316: 0a 95                        	str	r5, [sp, #40]
 8011318: cd e9 08 b2                  	strd	r11, r2, [sp, #32]
 801131c: 4f f2 a0 42                  	movw	r2, #62624
 8011320: c0 f6 01 02                  	movt	r2, #2049
 8011324: cd e9 06 5b                  	strd	r5, r11, [sp, #24]
 8011328: 05 92                        	str	r2, [sp, #20]
 801132a: 4a 46                        	mov	r2, r9
 801132c: 04 f0 aa ff                  	bl	#20308
;         self.next_index += NUM_COMPLETED_PACKETS_PAIR_LEN;
 8011330: 08 f1 04 08                  	add.w	r8, r8, #4
;             write!(f, "{:?}", pair)?;
 8011334: 00 28                        	cmp	r0, #0
 8011336: d8 d0                        	beq	#-80 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hf21f7102b9f47ff7E+0x56>
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8011338: 28 46                        	mov	r0, r5
 801133a: 0b b0                        	add	sp, #44
 801133c: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 8011340: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 8011342: 4e f6 b4 43                  	movw	r3, #60596
 8011346: 00 22                        	movs	r2, #0
 8011348: c0 f6 01 03                  	movt	r3, #2049
 801134c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8011350: 0a 92                        	str	r2, [sp, #40]
 8011352: 09 93                        	str	r3, [sp, #36]
 8011354: cd e9 07 22                  	strd	r2, r2, [sp, #28]
 8011358: 01 22                        	movs	r2, #1
 801135a: 06 92                        	str	r2, [sp, #24]
 801135c: 4e f6 bc 42                  	movw	r2, #60604
 8011360: c0 f6 01 02                  	movt	r2, #2049
 8011364: 05 92                        	str	r2, [sp, #20]
 8011366: 05 aa                        	add	r2, sp, #20
 8011368: 04 f0 8c ff                  	bl	#20248
 801136c: 05 46                        	mov	r5, r0
 801136e: 28 46                        	mov	r0, r5
 8011370: 0b b0                        	add	sp, #44
 8011372: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 8011376: f0 bd                        	pop	{r4, r5, r6, r7, pc}
;         $crate::panicking::panic($msg)
 8011378: 4c f6 64 30                  	movw	r0, #52068
 801137c: 20 21                        	movs	r1, #32
 801137e: c0 f6 01 00                  	movt	r0, #2049
 8011382: 05 f0 69 f8                  	bl	#20690
 8011386: fe de                        	trap

08011388 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::hf359cea73505d298:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8011388: b0 b5                        	push	{r4, r5, r7, lr}
 801138a: 02 af                        	add	r7, sp, #8
 801138c: 84 b0                        	sub	sp, #16
 801138e: 0c 46                        	mov	r4, r1
 8011390: 05 68                        	ldr	r5, [r0]
 8011392: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8011396: 08 22                        	movs	r2, #8
 8011398: cb 68                        	ldr	r3, [r1, #12]
 801139a: 4c f6 d4 31                  	movw	r1, #52180
 801139e: c0 f6 01 01                  	movt	r1, #2049
 80113a2: 98 47                        	blx	r3
 80113a4: 8d f8 08 00                  	strb.w	r0, [sp, #8]
;     pub status: Status<VS>,
 80113a8: a8 1c                        	adds	r0, r5, #2
 80113aa: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 80113ac: 4c f6 74 20                  	movw	r0, #51828
 80113b0: 00 21                        	movs	r1, #0
 80113b2: c0 f6 01 00                  	movt	r0, #2049
 80113b6: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 80113ba: 4f f6 60 31                  	movw	r1, #64352
 80113be: 00 90                        	str	r0, [sp]
 80113c0: 01 a8                        	add	r0, sp, #4
 80113c2: 03 ab                        	add	r3, sp, #12
 80113c4: c0 f6 01 01                  	movt	r1, #2049
 80113c8: 06 22                        	movs	r2, #6
 80113ca: 01 94                        	str	r4, [sp, #4]
 80113cc: 05 f0 b0 f9                  	bl	#21344
 80113d0: 4c f6 84 21                  	movw	r1, #51844
 80113d4: 03 ab                        	add	r3, sp, #12
 80113d6: c0 f6 01 01                  	movt	r1, #2049
 80113da: 0b 22                        	movs	r2, #11
 80113dc: 00 91                        	str	r1, [sp]
 80113de: 4f f6 0c 51                  	movw	r1, #64780
 80113e2: c0 f6 01 01                  	movt	r1, #2049
;     pub conn_handle: ConnectionHandle,
 80113e6: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 80113e8: 05 f0 a2 f9                  	bl	#21316
;     pub rssi: i8,
 80113ec: e9 1c                        	adds	r1, r5, #3
 80113ee: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 80113f0: 4c f6 ac 41                  	movw	r1, #52396
 80113f4: 03 ab                        	add	r3, sp, #12
 80113f6: c0 f6 01 01                  	movt	r1, #2049
 80113fa: 04 22                        	movs	r2, #4
 80113fc: 00 91                        	str	r1, [sp]
 80113fe: 4d f2 b4 21                  	movw	r1, #53940
 8011402: c0 f6 01 01                  	movt	r1, #2049
 8011406: 05 f0 93 f9                  	bl	#21286
 801140a: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 801140e: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 8011412: b9 b1                        	cbz	r1, #46
 8011414: 08 b1                        	cbz	r0, #2
 8011416: 01 20                        	movs	r0, #1
 8011418: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hf359cea73505d298E+0xbc>
 801141a: 01 99                        	ldr	r1, [sp, #4]
 801141c: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8011420: 09 78                        	ldrb	r1, [r1]
 8011422: d3 68                        	ldr	r3, [r2, #12]
 8011424: 49 07                        	lsls	r1, r1, #29
 8011426: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hf359cea73505d298E+0xb0>
 8011428: 4e f6 1c 41                  	movw	r1, #60444
 801142c: 02 22                        	movs	r2, #2
 801142e: c0 f6 01 01                  	movt	r1, #2049
 8011432: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hf359cea73505d298E+0xba>
 8011434: 4e f6 d6 41                  	movw	r1, #60630
 8011438: 01 22                        	movs	r2, #1
 801143a: c0 f6 01 01                  	movt	r1, #2049
 801143e: 98 47                        	blx	r3
 8011440: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8011444: 00 28                        	cmp	r0, #0
 8011446: 18 bf                        	it	ne
 8011448: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801144a: 04 b0                        	add	sp, #16
 801144c: b0 bd                        	pop	{r4, r5, r7, pc}

0801144e _$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$::fmt::h7c4104b4574c1008:
;     fn fmt(&self, f: &mut Formatter<'_>) -> Result {
 801144e: 08 46                        	mov	r0, r1
;         f.pad("()")
 8011450: 4f f2 6a 61                  	movw	r1, #63082
 8011454: c0 f6 01 01                  	movt	r1, #2049
 8011458: 02 22                        	movs	r2, #2
 801145a: 04 f0 e1 bc                  	b.w	#18882 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0x4>

0801145e core::ops::function::FnOnce::call_once::h1696723975f38c47:
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
 801145e: f0 b5                        	push	{r4, r5, r6, r7, lr}
 8011460: 03 af                        	add	r7, sp, #12
 8011462: 4d f8 04 bd                  	str	r11, [sp, #-4]!
 8011466: ca b0                        	sub	sp, #296
 8011468: 04 46                        	mov	r4, r0
 801146a: 68 46                        	mov	r0, sp
;             let mut bytes = [0; $param_type::MAX_LENGTH];
 801146c: 40 f2 25 11                  	movw	r1, #293
 8011470: 0b f0 c8 f8                  	bl	#45456
 8011474: 46 f6 68 71                  	movw	r1, #28520
 8011478: 00 20                        	movs	r0, #0
 801147a: c7 f2 6b 41                  	movt	r1, #29803
;     copy_nonoverlapping(src, dst, count)
 801147e: cd f8 0e 00                  	str.w	r0, [sp, #14]
 8011482: cd f8 09 10                  	str.w	r1, [sp, #9]
 8011486: 00 21                        	movs	r1, #0
 8011488: c0 f6 05 11                  	movt	r1, #2309
;         bytes[advertising_data_len_index] = self.advertising_data.len() as u8;
 801148c: 8d f8 0d 00                  	strb.w	r0, [sp, #13]
;         bytes[5] = self.address_type as u8;
 8011490: cd f8 05 10                  	str.w	r1, [sp, #5]
 8011494: 40 f2 90 11                  	movw	r1, #400
 8011498: c0 f2 90 11                  	movt	r1, #400
;         bytes[0] = self.advertising_type as u8;
 801149c: 8d f8 00 00                  	strb.w	r0, [sp]
;         let cmd = TlPacketType::try_from(cmd_code).map_err(|_| ())?;
 80114a0: 01 20                        	movs	r0, #1
;     copy_nonoverlapping(src, dst, count)
 80114a2: cd f8 01 10                  	str.w	r1, [sp, #1]
;         let cmd = TlPacketType::try_from(cmd_code).map_err(|_| ())?;
 80114a6: 0a f0 b3 fd                  	bl	#43878
 80114aa: 42 28                        	cmp	r0, #66
 80114ac: 37 d0                        	beq	#110 <_ZN4core3ops8function6FnOnce9call_once17h1696723975f38c47E+0xc4>
;         self.tx_buf = [0; TX_BUF_SIZE];
 80114ae: 04 f1 c1 06                  	add.w	r6, r4, #193
 80114b2: 05 46                        	mov	r5, r0
 80114b4: ff 21                        	movs	r1, #255
 80114b6: 30 46                        	mov	r0, r6
 80114b8: 0b f0 a1 f8                  	bl	#45378
 80114bc: 48 f2 01 30                  	movw	r0, #33537
 80114c0: 69 46                        	mov	r1, sp
 80114c2: c1 f2 fc 20                  	movt	r0, #4860
;     copy_nonoverlapping(src, dst, count)
 80114c6: 12 22                        	movs	r2, #18
 80114c8: 44 f8 bd 0f                  	str	r0, [r4, #189]!
 80114cc: 30 46                        	mov	r0, r6
 80114ce: 0a f0 24 ff                  	bl	#44616
;             TlPacketType::AclData => {
 80114d2: 10 2d                        	cmp	r5, #16
 80114d4: 18 bf                        	it	ne
 80114d6: 02 2d                        	cmpne	r5, #2
 80114d8: 19 d0                        	beq	#50 <_ZN4core3ops8function6FnOnce9call_once17h1696723975f38c47E+0xb4>
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 80114da: 40 f2 00 00                  	movw	r0, #0
;     copy(src, dst, count)
 80114de: 21 46                        	mov	r1, r4
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 80114e0: c2 f2 03 00                  	movt	r0, #8195
;     copy(src, dst, count)
 80114e4: 40 f2 03 12                  	movw	r2, #259
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 80114e8: 45 68                        	ldr	r5, [r0, #4]
 80114ea: 28 68                        	ldr	r0, [r5]
;         self as _
 80114ec: 08 30                        	adds	r0, #8
;     copy(src, dst, count)
 80114ee: 0a f0 14 ff                  	bl	#44584
;         let mut cmd_packet = &mut *(&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 80114f2: 28 68                        	ldr	r0, [r5]
 80114f4: 01 21                        	movs	r1, #1
;         cmd_packet.cmdserial.ty = TlPacketType::BleCmd as u8;
 80114f6: 01 72                        	strb	r1, [r0, #8]
 80114f8: 40 f6 08 40                  	movw	r0, #3080
 80114fc: c5 f6 00 00                  	movt	r0, #22528
 8011500: 4f f4 80 31                  	mov.w	r1, #65536
;     intrinsics::volatile_store(dst, src);
 8011504: 01 60                        	str	r1, [r0]
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
 8011506: 4a b0                        	add	sp, #296
 8011508: 5d f8 04 bb                  	ldr	r11, [sp], #4
 801150c: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 801150e: 40 f6 17 20                  	movw	r0, #2583
 8011512: 13 21                        	movs	r1, #19
 8011514: c0 f6 02 00                  	movt	r0, #2050
 8011518: 04 f0 9e ff                  	bl	#20284
 801151c: fe de                        	trap
;             Err(e) => unwrap_failed(msg, &e),
 801151e: 4d f6 42 30                  	movw	r0, #56130
 8011522: 4c f6 d4 43                  	movw	r3, #52436
 8011526: c0 f6 01 00                  	movt	r0, #2049
 801152a: c0 f6 01 03                  	movt	r3, #2049
 801152e: 6a 46                        	mov	r2, sp
 8011530: 17 21                        	movs	r1, #23
 8011532: 04 f0 96 ff                  	bl	#20268
 8011536: fe de                        	trap

08011538 core::ops::function::FnOnce::call_once::h21baa1ec1bf9a99e:
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
 8011538: b0 b5                        	push	{r4, r5, r7, lr}
 801153a: 02 af                        	add	r7, sp, #8
 801153c: 8a b0                        	sub	sp, #40
 801153e: 04 46                        	mov	r4, r0
;             let service = AddServiceParameters {
 8011540: 4c f6 9c 70                  	movw	r0, #53148
 8011544: c0 f6 01 00                  	movt	r0, #2049
 8011548: 0d f1 04 0c                  	add.w	r12, sp, #4
 801154c: d0 f8 03 10                  	ldr.w	r1, [r0, #3]
 8011550: 00 25                        	movs	r5, #0
 8011552: d0 f8 07 20                  	ldr.w	r2, [r0, #7]
 8011556: d0 f8 0b 30                  	ldr.w	r3, [r0, #11]
 801155a: c0 7b                        	ldrb	r0, [r0, #15]
 801155c: 8d f8 10 00                  	strb.w	r0, [sp, #16]
 8011560: 8c e8 0e 00                  	stm.w	r12, {r1, r2, r3}
;     copy_nonoverlapping(src, dst, count)
 8011564: 0d f1 18 0c                  	add.w	r12, sp, #24
;             let mut bytes = [0; $param_type::MAX_LENGTH];
 8011568: cd f8 23 50                  	str.w	r5, [sp, #35]
;     copy_nonoverlapping(src, dst, count)
 801156c: 8c e8 26 00                  	stm.w	r12, {r1, r2, r5}
 8011570: 49 f2 02 11                  	movw	r1, #37122
 8011574: c7 f2 52 61                  	movt	r1, #30290
 8011578: 8d f8 24 00                  	strb.w	r0, [sp, #36]
 801157c: 41 f2 02 40                  	movw	r0, #5122
;         bytes[next] = self.service_type as u8;
 8011580: ad f8 25 00                  	strh.w	r0, [sp, #37]
;         let cmd = TlPacketType::try_from(cmd_code).map_err(|_| ())?;
 8011584: 01 20                        	movs	r0, #1
;                 bytes[0] = 0x02;
 8011586: 05 91                        	str	r1, [sp, #20]
;     copy_nonoverlapping(src, dst, count)
 8011588: 08 93                        	str	r3, [sp, #32]
;         let cmd = TlPacketType::try_from(cmd_code).map_err(|_| ())?;
 801158a: 0a f0 41 fd                  	bl	#43650
 801158e: 42 28                        	cmp	r0, #66
 8011590: 34 d0                        	beq	#104 <_ZN4core3ops8function6FnOnce9call_once17h21baa1ec1bf9a99eE+0xc8>
 8011592: 05 46                        	mov	r5, r0
;         self.tx_buf = [0; TX_BUF_SIZE];
 8011594: 04 f1 d4 00                  	add.w	r0, r4, #212
 8011598: ec 21                        	movs	r1, #236
 801159a: 0b f0 30 f8                  	bl	#45152
 801159e: 40 f2 01 20                  	movw	r0, #513
 80115a2: 05 a9                        	add	r1, sp, #20
 80115a4: c1 f2 fd 30                  	movt	r0, #5117
;     copy_nonoverlapping(src, dst, count)
 80115a8: 13 22                        	movs	r2, #19
 80115aa: 44 f8 bd 0f                  	str	r0, [r4, #189]!
;         intrinsics::offset(self, count) as *mut T
 80115ae: 20 1d                        	adds	r0, r4, #4
;     copy_nonoverlapping(src, dst, count)
 80115b0: 0a f0 b3 fe                  	bl	#44390
;             TlPacketType::AclData => {
 80115b4: 10 2d                        	cmp	r5, #16
 80115b6: 18 bf                        	it	ne
 80115b8: 02 2d                        	cmpne	r5, #2
 80115ba: 17 d0                        	beq	#46 <_ZN4core3ops8function6FnOnce9call_once17h21baa1ec1bf9a99eE+0xb8>
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 80115bc: 40 f2 00 00                  	movw	r0, #0
;     copy(src, dst, count)
 80115c0: 21 46                        	mov	r1, r4
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 80115c2: c2 f2 03 00                  	movt	r0, #8195
;     copy(src, dst, count)
 80115c6: 40 f2 03 12                  	movw	r2, #259
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 80115ca: 45 68                        	ldr	r5, [r0, #4]
 80115cc: 28 68                        	ldr	r0, [r5]
;         self as _
 80115ce: 08 30                        	adds	r0, #8
;     copy(src, dst, count)
 80115d0: 0a f0 a3 fe                  	bl	#44358
;         let mut cmd_packet = &mut *(&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 80115d4: 28 68                        	ldr	r0, [r5]
 80115d6: 01 21                        	movs	r1, #1
;         cmd_packet.cmdserial.ty = TlPacketType::BleCmd as u8;
 80115d8: 01 72                        	strb	r1, [r0, #8]
 80115da: 40 f6 08 40                  	movw	r0, #3080
 80115de: c5 f6 00 00                  	movt	r0, #22528
 80115e2: 4f f4 80 31                  	mov.w	r1, #65536
;     intrinsics::volatile_store(dst, src);
 80115e6: 01 60                        	str	r1, [r0]
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
 80115e8: 0a b0                        	add	sp, #40
 80115ea: b0 bd                        	pop	{r4, r5, r7, pc}
 80115ec: 40 f6 17 20                  	movw	r0, #2583
 80115f0: 13 21                        	movs	r1, #19
 80115f2: c0 f6 02 00                  	movt	r0, #2050
 80115f6: 04 f0 2f ff                  	bl	#20062
 80115fa: fe de                        	trap
;             Err(e) => unwrap_failed(msg, &e),
 80115fc: 4d f6 1e 30                  	movw	r0, #56094
 8011600: 4c f6 e4 43                  	movw	r3, #52452
 8011604: 05 aa                        	add	r2, sp, #20
 8011606: c0 f6 01 00                  	movt	r0, #2049
 801160a: c0 f6 01 03                  	movt	r3, #2049
 801160e: 0e 21                        	movs	r1, #14
 8011610: 04 f0 27 ff                  	bl	#20046
 8011614: fe de                        	trap

08011616 core::ops::function::FnOnce::call_once::h2e2516bd45298b8a:
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
 8011616: b0 b5                        	push	{r4, r5, r7, lr}
 8011618: 02 af                        	add	r7, sp, #8
 801161a: 8a b0                        	sub	sp, #40
 801161c: 04 46                        	mov	r4, r0
;         let cmd = TlPacketType::try_from(cmd_code).map_err(|_| ())?;
 801161e: 01 20                        	movs	r0, #1
 8011620: 0a f0 f6 fc                  	bl	#43500
 8011624: 42 28                        	cmp	r0, #66
 8011626: 45 d0                        	beq	#138 <_ZN4core3ops8function6FnOnce9call_once17h2e2516bd45298b8aE+0xa2>
 8011628: 05 46                        	mov	r5, r0
;         self.tx_buf = [0; TX_BUF_SIZE];
 801162a: 04 f1 d4 00                  	add.w	r0, r4, #212
 801162e: ec 21                        	movs	r1, #236
 8011630: 0a f0 e5 ff                  	bl	#45002
 8011634: 48 f6 01 60                  	movw	r0, #36353
;     copy_nonoverlapping(src, dst, count)
 8011638: 4c f6 ec 71                  	movw	r1, #53228
 801163c: c1 f2 fc 30                  	movt	r0, #5116
 8011640: c0 f6 01 01                  	movt	r1, #2049
 8011644: 44 f8 bd 0f                  	str	r0, [r4, #189]!
 8011648: 4f f0 06 0c                  	mov.w	r12, #6
 801164c: 91 e8 0c 40                  	ldm.w	r1, {r2, r3, lr}
 8011650: 41 f2 12 10                  	movw	r0, #4370
;             TlPacketType::AclData => {
 8011654: 10 2d                        	cmp	r5, #16
;     copy_nonoverlapping(src, dst, count)
 8011656: c9 68                        	ldr	r1, [r1, #12]
 8011658: 84 f8 06 c0                  	strb.w	r12, [r4, #6]
 801165c: a0 80                        	strh	r0, [r4, #4]
 801165e: c4 f8 07 20                  	str.w	r2, [r4, #7]
 8011662: c4 f8 0b 30                  	str.w	r3, [r4, #11]
 8011666: c4 f8 0f e0                  	str.w	lr, [r4, #15]
 801166a: c4 f8 13 10                  	str.w	r1, [r4, #19]
;             TlPacketType::AclData => {
 801166e: 18 bf                        	it	ne
 8011670: 02 2d                        	cmpne	r5, #2
 8011672: 17 d0                        	beq	#46 <_ZN4core3ops8function6FnOnce9call_once17h2e2516bd45298b8aE+0x92>
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 8011674: 40 f2 00 00                  	movw	r0, #0
;     copy(src, dst, count)
 8011678: 21 46                        	mov	r1, r4
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 801167a: c2 f2 03 00                  	movt	r0, #8195
;     copy(src, dst, count)
 801167e: 40 f2 03 12                  	movw	r2, #259
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 8011682: 45 68                        	ldr	r5, [r0, #4]
 8011684: 28 68                        	ldr	r0, [r5]
;         self as _
 8011686: 08 30                        	adds	r0, #8
;     copy(src, dst, count)
 8011688: 0a f0 47 fe                  	bl	#44174
;         let mut cmd_packet = &mut *(&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 801168c: 28 68                        	ldr	r0, [r5]
 801168e: 01 21                        	movs	r1, #1
;         cmd_packet.cmdserial.ty = TlPacketType::BleCmd as u8;
 8011690: 01 72                        	strb	r1, [r0, #8]
 8011692: 40 f6 08 40                  	movw	r0, #3080
 8011696: c5 f6 00 00                  	movt	r0, #22528
 801169a: 4f f4 80 31                  	mov.w	r1, #65536
;     intrinsics::volatile_store(dst, src);
 801169e: 01 60                        	str	r1, [r0]
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
 80116a0: 0a b0                        	add	sp, #40
 80116a2: b0 bd                        	pop	{r4, r5, r7, pc}
 80116a4: 40 f6 17 20                  	movw	r0, #2583
 80116a8: 13 21                        	movs	r1, #19
 80116aa: c0 f6 02 00                  	movt	r0, #2050
 80116ae: 04 f0 d3 fe                  	bl	#19878
 80116b2: fe de                        	trap
;             Err(e) => unwrap_failed(msg, &e),
 80116b4: 4d f6 59 30                  	movw	r0, #56153
 80116b8: 4c f6 d4 43                  	movw	r3, #52436
 80116bc: c0 f6 01 00                  	movt	r0, #2049
 80116c0: c0 f6 01 03                  	movt	r3, #2049
 80116c4: 6a 46                        	mov	r2, sp
 80116c6: 1d 21                        	movs	r1, #29
 80116c8: 04 f0 cb fe                  	bl	#19862
 80116cc: fe de                        	trap

080116ce core::ops::function::FnOnce::call_once::h2f109426c9f4b46c:
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
 80116ce: f0 b5                        	push	{r4, r5, r6, r7, lr}
 80116d0: 03 af                        	add	r7, sp, #12
 80116d2: 4d f8 04 8d                  	str	r8, [sp, #-4]!
 80116d6: 82 b0                        	sub	sp, #8
 80116d8: 04 46                        	mov	r4, r0
;                 service_handle: cx.service_handle.expect("service handle to be set"),
 80116da: 08 88                        	ldrh	r0, [r1]
;             Some(val) => val,
 80116dc: 00 28                        	cmp	r0, #0
 80116de: 49 d0                        	beq	#146 <_ZN4core3ops8function6FnOnce9call_once17h2f109426c9f4b46cE+0xaa>
;                 characteristic_handle: cx.dev_name_handle.expect("dev name handle to be set"),
 80116e0: 88 88                        	ldrh	r0, [r1, #4]
 80116e2: 0e 46                        	mov	r6, r1
;             Some(val) => val,
 80116e4: 00 28                        	cmp	r0, #0
 80116e6: 4d d0                        	beq	#154 <_ZN4core3ops8function6FnOnce9call_once17h2f109426c9f4b46cE+0xba>
;         let cmd = TlPacketType::try_from(cmd_code).map_err(|_| ())?;
 80116e8: 01 20                        	movs	r0, #1
 80116ea: b6 f8 02 80                  	ldrh.w	r8, [r6, #2]
 80116ee: 0a f0 8f fc                  	bl	#43294
 80116f2: 42 28                        	cmp	r0, #66
 80116f4: 4e d0                        	beq	#156 <_ZN4core3ops8function6FnOnce9call_once17h2f109426c9f4b46cE+0xca>
 80116f6: 05 46                        	mov	r5, r0
;         self.tx_buf = [0; TX_BUF_SIZE];
 80116f8: 04 f1 cb 00                  	add.w	r0, r4, #203
 80116fc: f5 21                        	movs	r1, #245
;                 characteristic_handle: cx.dev_name_handle.expect("dev name handle to be set"),
 80116fe: f6 88                        	ldrh	r6, [r6, #6]
;         self.tx_buf = [0; TX_BUF_SIZE];
 8011700: 0a f0 7d ff                  	bl	#44794
 8011704: 40 f2 01 60                  	movw	r0, #1537
;             TlPacketType::AclData => {
 8011708: 10 2d                        	cmp	r5, #16
 801170a: c0 f6 fd 20                  	movt	r0, #2813
;     copy_nonoverlapping(src, dst, count)
 801170e: 44 f8 bd 0f                  	str	r0, [r4, #189]!
 8011712: 46 f6 68 70                  	movw	r0, #28520
 8011716: c7 f2 6b 40                  	movt	r0, #29803
 801171a: c4 f8 0a 00                  	str.w	r0, [r4, #10]
 801171e: 4f f4 80 60                  	mov.w	r0, #1024
 8011722: 20 81                        	strh	r0, [r4, #8]
 8011724: e6 80                        	strh	r6, [r4, #6]
 8011726: a4 f8 04 80                  	strh.w	r8, [r4, #4]
;             TlPacketType::AclData => {
 801172a: 18 bf                        	it	ne
 801172c: 02 2d                        	cmpne	r5, #2
 801172e: 19 d0                        	beq	#50 <_ZN4core3ops8function6FnOnce9call_once17h2f109426c9f4b46cE+0x9a>
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 8011730: 40 f2 00 00                  	movw	r0, #0
;     copy(src, dst, count)
 8011734: 21 46                        	mov	r1, r4
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 8011736: c2 f2 03 00                  	movt	r0, #8195
;     copy(src, dst, count)
 801173a: 40 f2 03 12                  	movw	r2, #259
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 801173e: 45 68                        	ldr	r5, [r0, #4]
 8011740: 28 68                        	ldr	r0, [r5]
;         self as _
 8011742: 08 30                        	adds	r0, #8
;     copy(src, dst, count)
 8011744: 0a f0 e9 fd                  	bl	#43986
;         let mut cmd_packet = &mut *(&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 8011748: 28 68                        	ldr	r0, [r5]
 801174a: 01 21                        	movs	r1, #1
;         cmd_packet.cmdserial.ty = TlPacketType::BleCmd as u8;
 801174c: 01 72                        	strb	r1, [r0, #8]
 801174e: 40 f6 08 40                  	movw	r0, #3080
 8011752: c5 f6 00 00                  	movt	r0, #22528
 8011756: 4f f4 80 31                  	mov.w	r1, #65536
;     intrinsics::volatile_store(dst, src);
 801175a: 01 60                        	str	r1, [r0]
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
 801175c: 02 b0                        	add	sp, #8
 801175e: 5d f8 04 8b                  	ldr	r8, [sp], #4
 8011762: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 8011764: 40 f6 17 20                  	movw	r0, #2583
 8011768: 13 21                        	movs	r1, #19
 801176a: c0 f6 02 00                  	movt	r0, #2050
 801176e: 04 f0 73 fe                  	bl	#19686
 8011772: fe de                        	trap
;             None => expect_failed(msg),
 8011774: 4d f6 ed 20                  	movw	r0, #56045
 8011778: 18 21                        	movs	r1, #24
 801177a: c0 f6 01 00                  	movt	r0, #2049
 801177e: 04 f0 6b fe                  	bl	#19670
 8011782: fe de                        	trap
 8011784: 4d f6 05 30                  	movw	r0, #56069
 8011788: 19 21                        	movs	r1, #25
 801178a: c0 f6 01 00                  	movt	r0, #2049
 801178e: 04 f0 63 fe                  	bl	#19654
 8011792: fe de                        	trap
;             Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
 8011794: 40 f6 6f 20                  	movw	r0, #2671
 8011798: 4c f6 34 53                  	movw	r3, #52532
 801179c: a7 f1 11 02                  	sub.w	r2, r7, #17
 80117a0: c0 f6 02 00                  	movt	r0, #2050
 80117a4: c0 f6 01 03                  	movt	r3, #2049
 80117a8: 2b 21                        	movs	r1, #43
 80117aa: 04 f0 5a fe                  	bl	#19636
 80117ae: fe de                        	trap

080117b0 core::ops::function::FnOnce::call_once::h2f60bf7a42b70f60:
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
 80117b0: 80 b5                        	push	{r7, lr}
 80117b2: 6f 46                        	mov	r7, sp
 80117b4: 8a b0                        	sub	sp, #40
 80117b6: 8a 89                        	ldrh	r2, [r1, #12]
;             Some(val) => val,
 80117b8: 8a b3                        	cbz	r2, #98
 80117ba: c9 89                        	ldrh	r1, [r1, #14]
 80117bc: 02 22                        	movs	r2, #2
;             rc.add_characteristic(&AddCharacteristicParameters {
 80117be: ad f8 08 10                  	strh.w	r1, [sp, #8]
 80117c2: 00 21                        	movs	r1, #0
 80117c4: c1 f2 00 02                  	movt	r2, #4096
 80117c8: ad f8 20 10                  	strh.w	r1, [sp, #32]
 80117cc: 4c f6 bc 71                  	movw	r1, #53180
 80117d0: 07 92                        	str	r2, [sp, #28]
 80117d2: 01 22                        	movs	r2, #1
 80117d4: c0 f6 01 01                  	movt	r1, #2049
 80117d8: 8d f8 0a 20                  	strb.w	r2, [sp, #10]
 80117dc: 91 e8 0c 50                  	ldm.w	r1, {r2, r3, r12, lr}
 80117e0: 02 21                        	movs	r1, #2
 80117e2: 01 91                        	str	r1, [sp, #4]
 80117e4: 01 a9                        	add	r1, sp, #4
 80117e6: cd f8 0b 20                  	str.w	r2, [sp, #11]
 80117ea: cd f8 0f 30                  	str.w	r3, [sp, #15]
 80117ee: cd f8 13 c0                  	str.w	r12, [sp, #19]
 80117f2: cd f8 17 e0                  	str.w	lr, [sp, #23]
 80117f6: 07 f0 48 f8                  	bl	#28816
 80117fa: c0 b2                        	uxtb	r0, r0
;             Ok(t) => t,
 80117fc: 02 28                        	cmp	r0, #2
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
 80117fe: 04 bf                        	itt	eq
 8011800: 0a b0                        	addeq	sp, #40
 8011802: 80 bd                        	popeq	{r7, pc}
;             Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
 8011804: 40 f6 6f 20                  	movw	r0, #2671
 8011808: 4c f6 e4 43                  	movw	r3, #52452
 801180c: 7a 1e                        	subs	r2, r7, #1
 801180e: c0 f6 02 00                  	movt	r0, #2050
 8011812: c0 f6 01 03                  	movt	r3, #2049
 8011816: 2b 21                        	movs	r1, #43
 8011818: 04 f0 23 fe                  	bl	#19526
 801181c: fe de                        	trap
;             None => expect_failed(msg),
 801181e: 4d f6 ed 20                  	movw	r0, #56045
 8011822: 18 21                        	movs	r1, #24
 8011824: c0 f6 01 00                  	movt	r0, #2049
 8011828: 04 f0 16 fe                  	bl	#19500
 801182c: fe de                        	trap

0801182e core::ops::function::FnOnce::call_once::h37918fa07026aba4:
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
 801182e: b0 b5                        	push	{r4, r5, r7, lr}
 8011830: 02 af                        	add	r7, sp, #8
 8011832: 98 b0                        	sub	sp, #96
 8011834: 04 46                        	mov	r4, r0
;         DEVICE_PERIPHERALS = true;
 8011836: 40 f2 08 20                  	movw	r0, #520
 801183a: c2 f2 00 00                  	movt	r0, #8192
 801183e: 01 21                        	movs	r1, #1
 8011840: 01 70                        	strb	r1, [r0]
 8011842: 42 f2 00 00                  	movw	r0, #8192
 8011846: ce f2 04 00                  	movt	r0, #57348
;     intrinsics::volatile_load(src)
 801184a: 01 68                        	ldr	r1, [r0]
 801184c: 00 68                        	ldr	r0, [r0]
 801184e: 47 f2 80 50                  	movw	r0, #30080
 8011852: c1 f6 ff 70                  	movt	r0, #8191
;         let uid64 = unsafe { *UID64_PTR };
 8011856: d0 e9 00 01                  	ldrd	r0, r1, [r0]
;     bytes[5] = (lhci_info.st_company_id >> 8 & 0xff) as u8;
 801185a: 0a 0c                        	lsrs	r2, r1, #16
;         self.data
 801185c: 8d f8 00 00                  	strb.w	r0, [sp]
 8011860: 8d f8 03 10                  	strb.w	r1, [sp, #3]
;         let st_company_id = unsafe { *UID64_PTR.offset(1) } >> 8 & 0x00FF_FFFF;
 8011864: 09 0a                        	lsrs	r1, r1, #8
;         self.data
 8011866: 8d f8 04 10                  	strb.w	r1, [sp, #4]
;     bytes[2] = ((lhci_info.uid64 >> 16) & 0xff) as u8;
 801186a: 01 0c                        	lsrs	r1, r0, #16
;     bytes[1] = ((lhci_info.uid64 >> 8) & 0xff) as u8;
 801186c: 00 0a                        	lsrs	r0, r0, #8
;         self.data
 801186e: 8d f8 02 10                  	strb.w	r1, [sp, #2]
 8011872: 8d f8 01 00                  	strb.w	r0, [sp, #1]
 8011876: 68 46                        	mov	r0, sp
 8011878: 06 30                        	adds	r0, #6
 801187a: 28 21                        	movs	r1, #40
 801187c: 8d f8 05 20                  	strb.w	r2, [sp, #5]
 8011880: 0a f0 bd fe                  	bl	#44410
 8011884: 0c a8                        	add	r0, sp, #48
;             let mut bytes = [0; $param_type::MAX_LENGTH];
 8011886: 2c 21                        	movs	r1, #44
 8011888: 02 30                        	adds	r0, #2
 801188a: 0a f0 b8 fe                  	bl	#44400
;     copy_nonoverlapping(src, dst, count)
 801188e: bd f8 04 00                  	ldrh.w	r0, [sp, #4]
 8011892: 4f f4 c0 62                  	mov.w	r2, #1536
 8011896: 00 99                        	ldr	r1, [sp]
 8011898: ad f8 36 00                  	strh.w	r0, [sp, #54]
;         let cmd = TlPacketType::try_from(cmd_code).map_err(|_| ())?;
 801189c: 01 20                        	movs	r0, #1
;         bytes[0] = self.offset;
 801189e: ad f8 30 20                  	strh.w	r2, [sp, #48]
;     copy_nonoverlapping(src, dst, count)
 80118a2: cd f8 32 10                  	str.w	r1, [sp, #50]
;         let cmd = TlPacketType::try_from(cmd_code).map_err(|_| ())?;
 80118a6: 0a f0 b3 fb                  	bl	#42854
 80118aa: 42 28                        	cmp	r0, #66
 80118ac: 33 d0                        	beq	#102 <_ZN4core3ops8function6FnOnce9call_once17h37918fa07026aba4E+0xec>
 80118ae: 05 46                        	mov	r5, r0
;         self.tx_buf = [0; TX_BUF_SIZE];
 80118b0: 04 f1 c9 00                  	add.w	r0, r4, #201
 80118b4: f7 21                        	movs	r1, #247
 80118b6: 0a f0 a2 fe                  	bl	#44356
 80118ba: 40 f6 01 42                  	movw	r2, #3073
;     copy_nonoverlapping(src, dst, count)
 80118be: dd e9 0c 01                  	ldrd	r0, r1, [sp, #48]
 80118c2: c0 f6 fc 02                  	movt	r2, #2300
;             TlPacketType::AclData => {
 80118c6: 10 2d                        	cmp	r5, #16
;     copy_nonoverlapping(src, dst, count)
 80118c8: 44 f8 bd 2f                  	str	r2, [r4, #189]!
 80118cc: a1 60                        	str	r1, [r4, #8]
 80118ce: 60 60                        	str	r0, [r4, #4]
;             TlPacketType::AclData => {
 80118d0: 18 bf                        	it	ne
 80118d2: 02 2d                        	cmpne	r5, #2
 80118d4: 17 d0                        	beq	#46 <_ZN4core3ops8function6FnOnce9call_once17h37918fa07026aba4E+0xdc>
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 80118d6: 40 f2 00 00                  	movw	r0, #0
;     copy(src, dst, count)
 80118da: 21 46                        	mov	r1, r4
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 80118dc: c2 f2 03 00                  	movt	r0, #8195
;     copy(src, dst, count)
 80118e0: 40 f2 03 12                  	movw	r2, #259
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 80118e4: 45 68                        	ldr	r5, [r0, #4]
 80118e6: 28 68                        	ldr	r0, [r5]
;         self as _
 80118e8: 08 30                        	adds	r0, #8
;     copy(src, dst, count)
 80118ea: 0a f0 16 fd                  	bl	#43564
;         let mut cmd_packet = &mut *(&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 80118ee: 28 68                        	ldr	r0, [r5]
 80118f0: 01 21                        	movs	r1, #1
;         cmd_packet.cmdserial.ty = TlPacketType::BleCmd as u8;
 80118f2: 01 72                        	strb	r1, [r0, #8]
 80118f4: 40 f6 08 40                  	movw	r0, #3080
 80118f8: c5 f6 00 00                  	movt	r0, #22528
 80118fc: 4f f4 80 31                  	mov.w	r1, #65536
;     intrinsics::volatile_store(dst, src);
 8011900: 01 60                        	str	r1, [r0]
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
 8011902: 18 b0                        	add	sp, #96
 8011904: b0 bd                        	pop	{r4, r5, r7, pc}
 8011906: 40 f6 17 20                  	movw	r0, #2583
 801190a: 13 21                        	movs	r1, #19
 801190c: c0 f6 02 00                  	movt	r0, #2050
 8011910: 04 f0 a2 fd                  	bl	#19268
 8011914: fe de                        	trap
;             Err(e) => unwrap_failed(msg, &e),
 8011916: 4d f6 90 20                  	movw	r0, #55952
 801191a: 4c f6 e4 43                  	movw	r3, #52452
 801191e: 0c aa                        	add	r2, sp, #48
 8011920: c0 f6 01 00                  	movt	r0, #2049
 8011924: c0 f6 01 03                  	movt	r3, #2049
 8011928: 12 21                        	movs	r1, #18
 801192a: 04 f0 9a fd                  	bl	#19252
 801192e: fe de                        	trap

08011930 core::ops::function::FnOnce::call_once::h508a26b759e7a2a1:
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
 8011930: b0 b5                        	push	{r4, r5, r7, lr}
 8011932: 02 af                        	add	r7, sp, #8
 8011934: 82 b0                        	sub	sp, #8
 8011936: 04 46                        	mov	r4, r0
;         let cmd = TlPacketType::try_from(cmd_code).map_err(|_| ())?;
 8011938: 01 20                        	movs	r0, #1
 801193a: 0a f0 69 fb                  	bl	#42706
 801193e: 42 28                        	cmp	r0, #66
 8011940: 2f d0                        	beq	#94 <_ZN4core3ops8function6FnOnce9call_once17h508a26b759e7a2a1E+0x76>
 8011942: 05 46                        	mov	r5, r0
;         self.tx_buf = [0; TX_BUF_SIZE];
 8011944: 04 f1 c1 00                  	add.w	r0, r4, #193
 8011948: ff 21                        	movs	r1, #255
 801194a: 0a f0 58 fe                  	bl	#44208
 801194e: 40 f2 01 30                  	movw	r0, #769
;             TlPacketType::AclData => {
 8011952: 10 2d                        	cmp	r5, #16
 8011954: c0 f2 0c 00                  	movt	r0, #12
;     copy_nonoverlapping(src, dst, count)
 8011958: 44 f8 bd 0f                  	str	r0, [r4, #189]!
;             TlPacketType::AclData => {
 801195c: 18 bf                        	it	ne
 801195e: 02 2d                        	cmpne	r5, #2
 8011960: 17 d0                        	beq	#46 <_ZN4core3ops8function6FnOnce9call_once17h508a26b759e7a2a1E+0x66>
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 8011962: 40 f2 00 00                  	movw	r0, #0
;     copy(src, dst, count)
 8011966: 21 46                        	mov	r1, r4
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 8011968: c2 f2 03 00                  	movt	r0, #8195
;     copy(src, dst, count)
 801196c: 40 f2 03 12                  	movw	r2, #259
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 8011970: 45 68                        	ldr	r5, [r0, #4]
 8011972: 28 68                        	ldr	r0, [r5]
;         self as _
 8011974: 08 30                        	adds	r0, #8
;     copy(src, dst, count)
 8011976: 0a f0 d0 fc                  	bl	#43424
;         let mut cmd_packet = &mut *(&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 801197a: 28 68                        	ldr	r0, [r5]
 801197c: 01 21                        	movs	r1, #1
;         cmd_packet.cmdserial.ty = TlPacketType::BleCmd as u8;
 801197e: 01 72                        	strb	r1, [r0, #8]
 8011980: 40 f6 08 40                  	movw	r0, #3080
 8011984: c5 f6 00 00                  	movt	r0, #22528
 8011988: 4f f4 80 31                  	mov.w	r1, #65536
;     intrinsics::volatile_store(dst, src);
 801198c: 01 60                        	str	r1, [r0]
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
 801198e: 02 b0                        	add	sp, #8
 8011990: b0 bd                        	pop	{r4, r5, r7, pc}
 8011992: 40 f6 17 20                  	movw	r0, #2583
 8011996: 13 21                        	movs	r1, #19
 8011998: c0 f6 02 00                  	movt	r0, #2050
 801199c: 04 f0 5c fd                  	bl	#19128
 80119a0: fe de                        	trap
;             Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
 80119a2: 40 f6 6f 20                  	movw	r0, #2671
 80119a6: 4c f6 e4 43                  	movw	r3, #52452
 80119aa: a7 f1 09 02                  	sub.w	r2, r7, #9
 80119ae: c0 f6 02 00                  	movt	r0, #2050
 80119b2: c0 f6 01 03                  	movt	r3, #2049
 80119b6: 2b 21                        	movs	r1, #43
 80119b8: 04 f0 53 fd                  	bl	#19110
 80119bc: fe de                        	trap

080119be core::ops::function::FnOnce::call_once::h62932c84410f06ae:
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
 80119be: 80 b5                        	push	{r7, lr}
 80119c0: 6f 46                        	mov	r7, sp
 80119c2: 8a b0                        	sub	sp, #40
 80119c4: 0a 8b                        	ldrh	r2, [r1, #24]
;             Some(val) => val,
 80119c6: 8a b3                        	cbz	r2, #98
 80119c8: 49 8b                        	ldrh	r1, [r1, #26]
 80119ca: 08 22                        	movs	r2, #8
;             rc.add_characteristic(&AddCharacteristicParameters {
 80119cc: ad f8 08 10                  	strh.w	r1, [sp, #8]
 80119d0: 00 21                        	movs	r1, #0
 80119d2: c1 f2 03 02                  	movt	r2, #4099
 80119d6: ad f8 20 10                  	strh.w	r1, [sp, #32]
 80119da: 4c f6 dc 71                  	movw	r1, #53212
 80119de: 07 92                        	str	r2, [sp, #28]
 80119e0: 01 22                        	movs	r2, #1
 80119e2: c0 f6 01 01                  	movt	r1, #2049
 80119e6: 8d f8 0a 20                  	strb.w	r2, [sp, #10]
 80119ea: 91 e8 0c 50                  	ldm.w	r1, {r2, r3, r12, lr}
 80119ee: 02 21                        	movs	r1, #2
 80119f0: 01 91                        	str	r1, [sp, #4]
 80119f2: 01 a9                        	add	r1, sp, #4
 80119f4: cd f8 0b 20                  	str.w	r2, [sp, #11]
 80119f8: cd f8 0f 30                  	str.w	r3, [sp, #15]
 80119fc: cd f8 13 c0                  	str.w	r12, [sp, #19]
 8011a00: cd f8 17 e0                  	str.w	lr, [sp, #23]
 8011a04: 06 f0 41 ff                  	bl	#28290
 8011a08: c0 b2                        	uxtb	r0, r0
;             Ok(t) => t,
 8011a0a: 02 28                        	cmp	r0, #2
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
 8011a0c: 04 bf                        	itt	eq
 8011a0e: 0a b0                        	addeq	sp, #40
 8011a10: 80 bd                        	popeq	{r7, pc}
;             Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
 8011a12: 40 f6 6f 20                  	movw	r0, #2671
 8011a16: 4c f6 e4 43                  	movw	r3, #52452
 8011a1a: 7a 1e                        	subs	r2, r7, #1
 8011a1c: c0 f6 02 00                  	movt	r0, #2050
 8011a20: c0 f6 01 03                  	movt	r3, #2049
 8011a24: 2b 21                        	movs	r1, #43
 8011a26: 04 f0 1c fd                  	bl	#19000
 8011a2a: fe de                        	trap
;             None => expect_failed(msg),
 8011a2c: 4d f6 ed 20                  	movw	r0, #56045
 8011a30: 18 21                        	movs	r1, #24
 8011a32: c0 f6 01 00                  	movt	r0, #2049
 8011a36: 04 f0 0f fd                  	bl	#18974
 8011a3a: fe de                        	trap

08011a3c core::ops::function::FnOnce::call_once::h6352d9cd87e658bc:
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
 8011a3c: b0 b5                        	push	{r4, r5, r7, lr}
 8011a3e: 02 af                        	add	r7, sp, #8
 8011a40: 82 b0                        	sub	sp, #8
 8011a42: 04 46                        	mov	r4, r0
;         let cmd = TlPacketType::try_from(cmd_code).map_err(|_| ())?;
 8011a44: 01 20                        	movs	r0, #1
 8011a46: 0a f0 e3 fa                  	bl	#42438
 8011a4a: 42 28                        	cmp	r0, #66
 8011a4c: 2f d0                        	beq	#94 <_ZN4core3ops8function6FnOnce9call_once17h6352d9cd87e658bcE+0x76>
 8011a4e: 05 46                        	mov	r5, r0
;         self.tx_buf = [0; TX_BUF_SIZE];
 8011a50: 04 f1 c1 00                  	add.w	r0, r4, #193
 8011a54: ff 21                        	movs	r1, #255
 8011a56: 0a f0 d2 fd                  	bl	#43940
 8011a5a: 40 f2 01 10                  	movw	r0, #257
;             TlPacketType::AclData => {
 8011a5e: 10 2d                        	cmp	r5, #16
 8011a60: c0 f2 fd 00                  	movt	r0, #253
;     copy_nonoverlapping(src, dst, count)
 8011a64: 44 f8 bd 0f                  	str	r0, [r4, #189]!
;             TlPacketType::AclData => {
 8011a68: 18 bf                        	it	ne
 8011a6a: 02 2d                        	cmpne	r5, #2
 8011a6c: 17 d0                        	beq	#46 <_ZN4core3ops8function6FnOnce9call_once17h6352d9cd87e658bcE+0x66>
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 8011a6e: 40 f2 00 00                  	movw	r0, #0
;     copy(src, dst, count)
 8011a72: 21 46                        	mov	r1, r4
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 8011a74: c2 f2 03 00                  	movt	r0, #8195
;     copy(src, dst, count)
 8011a78: 40 f2 03 12                  	movw	r2, #259
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 8011a7c: 45 68                        	ldr	r5, [r0, #4]
 8011a7e: 28 68                        	ldr	r0, [r5]
;         self as _
 8011a80: 08 30                        	adds	r0, #8
;     copy(src, dst, count)
 8011a82: 0a f0 4a fc                  	bl	#43156
;         let mut cmd_packet = &mut *(&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 8011a86: 28 68                        	ldr	r0, [r5]
 8011a88: 01 21                        	movs	r1, #1
;         cmd_packet.cmdserial.ty = TlPacketType::BleCmd as u8;
 8011a8a: 01 72                        	strb	r1, [r0, #8]
 8011a8c: 40 f6 08 40                  	movw	r0, #3080
 8011a90: c5 f6 00 00                  	movt	r0, #22528
 8011a94: 4f f4 80 31                  	mov.w	r1, #65536
;     intrinsics::volatile_store(dst, src);
 8011a98: 01 60                        	str	r1, [r0]
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
 8011a9a: 02 b0                        	add	sp, #8
 8011a9c: b0 bd                        	pop	{r4, r5, r7, pc}
 8011a9e: 40 f6 17 20                  	movw	r0, #2583
 8011aa2: 13 21                        	movs	r1, #19
 8011aa4: c0 f6 02 00                  	movt	r0, #2050
 8011aa8: 04 f0 d6 fc                  	bl	#18860
 8011aac: fe de                        	trap
;             Err(e) => unwrap_failed(msg, &e),
 8011aae: 4d f6 e4 20                  	movw	r0, #56036
 8011ab2: 4c f6 e4 43                  	movw	r3, #52452
 8011ab6: a7 f1 09 02                  	sub.w	r2, r7, #9
 8011aba: c0 f6 01 00                  	movt	r0, #2049
 8011abe: c0 f6 01 03                  	movt	r3, #2049
 8011ac2: 09 21                        	movs	r1, #9
 8011ac4: 04 f0 cd fc                  	bl	#18842
 8011ac8: fe de                        	trap

08011aca core::ops::function::FnOnce::call_once::h660281b95ad91114:
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
 8011aca: b0 b5                        	push	{r4, r5, r7, lr}
 8011acc: 02 af                        	add	r7, sp, #8
 8011ace: 82 b0                        	sub	sp, #8
 8011ad0: 04 46                        	mov	r4, r0
;         let cmd = TlPacketType::try_from(cmd_code).map_err(|_| ())?;
 8011ad2: 01 20                        	movs	r0, #1
 8011ad4: 0a f0 9c fa                  	bl	#42296
 8011ad8: 42 28                        	cmp	r0, #66
 8011ada: 32 d0                        	beq	#100 <_ZN4core3ops8function6FnOnce9call_once17h660281b95ad91114E+0x7c>
 8011adc: 05 46                        	mov	r5, r0
;         self.tx_buf = [0; TX_BUF_SIZE];
 8011ade: 04 f1 c3 00                  	add.w	r0, r4, #195
 8011ae2: fd 21                        	movs	r1, #253
 8011ae4: 0a f0 8b fd                  	bl	#43798
 8011ae8: 40 f6 01 70                  	movw	r0, #3841
;             TlPacketType::AclData => {
 8011aec: 10 2d                        	cmp	r5, #16
 8011aee: c0 f2 fc 20                  	movt	r0, #764
;     copy_nonoverlapping(src, dst, count)
 8011af2: 44 f8 bd 0f                  	str	r0, [r4, #189]!
 8011af6: 4f f4 c8 50                  	mov.w	r0, #6400
 8011afa: a0 80                        	strh	r0, [r4, #4]
;             TlPacketType::AclData => {
 8011afc: 18 bf                        	it	ne
 8011afe: 02 2d                        	cmpne	r5, #2
 8011b00: 17 d0                        	beq	#46 <_ZN4core3ops8function6FnOnce9call_once17h660281b95ad91114E+0x6c>
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 8011b02: 40 f2 00 00                  	movw	r0, #0
;     copy(src, dst, count)
 8011b06: 21 46                        	mov	r1, r4
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 8011b08: c2 f2 03 00                  	movt	r0, #8195
;     copy(src, dst, count)
 8011b0c: 40 f2 03 12                  	movw	r2, #259
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 8011b10: 45 68                        	ldr	r5, [r0, #4]
 8011b12: 28 68                        	ldr	r0, [r5]
;         self as _
 8011b14: 08 30                        	adds	r0, #8
;     copy(src, dst, count)
 8011b16: 0a f0 00 fc                  	bl	#43008
;         let mut cmd_packet = &mut *(&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 8011b1a: 28 68                        	ldr	r0, [r5]
 8011b1c: 01 21                        	movs	r1, #1
;         cmd_packet.cmdserial.ty = TlPacketType::BleCmd as u8;
 8011b1e: 01 72                        	strb	r1, [r0, #8]
 8011b20: 40 f6 08 40                  	movw	r0, #3080
 8011b24: c5 f6 00 00                  	movt	r0, #22528
 8011b28: 4f f4 80 31                  	mov.w	r1, #65536
;     intrinsics::volatile_store(dst, src);
 8011b2c: 01 60                        	str	r1, [r0]
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
 8011b2e: 02 b0                        	add	sp, #8
 8011b30: b0 bd                        	pop	{r4, r5, r7, pc}
 8011b32: 40 f6 17 20                  	movw	r0, #2583
 8011b36: 13 21                        	movs	r1, #19
 8011b38: c0 f6 02 00                  	movt	r0, #2050
 8011b3c: 04 f0 8c fc                  	bl	#18712
 8011b40: fe de                        	trap
;             Err(e) => unwrap_failed(msg, &e),
 8011b42: 4d f6 d2 20                  	movw	r0, #56018
 8011b46: 4c f6 e4 43                  	movw	r3, #52452
 8011b4a: a7 f1 09 02                  	sub.w	r2, r7, #9
 8011b4e: c0 f6 01 00                  	movt	r0, #2049
 8011b52: c0 f6 01 03                  	movt	r3, #2049
 8011b56: 12 21                        	movs	r1, #18
 8011b58: 04 f0 83 fc                  	bl	#18694
 8011b5c: fe de                        	trap

08011b5e core::ops::function::FnOnce::call_once::h7acbba35a00b2f79:
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
 8011b5e: b0 b5                        	push	{r4, r5, r7, lr}
 8011b60: 02 af                        	add	r7, sp, #8
 8011b62: 8a b0                        	sub	sp, #40
 8011b64: 04 46                        	mov	r4, r0
 8011b66: 00 20                        	movs	r0, #0
;     params[0] = data.len() as u8;
 8011b68: cd e9 06 00                  	strd	r0, r0, [sp, #24]
 8011b6c: cd e9 04 00                  	strd	r0, r0, [sp, #16]
 8011b70: cd e9 02 00                  	strd	r0, r0, [sp, #8]
 8011b74: cd e9 00 00                  	strd	r0, r0, [sp]
;         let cmd = TlPacketType::try_from(cmd_code).map_err(|_| ())?;
 8011b78: 01 20                        	movs	r0, #1
 8011b7a: 0a f0 49 fa                  	bl	#42130
 8011b7e: 42 28                        	cmp	r0, #66
 8011b80: 34 d0                        	beq	#104 <_ZN4core3ops8function6FnOnce9call_once17h7acbba35a00b2f79E+0x92>
 8011b82: 05 46                        	mov	r5, r0
;         self.tx_buf = [0; TX_BUF_SIZE];
 8011b84: 04 f1 e1 00                  	add.w	r0, r4, #225
 8011b88: df 21                        	movs	r1, #223
 8011b8a: 0a f0 38 fd                  	bl	#43632
 8011b8e: 40 f6 01 10                  	movw	r0, #2305
 8011b92: 69 46                        	mov	r1, sp
 8011b94: c2 f2 20 00                  	movt	r0, #8224
;     copy_nonoverlapping(src, dst, count)
 8011b98: 20 22                        	movs	r2, #32
 8011b9a: 44 f8 bd 0f                  	str	r0, [r4, #189]!
;         intrinsics::offset(self, count) as *mut T
 8011b9e: 20 1d                        	adds	r0, r4, #4
;     copy_nonoverlapping(src, dst, count)
 8011ba0: 0a f0 bb fb                  	bl	#42870
;             TlPacketType::AclData => {
 8011ba4: 10 2d                        	cmp	r5, #16
 8011ba6: 18 bf                        	it	ne
 8011ba8: 02 2d                        	cmpne	r5, #2
 8011baa: 17 d0                        	beq	#46 <_ZN4core3ops8function6FnOnce9call_once17h7acbba35a00b2f79E+0x82>
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 8011bac: 40 f2 00 00                  	movw	r0, #0
;     copy(src, dst, count)
 8011bb0: 21 46                        	mov	r1, r4
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 8011bb2: c2 f2 03 00                  	movt	r0, #8195
;     copy(src, dst, count)
 8011bb6: 40 f2 03 12                  	movw	r2, #259
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 8011bba: 45 68                        	ldr	r5, [r0, #4]
 8011bbc: 28 68                        	ldr	r0, [r5]
;         self as _
 8011bbe: 08 30                        	adds	r0, #8
;     copy(src, dst, count)
 8011bc0: 0a f0 ab fb                  	bl	#42838
;         let mut cmd_packet = &mut *(&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 8011bc4: 28 68                        	ldr	r0, [r5]
 8011bc6: 01 21                        	movs	r1, #1
;         cmd_packet.cmdserial.ty = TlPacketType::BleCmd as u8;
 8011bc8: 01 72                        	strb	r1, [r0, #8]
 8011bca: 40 f6 08 40                  	movw	r0, #3080
 8011bce: c5 f6 00 00                  	movt	r0, #22528
 8011bd2: 4f f4 80 31                  	mov.w	r1, #65536
;     intrinsics::volatile_store(dst, src);
 8011bd6: 01 60                        	str	r1, [r0]
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
 8011bd8: 0a b0                        	add	sp, #40
 8011bda: b0 bd                        	pop	{r4, r5, r7, pc}
 8011bdc: 40 f6 17 20                  	movw	r0, #2583
 8011be0: 13 21                        	movs	r1, #19
 8011be2: c0 f6 02 00                  	movt	r0, #2050
 8011be6: 04 f0 37 fc                  	bl	#18542
 8011bea: fe de                        	trap
;             Err(e) => unwrap_failed(msg, &e),
 8011bec: 4d f6 2c 30                  	movw	r0, #56108
 8011bf0: 4c f6 f4 43                  	movw	r3, #52468
 8011bf4: c0 f6 01 00                  	movt	r0, #2049
 8011bf8: c0 f6 01 03                  	movt	r3, #2049
 8011bfc: 6a 46                        	mov	r2, sp
 8011bfe: 16 21                        	movs	r1, #22
 8011c00: 04 f0 2f fc                  	bl	#18526
 8011c04: fe de                        	trap

08011c06 core::ops::function::FnOnce::call_once::ha0f56f88c0a293b3:
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
 8011c06: b0 b5                        	push	{r4, r5, r7, lr}
 8011c08: 02 af                        	add	r7, sp, #8
 8011c0a: 8a b0                        	sub	sp, #40
 8011c0c: 04 46                        	mov	r4, r0
;         let cmd = TlPacketType::try_from(cmd_code).map_err(|_| ())?;
 8011c0e: 01 20                        	movs	r0, #1
 8011c10: 0a f0 fe f9                  	bl	#41980
 8011c14: 42 28                        	cmp	r0, #66
 8011c16: 34 d0                        	beq	#104 <_ZN4core3ops8function6FnOnce9call_once17ha0f56f88c0a293b3E+0x80>
 8011c18: 05 46                        	mov	r5, r0
;         self.tx_buf = [0; TX_BUF_SIZE];
 8011c1a: 04 f1 c5 00                  	add.w	r0, r4, #197
 8011c1e: fb 21                        	movs	r1, #251
 8011c20: 0a f0 ed fc                  	bl	#43482
 8011c24: 48 f6 01 60                  	movw	r0, #36353
;             TlPacketType::AclData => {
 8011c28: 10 2d                        	cmp	r5, #16
 8011c2a: c0 f2 fc 40                  	movt	r0, #1276
;     copy_nonoverlapping(src, dst, count)
 8011c2e: 44 f8 bd 0f                  	str	r0, [r4, #189]!
 8011c32: 40 f2 03 20                  	movw	r0, #515
 8011c36: c0 f2 01 60                  	movt	r0, #1537
 8011c3a: 60 60                        	str	r0, [r4, #4]
;             TlPacketType::AclData => {
 8011c3c: 18 bf                        	it	ne
 8011c3e: 02 2d                        	cmpne	r5, #2
 8011c40: 17 d0                        	beq	#46 <_ZN4core3ops8function6FnOnce9call_once17ha0f56f88c0a293b3E+0x70>
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 8011c42: 40 f2 00 00                  	movw	r0, #0
;     copy(src, dst, count)
 8011c46: 21 46                        	mov	r1, r4
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 8011c48: c2 f2 03 00                  	movt	r0, #8195
;     copy(src, dst, count)
 8011c4c: 40 f2 03 12                  	movw	r2, #259
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 8011c50: 45 68                        	ldr	r5, [r0, #4]
 8011c52: 28 68                        	ldr	r0, [r5]
;         self as _
 8011c54: 08 30                        	adds	r0, #8
;     copy(src, dst, count)
 8011c56: 0a f0 60 fb                  	bl	#42688
;         let mut cmd_packet = &mut *(&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 8011c5a: 28 68                        	ldr	r0, [r5]
 8011c5c: 01 21                        	movs	r1, #1
;         cmd_packet.cmdserial.ty = TlPacketType::BleCmd as u8;
 8011c5e: 01 72                        	strb	r1, [r0, #8]
 8011c60: 40 f6 08 40                  	movw	r0, #3080
 8011c64: c5 f6 00 00                  	movt	r0, #22528
 8011c68: 4f f4 80 31                  	mov.w	r1, #65536
;     intrinsics::volatile_store(dst, src);
 8011c6c: 01 60                        	str	r1, [r0]
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
 8011c6e: 0a b0                        	add	sp, #40
 8011c70: b0 bd                        	pop	{r4, r5, r7, pc}
 8011c72: 40 f6 17 20                  	movw	r0, #2583
 8011c76: 13 21                        	movs	r1, #19
 8011c78: c0 f6 02 00                  	movt	r0, #2050
 8011c7c: 04 f0 ec fb                  	bl	#18392
 8011c80: fe de                        	trap
;             Err(e) => unwrap_failed(msg, &e),
 8011c82: 4d f6 76 30                  	movw	r0, #56182
 8011c86: 4c f6 d4 43                  	movw	r3, #52436
 8011c8a: c0 f6 01 00                  	movt	r0, #2049
 8011c8e: c0 f6 01 03                  	movt	r3, #2049
 8011c92: 6a 46                        	mov	r2, sp
 8011c94: 11 21                        	movs	r1, #17
 8011c96: 04 f0 e4 fb                  	bl	#18376
 8011c9a: fe de                        	trap

08011c9c core::ops::function::FnOnce::call_once::hbc384bb69001144a:
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
 8011c9c: f0 b5                        	push	{r4, r5, r6, r7, lr}
 8011c9e: 03 af                        	add	r7, sp, #12
 8011ca0: 4d f8 04 8d                  	str	r8, [sp, #-4]!
 8011ca4: 98 b0                        	sub	sp, #96
 8011ca6: 80 46                        	mov	r8, r0
;     copy_nonoverlapping(src, dst, count)
 8011ca8: 4c f6 7c 70                  	movw	r0, #53116
 8011cac: c0 f6 01 00                  	movt	r0, #2049
 8011cb0: 00 25                        	movs	r5, #0
 8011cb2: 90 e8 0e 00                  	ldm.w	r0, {r1, r2, r3}
 8011cb6: 0d f1 30 0c                  	add.w	r12, sp, #48
 8011cba: ee 46                        	mov	lr, sp
 8011cbc: ad f8 5c 50                  	strh.w	r5, [sp, #92]
 8011cc0: cd e9 15 55                  	strd	r5, r5, [sp, #84]
 8011cc4: cd e9 13 55                  	strd	r5, r5, [sp, #76]
 8011cc8: cd e9 11 55                  	strd	r5, r5, [sp, #68]
 8011ccc: 8c e8 0e 00                  	stm.w	r12, {r1, r2, r3}
 8011cd0: 0d f1 30 0c                  	add.w	r12, sp, #48
 8011cd4: c0 68                        	ldr	r0, [r0, #12]
;         ConfigDataLinkLayerOnlyBuilder { data }
 8011cd6: 62 46                        	mov	r2, r12
;     copy_nonoverlapping(src, dst, count)
 8011cd8: cd e9 0f 05                  	strd	r0, r5, [sp, #60]
;         ConfigDataLinkLayerOnlyBuilder { data }
 8011cdc: 79 ca                        	ldm	r2!, {r0, r3, r4, r5, r6}
 8011cde: ae e8 79 00                  	stm.w	lr!, {r0, r3, r4, r5, r6}
 8011ce2: 7b ca                        	ldm	r2!, {r0, r1, r3, r4, r5, r6}
 8011ce4: ae e8 7b 00                  	stm.w	lr!, {r0, r1, r3, r4, r5, r6}
;             let mut bytes = [0; $param_type::MAX_LENGTH];
 8011ce8: 2c 21                        	movs	r1, #44
;         ConfigDataLinkLayerOnlyBuilder { data }
 8011cea: 10 88                        	ldrh	r0, [r2]
 8011cec: ae f8 00 00                  	strh.w	r0, [lr]
;             let mut bytes = [0; $param_type::MAX_LENGTH];
 8011cf0: 0c f1 02 00                  	add.w	r0, r12, #2
 8011cf4: 0a f0 83 fc                  	bl	#43270
;     copy_nonoverlapping(src, dst, count)
 8011cf8: 9d e8 0f 00                  	ldm.w	sp, {r0, r1, r2, r3}
 8011cfc: 41 f2 18 06                  	movw	r6, #4120
 8011d00: cd f8 32 00                  	str.w	r0, [sp, #50]
;         let cmd = TlPacketType::try_from(cmd_code).map_err(|_| ())?;
 8011d04: 01 20                        	movs	r0, #1
;         bytes[0] = self.offset;
 8011d06: ad f8 30 60                  	strh.w	r6, [sp, #48]
;     copy_nonoverlapping(src, dst, count)
 8011d0a: cd f8 36 10                  	str.w	r1, [sp, #54]
 8011d0e: cd f8 3a 20                  	str.w	r2, [sp, #58]
 8011d12: cd f8 3e 30                  	str.w	r3, [sp, #62]
;         let cmd = TlPacketType::try_from(cmd_code).map_err(|_| ())?;
 8011d16: 0a f0 7b f9                  	bl	#41718
 8011d1a: 42 28                        	cmp	r0, #66
 8011d1c: 37 d0                        	beq	#110 <_ZN4core3ops8function6FnOnce9call_once17hbc384bb69001144aE+0xf6>
 8011d1e: 05 46                        	mov	r5, r0
;         self.tx_buf = [0; TX_BUF_SIZE];
 8011d20: 08 f1 d3 00                  	add.w	r0, r8, #211
 8011d24: ed 21                        	movs	r1, #237
 8011d26: 0a f0 6a fc                  	bl	#43220
 8011d2a: 40 f6 01 40                  	movw	r0, #3073
 8011d2e: 0c a9                        	add	r1, sp, #48
 8011d30: c1 f2 fc 20                  	movt	r0, #4860
;     copy_nonoverlapping(src, dst, count)
 8011d34: 12 22                        	movs	r2, #18
 8011d36: 48 f8 bd 0f                  	str	r0, [r8, #189]!
;         intrinsics::offset(self, count) as *mut T
 8011d3a: 08 f1 04 00                  	add.w	r0, r8, #4
;     copy_nonoverlapping(src, dst, count)
 8011d3e: 0a f0 ec fa                  	bl	#42456
;             TlPacketType::AclData => {
 8011d42: 10 2d                        	cmp	r5, #16
 8011d44: 18 bf                        	it	ne
 8011d46: 02 2d                        	cmpne	r5, #2
 8011d48: 19 d0                        	beq	#50 <_ZN4core3ops8function6FnOnce9call_once17hbc384bb69001144aE+0xe6>
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 8011d4a: 40 f2 00 00                  	movw	r0, #0
;     copy(src, dst, count)
 8011d4e: 41 46                        	mov	r1, r8
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 8011d50: c2 f2 03 00                  	movt	r0, #8195
;     copy(src, dst, count)
 8011d54: 40 f2 03 12                  	movw	r2, #259
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 8011d58: 44 68                        	ldr	r4, [r0, #4]
 8011d5a: 20 68                        	ldr	r0, [r4]
;         self as _
 8011d5c: 08 30                        	adds	r0, #8
;     copy(src, dst, count)
 8011d5e: 0a f0 dc fa                  	bl	#42424
;         let mut cmd_packet = &mut *(&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 8011d62: 20 68                        	ldr	r0, [r4]
 8011d64: 01 21                        	movs	r1, #1
;         cmd_packet.cmdserial.ty = TlPacketType::BleCmd as u8;
 8011d66: 01 72                        	strb	r1, [r0, #8]
 8011d68: 40 f6 08 40                  	movw	r0, #3080
 8011d6c: c5 f6 00 00                  	movt	r0, #22528
 8011d70: 4f f4 80 31                  	mov.w	r1, #65536
;     intrinsics::volatile_store(dst, src);
 8011d74: 01 60                        	str	r1, [r0]
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
 8011d76: 18 b0                        	add	sp, #96
 8011d78: 5d f8 04 8b                  	ldr	r8, [sp], #4
 8011d7c: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 8011d7e: 40 f6 17 20                  	movw	r0, #2583
 8011d82: 13 21                        	movs	r1, #19
 8011d84: c0 f6 02 00                  	movt	r0, #2050
 8011d88: 04 f0 66 fb                  	bl	#18124
 8011d8c: fe de                        	trap
;             Err(e) => unwrap_failed(msg, &e),
 8011d8e: 4d f6 b4 20                  	movw	r0, #55988
 8011d92: 4c f6 e4 43                  	movw	r3, #52452
 8011d96: 0c aa                        	add	r2, sp, #48
 8011d98: c0 f6 01 00                  	movt	r0, #2049
 8011d9c: c0 f6 01 03                  	movt	r3, #2049
 8011da0: 0f 21                        	movs	r1, #15
 8011da2: 04 f0 5e fb                  	bl	#18108
 8011da6: fe de                        	trap

08011da8 core::ops::function::FnOnce::call_once::hbd199eced7ac407a:
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
 8011da8: b0 b5                        	push	{r4, r5, r7, lr}
 8011daa: 02 af                        	add	r7, sp, #8
 8011dac: 98 b0                        	sub	sp, #96
 8011dae: 04 46                        	mov	r4, r0
;         DEVICE_PERIPHERALS = true;
 8011db0: 40 f2 08 20                  	movw	r0, #520
 8011db4: c2 f2 00 00                  	movt	r0, #8192
 8011db8: 01 21                        	movs	r1, #1
 8011dba: 01 70                        	strb	r1, [r0]
 8011dbc: 42 f2 00 01                  	movw	r1, #8192
 8011dc0: ce f2 04 01                  	movt	r1, #57348
 8011dc4: ed 20                        	movs	r0, #237
;     intrinsics::volatile_load(src)
 8011dc6: 0a 68                        	ldr	r2, [r1]
 8011dc8: 09 68                        	ldr	r1, [r1]
 8011dca: 47 f2 80 51                  	movw	r1, #30080
;         self.data
 8011dce: 8d f8 05 00                  	strb.w	r0, [sp, #5]
 8011dd2: c1 f6 ff 71                  	movt	r1, #8191
 8011dd6: 4f f4 dc 40                  	mov.w	r0, #28160
;         let uid64 = unsafe { *UID64_PTR };
 8011dda: 09 68                        	ldr	r1, [r1]
;         self.data
 8011ddc: ad f8 03 00                  	strh.w	r0, [sp, #3]
 8011de0: 8d f8 00 10                  	strb.w	r1, [sp]
;     bytes[2] = ((lhci_info.uid64 >> 16) & 0xff) as u8;
 8011de4: 08 0c                        	lsrs	r0, r1, #16
;         self.data
 8011de6: 8d f8 02 00                  	strb.w	r0, [sp, #2]
;     bytes[1] = ((lhci_info.uid64 >> 8) & 0xff) as u8;
 8011dea: 08 0a                        	lsrs	r0, r1, #8
;         self.data
 8011dec: 8d f8 01 00                  	strb.w	r0, [sp, #1]
 8011df0: 68 46                        	mov	r0, sp
 8011df2: 06 30                        	adds	r0, #6
 8011df4: 28 21                        	movs	r1, #40
 8011df6: 0a f0 02 fc                  	bl	#43012
 8011dfa: 0c a8                        	add	r0, sp, #48
;             let mut bytes = [0; $param_type::MAX_LENGTH];
 8011dfc: 2c 21                        	movs	r1, #44
 8011dfe: 02 30                        	adds	r0, #2
 8011e00: 0a f0 fd fb                  	bl	#43002
;     copy_nonoverlapping(src, dst, count)
 8011e04: bd f8 04 00                  	ldrh.w	r0, [sp, #4]
 8011e08: 40 f2 2e 62                  	movw	r2, #1582
 8011e0c: 00 99                        	ldr	r1, [sp]
 8011e0e: ad f8 36 00                  	strh.w	r0, [sp, #54]
;         let cmd = TlPacketType::try_from(cmd_code).map_err(|_| ())?;
 8011e12: 01 20                        	movs	r0, #1
;         bytes[0] = self.offset;
 8011e14: ad f8 30 20                  	strh.w	r2, [sp, #48]
;     copy_nonoverlapping(src, dst, count)
 8011e18: cd f8 32 10                  	str.w	r1, [sp, #50]
;         let cmd = TlPacketType::try_from(cmd_code).map_err(|_| ())?;
 8011e1c: 0a f0 f8 f8                  	bl	#41456
 8011e20: 42 28                        	cmp	r0, #66
 8011e22: 33 d0                        	beq	#102 <_ZN4core3ops8function6FnOnce9call_once17hbd199eced7ac407aE+0xe8>
 8011e24: 05 46                        	mov	r5, r0
;         self.tx_buf = [0; TX_BUF_SIZE];
 8011e26: 04 f1 c9 00                  	add.w	r0, r4, #201
 8011e2a: f7 21                        	movs	r1, #247
 8011e2c: 0a f0 e7 fb                  	bl	#42958
 8011e30: 40 f6 01 42                  	movw	r2, #3073
;     copy_nonoverlapping(src, dst, count)
 8011e34: dd e9 0c 01                  	ldrd	r0, r1, [sp, #48]
 8011e38: c0 f6 fc 02                  	movt	r2, #2300
;             TlPacketType::AclData => {
 8011e3c: 10 2d                        	cmp	r5, #16
;     copy_nonoverlapping(src, dst, count)
 8011e3e: 44 f8 bd 2f                  	str	r2, [r4, #189]!
 8011e42: a1 60                        	str	r1, [r4, #8]
 8011e44: 60 60                        	str	r0, [r4, #4]
;             TlPacketType::AclData => {
 8011e46: 18 bf                        	it	ne
 8011e48: 02 2d                        	cmpne	r5, #2
 8011e4a: 17 d0                        	beq	#46 <_ZN4core3ops8function6FnOnce9call_once17hbd199eced7ac407aE+0xd8>
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 8011e4c: 40 f2 00 00                  	movw	r0, #0
;     copy(src, dst, count)
 8011e50: 21 46                        	mov	r1, r4
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 8011e52: c2 f2 03 00                  	movt	r0, #8195
;     copy(src, dst, count)
 8011e56: 40 f2 03 12                  	movw	r2, #259
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 8011e5a: 45 68                        	ldr	r5, [r0, #4]
 8011e5c: 28 68                        	ldr	r0, [r5]
;         self as _
 8011e5e: 08 30                        	adds	r0, #8
;     copy(src, dst, count)
 8011e60: 0a f0 5b fa                  	bl	#42166
;         let mut cmd_packet = &mut *(&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 8011e64: 28 68                        	ldr	r0, [r5]
 8011e66: 01 21                        	movs	r1, #1
;         cmd_packet.cmdserial.ty = TlPacketType::BleCmd as u8;
 8011e68: 01 72                        	strb	r1, [r0, #8]
 8011e6a: 40 f6 08 40                  	movw	r0, #3080
 8011e6e: c5 f6 00 00                  	movt	r0, #22528
 8011e72: 4f f4 80 31                  	mov.w	r1, #65536
;     intrinsics::volatile_store(dst, src);
 8011e76: 01 60                        	str	r1, [r0]
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
 8011e78: 18 b0                        	add	sp, #96
 8011e7a: b0 bd                        	pop	{r4, r5, r7, pc}
 8011e7c: 40 f6 17 20                  	movw	r0, #2583
 8011e80: 13 21                        	movs	r1, #19
 8011e82: c0 f6 02 00                  	movt	r0, #2050
 8011e86: 04 f0 e7 fa                  	bl	#17870
 8011e8a: fe de                        	trap
;             Err(e) => unwrap_failed(msg, &e),
 8011e8c: 4d f6 a2 20                  	movw	r0, #55970
 8011e90: 4c f6 e4 43                  	movw	r3, #52452
 8011e94: 0c aa                        	add	r2, sp, #48
 8011e96: c0 f6 01 00                  	movt	r0, #2049
 8011e9a: c0 f6 01 03                  	movt	r3, #2049
 8011e9e: 12 21                        	movs	r1, #18
 8011ea0: 04 f0 df fa                  	bl	#17854
 8011ea4: fe de                        	trap

08011ea6 core::ops::function::FnOnce::call_once::hbf442ab47897001e:
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
 8011ea6: b0 b5                        	push	{r4, r5, r7, lr}
 8011ea8: 02 af                        	add	r7, sp, #8
 8011eaa: 8a b0                        	sub	sp, #40
 8011eac: 04 46                        	mov	r4, r0
;         let cmd = TlPacketType::try_from(cmd_code).map_err(|_| ())?;
 8011eae: 01 20                        	movs	r0, #1
 8011eb0: 0a f0 ae f8                  	bl	#41308
 8011eb4: 42 28                        	cmp	r0, #66
 8011eb6: 48 d0                        	beq	#144 <_ZN4core3ops8function6FnOnce9call_once17hbf442ab47897001eE+0xa8>
 8011eb8: 05 46                        	mov	r5, r0
;         self.tx_buf = [0; TX_BUF_SIZE];
 8011eba: 04 f1 d5 00                  	add.w	r0, r4, #213
 8011ebe: eb 21                        	movs	r1, #235
 8011ec0: 0a f0 9d fb                  	bl	#42810
 8011ec4: 48 f6 01 60                  	movw	r0, #36353
;             TlPacketType::AclData => {
 8011ec8: 10 2d                        	cmp	r5, #16
 8011eca: c1 f2 fc 40                  	movt	r0, #5372
;     copy_nonoverlapping(src, dst, count)
 8011ece: 44 f8 bd 0f                  	str	r0, [r4, #189]!
 8011ed2: 40 f2 00 10                  	movw	r0, #256
 8011ed6: c0 f2 01 20                  	movt	r0, #513
 8011eda: 60 61                        	str	r0, [r4, #20]
 8011edc: 46 f2 55 60                  	movw	r0, #26197
 8011ee0: c0 f6 00 20                  	movt	r0, #2560
 8011ee4: 20 61                        	str	r0, [r4, #16]
 8011ee6: 45 f2 44 50                  	movw	r0, #21828
 8011eea: c4 f2 66 40                  	movt	r0, #17510
 8011eee: e0 60                        	str	r0, [r4, #12]
 8011ef0: 40 f2 00 60                  	movw	r0, #1536
 8011ef4: c0 f2 2d 10                  	movt	r0, #301
 8011ef8: a0 60                        	str	r0, [r4, #8]
 8011efa: 41 f2 13 20                  	movw	r0, #4627
 8011efe: c4 f6 ff 40                  	movt	r0, #19711
 8011f02: 60 60                        	str	r0, [r4, #4]
;             TlPacketType::AclData => {
 8011f04: 18 bf                        	it	ne
 8011f06: 02 2d                        	cmpne	r5, #2
 8011f08: 17 d0                        	beq	#46 <_ZN4core3ops8function6FnOnce9call_once17hbf442ab47897001eE+0x98>
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 8011f0a: 40 f2 00 00                  	movw	r0, #0
;     copy(src, dst, count)
 8011f0e: 21 46                        	mov	r1, r4
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 8011f10: c2 f2 03 00                  	movt	r0, #8195
;     copy(src, dst, count)
 8011f14: 40 f2 03 12                  	movw	r2, #259
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 8011f18: 45 68                        	ldr	r5, [r0, #4]
 8011f1a: 28 68                        	ldr	r0, [r5]
;         self as _
 8011f1c: 08 30                        	adds	r0, #8
;     copy(src, dst, count)
 8011f1e: 0a f0 fc f9                  	bl	#41976
;         let mut cmd_packet = &mut *(&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 8011f22: 28 68                        	ldr	r0, [r5]
 8011f24: 01 21                        	movs	r1, #1
;         cmd_packet.cmdserial.ty = TlPacketType::BleCmd as u8;
 8011f26: 01 72                        	strb	r1, [r0, #8]
 8011f28: 40 f6 08 40                  	movw	r0, #3080
 8011f2c: c5 f6 00 00                  	movt	r0, #22528
 8011f30: 4f f4 80 31                  	mov.w	r1, #65536
;     intrinsics::volatile_store(dst, src);
 8011f34: 01 60                        	str	r1, [r0]
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
 8011f36: 0a b0                        	add	sp, #40
 8011f38: b0 bd                        	pop	{r4, r5, r7, pc}
 8011f3a: 40 f6 17 20                  	movw	r0, #2583
 8011f3e: 13 21                        	movs	r1, #19
 8011f40: c0 f6 02 00                  	movt	r0, #2050
 8011f44: 04 f0 88 fa                  	bl	#17680
 8011f48: fe de                        	trap
;             Err(e) => unwrap_failed(msg, &e),
 8011f4a: 4d f6 59 30                  	movw	r0, #56153
 8011f4e: 4c f6 d4 43                  	movw	r3, #52436
 8011f52: c0 f6 01 00                  	movt	r0, #2049
 8011f56: c0 f6 01 03                  	movt	r3, #2049
 8011f5a: 6a 46                        	mov	r2, sp
 8011f5c: 1d 21                        	movs	r1, #29
 8011f5e: 04 f0 80 fa                  	bl	#17664
 8011f62: fe de                        	trap

08011f64 core::ops::function::FnOnce::call_once::hc1a4b2c3882410db:
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
 8011f64: f0 b5                        	push	{r4, r5, r6, r7, lr}
 8011f66: 03 af                        	add	r7, sp, #12
 8011f68: 4d f8 04 8d                  	str	r8, [sp, #-4]!
 8011f6c: 98 b0                        	sub	sp, #96
 8011f6e: 80 46                        	mov	r8, r0
;     copy_nonoverlapping(src, dst, count)
 8011f70: 4c f6 8c 70                  	movw	r0, #53132
 8011f74: c0 f6 01 00                  	movt	r0, #2049
 8011f78: 00 25                        	movs	r5, #0
 8011f7a: 90 e8 0e 00                  	ldm.w	r0, {r1, r2, r3}
 8011f7e: 0d f1 30 0c                  	add.w	r12, sp, #48
 8011f82: ee 46                        	mov	lr, sp
 8011f84: ad f8 5c 50                  	strh.w	r5, [sp, #92]
 8011f88: cd e9 15 55                  	strd	r5, r5, [sp, #84]
 8011f8c: cd e9 13 55                  	strd	r5, r5, [sp, #76]
 8011f90: cd e9 11 55                  	strd	r5, r5, [sp, #68]
 8011f94: 8c e8 0e 00                  	stm.w	r12, {r1, r2, r3}
 8011f98: 0d f1 30 0c                  	add.w	r12, sp, #48
 8011f9c: c0 68                        	ldr	r0, [r0, #12]
;         ConfigDataIdentityRootBuilder { data }
 8011f9e: 62 46                        	mov	r2, r12
;     copy_nonoverlapping(src, dst, count)
 8011fa0: cd e9 0f 05                  	strd	r0, r5, [sp, #60]
;         ConfigDataIdentityRootBuilder { data }
 8011fa4: 79 ca                        	ldm	r2!, {r0, r3, r4, r5, r6}
 8011fa6: ae e8 79 00                  	stm.w	lr!, {r0, r3, r4, r5, r6}
 8011faa: 7b ca                        	ldm	r2!, {r0, r1, r3, r4, r5, r6}
 8011fac: ae e8 7b 00                  	stm.w	lr!, {r0, r1, r3, r4, r5, r6}
;             let mut bytes = [0; $param_type::MAX_LENGTH];
 8011fb0: 2c 21                        	movs	r1, #44
;         ConfigDataIdentityRootBuilder { data }
 8011fb2: 10 88                        	ldrh	r0, [r2]
 8011fb4: ae f8 00 00                  	strh.w	r0, [lr]
;             let mut bytes = [0; $param_type::MAX_LENGTH];
 8011fb8: 0c f1 02 00                  	add.w	r0, r12, #2
 8011fbc: 0a f0 1f fb                  	bl	#42558
;     copy_nonoverlapping(src, dst, count)
 8011fc0: 9d e8 0f 00                  	ldm.w	sp, {r0, r1, r2, r3}
 8011fc4: 41 f2 08 06                  	movw	r6, #4104
 8011fc8: cd f8 32 00                  	str.w	r0, [sp, #50]
;         let cmd = TlPacketType::try_from(cmd_code).map_err(|_| ())?;
 8011fcc: 01 20                        	movs	r0, #1
;         bytes[0] = self.offset;
 8011fce: ad f8 30 60                  	strh.w	r6, [sp, #48]
;     copy_nonoverlapping(src, dst, count)
 8011fd2: cd f8 36 10                  	str.w	r1, [sp, #54]
 8011fd6: cd f8 3a 20                  	str.w	r2, [sp, #58]
 8011fda: cd f8 3e 30                  	str.w	r3, [sp, #62]
;         let cmd = TlPacketType::try_from(cmd_code).map_err(|_| ())?;
 8011fde: 0a f0 17 f8                  	bl	#41006
 8011fe2: 42 28                        	cmp	r0, #66
 8011fe4: 37 d0                        	beq	#110 <_ZN4core3ops8function6FnOnce9call_once17hc1a4b2c3882410dbE+0xf6>
 8011fe6: 05 46                        	mov	r5, r0
;         self.tx_buf = [0; TX_BUF_SIZE];
 8011fe8: 08 f1 d3 00                  	add.w	r0, r8, #211
 8011fec: ed 21                        	movs	r1, #237
 8011fee: 0a f0 06 fb                  	bl	#42508
 8011ff2: 40 f6 01 40                  	movw	r0, #3073
 8011ff6: 0c a9                        	add	r1, sp, #48
 8011ff8: c1 f2 fc 20                  	movt	r0, #4860
;     copy_nonoverlapping(src, dst, count)
 8011ffc: 12 22                        	movs	r2, #18
 8011ffe: 48 f8 bd 0f                  	str	r0, [r8, #189]!
;         intrinsics::offset(self, count) as *mut T
 8012002: 08 f1 04 00                  	add.w	r0, r8, #4
;     copy_nonoverlapping(src, dst, count)
 8012006: 0a f0 88 f9                  	bl	#41744
;             TlPacketType::AclData => {
 801200a: 10 2d                        	cmp	r5, #16
 801200c: 18 bf                        	it	ne
 801200e: 02 2d                        	cmpne	r5, #2
 8012010: 19 d0                        	beq	#50 <_ZN4core3ops8function6FnOnce9call_once17hc1a4b2c3882410dbE+0xe6>
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 8012012: 40 f2 00 00                  	movw	r0, #0
;     copy(src, dst, count)
 8012016: 41 46                        	mov	r1, r8
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 8012018: c2 f2 03 00                  	movt	r0, #8195
;     copy(src, dst, count)
 801201c: 40 f2 03 12                  	movw	r2, #259
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 8012020: 44 68                        	ldr	r4, [r0, #4]
 8012022: 20 68                        	ldr	r0, [r4]
;         self as _
 8012024: 08 30                        	adds	r0, #8
;     copy(src, dst, count)
 8012026: 0a f0 78 f9                  	bl	#41712
;         let mut cmd_packet = &mut *(&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 801202a: 20 68                        	ldr	r0, [r4]
 801202c: 01 21                        	movs	r1, #1
;         cmd_packet.cmdserial.ty = TlPacketType::BleCmd as u8;
 801202e: 01 72                        	strb	r1, [r0, #8]
 8012030: 40 f6 08 40                  	movw	r0, #3080
 8012034: c5 f6 00 00                  	movt	r0, #22528
 8012038: 4f f4 80 31                  	mov.w	r1, #65536
;     intrinsics::volatile_store(dst, src);
 801203c: 01 60                        	str	r1, [r0]
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
 801203e: 18 b0                        	add	sp, #96
 8012040: 5d f8 04 8b                  	ldr	r8, [sp], #4
 8012044: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 8012046: 40 f6 17 20                  	movw	r0, #2583
 801204a: 13 21                        	movs	r1, #19
 801204c: c0 f6 02 00                  	movt	r0, #2050
 8012050: 04 f0 02 fa                  	bl	#17412
 8012054: fe de                        	trap
;             Err(e) => unwrap_failed(msg, &e),
 8012056: 4d f6 c3 20                  	movw	r0, #56003
 801205a: 4c f6 e4 43                  	movw	r3, #52452
 801205e: 0c aa                        	add	r2, sp, #48
 8012060: c0 f6 01 00                  	movt	r0, #2049
 8012064: c0 f6 01 03                  	movt	r3, #2049
 8012068: 0f 21                        	movs	r1, #15
 801206a: 04 f0 fa f9                  	bl	#17396
 801206e: fe de                        	trap

08012070 core::ops::function::FnOnce::call_once::hd6657b4f9aa0a124:
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
 8012070: f0 b5                        	push	{r4, r5, r6, r7, lr}
 8012072: 03 af                        	add	r7, sp, #12
 8012074: 4d f8 04 8d                  	str	r8, [sp, #-4]!
 8012078: 82 b0                        	sub	sp, #8
 801207a: 04 46                        	mov	r4, r0
;                 service_handle: cx.hap_protocol_service_handle.unwrap(),
 801207c: 88 89                        	ldrh	r0, [r1, #12]
;             Some(val) => val,
 801207e: 00 28                        	cmp	r0, #0
 8012080: 1e bf                        	ittt	ne
 8012082: 0e 46                        	movne	r6, r1
;                 characteristic_handle: cx.hap_protocol_service_instance_handle.unwrap(),
 8012084: 88 8a                        	ldrhne	r0, [r1, #20]
;             Some(val) => val,
 8012086: 00 28                        	cmpne	r0, #0
 8012088: 07 d1                        	bne	#14 <_ZN4core3ops8function6FnOnce9call_once17hd6657b4f9aa0a124E+0x2e>
 801208a: 40 f6 44 20                  	movw	r0, #2628
 801208e: 2b 21                        	movs	r1, #43
 8012090: c0 f6 02 00                  	movt	r0, #2050
 8012094: 04 f0 e0 f9                  	bl	#17344
 8012098: fe de                        	trap
;         let cmd = TlPacketType::try_from(cmd_code).map_err(|_| ())?;
 801209a: 01 20                        	movs	r0, #1
 801209c: b6 f8 0e 80                  	ldrh.w	r8, [r6, #14]
 80120a0: 09 f0 b6 ff                  	bl	#40812
 80120a4: 42 28                        	cmp	r0, #66
 80120a6: 3a d0                        	beq	#116 <_ZN4core3ops8function6FnOnce9call_once17hd6657b4f9aa0a124E+0xb2>
 80120a8: 05 46                        	mov	r5, r0
;         self.tx_buf = [0; TX_BUF_SIZE];
 80120aa: 04 f1 c9 00                  	add.w	r0, r4, #201
 80120ae: f7 21                        	movs	r1, #247
;                 characteristic_handle: cx.hap_protocol_service_instance_handle.unwrap(),
 80120b0: f6 8a                        	ldrh	r6, [r6, #22]
;         self.tx_buf = [0; TX_BUF_SIZE];
 80120b2: 0a f0 a4 fa                  	bl	#42312
 80120b6: 40 f2 01 60                  	movw	r0, #1537
;             TlPacketType::AclData => {
 80120ba: 10 2d                        	cmp	r5, #16
 80120bc: c0 f6 fd 00                  	movt	r0, #2301
;     copy_nonoverlapping(src, dst, count)
 80120c0: 44 f8 bd 0f                  	str	r0, [r4, #189]!
 80120c4: 40 f2 00 20                  	movw	r0, #512
 80120c8: c1 f2 00 00                  	movt	r0, #4096
 80120cc: a0 60                        	str	r0, [r4, #8]
 80120ce: 48 ea 06 40                  	orr.w	r0, r8, r6, lsl #16
 80120d2: 60 60                        	str	r0, [r4, #4]
;             TlPacketType::AclData => {
 80120d4: 18 bf                        	it	ne
 80120d6: 02 2d                        	cmpne	r5, #2
 80120d8: 19 d0                        	beq	#50 <_ZN4core3ops8function6FnOnce9call_once17hd6657b4f9aa0a124E+0xa2>
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 80120da: 40 f2 00 00                  	movw	r0, #0
;     copy(src, dst, count)
 80120de: 21 46                        	mov	r1, r4
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 80120e0: c2 f2 03 00                  	movt	r0, #8195
;     copy(src, dst, count)
 80120e4: 40 f2 03 12                  	movw	r2, #259
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 80120e8: 45 68                        	ldr	r5, [r0, #4]
 80120ea: 28 68                        	ldr	r0, [r5]
;         self as _
 80120ec: 08 30                        	adds	r0, #8
;     copy(src, dst, count)
 80120ee: 0a f0 14 f9                  	bl	#41512
;         let mut cmd_packet = &mut *(&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 80120f2: 28 68                        	ldr	r0, [r5]
 80120f4: 01 21                        	movs	r1, #1
;         cmd_packet.cmdserial.ty = TlPacketType::BleCmd as u8;
 80120f6: 01 72                        	strb	r1, [r0, #8]
 80120f8: 40 f6 08 40                  	movw	r0, #3080
 80120fc: c5 f6 00 00                  	movt	r0, #22528
 8012100: 4f f4 80 31                  	mov.w	r1, #65536
;     intrinsics::volatile_store(dst, src);
 8012104: 01 60                        	str	r1, [r0]
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
 8012106: 02 b0                        	add	sp, #8
 8012108: 5d f8 04 8b                  	ldr	r8, [sp], #4
 801210c: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 801210e: 40 f6 17 20                  	movw	r0, #2583
 8012112: 13 21                        	movs	r1, #19
 8012114: c0 f6 02 00                  	movt	r0, #2050
 8012118: 04 f0 9e f9                  	bl	#17212
 801211c: fe de                        	trap
;             Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
 801211e: 40 f6 6f 20                  	movw	r0, #2671
 8012122: 4c f6 34 53                  	movw	r3, #52532
 8012126: a7 f1 11 02                  	sub.w	r2, r7, #17
 801212a: c0 f6 02 00                  	movt	r0, #2050
 801212e: c0 f6 01 03                  	movt	r3, #2049
 8012132: 2b 21                        	movs	r1, #43
 8012134: 04 f0 95 f9                  	bl	#17194
 8012138: fe de                        	trap

0801213a core::ops::function::FnOnce::call_once::hd9d66dd0eb00aac1:
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
 801213a: b0 b5                        	push	{r4, r5, r7, lr}
 801213c: 02 af                        	add	r7, sp, #8
 801213e: 8a b0                        	sub	sp, #40
 8012140: 04 46                        	mov	r4, r0
;             let service = AddServiceParameters {
 8012142: 4c f6 cc 70                  	movw	r0, #53196
 8012146: c0 f6 01 00                  	movt	r0, #2049
 801214a: 0d f1 04 0c                  	add.w	r12, sp, #4
 801214e: d0 f8 03 10                  	ldr.w	r1, [r0, #3]
 8012152: 00 25                        	movs	r5, #0
 8012154: d0 f8 07 20                  	ldr.w	r2, [r0, #7]
 8012158: d0 f8 0b 30                  	ldr.w	r3, [r0, #11]
 801215c: c0 7b                        	ldrb	r0, [r0, #15]
 801215e: 8d f8 10 00                  	strb.w	r0, [sp, #16]
 8012162: 8c e8 0e 00                  	stm.w	r12, {r1, r2, r3}
;     copy_nonoverlapping(src, dst, count)
 8012166: 0d f1 18 0c                  	add.w	r12, sp, #24
;             let mut bytes = [0; $param_type::MAX_LENGTH];
 801216a: cd f8 23 50                  	str.w	r5, [sp, #35]
;     copy_nonoverlapping(src, dst, count)
 801216e: 8c e8 26 00                  	stm.w	r12, {r1, r2, r5}
 8012172: 49 f2 02 11                  	movw	r1, #37122
 8012176: c7 f2 52 61                  	movt	r1, #30290
 801217a: 8d f8 24 00                  	strb.w	r0, [sp, #36]
 801217e: 41 f2 01 40                  	movw	r0, #5121
;         bytes[next] = self.service_type as u8;
 8012182: ad f8 25 00                  	strh.w	r0, [sp, #37]
;         let cmd = TlPacketType::try_from(cmd_code).map_err(|_| ())?;
 8012186: 01 20                        	movs	r0, #1
;                 bytes[0] = 0x02;
 8012188: 05 91                        	str	r1, [sp, #20]
;     copy_nonoverlapping(src, dst, count)
 801218a: 08 93                        	str	r3, [sp, #32]
;         let cmd = TlPacketType::try_from(cmd_code).map_err(|_| ())?;
 801218c: 09 f0 40 ff                  	bl	#40576
 8012190: 42 28                        	cmp	r0, #66
 8012192: 34 d0                        	beq	#104 <_ZN4core3ops8function6FnOnce9call_once17hd9d66dd0eb00aac1E+0xc8>
 8012194: 05 46                        	mov	r5, r0
;         self.tx_buf = [0; TX_BUF_SIZE];
 8012196: 04 f1 d4 00                  	add.w	r0, r4, #212
 801219a: ec 21                        	movs	r1, #236
 801219c: 0a f0 2f fa                  	bl	#42078
 80121a0: 40 f2 01 20                  	movw	r0, #513
 80121a4: 05 a9                        	add	r1, sp, #20
 80121a6: c1 f2 fd 30                  	movt	r0, #5117
;     copy_nonoverlapping(src, dst, count)
 80121aa: 13 22                        	movs	r2, #19
 80121ac: 44 f8 bd 0f                  	str	r0, [r4, #189]!
;         intrinsics::offset(self, count) as *mut T
 80121b0: 20 1d                        	adds	r0, r4, #4
;     copy_nonoverlapping(src, dst, count)
 80121b2: 0a f0 b2 f8                  	bl	#41316
;             TlPacketType::AclData => {
 80121b6: 10 2d                        	cmp	r5, #16
 80121b8: 18 bf                        	it	ne
 80121ba: 02 2d                        	cmpne	r5, #2
 80121bc: 17 d0                        	beq	#46 <_ZN4core3ops8function6FnOnce9call_once17hd9d66dd0eb00aac1E+0xb8>
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 80121be: 40 f2 00 00                  	movw	r0, #0
;     copy(src, dst, count)
 80121c2: 21 46                        	mov	r1, r4
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 80121c4: c2 f2 03 00                  	movt	r0, #8195
;     copy(src, dst, count)
 80121c8: 40 f2 03 12                  	movw	r2, #259
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 80121cc: 45 68                        	ldr	r5, [r0, #4]
 80121ce: 28 68                        	ldr	r0, [r5]
;         self as _
 80121d0: 08 30                        	adds	r0, #8
;     copy(src, dst, count)
 80121d2: 0a f0 a2 f8                  	bl	#41284
;         let mut cmd_packet = &mut *(&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 80121d6: 28 68                        	ldr	r0, [r5]
 80121d8: 01 21                        	movs	r1, #1
;         cmd_packet.cmdserial.ty = TlPacketType::BleCmd as u8;
 80121da: 01 72                        	strb	r1, [r0, #8]
 80121dc: 40 f6 08 40                  	movw	r0, #3080
 80121e0: c5 f6 00 00                  	movt	r0, #22528
 80121e4: 4f f4 80 31                  	mov.w	r1, #65536
;     intrinsics::volatile_store(dst, src);
 80121e8: 01 60                        	str	r1, [r0]
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
 80121ea: 0a b0                        	add	sp, #40
 80121ec: b0 bd                        	pop	{r4, r5, r7, pc}
 80121ee: 40 f6 17 20                  	movw	r0, #2583
 80121f2: 13 21                        	movs	r1, #19
 80121f4: c0 f6 02 00                  	movt	r0, #2050
 80121f8: 04 f0 2e f9                  	bl	#16988
 80121fc: fe de                        	trap
;             Err(e) => unwrap_failed(msg, &e),
 80121fe: 4d f6 1e 30                  	movw	r0, #56094
 8012202: 4c f6 e4 43                  	movw	r3, #52452
 8012206: 05 aa                        	add	r2, sp, #20
 8012208: c0 f6 01 00                  	movt	r0, #2049
 801220c: c0 f6 01 03                  	movt	r3, #2049
 8012210: 0e 21                        	movs	r1, #14
 8012212: 04 f0 26 f9                  	bl	#16972
 8012216: fe de                        	trap

08012218 core::ops::function::FnOnce::call_once::he06717cc187f4138:
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
 8012218: f0 b5                        	push	{r4, r5, r6, r7, lr}
 801221a: 03 af                        	add	r7, sp, #12
 801221c: 4d f8 04 bd                  	str	r11, [sp, #-4]!
 8012220: 82 b0                        	sub	sp, #8
 8012222: 04 46                        	mov	r4, r0
;         let cmd = TlPacketType::try_from(cmd_code).map_err(|_| ())?;
 8012224: 01 20                        	movs	r0, #1
 8012226: 01 26                        	movs	r6, #1
 8012228: 09 f0 f2 fe                  	bl	#40420
 801222c: 42 28                        	cmp	r0, #66
 801222e: 35 d0                        	beq	#106 <_ZN4core3ops8function6FnOnce9call_once17he06717cc187f4138E+0x88>
 8012230: 05 46                        	mov	r5, r0
;         self.tx_buf = [0; TX_BUF_SIZE];
 8012232: 04 f1 c4 00                  	add.w	r0, r4, #196
 8012236: fc 21                        	movs	r1, #252
 8012238: 0a f0 e1 f9                  	bl	#41922
 801223c: 48 f6 01 20                  	movw	r0, #35329
;             TlPacketType::AclData => {
 8012240: 10 2d                        	cmp	r5, #16
 8012242: c0 f2 fc 30                  	movt	r0, #1020
;     copy_nonoverlapping(src, dst, count)
 8012246: 44 f8 bd 0f                  	str	r0, [r4, #189]!
 801224a: 4f f0 07 00                  	mov.w	r0, #7
 801224e: a0 71                        	strb	r0, [r4, #6]
 8012250: a6 80                        	strh	r6, [r4, #4]
;             TlPacketType::AclData => {
 8012252: 18 bf                        	it	ne
 8012254: 02 2d                        	cmpne	r5, #2
 8012256: 19 d0                        	beq	#50 <_ZN4core3ops8function6FnOnce9call_once17he06717cc187f4138E+0x78>
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 8012258: 40 f2 00 00                  	movw	r0, #0
;     copy(src, dst, count)
 801225c: 21 46                        	mov	r1, r4
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 801225e: c2 f2 03 00                  	movt	r0, #8195
;     copy(src, dst, count)
 8012262: 40 f2 03 12                  	movw	r2, #259
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 8012266: 45 68                        	ldr	r5, [r0, #4]
 8012268: 28 68                        	ldr	r0, [r5]
;         self as _
 801226a: 08 30                        	adds	r0, #8
;     copy(src, dst, count)
 801226c: 0a f0 55 f8                  	bl	#41130
;         let mut cmd_packet = &mut *(&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 8012270: 28 68                        	ldr	r0, [r5]
 8012272: 01 21                        	movs	r1, #1
;         cmd_packet.cmdserial.ty = TlPacketType::BleCmd as u8;
 8012274: 01 72                        	strb	r1, [r0, #8]
 8012276: 40 f6 08 40                  	movw	r0, #3080
 801227a: c5 f6 00 00                  	movt	r0, #22528
 801227e: 4f f4 80 31                  	mov.w	r1, #65536
;     intrinsics::volatile_store(dst, src);
 8012282: 01 60                        	str	r1, [r0]
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
 8012284: 02 b0                        	add	sp, #8
 8012286: 5d f8 04 bb                  	ldr	r11, [sp], #4
 801228a: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 801228c: 40 f6 17 20                  	movw	r0, #2583
 8012290: 13 21                        	movs	r1, #19
 8012292: c0 f6 02 00                  	movt	r0, #2050
 8012296: 04 f0 df f8                  	bl	#16830
 801229a: fe de                        	trap
;             Err(e) => unwrap_failed(msg, &e),
 801229c: 4c f6 dc 30                  	movw	r0, #52188
 80122a0: 4c f6 e4 43                  	movw	r3, #52452
 80122a4: a7 f1 11 02                  	sub.w	r2, r7, #17
 80122a8: c0 f6 01 00                  	movt	r0, #2049
 80122ac: c0 f6 01 03                  	movt	r3, #2049
 80122b0: 08 21                        	movs	r1, #8
 80122b2: 04 f0 d6 f8                  	bl	#16812
 80122b6: fe de                        	trap

080122b8 core::ops::function::FnOnce::call_once::he0b13fc6dd591f0d:
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
 80122b8: 80 b5                        	push	{r7, lr}
 80122ba: 6f 46                        	mov	r7, sp
 80122bc: 8a b0                        	sub	sp, #40
 80122be: 8a 89                        	ldrh	r2, [r1, #12]
;             Some(val) => val,
 80122c0: 8a b3                        	cbz	r2, #98
 80122c2: c9 89                        	ldrh	r1, [r1, #14]
 80122c4: 0a 22                        	movs	r2, #10
;             rc.add_characteristic(&AddCharacteristicParameters {
 80122c6: ad f8 08 10                  	strh.w	r1, [sp, #8]
 80122ca: 00 21                        	movs	r1, #0
 80122cc: c1 f2 00 02                  	movt	r2, #4096
 80122d0: ad f8 20 10                  	strh.w	r1, [sp, #32]
 80122d4: 4c f6 ac 71                  	movw	r1, #53164
 80122d8: 07 92                        	str	r2, [sp, #28]
 80122da: 01 22                        	movs	r2, #1
 80122dc: c0 f6 01 01                  	movt	r1, #2049
 80122e0: 8d f8 0a 20                  	strb.w	r2, [sp, #10]
 80122e4: 91 e8 0c 50                  	ldm.w	r1, {r2, r3, r12, lr}
 80122e8: 06 21                        	movs	r1, #6
 80122ea: 01 91                        	str	r1, [sp, #4]
 80122ec: 01 a9                        	add	r1, sp, #4
 80122ee: cd f8 0b 20                  	str.w	r2, [sp, #11]
 80122f2: cd f8 0f 30                  	str.w	r3, [sp, #15]
 80122f6: cd f8 13 c0                  	str.w	r12, [sp, #19]
 80122fa: cd f8 17 e0                  	str.w	lr, [sp, #23]
 80122fe: 06 f0 c4 fa                  	bl	#25992
 8012302: c0 b2                        	uxtb	r0, r0
;             Ok(t) => t,
 8012304: 02 28                        	cmp	r0, #2
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
 8012306: 04 bf                        	itt	eq
 8012308: 0a b0                        	addeq	sp, #40
 801230a: 80 bd                        	popeq	{r7, pc}
;             Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
 801230c: 40 f6 6f 20                  	movw	r0, #2671
 8012310: 4c f6 e4 43                  	movw	r3, #52452
 8012314: 7a 1e                        	subs	r2, r7, #1
 8012316: c0 f6 02 00                  	movt	r0, #2050
 801231a: c0 f6 01 03                  	movt	r3, #2049
 801231e: 2b 21                        	movs	r1, #43
 8012320: 04 f0 9f f8                  	bl	#16702
 8012324: fe de                        	trap
;             None => expect_failed(msg),
 8012326: 4d f6 ed 20                  	movw	r0, #56045
 801232a: 18 21                        	movs	r1, #24
 801232c: c0 f6 01 00                  	movt	r0, #2049
 8012330: 04 f0 92 f8                  	bl	#16676
 8012334: fe de                        	trap

08012336 _$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$::write_char::h6b5946b6ebc6c3f4:
;     fn write_char(&mut self, c: char) -> Result {
 8012336: 81 b0                        	sub	sp, #4
 8012338: 00 20                        	movs	r0, #0
;     if code < MAX_ONE_B {
 801233a: 80 29                        	cmp	r1, #128
;         self.write_str(c.encode_utf8(&mut [0; 4]))
 801233c: 00 90                        	str	r0, [sp]
;     if code < MAX_ONE_B {
 801233e: 04 d2                        	bhs	#8 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h6b5946b6ebc6c3f4E+0x18>
;             *a = code as u8;
 8012340: 8d f8 00 10                  	strb.w	r1, [sp]
 8012344: 68 46                        	mov	r0, sp
 8012346: 01 22                        	movs	r2, #1
 8012348: 37 e0                        	b	#110 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h6b5946b6ebc6c3f4E+0x88>
;     } else if code < MAX_TWO_B {
 801234a: b1 f5 00 6f                  	cmp.w	r1, #2048
 801234e: 0c d2                        	bhs	#24 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h6b5946b6ebc6c3f4E+0x38>
 8012350: 02 22                        	movs	r2, #2
;             *b = (code & 0x3F) as u8 | TAG_CONT;
 8012352: 08 46                        	mov	r0, r1
 8012354: 62 f3 9f 10                  	bfi	r0, r2, #6, #26
 8012358: 8d f8 01 00                  	strb.w	r0, [sp, #1]
 801235c: c0 20                        	movs	r0, #192
;             *a = (code >> 6 & 0x1F) as u8 | TAG_TWO_B;
 801235e: 40 ea 91 10                  	orr.w	r0, r0, r1, lsr #6
 8012362: 8d f8 00 00                  	strb.w	r0, [sp]
 8012366: 68 46                        	mov	r0, sp
 8012368: 27 e0                        	b	#78 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h6b5946b6ebc6c3f4E+0x88>
 801236a: 02 22                        	movs	r2, #2
;             *d = (code & 0x3F) as u8 | TAG_CONT;
 801236c: 0b 46                        	mov	r3, r1
 801236e: 62 f3 9f 13                  	bfi	r3, r2, #6, #26
 8012372: 68 46                        	mov	r0, sp
 8012374: b1 f5 80 3f                  	cmp.w	r1, #65536
 8012378: 0d d2                        	bhs	#26 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h6b5946b6ebc6c3f4E+0x64>
;             *c = (code & 0x3F) as u8 | TAG_CONT;
 801237a: 8d f8 02 30                  	strb.w	r3, [sp, #2]
;             *b = (code >> 6 & 0x3F) as u8 | TAG_CONT;
 801237e: 8b 09                        	lsrs	r3, r1, #6
 8012380: 62 f3 9f 13                  	bfi	r3, r2, #6, #26
 8012384: e0 22                        	movs	r2, #224
;             *a = (code >> 12 & 0x0F) as u8 | TAG_THREE_B;
 8012386: 42 ea 11 31                  	orr.w	r1, r2, r1, lsr #12
;             *b = (code >> 6 & 0x3F) as u8 | TAG_CONT;
 801238a: 8d f8 01 30                  	strb.w	r3, [sp, #1]
;             *a = (code >> 12 & 0x0F) as u8 | TAG_THREE_B;
 801238e: 8d f8 00 10                  	strb.w	r1, [sp]
 8012392: 03 22                        	movs	r2, #3
 8012394: 11 e0                        	b	#34 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h6b5946b6ebc6c3f4E+0x88>
;             *d = (code & 0x3F) as u8 | TAG_CONT;
 8012396: 8d f8 03 30                  	strb.w	r3, [sp, #3]
;             *c = (code >> 6 & 0x3F) as u8 | TAG_CONT;
 801239a: 8b 09                        	lsrs	r3, r1, #6
 801239c: 62 f3 9f 13                  	bfi	r3, r2, #6, #26
 80123a0: 8d f8 02 30                  	strb.w	r3, [sp, #2]
;             *b = (code >> 12 & 0x3F) as u8 | TAG_CONT;
 80123a4: 0b 0b                        	lsrs	r3, r1, #12
 80123a6: 62 f3 9f 13                  	bfi	r3, r2, #6, #26
 80123aa: f0 22                        	movs	r2, #240
;             *a = (code >> 18 & 0x07) as u8 | TAG_FOUR_B;
 80123ac: 42 ea 91 41                  	orr.w	r1, r2, r1, lsr #18
 80123b0: 04 22                        	movs	r2, #4
;             *b = (code >> 12 & 0x3F) as u8 | TAG_CONT;
 80123b2: 8d f8 01 30                  	strb.w	r3, [sp, #1]
;             *a = (code >> 18 & 0x07) as u8 | TAG_FOUR_B;
 80123b6: 8d f8 00 10                  	strb.w	r1, [sp]
;         intrinsics::offset(self, count)
 80123ba: 00 eb 02 0c                  	add.w	r12, r0, r2
 80123be: 43 f6 1c 02                  	movw	r2, #14364
 80123c2: c4 f2 01 02                  	movt	r2, #16385
 80123c6: 03 e0                        	b	#6 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h6b5946b6ebc6c3f4E+0x9e>
;         intrinsics::offset(self, count) as *mut T
 80123c8: 01 30                        	adds	r0, #1
;     intrinsics::volatile_store(dst, src);
 80123ca: 13 73                        	strb	r3, [r2, #12]
;                     if is_empty!(self) {
 80123cc: 60 45                        	cmp	r0, r12
 80123ce: 0e d0                        	beq	#28 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h6b5946b6ebc6c3f4E+0xbc>
;             accum = f(accum, x)?;
 80123d0: 03 78                        	ldrb	r3, [r0]
;     intrinsics::volatile_load(src)
 80123d2: 11 68                        	ldr	r1, [r2]
;     if isr.txe().bit_is_set() {
 80123d4: 09 06                        	lsls	r1, r1, #24
 80123d6: f7 d4                        	bmi	#-18 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h6b5946b6ebc6c3f4E+0x96>
;     intrinsics::volatile_load(src)
 80123d8: 11 68                        	ldr	r1, [r2]
;     if isr.txe().bit_is_set() {
 80123da: 09 06                        	lsls	r1, r1, #24
;     intrinsics::volatile_load(src)
 80123dc: 5c bf                        	itt	pl
 80123de: 11 68                        	ldrpl	r1, [r2]
;     if isr.txe().bit_is_set() {
 80123e0: 5f ea 01 61                  	lslspl.w	r1, r1, #24
 80123e4: f0 d4                        	bmi	#-32 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h6b5946b6ebc6c3f4E+0x96>
;     intrinsics::volatile_load(src)
 80123e6: 11 68                        	ldr	r1, [r2]
;     if isr.txe().bit_is_set() {
 80123e8: 09 06                        	lsls	r1, r1, #24
 80123ea: f2 d5                        	bpl	#-28 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h6b5946b6ebc6c3f4E+0xa0>
 80123ec: ec e7                        	b	#-40 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h6b5946b6ebc6c3f4E+0x96>
;     }
 80123ee: 00 20                        	movs	r0, #0
 80123f0: 01 b0                        	add	sp, #4
 80123f2: 70 47                        	bx	lr

080123f4 _$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$::write_fmt::h8063289decd58614:
;     fn write_fmt(&mut self, args: Arguments<'_>) -> Result {
 80123f4: f0 b5                        	push	{r4, r5, r6, r7, lr}
 80123f6: 03 af                        	add	r7, sp, #12
 80123f8: 4d f8 04 bd                  	str	r11, [sp, #-4]!
 80123fc: 88 b0                        	sub	sp, #32
;         (**self).write_fmt(args)
 80123fe: 00 68                        	ldr	r0, [r0]
 8012400: 02 aa                        	add	r2, sp, #8
 8012402: 01 90                        	str	r0, [sp, #4]
;         write(&mut self, args)
 8012404: 91 e8 78 50                  	ldm.w	r1, {r3, r4, r5, r6, r12, lr}
 8012408: 10 46                        	mov	r0, r2
 801240a: 4c f6 bc 41                  	movw	r1, #52412
 801240e: c0 f6 01 01                  	movt	r1, #2049
 8012412: 80 e8 78 50                  	stm.w	r0, {r3, r4, r5, r6, r12, lr}
 8012416: 01 a8                        	add	r0, sp, #4
 8012418: 03 f0 34 ff                  	bl	#15976
;     }
 801241c: 08 b0                        	add	sp, #32
 801241e: 5d f8 04 bb                  	ldr	r11, [sp], #4
 8012422: f0 bd                        	pop	{r4, r5, r6, r7, pc}

08012424 _$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$::write_str::h5bdd37616fd27e06:
;                     if is_empty!(self) {
 8012424: ca b1                        	cbz	r2, #50
 8012426: 01 eb 02 0c                  	add.w	r12, r1, r2
 801242a: 43 f6 1c 02                  	movw	r2, #14364
 801242e: c4 f2 01 02                  	movt	r2, #16385
 8012432: 03 e0                        	b	#6 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h5bdd37616fd27e06E+0x1c>
;         intrinsics::offset(self, count) as *mut T
 8012434: 01 31                        	adds	r1, #1
;     intrinsics::volatile_store(dst, src);
 8012436: 13 73                        	strb	r3, [r2, #12]
;                     if is_empty!(self) {
 8012438: 61 45                        	cmp	r1, r12
 801243a: 0e d0                        	beq	#28 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h5bdd37616fd27e06E+0x3a>
;             accum = f(accum, x)?;
 801243c: 0b 78                        	ldrb	r3, [r1]
;     intrinsics::volatile_load(src)
 801243e: 10 68                        	ldr	r0, [r2]
;     if isr.txe().bit_is_set() {
 8012440: 00 06                        	lsls	r0, r0, #24
 8012442: f7 d4                        	bmi	#-18 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h5bdd37616fd27e06E+0x14>
;     intrinsics::volatile_load(src)
 8012444: 10 68                        	ldr	r0, [r2]
;     if isr.txe().bit_is_set() {
 8012446: 00 06                        	lsls	r0, r0, #24
;     intrinsics::volatile_load(src)
 8012448: 5c bf                        	itt	pl
 801244a: 10 68                        	ldrpl	r0, [r2]
;     if isr.txe().bit_is_set() {
 801244c: 5f ea 00 60                  	lslspl.w	r0, r0, #24
 8012450: f0 d4                        	bmi	#-32 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h5bdd37616fd27e06E+0x14>
;     intrinsics::volatile_load(src)
 8012452: 10 68                        	ldr	r0, [r2]
;     if isr.txe().bit_is_set() {
 8012454: 00 06                        	lsls	r0, r0, #24
 8012456: f2 d5                        	bpl	#-28 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h5bdd37616fd27e06E+0x1e>
 8012458: ec e7                        	b	#-40 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h5bdd37616fd27e06E+0x14>
;     }
 801245a: 00 20                        	movs	r0, #0
 801245c: 70 47                        	bx	lr
 801245e: 00 00                        	movs	r0, r0

08012460 _$LT$T$u20$as$u20$core..convert..TryInto$LT$U$GT$$GT$::try_into::h4763ef74f764e1db:
;     fn try_into(self) -> Result<U, U::Error> {
 8012460: c2 b2                        	uxtb	r2, r0
;             0x00 => Ok(Status::Success),
 8012462: 44 2a                        	cmp	r2, #68
 8012464: 00 f2 15 81                  	bhi.w	#554 <$t.139+0x19c>
 8012468: 00 21                        	movs	r1, #0
 801246a: 00 20                        	movs	r0, #0
 801246c: df e8 12 f0                  	tbh	[pc, r2, lsl #1]

08012470 $d.138:
 8012470:	10 01 45 00	.word	0x00450110
 8012474:	48 00 4b 00	.word	0x004b0048
 8012478:	4e 00 51 00	.word	0x0051004e
 801247c:	54 00 57 00	.word	0x00570054
 8012480:	5a 00 5d 00	.word	0x005d005a
 8012484:	60 00 63 00	.word	0x00630060
 8012488:	66 00 69 00	.word	0x00690066
 801248c:	6c 00 6f 00	.word	0x006f006c
 8012490:	72 00 75 00	.word	0x00750072
 8012494:	78 00 7b 00	.word	0x007b0078
 8012498:	7e 00 81 00	.word	0x0081007e
 801249c:	84 00 87 00	.word	0x00870084
 80124a0:	8a 00 8d 00	.word	0x008d008a
 80124a4:	90 00 93 00	.word	0x00930090
 80124a8:	96 00 99 00	.word	0x00990096
 80124ac:	9c 00 9f 00	.word	0x009f009c
 80124b0:	a2 00 a5 00	.word	0x00a500a2
 80124b4:	a8 00 ab 00	.word	0x00ab00a8
 80124b8:	ae 00 b1 00	.word	0x00b100ae
 80124bc:	b4 00 b7 00	.word	0x00b700b4
 80124c0:	ba 00 bd 00	.word	0x00bd00ba
 80124c4:	c0 00 c3 00	.word	0x00c300c0
 80124c8:	c6 00 c9 00	.word	0x00c900c6
 80124cc:	cc 00 cf 00	.word	0x00cf00cc
 80124d0:	d2 00 d5 00	.word	0x00d500d2
 80124d4:	d8 00 db 00	.word	0x00db00d8
 80124d8:	de 00 e1 00	.word	0x00e100de
 80124dc:	e4 00 e7 00	.word	0x00e700e4
 80124e0:	ea 00 ed 00	.word	0x00ed00ea
 80124e4:	f0 00 f3 00	.word	0x00f300f0
 80124e8:	f6 00 f9 00	.word	0x00f900f6
 80124ec:	fc 00 ff 00	.word	0x00ff00fc
 80124f0:	02 01 05 01	.word	0x01050102
 80124f4:	08 01 0b 01	.word	0x010b0108
 80124f8:	0e 01		.short	0x010e

080124fa $t.139:
 80124fa: 00 20                        	movs	r0, #0
 80124fc: 01 21                        	movs	r1, #1
;     }
 80124fe: 70 47                        	bx	lr
 8012500: 00 20                        	movs	r0, #0
 8012502: 02 21                        	movs	r1, #2
 8012504: 70 47                        	bx	lr
 8012506: 00 20                        	movs	r0, #0
 8012508: 03 21                        	movs	r1, #3
 801250a: 70 47                        	bx	lr
 801250c: 00 20                        	movs	r0, #0
 801250e: 04 21                        	movs	r1, #4
 8012510: 70 47                        	bx	lr
 8012512: 00 20                        	movs	r0, #0
 8012514: 05 21                        	movs	r1, #5
 8012516: 70 47                        	bx	lr
 8012518: 00 20                        	movs	r0, #0
 801251a: 06 21                        	movs	r1, #6
 801251c: 70 47                        	bx	lr
 801251e: 00 20                        	movs	r0, #0
 8012520: 07 21                        	movs	r1, #7
 8012522: 70 47                        	bx	lr
 8012524: 00 20                        	movs	r0, #0
 8012526: 08 21                        	movs	r1, #8
 8012528: 70 47                        	bx	lr
 801252a: 00 20                        	movs	r0, #0
 801252c: 09 21                        	movs	r1, #9
 801252e: 70 47                        	bx	lr
 8012530: 00 20                        	movs	r0, #0
 8012532: 0a 21                        	movs	r1, #10
 8012534: 70 47                        	bx	lr
 8012536: 00 20                        	movs	r0, #0
 8012538: 0b 21                        	movs	r1, #11
 801253a: 70 47                        	bx	lr
 801253c: 00 20                        	movs	r0, #0
 801253e: 0c 21                        	movs	r1, #12
 8012540: 70 47                        	bx	lr
 8012542: 00 20                        	movs	r0, #0
 8012544: 0d 21                        	movs	r1, #13
 8012546: 70 47                        	bx	lr
 8012548: 00 20                        	movs	r0, #0
 801254a: 0e 21                        	movs	r1, #14
 801254c: 70 47                        	bx	lr
 801254e: 00 20                        	movs	r0, #0
 8012550: 0f 21                        	movs	r1, #15
 8012552: 70 47                        	bx	lr
 8012554: 00 20                        	movs	r0, #0
 8012556: 10 21                        	movs	r1, #16
 8012558: 70 47                        	bx	lr
 801255a: 00 20                        	movs	r0, #0
 801255c: 11 21                        	movs	r1, #17
 801255e: 70 47                        	bx	lr
 8012560: 00 20                        	movs	r0, #0
 8012562: 12 21                        	movs	r1, #18
 8012564: 70 47                        	bx	lr
 8012566: 00 20                        	movs	r0, #0
 8012568: 13 21                        	movs	r1, #19
 801256a: 70 47                        	bx	lr
 801256c: 00 20                        	movs	r0, #0
 801256e: 14 21                        	movs	r1, #20
 8012570: 70 47                        	bx	lr
 8012572: 00 20                        	movs	r0, #0
 8012574: 15 21                        	movs	r1, #21
 8012576: 70 47                        	bx	lr
 8012578: 00 20                        	movs	r0, #0
 801257a: 16 21                        	movs	r1, #22
 801257c: 70 47                        	bx	lr
 801257e: 00 20                        	movs	r0, #0
 8012580: 17 21                        	movs	r1, #23
 8012582: 70 47                        	bx	lr
 8012584: 00 20                        	movs	r0, #0
 8012586: 18 21                        	movs	r1, #24
 8012588: 70 47                        	bx	lr
 801258a: 00 20                        	movs	r0, #0
 801258c: 19 21                        	movs	r1, #25
 801258e: 70 47                        	bx	lr
 8012590: 00 20                        	movs	r0, #0
 8012592: 1a 21                        	movs	r1, #26
 8012594: 70 47                        	bx	lr
 8012596: 00 20                        	movs	r0, #0
 8012598: 1b 21                        	movs	r1, #27
 801259a: 70 47                        	bx	lr
 801259c: 00 20                        	movs	r0, #0
 801259e: 1c 21                        	movs	r1, #28
 80125a0: 70 47                        	bx	lr
 80125a2: 00 20                        	movs	r0, #0
 80125a4: 1d 21                        	movs	r1, #29
 80125a6: 70 47                        	bx	lr
 80125a8: 00 20                        	movs	r0, #0
 80125aa: 1e 21                        	movs	r1, #30
 80125ac: 70 47                        	bx	lr
 80125ae: 00 20                        	movs	r0, #0
 80125b0: 1f 21                        	movs	r1, #31
 80125b2: 70 47                        	bx	lr
 80125b4: 00 20                        	movs	r0, #0
 80125b6: 20 21                        	movs	r1, #32
 80125b8: 70 47                        	bx	lr
 80125ba: 00 20                        	movs	r0, #0
 80125bc: 21 21                        	movs	r1, #33
 80125be: 70 47                        	bx	lr
 80125c0: 00 20                        	movs	r0, #0
 80125c2: 22 21                        	movs	r1, #34
 80125c4: 70 47                        	bx	lr
 80125c6: 00 20                        	movs	r0, #0
 80125c8: 23 21                        	movs	r1, #35
 80125ca: 70 47                        	bx	lr
 80125cc: 00 20                        	movs	r0, #0
 80125ce: 24 21                        	movs	r1, #36
 80125d0: 70 47                        	bx	lr
 80125d2: 00 20                        	movs	r0, #0
 80125d4: 25 21                        	movs	r1, #37
 80125d6: 70 47                        	bx	lr
 80125d8: 00 20                        	movs	r0, #0
 80125da: 26 21                        	movs	r1, #38
 80125dc: 70 47                        	bx	lr
 80125de: 00 20                        	movs	r0, #0
 80125e0: 27 21                        	movs	r1, #39
 80125e2: 70 47                        	bx	lr
 80125e4: 00 20                        	movs	r0, #0
 80125e6: 28 21                        	movs	r1, #40
 80125e8: 70 47                        	bx	lr
 80125ea: 00 20                        	movs	r0, #0
 80125ec: 29 21                        	movs	r1, #41
 80125ee: 70 47                        	bx	lr
 80125f0: 00 20                        	movs	r0, #0
 80125f2: 2a 21                        	movs	r1, #42
 80125f4: 70 47                        	bx	lr
 80125f6: 00 20                        	movs	r0, #0
 80125f8: 2b 21                        	movs	r1, #43
 80125fa: 70 47                        	bx	lr
 80125fc: 00 20                        	movs	r0, #0
 80125fe: 2c 21                        	movs	r1, #44
 8012600: 70 47                        	bx	lr
 8012602: 00 20                        	movs	r0, #0
 8012604: 2d 21                        	movs	r1, #45
 8012606: 70 47                        	bx	lr
 8012608: 00 20                        	movs	r0, #0
 801260a: 2e 21                        	movs	r1, #46
 801260c: 70 47                        	bx	lr
 801260e: 00 20                        	movs	r0, #0
 8012610: 2f 21                        	movs	r1, #47
 8012612: 70 47                        	bx	lr
 8012614: 00 20                        	movs	r0, #0
 8012616: 30 21                        	movs	r1, #48
 8012618: 70 47                        	bx	lr
 801261a: 00 20                        	movs	r0, #0
 801261c: 31 21                        	movs	r1, #49
 801261e: 70 47                        	bx	lr
 8012620: 00 20                        	movs	r0, #0
 8012622: 32 21                        	movs	r1, #50
 8012624: 70 47                        	bx	lr
 8012626: 00 20                        	movs	r0, #0
 8012628: 33 21                        	movs	r1, #51
 801262a: 70 47                        	bx	lr
 801262c: 00 20                        	movs	r0, #0
 801262e: 34 21                        	movs	r1, #52
 8012630: 70 47                        	bx	lr
 8012632: 00 20                        	movs	r0, #0
 8012634: 35 21                        	movs	r1, #53
 8012636: 70 47                        	bx	lr
 8012638: 00 20                        	movs	r0, #0
 801263a: 36 21                        	movs	r1, #54
 801263c: 70 47                        	bx	lr
 801263e: 00 20                        	movs	r0, #0
 8012640: 37 21                        	movs	r1, #55
 8012642: 70 47                        	bx	lr
 8012644: 00 20                        	movs	r0, #0
 8012646: 38 21                        	movs	r1, #56
 8012648: 70 47                        	bx	lr
 801264a: 00 20                        	movs	r0, #0
 801264c: 39 21                        	movs	r1, #57
 801264e: 70 47                        	bx	lr
 8012650: 00 20                        	movs	r0, #0
 8012652: 3a 21                        	movs	r1, #58
 8012654: 70 47                        	bx	lr
 8012656: 00 20                        	movs	r0, #0
 8012658: 3b 21                        	movs	r1, #59
 801265a: 70 47                        	bx	lr
 801265c: 00 20                        	movs	r0, #0
 801265e: 3c 21                        	movs	r1, #60
 8012660: 70 47                        	bx	lr
 8012662: 00 20                        	movs	r0, #0
 8012664: 3d 21                        	movs	r1, #61
 8012666: 70 47                        	bx	lr
 8012668: 00 20                        	movs	r0, #0
 801266a: 3e 21                        	movs	r1, #62
 801266c: 70 47                        	bx	lr
 801266e: 00 20                        	movs	r0, #0
 8012670: 3f 21                        	movs	r1, #63
 8012672: 70 47                        	bx	lr
 8012674: 00 20                        	movs	r0, #0
 8012676: 40 21                        	movs	r1, #64
 8012678: 70 47                        	bx	lr
 801267a: 00 20                        	movs	r0, #0
 801267c: 41 21                        	movs	r1, #65
 801267e: 70 47                        	bx	lr
 8012680: 00 20                        	movs	r0, #0
 8012682: 42 21                        	movs	r1, #66
 8012684: 70 47                        	bx	lr
 8012686: 01 20                        	movs	r0, #1
 8012688: 43 21                        	movs	r1, #67
 801268a: 70 47                        	bx	lr
 801268c: 01 20                        	movs	r0, #1
 801268e: 44 21                        	movs	r1, #68
 8012690: 70 47                        	bx	lr
 8012692: 80 b5                        	push	{r7, lr}
 8012694: 6f 46                        	mov	r7, sp
;             _ => Ok(Status::Vendor(V::try_from(value)?)),
 8012696: 04 f0 89 ff                  	bl	#20242
 801269a: 00 f0 01 00                  	and	r0, r0, #1
 801269e: 80 bd                        	pop	{r7, pc}

080126a0 _$LT$nb..Error$LT$E$GT$$u20$as$u20$core..fmt..Debug$GT$::fmt::h1737bcbb302e88e2:
;     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
 80126a0: b0 b5                        	push	{r4, r5, r7, lr}
 80126a2: 02 af                        	add	r7, sp, #8
 80126a4: 84 b0                        	sub	sp, #16
 80126a6: 04 46                        	mov	r4, r0
;             Error::Other(ref e) => fmt::Debug::fmt(e, f),
 80126a8: 00 78                        	ldrb	r0, [r0]
 80126aa: 0d 46                        	mov	r5, r1
 80126ac: 09 28                        	cmp	r0, #9
 80126ae: 0b d1                        	bne	#22 <$d.141>
 80126b0: d5 e9 06 02                  	ldrd	r0, r2, [r5, #24]
 80126b4: 4c f6 44 51                  	movw	r1, #52548
 80126b8: d3 68                        	ldr	r3, [r2, #12]
 80126ba: c0 f6 01 01                  	movt	r1, #2049
 80126be: 0a 22                        	movs	r2, #10
 80126c0: 04 b0                        	add	sp, #16
 80126c2: bd e8 b0 40                  	pop.w	{r4, r5, r7, lr}
 80126c6: 18 47                        	bx	r3
 80126c8: df e8 00 f0                  	tbb	[pc, r0]

080126cc $d.141:
 80126cc:	05 1c 33 4a	.word	0x4a331c05
 80126d0:	53 75 81 98	.word	0x98817553
 80126d4:	af 00		.short	0x00af

080126d6 $t.142:
 80126d6: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 80126da: 16 22                        	movs	r2, #22
 80126dc: cb 68                        	ldr	r3, [r1, #12]
 80126de: 4d f2 68 41                  	movw	r1, #54376
 80126e2: c0 f6 01 01                  	movt	r1, #2049
 80126e6: 98 47                        	blx	r3
 80126e8: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 80126ec: 00 20                        	movs	r0, #0
; #[derive(Copy, Clone, Debug, PartialEq)]
 80126ee: 4c f6 74 22                  	movw	r2, #51828
 80126f2: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 80126f6: 01 90                        	str	r0, [sp, #4]
;     BadDisconnectionReason(Status<VS>),
 80126f8: 60 1c                        	adds	r0, r4, #1
 80126fa: 03 a9                        	add	r1, sp, #12
 80126fc: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug, PartialEq)]
 80126fe: c0 f6 01 02                  	movt	r2, #2049
 8012702: a8 e0                        	b	#336 <$t.142+0x184>
 8012704: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8012708: 10 22                        	movs	r2, #16
 801270a: cb 68                        	ldr	r3, [r1, #12]
 801270c: 4c f6 0c 71                  	movw	r1, #53004
 8012710: c0 f6 01 01                  	movt	r1, #2049
 8012714: 98 47                        	blx	r3
 8012716: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 801271a: 00 20                        	movs	r0, #0
 801271c: 4d f2 58 42                  	movw	r2, #54360
 8012720: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8012724: 01 90                        	str	r0, [sp, #4]
;     BadRandomAddress(crate::BdAddr),
 8012726: 60 1c                        	adds	r0, r4, #1
 8012728: 03 a9                        	add	r1, sp, #12
 801272a: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug, PartialEq)]
 801272c: c0 f6 01 02                  	movt	r2, #2049
 8012730: 91 e0                        	b	#290 <$t.142+0x184>
 8012732: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8012736: 0d 22                        	movs	r2, #13
 8012738: cb 68                        	ldr	r3, [r1, #12]
 801273a: 4d f2 3a 41                  	movw	r1, #54330
 801273e: c0 f6 01 01                  	movt	r1, #2049
 8012742: 98 47                        	blx	r3
 8012744: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8012748: 00 20                        	movs	r0, #0
 801274a: 4d f2 48 42                  	movw	r2, #54344
 801274e: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8012752: 01 90                        	str	r0, [sp, #4]
;     BadChannelMap(Channels),
 8012754: 60 1c                        	adds	r0, r4, #1
 8012756: 03 a9                        	add	r1, sp, #12
 8012758: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug, PartialEq)]
 801275a: c0 f6 01 02                  	movt	r2, #2049
 801275e: 7a e0                        	b	#244 <$t.142+0x184>
 8012760: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8012764: 16 22                        	movs	r2, #22
 8012766: cb 68                        	ldr	r3, [r1, #12]
 8012768: 4d f2 24 41                  	movw	r1, #54308
 801276c: c0 f6 01 01                  	movt	r1, #2049
 8012770: 4c e0                        	b	#152 <$t.142+0x13a>
 8012772: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8012776: 18 22                        	movs	r2, #24
 8012778: cb 68                        	ldr	r3, [r1, #12]
 801277a: 4d f2 0c 41                  	movw	r1, #54284
 801277e: c0 f6 01 01                  	movt	r1, #2049
 8012782: 98 47                        	blx	r3
 8012784: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8012788: 00 20                        	movs	r0, #0
 801278a: 00 95                        	str	r5, [sp]
 801278c: 4d f2 a0 35                  	movw	r5, #54176
 8012790: c0 f6 01 05                  	movt	r5, #2049
 8012794: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8012798: 01 90                        	str	r0, [sp, #4]
;     BadConnectionLengthRange(Duration, Duration),
 801279a: 04 f1 08 00                  	add.w	r0, r4, #8
 801279e: 03 a9                        	add	r1, sp, #12
 80127a0: 03 90                        	str	r0, [sp, #12]
 80127a2: 68 46                        	mov	r0, sp
; #[derive(Copy, Clone, Debug, PartialEq)]
 80127a4: 2a 46                        	mov	r2, r5
 80127a6: 04 f0 40 f9                  	bl	#17024
;     BadConnectionLengthRange(Duration, Duration),
 80127aa: 04 f1 18 01                  	add.w	r1, r4, #24
 80127ae: 03 91                        	str	r1, [sp, #12]
 80127b0: 03 a9                        	add	r1, sp, #12
; #[derive(Copy, Clone, Debug, PartialEq)]
 80127b2: 2a 46                        	mov	r2, r5
 80127b4: 51 e0                        	b	#162 <$t.142+0x188>
 80127b6: 4d f2 fe 31                  	movw	r1, #54270
 80127ba: d5 e9 06 02                  	ldrd	r0, r2, [r5, #24]
 80127be: d3 68                        	ldr	r3, [r2, #12]
 80127c0: c0 f6 01 01                  	movt	r1, #2049
 80127c4: 0e 22                        	movs	r2, #14
 80127c6: 04 b0                        	add	sp, #16
 80127c8: bd e8 b0 40                  	pop.w	{r4, r5, r7, lr}
 80127cc: 18 47                        	bx	r3
 80127ce: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 80127d2: 12 22                        	movs	r2, #18
 80127d4: cb 68                        	ldr	r3, [r1, #12]
 80127d6: 4d f2 ec 31                  	movw	r1, #54252
 80127da: c0 f6 01 01                  	movt	r1, #2049
 80127de: 98 47                        	blx	r3
 80127e0: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 80127e4: 00 20                        	movs	r0, #0
 80127e6: 4d f2 78 32                  	movw	r2, #54136
 80127ea: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 80127ee: 01 90                        	str	r0, [sp, #4]
;     InvalidTestChannel(u8),
 80127f0: 60 1c                        	adds	r0, r4, #1
 80127f2: 03 a9                        	add	r1, sp, #12
 80127f4: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug, PartialEq)]
 80127f6: c0 f6 01 02                  	movt	r2, #2049
 80127fa: 2c e0                        	b	#88 <$t.142+0x184>
 80127fc: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8012800: 18 22                        	movs	r2, #24
 8012802: cb 68                        	ldr	r3, [r1, #12]
 8012804: 4d f2 d4 31                  	movw	r1, #54228
 8012808: c0 f6 01 01                  	movt	r1, #2049
 801280c: 98 47                        	blx	r3
 801280e: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8012812: 00 20                        	movs	r0, #0
 8012814: 4d f2 04 32                  	movw	r2, #54020
 8012818: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 801281c: 01 90                        	str	r0, [sp, #4]
 801281e: 20 1d                        	adds	r0, r4, #4
 8012820: 03 a9                        	add	r1, sp, #12
 8012822: 03 90                        	str	r0, [sp, #12]
 8012824: c0 f6 01 02                  	movt	r2, #2049
 8012828: 15 e0                        	b	#42 <$t.142+0x184>
 801282a: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 801282e: 04 22                        	movs	r2, #4
 8012830: cb 68                        	ldr	r3, [r1, #12]
 8012832: 4d f2 88 21                  	movw	r1, #53896
 8012836: c0 f6 01 01                  	movt	r1, #2049
 801283a: 98 47                        	blx	r3
 801283c: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8012840: 00 20                        	movs	r0, #0
 8012842: 4d f2 bc 22                  	movw	r2, #53948
 8012846: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 801284a: 01 90                        	str	r0, [sp, #4]
;     Comm(E),
 801284c: 60 1c                        	adds	r0, r4, #1
 801284e: 03 a9                        	add	r1, sp, #12
 8012850: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug, PartialEq)]
 8012852: c0 f6 01 02                  	movt	r2, #2049
 8012856: 68 46                        	mov	r0, sp
 8012858: 00 95                        	str	r5, [sp]
 801285a: 04 f0 e6 f8                  	bl	#16844
 801285e: 01 98                        	ldr	r0, [sp, #4]
 8012860: 9d f8 08 40                  	ldrb.w	r4, [sp, #8]
 8012864: 18 b3                        	cbz	r0, #70
 8012866: 0c b1                        	cbz	r4, #2
 8012868: 01 24                        	movs	r4, #1
 801286a: 1e e0                        	b	#60 <$t.142+0x1d8>
 801286c: 01 28                        	cmp	r0, #1
 801286e: 11 d1                        	bne	#34 <$t.142+0x1c2>
 8012870: 9d f8 09 00                  	ldrb.w	r0, [sp, #9]
 8012874: 70 b1                        	cbz	r0, #28
 8012876: 00 99                        	ldr	r1, [sp]
 8012878: 08 78                        	ldrb	r0, [r1]
 801287a: 40 07                        	lsls	r0, r0, #29
 801287c: 0a d4                        	bmi	#20 <$t.142+0x1c2>
 801287e: 88 69                        	ldr	r0, [r1, #24]
 8012880: 01 22                        	movs	r2, #1
 8012882: c9 69                        	ldr	r1, [r1, #28]
 8012884: 01 24                        	movs	r4, #1
 8012886: cb 68                        	ldr	r3, [r1, #12]
 8012888: 4e f6 21 41                  	movw	r1, #60449
 801288c: c0 f6 01 01                  	movt	r1, #2049
 8012890: 98 47                        	blx	r3
 8012892: 50 b9                        	cbnz	r0, #20
 8012894: 00 99                        	ldr	r1, [sp]
 8012896: 01 22                        	movs	r2, #1
 8012898: 88 69                        	ldr	r0, [r1, #24]
 801289a: c9 69                        	ldr	r1, [r1, #28]
 801289c: cb 68                        	ldr	r3, [r1, #12]
 801289e: 4f f2 69 61                  	movw	r1, #63081
 80128a2: c0 f6 01 01                  	movt	r1, #2049
 80128a6: 98 47                        	blx	r3
 80128a8: 04 46                        	mov	r4, r0
 80128aa: 8d f8 08 40                  	strb.w	r4, [sp, #8]
 80128ae: 00 2c                        	cmp	r4, #0
 80128b0: 18 bf                        	it	ne
 80128b2: 01 24                        	movne	r4, #1
;     }
 80128b4: 20 46                        	mov	r0, r4
 80128b6: 04 b0                        	add	sp, #16
 80128b8: b0 bd                        	pop	{r4, r5, r7, pc}
 80128ba: 00 00                        	movs	r0, r0

080128bc _$LT$nb..Error$LT$E$GT$$u20$as$u20$core..fmt..Debug$GT$::fmt::h809d6000ae3adfcc:
;     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
 80128bc: b0 b5                        	push	{r4, r5, r7, lr}
 80128be: 02 af                        	add	r7, sp, #8
 80128c0: 84 b0                        	sub	sp, #16
 80128c2: 05 46                        	mov	r5, r0
;             Error::Other(ref e) => fmt::Debug::fmt(e, f),
 80128c4: 00 78                        	ldrb	r0, [r0]
 80128c6: 0c 46                        	mov	r4, r1
 80128c8: 05 28                        	cmp	r0, #5
 80128ca: 0b d1                        	bne	#22 <$d.144>
 80128cc: d4 e9 06 02                  	ldrd	r0, r2, [r4, #24]
 80128d0: 4c f6 44 51                  	movw	r1, #52548
 80128d4: d3 68                        	ldr	r3, [r2, #12]
 80128d6: c0 f6 01 01                  	movt	r1, #2049
 80128da: 0a 22                        	movs	r2, #10
 80128dc: 04 b0                        	add	sp, #16
 80128de: bd e8 b0 40                  	pop.w	{r4, r5, r7, lr}
 80128e2: 18 47                        	bx	r3
 80128e4: df e8 00 f0                  	tbb	[pc, r0]

080128e8 $d.144:
 80128e8:	03 0f 1b 27	.word	0x271b0f03
 80128ec:	33 00		.short	0x0033

080128ee $t.145:
 80128ee: 4d f2 bb 41                  	movw	r1, #54459
 80128f2: d4 e9 06 02                  	ldrd	r0, r2, [r4, #24]
 80128f6: d3 68                        	ldr	r3, [r2, #12]
 80128f8: c0 f6 01 01                  	movt	r1, #2049
 80128fc: 11 22                        	movs	r2, #17
 80128fe: 04 b0                        	add	sp, #16
 8012900: bd e8 b0 40                  	pop.w	{r4, r5, r7, lr}
 8012904: 18 47                        	bx	r3
 8012906: 4d f2 a4 41                  	movw	r1, #54436
 801290a: d4 e9 06 02                  	ldrd	r0, r2, [r4, #24]
 801290e: d3 68                        	ldr	r3, [r2, #12]
 8012910: c0 f6 01 01                  	movt	r1, #2049
 8012914: 17 22                        	movs	r2, #23
 8012916: 04 b0                        	add	sp, #16
 8012918: bd e8 b0 40                  	pop.w	{r4, r5, r7, lr}
 801291c: 18 47                        	bx	r3
 801291e: 4d f2 92 41                  	movw	r1, #54418
 8012922: d4 e9 06 02                  	ldrd	r0, r2, [r4, #24]
 8012926: d3 68                        	ldr	r3, [r2, #12]
 8012928: c0 f6 01 01                  	movt	r1, #2049
 801292c: 12 22                        	movs	r2, #18
 801292e: 04 b0                        	add	sp, #16
 8012930: bd e8 b0 40                  	pop.w	{r4, r5, r7, lr}
 8012934: 18 47                        	bx	r3
 8012936: 4d f2 7e 41                  	movw	r1, #54398
 801293a: d4 e9 06 02                  	ldrd	r0, r2, [r4, #24]
 801293e: d3 68                        	ldr	r3, [r2, #12]
 8012940: c0 f6 01 01                  	movt	r1, #2049
 8012944: 14 22                        	movs	r2, #20
 8012946: 04 b0                        	add	sp, #16
 8012948: bd e8 b0 40                  	pop.w	{r4, r5, r7, lr}
 801294c: 18 47                        	bx	r3
 801294e: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8012952: 04 22                        	movs	r2, #4
 8012954: cb 68                        	ldr	r3, [r1, #12]
 8012956: 4d f2 88 21                  	movw	r1, #53896
 801295a: c0 f6 01 01                  	movt	r1, #2049
 801295e: 98 47                        	blx	r3
 8012960: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8012964: 00 20                        	movs	r0, #0
; #[derive(Copy, Clone, Debug, PartialEq)]
 8012966: 4d f2 bc 22                  	movw	r2, #53948
 801296a: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 801296e: 01 90                        	str	r0, [sp, #4]
;     Comm(E),
 8012970: 68 1c                        	adds	r0, r5, #1
 8012972: 03 a9                        	add	r1, sp, #12
 8012974: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug, PartialEq)]
 8012976: c0 f6 01 02                  	movt	r2, #2049
 801297a: 68 46                        	mov	r0, sp
 801297c: 00 94                        	str	r4, [sp]
 801297e: 04 f0 54 f8                  	bl	#16552
 8012982: 01 98                        	ldr	r0, [sp, #4]
 8012984: 9d f8 08 40                  	ldrb.w	r4, [sp, #8]
 8012988: 18 b3                        	cbz	r0, #70
 801298a: 0c b1                        	cbz	r4, #2
 801298c: 01 24                        	movs	r4, #1
 801298e: 1e e0                        	b	#60 <$t.145+0xe4>
 8012990: 01 28                        	cmp	r0, #1
 8012992: 11 d1                        	bne	#34 <$t.145+0xce>
 8012994: 9d f8 09 00                  	ldrb.w	r0, [sp, #9]
 8012998: 70 b1                        	cbz	r0, #28
 801299a: 00 99                        	ldr	r1, [sp]
 801299c: 08 78                        	ldrb	r0, [r1]
 801299e: 40 07                        	lsls	r0, r0, #29
 80129a0: 0a d4                        	bmi	#20 <$t.145+0xce>
 80129a2: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 80129a6: 01 22                        	movs	r2, #1
 80129a8: cb 68                        	ldr	r3, [r1, #12]
 80129aa: 4e f6 21 41                  	movw	r1, #60449
 80129ae: c0 f6 01 01                  	movt	r1, #2049
 80129b2: 01 24                        	movs	r4, #1
 80129b4: 98 47                        	blx	r3
 80129b6: 50 b9                        	cbnz	r0, #20
 80129b8: 00 99                        	ldr	r1, [sp]
 80129ba: 01 22                        	movs	r2, #1
 80129bc: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 80129c0: cb 68                        	ldr	r3, [r1, #12]
 80129c2: 4f f2 69 61                  	movw	r1, #63081
 80129c6: c0 f6 01 01                  	movt	r1, #2049
 80129ca: 98 47                        	blx	r3
 80129cc: 04 46                        	mov	r4, r0
 80129ce: 8d f8 08 40                  	strb.w	r4, [sp, #8]
 80129d2: 00 2c                        	cmp	r4, #0
 80129d4: 18 bf                        	it	ne
 80129d6: 01 24                        	movne	r4, #1
;     }
 80129d8: 20 46                        	mov	r0, r4
 80129da: 04 b0                        	add	sp, #16
 80129dc: b0 bd                        	pop	{r4, r5, r7, pc}

080129de _$LT$nb..Error$LT$E$GT$$u20$as$u20$core..fmt..Debug$GT$::fmt::h8e2a9752784567d2:
;             Error::Other(ref e) => fmt::Debug::fmt(e, f),
 80129de: 00 78                        	ldrb	r0, [r0]
 80129e0: 01 28                        	cmp	r0, #1
 80129e2: 08 d1                        	bne	#16 <_ZN55_$LT$nb..Error$LT$E$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h8e2a9752784567d2E+0x1c>
 80129e4: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 80129e8: 4c f6 44 51                  	movw	r1, #52548
 80129ec: d3 68                        	ldr	r3, [r2, #12]
 80129ee: c0 f6 01 01                  	movt	r1, #2049
 80129f2: 0a 22                        	movs	r2, #10
 80129f4: 18 47                        	bx	r3
;         f.pad("()")
 80129f6: 4f f2 6a 62                  	movw	r2, #63082
 80129fa: 08 46                        	mov	r0, r1
 80129fc: c0 f6 01 02                  	movt	r2, #2049
 8012a00: 11 46                        	mov	r1, r2
 8012a02: 02 22                        	movs	r2, #2
 8012a04: 03 f0 0c ba                  	b.w	#13336 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0x4>

08012a08 _$LT$nb..Error$LT$E$GT$$u20$as$u20$core..fmt..Debug$GT$::fmt::he0fdcdf06ffa58f0:
;     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
 8012a08: b0 b5                        	push	{r4, r5, r7, lr}
 8012a0a: 02 af                        	add	r7, sp, #8
 8012a0c: 84 b0                        	sub	sp, #16
 8012a0e: 04 46                        	mov	r4, r0
;             Error::Other(ref e) => fmt::Debug::fmt(e, f),
 8012a10: 00 78                        	ldrb	r0, [r0]
 8012a12: 0d 46                        	mov	r5, r1
 8012a14: 0b 28                        	cmp	r0, #11
 8012a16: 0b d1                        	bne	#22 <$d.148>
 8012a18: d5 e9 06 02                  	ldrd	r0, r2, [r5, #24]
 8012a1c: 4c f6 44 51                  	movw	r1, #52548
 8012a20: d3 68                        	ldr	r3, [r2, #12]
 8012a22: c0 f6 01 01                  	movt	r1, #2049
 8012a26: 0a 22                        	movs	r2, #10
 8012a28: 04 b0                        	add	sp, #16
 8012a2a: bd e8 b0 40                  	pop.w	{r4, r5, r7, lr}
 8012a2e: 18 47                        	bx	r3
 8012a30: df e8 00 f0                  	tbb	[pc, r0]

08012a34 $d.148:
 8012a34:	06 0f 26 45	.word	0x45260f06
 8012a38:	65 7c 93 aa	.word	0xaa937c65
 8012a3c:	c1 cd d9 00	.word	0x00d9cdc1

08012a40 $t.149:
 8012a40: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8012a44: 15 22                        	movs	r2, #21
 8012a46: cb 68                        	ldr	r3, [r1, #12]
 8012a48: 4d f6 47 61                  	movw	r1, #56903
 8012a4c: c0 f6 01 01                  	movt	r1, #2049
 8012a50: 1e e0                        	b	#60 <$t.149+0x54>
 8012a52: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8012a56: 12 22                        	movs	r2, #18
 8012a58: cb 68                        	ldr	r3, [r1, #12]
 8012a5a: 4d f2 b0 31                  	movw	r1, #54192
 8012a5e: c0 f6 01 01                  	movt	r1, #2049
 8012a62: 98 47                        	blx	r3
 8012a64: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8012a68: 00 20                        	movs	r0, #0
; #[derive(Copy, Clone, Debug, PartialEq)]
 8012a6a: 4d f2 c4 32                  	movw	r2, #54212
 8012a6e: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8012a72: 01 90                        	str	r0, [sp, #4]
;     BadAdvertisingType(crate::AdvertisingType),
 8012a74: 60 1c                        	adds	r0, r4, #1
 8012a76: 03 a9                        	add	r1, sp, #12
 8012a78: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug, PartialEq)]
 8012a7a: c0 f6 01 02                  	movt	r2, #2049
 8012a7e: c8 e0                        	b	#400 <$t.149+0x1d6>
 8012a80: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8012a84: 16 22                        	movs	r2, #22
 8012a86: cb 68                        	ldr	r3, [r1, #12]
 8012a88: 4d f2 88 31                  	movw	r1, #54152
 8012a8c: c0 f6 01 01                  	movt	r1, #2049
 8012a90: 98 47                        	blx	r3
 8012a92: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8012a96: 00 20                        	movs	r0, #0
 8012a98: 00 95                        	str	r5, [sp]
 8012a9a: 4d f2 a0 35                  	movw	r5, #54176
 8012a9e: c0 f6 01 05                  	movt	r5, #2049
 8012aa2: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8012aa6: 01 90                        	str	r0, [sp, #4]
 8012aa8: 04 f1 08 00                  	add.w	r0, r4, #8
 8012aac: 03 a9                        	add	r1, sp, #12
 8012aae: 03 90                        	str	r0, [sp, #12]
 8012ab0: 68 46                        	mov	r0, sp
 8012ab2: 2a 46                        	mov	r2, r5
 8012ab4: 03 f0 b9 ff                  	bl	#16242
 8012ab8: 04 f1 18 01                  	add.w	r1, r4, #24
 8012abc: 1b e0                        	b	#54 <$t.149+0xba>
 8012abe: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8012ac2: 19 22                        	movs	r2, #25
 8012ac4: cb 68                        	ldr	r3, [r1, #12]
 8012ac6: 4d f2 5c 31                  	movw	r1, #54108
 8012aca: c0 f6 01 01                  	movt	r1, #2049
 8012ace: 98 47                        	blx	r3
 8012ad0: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8012ad4: 00 20                        	movs	r0, #0
 8012ad6: 00 95                        	str	r5, [sp]
 8012ad8: 4d f2 78 35                  	movw	r5, #54136
 8012adc: c0 f6 01 05                  	movt	r5, #2049
 8012ae0: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8012ae4: 01 90                        	str	r0, [sp, #4]
;     BadEncryptionKeySizeRange(u8, u8),
 8012ae6: 60 1c                        	adds	r0, r4, #1
 8012ae8: 03 a9                        	add	r1, sp, #12
 8012aea: 03 90                        	str	r0, [sp, #12]
 8012aec: 68 46                        	mov	r0, sp
; #[derive(Copy, Clone, Debug, PartialEq)]
 8012aee: 2a 46                        	mov	r2, r5
 8012af0: 03 f0 9b ff                  	bl	#16182
;     BadEncryptionKeySizeRange(u8, u8),
 8012af4: a1 1c                        	adds	r1, r4, #2
 8012af6: 03 91                        	str	r1, [sp, #12]
 8012af8: 03 a9                        	add	r1, sp, #12
 8012afa: 2a 46                        	mov	r2, r5
 8012afc: 8b e0                        	b	#278 <$t.149+0x1da>
 8012afe: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8012b02: 0b 22                        	movs	r2, #11
 8012b04: cb 68                        	ldr	r3, [r1, #12]
 8012b06: 4d f2 40 31                  	movw	r1, #54080
 8012b0a: c0 f6 01 01                  	movt	r1, #2049
 8012b0e: 98 47                        	blx	r3
 8012b10: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8012b14: 00 20                        	movs	r0, #0
; #[derive(Copy, Clone, Debug, PartialEq)]
 8012b16: 4d f2 4c 32                  	movw	r2, #54092
 8012b1a: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8012b1e: 01 90                        	str	r0, [sp, #4]
;     BadFixedPin(u32),
 8012b20: 20 1d                        	adds	r0, r4, #4
 8012b22: 03 a9                        	add	r1, sp, #12
 8012b24: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug, PartialEq)]
 8012b26: c0 f6 01 02                  	movt	r2, #2049
 8012b2a: 72 e0                        	b	#228 <$t.149+0x1d6>
 8012b2c: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8012b30: 1a 22                        	movs	r2, #26
 8012b32: cb 68                        	ldr	r3, [r1, #12]
 8012b34: 4d f2 14 31                  	movw	r1, #54036
 8012b38: c0 f6 01 01                  	movt	r1, #2049
 8012b3c: 98 47                        	blx	r3
 8012b3e: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8012b42: 00 20                        	movs	r0, #0
 8012b44: 4d f2 30 32                  	movw	r2, #54064
 8012b48: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8012b4c: 01 90                        	str	r0, [sp, #4]
;     BadAdvertisingFilterPolicy(crate::AdvertisingFilterPolicy),
 8012b4e: 60 1c                        	adds	r0, r4, #1
 8012b50: 03 a9                        	add	r1, sp, #12
 8012b52: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug, PartialEq)]
 8012b54: c0 f6 01 02                  	movt	r2, #2049
 8012b58: 5b e0                        	b	#182 <$t.149+0x1d6>
 8012b5a: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8012b5e: 18 22                        	movs	r2, #24
 8012b60: cb 68                        	ldr	r3, [r1, #12]
 8012b62: 4d f2 eb 21                  	movw	r1, #53995
 8012b66: c0 f6 01 01                  	movt	r1, #2049
 8012b6a: 98 47                        	blx	r3
 8012b6c: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8012b70: 00 20                        	movs	r0, #0
 8012b72: 4d f2 04 32                  	movw	r2, #54020
 8012b76: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8012b7a: 01 90                        	str	r0, [sp, #4]
;     BadAdvertisingDataLength(usize),
 8012b7c: 20 1d                        	adds	r0, r4, #4
 8012b7e: 03 a9                        	add	r1, sp, #12
 8012b80: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug, PartialEq)]
 8012b82: c0 f6 01 02                  	movt	r2, #2049
 8012b86: 44 e0                        	b	#136 <$t.149+0x1d6>
 8012b88: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8012b8c: 14 22                        	movs	r2, #20
 8012b8e: cb 68                        	ldr	r3, [r1, #12]
 8012b90: 4d f2 d7 21                  	movw	r1, #53975
 8012b94: c0 f6 01 01                  	movt	r1, #2049
 8012b98: 98 47                        	blx	r3
 8012b9a: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8012b9e: 00 20                        	movs	r0, #0
 8012ba0: 4c f6 74 22                  	movw	r2, #51828
 8012ba4: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8012ba8: 01 90                        	str	r0, [sp, #4]
;     BadTerminationReason(hci::Status<crate::event::Status>),
 8012baa: 60 1c                        	adds	r0, r4, #1
 8012bac: 03 a9                        	add	r1, sp, #12
 8012bae: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug, PartialEq)]
 8012bb0: c0 f6 01 02                  	movt	r2, #2049
 8012bb4: 2d e0                        	b	#90 <$t.149+0x1d6>
 8012bb6: 4c f6 fc 61                  	movw	r1, #52988
 8012bba: d5 e9 06 02                  	ldrd	r0, r2, [r5, #24]
 8012bbe: d3 68                        	ldr	r3, [r2, #12]
 8012bc0: c0 f6 01 01                  	movt	r1, #2049
 8012bc4: 10 22                        	movs	r2, #16
 8012bc6: 04 b0                        	add	sp, #16
 8012bc8: bd e8 b0 40                  	pop.w	{r4, r5, r7, lr}
 8012bcc: 18 47                        	bx	r3
 8012bce: 4d f2 cc 21                  	movw	r1, #53964
 8012bd2: d5 e9 06 02                  	ldrd	r0, r2, [r5, #24]
 8012bd6: d3 68                        	ldr	r3, [r2, #12]
 8012bd8: c0 f6 01 01                  	movt	r1, #2049
 8012bdc: 0b 22                        	movs	r2, #11
 8012bde: 04 b0                        	add	sp, #16
 8012be0: bd e8 b0 40                  	pop.w	{r4, r5, r7, lr}
 8012be4: 18 47                        	bx	r3
 8012be6: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8012bea: 04 22                        	movs	r2, #4
 8012bec: cb 68                        	ldr	r3, [r1, #12]
 8012bee: 4d f2 88 21                  	movw	r1, #53896
 8012bf2: c0 f6 01 01                  	movt	r1, #2049
 8012bf6: 98 47                        	blx	r3
 8012bf8: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8012bfc: 00 20                        	movs	r0, #0
 8012bfe: 4d f2 bc 22                  	movw	r2, #53948
 8012c02: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8012c06: 01 90                        	str	r0, [sp, #4]
;     Comm(E),
 8012c08: 60 1c                        	adds	r0, r4, #1
 8012c0a: 03 a9                        	add	r1, sp, #12
 8012c0c: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug, PartialEq)]
 8012c0e: c0 f6 01 02                  	movt	r2, #2049
 8012c12: 68 46                        	mov	r0, sp
 8012c14: 00 95                        	str	r5, [sp]
 8012c16: 03 f0 08 ff                  	bl	#15888
 8012c1a: 01 98                        	ldr	r0, [sp, #4]
 8012c1c: 9d f8 08 40                  	ldrb.w	r4, [sp, #8]
 8012c20: 18 b3                        	cbz	r0, #70
 8012c22: 0c b1                        	cbz	r4, #2
 8012c24: 01 24                        	movs	r4, #1
 8012c26: 1e e0                        	b	#60 <$t.149+0x22a>
 8012c28: 01 28                        	cmp	r0, #1
 8012c2a: 11 d1                        	bne	#34 <$t.149+0x214>
 8012c2c: 9d f8 09 00                  	ldrb.w	r0, [sp, #9]
 8012c30: 70 b1                        	cbz	r0, #28
 8012c32: 00 99                        	ldr	r1, [sp]
 8012c34: 08 78                        	ldrb	r0, [r1]
 8012c36: 40 07                        	lsls	r0, r0, #29
 8012c38: 0a d4                        	bmi	#20 <$t.149+0x214>
 8012c3a: 88 69                        	ldr	r0, [r1, #24]
 8012c3c: 01 22                        	movs	r2, #1
 8012c3e: c9 69                        	ldr	r1, [r1, #28]
 8012c40: 01 24                        	movs	r4, #1
 8012c42: cb 68                        	ldr	r3, [r1, #12]
 8012c44: 4e f6 21 41                  	movw	r1, #60449
 8012c48: c0 f6 01 01                  	movt	r1, #2049
 8012c4c: 98 47                        	blx	r3
 8012c4e: 50 b9                        	cbnz	r0, #20
 8012c50: 00 99                        	ldr	r1, [sp]
 8012c52: 01 22                        	movs	r2, #1
 8012c54: 88 69                        	ldr	r0, [r1, #24]
 8012c56: c9 69                        	ldr	r1, [r1, #28]
 8012c58: cb 68                        	ldr	r3, [r1, #12]
 8012c5a: 4f f2 69 61                  	movw	r1, #63081
 8012c5e: c0 f6 01 01                  	movt	r1, #2049
 8012c62: 98 47                        	blx	r3
 8012c64: 04 46                        	mov	r4, r0
 8012c66: 8d f8 08 40                  	strb.w	r4, [sp, #8]
 8012c6a: 00 2c                        	cmp	r4, #0
 8012c6c: 18 bf                        	it	ne
 8012c6e: 01 24                        	movne	r4, #1
;     }
 8012c70: 20 46                        	mov	r0, r4
 8012c72: 04 b0                        	add	sp, #16
 8012c74: b0 bd                        	pop	{r4, r5, r7, pc}
 8012c76: 00 00                        	movs	r0, r0

08012c78 _$LT$bluetooth_hci..event..Event$LT$V$GT$$u20$as$u20$core..fmt..Debug$GT$::fmt::h02a43957832844d7:
; #[derive(Clone, Debug)]
 8012c78: b0 b5                        	push	{r4, r5, r7, lr}
 8012c7a: 02 af                        	add	r7, sp, #8
 8012c7c: 84 b0                        	sub	sp, #16
 8012c7e: 04 46                        	mov	r4, r0
 8012c80: 00 78                        	ldrb	r0, [r0]
 8012c82: 0d 46                        	mov	r5, r1
 8012c84: df e8 10 f0                  	tbh	[pc, r0, lsl #1]

08012c88 $d.151:
 8012c88:	10 00 27 00	.word	0x00270010
 8012c8c:	3e 00 55 00	.word	0x0055003e
 8012c90:	6c 00 84 00	.word	0x0084006c
 8012c94:	9b 00 b2 00	.word	0x00b2009b
 8012c98:	c9 00 e0 00	.word	0x00e000c9
 8012c9c:	f7 00 0f 01	.word	0x010f00f7
 8012ca0:	26 01 3e 01	.word	0x013e0126
 8012ca4:	56 01 6e 01	.word	0x016e0156

08012ca8 $t.152:
 8012ca8: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8012cac: 12 22                        	movs	r2, #18
 8012cae: cb 68                        	ldr	r3, [r1, #12]
 8012cb0: 4d f2 64 21                  	movw	r1, #53860
 8012cb4: c0 f6 01 01                  	movt	r1, #2049
 8012cb8: 98 47                        	blx	r3
 8012cba: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8012cbe: 00 20                        	movs	r0, #0
 8012cc0: 4d f2 78 22                  	movw	r2, #53880
 8012cc4: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8012cc8: 01 90                        	str	r0, [sp, #4]
;     ConnectionComplete(ConnectionComplete<V::Status>),
 8012cca: a0 1c                        	adds	r0, r4, #2
 8012ccc: 03 a9                        	add	r1, sp, #12
 8012cce: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Debug)]
 8012cd0: c0 f6 01 02                  	movt	r2, #2049
 8012cd4: 5d e1                        	b	#698 <$t.152+0x2ee>
 8012cd6: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8012cda: 15 22                        	movs	r2, #21
 8012cdc: cb 68                        	ldr	r3, [r1, #12]
 8012cde: 4d f2 3c 21                  	movw	r1, #53820
 8012ce2: c0 f6 01 01                  	movt	r1, #2049
 8012ce6: 98 47                        	blx	r3
 8012ce8: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8012cec: 00 20                        	movs	r0, #0
 8012cee: 4d f2 54 22                  	movw	r2, #53844
 8012cf2: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8012cf6: 01 90                        	str	r0, [sp, #4]
;     DisconnectionComplete(DisconnectionComplete<V::Status>),
 8012cf8: a0 1c                        	adds	r0, r4, #2
 8012cfa: 03 a9                        	add	r1, sp, #12
 8012cfc: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Debug)]
 8012cfe: c0 f6 01 02                  	movt	r2, #2049
 8012d02: 46 e1                        	b	#652 <$t.152+0x2ee>
 8012d04: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8012d08: 10 22                        	movs	r2, #16
 8012d0a: cb 68                        	ldr	r3, [r1, #12]
 8012d0c: 4c f6 ec 61                  	movw	r1, #52972
 8012d10: c0 f6 01 01                  	movt	r1, #2049
 8012d14: 98 47                        	blx	r3
 8012d16: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8012d1a: 00 20                        	movs	r0, #0
 8012d1c: 4d f2 2c 22                  	movw	r2, #53804
 8012d20: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8012d24: 01 90                        	str	r0, [sp, #4]
;     EncryptionChange(EncryptionChange<V::Status>),
 8012d26: a0 1c                        	adds	r0, r4, #2
 8012d28: 03 a9                        	add	r1, sp, #12
 8012d2a: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Debug)]
 8012d2c: c0 f6 01 02                  	movt	r2, #2049
 8012d30: 2f e1                        	b	#606 <$t.152+0x2ee>
 8012d32: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8012d36: 24 22                        	movs	r2, #36
 8012d38: cb 68                        	ldr	r3, [r1, #12]
 8012d3a: 4c f6 b8 61                  	movw	r1, #52920
 8012d3e: c0 f6 01 01                  	movt	r1, #2049
 8012d42: 98 47                        	blx	r3
 8012d44: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8012d48: 00 20                        	movs	r0, #0
 8012d4a: 4c f6 dc 62                  	movw	r2, #52956
 8012d4e: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8012d52: 01 90                        	str	r0, [sp, #4]
;     ReadRemoteVersionInformationComplete(RemoteVersionInformation<V::Status>),
 8012d54: a0 1c                        	adds	r0, r4, #2
 8012d56: 03 a9                        	add	r1, sp, #12
 8012d58: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Debug)]
 8012d5a: c0 f6 01 02                  	movt	r2, #2049
 8012d5e: 18 e1                        	b	#560 <$t.152+0x2ee>
 8012d60: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8012d64: 0f 22                        	movs	r2, #15
 8012d66: cb 68                        	ldr	r3, [r1, #12]
 8012d68: 4c f6 98 61                  	movw	r1, #52888
 8012d6c: c0 f6 01 01                  	movt	r1, #2049
 8012d70: 98 47                        	blx	r3
 8012d72: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8012d76: 00 20                        	movs	r0, #0
 8012d78: 4c f6 a8 62                  	movw	r2, #52904
 8012d7c: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8012d80: 01 90                        	str	r0, [sp, #4]
;     CommandComplete(command::CommandComplete<V>),
 8012d82: 04 f1 08 00                  	add.w	r0, r4, #8
 8012d86: 03 a9                        	add	r1, sp, #12
 8012d88: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Debug)]
 8012d8a: c0 f6 01 02                  	movt	r2, #2049
 8012d8e: 00 e1                        	b	#512 <$t.152+0x2ee>
 8012d90: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8012d94: 0d 22                        	movs	r2, #13
 8012d96: cb 68                        	ldr	r3, [r1, #12]
 8012d98: 4c f6 78 61                  	movw	r1, #52856
 8012d9c: c0 f6 01 01                  	movt	r1, #2049
 8012da0: 98 47                        	blx	r3
 8012da2: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8012da6: 00 20                        	movs	r0, #0
 8012da8: 4c f6 88 62                  	movw	r2, #52872
 8012dac: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8012db0: 01 90                        	str	r0, [sp, #4]
;     CommandStatus(CommandStatus<V::Status>),
 8012db2: a0 1c                        	adds	r0, r4, #2
 8012db4: 03 a9                        	add	r1, sp, #12
 8012db6: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Debug)]
 8012db8: c0 f6 01 02                  	movt	r2, #2049
 8012dbc: e9 e0                        	b	#466 <$t.152+0x2ee>
 8012dbe: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8012dc2: 0d 22                        	movs	r2, #13
 8012dc4: cb 68                        	ldr	r3, [r1, #12]
 8012dc6: 4e f6 b5 01                  	movw	r1, #59573
 8012dca: c0 f6 01 01                  	movt	r1, #2049
 8012dce: 98 47                        	blx	r3
 8012dd0: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8012dd4: 00 20                        	movs	r0, #0
 8012dd6: 4c f6 68 62                  	movw	r2, #52840
 8012dda: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8012dde: 01 90                        	str	r0, [sp, #4]
;     HardwareError(HardwareError),
 8012de0: 60 1c                        	adds	r0, r4, #1
 8012de2: 03 a9                        	add	r1, sp, #12
 8012de4: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Debug)]
 8012de6: c0 f6 01 02                  	movt	r2, #2049
 8012dea: d2 e0                        	b	#420 <$t.152+0x2ee>
 8012dec: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8012df0: 18 22                        	movs	r2, #24
 8012df2: cb 68                        	ldr	r3, [r1, #12]
 8012df4: 4c f6 40 61                  	movw	r1, #52800
 8012df8: c0 f6 01 01                  	movt	r1, #2049
 8012dfc: 98 47                        	blx	r3
 8012dfe: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8012e02: 00 20                        	movs	r0, #0
 8012e04: 4c f6 58 62                  	movw	r2, #52824
 8012e08: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8012e0c: 01 90                        	str	r0, [sp, #4]
;     NumberOfCompletedPackets(NumberOfCompletedPackets),
 8012e0e: 20 1d                        	adds	r0, r4, #4
 8012e10: 03 a9                        	add	r1, sp, #12
 8012e12: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Debug)]
 8012e14: c0 f6 01 02                  	movt	r2, #2049
 8012e18: bb e0                        	b	#374 <$t.152+0x2ee>
 8012e1a: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8012e1e: 12 22                        	movs	r2, #18
 8012e20: cb 68                        	ldr	r3, [r1, #12]
 8012e22: 4e f6 c2 01                  	movw	r1, #59586
 8012e26: c0 f6 01 01                  	movt	r1, #2049
 8012e2a: 98 47                        	blx	r3
 8012e2c: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8012e30: 00 20                        	movs	r0, #0
 8012e32: 4c f6 30 62                  	movw	r2, #52784
 8012e36: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8012e3a: 01 90                        	str	r0, [sp, #4]
;     DataBufferOverflow(DataBufferOverflow),
 8012e3c: 60 1c                        	adds	r0, r4, #1
 8012e3e: 03 a9                        	add	r1, sp, #12
 8012e40: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Debug)]
 8012e42: c0 f6 01 02                  	movt	r2, #2049
 8012e46: a4 e0                        	b	#328 <$t.152+0x2ee>
 8012e48: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8012e4c: 1c 22                        	movs	r2, #28
 8012e4e: cb 68                        	ldr	r3, [r1, #12]
 8012e50: 4c f6 04 61                  	movw	r1, #52740
 8012e54: c0 f6 01 01                  	movt	r1, #2049
 8012e58: 98 47                        	blx	r3
 8012e5a: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8012e5e: 00 20                        	movs	r0, #0
 8012e60: 4c f6 20 62                  	movw	r2, #52768
 8012e64: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8012e68: 01 90                        	str	r0, [sp, #4]
;     EncryptionKeyRefreshComplete(EncryptionKeyRefreshComplete<V::Status>),
 8012e6a: a0 1c                        	adds	r0, r4, #2
 8012e6c: 03 a9                        	add	r1, sp, #12
 8012e6e: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Debug)]
 8012e70: c0 f6 01 02                  	movt	r2, #2049
 8012e74: 8d e0                        	b	#282 <$t.152+0x2ee>
 8012e76: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8012e7a: 14 22                        	movs	r2, #20
 8012e7c: cb 68                        	ldr	r3, [r1, #12]
 8012e7e: 4c f6 e0 51                  	movw	r1, #52704
 8012e82: c0 f6 01 01                  	movt	r1, #2049
 8012e86: 98 47                        	blx	r3
 8012e88: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8012e8c: 00 20                        	movs	r0, #0
 8012e8e: 4c f6 f4 52                  	movw	r2, #52724
 8012e92: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8012e96: 01 90                        	str	r0, [sp, #4]
;     LeConnectionComplete(LeConnectionComplete<V::Status>),
 8012e98: 04 f1 08 00                  	add.w	r0, r4, #8
 8012e9c: 03 a9                        	add	r1, sp, #12
 8012e9e: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Debug)]
 8012ea0: c0 f6 01 02                  	movt	r2, #2049
 8012ea4: 75 e0                        	b	#234 <$t.152+0x2ee>
 8012ea6: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8012eaa: 13 22                        	movs	r2, #19
 8012eac: cb 68                        	ldr	r3, [r1, #12]
 8012eae: 4c f6 bc 51                  	movw	r1, #52668
 8012eb2: c0 f6 01 01                  	movt	r1, #2049
 8012eb6: 98 47                        	blx	r3
 8012eb8: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8012ebc: 00 20                        	movs	r0, #0
 8012ebe: 4c f6 d0 52                  	movw	r2, #52688
 8012ec2: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8012ec6: 01 90                        	str	r0, [sp, #4]
;     LeAdvertisingReport(LeAdvertisingReport),
 8012ec8: 20 1d                        	adds	r0, r4, #4
 8012eca: 03 a9                        	add	r1, sp, #12
 8012ecc: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Debug)]
 8012ece: c0 f6 01 02                  	movt	r2, #2049
 8012ed2: 5e e0                        	b	#188 <$t.152+0x2ee>
 8012ed4: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8012ed8: 1a 22                        	movs	r2, #26
 8012eda: cb 68                        	ldr	r3, [r1, #12]
 8012edc: 4c f6 90 51                  	movw	r1, #52624
 8012ee0: c0 f6 01 01                  	movt	r1, #2049
 8012ee4: 98 47                        	blx	r3
 8012ee6: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8012eea: 00 20                        	movs	r0, #0
 8012eec: 4c f6 ac 52                  	movw	r2, #52652
 8012ef0: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8012ef4: 01 90                        	str	r0, [sp, #4]
;     LeConnectionUpdateComplete(LeConnectionUpdateComplete<V::Status>),
 8012ef6: 04 f1 08 00                  	add.w	r0, r4, #8
 8012efa: 03 a9                        	add	r1, sp, #12
 8012efc: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Debug)]
 8012efe: c0 f6 01 02                  	movt	r2, #2049
 8012f02: 46 e0                        	b	#140 <$t.152+0x2ee>
 8012f04: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8012f08: 20 22                        	movs	r2, #32
 8012f0a: cb 68                        	ldr	r3, [r1, #12]
 8012f0c: 4c f6 04 31                  	movw	r1, #51972
 8012f10: c0 f6 01 01                  	movt	r1, #2049
 8012f14: 98 47                        	blx	r3
 8012f16: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8012f1a: 00 20                        	movs	r0, #0
 8012f1c: 4c f6 80 52                  	movw	r2, #52608
 8012f20: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8012f24: 01 90                        	str	r0, [sp, #4]
;     LeReadRemoteUsedFeaturesComplete(LeReadRemoteUsedFeaturesComplete<V::Status>),
 8012f26: 04 f1 08 00                  	add.w	r0, r4, #8
 8012f2a: 03 a9                        	add	r1, sp, #12
 8012f2c: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Debug)]
 8012f2e: c0 f6 01 02                  	movt	r2, #2049
 8012f32: 2e e0                        	b	#92 <$t.152+0x2ee>
 8012f34: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8012f38: 14 22                        	movs	r2, #20
 8012f3a: cb 68                        	ldr	r3, [r1, #12]
 8012f3c: 4e f6 2d 11                  	movw	r1, #59693
 8012f40: c0 f6 01 01                  	movt	r1, #2049
 8012f44: 98 47                        	blx	r3
 8012f46: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8012f4a: 00 20                        	movs	r0, #0
 8012f4c: 4c f6 70 52                  	movw	r2, #52592
 8012f50: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8012f54: 01 90                        	str	r0, [sp, #4]
;     LeLongTermKeyRequest(LeLongTermKeyRequest),
 8012f56: 04 f1 08 00                  	add.w	r0, r4, #8
 8012f5a: 03 a9                        	add	r1, sp, #12
 8012f5c: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Debug)]
 8012f5e: c0 f6 01 02                  	movt	r2, #2049
 8012f62: 16 e0                        	b	#44 <$t.152+0x2ee>
 8012f64: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8012f68: 06 22                        	movs	r2, #6
 8012f6a: cb 68                        	ldr	r3, [r1, #12]
 8012f6c: 4e f6 fc 41                  	movw	r1, #60668
 8012f70: c0 f6 01 01                  	movt	r1, #2049
 8012f74: 98 47                        	blx	r3
 8012f76: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8012f7a: 00 20                        	movs	r0, #0
 8012f7c: 4c f6 60 52                  	movw	r2, #52576
 8012f80: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8012f84: 01 90                        	str	r0, [sp, #4]
;     Vendor(V),
 8012f86: 04 f1 08 00                  	add.w	r0, r4, #8
 8012f8a: 03 a9                        	add	r1, sp, #12
 8012f8c: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Debug)]
 8012f8e: c0 f6 01 02                  	movt	r2, #2049
 8012f92: 68 46                        	mov	r0, sp
 8012f94: 00 95                        	str	r5, [sp]
 8012f96: 03 f0 48 fd                  	bl	#14992
 8012f9a: 01 98                        	ldr	r0, [sp, #4]
 8012f9c: 9d f8 08 40                  	ldrb.w	r4, [sp, #8]
 8012fa0: 18 b3                        	cbz	r0, #70
 8012fa2: 0c b1                        	cbz	r4, #2
 8012fa4: 01 24                        	movs	r4, #1
 8012fa6: 1e e0                        	b	#60 <$t.152+0x342>
 8012fa8: 01 28                        	cmp	r0, #1
 8012faa: 11 d1                        	bne	#34 <$t.152+0x32c>
 8012fac: 9d f8 09 00                  	ldrb.w	r0, [sp, #9]
 8012fb0: 70 b1                        	cbz	r0, #28
 8012fb2: 00 99                        	ldr	r1, [sp]
 8012fb4: 08 78                        	ldrb	r0, [r1]
 8012fb6: 40 07                        	lsls	r0, r0, #29
 8012fb8: 0a d4                        	bmi	#20 <$t.152+0x32c>
 8012fba: 88 69                        	ldr	r0, [r1, #24]
 8012fbc: 01 22                        	movs	r2, #1
 8012fbe: c9 69                        	ldr	r1, [r1, #28]
 8012fc0: 01 24                        	movs	r4, #1
 8012fc2: cb 68                        	ldr	r3, [r1, #12]
 8012fc4: 4e f6 21 41                  	movw	r1, #60449
 8012fc8: c0 f6 01 01                  	movt	r1, #2049
 8012fcc: 98 47                        	blx	r3
 8012fce: 50 b9                        	cbnz	r0, #20
 8012fd0: 00 99                        	ldr	r1, [sp]
 8012fd2: 01 22                        	movs	r2, #1
 8012fd4: 88 69                        	ldr	r0, [r1, #24]
 8012fd6: c9 69                        	ldr	r1, [r1, #28]
 8012fd8: cb 68                        	ldr	r3, [r1, #12]
 8012fda: 4f f2 69 61                  	movw	r1, #63081
 8012fde: c0 f6 01 01                  	movt	r1, #2049
 8012fe2: 98 47                        	blx	r3
 8012fe4: 04 46                        	mov	r4, r0
 8012fe6: 8d f8 08 40                  	strb.w	r4, [sp, #8]
 8012fea: 00 2c                        	cmp	r4, #0
 8012fec: 18 bf                        	it	ne
 8012fee: 01 24                        	movne	r4, #1
 8012ff0: 20 46                        	mov	r0, r4
 8012ff2: 04 b0                        	add	sp, #16
 8012ff4: b0 bd                        	pop	{r4, r5, r7, pc}

08012ff6 cortex_m::interrupt::enable::hf780bba1a8be1b33:
;             __cpsie();
 8012ff6: 09 f0 40 b9                  	b.w	#37504 <__dsb>

08012ffa cortex_m::interrupt::disable::h5d1ed09fa403fb31:
;             __cpsid();
 8012ffa: 09 f0 3c b9                  	b.w	#37496 <__cpsie>

08012ffe _$LT$bluetooth_hci..event..command..CommandComplete$LT$V$GT$$u20$as$u20$core..fmt..Debug$GT$::fmt::he1ffb4ad9ae97c6b:
; #[derive(Clone, Debug)]
 8012ffe: b0 b5                        	push	{r4, r5, r7, lr}
 8013000: 02 af                        	add	r7, sp, #8
 8013002: 84 b0                        	sub	sp, #16
 8013004: 0d 46                        	mov	r5, r1
 8013006: 04 46                        	mov	r4, r0
 8013008: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 801300c: 0f 22                        	movs	r2, #15
 801300e: cb 68                        	ldr	r3, [r1, #12]
 8013010: 4c f6 98 61                  	movw	r1, #52888
 8013014: c0 f6 01 01                  	movt	r1, #2049
 8013018: 98 47                        	blx	r3
 801301a: 8d f8 08 00                  	strb.w	r0, [sp, #8]
;     pub num_hci_command_packets: u8,
 801301e: 04 f5 88 70                  	add.w	r0, r4, #272
 8013022: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Debug)]
 8013024: 4d f2 78 30                  	movw	r0, #54136
 8013028: 00 21                        	movs	r1, #0
 801302a: c0 f6 01 00                  	movt	r0, #2049
 801302e: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 8013032: 4d f2 cc 41                  	movw	r1, #54476
 8013036: 00 90                        	str	r0, [sp]
 8013038: 01 a8                        	add	r0, sp, #4
 801303a: 03 ab                        	add	r3, sp, #12
 801303c: c0 f6 01 01                  	movt	r1, #2049
 8013040: 17 22                        	movs	r2, #23
 8013042: 01 95                        	str	r5, [sp, #4]
 8013044: 03 f0 74 fb                  	bl	#14056
 8013048: 4d f2 30 61                  	movw	r1, #54832
 801304c: 03 ab                        	add	r3, sp, #12
 801304e: c0 f6 01 01                  	movt	r1, #2049
 8013052: 0d 22                        	movs	r2, #13
 8013054: 00 91                        	str	r1, [sp]
 8013056: 4d f2 20 61                  	movw	r1, #54816
 801305a: c0 f6 01 01                  	movt	r1, #2049
;     pub return_params: ReturnParameters<V>,
 801305e: 03 94                        	str	r4, [sp, #12]
; #[derive(Clone, Debug)]
 8013060: 03 f0 66 fb                  	bl	#14028
 8013064: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 8013068: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 801306c: b9 b1                        	cbz	r1, #46
 801306e: 08 b1                        	cbz	r0, #2
 8013070: 01 20                        	movs	r0, #1
 8013072: 12 e0                        	b	#36 <_ZN92_$LT$bluetooth_hci..event..command..CommandComplete$LT$V$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17he1ffb4ad9ae97c6bE+0xa0>
 8013074: 01 99                        	ldr	r1, [sp, #4]
 8013076: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801307a: 09 78                        	ldrb	r1, [r1]
 801307c: d3 68                        	ldr	r3, [r2, #12]
 801307e: 49 07                        	lsls	r1, r1, #29
 8013080: 05 d4                        	bmi	#10 <_ZN92_$LT$bluetooth_hci..event..command..CommandComplete$LT$V$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17he1ffb4ad9ae97c6bE+0x94>
 8013082: 4e f6 1c 41                  	movw	r1, #60444
 8013086: 02 22                        	movs	r2, #2
 8013088: c0 f6 01 01                  	movt	r1, #2049
 801308c: 04 e0                        	b	#8 <_ZN92_$LT$bluetooth_hci..event..command..CommandComplete$LT$V$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17he1ffb4ad9ae97c6bE+0x9e>
 801308e: 4e f6 d6 41                  	movw	r1, #60630
 8013092: 01 22                        	movs	r2, #1
 8013094: c0 f6 01 01                  	movt	r1, #2049
 8013098: 98 47                        	blx	r3
 801309a: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 801309e: 00 28                        	cmp	r0, #0
 80130a0: 18 bf                        	it	ne
 80130a2: 01 20                        	movne	r0, #1
 80130a4: 04 b0                        	add	sp, #16
 80130a6: b0 bd                        	pop	{r4, r5, r7, pc}

080130a8 stm32wb55_homekit::init::hae0ebbcfbe453f5b:
; #[app(device = stm32wb_hal::pac, peripherals = true)]
 80130a8: f0 b5                        	push	{r4, r5, r6, r7, lr}
 80130aa: 03 af                        	add	r7, sp, #12
 80130ac: 2d e9 00 0f                  	push.w	{r8, r9, r10, r11}
 80130b0: cf b0                        	sub	sp, #316
 80130b2: 40 f2 08 08                  	movw	r8, #8
 80130b6: c5 f6 00 08                  	movt	r8, #22528
;     intrinsics::volatile_load(src)
 80130ba: d8 f8 00 10                  	ldr.w	r1, [r8]
;         self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
 80130be: 41 f4 00 41                  	orr	r1, r1, #32768
;     intrinsics::volatile_store(dst, src);
 80130c2: c8 f8 00 10                  	str.w	r1, [r8]
;     intrinsics::volatile_load(src)
 80130c6: d8 f8 f8 13                  	ldr.w	r1, [r8, #1016]
;         self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
 80130ca: 41 f4 80 71                  	orr	r1, r1, #256
;     intrinsics::volatile_store(dst, src);
 80130ce: c8 f8 f8 13                  	str.w	r1, [r8, #1016]
;     intrinsics::volatile_load(src)
 80130d2: d8 f8 f8 13                  	ldr.w	r1, [r8, #1016]
;         self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
 80130d6: 41 f4 80 71                  	orr	r1, r1, #256
;     intrinsics::volatile_store(dst, src);
 80130da: c8 f8 f8 13                  	str.w	r1, [r8, #1016]
;     intrinsics::volatile_load(src)
 80130de: d8 f8 88 10                  	ldr.w	r1, [r8, #136]
;         self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
 80130e2: 41 f0 01 01                  	orr	r1, r1, #1
;     intrinsics::volatile_store(dst, src);
 80130e6: c8 f8 88 10                  	str.w	r1, [r8, #136]
 80130ea: 41 f2 98 21                  	movw	r1, #4760
 80130ee: 00 eb 01 0b                  	add.w	r11, r0, r1
 80130f2: 02 90                        	str	r0, [sp, #8]
 80130f4: 00 f5 8c 50                  	add.w	r0, r0, #4480
 80130f8: 01 90                        	str	r0, [sp, #4]
;     intrinsics::volatile_load(src)
 80130fa: d8 f8 88 00                  	ldr.w	r0, [r8, #136]
;             while !self.rb.bdcr.read().lserdy().bit_is_set() {}
 80130fe: 80 07                        	lsls	r0, r0, #30
;     intrinsics::volatile_load(src)
 8013100: 5c bf                        	itt	pl
 8013102: d8 f8 88 00                  	ldrpl.w	r0, [r8, #136]
;             while !self.rb.bdcr.read().lserdy().bit_is_set() {}
 8013106: 5f ea 80 70                  	lslspl.w	r0, r0, #30
 801310a: 07 d4                        	bmi	#14 <_ZN17stm32wb55_homekit4init17hae0ebbcfbe453f5bE+0x78>
;     intrinsics::volatile_load(src)
 801310c: d8 f8 88 00                  	ldr.w	r0, [r8, #136]
;             while !self.rb.bdcr.read().lserdy().bit_is_set() {}
 8013110: 80 07                        	lsls	r0, r0, #30
 8013112: 03 d4                        	bmi	#6 <_ZN17stm32wb55_homekit4init17hae0ebbcfbe453f5bE+0x78>
;     intrinsics::volatile_load(src)
 8013114: d8 f8 88 00                  	ldr.w	r0, [r8, #136]
;             while !self.rb.bdcr.read().lserdy().bit_is_set() {}
 8013118: 80 07                        	lsls	r0, r0, #30
 801311a: ee d5                        	bpl	#-36 <_ZN17stm32wb55_homekit4init17hae0ebbcfbe453f5bE+0x56>
 801311c: d8 f8 8c 00                  	ldr.w	r0, [r8, #140]
;         self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
 8013120: 40 f0 01 00                  	orr	r0, r0, #1
;     intrinsics::volatile_store(dst, src);
 8013124: c8 f8 8c 00                  	str.w	r0, [r8, #140]
;     intrinsics::volatile_load(src)
 8013128: d8 f8 8c 00                  	ldr.w	r0, [r8, #140]
;             while !self.rb.csr.read().lsi1rdy().bit_is_set() {}
 801312c: 80 07                        	lsls	r0, r0, #30
;     intrinsics::volatile_load(src)
 801312e: 5c bf                        	itt	pl
 8013130: d8 f8 8c 00                  	ldrpl.w	r0, [r8, #140]
;             while !self.rb.csr.read().lsi1rdy().bit_is_set() {}
 8013134: 5f ea 80 70                  	lslspl.w	r0, r0, #30
 8013138: 07 d4                        	bmi	#14 <_ZN17stm32wb55_homekit4init17hae0ebbcfbe453f5bE+0xa6>
;     intrinsics::volatile_load(src)
 801313a: d8 f8 8c 00                  	ldr.w	r0, [r8, #140]
;             while !self.rb.csr.read().lsi1rdy().bit_is_set() {}
 801313e: 80 07                        	lsls	r0, r0, #30
 8013140: 03 d4                        	bmi	#6 <_ZN17stm32wb55_homekit4init17hae0ebbcfbe453f5bE+0xa6>
;     intrinsics::volatile_load(src)
 8013142: d8 f8 8c 00                  	ldr.w	r0, [r8, #140]
;             while !self.rb.csr.read().lsi1rdy().bit_is_set() {}
 8013146: 80 07                        	lsls	r0, r0, #30
 8013148: ee d5                        	bpl	#-36 <_ZN17stm32wb55_homekit4init17hae0ebbcfbe453f5bE+0x84>
 801314a: 4f f0 b0 40                  	mov.w	r0, #1476395008
;     intrinsics::volatile_load(src)
 801314e: 01 68                        	ldr	r1, [r0]
;         self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
 8013150: 21 f4 88 11                  	bic	r1, r1, #1114112
;         self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
 8013154: 01 f5 80 31                  	add.w	r1, r1, #65536
;     intrinsics::volatile_store(dst, src);
 8013158: 01 60                        	str	r1, [r0]
;     intrinsics::volatile_load(src)
 801315a: 01 68                        	ldr	r1, [r0]
;                 while !self.rb.cr.read().hserdy().bit_is_set() {}
 801315c: 89 03                        	lsls	r1, r1, #14
;     intrinsics::volatile_load(src)
 801315e: 5c bf                        	itt	pl
 8013160: 01 68                        	ldrpl	r1, [r0]
;                 while !self.rb.cr.read().hserdy().bit_is_set() {}
 8013162: 5f ea 81 31                  	lslspl.w	r1, r1, #14
 8013166: 05 d4                        	bmi	#10 <_ZN17stm32wb55_homekit4init17hae0ebbcfbe453f5bE+0xd0>
;     intrinsics::volatile_load(src)
 8013168: 01 68                        	ldr	r1, [r0]
;                 while !self.rb.cr.read().hserdy().bit_is_set() {}
 801316a: 89 03                        	lsls	r1, r1, #14
 801316c: 02 d4                        	bmi	#4 <_ZN17stm32wb55_homekit4init17hae0ebbcfbe453f5bE+0xd0>
;     intrinsics::volatile_load(src)
 801316e: 01 68                        	ldr	r1, [r0]
;                 while !self.rb.cr.read().hserdy().bit_is_set() {}
 8013170: 89 03                        	lsls	r1, r1, #14
 8013172: f2 d5                        	bpl	#-28 <_ZN17stm32wb55_homekit4init17hae0ebbcfbe453f5bE+0xb6>
 8013174: 48 f2 8c 01                  	movw	r1, #32908
;     intrinsics::volatile_load(src)
 8013178: d8 f8 04 00                  	ldr.w	r0, [r8, #4]
 801317c: c0 f2 c0 01                  	movt	r1, #192
;         self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
 8013180: 08 40                        	ands	r0, r1
 8013182: 40 f6 13 41                  	movw	r1, #3091
 8013186: c5 f2 05 71                  	movt	r1, #22277
;         self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
 801318a: 08 43                        	orrs	r0, r1
;     intrinsics::volatile_store(dst, src);
 801318c: c8 f8 04 00                  	str.w	r0, [r8, #4]
 8013190: 4f f0 b0 40                  	mov.w	r0, #1476395008
;     intrinsics::volatile_load(src)
 8013194: 01 68                        	ldr	r1, [r0]
;         self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
 8013196: 41 f0 80 71                  	orr	r1, r1, #16777216
;     intrinsics::volatile_store(dst, src);
 801319a: 01 60                        	str	r1, [r0]
;     intrinsics::volatile_load(src)
 801319c: 01 68                        	ldr	r1, [r0]
;         while !self.rb.cr.read().pllrdy().bit_is_set() {}
 801319e: 89 01                        	lsls	r1, r1, #6
;     intrinsics::volatile_load(src)
 80131a0: 5c bf                        	itt	pl
 80131a2: 01 68                        	ldrpl	r1, [r0]
;         while !self.rb.cr.read().pllrdy().bit_is_set() {}
 80131a4: 5f ea 81 11                  	lslspl.w	r1, r1, #6
 80131a8: 05 d4                        	bmi	#10 <_ZN17stm32wb55_homekit4init17hae0ebbcfbe453f5bE+0x112>
;     intrinsics::volatile_load(src)
 80131aa: 01 68                        	ldr	r1, [r0]
;         while !self.rb.cr.read().pllrdy().bit_is_set() {}
 80131ac: 89 01                        	lsls	r1, r1, #6
 80131ae: 02 d4                        	bmi	#4 <_ZN17stm32wb55_homekit4init17hae0ebbcfbe453f5bE+0x112>
;     intrinsics::volatile_load(src)
 80131b0: 01 68                        	ldr	r1, [r0]
;         while !self.rb.cr.read().pllrdy().bit_is_set() {}
 80131b2: 89 01                        	lsls	r1, r1, #6
 80131b4: f2 d5                        	bpl	#-28 <_ZN17stm32wb55_homekit4init17hae0ebbcfbe453f5bE+0xf8>
 80131b6: 44 f2 00 00                  	movw	r0, #16384
 80131ba: 40 f2 03 61                  	movw	r1, #1539
 80131be: c5 f6 00 00                  	movt	r0, #22528
;     intrinsics::volatile_store(dst, src);
 80131c2: 01 60                        	str	r1, [r0]
;     intrinsics::volatile_load(src)
 80131c4: d8 f8 00 00                  	ldr.w	r0, [r8]
;         self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
 80131c8: 40 f0 03 00                  	orr	r0, r0, #3
;     intrinsics::volatile_store(dst, src);
 80131cc: c8 f8 00 00                  	str.w	r0, [r8]
;     intrinsics::volatile_load(src)
 80131d0: d8 f8 00 00                  	ldr.w	r0, [r8]
;                 fn eq(&self, other: &$t) -> bool { (*self) == (*other) }
 80131d4: 00 f0 03 00                  	and	r0, r0, #3
;         while self.rb.cfgr.read().sw() != sysclk_bits {}
 80131d8: 03 28                        	cmp	r0, #3
;     intrinsics::volatile_load(src)
 80131da: 1e bf                        	ittt	ne
 80131dc: d8 f8 00 00                  	ldrne.w	r0, [r8]
;                 fn eq(&self, other: &$t) -> bool { (*self) == (*other) }
 80131e0: 00 f0 03 00                  	andne	r0, r0, #3
;         while self.rb.cfgr.read().sw() != sysclk_bits {}
 80131e4: 03 28                        	cmpne	r0, #3
 80131e6: 0b d0                        	beq	#22 <_ZN17stm32wb55_homekit4init17hae0ebbcfbe453f5bE+0x15c>
;     intrinsics::volatile_load(src)
 80131e8: d8 f8 00 00                  	ldr.w	r0, [r8]
;                 fn eq(&self, other: &$t) -> bool { (*self) == (*other) }
 80131ec: 00 f0 03 00                  	and	r0, r0, #3
;         while self.rb.cfgr.read().sw() != sysclk_bits {}
 80131f0: 03 28                        	cmp	r0, #3
 80131f2: 05 d0                        	beq	#10 <_ZN17stm32wb55_homekit4init17hae0ebbcfbe453f5bE+0x15c>
;     intrinsics::volatile_load(src)
 80131f4: d8 f8 00 00                  	ldr.w	r0, [r8]
;                 fn eq(&self, other: &$t) -> bool { (*self) == (*other) }
 80131f8: 00 f0 03 00                  	and	r0, r0, #3
;         while self.rb.cfgr.read().sw() != sysclk_bits {}
 80131fc: 03 28                        	cmp	r0, #3
 80131fe: e7 d1                        	bne	#-50 <_ZN17stm32wb55_homekit4init17hae0ebbcfbe453f5bE+0x12c>
;     intrinsics::volatile_load(src)
 8013200: d8 f8 00 00                  	ldr.w	r0, [r8]
 8013204: 80 21                        	movs	r1, #128
;         self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
 8013206: 20 f0 f0 00                  	bic	r0, r0, #240
;     intrinsics::volatile_store(dst, src);
 801320a: c8 f8 00 00                  	str.w	r0, [r8]
;     intrinsics::volatile_load(src)
 801320e: d8 f8 00 01                  	ldr.w	r0, [r8, #256]
;         self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
 8013212: 61 f3 07 00                  	bfi	r0, r1, #0, #8
;     intrinsics::volatile_store(dst, src);
 8013216: c8 f8 00 01                  	str.w	r0, [r8, #256]
;     intrinsics::volatile_load(src)
 801321a: d8 f8 00 00                  	ldr.w	r0, [r8]
;         while !self.rb.cfgr.read().hpref().bit_is_set() {}
 801321e: c0 03                        	lsls	r0, r0, #15
;     intrinsics::volatile_load(src)
 8013220: 5c bf                        	itt	pl
 8013222: d8 f8 00 00                  	ldrpl.w	r0, [r8]
;         while !self.rb.cfgr.read().hpref().bit_is_set() {}
 8013226: 5f ea c0 30                  	lslspl.w	r0, r0, #15
 801322a: 10 d4                        	bmi	#32 <_ZN17stm32wb55_homekit4init17hae0ebbcfbe453f5bE+0x1aa>
;     intrinsics::volatile_load(src)
 801322c: d8 f8 00 00                  	ldr.w	r0, [r8]
;         while !self.rb.cfgr.read().hpref().bit_is_set() {}
 8013230: c0 03                        	lsls	r0, r0, #15
 8013232: 0c d4                        	bmi	#24 <_ZN17stm32wb55_homekit4init17hae0ebbcfbe453f5bE+0x1aa>
;     intrinsics::volatile_load(src)
 8013234: d8 f8 00 00                  	ldr.w	r0, [r8]
;         while !self.rb.cfgr.read().hpref().bit_is_set() {}
 8013238: c0 03                        	lsls	r0, r0, #15
 801323a: ee d5                        	bpl	#-36 <_ZN17stm32wb55_homekit4init17hae0ebbcfbe453f5bE+0x176>
 801323c: 07 e0                        	b	#14 <_ZN17stm32wb55_homekit4init17hae0ebbcfbe453f5bE+0x1aa>
;     intrinsics::volatile_load(src)
 801323e: d8 f8 00 01                  	ldr.w	r0, [r8, #256]
;         while !self.rb.extcfgr.read().shdhpref().bit_is_set() {}
 8013242: c0 03                        	lsls	r0, r0, #15
 8013244: 0c d4                        	bmi	#24 <_ZN17stm32wb55_homekit4init17hae0ebbcfbe453f5bE+0x1bc>
;     intrinsics::volatile_load(src)
 8013246: d8 f8 00 01                  	ldr.w	r0, [r8, #256]
;         while !self.rb.extcfgr.read().shdhpref().bit_is_set() {}
 801324a: c0 03                        	lsls	r0, r0, #15
 801324c: 08 d4                        	bmi	#16 <_ZN17stm32wb55_homekit4init17hae0ebbcfbe453f5bE+0x1bc>
;     intrinsics::volatile_load(src)
 801324e: d8 f8 00 01                  	ldr.w	r0, [r8, #256]
;         while !self.rb.extcfgr.read().shdhpref().bit_is_set() {}
 8013252: c0 03                        	lsls	r0, r0, #15
;     intrinsics::volatile_load(src)
 8013254: 5c bf                        	itt	pl
 8013256: d8 f8 00 01                  	ldrpl.w	r0, [r8, #256]
;         while !self.rb.extcfgr.read().shdhpref().bit_is_set() {}
 801325a: 5f ea c0 30                  	lslspl.w	r0, r0, #15
 801325e: ee d5                        	bpl	#-36 <_ZN17stm32wb55_homekit4init17hae0ebbcfbe453f5bE+0x19a>
;     intrinsics::volatile_load(src)
 8013260: d8 f8 00 00                  	ldr.w	r0, [r8]
;         self.w.bits = (self.w.bits & !(0x07 << 8)) | (((value as u32) & 0x07) << 8);
 8013264: 20 f4 7c 50                  	bic	r0, r0, #16128
;     intrinsics::volatile_store(dst, src);
 8013268: c8 f8 00 00                  	str.w	r0, [r8]
;     intrinsics::volatile_load(src)
 801326c: d8 f8 00 00                  	ldr.w	r0, [r8]
;         while !self.rb.cfgr.read().ppre1f().bit_is_set() {}
 8013270: 80 03                        	lsls	r0, r0, #14
;     intrinsics::volatile_load(src)
 8013272: 5c bf                        	itt	pl
 8013274: d8 f8 00 00                  	ldrpl.w	r0, [r8]
;         while !self.rb.cfgr.read().ppre1f().bit_is_set() {}
 8013278: 5f ea 80 30                  	lslspl.w	r0, r0, #14
 801327c: 0c d4                        	bmi	#24 <_ZN17stm32wb55_homekit4init17hae0ebbcfbe453f5bE+0x1f4>
;     intrinsics::volatile_load(src)
 801327e: d8 f8 00 00                  	ldr.w	r0, [r8]
;         while !self.rb.cfgr.read().ppre1f().bit_is_set() {}
 8013282: 80 03                        	lsls	r0, r0, #14
 8013284: 08 d4                        	bmi	#16 <_ZN17stm32wb55_homekit4init17hae0ebbcfbe453f5bE+0x1f4>
;     intrinsics::volatile_load(src)
 8013286: d8 f8 00 00                  	ldr.w	r0, [r8]
;         while !self.rb.cfgr.read().ppre1f().bit_is_set() {}
 801328a: 80 03                        	lsls	r0, r0, #14
 801328c: ee d5                        	bpl	#-36 <_ZN17stm32wb55_homekit4init17hae0ebbcfbe453f5bE+0x1c8>
 801328e: 03 e0                        	b	#6 <_ZN17stm32wb55_homekit4init17hae0ebbcfbe453f5bE+0x1f4>
;     intrinsics::volatile_load(src)
 8013290: d8 f8 00 00                  	ldr.w	r0, [r8]
;         while !self.rb.cfgr.read().ppre2f().bit_is_set() {}
 8013294: 40 03                        	lsls	r0, r0, #13
 8013296: 0c d4                        	bmi	#24 <_ZN17stm32wb55_homekit4init17hae0ebbcfbe453f5bE+0x20e>
;     intrinsics::volatile_load(src)
 8013298: d8 f8 00 00                  	ldr.w	r0, [r8]
;         while !self.rb.cfgr.read().ppre2f().bit_is_set() {}
 801329c: 40 03                        	lsls	r0, r0, #13
 801329e: 08 d4                        	bmi	#16 <_ZN17stm32wb55_homekit4init17hae0ebbcfbe453f5bE+0x20e>
;     intrinsics::volatile_load(src)
 80132a0: d8 f8 00 00                  	ldr.w	r0, [r8]
;         while !self.rb.cfgr.read().ppre2f().bit_is_set() {}
 80132a4: 40 03                        	lsls	r0, r0, #13
;     intrinsics::volatile_load(src)
 80132a6: 5c bf                        	itt	pl
 80132a8: d8 f8 00 00                  	ldrpl.w	r0, [r8]
;         while !self.rb.cfgr.read().ppre2f().bit_is_set() {}
 80132ac: 5f ea 40 30                  	lslspl.w	r0, r0, #13
 80132b0: ee d5                        	bpl	#-36 <_ZN17stm32wb55_homekit4init17hae0ebbcfbe453f5bE+0x1ec>
;     intrinsics::volatile_load(src)
 80132b2: d8 f8 8c 00                  	ldr.w	r0, [r8, #140]
 80132b6: 01 22                        	movs	r2, #1
 80132b8: 4f f0 00 09                  	mov.w	r9, #0
 80132bc: 46 f6 00 41                  	movw	r1, #27648
;         self.w.bits = (self.w.bits & !(0x03 << 14)) | (((value as u32) & 0x03) << 14);
 80132c0: 62 f3 8f 30                  	bfi	r0, r2, #14, #2
;     intrinsics::volatile_store(dst, src);
 80132c4: c8 f8 8c 00                  	str.w	r0, [r8, #140]
 80132c8: 4f f4 82 70                  	mov.w	r0, #260
;         self
 80132cc: 8d f8 9c 90                  	strb.w	r9, [sp, #156]
 80132d0: ad f8 a9 00                  	strh.w	r0, [sp, #169]
 80132d4: 4f f4 00 20                  	mov.w	r0, #524288
 80132d8: cd f8 a5 00                  	str.w	r0, [sp, #165]
 80132dc: 40 f2 04 10                  	movw	r0, #260
 80132e0: c0 f2 03 00                  	movt	r0, #3
 80132e4: c0 f2 dc 21                  	movt	r1, #732
 80132e8: cd f8 a1 00                  	str.w	r0, [sp, #161]
 80132ec: 40 f6 02 40                  	movw	r0, #3074
 80132f0: c0 f2 03 10                  	movt	r0, #259
 80132f4: 8d f8 ab 20                  	strb.w	r2, [sp, #171]
 80132f8: cd f8 9d 00                  	str.w	r0, [sp, #157]
 80132fc: 01 20                        	movs	r0, #1
 80132fe: c0 f2 03 20                  	movt	r0, #515
 8013302: 01 23                        	movs	r3, #1
 8013304: 26 90                        	str	r0, [sp, #152]
 8013306: 49 f2 00 00                  	movw	r0, #36864
 801330a: c0 f2 d0 30                  	movt	r0, #976
 801330e: 02 26                        	movs	r6, #2
 8013310: cd e9 24 20                  	strd	r2, r0, [sp, #144]
 8013314: cd e9 22 21                  	strd	r2, r1, [sp, #136]
 8013318: cd e9 20 20                  	strd	r2, r0, [sp, #128]
 801331c: 40 f6 00 12                  	movw	r2, #2304
 8013320: c0 f2 3d 02                  	movt	r2, #61
 8013324: cd e9 1e 22                  	strd	r2, r2, [sp, #120]
 8013328: cd e9 1c 22                  	strd	r2, r2, [sp, #112]
 801332c: cd e9 1a 22                  	strd	r2, r2, [sp, #104]
 8013330: cd f8 60 90                  	str.w	r9, [sp, #96]
 8013334: cd e9 16 91                  	strd	r9, r1, [sp, #88]
 8013338: 4f f4 fa 41                  	mov.w	r1, #32000
 801333c: cd f8 50 90                  	str.w	r9, [sp, #80]
 8013340: cd f8 48 90                  	str.w	r9, [sp, #72]
 8013344: cd e9 10 11                  	strd	r1, r1, [sp, #64]
 8013348: 44 f6 00 01                  	movw	r1, #18432
 801334c: c0 f2 e8 11                  	movt	r1, #488
 8013350: cd e9 0e 02                  	strd	r0, r2, [sp, #56]
 8013354: cd e9 0c 02                  	strd	r0, r2, [sp, #48]
 8013358: cd e9 0a 31                  	strd	r3, r1, [sp, #40]
 801335c: 4f f4 00 43                  	mov.w	r3, #32768
 8013360: 09 93                        	str	r3, [sp, #36]
 8013362: 01 23                        	movs	r3, #1
 8013364: cd e9 07 23                  	strd	r2, r3, [sp, #28]
 8013368: 07 22                        	movs	r2, #7
 801336a: cd e9 05 10                  	strd	r1, r0, [sp, #20]
 801336e: 4f f4 80 01                  	mov.w	r1, #4194304
 8013372: cd e9 03 00                  	strd	r0, r0, [sp, #12]
;     intrinsics::volatile_load(src)
 8013376: d8 f8 44 00                  	ldr.w	r0, [r8, #68]
;         self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
 801337a: 40 f0 02 00                  	orr	r0, r0, #2
;     intrinsics::volatile_store(dst, src);
 801337e: c8 f8 44 00                  	str.w	r0, [r8, #68]
;     intrinsics::volatile_load(src)
 8013382: d8 f8 24 00                  	ldr.w	r0, [r8, #36]
;         self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
 8013386: 40 f0 02 00                  	orr	r0, r0, #2
;     intrinsics::volatile_store(dst, src);
 801338a: c8 f8 24 00                  	str.w	r0, [r8, #36]
;     intrinsics::volatile_load(src)
 801338e: d8 f8 24 00                  	ldr.w	r0, [r8, #36]
;         self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
 8013392: 20 f0 02 00                  	bic	r0, r0, #2
;     intrinsics::volatile_store(dst, src);
 8013396: c8 f8 24 00                  	str.w	r0, [r8, #36]
 801339a: 40 f2 00 40                  	movw	r0, #1024
 801339e: c4 f6 00 00                  	movt	r0, #18432
 80133a2: 81 61                        	str	r1, [r0, #24]
;     intrinsics::volatile_load(src)
 80133a4: 01 68                        	ldr	r1, [r0]
;                             w.bits((r.bits() & !(0b11 << offset)) | (mode << offset))
 80133a6: 63 f3 0d 31                  	bfi	r1, r3, #12, #2
;     intrinsics::volatile_store(dst, src);
 80133aa: 01 60                        	str	r1, [r0]
;     intrinsics::volatile_load(src)
 80133ac: 41 68                        	ldr	r1, [r0, #4]
 80133ae: 01 23                        	movs	r3, #1
;                             .modify(|r, w| unsafe { w.bits(r.bits() & !(0b1 << $i)) });
 80133b0: 21 f0 40 01                  	bic	r1, r1, #64
;     intrinsics::volatile_store(dst, src);
 80133b4: 41 60                        	str	r1, [r0, #4]
;     intrinsics::volatile_load(src)
 80133b6: 01 68                        	ldr	r1, [r0]
;                         w.bits((r.bits() & !(0b11 << OFF_MODE)) | (MODE << OFF_MODE))
 80133b8: 66 f3 0d 31                  	bfi	r1, r6, #12, #2
;     intrinsics::volatile_store(dst, src);
 80133bc: 01 60                        	str	r1, [r0]
;     intrinsics::volatile_load(src)
 80133be: 01 6a                        	ldr	r1, [r0, #32]
;                         w.bits((r.bits() & !(0b1111 << OFF_AFR)) | ($NUM << OFF_AFR))
 80133c0: 62 f3 1b 61                  	bfi	r1, r2, #24, #4
;     intrinsics::volatile_store(dst, src);
 80133c4: 01 62                        	str	r1, [r0, #32]
;     intrinsics::volatile_load(src)
 80133c6: 01 68                        	ldr	r1, [r0]
;                         w.bits((r.bits() & !(0b11 << OFF_MODE)) | (MODE << OFF_MODE))
 80133c8: 66 f3 8f 31                  	bfi	r1, r6, #14, #2
;     intrinsics::volatile_store(dst, src);
 80133cc: 01 60                        	str	r1, [r0]
;     intrinsics::volatile_load(src)
 80133ce: 01 6a                        	ldr	r1, [r0, #32]
;                         w.bits((r.bits() & !(0b1111 << OFF_AFR)) | ($NUM << OFF_AFR))
 80133d0: 62 f3 1f 71                  	bfi	r1, r2, #28, #4
;     intrinsics::volatile_store(dst, src);
 80133d4: 01 62                        	str	r1, [r0, #32]
;     intrinsics::volatile_load(src)
 80133d6: d8 f8 58 00                  	ldr.w	r0, [r8, #88]
 80133da: 4b f2 c5 31                  	movw	r1, #46021
 80133de: c9 f2 a2 11                  	movt	r1, #37282
 80133e2: 2e aa                        	add	r2, sp, #184
;         self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
 80133e4: 40 f4 80 40                  	orr	r0, r0, #16384
;     intrinsics::volatile_store(dst, src);
 80133e8: c8 f8 58 00                  	str.w	r0, [r8, #88]
;         self.pclk1
 80133ec: 0c 98                        	ldr	r0, [sp, #48]
;                     let brr = rcc.clocks.pclk1().0 / baud_rate.0;
 80133ee: a0 fb 01 01                  	umull	r0, r1, r0, r1
 80133f2: 08 0c                        	lsrs	r0, r1, #16
 80133f4: 43 f6 00 01                  	movw	r1, #14336
 80133f8: c4 f2 01 01                  	movt	r1, #16385
;     intrinsics::volatile_store(dst, src);
 80133fc: c8 60                        	str	r0, [r1, #12]
 80133fe: c1 f8 04 90                  	str.w	r9, [r1, #4]
 8013402: c1 f8 08 90                  	str.w	r9, [r1, #8]
;     intrinsics::volatile_load(src)
 8013406: 08 68                        	ldr	r0, [r1]
;         self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
 8013408: 40 f0 0d 00                  	orr	r0, r0, #13
;     intrinsics::volatile_store(dst, src);
 801340c: 08 60                        	str	r0, [r1]
 801340e: 4e a8                        	add	r0, sp, #312
 8013410: 2b 90                        	str	r0, [sp, #172]
;         write(&mut self, args)
 8013412: 4e f6 b4 40                  	movw	r0, #60596
 8013416: cd f8 cc 90                  	str.w	r9, [sp, #204]
 801341a: c0 f6 01 00                  	movt	r0, #2049
 801341e: 4c f6 bc 41                  	movw	r1, #52412
 8013422: cd e9 31 90                  	strd	r9, r0, [sp, #196]
 8013426: 4d f6 8c 30                  	movw	r0, #56204
 801342a: c0 f6 01 00                  	movt	r0, #2049
 801342e: cd e9 2f 39                  	strd	r3, r9, [sp, #188]
 8013432: 2e 90                        	str	r0, [sp, #184]
 8013434: 2b a8                        	add	r0, sp, #172
 8013436: c0 f6 01 01                  	movt	r1, #2049
 801343a: 02 f0 23 ff                  	bl	#11846
 801343e: 03 a8                        	add	r0, sp, #12
;         let _rtc = hal::rtc::Rtc::rtc(dp.RTC, &mut rcc);
 8013440: 08 f0 5a fd                  	bl	#35508
;             TL_REF_TABLE = MaybeUninit::new(RefTable {
 8013444: 40 f2 00 01                  	movw	r1, #0
 8013448: 40 f2 80 00                  	movw	r0, #128
 801344c: 40 f2 7c 02                  	movw	r2, #124
 8013450: 40 f2 4c 03                  	movw	r3, #76
 8013454: 40 f2 3c 04                  	movw	r4, #60
 8013458: 40 f2 1c 06                  	movw	r6, #28
 801345c: 40 f2 60 0a                  	movw	r10, #96
 8013460: 40 f2 58 05                  	movw	r5, #88
 8013464: c2 f2 03 01                  	movt	r1, #8195
 8013468: c2 f2 03 00                  	movt	r0, #8195
 801346c: c2 f2 03 02                  	movt	r2, #8195
 8013470: c2 f2 03 03                  	movt	r3, #8195
 8013474: c2 f2 03 04                  	movt	r4, #8195
 8013478: c2 f2 03 06                  	movt	r6, #8195
 801347c: 01 f1 08 0c                  	add.w	r12, r1, #8
 8013480: c2 f2 03 0a                  	movt	r10, #8195
 8013484: c2 f2 03 05                  	movt	r5, #8195
 8013488: c1 e9 00 64                  	strd	r6, r4, [r1]
 801348c: 8c e8 28 04                  	stm.w	r12, {r3, r5, r10}
 8013490: c1 e9 05 20                  	strd	r2, r0, [r1, #20]
;             EVT_POOL = MaybeUninit::zeroed();
 8013494: 40 f2 3c 51                  	movw	r1, #1340
;             TL_MAC_802_15_4_TABLE = MaybeUninit::zeroed();
 8013498: c0 e9 00 99                  	strd	r9, r9, [r0]
 801349c: c0 f8 08 90                  	str.w	r9, [r0, #8]
;             EVT_POOL = MaybeUninit::zeroed();
 80134a0: 40 f2 c0 30                  	movw	r0, #960
 80134a4: c2 f2 03 00                  	movt	r0, #8195
;             TL_DEVICE_INFO_TABLE = MaybeUninit::zeroed();
 80134a8: c6 e9 00 99                  	strd	r9, r9, [r6]
 80134ac: c6 e9 02 99                  	strd	r9, r9, [r6, #8]
 80134b0: c6 e9 04 99                  	strd	r9, r9, [r6, #16]
;             TL_THREAD_TABLE = MaybeUninit::zeroed();
 80134b4: c3 e9 00 99                  	strd	r9, r9, [r3]
;             TL_BLE_TABLE = MaybeUninit::zeroed();
 80134b8: c4 e9 00 99                  	strd	r9, r9, [r4]
;             TL_MEM_MANAGER_TABLE = MaybeUninit::zeroed();
 80134bc: ca e9 00 99                  	strd	r9, r9, [r10]
 80134c0: ca e9 02 99                  	strd	r9, r9, [r10, #8]
 80134c4: ca e9 04 99                  	strd	r9, r9, [r10, #16]
;             TL_DEVICE_INFO_TABLE = MaybeUninit::zeroed();
 80134c8: c6 e9 06 99                  	strd	r9, r9, [r6, #24]
;             TL_SYS_TABLE = MaybeUninit::zeroed();
 80134cc: c5 e9 00 99                  	strd	r9, r9, [r5]
;             TL_THREAD_TABLE = MaybeUninit::zeroed();
 80134d0: c3 f8 08 90                  	str.w	r9, [r3, #8]
;             TL_TRACES_TABLE = MaybeUninit::zeroed();
 80134d4: c2 f8 00 90                  	str.w	r9, [r2]
;             TL_BLE_TABLE = MaybeUninit::zeroed();
 80134d8: c4 e9 02 99                  	strd	r9, r9, [r4, #8]
;             TL_MEM_MANAGER_TABLE = MaybeUninit::zeroed();
 80134dc: ca f8 18 90                  	str.w	r9, [r10, #24]
;             EVT_POOL = MaybeUninit::zeroed();
 80134e0: 09 f0 8d f8                  	bl	#37146
;             SYS_SPARE_EVT_BUF = MaybeUninit::zeroed();
 80134e4: 40 f2 b4 20                  	movw	r0, #692
 80134e8: 4f f4 85 71                  	mov.w	r1, #266
 80134ec: c2 f2 03 00                  	movt	r0, #8195
 80134f0: 09 f0 85 f8                  	bl	#37130
;             BLE_SPARE_EVT_BUF = MaybeUninit::zeroed();
 80134f4: 40 f2 a8 10                  	movw	r0, #424
 80134f8: 4f f4 85 71                  	mov.w	r1, #266
 80134fc: c2 f2 03 00                  	movt	r0, #8195
 8013500: 09 f0 7d f8                  	bl	#37114
;             CS_BUFFER = MaybeUninit::zeroed();
 8013504: 40 f6 18 36                  	movw	r6, #2840
;             BLE_CMD_BUFFER = MaybeUninit::zeroed();
 8013508: 40 f6 fc 00                  	movw	r0, #2300
;             CS_BUFFER = MaybeUninit::zeroed();
 801350c: c2 f2 03 06                  	movt	r6, #8195
;             BLE_CMD_BUFFER = MaybeUninit::zeroed();
 8013510: c2 f2 03 00                  	movt	r0, #8195
 8013514: 40 f2 0b 11                  	movw	r1, #267
;             CS_BUFFER = MaybeUninit::zeroed();
 8013518: c6 f8 0b 90                  	str.w	r9, [r6, #11]
 801351c: c6 f8 08 90                  	str.w	r9, [r6, #8]
 8013520: c6 f8 04 90                  	str.w	r9, [r6, #4]
 8013524: c6 f8 00 90                  	str.w	r9, [r6]
;             BLE_CMD_BUFFER = MaybeUninit::zeroed();
 8013528: 09 f0 69 f8                  	bl	#37074
;             HCI_ACL_DATA_BUFFER = MaybeUninit::zeroed();
 801352c: 40 f6 08 25                  	movw	r5, #2568
 8013530: 4f f4 84 71                  	mov.w	r1, #264
 8013534: c2 f2 03 05                  	movt	r5, #8195
 8013538: 28 46                        	mov	r0, r5
 801353a: 09 f0 60 f8                  	bl	#37056
;     intrinsics::volatile_load(src)
 801353e: d8 f8 48 00                  	ldr.w	r0, [r8, #72]
 8013542: 4f f4 80 52                  	mov.w	r2, #4096
 8013546: 40 f2 58 03                  	movw	r3, #88
;         self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
 801354a: 40 f4 80 10                  	orr	r0, r0, #1048576
;     intrinsics::volatile_store(dst, src);
 801354e: c8 f8 48 00                  	str.w	r0, [r8, #72]
;     intrinsics::volatile_load(src)
 8013552: d8 f8 48 00                  	ldr.w	r0, [r8, #72]
 8013556: c2 f2 03 03                  	movt	r3, #8195
 801355a: 40 f6 04 40                  	movw	r0, #3076
 801355e: c5 f6 00 00                  	movt	r0, #22528
 8013562: 50 f8 04 1c                  	ldr	r1, [r0, #-4]
;         self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
 8013566: 41 f0 01 11                  	orr	r1, r1, #65537
;     intrinsics::volatile_store(dst, src);
 801356a: 40 f8 04 1c                  	str	r1, [r0, #-4]
 801356e: 4e f2 04 11                  	movw	r1, #57604
 8013572: ce f2 00 01                  	movt	r1, #57344
 8013576: 0a 60                        	str	r2, [r1]
 8013578: 4f f4 00 52                  	mov.w	r2, #8192
 801357c: 0a 60                        	str	r2, [r1]
;     (*listHead).next = listHead;
 801357e: 40 f6 28 31                  	movw	r1, #2856
;             TL_SYS_TABLE = MaybeUninit::new(SysTable {
 8013582: 40 f2 9c 02                  	movw	r2, #156
;     (*listHead).next = listHead;
 8013586: c2 f2 03 01                  	movt	r1, #8195
;             TL_SYS_TABLE = MaybeUninit::new(SysTable {
 801358a: c2 f2 03 02                  	movt	r2, #8195
;     (*listHead).next = listHead;
 801358e: c1 e9 00 11                  	strd	r1, r1, [r1]
;             TL_SYS_TABLE = MaybeUninit::new(SysTable {
 8013592: c3 e9 00 21                  	strd	r2, r1, [r3]
;             TL_BLE_TABLE = MaybeUninit::new(BleTable {
 8013596: 40 f6 fc 02                  	movw	r2, #2300
;     intrinsics::volatile_load(src)
 801359a: 01 68                        	ldr	r1, [r0]
;             TL_BLE_TABLE = MaybeUninit::new(BleTable {
 801359c: c2 f2 03 02                  	movt	r2, #8195
;         self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
 80135a0: 21 f0 02 01                  	bic	r1, r1, #2
;     intrinsics::volatile_store(dst, src);
 80135a4: 01 60                        	str	r1, [r0]
;     (*listHead).next = listHead;
 80135a6: 40 f6 10 31                  	movw	r1, #2832
;             TL_BLE_TABLE = MaybeUninit::new(BleTable {
 80135aa: c4 e9 00 26                  	strd	r2, r6, [r4]
;     (*listHead).next = listHead;
 80135ae: c2 f2 03 01                  	movt	r1, #8195
;         init::LateResources {
 80135b2: 80 22                        	movs	r2, #128
;             TL_BLE_TABLE = MaybeUninit::new(BleTable {
 80135b4: c4 e9 02 15                  	strd	r1, r5, [r4, #8]
;     (*listHead).next = listHead;
 80135b8: c1 e9 00 11                  	strd	r1, r1, [r1]
;     intrinsics::volatile_load(src)
 80135bc: 01 68                        	ldr	r1, [r0]
;         self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
 80135be: 21 f0 01 01                  	bic	r1, r1, #1
;     intrinsics::volatile_store(dst, src);
 80135c2: 01 60                        	str	r1, [r0]
;     (*listHead).next = listHead;
 80135c4: 40 f2 08 20                  	movw	r0, #520
 80135c8: c2 f2 00 00                  	movt	r0, #8192
 80135cc: 00 f1 0c 01                  	add.w	r1, r0, #12
 80135d0: c0 e9 03 11                  	strd	r1, r1, [r0, #12]
;             TL_MEM_MANAGER_TABLE = MaybeUninit::new(MemManagerTable {
 80135d4: 40 f2 a8 11                  	movw	r1, #424
 80135d8: c2 f2 03 01                  	movt	r1, #8195
;     (*listHead).next = listHead;
 80135dc: 40 f2 8c 00                  	movw	r0, #140
;             TL_MEM_MANAGER_TABLE = MaybeUninit::new(MemManagerTable {
 80135e0: ca f8 00 10                  	str.w	r1, [r10]
 80135e4: 40 f2 b4 21                  	movw	r1, #692
 80135e8: c2 f2 03 01                  	movt	r1, #8195
;     (*listHead).next = listHead;
 80135ec: c2 f2 03 00                  	movt	r0, #8195
;             TL_MEM_MANAGER_TABLE = MaybeUninit::new(MemManagerTable {
 80135f0: ca f8 04 10                  	str.w	r1, [r10, #4]
 80135f4: 40 f2 c0 31                  	movw	r1, #960
 80135f8: c2 f2 03 01                  	movt	r1, #8195
;     (*listHead).next = listHead;
 80135fc: c0 e9 00 00                  	strd	r0, r0, [r0]
;             TL_MEM_MANAGER_TABLE = MaybeUninit::new(MemManagerTable {
 8013600: ca f8 08 10                  	str.w	r1, [r10, #8]
 8013604: 40 f2 3c 51                  	movw	r1, #1340
 8013608: ca e9 03 10                  	strd	r1, r0, [r10, #12]
 801360c: 40 f2 0c 40                  	movw	r0, #1036
 8013610: ca e9 05 99                  	strd	r9, r9, [r10, #20]
 8013614: c5 f6 00 00                  	movt	r0, #22528
;     intrinsics::volatile_load(src)
 8013618: 01 68                        	ldr	r1, [r0]
;         self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
 801361a: 41 f4 00 41                  	orr	r1, r1, #32768
;     intrinsics::volatile_store(dst, src);
 801361e: 01 60                        	str	r1, [r0]
;         init::LateResources {
 8013620: 02 20                        	movs	r0, #2
 8013622: 02 9c                        	ldr	r4, [sp, #8]
 8013624: 8b f8 58 01                  	strb.w	r0, [r11, #344]
 8013628: 41 f2 0c 20                  	movw	r0, #4620
 801362c: 01 9d                        	ldr	r5, [sp, #4]
 801362e: 20 44                        	add	r0, r4
 8013630: 2e a9                        	add	r1, sp, #184
 8013632: ab f8 54 91                  	strh.w	r9, [r11, #340]
 8013636: ab f8 50 91                  	strh.w	r9, [r11, #336]
 801363a: ab f8 4c 91                  	strh.w	r9, [r11, #332]
 801363e: ab f8 48 91                  	strh.w	r9, [r11, #328]
 8013642: ab f8 44 91                  	strh.w	r9, [r11, #324]
 8013646: ab f8 40 91                  	strh.w	r9, [r11, #320]
 801364a: ab f8 3c 91                  	strh.w	r9, [r11, #316]
 801364e: ab f8 38 91                  	strh.w	r9, [r11, #312]
 8013652: a5 f8 88 90                  	strh.w	r9, [r5, #136]
 8013656: 08 f0 9d fe                  	bl	#36154
 801365a: 4f f4 95 50                  	mov.w	r0, #4768
 801365e: 40 f2 04 03                  	movw	r3, #4
 8013662: 44 f8 00 90                  	str.w	r9, [r4, r0]
 8013666: 41 f2 a4 20                  	movw	r0, #4772
 801366a: 40 f2 02 22                  	movw	r2, #514
 801366e: 44 f8 00 90                  	str.w	r9, [r4, r0]
 8013672: 41 f2 a8 20                  	movw	r0, #4776
 8013676: c2 f2 00 03                  	movt	r3, #8192
 801367a: 44 f8 00 90                  	str.w	r9, [r4, r0]
 801367e: 41 f2 ac 20                  	movw	r0, #4780
 8013682: 44 f8 00 90                  	str.w	r9, [r4, r0]
 8013686: a5 f8 0c 91                  	strh.w	r9, [r5, #268]
 801368a: cb e9 00 32                  	strd	r3, r2, [r11]
 801368e: 01 22                        	movs	r2, #1
 8013690: 8b f8 2e 20                  	strb.w	r2, [r11, #46]
 8013694: 4f f4 a4 72                  	mov.w	r2, #328
 8013698: 2b 98                        	ldr	r0, [sp, #172]
 801369a: 41 f2 91 23                  	movw	r3, #4753
 801369e: ab f8 2c 20                  	strh.w	r2, [r11, #44]
 80136a2: 4f f0 ff 32                  	mov.w	r2, #4294967295
 80136a6: e0 50                        	str	r0, [r4, r3]
 80136a8: 41 f2 94 20                  	movw	r0, #4756
 80136ac: dd f8 af 10                  	ldr.w	r1, [sp, #175]
 80136b0: 21 50                        	str	r1, [r4, r0]
 80136b2: 4f f4 a8 60                  	mov.w	r0, #1344
 80136b6: 4f f4 83 71                  	mov.w	r1, #262
 80136ba: cb f8 28 20                  	str.w	r2, [r11, #40]
 80136be: 4f f4 80 72                  	mov.w	r2, #256
 80136c2: ab f8 26 20                  	strh.w	r2, [r11, #38]
 80136c6: 9c 22                        	movs	r2, #156
 80136c8: ab f8 1c 00                  	strh.w	r0, [r11, #28]
 80136cc: 44 20                        	movs	r0, #68
 80136ce: c0 f2 f4 12                  	movt	r2, #500
 80136d2: c0 f2 08 00                  	movt	r0, #8
 80136d6: cb f8 22 20                  	str.w	r2, [r11, #34]
 80136da: 40 f2 08 12                  	movw	r2, #264
 80136de: cb f8 18 00                  	str.w	r0, [r11, #24]
 80136e2: 41 f2 c7 20                  	movw	r0, #4807
 80136e6: c7 f6 3a 12                  	movt	r2, #31034
 80136ea: 20 44                        	add	r0, r4
 80136ec: cb f8 1e 20                  	str.w	r2, [r11, #30]
 80136f0: 37 f8 a2 2c                  	ldrh	r2, [r7, #-162]
 80136f4: 85 f8 10 91                  	strb.w	r9, [r5, #272]
 80136f8: a5 f8 0e 21                  	strh.w	r2, [r5, #270]
 80136fc: c5 e9 00 99                  	strd	r9, r9, [r5]
 8013700: 08 f0 7d ff                  	bl	#36602
; #[app(device = stm32wb_hal::pac, peripherals = true)]
 8013704: 4f b0                        	add	sp, #316
 8013706: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 801370a: f0 bd                        	pop	{r4, r5, r6, r7, pc}

0801370c stm32wb55_homekit::idle::ha709308a17d53c68:
 801370c: 80 b5                        	push	{r7, lr}
 801370e: 6f 46                        	mov	r7, sp
 8013710: ad f5 60 7d                  	sub.w	sp, sp, #896
 8013714: 40 f2 08 2b                  	movw	r11, #520
 8013718: 04 ae                        	add	r6, sp, #16
 801371a: 04 46                        	mov	r4, r0
 801371c: 06 f1 11 00                  	add.w	r0, r6, #17
 8013720: c2 f2 00 0b                  	movt	r11, #8192
 8013724: 03 90                        	str	r0, [sp, #12]
 8013726: 06 f1 09 00                  	add.w	r0, r6, #9
 801372a: 02 90                        	str	r0, [sp, #8]
 801372c: 09 e0                        	b	#18 <_ZN17stm32wb55_homekit4idle17ha709308a17d53c68E+0x3a>
;             Ok(t) => t,
 801372e: ba f1 10 0f                  	cmp.w	r10, #16
 8013732: 40 f0 f2 80                  	bne.w	#484 <_ZN17stm32wb55_homekit4idle17ha709308a17d53c68E+0x212>
;                     cx.spawn.exec_hci().unwrap();
 8013736: a0 68                        	ldr	r0, [r4, #8]
; #[app(device = stm32wb_hal::pac, peripherals = true)]
 8013738: 00 f0 af fe                  	bl	#3422
;             Ok(t) => t,
 801373c: 00 28                        	cmp	r0, #0
 801373e: 40 f0 df 80                  	bne.w	#446 <_ZN17stm32wb55_homekit4idle17ha709308a17d53c68E+0x1f8>
;             __wfi()
 8013742: 08 f0 a3 fd                  	bl	#35654
;             let evt = cx.resources.rc.lock(|rc| {
 8013746: 25 68                        	ldr	r5, [r4]
;     let current = priority.get();
 8013748: 28 78                        	ldrb	r0, [r5]
;     if current < ceiling {
 801374a: 38 b1                        	cbz	r0, #14
;         f(&mut *ptr)
 801374c: 30 46                        	mov	r0, r6
 801374e: 00 f0 f1 f8                  	bl	#482
;             if let Some(Ok(Packet::Event(evt))) = evt {
 8013752: dd e9 04 01                  	ldrd	r0, r1, [sp, #16]
 8013756: 08 43                        	orrs	r0, r1
 8013758: f3 d1                        	bne	#-26 <_ZN17stm32wb55_homekit4idle17ha709308a17d53c68E+0x3a>
 801375a: 10 e0                        	b	#32 <_ZN17stm32wb55_homekit4idle17ha709308a17d53c68E+0x76>
;     copy_nonoverlapping(src, dst, count)
 801375c: 01 20                        	movs	r0, #1
 801375e: 28 70                        	strb	r0, [r5]
;                 __basepri_w(_basepri);
 8013760: f0 20                        	movs	r0, #240
 8013762: 08 f0 95 fd                  	bl	#35626
;             let r = f(&mut *ptr);
 8013766: 30 46                        	mov	r0, r6
 8013768: 00 f0 e4 f8                  	bl	#456
;                 __basepri_w(_basepri);
 801376c: 00 20                        	movs	r0, #0
 801376e: 08 f0 8f fd                  	bl	#35614
;     copy_nonoverlapping(src, dst, count)
 8013772: 00 20                        	movs	r0, #0
 8013774: 28 70                        	strb	r0, [r5]
;             if let Some(Ok(Packet::Event(evt))) = evt {
 8013776: dd e9 04 01                  	ldrd	r0, r1, [sp, #16]
 801377a: 08 43                        	orrs	r0, r1
 801377c: e1 d1                        	bne	#-62 <_ZN17stm32wb55_homekit4idle17ha709308a17d53c68E+0x3a>
 801377e: 02 99                        	ldr	r1, [sp, #8]
 8013780: 40 f2 17 12                  	movw	r2, #279
 8013784: 9d f8 18 a0                  	ldrb.w	r10, [sp, #24]
 8013788: 9d f8 20 90                  	ldrb.w	r9, [sp, #32]
 801378c: 08 68                        	ldr	r0, [r1]
 801378e: d1 f8 03 10                  	ldr.w	r1, [r1, #3]
 8013792: 94 90                        	str	r0, [sp, #592]
 8013794: 4e a8                        	add	r0, sp, #312
 8013796: cd f8 53 12                  	str.w	r1, [sp, #595]
 801379a: 03 99                        	ldr	r1, [sp, #12]
 801379c: 08 f0 bd fd                  	bl	#35706
 80137a0: d4 f8 08 80                  	ldr.w	r8, [r4, #8]
;                 if let Event::Vendor(stm32wb55::event::Stm32Wb5xEvent::CoprocessorReady(_)) = evt {
 80137a4: ba f1 0f 0f                  	cmp.w	r10, #15
 80137a8: 08 bf                        	it	eq
 80137aa: b9 f1 00 0f                  	cmpeq.w	r9, #0
 80137ae: 47 d0                        	beq	#142 <_ZN17stm32wb55_homekit4idle17ha709308a17d53c68E+0x138>
; #[app(device = stm32wb_hal::pac, peripherals = true)]
 80137b0: 94 98                        	ldr	r0, [sp, #592]
 80137b2: 98 ad                        	add	r5, sp, #608
 80137b4: dd f8 53 12                  	ldr.w	r1, [sp, #595]
 80137b8: 40 f2 17 12                  	movw	r2, #279
 80137bc: 96 90                        	str	r0, [sp, #600]
 80137be: 28 46                        	mov	r0, r5
 80137c0: cd f8 5b 12                  	str.w	r1, [sp, #603]
 80137c4: 4e a9                        	add	r1, sp, #312
 80137c6: 08 f0 e5 fd                  	bl	#35786
;         Relaxed => intrinsics::atomic_load_relaxed(dst),
 80137ca: 9b f8 07 00                  	ldrb.w	r0, [r11, #7]
 80137ce: 9b f8 08 10                  	ldrb.w	r1, [r11, #8]
 80137d2: c2 b2                        	uxtb	r2, r0
 80137d4: c9 b2                        	uxtb	r1, r1
;                 if head != tail {
 80137d6: 8a 42                        	cmp	r2, r1
 80137d8: a9 d0                        	beq	#-174 <_ZN17stm32wb55_homekit4idle17ha709308a17d53c68E+0x26>
;                 let item = (rb.0.buffer.as_ptr() as *const T)
 80137da: 9b f8 09 20                  	ldrb.w	r2, [r11, #9]
;                 intrinsics::wrapping_add(self, rhs)
 80137de: 01 30                        	adds	r0, #1
;         Relaxed => intrinsics::atomic_store_relaxed(dst, val),
 80137e0: 8b f8 07 00                  	strb.w	r0, [r11, #7]
 80137e4: 01 92                        	str	r2, [sp, #4]
 80137e6: 41 f2 20 60                  	movw	r0, #5664
;     intrinsics::move_val_init(&mut *dst, src)
 80137ea: 02 eb c2 02                  	add.w	r2, r2, r2, lsl #3
 80137ee: c2 f2 00 00                  	movt	r0, #8192
 80137f2: 29 46                        	mov	r1, r5
 80137f4: dd f8 58 c2                  	ldr.w	r12, [sp, #600]
 80137f8: 53 01                        	lsls	r3, r2, #5
 80137fa: 00 eb 42 12                  	add.w	r2, r0, r2, lsl #5
 80137fe: 00 f8 03 a0                  	strb.w	r10, [r0, r3]
 8013802: 02 f1 09 00                  	add.w	r0, r2, #9
 8013806: dd f8 5b 52                  	ldr.w	r5, [sp, #603]
 801380a: c2 f8 01 c0                  	str.w	r12, [r2, #1]
 801380e: 55 60                        	str	r5, [r2, #4]
 8013810: 82 f8 08 90                  	strb.w	r9, [r2, #8]
 8013814: 40 f2 17 12                  	movw	r2, #279
 8013818: 08 f0 7f fd                  	bl	#35582
;     let current = priority.get();
 801381c: 98 f8 00 00                  	ldrb.w	r0, [r8]
;     if current < ceiling {
 8013820: 00 28                        	cmp	r0, #0
 8013822: 49 d0                        	beq	#146 <_ZN17stm32wb55_homekit4idle17ha709308a17d53c68E+0x1b0>
;         Relaxed => intrinsics::atomic_load_relaxed(dst),
 8013824: 9b f8 15 00                  	ldrb.w	r0, [r11, #21]
;     intrinsics::move_val_init(&mut *dst, src)
 8013828: 01 9a                        	ldr	r2, [sp, #4]
;                     .add(usize::from(tail % cap))
 801382a: 00 f0 03 01                  	and	r1, r0, #3
;                 intrinsics::wrapping_add(self, rhs)
 801382e: 01 30                        	adds	r0, #1
;         Relaxed => intrinsics::atomic_load_relaxed(dst),
 8013830: 0b eb 41 01                  	add.w	r1, r11, r1, lsl #1
;     intrinsics::move_val_init(&mut *dst, src)
 8013834: ca 75                        	strb	r2, [r1, #23]
 8013836: 00 22                        	movs	r2, #0
 8013838: 8a 75                        	strb	r2, [r1, #22]
;         Relaxed => intrinsics::atomic_store_relaxed(dst, val),
 801383a: 8b f8 15 00                  	strb.w	r0, [r11, #21]
 801383e: 53 e0                        	b	#166 <_ZN17stm32wb55_homekit4idle17ha709308a17d53c68E+0x1e0>
;         Relaxed => intrinsics::atomic_load_relaxed(dst),
 8013840: 9b f8 01 00                  	ldrb.w	r0, [r11, #1]
 8013844: 9b f8 02 10                  	ldrb.w	r1, [r11, #2]
 8013848: c2 b2                        	uxtb	r2, r0
 801384a: c9 b2                        	uxtb	r1, r1
;                 if head != tail {
 801384c: 8a 42                        	cmp	r2, r1
 801384e: 57 d0                        	beq	#174 <_ZN17stm32wb55_homekit4idle17ha709308a17d53c68E+0x1f8>
;                 let item = (rb.0.buffer.as_ptr() as *const T)
 8013850: 9b f8 03 50                  	ldrb.w	r5, [r11, #3]
;                 intrinsics::wrapping_add(self, rhs)
 8013854: 01 30                        	adds	r0, #1
;         Relaxed => intrinsics::atomic_store_relaxed(dst, val),
 8013856: 8b f8 01 00                  	strb.w	r0, [r11, #1]
;     let current = priority.get();
 801385a: 98 f8 00 00                  	ldrb.w	r0, [r8]
;     if current < ceiling {
 801385e: 60 b1                        	cbz	r0, #24
;         Relaxed => intrinsics::atomic_load_relaxed(dst),
 8013860: 9b f8 15 00                  	ldrb.w	r0, [r11, #21]
;     intrinsics::move_val_init(&mut *dst, src)
 8013864: 02 22                        	movs	r2, #2
;                     .add(usize::from(tail % cap))
 8013866: 00 f0 03 01                  	and	r1, r0, #3
;                 intrinsics::wrapping_add(self, rhs)
 801386a: 01 30                        	adds	r0, #1
;         Relaxed => intrinsics::atomic_load_relaxed(dst),
 801386c: 0b eb 41 01                  	add.w	r1, r11, r1, lsl #1
;     intrinsics::move_val_init(&mut *dst, src)
 8013870: cd 75                        	strb	r5, [r1, #23]
 8013872: 8a 75                        	strb	r2, [r1, #22]
;         Relaxed => intrinsics::atomic_store_relaxed(dst, val),
 8013874: 8b f8 15 00                  	strb.w	r0, [r11, #21]
 8013878: 17 e0                        	b	#46 <_ZN17stm32wb55_homekit4idle17ha709308a17d53c68E+0x1a2>
;     copy_nonoverlapping(src, dst, count)
 801387a: 01 20                        	movs	r0, #1
 801387c: 88 f8 00 00                  	strb.w	r0, [r8]
;                 __basepri_w(_basepri);
 8013880: f0 20                        	movs	r0, #240
 8013882: 08 f0 05 fd                  	bl	#35338
;         Relaxed => intrinsics::atomic_load_relaxed(dst),
 8013886: 9b f8 15 00                  	ldrb.w	r0, [r11, #21]
;     intrinsics::move_val_init(&mut *dst, src)
 801388a: 02 22                        	movs	r2, #2
;                     .add(usize::from(tail % cap))
 801388c: 00 f0 03 01                  	and	r1, r0, #3
;                 intrinsics::wrapping_add(self, rhs)
 8013890: 01 30                        	adds	r0, #1
;         Relaxed => intrinsics::atomic_load_relaxed(dst),
 8013892: 0b eb 41 01                  	add.w	r1, r11, r1, lsl #1
;     intrinsics::move_val_init(&mut *dst, src)
 8013896: cd 75                        	strb	r5, [r1, #23]
 8013898: 8a 75                        	strb	r2, [r1, #22]
;         Relaxed => intrinsics::atomic_store_relaxed(dst, val),
 801389a: 8b f8 15 00                  	strb.w	r0, [r11, #21]
;                 __basepri_w(_basepri);
 801389e: 00 20                        	movs	r0, #0
 80138a0: 08 f0 f6 fc                  	bl	#35308
;     copy_nonoverlapping(src, dst, count)
 80138a4: 00 20                        	movs	r0, #0
 80138a6: 88 f8 00 00                  	strb.w	r0, [r8]
;     intrinsics::volatile_store(dst, src);
 80138aa: 4e f2 04 20                  	movw	r0, #57860
 80138ae: 20 21                        	movs	r1, #32
 80138b0: ce f2 00 00                  	movt	r0, #57344
 80138b4: 01 60                        	str	r1, [r0]
 80138b6: 44 e7                        	b	#-376 <_ZN17stm32wb55_homekit4idle17ha709308a17d53c68E+0x3a>
;     copy_nonoverlapping(src, dst, count)
 80138b8: 01 20                        	movs	r0, #1
 80138ba: 88 f8 00 00                  	strb.w	r0, [r8]
;                 __basepri_w(_basepri);
 80138be: f0 20                        	movs	r0, #240
 80138c0: 08 f0 e6 fc                  	bl	#35276
;         Relaxed => intrinsics::atomic_load_relaxed(dst),
 80138c4: 9b f8 15 00                  	ldrb.w	r0, [r11, #21]
 80138c8: 00 25                        	movs	r5, #0
;     intrinsics::move_val_init(&mut *dst, src)
 80138ca: 01 9a                        	ldr	r2, [sp, #4]
;                     .add(usize::from(tail % cap))
 80138cc: 00 f0 03 01                  	and	r1, r0, #3
;                 intrinsics::wrapping_add(self, rhs)
 80138d0: 01 30                        	adds	r0, #1
;         Relaxed => intrinsics::atomic_load_relaxed(dst),
 80138d2: 0b eb 41 01                  	add.w	r1, r11, r1, lsl #1
;     intrinsics::move_val_init(&mut *dst, src)
 80138d6: ca 75                        	strb	r2, [r1, #23]
 80138d8: 8d 75                        	strb	r5, [r1, #22]
;         Relaxed => intrinsics::atomic_store_relaxed(dst, val),
 80138da: 8b f8 15 00                  	strb.w	r0, [r11, #21]
;                 __basepri_w(_basepri);
 80138de: 00 20                        	movs	r0, #0
 80138e0: 08 f0 d6 fc                  	bl	#35244
;     copy_nonoverlapping(src, dst, count)
 80138e4: 88 f8 00 50                  	strb.w	r5, [r8]
;     intrinsics::volatile_store(dst, src);
 80138e8: 4e f2 04 20                  	movw	r0, #57860
 80138ec: 20 21                        	movs	r1, #32
 80138ee: ce f2 00 00                  	movt	r0, #57344
 80138f2: 01 60                        	str	r1, [r0]
;                     cx.spawn.exec_hci().unwrap();
 80138f4: a0 68                        	ldr	r0, [r4, #8]
; #[app(device = stm32wb_hal::pac, peripherals = true)]
 80138f6: 00 f0 d0 fd                  	bl	#2976
;             Ok(t) => t,
 80138fa: 00 28                        	cmp	r0, #0
 80138fc: 3f f4 21 af                  	beq.w	#-446 <_ZN17stm32wb55_homekit4idle17ha709308a17d53c68E+0x3a>
 8013900: 40 f6 6f 20                  	movw	r0, #2671
 8013904: 4c f6 04 53                  	movw	r3, #52484
 8013908: c0 f6 02 00                  	movt	r0, #2050
 801390c: c0 f6 01 03                  	movt	r3, #2049
 8013910: 98 aa                        	add	r2, sp, #608
 8013912: 2b 21                        	movs	r1, #43
 8013914: 02 f0 a5 fd                  	bl	#11082
 8013918: fe de                        	trap
;             Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
 801391a: 40 f6 6f 20                  	movw	r0, #2671
 801391e: 4c f6 24 53                  	movw	r3, #52516
 8013922: c0 f6 02 00                  	movt	r0, #2050
 8013926: c0 f6 01 03                  	movt	r3, #2049
 801392a: 98 aa                        	add	r2, sp, #608
 801392c: 2b 21                        	movs	r1, #43
 801392e: 02 f0 98 fd                  	bl	#11056
 8013932: fe de                        	trap

08013934 stm32wb55_homekit::idle::_$u7b$$u7b$closure$u7d$$u7d$::hf5c6ccd0e008ca1c:
;             let evt = cx.resources.rc.lock(|rc| {
 8013934: f0 b5                        	push	{r4, r5, r6, r7, lr}
 8013936: 03 af                        	add	r7, sp, #12
 8013938: 2d e9 00 0f                  	push.w	{r8, r9, r10, r11}
 801393c: ad f5 6d 7d                  	sub.w	sp, sp, #948
 8013940: 40 f2 28 2a                  	movw	r10, #552
 8013944: 00 90                        	str	r0, [sp]
 8013946: c2 f2 00 0a                  	movt	r10, #8192
;                 if *head != *tail {
 801394a: 9a f8 80 00                  	ldrb.w	r0, [r10, #128]
 801394e: 9a f8 81 10                  	ldrb.w	r1, [r10, #129]
 8013952: 88 42                        	cmp	r0, r1
 8013954: 0d d1                        	bne	#26 <_ZN17stm32wb55_homekit4idle28_$u7b$$u7b$closure$u7d$$u7d$17hf5c6ccd0e008ca1cE+0x42>
 8013956: cb e0                        	b	#406 <_ZN17stm32wb55_homekit4idle28_$u7b$$u7b$closure$u7d$$u7d$17hf5c6ccd0e008ca1cE+0x1c0>
;     intrinsics::volatile_load(src)
 8013958: db f8 00 00                  	ldr.w	r0, [r11]
;         self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
 801395c: 20 f4 00 20                  	bic	r0, r0, #524288
;     intrinsics::volatile_store(dst, src);
 8013960: cb f8 00 00                  	str.w	r0, [r11]
;                 if *head != *tail {
 8013964: 9a f8 80 00                  	ldrb.w	r0, [r10, #128]
 8013968: 9a f8 81 10                  	ldrb.w	r1, [r10, #129]
 801396c: 88 42                        	cmp	r0, r1
 801396e: 00 f0 bf 80                  	beq.w	#382 <_ZN17stm32wb55_homekit4idle28_$u7b$$u7b$closure$u7d$$u7d$17hf5c6ccd0e008ca1cE+0x1c0>
;                 small as Self
 8013972: 00 f0 1f 01                  	and	r1, r0, #31
;                 intrinsics::wrapping_add(self, rhs)
 8013976: 01 30                        	adds	r0, #1
;                     let item = unsafe { (p as *const T).add(usize::from(*head % cap)).read() };
 8013978: 5a f8 21 90                  	ldr.w	r9, [r10, r1, lsl #2]
;                     *head = head.wrapping_add(1);
 801397c: 8a f8 80 00                  	strb.w	r0, [r10, #128]
;             evt.assume_init()
 8013980: 99 f8 08 60                  	ldrb.w	r6, [r9, #8]
;             let evt_kind = TlPacketType::try_from((*self.ptr).evt_serial.kind)?;
 8013984: 30 46                        	mov	r0, r6
 8013986: 08 f0 43 fb                  	bl	#34438
 801398a: 02 28                        	cmp	r0, #2
 801398c: 13 d0                        	beq	#38 <_ZN17stm32wb55_homekit4idle28_$u7b$$u7b$closure$u7d$$u7d$17hf5c6ccd0e008ca1cE+0x86>
 801398e: 42 28                        	cmp	r0, #66
 8013990: 00 f0 6c 81                  	beq.w	#728 <_ZN17stm32wb55_homekit4idle28_$u7b$$u7b$closure$u7d$$u7d$17hf5c6ccd0e008ca1cE+0x33c>
;                 Ok((*evt_serial).evt.payload_len as usize + TL_EVT_HEADER_SIZE)
 8013994: 99 f8 0a 00                  	ldrb.w	r0, [r9, #10]
 8013998: 00 f1 03 0b                  	add.w	r11, r0, #3
;         if n > self.next_contiguous_slice_len() {
 801399c: da e9 24 10                  	ldrd	r1, r0, [r10, #144]
 80139a0: da f8 98 40                  	ldr.w	r4, [r10, #152]
;         if self.read_index == 0 {
 80139a4: 88 b1                        	cbz	r0, #34
;         } else if self.write_index >= self.read_index {
 80139a6: a0 42                        	cmp	r0, r4
;             self.buffer.len() - self.write_index
 80139a8: 92 bf                        	itee	ls
 80139aa: 08 1b                        	subls	r0, r1, r4
;             self.read_index - self.write_index - 1
 80139ac: e2 43                        	mvnhi	r2, r4
 80139ae: 10 44                        	addhi	r0, r2
;         if n > self.next_contiguous_slice_len() {
 80139b0: 58 45                        	cmp	r0, r11
 80139b2: 0f d2                        	bhs	#30 <_ZN17stm32wb55_homekit4idle28_$u7b$$u7b$closure$u7d$$u7d$17hf5c6ccd0e008ca1cE+0xa4>
 80139b4: 70 e1                        	b	#736 <_ZN17stm32wb55_homekit4idle28_$u7b$$u7b$closure$u7d$$u7d$17hf5c6ccd0e008ca1cE+0x368>
;                 Ok((*acl_serial).length as usize + 5)
 80139b6: b9 f8 0b 00                  	ldrh.w	r0, [r9, #11]
 80139ba: 00 f1 05 0b                  	add.w	r11, r0, #5
;         if n > self.next_contiguous_slice_len() {
 80139be: da e9 24 10                  	ldrd	r1, r0, [r10, #144]
;         if self.read_index == 0 {
 80139c2: 00 28                        	cmp	r0, #0
;         if n > self.next_contiguous_slice_len() {
 80139c4: da f8 98 40                  	ldr.w	r4, [r10, #152]
;         if self.read_index == 0 {
 80139c8: ed d1                        	bne	#-38 <_ZN17stm32wb55_homekit4idle28_$u7b$$u7b$closure$u7d$$u7d$17hf5c6ccd0e008ca1cE+0x76>
;             self.buffer.len() - self.write_index - 1
 80139ca: e0 43                        	mvns	r0, r4
 80139cc: 08 44                        	add	r0, r1
;         if n > self.next_contiguous_slice_len() {
 80139ce: 58 45                        	cmp	r0, r11
 80139d0: c0 f0 62 81                  	blo.w	#708 <_ZN17stm32wb55_homekit4idle28_$u7b$$u7b$closure$u7d$$u7d$17hf5c6ccd0e008ca1cE+0x368>
;         self.write_index = (self.write_index + n) % self.buffer.len();
 80139d4: 00 29                        	cmp	r1, #0
 80139d6: 00 f0 41 81                  	beq.w	#642 <_ZN17stm32wb55_homekit4idle28_$u7b$$u7b$closure$u7d$$u7d$17hf5c6ccd0e008ca1cE+0x32c>
 80139da: 14 eb 0b 02                  	adds.w	r2, r4, r11
;         &mut self.buffer[start..start + n]
 80139de: da f8 8c 80                  	ldr.w	r8, [r10, #140]
;         self.write_index = (self.write_index + n) % self.buffer.len();
 80139e2: b2 fb f1 f0                  	udiv	r0, r2, r1
 80139e6: 00 fb 11 20                  	mls	r0, r0, r1, r2
 80139ea: ca f8 98 00                  	str.w	r0, [r10, #152]
;         if self.start > self.end {
 80139ee: 80 f0 4a 81                  	bhs.w	#660 <_ZN17stm32wb55_homekit4idle28_$u7b$$u7b$closure$u7d$$u7d$17hf5c6ccd0e008ca1cE+0x356>
;         } else if self.end > slice.len() {
 80139f2: 91 42                        	cmp	r1, r2
 80139f4: c0 f0 4c 81                  	blo.w	#664 <_ZN17stm32wb55_homekit4idle28_$u7b$$u7b$closure$u7d$$u7d$17hf5c6ccd0e008ca1cE+0x360>
;             let evt_kind = TlPacketType::try_from((*self.ptr).evt_serial.kind)?;
 80139f8: 4d 46                        	mov	r5, r9
 80139fa: 15 f8 08 0f                  	ldrb	r0, [r5, #8]!
 80139fe: 08 f0 07 fb                  	bl	#34318
 8013a02: 02 28                        	cmp	r0, #2
 8013a04: 06 d0                        	beq	#12 <_ZN17stm32wb55_homekit4idle28_$u7b$$u7b$closure$u7d$$u7d$17hf5c6ccd0e008ca1cE+0xe4>
 8013a06: 42 28                        	cmp	r0, #66
 8013a08: 00 f0 1b 81                  	beq.w	#566 <_ZN17stm32wb55_homekit4idle28_$u7b$$u7b$closure$u7d$$u7d$17hf5c6ccd0e008ca1cE+0x312>
;                 let len = (*evt_serial).evt.payload_len as usize + TL_EVT_HEADER_SIZE;
 8013a0c: 99 f8 0a 00                  	ldrb.w	r0, [r9, #10]
 8013a10: c2 1c                        	adds	r2, r0, #3
 8013a12: 02 e0                        	b	#4 <_ZN17stm32wb55_homekit4idle28_$u7b$$u7b$closure$u7d$$u7d$17hf5c6ccd0e008ca1cE+0xea>
;                 let len = (*acl_serial).length as usize + 5;
 8013a14: b9 f8 0b 00                  	ldrh.w	r0, [r9, #11]
 8013a18: 42 1d                        	adds	r2, r0, #5
 8013a1a: 5a 45                        	cmp	r2, r11
 8013a1c: 00 f2 11 81                  	bhi.w	#546 <_ZN17stm32wb55_homekit4idle28_$u7b$$u7b$closure$u7d$$u7d$17hf5c6ccd0e008ca1cE+0x312>
 8013a20: a0 44                        	add	r8, r4
 8013a22: 29 46                        	mov	r1, r5
 8013a24: 40 46                        	mov	r0, r8
 8013a26: 08 f0 03 fd                  	bl	#35334
 8013a2a: 40 f6 04 4b                  	movw	r11, #3076
;             if event.kind() == 18 {
 8013a2e: 12 2e                        	cmp	r6, #18
 8013a30: c5 f6 00 0b                  	movt	r11, #22528
 8013a34: 2e d1                        	bne	#92 <_ZN17stm32wb55_homekit4idle28_$u7b$$u7b$closure$u7d$$u7d$17hf5c6ccd0e008ca1cE+0x164>
;                 tl_mbox::shci::shci_ble_init(&mut self.ipcc, self.config);
 8013a36: 0a f1 9c 00                  	add.w	r0, r10, #156
 8013a3a: a2 a9                        	add	r1, sp, #648
 8013a3c: 6c c8                        	ldm	r0!, {r2, r3, r5, r6}
 8013a3e: 0c 46                        	mov	r4, r1
 8013a40: 6c c4                        	stm	r4!, {r2, r3, r5, r6}
 8013a42: 6c c8                        	ldm	r0!, {r2, r3, r5, r6}
 8013a44: 6c c4                        	stm	r4!, {r2, r3, r5, r6}
;         let mut p_cmd_buffer = &mut *(*TL_SYS_TABLE.as_mut_ptr()).pcmd_buffer;
 8013a46: 40 f2 58 02                  	movw	r2, #88
 8013a4a: c2 f2 03 02                  	movt	r2, #8195
 8013a4e: 15 68                        	ldr	r5, [r2]
;     intrinsics::move_val_init(&mut *dst, src)
 8013a50: 21 22                        	movs	r2, #33
;                 tl_mbox::shci::shci_ble_init(&mut self.ipcc, self.config);
 8013a52: 00 78                        	ldrb	r0, [r0]
 8013a54: 20 70                        	strb	r0, [r4]
 8013a56: 00 20                        	movs	r0, #0
;     intrinsics::move_val_init(&mut *dst, src)
 8013a58: ea 72                        	strb	r2, [r5, #11]
 8013a5a: 4f f6 66 42                  	movw	r2, #64614
 8013a5e: 28 60                        	str	r0, [r5]
 8013a60: 68 60                        	str	r0, [r5, #4]
 8013a62: 05 f1 0c 00                  	add.w	r0, r5, #12
 8013a66: a5 f8 09 20                  	strh.w	r2, [r5, #9]
 8013a6a: 21 22                        	movs	r2, #33
 8013a6c: 08 f0 55 fc                  	bl	#34986
;         (*p_cmd_buffer).cmdserial.ty = TlPacketType::SysCmd as u8;
 8013a70: 10 20                        	movs	r0, #16
 8013a72: 28 72                        	strb	r0, [r5, #8]
;     intrinsics::volatile_store(dst, src);
 8013a74: 4f f4 00 30                  	mov.w	r0, #131072
 8013a78: cb f8 04 00                  	str.w	r0, [r11, #4]
;     intrinsics::volatile_load(src)
 8013a7c: db f8 00 00                  	ldr.w	r0, [r11]
;         self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
 8013a80: 20 f4 00 30                  	bic	r0, r0, #131072
;     intrinsics::volatile_store(dst, src);
 8013a84: cb f8 00 00                  	str.w	r0, [r11]
;                 self.is_ble_ready = true;
 8013a88: 01 20                        	movs	r0, #1
 8013a8a: 8a f8 c0 01                  	strb.w	r0, [r10, #448]
;                 buf[0] = 0x04; // Replace event code with one that is supported by HCI
 8013a8e: 04 20                        	movs	r0, #4
 8013a90: 88 f8 00 00                  	strb.w	r0, [r8]
 8013a94: 40 f2 08 25                  	movw	r5, #520
;         DEVICE_PERIPHERALS = true;
 8013a98: 01 20                        	movs	r0, #1
 8013a9a: c2 f2 00 05                  	movt	r5, #8192
 8013a9e: 28 70                        	strb	r0, [r5]
;                     unsafe { __primask() }
 8013aa0: 08 f0 f1 fb                  	bl	#34786
 8013aa4: 04 46                        	mov	r4, r0
;             __cpsid();
 8013aa6: 08 f0 e6 fb                  	bl	#34764
;         (*node).next = listHead;
 8013aaa: 05 f1 0c 00                  	add.w	r0, r5, #12
 8013aae: c9 f8 00 00                  	str.w	r0, [r9]
;         (*node).prev = (*listHead).prev;
 8013ab2: 28 69                        	ldr	r0, [r5, #16]
 8013ab4: c9 f8 04 00                  	str.w	r0, [r9, #4]
;         (*listHead).prev = node;
 8013ab8: c5 f8 10 90                  	str.w	r9, [r5, #16]
;         (*(*node).prev).next = node;
 8013abc: d9 f8 04 00                  	ldr.w	r0, [r9, #4]
 8013ac0: c0 f8 00 90                  	str.w	r9, [r0]
;     if primask.is_active() {
 8013ac4: e0 07                        	lsls	r0, r4, #31
;             __cpsie();
 8013ac6: 08 bf                        	it	eq
 8013ac8: 08 f0 d7 fb                  	bleq	#34734
;     intrinsics::volatile_load(src)
 8013acc: db f8 08 00                  	ldr.w	r0, [r11, #8]
;         if channel_is_busy {
 8013ad0: 00 07                        	lsls	r0, r0, #28
 8013ad2: 3f f5 41 af                  	bmi.w	#-382 <_ZN17stm32wb55_homekit4idle28_$u7b$$u7b$closure$u7d$$u7d$17hf5c6ccd0e008ca1cE+0x28>
;             send_free_buf();
 8013ad6: 08 f0 e8 fa                  	bl	#34256
;     intrinsics::volatile_store(dst, src);
 8013ada: 4f f4 00 20                  	mov.w	r0, #524288
 8013ade: cb f8 04 00                  	str.w	r0, [r11, #4]
;                 if *head != *tail {
 8013ae2: 9a f8 80 00                  	ldrb.w	r0, [r10, #128]
 8013ae6: 9a f8 81 10                  	ldrb.w	r1, [r10, #129]
 8013aea: 88 42                        	cmp	r0, r1
 8013aec: 7f f4 41 af                  	bne.w	#-382 <_ZN17stm32wb55_homekit4idle28_$u7b$$u7b$closure$u7d$$u7d$17hf5c6ccd0e008ca1cE+0x42>
;         self.last_cc_evt.and_then(|evt| {
 8013af0: 9a f8 84 00                  	ldrb.w	r0, [r10, #132]
;             Some(x) => f(x),
 8013af4: 01 28                        	cmp	r0, #1
 8013af6: 11 d1                        	bne	#34 <_ZN17stm32wb55_homekit4idle28_$u7b$$u7b$closure$u7d$$u7d$17hf5c6ccd0e008ca1cE+0x1ec>
 8013af8: 00 9d                        	ldr	r5, [sp]
 8013afa: 00 24                        	movs	r4, #0
;                     None
 8013afc: 4f f4 90 71                  	mov.w	r1, #288
;             self.last_cc_evt = None; // Remove event
 8013b00: 8a f8 84 40                  	strb.w	r4, [r10, #132]
;                     None
 8013b04: 05 f1 08 00                  	add.w	r0, r5, #8
 8013b08: 08 f0 7c fd                  	bl	#35576
 8013b0c: 02 20                        	movs	r0, #2
 8013b0e: c5 e9 00 04                  	strd	r0, r4, [r5]
;             });
 8013b12: 0d f5 6d 7d                  	add.w	sp, sp, #948
 8013b16: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 8013b1a: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 8013b1c: 12 ac                        	add	r4, sp, #72
 8013b1e: 5a ad                        	add	r5, sp, #360
 8013b20: a2 a8                        	add	r0, sp, #648
 8013b22: 0a 30                        	adds	r0, #10
 8013b24: 01 90                        	str	r0, [sp, #4]
 8013b26: 03 e0                        	b	#6 <_ZN17stm32wb55_homekit4idle28_$u7b$$u7b$closure$u7d$$u7d$17hf5c6ccd0e008ca1cE+0x200>
;         Err(v)
 8013b28: 20 46                        	mov	r0, r4
 8013b2a: 3e 21                        	movs	r1, #62
 8013b2c: 08 f0 6a fd                  	bl	#35540
;         if n >= self.evt_buf.size() {
 8013b30: 0a f1 90 02                  	add.w	r2, r10, #144
 8013b34: 00 23                        	movs	r3, #0
 8013b36: 07 ca                        	ldm	r2, {r0, r1, r2}
 8013b38: 8a 42                        	cmp	r2, r1
;         if self.write_index >= self.read_index {
 8013b3a: a2 eb 01 02                  	sub.w	r2, r2, r1
;         if n >= self.evt_buf.size() {
 8013b3e: 38 bf                        	it	lo
 8013b40: 43 42                        	rsblo	r3, r0, #0
 8013b42: 9a 42                        	cmp	r2, r3
 8013b44: f0 d0                        	beq	#-32 <_ZN17stm32wb55_homekit4idle28_$u7b$$u7b$closure$u7d$$u7d$17hf5c6ccd0e008ca1cE+0x1f8>
;         self.buffer[(self.read_index + n) % self.buffer.len()]
 8013b46: 00 28                        	cmp	r0, #0
 8013b48: 00 f0 88 80                  	beq.w	#272 <_ZN17stm32wb55_homekit4idle28_$u7b$$u7b$closure$u7d$$u7d$17hf5c6ccd0e008ca1cE+0x32c>
 8013b4c: b1 fb f0 f2                  	udiv	r2, r1, r0
 8013b50: 02 fb 10 10                  	mls	r0, r2, r0, r1
 8013b54: da f8 8c 10                  	ldr.w	r1, [r10, #140]
 8013b58: 11 f8 00 b0                  	ldrb.w	r11, [r1, r0]
;             PACKET_TYPE_HCI_EVENT => Ok(Packet::Event(read_event(self)?)),
 8013b5c: bb f1 04 0f                  	cmp.w	r11, #4
 8013b60: 25 d1                        	bne	#74 <_ZN17stm32wb55_homekit4idle28_$u7b$$u7b$closure$u7d$$u7d$17hf5c6ccd0e008ca1cE+0x27e>
 8013b62: a2 a8                        	add	r0, sp, #648
 8013b64: ec f7 ea fa                  	bl	#-80428
;         self
 8013b68: 01 99                        	ldr	r1, [sp, #4]
 8013b6a: 28 46                        	mov	r0, r5
 8013b6c: 4f f4 8f 72                  	mov.w	r2, #286
 8013b70: dd e9 a2 68                  	ldrd	r6, r8, [sp, #648]
 8013b74: 9d f8 91 b2                  	ldrb.w	r11, [sp, #657]
 8013b78: 9d f8 90 92                  	ldrb.w	r9, [sp, #656]
 8013b7c: 08 f0 cd fb                  	bl	#34714
;             PACKET_TYPE_HCI_EVENT => Ok(Packet::Event(read_event(self)?)),
 8013b80: 86 f0 01 00                  	eor	r0, r6, #1
 8013b84: 50 ea 08 00                  	orrs.w	r0, r0, r8
 8013b88: 1f d1                        	bne	#62 <_ZN17stm32wb55_homekit4idle28_$u7b$$u7b$closure$u7d$$u7d$17hf5c6ccd0e008ca1cE+0x29a>
;         Err(v)
 8013b8a: 28 46                        	mov	r0, r5
 8013b8c: 21 46                        	mov	r1, r4
 8013b8e: a4 46                        	mov	r12, r4
 8013b90: ae 46                        	mov	lr, r5
 8013b92: 7c c8                        	ldm	r0!, {r2, r3, r4, r5, r6}
;                     Some(block!(rc.read()))
 8013b94: b9 f1 03 0f                  	cmp.w	r9, #3
;         Err(v)
 8013b98: 7c c1                        	stm	r1!, {r2, r3, r4, r5, r6}
 8013b9a: 7c c8                        	ldm	r0!, {r2, r3, r4, r5, r6}
 8013b9c: 7c c1                        	stm	r1!, {r2, r3, r4, r5, r6}
 8013b9e: 7c c8                        	ldm	r0!, {r2, r3, r4, r5, r6}
 8013ba0: 7c c1                        	stm	r1!, {r2, r3, r4, r5, r6}
 8013ba2: 75 46                        	mov	r5, lr
 8013ba4: 64 46                        	mov	r4, r12
 8013ba6: 00 88                        	ldrh	r0, [r0]
 8013ba8: 08 80                        	strh	r0, [r1]
;                     Some(block!(rc.read()))
 8013baa: c1 d0                        	beq	#-126 <_ZN17stm32wb55_homekit4idle28_$u7b$$u7b$closure$u7d$$u7d$17hf5c6ccd0e008ca1cE+0x200>
 8013bac: 01 e0                        	b	#2 <_ZN17stm32wb55_homekit4idle28_$u7b$$u7b$closure$u7d$$u7d$17hf5c6ccd0e008ca1cE+0x282>
 8013bae: 4f f0 00 09                  	mov.w	r9, #0
 8013bb2: 6e cc                        	ldm	r4!, {r1, r2, r3, r5, r6}
 8013bb4: 02 a8                        	add	r0, sp, #8
 8013bb6: 6e c0                        	stm	r0!, {r1, r2, r3, r5, r6}
 8013bb8: 6e cc                        	ldm	r4!, {r1, r2, r3, r5, r6}
 8013bba: 6e c0                        	stm	r0!, {r1, r2, r3, r5, r6}
 8013bbc: 6e cc                        	ldm	r4!, {r1, r2, r3, r5, r6}
 8013bbe: 6e c0                        	stm	r0!, {r1, r2, r3, r5, r6}
 8013bc0: 21 88                        	ldrh	r1, [r4]
 8013bc2: 01 80                        	strh	r1, [r0]
 8013bc4: 00 21                        	movs	r1, #0
 8013bc6: 01 20                        	movs	r0, #1
 8013bc8: 23 e0                        	b	#70 <_ZN17stm32wb55_homekit4idle28_$u7b$$u7b$closure$u7d$$u7d$17hf5c6ccd0e008ca1cE+0x2e2>
 8013bca: 5a a9                        	add	r1, sp, #360
;             PACKET_TYPE_HCI_EVENT => Ok(Packet::Event(read_event(self)?)),
 8013bcc: 20 46                        	mov	r0, r4
 8013bce: 4f f4 8f 72                  	mov.w	r2, #286
 8013bd2: 08 f0 df fb                  	bl	#34750
 8013bd6: 25 46                        	mov	r5, r4
 8013bd8: a2 ac                        	add	r4, sp, #648
;                     Some(block!(rc.read()))
 8013bda: 29 46                        	mov	r1, r5
 8013bdc: 4f f4 8f 72                  	mov.w	r2, #286
 8013be0: 20 46                        	mov	r0, r4
 8013be2: 08 f0 d7 fb                  	bl	#34734
 8013be6: 4f cd                        	ldm	r5!, {r0, r1, r2, r3, r6}
 8013be8: 0d f1 08 0c                  	add.w	r12, sp, #8
 8013bec: ac e8 4f 00                  	stm.w	r12!, {r0, r1, r2, r3, r6}
 8013bf0: 4f cd                        	ldm	r5!, {r0, r1, r2, r3, r6}
 8013bf2: ac e8 4f 00                  	stm.w	r12!, {r0, r1, r2, r3, r6}
 8013bf6: 4f cd                        	ldm	r5!, {r0, r1, r2, r3, r6}
 8013bf8: ac e8 4f 00                  	stm.w	r12!, {r0, r1, r2, r3, r6}
 8013bfc: 04 f1 3e 01                  	add.w	r1, r4, #62
 8013c00: e0 22                        	movs	r2, #224
 8013c02: 28 88                        	ldrh	r0, [r5]
 8013c04: ac f8 00 00                  	strh.w	r0, [r12]
 8013c08: 5a a8                        	add	r0, sp, #360
 8013c0a: 08 f0 86 fb                  	bl	#34572
 8013c0e: 00 20                        	movs	r0, #0
 8013c10: 00 21                        	movs	r1, #0
 8013c12: 00 9c                        	ldr	r4, [sp]
 8013c14: 3e 22                        	movs	r2, #62
 8013c16: 84 f8 09 b0                  	strb.w	r11, [r4, #9]
 8013c1a: 84 f8 08 90                  	strb.w	r9, [r4, #8]
 8013c1e: c4 e9 00 01                  	strd	r0, r1, [r4]
 8013c22: 04 f1 0a 00                  	add.w	r0, r4, #10
 8013c26: 02 a9                        	add	r1, sp, #8
 8013c28: 08 f0 77 fb                  	bl	#34542
 8013c2c: 04 f1 48 00                  	add.w	r0, r4, #72
 8013c30: 5a a9                        	add	r1, sp, #360
 8013c32: e0 22                        	movs	r2, #224
 8013c34: 08 f0 fa fb                  	bl	#34804
;             });
 8013c38: 0d f5 6d 7d                  	add.w	sp, sp, #948
 8013c3c: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 8013c40: f0 bd                        	pop	{r4, r5, r6, r7, pc}
;             Err(e) => unwrap_failed(msg, &e),
 8013c42: 4f f2 50 60                  	movw	r0, #63056
 8013c46: 4f f2 40 63                  	movw	r3, #63040
 8013c4a: a2 aa                        	add	r2, sp, #648
 8013c4c: c0 f6 01 00                  	movt	r0, #2049
 8013c50: c0 f6 01 03                  	movt	r3, #2049
 8013c54: 19 21                        	movs	r1, #25
 8013c56: 02 f0 04 fc                  	bl	#10248
 8013c5a: fe de                        	trap
 8013c5c: 4f f2 b0 30                  	movw	r0, #62384
 8013c60: 39 21                        	movs	r1, #57
 8013c62: c0 f6 01 00                  	movt	r0, #2049
 8013c66: 02 f0 f7 fb                  	bl	#10222
 8013c6a: fe de                        	trap
 8013c6c: 4f f2 2d 60                  	movw	r0, #63021
 8013c70: 4f f2 40 63                  	movw	r3, #63040
 8013c74: a2 aa                        	add	r2, sp, #648
 8013c76: c0 f6 01 00                  	movt	r0, #2049
 8013c7a: c0 f6 01 03                  	movt	r3, #2049
 8013c7e: 11 21                        	movs	r1, #17
 8013c80: 02 f0 ef fb                  	bl	#10206
 8013c84: fe de                        	trap
;             slice_index_order_fail(self.start, self.end);
 8013c86: 20 46                        	mov	r0, r4
 8013c88: 11 46                        	mov	r1, r2
 8013c8a: 02 f0 c4 f8                  	bl	#8584
 8013c8e: fe de                        	trap
;             slice_index_len_fail(self.end, slice.len());
 8013c90: 10 46                        	mov	r0, r2
 8013c92: 02 f0 c0 f8                  	bl	#8576
 8013c96: fe de                        	trap
;             panic!(
 8013c98: 01 f0 4a ff                  	bl	#7828
 8013c9c: fe de                        	trap

08013c9e IPCC_C1_RX_IT:
; #[app(device = stm32wb_hal::pac, peripherals = true)]
 8013c9e: f0 b5                        	push	{r4, r5, r6, r7, lr}
 8013ca0: 03 af                        	add	r7, sp, #12
 8013ca2: 2d e9 00 07                  	push.w	{r8, r9, r10}
 8013ca6: 82 b0                        	sub	sp, #8
 8013ca8: 40 f6 04 48                  	movw	r8, #3076
 8013cac: c5 f6 00 08                  	movt	r8, #22528
;     intrinsics::volatile_load(src)
 8013cb0: d8 f8 18 00                  	ldr.w	r0, [r8, #24]
;         self.c2_is_active_flag(channel) && self.c1_get_rx_channel(channel)
 8013cb4: 80 07                        	lsls	r0, r0, #30
 8013cb6: 48 d5                        	bpl	#144 <IPCC_C1_RX_IT+0xb0>
;     intrinsics::volatile_load(src)
 8013cb8: d8 f8 00 00                  	ldr.w	r0, [r8]
;         self.c2_is_active_flag(channel) && self.c1_get_rx_channel(channel)
 8013cbc: 80 07                        	lsls	r0, r0, #30
 8013cbe: 44 d4                        	bmi	#136 <IPCC_C1_RX_IT+0xb0>
 8013cc0: 40 f6 28 39                  	movw	r9, #2856
 8013cc4: 40 f2 28 2a                  	movw	r10, #552
 8013cc8: c2 f2 03 09                  	movt	r9, #8195
 8013ccc: c2 f2 00 0a                  	movt	r10, #8192
;                     unsafe { __primask() }
 8013cd0: 08 f0 d9 fa                  	bl	#34226
 8013cd4: 04 46                        	mov	r4, r0
;             __cpsid();
 8013cd6: 08 f0 ce fa                  	bl	#34204
;     if primask.is_active() {
 8013cda: e0 07                        	lsls	r0, r4, #31
;     interrupt::free(|_| ((*listHead).next) == listHead)
 8013cdc: d9 f8 00 50                  	ldr.w	r5, [r9]
;             __cpsie();
 8013ce0: 08 bf                        	it	eq
 8013ce2: 08 f0 ca fa                  	bleq	#34196
;             while !LST_is_empty(SYSTEM_EVT_QUEUE.as_mut_ptr()) {
 8013ce6: 4d 45                        	cmp	r5, r9
 8013ce8: 00 f0 9a 80                  	beq.w	#308 <IPCC_C1_RX_IT+0x186>
;                     unsafe { __primask() }
 8013cec: 08 f0 cb fa                  	bl	#34198
 8013cf0: 04 46                        	mov	r4, r0
;             __cpsid();
 8013cf2: 08 f0 c0 fa                  	bl	#34176
;         *node = (*listHead).next;
 8013cf6: d9 f8 00 60                  	ldr.w	r6, [r9]
;                     unsafe { __primask() }
 8013cfa: 08 f0 c4 fa                  	bl	#34184
 8013cfe: 05 46                        	mov	r5, r0
;             __cpsid();
 8013d00: 08 f0 b9 fa                  	bl	#34162
;         (*(*node).prev).next = (*node).next;
 8013d04: d6 e9 00 01                  	ldrd	r0, r1, [r6]
;             if r & (1 << 0) == (1 << 0) {
 8013d08: 04 f0 01 04                  	and	r4, r4, #1
;         (*(*node).prev).next = (*node).next;
 8013d0c: 08 60                        	str	r0, [r1]
;         (*(*node).next).prev = (*node).prev;
 8013d0e: d6 e9 00 01                  	ldrd	r0, r1, [r6]
 8013d12: 41 60                        	str	r1, [r0, #4]
;     if primask.is_active() {
 8013d14: e8 07                        	lsls	r0, r5, #31
;             __cpsie();
 8013d16: 08 bf                        	it	eq
 8013d18: 08 f0 af fa                  	bleq	#34142
;     if primask.is_active() {
 8013d1c: 00 2c                        	cmp	r4, #0
;             __cpsie();
 8013d1e: 08 bf                        	it	eq
 8013d20: 08 f0 ab fa                  	bleq	#34134
;                 let head = *self.0.head.get_mut();
 8013d24: 9a f8 80 10                  	ldrb.w	r1, [r10, #128]
;                 let tail = *self.0.tail.get_mut();
 8013d28: 9a f8 81 00                  	ldrb.w	r0, [r10, #129]
;                 intrinsics::wrapping_sub(self, rhs)
 8013d2c: 41 1a                        	subs	r1, r0, r1
 8013d2e: c9 b2                        	uxtb	r1, r1
;                 if tail.wrapping_sub(head) > cap - 1 {
 8013d30: 1f 29                        	cmp	r1, #31
 8013d32: 00 f2 82 80                  	bhi.w	#260 <IPCC_C1_RX_IT+0x1a0>
;                 small as Self
 8013d36: 00 f0 1f 00                  	and	r0, r0, #31
;     intrinsics::move_val_init(&mut *dst, src)
 8013d3a: 4a f8 20 60                  	str.w	r6, [r10, r0, lsl #2]
;                 *tail = tail.wrapping_add(1);
 8013d3e: 9a f8 81 00                  	ldrb.w	r0, [r10, #129]
;                 intrinsics::wrapping_add(self, rhs)
 8013d42: 01 30                        	adds	r0, #1
;                 *tail = tail.wrapping_add(1);
 8013d44: 8a f8 81 00                  	strb.w	r0, [r10, #129]
 8013d48: c2 e7                        	b	#-124 <IPCC_C1_RX_IT+0x36>
;     intrinsics::volatile_load(src)
 8013d4a: d8 f8 18 00                  	ldr.w	r0, [r8, #24]
;         self.c2_is_active_flag(channel) && self.c1_get_rx_channel(channel)
 8013d4e: 40 07                        	lsls	r0, r0, #29
 8013d50: 03 d5                        	bpl	#6 <IPCC_C1_RX_IT+0xc0>
;     intrinsics::volatile_load(src)
 8013d52: d8 f8 00 00                  	ldr.w	r0, [r8]
;         self.c2_is_active_flag(channel) && self.c1_get_rx_channel(channel)
 8013d56: 40 07                        	lsls	r0, r0, #29
 8013d58: 5a d5                        	bpl	#180 <IPCC_C1_RX_IT+0x176>
;     intrinsics::volatile_load(src)
 8013d5a: d8 f8 18 00                  	ldr.w	r0, [r8, #24]
;         self.c2_is_active_flag(channel) && self.c1_get_rx_channel(channel)
 8013d5e: c0 07                        	lsls	r0, r0, #31
 8013d60: 46 d0                        	beq	#140 <IPCC_C1_RX_IT+0x156>
;     intrinsics::volatile_load(src)
 8013d62: d8 f8 00 00                  	ldr.w	r0, [r8]
;         self.c2_is_active_flag(channel) && self.c1_get_rx_channel(channel)
 8013d66: c0 07                        	lsls	r0, r0, #31
 8013d68: 42 d1                        	bne	#132 <IPCC_C1_RX_IT+0x156>
 8013d6a: 40 f6 10 39                  	movw	r9, #2832
 8013d6e: 40 f2 28 2a                  	movw	r10, #552
 8013d72: c2 f2 03 09                  	movt	r9, #8195
 8013d76: c2 f2 00 0a                  	movt	r10, #8192
;                     unsafe { __primask() }
 8013d7a: 08 f0 84 fa                  	bl	#34056
 8013d7e: 04 46                        	mov	r4, r0
;             __cpsid();
 8013d80: 08 f0 79 fa                  	bl	#34034
;     if primask.is_active() {
 8013d84: e0 07                        	lsls	r0, r4, #31
;     interrupt::free(|_| ((*listHead).next) == listHead)
 8013d86: d9 f8 00 50                  	ldr.w	r5, [r9]
;             __cpsie();
 8013d8a: 08 bf                        	it	eq
 8013d8c: 08 f0 75 fa                  	bleq	#34026
;             while !LST_is_empty(EVT_QUEUE.as_mut_ptr()) {
 8013d90: 4d 45                        	cmp	r5, r9
 8013d92: 47 d0                        	beq	#142 <IPCC_C1_RX_IT+0x18a>
;                     unsafe { __primask() }
 8013d94: 08 f0 77 fa                  	bl	#34030
 8013d98: 04 46                        	mov	r4, r0
;             __cpsid();
 8013d9a: 08 f0 6c fa                  	bl	#34008
;         *node = (*listHead).next;
 8013d9e: d9 f8 00 60                  	ldr.w	r6, [r9]
;                     unsafe { __primask() }
 8013da2: 08 f0 70 fa                  	bl	#34016
 8013da6: 05 46                        	mov	r5, r0
;             __cpsid();
 8013da8: 08 f0 65 fa                  	bl	#33994
;         (*(*node).prev).next = (*node).next;
 8013dac: d6 e9 00 01                  	ldrd	r0, r1, [r6]
;             if r & (1 << 0) == (1 << 0) {
 8013db0: 04 f0 01 04                  	and	r4, r4, #1
;         (*(*node).prev).next = (*node).next;
 8013db4: 08 60                        	str	r0, [r1]
;         (*(*node).next).prev = (*node).prev;
 8013db6: d6 e9 00 01                  	ldrd	r0, r1, [r6]
 8013dba: 41 60                        	str	r1, [r0, #4]
;     if primask.is_active() {
 8013dbc: e8 07                        	lsls	r0, r5, #31
;             __cpsie();
 8013dbe: 08 bf                        	it	eq
 8013dc0: 08 f0 5b fa                  	bleq	#33974
;     if primask.is_active() {
 8013dc4: 00 2c                        	cmp	r4, #0
;             __cpsie();
 8013dc6: 08 bf                        	it	eq
 8013dc8: 08 f0 57 fa                  	bleq	#33966
;                 let head = *self.0.head.get_mut();
 8013dcc: 9a f8 80 10                  	ldrb.w	r1, [r10, #128]
;                 let tail = *self.0.tail.get_mut();
 8013dd0: 9a f8 81 00                  	ldrb.w	r0, [r10, #129]
;                 intrinsics::wrapping_sub(self, rhs)
 8013dd4: 41 1a                        	subs	r1, r0, r1
 8013dd6: c9 b2                        	uxtb	r1, r1
;                 if tail.wrapping_sub(head) > cap - 1 {
 8013dd8: 1f 29                        	cmp	r1, #31
 8013dda: 38 d8                        	bhi	#112 <IPCC_C1_RX_IT+0x1b4>
;                 small as Self
 8013ddc: 00 f0 1f 00                  	and	r0, r0, #31
;     intrinsics::move_val_init(&mut *dst, src)
 8013de0: 4a f8 20 60                  	str.w	r6, [r10, r0, lsl #2]
;                 *tail = tail.wrapping_add(1);
 8013de4: 9a f8 81 00                  	ldrb.w	r0, [r10, #129]
;                 intrinsics::wrapping_add(self, rhs)
 8013de8: 01 30                        	adds	r0, #1
;                 *tail = tail.wrapping_add(1);
 8013dea: 8a f8 81 00                  	strb.w	r0, [r10, #129]
 8013dee: c4 e7                        	b	#-120 <IPCC_C1_RX_IT+0xe0>
;     intrinsics::volatile_load(src)
 8013df0: d8 f8 18 00                  	ldr.w	r0, [r8, #24]
;         self.c2_is_active_flag(channel) && self.c1_get_rx_channel(channel)
 8013df4: 00 07                        	lsls	r0, r0, #28
 8013df6: 03 d5                        	bpl	#6 <IPCC_C1_RX_IT+0x166>
;     intrinsics::volatile_load(src)
 8013df8: d8 f8 00 00                  	ldr.w	r0, [r8]
;         self.c2_is_active_flag(channel) && self.c1_get_rx_channel(channel)
 8013dfc: 00 07                        	lsls	r0, r0, #28
 8013dfe: 07 d5                        	bpl	#14 <IPCC_C1_RX_IT+0x176>
;     intrinsics::volatile_load(src)
 8013e00: d8 f8 18 00                  	ldr.w	r0, [r8, #24]
;         self.c2_is_active_flag(channel) && self.c1_get_rx_channel(channel)
 8013e04: c0 06                        	lsls	r0, r0, #27
 8013e06: 10 d5                        	bpl	#32 <IPCC_C1_RX_IT+0x190>
;     intrinsics::volatile_load(src)
 8013e08: d8 f8 00 00                  	ldr.w	r0, [r8]
;         self.c2_is_active_flag(channel) && self.c1_get_rx_channel(channel)
 8013e0c: c0 06                        	lsls	r0, r0, #27
 8013e0e: 0c d4                        	bmi	#24 <IPCC_C1_RX_IT+0x190>
 8013e10: 40 f6 17 20                  	movw	r0, #2583
 8013e14: 13 21                        	movs	r1, #19
 8013e16: c0 f6 02 00                  	movt	r0, #2050
 8013e1a: 02 f0 1d fb                  	bl	#9786
 8013e1e: fe de                        	trap
 8013e20: 02 20                        	movs	r0, #2
 8013e22: 00 e0                        	b	#0 <IPCC_C1_RX_IT+0x18c>
 8013e24: 01 20                        	movs	r0, #1
 8013e26: c8 f8 04 00                  	str.w	r0, [r8, #4]
;                 __basepri_w(_basepri);
 8013e2a: 00 20                        	movs	r0, #0
 8013e2c: 02 b0                        	add	sp, #8
 8013e2e: bd e8 00 07                  	pop.w	{r8, r9, r10}
 8013e32: bd e8 f0 40                  	pop.w	{r4, r5, r6, r7, lr}
 8013e36: 08 f0 2b ba                  	b.w	#33878 <__basepri_w+0x4>
;             Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
 8013e3a: 40 f6 6f 20                  	movw	r0, #2671
 8013e3e: 40 f6 9c 23                  	movw	r3, #2716
 8013e42: 01 aa                        	add	r2, sp, #4
 8013e44: c0 f6 02 00                  	movt	r0, #2050
 8013e48: c0 f6 02 03                  	movt	r3, #2050
 8013e4c: 08 e0                        	b	#16 <IPCC_C1_RX_IT+0x1c6>
 8013e4e: 40 f6 6f 20                  	movw	r0, #2671
 8013e52: 40 f6 9c 23                  	movw	r3, #2716
 8013e56: c0 f6 02 00                  	movt	r0, #2050
 8013e5a: c0 f6 02 03                  	movt	r3, #2050
 8013e5e: 6a 46                        	mov	r2, sp
 8013e60: 2b 21                        	movs	r1, #43
 8013e62: 02 f0 fe fa                  	bl	#9724
 8013e66: fe de                        	trap

08013e68 IPCC_C1_TX_IT:
; #[app(device = stm32wb_hal::pac, peripherals = true)]
 8013e68: d0 b5                        	push	{r4, r6, r7, lr}
 8013e6a: 02 af                        	add	r7, sp, #8
 8013e6c: 40 f6 04 44                  	movw	r4, #3076
 8013e70: c5 f6 00 04                  	movt	r4, #22528
;     intrinsics::volatile_load(src)
 8013e74: a0 68                        	ldr	r0, [r4, #8]
;         !self.c1_is_active_flag(channel) && self.c1_get_tx_channel(channel)
 8013e76: 80 07                        	lsls	r0, r0, #30
;     intrinsics::volatile_load(src)
 8013e78: 5c bf                        	itt	pl
 8013e7a: 20 68                        	ldrpl	r0, [r4]
;         !self.c1_is_active_flag(channel) && self.c1_get_tx_channel(channel)
 8013e7c: 5f ea 80 30                  	lslspl.w	r0, r0, #14
 8013e80: 1d d5                        	bpl	#58 <IPCC_C1_TX_IT+0x5a>
;     intrinsics::volatile_load(src)
 8013e82: a0 68                        	ldr	r0, [r4, #8]
;         !self.c1_is_active_flag(channel) && self.c1_get_tx_channel(channel)
 8013e84: 40 07                        	lsls	r0, r0, #29
;     intrinsics::volatile_load(src)
 8013e86: 5c bf                        	itt	pl
 8013e88: 20 68                        	ldrpl	r0, [r4]
;         !self.c1_is_active_flag(channel) && self.c1_get_tx_channel(channel)
 8013e8a: 5f ea 40 30                  	lslspl.w	r0, r0, #13
 8013e8e: 3d d5                        	bpl	#122 <IPCC_C1_TX_IT+0xa8>
;     intrinsics::volatile_load(src)
 8013e90: a0 68                        	ldr	r0, [r4, #8]
;         !self.c1_is_active_flag(channel) && self.c1_get_tx_channel(channel)
 8013e92: 00 07                        	lsls	r0, r0, #28
;     intrinsics::volatile_load(src)
 8013e94: 5c bf                        	itt	pl
 8013e96: 20 68                        	ldrpl	r0, [r4]
;         !self.c1_is_active_flag(channel) && self.c1_get_tx_channel(channel)
 8013e98: 5f ea 00 30                  	lslspl.w	r0, r0, #12
 8013e9c: 28 d5                        	bpl	#80 <IPCC_C1_TX_IT+0x8c>
;     intrinsics::volatile_load(src)
 8013e9e: a0 68                        	ldr	r0, [r4, #8]
;         !self.c1_is_active_flag(channel) && self.c1_get_tx_channel(channel)
 8013ea0: 80 06                        	lsls	r0, r0, #26
;     intrinsics::volatile_load(src)
 8013ea2: 5f bf                        	itttt	pl
 8013ea4: 20 68                        	ldrpl	r0, [r4]
;         !self.c1_is_active_flag(channel) && self.c1_get_tx_channel(channel)
 8013ea6: 5f ea 80 20                  	lslspl.w	r0, r0, #10
;     intrinsics::volatile_load(src)
 8013eaa: 20 68                        	ldrpl	r0, [r4]
;         self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
 8013eac: 40 f4 00 10                  	orrpl	r0, r0, #2097152
;     intrinsics::volatile_store(dst, src);
 8013eb0: 58 bf                        	it	pl
 8013eb2: 20 60                        	strpl	r0, [r4]
;                 __basepri_w(_basepri);
 8013eb4: 00 20                        	movs	r0, #0
 8013eb6: bd e8 d0 40                  	pop.w	{r4, r6, r7, lr}
 8013eba: 08 f0 e9 b9                  	b.w	#33746 <__basepri_w+0x4>
;     intrinsics::volatile_load(src)
 8013ebe: 20 68                        	ldr	r0, [r4]
;             self.last_cc_evt = Some(self.sys.cmd_evt_handler(ipcc));
 8013ec0: 40 f2 28 21                  	movw	r1, #552
 8013ec4: c2 f2 00 01                  	movt	r1, #8192
;         self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
 8013ec8: 40 f4 00 30                  	orr	r0, r0, #131072
;     intrinsics::volatile_store(dst, src);
 8013ecc: 20 60                        	str	r0, [r4]
;             let pcmd: *const CmdPacket = (&*TL_SYS_TABLE.as_ptr()).pcmd_buffer;
 8013ece: 40 f2 58 00                  	movw	r0, #88
 8013ed2: c2 f2 03 00                  	movt	r0, #8195
 8013ed6: 00 68                        	ldr	r0, [r0]
;             *cc
 8013ed8: d0 f8 0b 00                  	ldr.w	r0, [r0, #11]
;             self.last_cc_evt = Some(self.sys.cmd_evt_handler(ipcc));
 8013edc: c1 f8 85 00                  	str.w	r0, [r1, #133]
 8013ee0: 01 20                        	movs	r0, #1
 8013ee2: 81 f8 84 00                  	strb.w	r0, [r1, #132]
;                 __basepri_w(_basepri);
 8013ee6: 00 20                        	movs	r0, #0
 8013ee8: bd e8 d0 40                  	pop.w	{r4, r6, r7, lr}
 8013eec: 08 f0 d0 b9                  	b.w	#33696 <__basepri_w+0x4>
;     intrinsics::volatile_load(src)
 8013ef0: 20 68                        	ldr	r0, [r4]
;         self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
 8013ef2: 40 f4 00 20                  	orr	r0, r0, #524288
;     intrinsics::volatile_store(dst, src);
 8013ef6: 20 60                        	str	r0, [r4]
;     send_free_buf();
 8013ef8: 08 f0 d7 f8                  	bl	#33198
 8013efc: 4f f4 00 20                  	mov.w	r0, #524288
;     intrinsics::volatile_store(dst, src);
 8013f00: 60 60                        	str	r0, [r4, #4]
;                 __basepri_w(_basepri);
 8013f02: 00 20                        	movs	r0, #0
 8013f04: bd e8 d0 40                  	pop.w	{r4, r6, r7, lr}
 8013f08: 08 f0 c2 b9                  	b.w	#33668 <__basepri_w+0x4>
;             todo!()
 8013f0c: 40 f6 17 20                  	movw	r0, #2583
 8013f10: 13 21                        	movs	r1, #19
 8013f12: c0 f6 02 00                  	movt	r0, #2050
 8013f16: 02 f0 9f fa                  	bl	#9534
 8013f1a: fe de                        	trap

08013f1c LPUART1:
; #[app(device = stm32wb_hal::pac, peripherals = true)]
 8013f1c: f0 b5                        	push	{r4, r5, r6, r7, lr}
 8013f1e: 03 af                        	add	r7, sp, #12
 8013f20: 2d e9 00 0f                  	push.w	{r8, r9, r10, r11}
 8013f24: ad f5 5d 7d                  	sub.w	sp, sp, #884
 8013f28: 40 f2 08 25                  	movw	r5, #520
 8013f2c: 41 f2 20 68                  	movw	r8, #5664
 8013f30: 40 f2 98 4a                  	movw	r10, #1176
 8013f34: 0d f5 13 7b                  	add.w	r11, sp, #588
 8013f38: 4a a8                        	add	r0, sp, #296
 8013f3a: c2 f2 00 05                  	movt	r5, #8192
 8013f3e: c2 f2 00 08                  	movt	r8, #8192
 8013f42: 4f f0 01 09                  	mov.w	r9, #1
 8013f46: c2 f2 00 0a                  	movt	r10, #8192
 8013f4a: 09 30                        	adds	r0, #9
 8013f4c: 01 90                        	str	r0, [sp, #4]
 8013f4e: 40 f2 10 4c                  	movw	r12, #1040
 8013f52: 41 f2 84 13                  	movw	r3, #4484
 8013f56: 4f f4 8c 74                  	mov.w	r4, #280
 8013f5a: c2 f2 00 0c                  	movt	r12, #8192
;         Relaxed => intrinsics::atomic_load_relaxed(dst),
 8013f5e: 28 7d                        	ldrb	r0, [r5, #20]
 8013f60: 69 7d                        	ldrb	r1, [r5, #21]
 8013f62: c2 b2                        	uxtb	r2, r0
 8013f64: c9 b2                        	uxtb	r1, r1
;                 if head != tail {
 8013f66: 8a 42                        	cmp	r2, r1
 8013f68: 00 f0 78 82                  	beq.w	#1264 <$t.163+0x4d2>
;                 small as Self
 8013f6c: 00 f0 03 01                  	and	r1, r0, #3
;         intrinsics::offset(self, count)
 8013f70: 05 f1 14 02                  	add.w	r2, r5, #20
;                 intrinsics::wrapping_add(self, rhs)
 8013f74: 01 30                        	adds	r0, #1
;         intrinsics::offset(self, count)
 8013f76: 02 eb 41 01                  	add.w	r1, r2, r1, lsl #1
;     copy_nonoverlapping(src, dst, count)
 8013f7a: 49 88                        	ldrh	r1, [r1, #2]
;         Relaxed => intrinsics::atomic_store_relaxed(dst, val),
 8013f7c: 28 75                        	strb	r0, [r5, #20]
;     copy_nonoverlapping(src, dst, count)
 8013f7e: 0e 0a                        	lsrs	r6, r1, #8
; #[app(device = stm32wb_hal::pac, peripherals = true)]
 8013f80: c8 b2                        	uxtb	r0, r1
 8013f82: df e8 10 f0                  	tbh	[pc, r0, lsl #1]

08013f86 $d.162:
 8013f86:	29 00 04 00	.word	0x00040029
 8013f8a:	80 00 6b 02	.word	0x026b0080

08013f8e $t.163:
;         Relaxed => intrinsics::atomic_load_relaxed(dst),
 8013f8e: 68 79                        	ldrb	r0, [r5, #5]
;     intrinsics::move_val_init(&mut *dst, src)
 8013f90: ae 71                        	strb	r6, [r5, #6]
;                 intrinsics::wrapping_add(self, rhs)
 8013f92: 01 30                        	adds	r0, #1
;         Relaxed => intrinsics::atomic_store_relaxed(dst, val),
 8013f94: 68 71                        	strb	r0, [r5, #5]
;                 if *head != *tail {
 8013f96: 9c f8 80 00                  	ldrb.w	r0, [r12, #128]
 8013f9a: 9c f8 81 10                  	ldrb.w	r1, [r12, #129]
 8013f9e: 88 42                        	cmp	r0, r1
 8013fa0: dd d0                        	beq	#-70 <LPUART1+0x46>
;                 small as Self
 8013fa2: 00 f0 1f 01                  	and	r1, r0, #31
;                 intrinsics::wrapping_add(self, rhs)
 8013fa6: 01 30                        	adds	r0, #1
;                     let item = unsafe { (p as *const T).add(usize::from(*head % cap)).read() };
 8013fa8: 5c f8 21 20                  	ldr.w	r2, [r12, r1, lsl #2]
;                     *head = head.wrapping_add(1);
 8013fac: 8c f8 80 00                  	strb.w	r0, [r12, #128]
;         if let Some(cmd) = cx.resources.hci_commands_queue.dequeue() {
 8013fb0: 00 2a                        	cmp	r2, #0
 8013fb2: d4 d0                        	beq	#-88 <LPUART1+0x46>
;             cmd(&mut cx.resources.rc, &cx.resources.ble_context);
 8013fb4: 40 f2 28 20                  	movw	r0, #552
 8013fb8: 40 f2 ec 31                  	movw	r1, #1004
 8013fbc: c2 f2 00 00                  	movt	r0, #8192
 8013fc0: c2 f2 00 01                  	movt	r1, #8192
 8013fc4: 90 47                        	blx	r2
 8013fc6: 40 f2 10 4c                  	movw	r12, #1040
 8013fca: 4f f4 8c 74                  	mov.w	r4, #280
 8013fce: c2 f2 00 0c                  	movt	r12, #8192
 8013fd2: 41 f2 84 13                  	movw	r3, #4484
 8013fd6: c2 e7                        	b	#-124 <LPUART1+0x46>
;     copy_nonoverlapping(src, dst, count)
 8013fd8: 41 f2 20 61                  	movw	r1, #5664
 8013fdc: 06 eb c6 00                  	add.w	r0, r6, r6, lsl #3
 8013fe0: c2 f2 00 01                  	movt	r1, #8192
 8013fe4: 02 ac                        	add	r4, sp, #8
 8013fe6: 01 eb 40 11                  	add.w	r1, r1, r0, lsl #5
;     tmp.assume_init()
 8013fea: 4f f4 90 72                  	mov.w	r2, #288
 8013fee: 20 46                        	mov	r0, r4
 8013ff0: 08 f0 1c fa                  	bl	#33848
;         Relaxed => intrinsics::atomic_load_relaxed(dst),
 8013ff4: 28 7a                        	ldrb	r0, [r5, #8]
; #[app(device = stm32wb_hal::pac, peripherals = true)]
 8013ff6: 21 46                        	mov	r1, r4
;     intrinsics::move_val_init(&mut *dst, src)
 8013ff8: 6e 72                        	strb	r6, [r5, #9]
 8013ffa: 4a ae                        	add	r6, sp, #296
;                 intrinsics::wrapping_add(self, rhs)
 8013ffc: 01 30                        	adds	r0, #1
;         Relaxed => intrinsics::atomic_store_relaxed(dst, val),
 8013ffe: 28 72                        	strb	r0, [r5, #8]
 8014000: 4e f6 b3 45                  	movw	r5, #60595
; #[app(device = stm32wb_hal::pac, peripherals = true)]
 8014004: 30 46                        	mov	r0, r6
 8014006: 4f f4 90 72                  	mov.w	r2, #288
 801400a: c0 f6 00 05                  	movt	r5, #2048
 801400e: 95 ac                        	add	r4, sp, #596
 8014010: 08 f0 0c fa                  	bl	#33816
 8014014: 4f f0 01 09                  	mov.w	r9, #1
 8014018: 00 20                        	movs	r0, #0
;         write(&mut self, args)
 801401a: cd e9 9a b9                  	strd	r11, r9, [sp, #616]
 801401e: 4c f6 bc 41                  	movw	r1, #52412
 8014022: cd e9 98 00                  	strd	r0, r0, [sp, #608]
 8014026: 02 20                        	movs	r0, #2
 8014028: 97 90                        	str	r0, [sp, #604]
 801402a: 4d f6 98 30                  	movw	r0, #56216
;         write!(cx.resources.serial, "{:?}\r\n", &event);
 801402e: 94 95                        	str	r5, [sp, #592]
;         write(&mut self, args)
 8014030: c0 f6 01 00                  	movt	r0, #2049
 8014034: 96 ad                        	add	r5, sp, #600
 8014036: 96 90                        	str	r0, [sp, #600]
 8014038: dc a8                        	add	r0, sp, #880
 801403a: c0 f6 01 01                  	movt	r1, #2049
 801403e: 2a 46                        	mov	r2, r5
;         write!(cx.resources.serial, "{:?}\r\n", &event);
 8014040: 93 94                        	str	r4, [sp, #588]
 8014042: 95 96                        	str	r6, [sp, #596]
 8014044: cd f8 70 83                  	str.w	r8, [sp, #880]
;         write(&mut self, args)
 8014048: 02 f0 1c f9                  	bl	#8760
;         if let Event::CommandComplete(command_complete) = event {
 801404c: 9d f8 28 01                  	ldrb.w	r0, [sp, #296]
 8014050: 04 28                        	cmp	r0, #4
 8014052: 40 f0 fe 81                  	bne.w	#1020 <$t.163+0x4c8>
;             cx.resources.result_queue.enqueue(command_complete).unwrap();
 8014056: 01 99                        	ldr	r1, [sp, #4]
 8014058: 28 46                        	mov	r0, r5
 801405a: 40 f2 17 12                  	movw	r2, #279
;         if let Event::CommandComplete(command_complete) = event {
 801405e: 9d f8 30 61                  	ldrb.w	r6, [sp, #304]
;             cx.resources.result_queue.enqueue(command_complete).unwrap();
 8014062: 08 f0 5a f9                  	bl	#33460
;                 let head = *self.0.head.get_mut();
 8014066: 4f f4 8c 50                  	mov.w	r0, #4480
 801406a: 5a f8 00 10                  	ldr.w	r1, [r10, r0]
 801406e: 41 f2 84 10                  	movw	r0, #4484
;                 let tail = *self.0.tail.get_mut();
 8014072: 5a f8 00 00                  	ldr.w	r0, [r10, r0]
;                 intrinsics::wrapping_sub(self, rhs)
 8014076: 41 1a                        	subs	r1, r0, r1
;                 if tail.wrapping_sub(head) > cap - 1 {
 8014078: 0f 29                        	cmp	r1, #15
 801407a: 40 f2 d6 81                  	bls.w	#940 <$t.163+0x4a0>
;             Ok(t) => t,
 801407e: 24 2e                        	cmp	r6, #36
 8014080: 00 f0 e7 81                  	beq.w	#974 <$t.163+0x4c8>
 8014084: f2 e1                        	b	#996 <$t.163+0x4e2>
;         Relaxed => intrinsics::atomic_load_relaxed(dst),
 8014086: a8 78                        	ldrb	r0, [r5, #2]
;     intrinsics::move_val_init(&mut *dst, src)
 8014088: ee 70                        	strb	r6, [r5, #3]
;                 intrinsics::wrapping_add(self, rhs)
 801408a: 01 30                        	adds	r0, #1
;         Relaxed => intrinsics::atomic_store_relaxed(dst, val),
 801408c: a8 70                        	strb	r0, [r5, #2]
;                 let head = *self.0.head.get_mut();
 801408e: 9c f8 80 10                  	ldrb.w	r1, [r12, #128]
;                 let tail = *self.0.tail.get_mut();
 8014092: 9c f8 81 00                  	ldrb.w	r0, [r12, #129]
; #[app(device = stm32wb_hal::pac, peripherals = true)]
 8014096: 8d f8 08 90                  	strb.w	r9, [sp, #8]
;                 intrinsics::wrapping_sub(self, rhs)
 801409a: 41 1a                        	subs	r1, r0, r1
 801409c: c9 b2                        	uxtb	r1, r1
;                 if tail.wrapping_sub(head) > cap - 1 {
 801409e: 1f 29                        	cmp	r1, #31
 80140a0: 0c d8                        	bhi	#24 <$t.163+0x132>
;     intrinsics::move_val_init(&mut *dst, src)
 80140a2: 41 f6 31 11                  	movw	r1, #6449
;                 small as Self
 80140a6: 00 f0 1f 00                  	and	r0, r0, #31
;     intrinsics::move_val_init(&mut *dst, src)
 80140aa: c0 f6 01 01                  	movt	r1, #2049
 80140ae: 4c f8 20 10                  	str.w	r1, [r12, r0, lsl #2]
;                 *tail = tail.wrapping_add(1);
 80140b2: 9c f8 81 00                  	ldrb.w	r0, [r12, #129]
;                 intrinsics::wrapping_add(self, rhs)
 80140b6: 01 30                        	adds	r0, #1
;                 *tail = tail.wrapping_add(1);
 80140b8: 8c f8 81 00                  	strb.w	r0, [r12, #129]
 80140bc: 4f f4 8c 56                  	mov.w	r6, #4480
 80140c0: 5a f8 03 10                  	ldr.w	r1, [r10, r3]
;                 if *head != *tail {
 80140c4: 5a f8 06 20                  	ldr.w	r2, [r10, r6]
 80140c8: 8a 42                        	cmp	r2, r1
 80140ca: 23 d0                        	beq	#70 <$t.163+0x18a>
;                     let item = unsafe { (p as *const T).add(usize::from(*head % cap)).read() };
 80140cc: 02 f0 0f 03                  	and	r3, r2, #15
;                 intrinsics::wrapping_add(self, rhs)
 80140d0: 01 32                        	adds	r2, #1
;         intrinsics::offset(self, count)
 80140d2: 63 43                        	muls	r3, r4, r3
;     tmp.assume_init()
 80140d4: 1a f8 03 30                  	ldrb.w	r3, [r10, r3]
;                     *head = head.wrapping_add(1);
 80140d8: 4a f8 06 20                  	str.w	r2, [r10, r6]
;                 Some(_result) => {
 80140dc: 24 2b                        	cmp	r3, #36
 80140de: 28 d1                        	bne	#80 <$t.163+0x1a8>
;                 if *head != *tail {
 80140e0: 8a 42                        	cmp	r2, r1
 80140e2: 17 d0                        	beq	#46 <$t.163+0x18a>
;                     let item = unsafe { (p as *const T).add(usize::from(*head % cap)).read() };
 80140e4: 02 f0 0f 03                  	and	r3, r2, #15
;                 intrinsics::wrapping_add(self, rhs)
 80140e8: 01 32                        	adds	r2, #1
;         intrinsics::offset(self, count)
 80140ea: 63 43                        	muls	r3, r4, r3
;     tmp.assume_init()
 80140ec: 1a f8 03 30                  	ldrb.w	r3, [r10, r3]
;                     *head = head.wrapping_add(1);
 80140f0: 4a f8 06 20                  	str.w	r2, [r10, r6]
;                 Some(_result) => {
 80140f4: 24 2b                        	cmp	r3, #36
 80140f6: 1c d1                        	bne	#56 <$t.163+0x1a8>
;                 if *head != *tail {
 80140f8: 8a 42                        	cmp	r2, r1
 80140fa: 0b d0                        	beq	#22 <$t.163+0x18a>
;                     let item = unsafe { (p as *const T).add(usize::from(*head % cap)).read() };
 80140fc: 02 f0 0f 03                  	and	r3, r2, #15
;                 intrinsics::wrapping_add(self, rhs)
 8014100: 01 32                        	adds	r2, #1
;         intrinsics::offset(self, count)
 8014102: 63 43                        	muls	r3, r4, r3
;     tmp.assume_init()
 8014104: 1a f8 03 30                  	ldrb.w	r3, [r10, r3]
;                     *head = head.wrapping_add(1);
 8014108: 4a f8 06 20                  	str.w	r2, [r10, r6]
;                 Some(_result) => {
 801410c: 24 2b                        	cmp	r3, #36
 801410e: 10 d1                        	bne	#32 <$t.163+0x1a8>
;                 if *head != *tail {
 8014110: 8a 42                        	cmp	r2, r1
 8014112: 04 d1                        	bne	#8 <$t.163+0x194>
 8014114: 24 23                        	movs	r3, #36
 8014116: 0a 46                        	mov	r2, r1
;                 Some(_result) => {
 8014118: 24 2b                        	cmp	r3, #36
 801411a: d5 d0                        	beq	#-86 <$t.163+0x13e>
 801411c: 09 e0                        	b	#18 <$t.163+0x1a8>
;                     let item = unsafe { (p as *const T).add(usize::from(*head % cap)).read() };
 801411e: 02 f0 0f 03                  	and	r3, r2, #15
;                 intrinsics::wrapping_add(self, rhs)
 8014122: 01 32                        	adds	r2, #1
;         intrinsics::offset(self, count)
 8014124: 63 43                        	muls	r3, r4, r3
;     tmp.assume_init()
 8014126: 1a f8 03 30                  	ldrb.w	r3, [r10, r3]
;                     *head = head.wrapping_add(1);
 801412a: 4a f8 06 20                  	str.w	r2, [r10, r6]
;                 Some(_result) => {
 801412e: 24 2b                        	cmp	r3, #36
 8014130: ca d0                        	beq	#-108 <$t.163+0x13e>
;                 let head = *self.0.head.get_mut();
 8014132: 9c f8 80 10                  	ldrb.w	r1, [r12, #128]
;                 intrinsics::wrapping_sub(self, rhs)
 8014136: 41 1a                        	subs	r1, r0, r1
 8014138: c9 b2                        	uxtb	r1, r1
;                 if tail.wrapping_sub(head) > cap - 1 {
 801413a: 1f 29                        	cmp	r1, #31
 801413c: 00 f2 6e 81                  	bhi.w	#732 <$t.163+0x492>
;     intrinsics::move_val_init(&mut *dst, src)
 8014140: 41 f6 2f 01                  	movw	r1, #6191
;                 small as Self
 8014144: 00 f0 1f 00                  	and	r0, r0, #31
;     intrinsics::move_val_init(&mut *dst, src)
 8014148: c0 f6 01 01                  	movt	r1, #2049
 801414c: 4c f8 20 10                  	str.w	r1, [r12, r0, lsl #2]
;                 *tail = tail.wrapping_add(1);
 8014150: 9c f8 81 00                  	ldrb.w	r0, [r12, #129]
;                 let head = *self.0.head.get_mut();
 8014154: 9c f8 80 10                  	ldrb.w	r1, [r12, #128]
;                 intrinsics::wrapping_add(self, rhs)
 8014158: 01 30                        	adds	r0, #1
;                 *tail = tail.wrapping_add(1);
 801415a: 8c f8 81 00                  	strb.w	r0, [r12, #129]
;                 intrinsics::wrapping_sub(self, rhs)
 801415e: 41 1a                        	subs	r1, r0, r1
 8014160: c9 b2                        	uxtb	r1, r1
;                 if tail.wrapping_sub(head) > cap - 1 {
 8014162: 1f 29                        	cmp	r1, #31
 8014164: 00 f2 5a 81                  	bhi.w	#692 <$t.163+0x492>
;     intrinsics::move_val_init(&mut *dst, src)
 8014168: 41 f6 a9 51                  	movw	r1, #7593
;                 small as Self
 801416c: 00 f0 1f 00                  	and	r0, r0, #31
;     intrinsics::move_val_init(&mut *dst, src)
 8014170: c0 f6 01 01                  	movt	r1, #2049
 8014174: 4c f8 20 10                  	str.w	r1, [r12, r0, lsl #2]
;                 *tail = tail.wrapping_add(1);
 8014178: 9c f8 81 00                  	ldrb.w	r0, [r12, #129]
;                 let head = *self.0.head.get_mut();
 801417c: 9c f8 80 10                  	ldrb.w	r1, [r12, #128]
;                 intrinsics::wrapping_add(self, rhs)
 8014180: 01 30                        	adds	r0, #1
;                 *tail = tail.wrapping_add(1);
 8014182: 8c f8 81 00                  	strb.w	r0, [r12, #129]
;                 intrinsics::wrapping_sub(self, rhs)
 8014186: 41 1a                        	subs	r1, r0, r1
 8014188: c9 b2                        	uxtb	r1, r1
;                 if tail.wrapping_sub(head) > cap - 1 {
 801418a: 1f 29                        	cmp	r1, #31
 801418c: 00 f2 46 81                  	bhi.w	#652 <$t.163+0x492>
;     intrinsics::move_val_init(&mut *dst, src)
 8014190: 41 f6 9d 41                  	movw	r1, #7325
;                 small as Self
 8014194: 00 f0 1f 00                  	and	r0, r0, #31
;     intrinsics::move_val_init(&mut *dst, src)
 8014198: c0 f6 01 01                  	movt	r1, #2049
 801419c: 4c f8 20 10                  	str.w	r1, [r12, r0, lsl #2]
;                 *tail = tail.wrapping_add(1);
 80141a0: 9c f8 81 00                  	ldrb.w	r0, [r12, #129]
;                 let head = *self.0.head.get_mut();
 80141a4: 9c f8 80 10                  	ldrb.w	r1, [r12, #128]
;                 intrinsics::wrapping_add(self, rhs)
 80141a8: 01 30                        	adds	r0, #1
;                 *tail = tail.wrapping_add(1);
 80141aa: 8c f8 81 00                  	strb.w	r0, [r12, #129]
;                 intrinsics::wrapping_sub(self, rhs)
 80141ae: 41 1a                        	subs	r1, r0, r1
 80141b0: c9 b2                        	uxtb	r1, r1
;                 if tail.wrapping_sub(head) > cap - 1 {
 80141b2: 1f 29                        	cmp	r1, #31
 80141b4: 00 f2 32 81                  	bhi.w	#612 <$t.163+0x492>
;     intrinsics::move_val_init(&mut *dst, src)
 80141b8: 41 f6 65 71                  	movw	r1, #8037
;                 small as Self
 80141bc: 00 f0 1f 00                  	and	r0, r0, #31
;     intrinsics::move_val_init(&mut *dst, src)
 80141c0: c0 f6 01 01                  	movt	r1, #2049
 80141c4: 4c f8 20 10                  	str.w	r1, [r12, r0, lsl #2]
;                 *tail = tail.wrapping_add(1);
 80141c8: 9c f8 81 00                  	ldrb.w	r0, [r12, #129]
;                 let head = *self.0.head.get_mut();
 80141cc: 9c f8 80 10                  	ldrb.w	r1, [r12, #128]
;                 intrinsics::wrapping_add(self, rhs)
 80141d0: 01 30                        	adds	r0, #1
;                 *tail = tail.wrapping_add(1);
 80141d2: 8c f8 81 00                  	strb.w	r0, [r12, #129]
;                 intrinsics::wrapping_sub(self, rhs)
 80141d6: 41 1a                        	subs	r1, r0, r1
 80141d8: c9 b2                        	uxtb	r1, r1
;                 if tail.wrapping_sub(head) > cap - 1 {
 80141da: 1f 29                        	cmp	r1, #31
 80141dc: 00 f2 1e 81                  	bhi.w	#572 <$t.163+0x492>
;     intrinsics::move_val_init(&mut *dst, src)
 80141e0: 41 f6 cb 21                  	movw	r1, #6859
;                 small as Self
 80141e4: 00 f0 1f 00                  	and	r0, r0, #31
;     intrinsics::move_val_init(&mut *dst, src)
 80141e8: c0 f6 01 01                  	movt	r1, #2049
 80141ec: 4c f8 20 10                  	str.w	r1, [r12, r0, lsl #2]
;                 *tail = tail.wrapping_add(1);
 80141f0: 9c f8 81 00                  	ldrb.w	r0, [r12, #129]
;                 let head = *self.0.head.get_mut();
 80141f4: 9c f8 80 10                  	ldrb.w	r1, [r12, #128]
;                 intrinsics::wrapping_add(self, rhs)
 80141f8: 01 30                        	adds	r0, #1
;                 *tail = tail.wrapping_add(1);
 80141fa: 8c f8 81 00                  	strb.w	r0, [r12, #129]
;                 intrinsics::wrapping_sub(self, rhs)
 80141fe: 41 1a                        	subs	r1, r0, r1
 8014200: c9 b2                        	uxtb	r1, r1
;                 if tail.wrapping_sub(head) > cap - 1 {
 8014202: 1f 29                        	cmp	r1, #31
 8014204: 00 f2 0a 81                  	bhi.w	#532 <$t.163+0x492>
;     intrinsics::move_val_init(&mut *dst, src)
 8014208: 41 f6 3d 21                  	movw	r1, #6717
;                 small as Self
 801420c: 00 f0 1f 00                  	and	r0, r0, #31
;     intrinsics::move_val_init(&mut *dst, src)
 8014210: c0 f6 01 01                  	movt	r1, #2049
 8014214: 4c f8 20 10                  	str.w	r1, [r12, r0, lsl #2]
;                 *tail = tail.wrapping_add(1);
 8014218: 9c f8 81 00                  	ldrb.w	r0, [r12, #129]
;                 let head = *self.0.head.get_mut();
 801421c: 9c f8 80 10                  	ldrb.w	r1, [r12, #128]
;                 intrinsics::wrapping_add(self, rhs)
 8014220: 01 30                        	adds	r0, #1
;                 *tail = tail.wrapping_add(1);
 8014222: 8c f8 81 00                  	strb.w	r0, [r12, #129]
;                 intrinsics::wrapping_sub(self, rhs)
 8014226: 41 1a                        	subs	r1, r0, r1
 8014228: c9 b2                        	uxtb	r1, r1
;                 if tail.wrapping_sub(head) > cap - 1 {
 801422a: 1f 29                        	cmp	r1, #31
 801422c: 00 f2 f6 80                  	bhi.w	#492 <$t.163+0x492>
;     intrinsics::move_val_init(&mut *dst, src)
 8014230: 42 f2 19 21                  	movw	r1, #8729
;                 small as Self
 8014234: 00 f0 1f 00                  	and	r0, r0, #31
;     intrinsics::move_val_init(&mut *dst, src)
 8014238: c0 f6 01 01                  	movt	r1, #2049
 801423c: 4c f8 20 10                  	str.w	r1, [r12, r0, lsl #2]
;                 *tail = tail.wrapping_add(1);
 8014240: 9c f8 81 00                  	ldrb.w	r0, [r12, #129]
;                 let head = *self.0.head.get_mut();
 8014244: 9c f8 80 10                  	ldrb.w	r1, [r12, #128]
;                 intrinsics::wrapping_add(self, rhs)
 8014248: 01 30                        	adds	r0, #1
;                 *tail = tail.wrapping_add(1);
 801424a: 8c f8 81 00                  	strb.w	r0, [r12, #129]
;                 intrinsics::wrapping_sub(self, rhs)
 801424e: 41 1a                        	subs	r1, r0, r1
 8014250: c9 b2                        	uxtb	r1, r1
;                 if tail.wrapping_sub(head) > cap - 1 {
 8014252: 1f 29                        	cmp	r1, #31
 8014254: 00 f2 e2 80                  	bhi.w	#452 <$t.163+0x492>
;     intrinsics::move_val_init(&mut *dst, src)
 8014258: 41 f2 cf 61                  	movw	r1, #5839
;                 small as Self
 801425c: 00 f0 1f 00                  	and	r0, r0, #31
;     intrinsics::move_val_init(&mut *dst, src)
 8014260: c0 f6 01 01                  	movt	r1, #2049
 8014264: 4c f8 20 10                  	str.w	r1, [r12, r0, lsl #2]
;                 *tail = tail.wrapping_add(1);
 8014268: 9c f8 81 00                  	ldrb.w	r0, [r12, #129]
;                 let head = *self.0.head.get_mut();
 801426c: 9c f8 80 10                  	ldrb.w	r1, [r12, #128]
;                 intrinsics::wrapping_add(self, rhs)
 8014270: 01 30                        	adds	r0, #1
;                 *tail = tail.wrapping_add(1);
 8014272: 8c f8 81 00                  	strb.w	r0, [r12, #129]
;                 intrinsics::wrapping_sub(self, rhs)
 8014276: 41 1a                        	subs	r1, r0, r1
 8014278: c9 b2                        	uxtb	r1, r1
;                 if tail.wrapping_sub(head) > cap - 1 {
 801427a: 1f 29                        	cmp	r1, #31
 801427c: 00 f2 ce 80                  	bhi.w	#412 <$t.163+0x492>
;     intrinsics::move_val_init(&mut *dst, src)
 8014280: 41 f2 39 51                  	movw	r1, #5433
;                 small as Self
 8014284: 00 f0 1f 00                  	and	r0, r0, #31
;     intrinsics::move_val_init(&mut *dst, src)
 8014288: c0 f6 01 01                  	movt	r1, #2049
 801428c: 4c f8 20 10                  	str.w	r1, [r12, r0, lsl #2]
;                 *tail = tail.wrapping_add(1);
 8014290: 9c f8 81 00                  	ldrb.w	r0, [r12, #129]
;                 let head = *self.0.head.get_mut();
 8014294: 9c f8 80 10                  	ldrb.w	r1, [r12, #128]
;                 intrinsics::wrapping_add(self, rhs)
 8014298: 01 30                        	adds	r0, #1
;                 *tail = tail.wrapping_add(1);
 801429a: 8c f8 81 00                  	strb.w	r0, [r12, #129]
;                 intrinsics::wrapping_sub(self, rhs)
 801429e: 41 1a                        	subs	r1, r0, r1
 80142a0: c9 b2                        	uxtb	r1, r1
;                 if tail.wrapping_sub(head) > cap - 1 {
 80142a2: 1f 29                        	cmp	r1, #31
 80142a4: 00 f2 ba 80                  	bhi.w	#372 <$t.163+0x492>
;     intrinsics::move_val_init(&mut *dst, src)
 80142a8: 42 f2 b9 21                  	movw	r1, #8889
;                 small as Self
 80142ac: 00 f0 1f 00                  	and	r0, r0, #31
;     intrinsics::move_val_init(&mut *dst, src)
 80142b0: c0 f6 01 01                  	movt	r1, #2049
 80142b4: 4c f8 20 10                  	str.w	r1, [r12, r0, lsl #2]
;                 *tail = tail.wrapping_add(1);
 80142b8: 9c f8 81 00                  	ldrb.w	r0, [r12, #129]
;                 let head = *self.0.head.get_mut();
 80142bc: 9c f8 80 10                  	ldrb.w	r1, [r12, #128]
;                 intrinsics::wrapping_add(self, rhs)
 80142c0: 01 30                        	adds	r0, #1
;                 *tail = tail.wrapping_add(1);
 80142c2: 8c f8 81 00                  	strb.w	r0, [r12, #129]
;                 intrinsics::wrapping_sub(self, rhs)
 80142c6: 41 1a                        	subs	r1, r0, r1
 80142c8: c9 b2                        	uxtb	r1, r1
;                 if tail.wrapping_sub(head) > cap - 1 {
 80142ca: 1f 29                        	cmp	r1, #31
 80142cc: 00 f2 a6 80                  	bhi.w	#332 <$t.163+0x492>
;     intrinsics::move_val_init(&mut *dst, src)
 80142d0: 41 f2 b1 71                  	movw	r1, #6065
;                 small as Self
 80142d4: 00 f0 1f 00                  	and	r0, r0, #31
;     intrinsics::move_val_init(&mut *dst, src)
 80142d8: c0 f6 01 01                  	movt	r1, #2049
 80142dc: 4c f8 20 10                  	str.w	r1, [r12, r0, lsl #2]
;                 *tail = tail.wrapping_add(1);
 80142e0: 9c f8 81 00                  	ldrb.w	r0, [r12, #129]
;                 let head = *self.0.head.get_mut();
 80142e4: 9c f8 80 10                  	ldrb.w	r1, [r12, #128]
;                 intrinsics::wrapping_add(self, rhs)
 80142e8: 01 30                        	adds	r0, #1
;                 *tail = tail.wrapping_add(1);
 80142ea: 8c f8 81 00                  	strb.w	r0, [r12, #129]
;                 intrinsics::wrapping_sub(self, rhs)
 80142ee: 41 1a                        	subs	r1, r0, r1
 80142f0: c9 b2                        	uxtb	r1, r1
;                 if tail.wrapping_sub(head) > cap - 1 {
 80142f2: 1f 29                        	cmp	r1, #31
 80142f4: 00 f2 92 80                  	bhi.w	#292 <$t.163+0x492>
;     intrinsics::move_val_init(&mut *dst, src)
 80142f8: 42 f2 71 01                  	movw	r1, #8305
;                 small as Self
 80142fc: 00 f0 1f 00                  	and	r0, r0, #31
;     intrinsics::move_val_init(&mut *dst, src)
 8014300: c0 f6 01 01                  	movt	r1, #2049
 8014304: 4c f8 20 10                  	str.w	r1, [r12, r0, lsl #2]
;                 *tail = tail.wrapping_add(1);
 8014308: 9c f8 81 00                  	ldrb.w	r0, [r12, #129]
;                 let head = *self.0.head.get_mut();
 801430c: 9c f8 80 10                  	ldrb.w	r1, [r12, #128]
;                 intrinsics::wrapping_add(self, rhs)
 8014310: 01 30                        	adds	r0, #1
;                 *tail = tail.wrapping_add(1);
 8014312: 8c f8 81 00                  	strb.w	r0, [r12, #129]
;                 intrinsics::wrapping_sub(self, rhs)
 8014316: 41 1a                        	subs	r1, r0, r1
 8014318: c9 b2                        	uxtb	r1, r1
;                 if tail.wrapping_sub(head) > cap - 1 {
 801431a: 1f 29                        	cmp	r1, #31
 801431c: 7e d8                        	bhi	#252 <$t.163+0x492>
;     intrinsics::move_val_init(&mut *dst, src)
 801431e: 42 f2 3b 11                  	movw	r1, #8507
;                 small as Self
 8014322: 00 f0 1f 00                  	and	r0, r0, #31
;     intrinsics::move_val_init(&mut *dst, src)
 8014326: c0 f6 01 01                  	movt	r1, #2049
 801432a: 4c f8 20 10                  	str.w	r1, [r12, r0, lsl #2]
;                 *tail = tail.wrapping_add(1);
 801432e: 9c f8 81 00                  	ldrb.w	r0, [r12, #129]
;                 let head = *self.0.head.get_mut();
 8014332: 9c f8 80 10                  	ldrb.w	r1, [r12, #128]
;                 intrinsics::wrapping_add(self, rhs)
 8014336: 01 30                        	adds	r0, #1
;                 *tail = tail.wrapping_add(1);
 8014338: 8c f8 81 00                  	strb.w	r0, [r12, #129]
;                 intrinsics::wrapping_sub(self, rhs)
 801433c: 41 1a                        	subs	r1, r0, r1
 801433e: c9 b2                        	uxtb	r1, r1
;                 if tail.wrapping_sub(head) > cap - 1 {
 8014340: 1f 29                        	cmp	r1, #31
 8014342: 6b d8                        	bhi	#214 <$t.163+0x492>
;     intrinsics::move_val_init(&mut *dst, src)
 8014344: 41 f6 bf 11                  	movw	r1, #6591
;                 small as Self
 8014348: 00 f0 1f 00                  	and	r0, r0, #31
;     intrinsics::move_val_init(&mut *dst, src)
 801434c: c0 f6 01 01                  	movt	r1, #2049
 8014350: 4c f8 20 10                  	str.w	r1, [r12, r0, lsl #2]
;                 *tail = tail.wrapping_add(1);
 8014354: 9c f8 81 00                  	ldrb.w	r0, [r12, #129]
;                 let head = *self.0.head.get_mut();
 8014358: 9c f8 80 10                  	ldrb.w	r1, [r12, #128]
;                 intrinsics::wrapping_add(self, rhs)
 801435c: 01 30                        	adds	r0, #1
;                 *tail = tail.wrapping_add(1);
 801435e: 8c f8 81 00                  	strb.w	r0, [r12, #129]
;                 intrinsics::wrapping_sub(self, rhs)
 8014362: 41 1a                        	subs	r1, r0, r1
 8014364: c9 b2                        	uxtb	r1, r1
;                 if tail.wrapping_sub(head) > cap - 1 {
 8014366: 1f 29                        	cmp	r1, #31
 8014368: 58 d8                        	bhi	#176 <$t.163+0x492>
;     intrinsics::move_val_init(&mut *dst, src)
 801436a: 41 f6 5f 31                  	movw	r1, #7007
;                 small as Self
 801436e: 00 f0 1f 00                  	and	r0, r0, #31
;     intrinsics::move_val_init(&mut *dst, src)
 8014372: c0 f6 01 01                  	movt	r1, #2049
 8014376: 4c f8 20 10                  	str.w	r1, [r12, r0, lsl #2]
;                 *tail = tail.wrapping_add(1);
 801437a: 9c f8 81 00                  	ldrb.w	r0, [r12, #129]
;                 let head = *self.0.head.get_mut();
 801437e: 9c f8 80 10                  	ldrb.w	r1, [r12, #128]
;                 intrinsics::wrapping_add(self, rhs)
 8014382: 01 30                        	adds	r0, #1
;                 *tail = tail.wrapping_add(1);
 8014384: 8c f8 81 00                  	strb.w	r0, [r12, #129]
;                 intrinsics::wrapping_sub(self, rhs)
 8014388: 41 1a                        	subs	r1, r0, r1
 801438a: c9 b2                        	uxtb	r1, r1
;                 if tail.wrapping_sub(head) > cap - 1 {
 801438c: 1f 29                        	cmp	r1, #31
 801438e: 45 d8                        	bhi	#138 <$t.163+0x492>
;     intrinsics::move_val_init(&mut *dst, src)
 8014390: 41 f2 5f 41                  	movw	r1, #5215
;                 small as Self
 8014394: 00 f0 1f 00                  	and	r0, r0, #31
;     intrinsics::move_val_init(&mut *dst, src)
 8014398: c0 f6 01 01                  	movt	r1, #2049
 801439c: 4c f8 20 10                  	str.w	r1, [r12, r0, lsl #2]
;                 *tail = tail.wrapping_add(1);
 80143a0: 9c f8 81 00                  	ldrb.w	r0, [r12, #129]
;                 let head = *self.0.head.get_mut();
 80143a4: 9c f8 80 10                  	ldrb.w	r1, [r12, #128]
;                 intrinsics::wrapping_add(self, rhs)
 80143a8: 01 30                        	adds	r0, #1
;                 *tail = tail.wrapping_add(1);
 80143aa: 8c f8 81 00                  	strb.w	r0, [r12, #129]
;                 intrinsics::wrapping_sub(self, rhs)
 80143ae: 41 1a                        	subs	r1, r0, r1
 80143b0: c9 b2                        	uxtb	r1, r1
;                 if tail.wrapping_sub(head) > cap - 1 {
 80143b2: 1f 29                        	cmp	r1, #31
 80143b4: 32 d8                        	bhi	#100 <$t.163+0x492>
;     intrinsics::move_val_init(&mut *dst, src)
 80143b6: 41 f6 a7 61                  	movw	r1, #7847
;                 small as Self
 80143ba: 00 f0 1f 00                  	and	r0, r0, #31
;     intrinsics::move_val_init(&mut *dst, src)
 80143be: c0 f6 01 01                  	movt	r1, #2049
 80143c2: 4c f8 20 10                  	str.w	r1, [r12, r0, lsl #2]
;                 *tail = tail.wrapping_add(1);
 80143c6: 9c f8 81 00                  	ldrb.w	r0, [r12, #129]
;                 let head = *self.0.head.get_mut();
 80143ca: 9c f8 80 10                  	ldrb.w	r1, [r12, #128]
;                 intrinsics::wrapping_add(self, rhs)
 80143ce: 01 30                        	adds	r0, #1
;                 *tail = tail.wrapping_add(1);
 80143d0: 8c f8 81 00                  	strb.w	r0, [r12, #129]
;                 intrinsics::wrapping_sub(self, rhs)
 80143d4: 41 1a                        	subs	r1, r0, r1
 80143d6: c9 b2                        	uxtb	r1, r1
;                 if tail.wrapping_sub(head) > cap - 1 {
 80143d8: 1f 29                        	cmp	r1, #31
 80143da: 1f d8                        	bhi	#62 <$t.163+0x492>
;     intrinsics::move_val_init(&mut *dst, src)
 80143dc: 41 f2 17 61                  	movw	r1, #5655
;                 small as Self
 80143e0: 00 f0 1f 00                  	and	r0, r0, #31
;     intrinsics::move_val_init(&mut *dst, src)
 80143e4: c0 f6 01 01                  	movt	r1, #2049
 80143e8: 4c f8 20 10                  	str.w	r1, [r12, r0, lsl #2]
;                 *tail = tail.wrapping_add(1);
 80143ec: 9c f8 81 00                  	ldrb.w	r0, [r12, #129]
;                 let head = *self.0.head.get_mut();
 80143f0: 9c f8 80 10                  	ldrb.w	r1, [r12, #128]
;                 intrinsics::wrapping_add(self, rhs)
 80143f4: 01 30                        	adds	r0, #1
;                 *tail = tail.wrapping_add(1);
 80143f6: 8c f8 81 00                  	strb.w	r0, [r12, #129]
;                 intrinsics::wrapping_sub(self, rhs)
 80143fa: 41 1a                        	subs	r1, r0, r1
 80143fc: c9 b2                        	uxtb	r1, r1
;                 if tail.wrapping_sub(head) > cap - 1 {
 80143fe: 1f 29                        	cmp	r1, #31
 8014400: 0c d8                        	bhi	#24 <$t.163+0x492>
;     intrinsics::move_val_init(&mut *dst, src)
 8014402: 41 f6 07 41                  	movw	r1, #7175
;                 small as Self
 8014406: 00 f0 1f 00                  	and	r0, r0, #31
;     intrinsics::move_val_init(&mut *dst, src)
 801440a: c0 f6 01 01                  	movt	r1, #2049
 801440e: 4c f8 20 10                  	str.w	r1, [r12, r0, lsl #2]
;                 *tail = tail.wrapping_add(1);
 8014412: 9c f8 81 00                  	ldrb.w	r0, [r12, #129]
;                 intrinsics::wrapping_add(self, rhs)
 8014416: 01 30                        	adds	r0, #1
;                 *tail = tail.wrapping_add(1);
 8014418: 8c f8 81 00                  	strb.w	r0, [r12, #129]
; #[app(device = stm32wb_hal::pac, peripherals = true)]
 801441c: 02 a8                        	add	r0, sp, #8
 801441e: 00 f0 3c f8                  	bl	#120
;             Ok(t) => t,
 8014422: 00 28                        	cmp	r0, #0
 8014424: 3f f4 93 ad                  	beq.w	#-1242 <LPUART1+0x36>
 8014428: 2a e0                        	b	#84 <$t.163+0x4f6>
;                     .add(usize::from(*tail % cap))
 801442a: 00 f0 0f 00                  	and	r0, r0, #15
;         intrinsics::offset(self, count) as *mut T
 801442e: 4f f4 8c 71                  	mov.w	r1, #280
;     intrinsics::move_val_init(&mut *dst, src)
 8014432: 40 f2 17 12                  	movw	r2, #279
;         intrinsics::offset(self, count) as *mut T
 8014436: 10 fb 01 a0                  	smlabb	r0, r0, r1, r10
;     intrinsics::move_val_init(&mut *dst, src)
 801443a: 29 46                        	mov	r1, r5
 801443c: 41 f2 84 15                  	movw	r5, #4484
 8014440: 00 f8 01 6b                  	strb	r6, [r0], #1
 8014444: 07 f0 69 ff                  	bl	#32466
;                 *tail = tail.wrapping_add(1);
 8014448: 5a f8 05 00                  	ldr.w	r0, [r10, r5]
;                 intrinsics::wrapping_add(self, rhs)
 801444c: 01 30                        	adds	r0, #1
;                 *tail = tail.wrapping_add(1);
 801444e: 4a f8 05 00                  	str.w	r0, [r10, r5]
 8014452: 40 f2 08 25                  	movw	r5, #520
 8014456: c2 f2 00 05                  	movt	r5, #8192
 801445a: 78 e5                        	b	#-1296 <LPUART1+0x36>
;                 __basepri_w(_basepri);
 801445c: 00 20                        	movs	r0, #0
 801445e: 07 f0 17 ff                  	bl	#32302
; #[app(device = stm32wb_hal::pac, peripherals = true)]
 8014462: 0d f5 5d 7d                  	add.w	sp, sp, #884
 8014466: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 801446a: f0 bd                        	pop	{r4, r5, r6, r7, pc}
;             Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
 801446c: 40 f6 6f 20                  	movw	r0, #2671
 8014470: 4c f6 14 53                  	movw	r3, #52500
 8014474: c0 f6 02 00                  	movt	r0, #2050
 8014478: c0 f6 01 03                  	movt	r3, #2049
 801447c: 96 aa                        	add	r2, sp, #600
 801447e: 08 e0                        	b	#16 <$t.163+0x508>
 8014480: 40 f6 6f 20                  	movw	r0, #2671
 8014484: 4c f6 04 53                  	movw	r3, #52484
 8014488: 4a aa                        	add	r2, sp, #296
 801448a: c0 f6 02 00                  	movt	r0, #2050
 801448e: c0 f6 01 03                  	movt	r3, #2049
 8014492: 2b 21                        	movs	r1, #43
 8014494: 01 f0 e5 ff                  	bl	#8138
 8014498: fe de                        	trap

0801449a stm32wb55_homekit::APP::spawn_exec_hci_S0::h8f2c8fcd99587d3c:
; #[app(device = stm32wb_hal::pac, peripherals = true)]
 801449a: f0 b5                        	push	{r4, r5, r6, r7, lr}
 801449c: 03 af                        	add	r7, sp, #12
 801449e: 4d f8 04 bd                  	str	r11, [sp, #-4]!
 80144a2: 04 46                        	mov	r4, r0
;     let current = priority.get();
 80144a4: 00 78                        	ldrb	r0, [r0]
;     if current < ceiling {
 80144a6: c8 b1                        	cbz	r0, #50
;         Relaxed => intrinsics::atomic_load_relaxed(dst),
 80144a8: 40 f2 08 20                  	movw	r0, #520
 80144ac: c2 f2 00 00                  	movt	r0, #8192
 80144b0: 01 79                        	ldrb	r1, [r0, #4]
 80144b2: 42 79                        	ldrb	r2, [r0, #5]
 80144b4: cb b2                        	uxtb	r3, r1
 80144b6: d2 b2                        	uxtb	r2, r2
;                 if head != tail {
 80144b8: 93 42                        	cmp	r3, r2
 80144ba: 23 d0                        	beq	#70 <_ZN17stm32wb55_homekit3APP17spawn_exec_hci_S017h8f2c8fcd99587d3cE+0x6e>
;                 let item = (rb.0.buffer.as_ptr() as *const T)
 80144bc: 85 79                        	ldrb	r5, [r0, #6]
;                 intrinsics::wrapping_add(self, rhs)
 80144be: 01 31                        	adds	r1, #1
;         Relaxed => intrinsics::atomic_store_relaxed(dst, val),
 80144c0: 01 71                        	strb	r1, [r0, #4]
;     let current = priority.get();
 80144c2: 21 78                        	ldrb	r1, [r4]
;     if current < ceiling {
 80144c4: 51 b3                        	cbz	r1, #84
;         Relaxed => intrinsics::atomic_load_relaxed(dst),
 80144c6: 41 7d                        	ldrb	r1, [r0, #21]
 80144c8: 01 23                        	movs	r3, #1
;                     .add(usize::from(tail % cap))
 80144ca: 01 f0 03 02                  	and	r2, r1, #3
;                 intrinsics::wrapping_add(self, rhs)
 80144ce: 01 31                        	adds	r1, #1
;         Relaxed => intrinsics::atomic_load_relaxed(dst),
 80144d0: 00 eb 42 02                  	add.w	r2, r0, r2, lsl #1
;     intrinsics::move_val_init(&mut *dst, src)
 80144d4: d5 75                        	strb	r5, [r2, #23]
 80144d6: 93 75                        	strb	r3, [r2, #22]
;         Relaxed => intrinsics::atomic_store_relaxed(dst, val),
 80144d8: 41 75                        	strb	r1, [r0, #21]
 80144da: 36 e0                        	b	#108 <_ZN17stm32wb55_homekit3APP17spawn_exec_hci_S017h8f2c8fcd99587d3cE+0xb4>
 80144dc: 01 20                        	movs	r0, #1
;     copy_nonoverlapping(src, dst, count)
 80144de: 20 70                        	strb	r0, [r4]
;                 __basepri_w(_basepri);
 80144e0: f0 20                        	movs	r0, #240
 80144e2: 07 f0 d5 fe                  	bl	#32170
;         Relaxed => intrinsics::atomic_load_relaxed(dst),
 80144e6: 40 f2 08 20                  	movw	r0, #520
 80144ea: c2 f2 00 00                  	movt	r0, #8192
 80144ee: 01 79                        	ldrb	r1, [r0, #4]
 80144f0: 42 79                        	ldrb	r2, [r0, #5]
 80144f2: cb b2                        	uxtb	r3, r1
 80144f4: d2 b2                        	uxtb	r2, r2
;                 if head != tail {
 80144f6: 93 42                        	cmp	r3, r2
 80144f8: 08 d1                        	bne	#16 <_ZN17stm32wb55_homekit3APP17spawn_exec_hci_S017h8f2c8fcd99587d3cE+0x76>
;                 __basepri_w(_basepri);
 80144fa: 00 20                        	movs	r0, #0
 80144fc: 00 25                        	movs	r5, #0
 80144fe: 07 f0 c7 fe                  	bl	#32142
;     copy_nonoverlapping(src, dst, count)
 8014502: 25 70                        	strb	r5, [r4]
 8014504: 01 20                        	movs	r0, #1
; #[app(device = stm32wb_hal::pac, peripherals = true)]
 8014506: 5d f8 04 bb                  	ldr	r11, [sp], #4
 801450a: f0 bd                        	pop	{r4, r5, r6, r7, pc}
;                 let item = (rb.0.buffer.as_ptr() as *const T)
 801450c: 85 79                        	ldrb	r5, [r0, #6]
;                 intrinsics::wrapping_add(self, rhs)
 801450e: 01 31                        	adds	r1, #1
;         Relaxed => intrinsics::atomic_store_relaxed(dst, val),
 8014510: 01 71                        	strb	r1, [r0, #4]
;                 __basepri_w(_basepri);
 8014512: 00 20                        	movs	r0, #0
 8014514: 00 26                        	movs	r6, #0
 8014516: 07 f0 bb fe                  	bl	#32118
;     copy_nonoverlapping(src, dst, count)
 801451a: 26 70                        	strb	r6, [r4]
 801451c: 01 26                        	movs	r6, #1
;                 __basepri_w(_basepri);
 801451e: f0 20                        	movs	r0, #240
;     copy_nonoverlapping(src, dst, count)
 8014520: 26 70                        	strb	r6, [r4]
;                 __basepri_w(_basepri);
 8014522: 07 f0 b5 fe                  	bl	#32106
;         Relaxed => intrinsics::atomic_load_relaxed(dst),
 8014526: 40 f2 08 20                  	movw	r0, #520
 801452a: c2 f2 00 00                  	movt	r0, #8192
 801452e: 41 7d                        	ldrb	r1, [r0, #21]
;                     .add(usize::from(tail % cap))
 8014530: 01 f0 03 02                  	and	r2, r1, #3
;                 intrinsics::wrapping_add(self, rhs)
 8014534: 01 31                        	adds	r1, #1
;         Relaxed => intrinsics::atomic_load_relaxed(dst),
 8014536: 00 eb 42 02                  	add.w	r2, r0, r2, lsl #1
;     intrinsics::move_val_init(&mut *dst, src)
 801453a: d5 75                        	strb	r5, [r2, #23]
 801453c: 00 25                        	movs	r5, #0
 801453e: 96 75                        	strb	r6, [r2, #22]
;         Relaxed => intrinsics::atomic_store_relaxed(dst, val),
 8014540: 41 75                        	strb	r1, [r0, #21]
;                 __basepri_w(_basepri);
 8014542: 00 20                        	movs	r0, #0
 8014544: 07 f0 a4 fe                  	bl	#32072
;     copy_nonoverlapping(src, dst, count)
 8014548: 25 70                        	strb	r5, [r4]
 801454a: 4e f2 04 20                  	movw	r0, #57860
 801454e: 20 21                        	movs	r1, #32
 8014550: ce f2 00 00                  	movt	r0, #57344
;     intrinsics::volatile_store(dst, src);
 8014554: 01 60                        	str	r1, [r0]
 8014556: 00 20                        	movs	r0, #0
; #[app(device = stm32wb_hal::pac, peripherals = true)]
 8014558: 5d f8 04 bb                  	ldr	r11, [sp], #4
 801455c: f0 bd                        	pop	{r4, r5, r6, r7, pc}

0801455e main:
 801455e: b0 b5                        	push	{r4, r5, r7, lr}
 8014560: 02 af                        	add	r7, sp, #8
 8014562: ad f5 a0 5d                  	sub.w	sp, sp, #5120
 8014566: 84 b0                        	sub	sp, #16
 8014568: fe f7 47 fd                  	bl	#-5490
;                     .add(usize::from(*tail % cap))
 801456c: 40 f2 08 20                  	movw	r0, #520
 8014570: 00 25                        	movs	r5, #0
 8014572: c2 f2 00 00                  	movt	r0, #8192
 8014576: 20 24                        	movs	r4, #32
 8014578: 81 78                        	ldrb	r1, [r0, #2]
 801457a: 42 79                        	ldrb	r2, [r0, #5]
;                 intrinsics::wrapping_add(self, rhs)
 801457c: 01 31                        	adds	r1, #1
;                     .add(usize::from(*tail % cap))
 801457e: 03 7a                        	ldrb	r3, [r0, #8]
;                 *tail = tail.wrapping_add(1);
 8014580: 81 70                        	strb	r1, [r0, #2]
;                 intrinsics::wrapping_add(self, rhs)
 8014582: 51 1c                        	adds	r1, r2, #1
;                 *tail = tail.wrapping_add(1);
 8014584: 41 71                        	strb	r1, [r0, #5]
;                 intrinsics::wrapping_add(self, rhs)
 8014586: 59 1c                        	adds	r1, r3, #1
 8014588: 4e f2 04 13                  	movw	r3, #57604
;                 *tail = tail.wrapping_add(1);
 801458c: 01 72                        	strb	r1, [r0, #8]
 801458e: 4e f2 25 41                  	movw	r1, #58405
 8014592: f0 22                        	movs	r2, #240
 8014594: ce f2 00 01                  	movt	r1, #57344
 8014598: ce f2 00 03                  	movt	r3, #57344
;     intrinsics::move_val_init(&mut *dst, src)
 801459c: c5 70                        	strb	r5, [r0, #3]
 801459e: 85 71                        	strb	r5, [r0, #6]
 80145a0: 45 72                        	strb	r5, [r0, #9]
;     intrinsics::volatile_store(dst, src);
 80145a2: 0a 70                        	strb	r2, [r1]
 80145a4: 1c 60                        	str	r4, [r3]
 80145a6: 4f f4 80 54                  	mov.w	r4, #4096
 80145aa: ca 71                        	strb	r2, [r1, #7]
 80145ac: 1c 60                        	str	r4, [r3]
 80145ae: 6c 46                        	mov	r4, sp
 80145b0: 0a 72                        	strb	r2, [r1, #8]
 80145b2: 4f f4 00 51                  	mov.w	r1, #8192
 80145b6: 19 60                        	str	r1, [r3]
 80145b8: 01 21                        	movs	r1, #1
;         DEVICE_PERIPHERALS = true;
 80145ba: 01 70                        	strb	r1, [r0]
; #[app(device = stm32wb_hal::pac, peripherals = true)]
 80145bc: 20 46                        	mov	r0, r4
 80145be: fe f7 73 fd                  	bl	#-5402
 80145c2: 41 f2 d0 30                  	movw	r0, #5072
 80145c6: 21 18                        	adds	r1, r4, r0
;     intrinsics::move_val_init(&mut *dst, src)
 80145c8: 40 f2 ec 30                  	movw	r0, #1004
 80145cc: 22 22                        	movs	r2, #34
 80145ce: c2 f2 00 00                  	movt	r0, #8192
 80145d2: 07 f0 a2 fe                  	bl	#32068
 80145d6: 41 f2 88 10                  	movw	r0, #4488
; #[app(device = stm32wb_hal::pac, peripherals = true)]
 80145da: 21 18                        	adds	r1, r4, r0
;     intrinsics::move_val_init(&mut *dst, src)
 80145dc: 40 f2 10 40                  	movw	r0, #1040
 80145e0: 84 22                        	movs	r2, #132
 80145e2: c2 f2 00 00                  	movt	r0, #8192
 80145e6: 07 f0 d5 fe                  	bl	#32170
 80145ea: 41 f2 0c 20                  	movw	r0, #4620
; #[app(device = stm32wb_hal::pac, peripherals = true)]
 80145ee: 21 18                        	adds	r1, r4, r0
;     intrinsics::move_val_init(&mut *dst, src)
 80145f0: 40 f2 28 20                  	movw	r0, #552
 80145f4: 4f f4 e2 72                  	mov.w	r2, #452
 80145f8: c2 f2 00 00                  	movt	r0, #8192
 80145fc: 07 f0 ca fe                  	bl	#32148
 8014600: 40 f2 98 40                  	movw	r0, #1176
 8014604: 21 46                        	mov	r1, r4
 8014606: c2 f2 00 00                  	movt	r0, #8192
 801460a: 41 f2 88 12                  	movw	r2, #4488
 801460e: 07 f0 0d ff                  	bl	#32282
; #[app(device = stm32wb_hal::pac, peripherals = true)]
 8014612: fe f7 f0 fc                  	bl	#-5664
 8014616: a7 f1 0d 00                  	sub.w	r0, r7, #13
 801461a: 47 f8 14 0c                  	str	r0, [r7, #-20]
 801461e: 07 f8 0d 5c                  	strb	r5, [r7, #-13]
 8014622: 47 e9 07 00                  	strd	r0, r0, [r7, #-28]
 8014626: a7 f1 1c 00                  	sub.w	r0, r7, #28
 801462a: ff f7 6f f8                  	bl	#-3874
 801462e: fe de                        	trap

08014630 WWDG:
; #[exception]
 8014630: 80 b5                        	push	{r7, lr}
 8014632: 6f 46                        	mov	r7, sp
 8014634: 4e f6 04 50                  	movw	r0, #60676
 8014638: ce f2 00 00                  	movt	r0, #57344
;     copy_nonoverlapping(src, dst, count)
 801463c: 00 78                        	ldrb	r0, [r0]
; #[exception]
 801463e: 10 38                        	subs	r0, #16
 8014640: 00 f0 01 f8                  	bl	#2
 8014644: fe de                        	trap

08014646 stm32wb55_homekit::__cortex_m_rt_DefaultHandler::h447c097812f10496:
; fn DefaultHandler(irqn: i16) -> ! {
 8014646: 80 b5                        	push	{r7, lr}
 8014648: 6f 46                        	mov	r7, sp
;     panic!("Unhandled IRQ: {}", irqn);
 801464a: 01 f0 71 fa                  	bl	#5346
 801464e: fe de                        	trap

08014650 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h0a28786b27322410:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8014650: f0 b5                        	push	{r4, r5, r6, r7, lr}
 8014652: 03 af                        	add	r7, sp, #12
 8014654: 4d f8 04 8d                  	str	r8, [sp, #-4]!
 8014658: 84 b0                        	sub	sp, #16
 801465a: 0d 46                        	mov	r5, r1
 801465c: d0 e9 00 64                  	ldrd	r6, r4, [r0]
 8014660: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8014664: 01 22                        	movs	r2, #1
 8014666: cb 68                        	ldr	r3, [r1, #12]
 8014668: 4e f6 24 41                  	movw	r1, #60452
 801466c: c0 f6 01 01                  	movt	r1, #2049
 8014670: 98 47                        	blx	r3
 8014672: 00 21                        	movs	r1, #0
 8014674: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 8014678: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 801467c: 01 95                        	str	r5, [sp, #4]
;                     if is_empty!(self) {
 801467e: 84 b1                        	cbz	r4, #32
 8014680: 4d f6 b8 38                  	movw	r8, #56248
 8014684: 01 a8                        	add	r0, sp, #4
 8014686: 03 ad                        	add	r5, sp, #12
 8014688: c0 f6 01 08                  	movt	r8, #2049
;             self.entry(&entry);
 801468c: 29 46                        	mov	r1, r5
 801468e: 42 46                        	mov	r2, r8
;         for entry in entries {
 8014690: 03 96                        	str	r6, [sp, #12]
;             self.entry(&entry);
 8014692: 02 f0 3a fa                  	bl	#9332
;         $self.ptr.as_ptr() as *const T == $self.end
 8014696: 01 3c                        	subs	r4, #1
;         intrinsics::offset(self, count) as *mut T
 8014698: 06 f1 01 06                  	add.w	r6, r6, #1
;                     if is_empty!(self) {
 801469c: f6 d1                        	bne	#-20 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h0a28786b27322410E+0x40>
 801469e: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 80146a2: 20 b1                        	cbz	r0, #8
 80146a4: 01 20                        	movs	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 80146a6: 04 b0                        	add	sp, #16
 80146a8: 5d f8 04 8b                  	ldr	r8, [sp], #4
 80146ac: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 80146ae: 01 99                        	ldr	r1, [sp, #4]
 80146b0: 01 22                        	movs	r2, #1
 80146b2: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 80146b6: cb 68                        	ldr	r3, [r1, #12]
 80146b8: 4e f6 23 41                  	movw	r1, #60451
 80146bc: c0 f6 01 01                  	movt	r1, #2049
 80146c0: 98 47                        	blx	r3
 80146c2: 04 b0                        	add	sp, #16
 80146c4: 5d f8 04 8b                  	ldr	r8, [sp], #4
 80146c8: f0 bd                        	pop	{r4, r5, r6, r7, pc}

080146ca _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::hdf9f0a8679ceca84:
 80146ca: 00 68                        	ldr	r0, [r0]
 80146cc: 00 f0 00 b8                  	b.w	#0 <_ZN4core5array69_$LT$impl$u20$core..fmt..Debug$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$3fmt17hfb39a52c01fc9a12E+0x4>

080146d0 core::array::_$LT$impl$u20$core..fmt..Debug$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$::fmt::hfb39a52c01fc9a12:
;     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 80146d0: f0 b5                        	push	{r4, r5, r6, r7, lr}
 80146d2: 03 af                        	add	r7, sp, #12
 80146d4: 4d f8 04 8d                  	str	r8, [sp, #-4]!
 80146d8: 84 b0                        	sub	sp, #16
 80146da: 0c 46                        	mov	r4, r1
 80146dc: 05 46                        	mov	r5, r0
 80146de: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 80146e2: 01 22                        	movs	r2, #1
 80146e4: cb 68                        	ldr	r3, [r1, #12]
 80146e6: 4e f6 24 41                  	movw	r1, #60452
 80146ea: c0 f6 01 01                  	movt	r1, #2049
 80146ee: 4f f0 01 08                  	mov.w	r8, #1
 80146f2: 98 47                        	blx	r3
;             self.entry(&entry);
 80146f4: 4d f6 b8 36                  	movw	r6, #56248
 80146f8: 01 94                        	str	r4, [sp, #4]
 80146fa: 03 ac                        	add	r4, sp, #12
 80146fc: 00 21                        	movs	r1, #0
 80146fe: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8014702: c0 f6 01 06                  	movt	r6, #2049
 8014706: 01 a8                        	add	r0, sp, #4
 8014708: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 801470c: 21 46                        	mov	r1, r4
 801470e: 32 46                        	mov	r2, r6
;         for entry in entries {
 8014710: 03 95                        	str	r5, [sp, #12]
;             self.entry(&entry);
 8014712: 02 f0 fa f9                  	bl	#9204
;         intrinsics::offset(self, count) as *mut T
 8014716: 69 1c                        	adds	r1, r5, #1
;         for entry in entries {
 8014718: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801471a: 21 46                        	mov	r1, r4
 801471c: 32 46                        	mov	r2, r6
 801471e: 02 f0 f4 f9                  	bl	#9192
;         intrinsics::offset(self, count) as *mut T
 8014722: a9 1c                        	adds	r1, r5, #2
;         for entry in entries {
 8014724: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 8014726: 21 46                        	mov	r1, r4
 8014728: 32 46                        	mov	r2, r6
 801472a: 02 f0 ee f9                  	bl	#9180
;         intrinsics::offset(self, count) as *mut T
 801472e: e9 1c                        	adds	r1, r5, #3
;         for entry in entries {
 8014730: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 8014732: 21 46                        	mov	r1, r4
 8014734: 32 46                        	mov	r2, r6
 8014736: 02 f0 e8 f9                  	bl	#9168
;         intrinsics::offset(self, count) as *mut T
 801473a: 29 1d                        	adds	r1, r5, #4
;         for entry in entries {
 801473c: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801473e: 21 46                        	mov	r1, r4
 8014740: 32 46                        	mov	r2, r6
 8014742: 02 f0 e2 f9                  	bl	#9156
;         intrinsics::offset(self, count) as *mut T
 8014746: 69 1d                        	adds	r1, r5, #5
;         for entry in entries {
 8014748: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801474a: 21 46                        	mov	r1, r4
 801474c: 32 46                        	mov	r2, r6
 801474e: 02 f0 dc f9                  	bl	#9144
;         intrinsics::offset(self, count) as *mut T
 8014752: a9 1d                        	adds	r1, r5, #6
;         for entry in entries {
 8014754: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 8014756: 21 46                        	mov	r1, r4
 8014758: 32 46                        	mov	r2, r6
 801475a: 02 f0 d6 f9                  	bl	#9132
;         intrinsics::offset(self, count) as *mut T
 801475e: e9 1d                        	adds	r1, r5, #7
;         for entry in entries {
 8014760: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 8014762: 21 46                        	mov	r1, r4
 8014764: 32 46                        	mov	r2, r6
 8014766: 02 f0 d0 f9                  	bl	#9120
;         intrinsics::offset(self, count) as *mut T
 801476a: 05 f1 08 01                  	add.w	r1, r5, #8
;         for entry in entries {
 801476e: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 8014770: 21 46                        	mov	r1, r4
 8014772: 32 46                        	mov	r2, r6
 8014774: 02 f0 c9 f9                  	bl	#9106
;         intrinsics::offset(self, count) as *mut T
 8014778: 05 f1 09 01                  	add.w	r1, r5, #9
;         for entry in entries {
 801477c: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801477e: 21 46                        	mov	r1, r4
 8014780: 32 46                        	mov	r2, r6
 8014782: 02 f0 c2 f9                  	bl	#9092
;         intrinsics::offset(self, count) as *mut T
 8014786: 05 f1 0a 01                  	add.w	r1, r5, #10
;         for entry in entries {
 801478a: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801478c: 21 46                        	mov	r1, r4
 801478e: 32 46                        	mov	r2, r6
 8014790: 02 f0 bb f9                  	bl	#9078
;         intrinsics::offset(self, count) as *mut T
 8014794: 05 f1 0b 01                  	add.w	r1, r5, #11
;         for entry in entries {
 8014798: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801479a: 21 46                        	mov	r1, r4
 801479c: 32 46                        	mov	r2, r6
 801479e: 02 f0 b4 f9                  	bl	#9064
;         intrinsics::offset(self, count) as *mut T
 80147a2: 05 f1 0c 01                  	add.w	r1, r5, #12
;         for entry in entries {
 80147a6: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 80147a8: 21 46                        	mov	r1, r4
 80147aa: 32 46                        	mov	r2, r6
 80147ac: 02 f0 ad f9                  	bl	#9050
;         intrinsics::offset(self, count) as *mut T
 80147b0: 05 f1 0d 01                  	add.w	r1, r5, #13
;         for entry in entries {
 80147b4: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 80147b6: 21 46                        	mov	r1, r4
 80147b8: 32 46                        	mov	r2, r6
 80147ba: 02 f0 a6 f9                  	bl	#9036
;         intrinsics::offset(self, count) as *mut T
 80147be: 05 f1 0e 01                  	add.w	r1, r5, #14
;         for entry in entries {
 80147c2: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 80147c4: 21 46                        	mov	r1, r4
 80147c6: 32 46                        	mov	r2, r6
 80147c8: 02 f0 9f f9                  	bl	#9022
;         intrinsics::offset(self, count) as *mut T
 80147cc: 05 f1 0f 01                  	add.w	r1, r5, #15
;         for entry in entries {
 80147d0: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 80147d2: 21 46                        	mov	r1, r4
 80147d4: 32 46                        	mov	r2, r6
 80147d6: 02 f0 98 f9                  	bl	#9008
 80147da: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 80147de: 20 b1                        	cbz	r0, #8
;     }
 80147e0: 40 46                        	mov	r0, r8
 80147e2: 04 b0                        	add	sp, #16
 80147e4: 5d f8 04 8b                  	ldr	r8, [sp], #4
 80147e8: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 80147ea: 01 99                        	ldr	r1, [sp, #4]
 80147ec: 01 22                        	movs	r2, #1
 80147ee: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 80147f2: cb 68                        	ldr	r3, [r1, #12]
 80147f4: 4e f6 23 41                  	movw	r1, #60451
 80147f8: c0 f6 01 01                  	movt	r1, #2049
 80147fc: 98 47                        	blx	r3
 80147fe: 80 46                        	mov	r8, r0
 8014800: 40 46                        	mov	r0, r8
 8014802: 04 b0                        	add	sp, #16
 8014804: 5d f8 04 8b                  	ldr	r8, [sp], #4
 8014808: f0 bd                        	pop	{r4, r5, r6, r7, pc}

0801480a _$LT$bluetooth_hci..event..NumberOfCompletedPacketsPair$u20$as$u20$core..fmt..Debug$GT$::fmt::hc4072977a48e655c:
; #[derive(Copy, Clone, Debug)]
 801480a: b0 b5                        	push	{r4, r5, r7, lr}
 801480c: 02 af                        	add	r7, sp, #8
 801480e: 84 b0                        	sub	sp, #16
 8014810: 0d 46                        	mov	r5, r1
 8014812: 04 46                        	mov	r4, r0
 8014814: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8014818: 1c 22                        	movs	r2, #28
 801481a: cb 68                        	ldr	r3, [r1, #12]
 801481c: 4d f6 f2 31                  	movw	r1, #56306
 8014820: c0 f6 01 01                  	movt	r1, #2049
 8014824: 98 47                        	blx	r3
 8014826: 8d f8 08 00                  	strb.w	r0, [sp, #8]
;     pub conn_handle: ConnectionHandle,
 801482a: 20 1d                        	adds	r0, r4, #4
 801482c: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 801482e: 4d f6 10 40                  	movw	r0, #56336
 8014832: 00 21                        	movs	r1, #0
 8014834: c0 f6 01 00                  	movt	r0, #2049
 8014838: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 801483c: 4f f6 0c 51                  	movw	r1, #64780
 8014840: 00 90                        	str	r0, [sp]
 8014842: 01 a8                        	add	r0, sp, #4
 8014844: 03 ab                        	add	r3, sp, #12
 8014846: c0 f6 01 01                  	movt	r1, #2049
 801484a: 0b 22                        	movs	r2, #11
 801484c: 01 95                        	str	r5, [sp, #4]
 801484e: 01 f0 6f ff                  	bl	#7902
 8014852: 4d f6 38 41                  	movw	r1, #56376
 8014856: 03 ab                        	add	r3, sp, #12
 8014858: c0 f6 01 01                  	movt	r1, #2049
 801485c: 15 22                        	movs	r2, #21
 801485e: 00 91                        	str	r1, [sp]
 8014860: 4d f6 20 41                  	movw	r1, #56352
 8014864: c0 f6 01 01                  	movt	r1, #2049
;     pub num_completed_packets: usize,
 8014868: 03 94                        	str	r4, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 801486a: 01 f0 61 ff                  	bl	#7874
 801486e: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 8014872: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 8014876: b9 b1                        	cbz	r1, #46
 8014878: 08 b1                        	cbz	r0, #2
 801487a: 01 20                        	movs	r0, #1
 801487c: 12 e0                        	b	#36 <_ZN87_$LT$bluetooth_hci..event..NumberOfCompletedPacketsPair$u20$as$u20$core..fmt..Debug$GT$3fmt17hc4072977a48e655cE+0x9e>
 801487e: 01 99                        	ldr	r1, [sp, #4]
 8014880: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8014884: 09 78                        	ldrb	r1, [r1]
 8014886: d3 68                        	ldr	r3, [r2, #12]
 8014888: 49 07                        	lsls	r1, r1, #29
 801488a: 05 d4                        	bmi	#10 <_ZN87_$LT$bluetooth_hci..event..NumberOfCompletedPacketsPair$u20$as$u20$core..fmt..Debug$GT$3fmt17hc4072977a48e655cE+0x92>
 801488c: 4e f6 1c 41                  	movw	r1, #60444
 8014890: 02 22                        	movs	r2, #2
 8014892: c0 f6 01 01                  	movt	r1, #2049
 8014896: 04 e0                        	b	#8 <_ZN87_$LT$bluetooth_hci..event..NumberOfCompletedPacketsPair$u20$as$u20$core..fmt..Debug$GT$3fmt17hc4072977a48e655cE+0x9c>
 8014898: 4e f6 d6 41                  	movw	r1, #60630
 801489c: 01 22                        	movs	r2, #1
 801489e: c0 f6 01 01                  	movt	r1, #2049
 80148a2: 98 47                        	blx	r3
 80148a4: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 80148a8: 00 28                        	cmp	r0, #0
 80148aa: 18 bf                        	it	ne
 80148ac: 01 20                        	movne	r0, #1
 80148ae: 04 b0                        	add	sp, #16
 80148b0: b0 bd                        	pop	{r4, r5, r7, pc}

080148b2 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h36051588c4b896ff:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 80148b2: f0 b5                        	push	{r4, r5, r6, r7, lr}
 80148b4: 03 af                        	add	r7, sp, #12
 80148b6: 4d f8 04 bd                  	str	r11, [sp, #-4]!
 80148ba: a2 b0                        	sub	sp, #136
 80148bc: 0c 46                        	mov	r4, r1
 80148be: 09 68                        	ldr	r1, [r1]
 80148c0: 00 68                        	ldr	r0, [r0]
;                 if f.debug_lower_hex() {
 80148c2: ca 06                        	lsls	r2, r1, #27
 80148c4: 2f d4                        	bmi	#94 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h36051588c4b896ffE+0x78>
 80148c6: 06 88                        	ldrh	r6, [r0]
;                 } else if f.debug_upper_hex() {
 80148c8: 88 06                        	lsls	r0, r1, #26
 80148ca: 5f d4                        	bmi	#190 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h36051588c4b896ffE+0xde>
 80148cc: 42 f2 0f 70                  	movw	r0, #9999
 80148d0: 86 42                        	cmp	r6, r0
 80148d2: 40 f2 9b 80                  	bls.w	#310 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h36051588c4b896ffE+0x15e>
 80148d6: 41 f2 59 70                  	movw	r0, #5977
 80148da: 48 f2 1f 53                  	movw	r3, #34079
 80148de: cd f2 b7 10                  	movt	r0, #53687
 80148e2: c5 f2 eb 13                  	movt	r3, #20971
 80148e6: a6 fb 00 01                  	umull	r0, r1, r6, r0
 80148ea: 48 0b                        	lsrs	r0, r1, #13
 80148ec: 4d f6 f0 01                  	movw	r1, #55536
 80148f0: cf f6 ff 71                  	movt	r1, #65535
 80148f4: 00 fb 01 61                  	mla	r1, r0, r1, r6
 80148f8: 8a b2                        	uxth	r2, r1
 80148fa: a2 fb 03 23                  	umull	r2, r3, r2, r3
 80148fe: 5a 09                        	lsrs	r2, r3, #5
 8014900: 6f f0 63 03                  	mvn	r3, #99
 8014904: 02 fb 03 11                  	mla	r1, r2, r3, r1
 8014908: 4e f6 ed 23                  	movw	r3, #60141
 801490c: c0 f6 01 03                  	movt	r3, #2049
 8014910: 33 f8 12 20                  	ldrh.w	r2, [r3, r2, lsl #1]
 8014914: ad f8 2b 20                  	strh.w	r2, [sp, #43]
 8014918: 89 b2                        	uxth	r1, r1
 801491a: 33 f8 11 10                  	ldrh.w	r1, [r3, r1, lsl #1]
 801491e: ad f8 2d 10                  	strh.w	r1, [sp, #45]
 8014922: 23 21                        	movs	r1, #35
 8014924: aa e0                        	b	#340 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h36051588c4b896ffE+0x1ce>
 8014926: 06 88                        	ldrh	r6, [r0]
 8014928: 02 ad                        	add	r5, sp, #8
 801492a: 80 21                        	movs	r1, #128
 801492c: 06 f0 0f 00                  	and	r0, r6, #15
 8014930: 00 f1 57 02                  	add.w	r2, r0, #87
 8014934: 0a 28                        	cmp	r0, #10
 8014936: 38 bf                        	it	lo
 8014938: 00 f1 30 02                  	addlo.w	r2, r0, #48
 801493c: 28 46                        	mov	r0, r5
 801493e: 07 f0 0f fe                  	bl	#31774
 8014942: 00 20                        	movs	r0, #0
 8014944: b0 eb 16 1f                  	cmp.w	r0, r6, lsr #4
 8014948: 5a d0                        	beq	#180 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h36051588c4b896ffE+0x152>
 801494a: 31 09                        	lsrs	r1, r6, #4
 801494c: 01 f0 0f 01                  	and	r1, r1, #15
 8014950: 01 f1 57 02                  	add.w	r2, r1, #87
 8014954: 0a 29                        	cmp	r1, #10
 8014956: 38 bf                        	it	lo
 8014958: 01 f1 30 02                  	addlo.w	r2, r1, #48
 801495c: b0 eb 16 2f                  	cmp.w	r0, r6, lsr #8
 8014960: 8d f8 86 20                  	strb.w	r2, [sp, #134]
 8014964: 4f d0                        	beq	#158 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h36051588c4b896ffE+0x158>
 8014966: 30 0a                        	lsrs	r0, r6, #8
 8014968: 00 f0 0f 00                  	and	r0, r0, #15
 801496c: 00 f1 57 01                  	add.w	r1, r0, #87
 8014970: 0a 28                        	cmp	r0, #10
 8014972: 38 bf                        	it	lo
 8014974: 00 f1 30 01                  	addlo.w	r1, r0, #48
 8014978: 00 20                        	movs	r0, #0
 801497a: b0 eb 16 3f                  	cmp.w	r0, r6, lsr #12
 801497e: 8d f8 85 10                  	strb.w	r1, [sp, #133]
 8014982: 64 d0                        	beq	#200 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h36051588c4b896ffE+0x1a0>
 8014984: 30 0b                        	lsrs	r0, r6, #12
 8014986: 00 f1 57 01                  	add.w	r1, r0, #87
 801498a: 30 e0                        	b	#96 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h36051588c4b896ffE+0x140>
 801498c: 06 f0 0f 00                  	and	r0, r6, #15
 8014990: 02 ad                        	add	r5, sp, #8
 8014992: 00 f1 37 02                  	add.w	r2, r0, #55
 8014996: 0a 28                        	cmp	r0, #10
 8014998: 38 bf                        	it	lo
 801499a: 00 f1 30 02                  	addlo.w	r2, r0, #48
 801499e: 28 46                        	mov	r0, r5
 80149a0: 80 21                        	movs	r1, #128
 80149a2: 07 f0 dd fd                  	bl	#31674
 80149a6: 00 20                        	movs	r0, #0
 80149a8: b0 eb 16 1f                  	cmp.w	r0, r6, lsr #4
 80149ac: 28 d0                        	beq	#80 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h36051588c4b896ffE+0x152>
 80149ae: 31 09                        	lsrs	r1, r6, #4
 80149b0: 01 f0 0f 01                  	and	r1, r1, #15
 80149b4: 01 f1 37 02                  	add.w	r2, r1, #55
 80149b8: 0a 29                        	cmp	r1, #10
 80149ba: 38 bf                        	it	lo
 80149bc: 01 f1 30 02                  	addlo.w	r2, r1, #48
 80149c0: b0 eb 16 2f                  	cmp.w	r0, r6, lsr #8
 80149c4: 8d f8 86 20                  	strb.w	r2, [sp, #134]
 80149c8: 1d d0                        	beq	#58 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h36051588c4b896ffE+0x158>
 80149ca: 30 0a                        	lsrs	r0, r6, #8
 80149cc: 00 f0 0f 00                  	and	r0, r0, #15
 80149d0: 00 f1 37 01                  	add.w	r1, r0, #55
 80149d4: 0a 28                        	cmp	r0, #10
 80149d6: 38 bf                        	it	lo
 80149d8: 00 f1 30 01                  	addlo.w	r1, r0, #48
 80149dc: 00 20                        	movs	r0, #0
 80149de: b0 eb 16 3f                  	cmp.w	r0, r6, lsr #12
 80149e2: 8d f8 85 10                  	strb.w	r1, [sp, #133]
 80149e6: 32 d0                        	beq	#100 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h36051588c4b896ffE+0x1a0>
 80149e8: 30 0b                        	lsrs	r0, r6, #12
 80149ea: 00 f1 37 01                  	add.w	r1, r0, #55
 80149ee: 0a 28                        	cmp	r0, #10
 80149f0: 38 bf                        	it	lo
 80149f2: 00 f1 30 01                  	addlo.w	r1, r0, #48
 80149f6: 8d f8 84 10                  	strb.w	r1, [sp, #132]
 80149fa: 7c 20                        	movs	r0, #124
 80149fc: 04 21                        	movs	r1, #4
 80149fe: 28 e0                        	b	#80 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h36051588c4b896ffE+0x1a4>
 8014a00: 7f 20                        	movs	r0, #127
 8014a02: 01 21                        	movs	r1, #1
 8014a04: 25 e0                        	b	#74 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h36051588c4b896ffE+0x1a4>
 8014a06: 7e 20                        	movs	r0, #126
 8014a08: 02 21                        	movs	r1, #2
 8014a0a: 22 e0                        	b	#68 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h36051588c4b896ffE+0x1a4>
 8014a0c: 4e f6 ed 20                  	movw	r0, #60141
 8014a10: 63 2e                        	cmp	r6, #99
 8014a12: c0 f6 01 00                  	movt	r0, #2049
 8014a16: 2c d9                        	bls	#88 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h36051588c4b896ffE+0x1c4>
 8014a18: 48 f2 1f 51                  	movw	r1, #34079
 8014a1c: c5 f2 eb 11                  	movt	r1, #20971
 8014a20: a6 fb 01 12                  	umull	r1, r2, r6, r1
 8014a24: 6f f0 63 01                  	mvn	r1, #99
 8014a28: 52 09                        	lsrs	r2, r2, #5
 8014a2a: 02 fb 01 61                  	mla	r1, r2, r1, r6
 8014a2e: 16 46                        	mov	r6, r2
 8014a30: 89 b2                        	uxth	r1, r1
 8014a32: 30 f8 11 10                  	ldrh.w	r1, [r0, r1, lsl #1]
 8014a36: ad f8 2d 10                  	strh.w	r1, [sp, #45]
 8014a3a: 25 21                        	movs	r1, #37
 8014a3c: b2 b2                        	uxth	r2, r6
 8014a3e: 0a 2a                        	cmp	r2, #10
 8014a40: 1b d3                        	blo	#54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h36051588c4b896ffE+0x1cc>
 8014a42: 30 f8 12 00                  	ldrh.w	r0, [r0, r2, lsl #1]
 8014a46: 02 39                        	subs	r1, #2
 8014a48: 02 aa                        	add	r2, sp, #8
 8014a4a: 50 52                        	strh	r0, [r2, r1]
 8014a4c: 1a e0                        	b	#52 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h36051588c4b896ffE+0x1d6>
 8014a4e: 7d 20                        	movs	r0, #125
 8014a50: 03 21                        	movs	r1, #3
 8014a52: 4e f6 b5 32                  	movw	r2, #60341
 8014a56: 28 44                        	add	r0, r5
 8014a58: cd e9 00 01                  	strd	r0, r1, [sp]
 8014a5c: c0 f6 01 02                  	movt	r2, #2049
 8014a60: 20 46                        	mov	r0, r4
 8014a62: 01 21                        	movs	r1, #1
 8014a64: 02 23                        	movs	r3, #2
 8014a66: 01 f0 69 f8                  	bl	#4306
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8014a6a: 22 b0                        	add	sp, #136
 8014a6c: 5d f8 04 bb                  	ldr	r11, [sp], #4
 8014a70: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 8014a72: 27 21                        	movs	r1, #39
 8014a74: b2 b2                        	uxth	r2, r6
 8014a76: 0a 2a                        	cmp	r2, #10
 8014a78: e3 d2                        	bhs	#-58 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h36051588c4b896ffE+0x194>
 8014a7a: 30 46                        	mov	r0, r6
 8014a7c: 01 39                        	subs	r1, #1
 8014a7e: 02 aa                        	add	r2, sp, #8
 8014a80: 30 30                        	adds	r0, #48
 8014a82: 50 54                        	strb	r0, [r2, r1]
 8014a84: c1 f1 27 00                  	rsb.w	r0, r1, #39
 8014a88: 02 aa                        	add	r2, sp, #8
 8014a8a: 11 44                        	add	r1, r2
 8014a8c: 4e f6 b4 42                  	movw	r2, #60596
 8014a90: cd e9 00 10                  	strd	r1, r0, [sp]
 8014a94: c0 f6 01 02                  	movt	r2, #2049
 8014a98: 20 46                        	mov	r0, r4
 8014a9a: 01 21                        	movs	r1, #1
 8014a9c: 00 23                        	movs	r3, #0
 8014a9e: 01 f0 4d f8                  	bl	#4250
 8014aa2: 22 b0                        	add	sp, #136
 8014aa4: 5d f8 04 bb                  	ldr	r11, [sp], #4
 8014aa8: f0 bd                        	pop	{r4, r5, r6, r7, pc}

08014aaa _$LT$bluetooth_hci..event..LeAdvertisement$u20$as$u20$core..fmt..Debug$GT$::fmt::hdcc2d40489562925:
; #[derive(Copy, Clone, Debug)]
 8014aaa: b0 b5                        	push	{r4, r5, r7, lr}
 8014aac: 02 af                        	add	r7, sp, #8
 8014aae: 84 b0                        	sub	sp, #16
 8014ab0: 0d 46                        	mov	r5, r1
 8014ab2: 04 46                        	mov	r4, r0
 8014ab4: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8014ab8: 0f 22                        	movs	r2, #15
 8014aba: cb 68                        	ldr	r3, [r1, #12]
 8014abc: 4d f6 58 41                  	movw	r1, #56408
 8014ac0: c0 f6 01 01                  	movt	r1, #2049
 8014ac4: 98 47                        	blx	r3
 8014ac6: 8d f8 08 00                  	strb.w	r0, [sp, #8]
;     pub event_type: AdvertisementEvent,
 8014aca: 04 f1 08 00                  	add.w	r0, r4, #8
 8014ace: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 8014ad0: 4d f6 74 40                  	movw	r0, #56436
 8014ad4: 00 21                        	movs	r1, #0
 8014ad6: c0 f6 01 00                  	movt	r0, #2049
 8014ada: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 8014ade: 4d f6 67 41                  	movw	r1, #56423
 8014ae2: 00 90                        	str	r0, [sp]
 8014ae4: 01 a8                        	add	r0, sp, #4
 8014ae6: 03 ab                        	add	r3, sp, #12
 8014ae8: c0 f6 01 01                  	movt	r1, #2049
 8014aec: 0a 22                        	movs	r2, #10
 8014aee: 01 95                        	str	r5, [sp, #4]
 8014af0: 01 f0 1e fe                  	bl	#7228
;     pub address: crate::BdAddrType,
 8014af4: 04 f1 09 01                  	add.w	r1, r4, #9
 8014af8: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 8014afa: 4d f6 8c 41                  	movw	r1, #56460
 8014afe: 03 ab                        	add	r3, sp, #12
 8014b00: c0 f6 01 01                  	movt	r1, #2049
 8014b04: 07 22                        	movs	r2, #7
 8014b06: 00 91                        	str	r1, [sp]
 8014b08: 4d f6 84 41                  	movw	r1, #56452
 8014b0c: c0 f6 01 01                  	movt	r1, #2049
 8014b10: 01 f0 0e fe                  	bl	#7196
 8014b14: 4d f6 9c 41                  	movw	r1, #56476
 8014b18: 03 ab                        	add	r3, sp, #12
 8014b1a: c0 f6 01 01                  	movt	r1, #2049
 8014b1e: 04 22                        	movs	r2, #4
 8014b20: 00 91                        	str	r1, [sp]
 8014b22: 4d f2 90 21                  	movw	r1, #53904
 8014b26: c0 f6 01 01                  	movt	r1, #2049
;     pub data: &'a [u8],
 8014b2a: 03 94                        	str	r4, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 8014b2c: 01 f0 00 fe                  	bl	#7168
;     pub rssi: Option<i8>,
 8014b30: 04 f1 10 01                  	add.w	r1, r4, #16
 8014b34: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 8014b36: 4d f6 ac 41                  	movw	r1, #56492
 8014b3a: 03 ab                        	add	r3, sp, #12
 8014b3c: c0 f6 01 01                  	movt	r1, #2049
 8014b40: 04 22                        	movs	r2, #4
 8014b42: 00 91                        	str	r1, [sp]
 8014b44: 4d f2 b4 21                  	movw	r1, #53940
 8014b48: c0 f6 01 01                  	movt	r1, #2049
 8014b4c: 01 f0 f0 fd                  	bl	#7136
 8014b50: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 8014b54: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 8014b58: b9 b1                        	cbz	r1, #46
 8014b5a: 08 b1                        	cbz	r0, #2
 8014b5c: 01 20                        	movs	r0, #1
 8014b5e: 12 e0                        	b	#36 <_ZN74_$LT$bluetooth_hci..event..LeAdvertisement$u20$as$u20$core..fmt..Debug$GT$3fmt17hdcc2d40489562925E+0xe0>
 8014b60: 01 99                        	ldr	r1, [sp, #4]
 8014b62: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8014b66: 09 78                        	ldrb	r1, [r1]
 8014b68: d3 68                        	ldr	r3, [r2, #12]
 8014b6a: 49 07                        	lsls	r1, r1, #29
 8014b6c: 05 d4                        	bmi	#10 <_ZN74_$LT$bluetooth_hci..event..LeAdvertisement$u20$as$u20$core..fmt..Debug$GT$3fmt17hdcc2d40489562925E+0xd4>
 8014b6e: 4e f6 1c 41                  	movw	r1, #60444
 8014b72: 02 22                        	movs	r2, #2
 8014b74: c0 f6 01 01                  	movt	r1, #2049
 8014b78: 04 e0                        	b	#8 <_ZN74_$LT$bluetooth_hci..event..LeAdvertisement$u20$as$u20$core..fmt..Debug$GT$3fmt17hdcc2d40489562925E+0xde>
 8014b7a: 4e f6 d6 41                  	movw	r1, #60630
 8014b7e: 01 22                        	movs	r2, #1
 8014b80: c0 f6 01 01                  	movt	r1, #2049
 8014b84: 98 47                        	blx	r3
 8014b86: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8014b8a: 00 28                        	cmp	r0, #0
 8014b8c: 18 bf                        	it	ne
 8014b8e: 01 20                        	movne	r0, #1
 8014b90: 04 b0                        	add	sp, #16
 8014b92: b0 bd                        	pop	{r4, r5, r7, pc}

08014b94 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h1f2307bb02e5787f:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8014b94: b0 b5                        	push	{r4, r5, r7, lr}
 8014b96: 02 af                        	add	r7, sp, #8
 8014b98: 84 b0                        	sub	sp, #16
 8014b9a: 05 68                        	ldr	r5, [r0]
 8014b9c: 0c 46                        	mov	r4, r1
; #[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]
 8014b9e: 28 78                        	ldrb	r0, [r5]
 8014ba0: 01 28                        	cmp	r0, #1
 8014ba2: 22 d1                        	bne	#68 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1f2307bb02e5787fE+0x5a>
 8014ba4: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8014ba8: 04 22                        	movs	r2, #4
 8014baa: cb 68                        	ldr	r3, [r1, #12]
 8014bac: 4d f2 b8 21                  	movw	r1, #53944
 8014bb0: c0 f6 01 01                  	movt	r1, #2049
 8014bb4: 98 47                        	blx	r3
 8014bb6: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8014bba: 00 20                        	movs	r0, #0
 8014bbc: 4d f6 bc 42                  	movw	r2, #56508
 8014bc0: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8014bc4: 01 90                        	str	r0, [sp, #4]
;     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
 8014bc6: 68 1c                        	adds	r0, r5, #1
 8014bc8: 03 a9                        	add	r1, sp, #12
 8014bca: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]
 8014bcc: c0 f6 01 02                  	movt	r2, #2049
 8014bd0: 68 46                        	mov	r0, sp
 8014bd2: 00 94                        	str	r4, [sp]
 8014bd4: 01 f0 29 ff                  	bl	#7762
 8014bd8: 01 98                        	ldr	r0, [sp, #4]
 8014bda: 9d f8 08 40                  	ldrb.w	r4, [sp, #8]
 8014bde: 70 b1                        	cbz	r0, #28
 8014be0: 9c b1                        	cbz	r4, #38
 8014be2: 01 24                        	movs	r4, #1
 8014be4: 8d f8 08 40                  	strb.w	r4, [sp, #8]
 8014be8: 09 e0                        	b	#18 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1f2307bb02e5787fE+0x6e>
 8014bea: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8014bee: 04 22                        	movs	r2, #4
 8014bf0: cb 68                        	ldr	r3, [r1, #12]
 8014bf2: 4d f2 a8 21                  	movw	r1, #53928
 8014bf6: c0 f6 01 01                  	movt	r1, #2049
 8014bfa: 98 47                        	blx	r3
 8014bfc: 04 46                        	mov	r4, r0
 8014bfe: 00 2c                        	cmp	r4, #0
 8014c00: 18 bf                        	it	ne
 8014c02: 01 24                        	movne	r4, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8014c04: 20 46                        	mov	r0, r4
 8014c06: 04 b0                        	add	sp, #16
 8014c08: b0 bd                        	pop	{r4, r5, r7, pc}
 8014c0a: 01 28                        	cmp	r0, #1
 8014c0c: 11 d1                        	bne	#34 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1f2307bb02e5787fE+0xa2>
 8014c0e: 9d f8 09 00                  	ldrb.w	r0, [sp, #9]
 8014c12: 70 b1                        	cbz	r0, #28
 8014c14: 00 99                        	ldr	r1, [sp]
 8014c16: 08 78                        	ldrb	r0, [r1]
 8014c18: 40 07                        	lsls	r0, r0, #29
 8014c1a: 0a d4                        	bmi	#20 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1f2307bb02e5787fE+0xa2>
 8014c1c: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8014c20: 01 22                        	movs	r2, #1
 8014c22: cb 68                        	ldr	r3, [r1, #12]
 8014c24: 4e f6 21 41                  	movw	r1, #60449
 8014c28: c0 f6 01 01                  	movt	r1, #2049
 8014c2c: 01 24                        	movs	r4, #1
 8014c2e: 98 47                        	blx	r3
 8014c30: 50 b9                        	cbnz	r0, #20
 8014c32: 00 99                        	ldr	r1, [sp]
 8014c34: 01 22                        	movs	r2, #1
 8014c36: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8014c3a: cb 68                        	ldr	r3, [r1, #12]
 8014c3c: 4f f2 69 61                  	movw	r1, #63081
 8014c40: c0 f6 01 01                  	movt	r1, #2049
 8014c44: 98 47                        	blx	r3
 8014c46: 04 46                        	mov	r4, r0
 8014c48: 8d f8 08 40                  	strb.w	r4, [sp, #8]
 8014c4c: d7 e7                        	b	#-82 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1f2307bb02e5787fE+0x6e>

08014c4e _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h0ce9c819b2453c98:
 8014c4e: f0 b5                        	push	{r4, r5, r6, r7, lr}
 8014c50: 03 af                        	add	r7, sp, #12
 8014c52: 4d f8 04 8d                  	str	r8, [sp, #-4]!
 8014c56: 84 b0                        	sub	sp, #16
 8014c58: 00 68                        	ldr	r0, [r0]
 8014c5a: 0d 46                        	mov	r5, r1
 8014c5c: 01 22                        	movs	r2, #1
 8014c5e: d0 e9 00 64                  	ldrd	r6, r4, [r0]
 8014c62: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8014c66: cb 68                        	ldr	r3, [r1, #12]
 8014c68: 4e f6 24 41                  	movw	r1, #60452
 8014c6c: c0 f6 01 01                  	movt	r1, #2049
 8014c70: 98 47                        	blx	r3
 8014c72: 00 21                        	movs	r1, #0
 8014c74: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 8014c78: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8014c7c: 01 95                        	str	r5, [sp, #4]
;                     if is_empty!(self) {
 8014c7e: 84 b1                        	cbz	r4, #32
 8014c80: 4d f6 b8 38                  	movw	r8, #56248
 8014c84: 01 a8                        	add	r0, sp, #4
 8014c86: 03 ad                        	add	r5, sp, #12
 8014c88: c0 f6 01 08                  	movt	r8, #2049
;             self.entry(&entry);
 8014c8c: 29 46                        	mov	r1, r5
 8014c8e: 42 46                        	mov	r2, r8
;         for entry in entries {
 8014c90: 03 96                        	str	r6, [sp, #12]
;             self.entry(&entry);
 8014c92: 01 f0 3a ff                  	bl	#7796
;         $self.ptr.as_ptr() as *const T == $self.end
 8014c96: 01 3c                        	subs	r4, #1
;         intrinsics::offset(self, count) as *mut T
 8014c98: 06 f1 01 06                  	add.w	r6, r6, #1
;                     if is_empty!(self) {
 8014c9c: f6 d1                        	bne	#-20 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce9c819b2453c98E+0x42>
 8014c9e: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 8014ca2: 20 b1                        	cbz	r0, #8
 8014ca4: 01 20                        	movs	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8014ca6: 04 b0                        	add	sp, #16
 8014ca8: 5d f8 04 8b                  	ldr	r8, [sp], #4
 8014cac: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 8014cae: 01 99                        	ldr	r1, [sp, #4]
 8014cb0: 01 22                        	movs	r2, #1
 8014cb2: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8014cb6: cb 68                        	ldr	r3, [r1, #12]
 8014cb8: 4e f6 23 41                  	movw	r1, #60451
 8014cbc: c0 f6 01 01                  	movt	r1, #2049
 8014cc0: 98 47                        	blx	r3
 8014cc2: 04 b0                        	add	sp, #16
 8014cc4: 5d f8 04 8b                  	ldr	r8, [sp], #4
 8014cc8: f0 bd                        	pop	{r4, r5, r6, r7, pc}

08014cca _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h609e348912141fc0:
 8014cca: b0 b5                        	push	{r4, r5, r7, lr}
 8014ccc: 02 af                        	add	r7, sp, #8
 8014cce: 84 b0                        	sub	sp, #16
 8014cd0: 05 68                        	ldr	r5, [r0]
 8014cd2: 0c 46                        	mov	r4, r1
; #[derive(Copy, Clone, Debug, PartialEq)]
 8014cd4: 15 f8 01 0b                  	ldrb	r0, [r5], #1
 8014cd8: 01 28                        	cmp	r0, #1
 8014cda: 20 d1                        	bne	#64 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h609e348912141fc0E+0x58>
 8014cdc: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8014ce0: 06 22                        	movs	r2, #6
 8014ce2: cb 68                        	ldr	r3, [r1, #12]
 8014ce4: 4d f6 cc 41                  	movw	r1, #56524
 8014ce8: c0 f6 01 01                  	movt	r1, #2049
 8014cec: 98 47                        	blx	r3
 8014cee: 4d f6 d4 42                  	movw	r2, #56532
 8014cf2: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8014cf6: 00 20                        	movs	r0, #0
 8014cf8: 03 a9                        	add	r1, sp, #12
 8014cfa: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8014cfe: c0 f6 01 02                  	movt	r2, #2049
 8014d02: 01 90                        	str	r0, [sp, #4]
 8014d04: 68 46                        	mov	r0, sp
 8014d06: 00 94                        	str	r4, [sp]
;     Random(BdAddr),
 8014d08: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug, PartialEq)]
 8014d0a: 01 f0 8e fe                  	bl	#7452
 8014d0e: 01 98                        	ldr	r0, [sp, #4]
 8014d10: 9d f8 08 40                  	ldrb.w	r4, [sp, #8]
 8014d14: 00 28                        	cmp	r0, #0
 8014d16: 42 d0                        	beq	#132 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h609e348912141fc0E+0xd8>
 8014d18: 04 b3                        	cbz	r4, #64
 8014d1a: 01 24                        	movs	r4, #1
 8014d1c: 3d e0                        	b	#122 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h609e348912141fc0E+0xd4>
 8014d1e: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8014d22: 06 22                        	movs	r2, #6
 8014d24: cb 68                        	ldr	r3, [r1, #12]
 8014d26: 4d f6 e4 41                  	movw	r1, #56548
 8014d2a: c0 f6 01 01                  	movt	r1, #2049
 8014d2e: 98 47                        	blx	r3
 8014d30: 4d f6 d4 42                  	movw	r2, #56532
 8014d34: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8014d38: 00 20                        	movs	r0, #0
 8014d3a: 03 a9                        	add	r1, sp, #12
 8014d3c: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8014d40: c0 f6 01 02                  	movt	r2, #2049
 8014d44: 01 90                        	str	r0, [sp, #4]
 8014d46: 68 46                        	mov	r0, sp
 8014d48: 00 94                        	str	r4, [sp]
;     Public(BdAddr),
 8014d4a: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug, PartialEq)]
 8014d4c: 01 f0 6d fe                  	bl	#7386
 8014d50: 01 98                        	ldr	r0, [sp, #4]
 8014d52: 9d f8 08 40                  	ldrb.w	r4, [sp, #8]
 8014d56: 10 b3                        	cbz	r0, #68
 8014d58: 00 2c                        	cmp	r4, #0
 8014d5a: de d1                        	bne	#-68 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h609e348912141fc0E+0x54>
 8014d5c: 01 28                        	cmp	r0, #1
 8014d5e: 11 d1                        	bne	#34 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h609e348912141fc0E+0xbe>
 8014d60: 9d f8 09 00                  	ldrb.w	r0, [sp, #9]
 8014d64: 70 b1                        	cbz	r0, #28
 8014d66: 00 99                        	ldr	r1, [sp]
 8014d68: 08 78                        	ldrb	r0, [r1]
 8014d6a: 40 07                        	lsls	r0, r0, #29
 8014d6c: 0a d4                        	bmi	#20 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h609e348912141fc0E+0xbe>
 8014d6e: 88 69                        	ldr	r0, [r1, #24]
 8014d70: 01 22                        	movs	r2, #1
 8014d72: c9 69                        	ldr	r1, [r1, #28]
 8014d74: 01 24                        	movs	r4, #1
 8014d76: cb 68                        	ldr	r3, [r1, #12]
 8014d78: 4e f6 21 41                  	movw	r1, #60449
 8014d7c: c0 f6 01 01                  	movt	r1, #2049
 8014d80: 98 47                        	blx	r3
 8014d82: 50 b9                        	cbnz	r0, #20
 8014d84: 00 99                        	ldr	r1, [sp]
 8014d86: 01 22                        	movs	r2, #1
 8014d88: 88 69                        	ldr	r0, [r1, #24]
 8014d8a: c9 69                        	ldr	r1, [r1, #28]
 8014d8c: cb 68                        	ldr	r3, [r1, #12]
 8014d8e: 4f f2 69 61                  	movw	r1, #63081
 8014d92: c0 f6 01 01                  	movt	r1, #2049
 8014d96: 98 47                        	blx	r3
 8014d98: 04 46                        	mov	r4, r0
 8014d9a: 8d f8 08 40                  	strb.w	r4, [sp, #8]
 8014d9e: 00 2c                        	cmp	r4, #0
 8014da0: 18 bf                        	it	ne
 8014da2: 01 24                        	movne	r4, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8014da4: 20 46                        	mov	r0, r4
 8014da6: 04 b0                        	add	sp, #16
 8014da8: b0 bd                        	pop	{r4, r5, r7, pc}

08014daa _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h641ea981e36fe07f:
 8014daa: f0 b5                        	push	{r4, r5, r6, r7, lr}
 8014dac: 03 af                        	add	r7, sp, #12
 8014dae: 4d f8 04 8d                  	str	r8, [sp, #-4]!
 8014db2: 84 b0                        	sub	sp, #16
 8014db4: 0d 46                        	mov	r5, r1
 8014db6: 04 68                        	ldr	r4, [r0]
 8014db8: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8014dbc: 01 22                        	movs	r2, #1
 8014dbe: cb 68                        	ldr	r3, [r1, #12]
 8014dc0: 4e f6 24 41                  	movw	r1, #60452
 8014dc4: c0 f6 01 01                  	movt	r1, #2049
 8014dc8: 4f f0 01 08                  	mov.w	r8, #1
 8014dcc: 98 47                        	blx	r3
 8014dce: 01 95                        	str	r5, [sp, #4]
;             self.entry(&entry);
 8014dd0: 4d f6 b8 35                  	movw	r5, #56248
 8014dd4: 03 ae                        	add	r6, sp, #12
 8014dd6: 00 21                        	movs	r1, #0
 8014dd8: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8014ddc: c0 f6 01 05                  	movt	r5, #2049
 8014de0: 01 a8                        	add	r0, sp, #4
 8014de2: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 8014de6: 31 46                        	mov	r1, r6
 8014de8: 2a 46                        	mov	r2, r5
;         for entry in entries {
 8014dea: 03 94                        	str	r4, [sp, #12]
;             self.entry(&entry);
 8014dec: 01 f0 8d fe                  	bl	#7450
;         intrinsics::offset(self, count) as *mut T
 8014df0: 61 1c                        	adds	r1, r4, #1
;         for entry in entries {
 8014df2: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 8014df4: 31 46                        	mov	r1, r6
 8014df6: 2a 46                        	mov	r2, r5
 8014df8: 01 f0 87 fe                  	bl	#7438
;         intrinsics::offset(self, count) as *mut T
 8014dfc: a1 1c                        	adds	r1, r4, #2
;         for entry in entries {
 8014dfe: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 8014e00: 31 46                        	mov	r1, r6
 8014e02: 2a 46                        	mov	r2, r5
 8014e04: 01 f0 81 fe                  	bl	#7426
;         intrinsics::offset(self, count) as *mut T
 8014e08: e1 1c                        	adds	r1, r4, #3
;         for entry in entries {
 8014e0a: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 8014e0c: 31 46                        	mov	r1, r6
 8014e0e: 2a 46                        	mov	r2, r5
 8014e10: 01 f0 7b fe                  	bl	#7414
;         intrinsics::offset(self, count) as *mut T
 8014e14: 21 1d                        	adds	r1, r4, #4
;         for entry in entries {
 8014e16: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 8014e18: 31 46                        	mov	r1, r6
 8014e1a: 2a 46                        	mov	r2, r5
 8014e1c: 01 f0 75 fe                  	bl	#7402
;         intrinsics::offset(self, count) as *mut T
 8014e20: 61 1d                        	adds	r1, r4, #5
;         for entry in entries {
 8014e22: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 8014e24: 31 46                        	mov	r1, r6
 8014e26: 2a 46                        	mov	r2, r5
 8014e28: 01 f0 6f fe                  	bl	#7390
 8014e2c: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 8014e30: 20 b1                        	cbz	r0, #8
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8014e32: 40 46                        	mov	r0, r8
 8014e34: 04 b0                        	add	sp, #16
 8014e36: 5d f8 04 8b                  	ldr	r8, [sp], #4
 8014e3a: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 8014e3c: 01 99                        	ldr	r1, [sp, #4]
 8014e3e: 01 22                        	movs	r2, #1
 8014e40: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8014e44: cb 68                        	ldr	r3, [r1, #12]
 8014e46: 4e f6 23 41                  	movw	r1, #60451
 8014e4a: c0 f6 01 01                  	movt	r1, #2049
 8014e4e: 98 47                        	blx	r3
 8014e50: 80 46                        	mov	r8, r0
 8014e52: 40 46                        	mov	r0, r8
 8014e54: 04 b0                        	add	sp, #16
 8014e56: 5d f8 04 8b                  	ldr	r8, [sp], #4
 8014e5a: f0 bd                        	pop	{r4, r5, r6, r7, pc}

08014e5c _$LT$bluetooth_hci..event..AdvertisementEvent$u20$as$u20$core..fmt..Debug$GT$::fmt::h9b26a2a72f7fad92:
; #[derive(Copy, Clone, Debug, PartialEq)]
 8014e5c: c0 b2                        	uxtb	r0, r0
 8014e5e: df e8 00 f0                  	tbb	[pc, r0]

08014e62 $d.179:
 8014e62:	03 0c 15 1e	.word	0x1e150c03
 8014e66:	27 00		.short	0x0027

08014e68 $t.180:
 8014e68: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8014e6c: 4d f6 0c 51                  	movw	r1, #56588
 8014e70: d3 68                        	ldr	r3, [r2, #12]
 8014e72: c0 f6 01 01                  	movt	r1, #2049
 8014e76: 0d 22                        	movs	r2, #13
 8014e78: 18 47                        	bx	r3
 8014e7a: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8014e7e: 4d f6 19 51                  	movw	r1, #56601
 8014e82: d3 68                        	ldr	r3, [r2, #12]
 8014e84: c0 f6 01 01                  	movt	r1, #2049
 8014e88: 13 22                        	movs	r2, #19
 8014e8a: 18 47                        	bx	r3
 8014e8c: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8014e90: 4d f2 94 21                  	movw	r1, #53908
 8014e94: d3 68                        	ldr	r3, [r2, #12]
 8014e96: c0 f6 01 01                  	movt	r1, #2049
 8014e9a: 04 22                        	movs	r2, #4
 8014e9c: 18 47                        	bx	r3
 8014e9e: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8014ea2: 4d f6 2c 51                  	movw	r1, #56620
 8014ea6: d3 68                        	ldr	r3, [r2, #12]
 8014ea8: c0 f6 01 01                  	movt	r1, #2049
 8014eac: 1b 22                        	movs	r2, #27
 8014eae: 18 47                        	bx	r3
 8014eb0: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8014eb4: 4d f6 00 51                  	movw	r1, #56576
 8014eb8: d3 68                        	ldr	r3, [r2, #12]
 8014eba: c0 f6 01 01                  	movt	r1, #2049
 8014ebe: 0c 22                        	movs	r2, #12
 8014ec0: 18 47                        	bx	r3
 8014ec2: 00 00                        	movs	r0, r0

08014ec4 _$LT$bluetooth_hci..event..Error$LT$V$GT$$u20$as$u20$core..fmt..Debug$GT$::fmt::hdf5b22e298236003:
; #[derive(Copy, Clone, Debug, PartialEq)]
 8014ec4: b0 b5                        	push	{r4, r5, r7, lr}
 8014ec6: 02 af                        	add	r7, sp, #8
 8014ec8: 84 b0                        	sub	sp, #16
 8014eca: 04 46                        	mov	r4, r0
 8014ecc: 00 78                        	ldrb	r0, [r0]
 8014ece: 0d 46                        	mov	r5, r1
 8014ed0: df e8 10 f0                  	tbh	[pc, r0, lsl #1]

08014ed4 $d.182:
 8014ed4:	13 00 1c 00	.word	0x001c0013
 8014ed8:	3d 00 46 00	.word	0x0046003d
 8014edc:	4f 00 58 00	.word	0x0058004f
 8014ee0:	61 00 6a 00	.word	0x006a0061
 8014ee4:	81 00 8a 00	.word	0x008a0081
 8014ee8:	a1 00 aa 00	.word	0x00aa00a1
 8014eec:	b3 00 bc 00	.word	0x00bc00b3
 8014ef0:	d4 00 dd 00	.word	0x00dd00d4
 8014ef4:	e8 00 30 01	.word	0x013000e8
 8014ef8:	48 01		.short	0x0148

08014efa $t.183:
 8014efa: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8014efe: 0c 22                        	movs	r2, #12
 8014f00: cb 68                        	ldr	r3, [r1, #12]
 8014f02: 4d f6 68 51                  	movw	r1, #56680
 8014f06: c0 f6 01 01                  	movt	r1, #2049
 8014f0a: d3 e0                        	b	#422 <$t.183+0x1be>
 8014f0c: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8014f10: 09 22                        	movs	r2, #9
 8014f12: cb 68                        	ldr	r3, [r1, #12]
 8014f14: 4d f6 74 51                  	movw	r1, #56692
 8014f18: c0 f6 01 01                  	movt	r1, #2049
 8014f1c: 98 47                        	blx	r3
 8014f1e: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8014f22: 00 20                        	movs	r0, #0
 8014f24: 00 95                        	str	r5, [sp]
 8014f26: 4d f6 38 45                  	movw	r5, #56376
 8014f2a: c0 f6 01 05                  	movt	r5, #2049
 8014f2e: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8014f32: 01 90                        	str	r0, [sp, #4]
;     BadLength(usize, usize),
 8014f34: 20 1d                        	adds	r0, r4, #4
 8014f36: 03 a9                        	add	r1, sp, #12
 8014f38: 03 90                        	str	r0, [sp, #12]
 8014f3a: 68 46                        	mov	r0, sp
; #[derive(Copy, Clone, Debug, PartialEq)]
 8014f3c: 2a 46                        	mov	r2, r5
 8014f3e: 01 f0 74 fd                  	bl	#6888
;     BadLength(usize, usize),
 8014f42: 04 f1 08 01                  	add.w	r1, r4, #8
 8014f46: 03 91                        	str	r1, [sp, #12]
 8014f48: 03 a9                        	add	r1, sp, #12
; #[derive(Copy, Clone, Debug, PartialEq)]
 8014f4a: 2a 46                        	mov	r2, r5
 8014f4c: c2 e0                        	b	#388 <$t.183+0x1de>
 8014f4e: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8014f52: 09 22                        	movs	r2, #9
 8014f54: cb 68                        	ldr	r3, [r1, #12]
 8014f56: 4d f6 7d 51                  	movw	r1, #56701
 8014f5a: c0 f6 01 01                  	movt	r1, #2049
 8014f5e: a9 e0                        	b	#338 <$t.183+0x1be>
 8014f60: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8014f64: 0b 22                        	movs	r2, #11
 8014f66: cb 68                        	ldr	r3, [r1, #12]
 8014f68: 4d f6 86 51                  	movw	r1, #56710
 8014f6c: c0 f6 01 01                  	movt	r1, #2049
 8014f70: a0 e0                        	b	#320 <$t.183+0x1be>
 8014f72: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8014f76: 19 22                        	movs	r2, #25
 8014f78: cb 68                        	ldr	r3, [r1, #12]
 8014f7a: 4d f6 91 51                  	movw	r1, #56721
 8014f7e: c0 f6 01 01                  	movt	r1, #2049
 8014f82: 97 e0                        	b	#302 <$t.183+0x1be>
 8014f84: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8014f88: 09 22                        	movs	r2, #9
 8014f8a: cb 68                        	ldr	r3, [r1, #12]
 8014f8c: 4d f6 aa 51                  	movw	r1, #56746
 8014f90: c0 f6 01 01                  	movt	r1, #2049
 8014f94: 8e e0                        	b	#284 <$t.183+0x1be>
 8014f96: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8014f9a: 11 22                        	movs	r2, #17
 8014f9c: cb 68                        	ldr	r3, [r1, #12]
 8014f9e: 4d f6 b3 51                  	movw	r1, #56755
 8014fa2: c0 f6 01 01                  	movt	r1, #2049
 8014fa6: 85 e0                        	b	#266 <$t.183+0x1be>
 8014fa8: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8014fac: 0d 22                        	movs	r2, #13
 8014fae: cb 68                        	ldr	r3, [r1, #12]
 8014fb0: 4d f6 c4 51                  	movw	r1, #56772
 8014fb4: c0 f6 01 01                  	movt	r1, #2049
 8014fb8: 98 47                        	blx	r3
 8014fba: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8014fbe: 00 20                        	movs	r0, #0
 8014fc0: 4d f6 d4 52                  	movw	r2, #56788
 8014fc4: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8014fc8: 01 90                        	str	r0, [sp, #4]
;     UnknownOpcode(crate::opcode::Opcode),
 8014fca: a0 1c                        	adds	r0, r4, #2
 8014fcc: 03 a9                        	add	r1, sp, #12
 8014fce: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug, PartialEq)]
 8014fd0: c0 f6 01 02                  	movt	r2, #2049
 8014fd4: 7c e0                        	b	#248 <$t.183+0x1da>
 8014fd6: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8014fda: 0e 22                        	movs	r2, #14
 8014fdc: cb 68                        	ldr	r3, [r1, #12]
 8014fde: 4d f6 e4 51                  	movw	r1, #56804
 8014fe2: c0 f6 01 01                  	movt	r1, #2049
 8014fe6: 5a e0                        	b	#180 <$t.183+0x1a8>
 8014fe8: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8014fec: 11 22                        	movs	r2, #17
 8014fee: cb 68                        	ldr	r3, [r1, #12]
 8014ff0: 4d f6 f2 51                  	movw	r1, #56818
 8014ff4: c0 f6 01 01                  	movt	r1, #2049
 8014ff8: 98 47                        	blx	r3
 8014ffa: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8014ffe: 00 20                        	movs	r0, #0
 8015000: 4d f6 04 62                  	movw	r2, #56836
 8015004: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8015008: 01 90                        	str	r0, [sp, #4]
;     InvalidChannelMap([u8; 5]),
 801500a: 60 1c                        	adds	r0, r4, #1
 801500c: 03 a9                        	add	r1, sp, #12
 801500e: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug, PartialEq)]
 8015010: c0 f6 01 02                  	movt	r2, #2049
 8015014: 5c e0                        	b	#184 <$t.183+0x1da>
 8015016: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 801501a: 0f 22                        	movs	r2, #15
 801501c: cb 68                        	ldr	r3, [r1, #12]
 801501e: 4d f6 14 61                  	movw	r1, #56852
 8015022: c0 f6 01 01                  	movt	r1, #2049
 8015026: 8d e0                        	b	#282 <$t.183+0x24e>
 8015028: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 801502c: 13 22                        	movs	r2, #19
 801502e: cb 68                        	ldr	r3, [r1, #12]
 8015030: 4d f6 34 61                  	movw	r1, #56884
 8015034: c0 f6 01 01                  	movt	r1, #2049
 8015038: 3c e0                        	b	#120 <$t.183+0x1be>
 801503a: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 801503e: 10 22                        	movs	r2, #16
 8015040: cb 68                        	ldr	r3, [r1, #12]
 8015042: 4d f2 0c 01                  	movw	r1, #53260
 8015046: c0 f6 01 01                  	movt	r1, #2049
 801504a: 33 e0                        	b	#102 <$t.183+0x1be>
 801504c: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8015050: 15 22                        	movs	r2, #21
 8015052: cb 68                        	ldr	r3, [r1, #12]
 8015054: 4d f6 47 61                  	movw	r1, #56903
 8015058: c0 f6 01 01                  	movt	r1, #2049
 801505c: 98 47                        	blx	r3
 801505e: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8015062: 00 20                        	movs	r0, #0
 8015064: 4d f6 5c 62                  	movw	r2, #56924
 8015068: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 801506c: 01 90                        	str	r0, [sp, #4]
;     BadConnectionInterval(ConnectionIntervalError),
 801506e: 04 f1 08 00                  	add.w	r0, r4, #8
 8015072: 03 a9                        	add	r1, sp, #12
 8015074: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug, PartialEq)]
 8015076: c0 f6 01 02                  	movt	r2, #2049
 801507a: 29 e0                        	b	#82 <$t.183+0x1da>
 801507c: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8015080: 19 22                        	movs	r2, #25
 8015082: cb 68                        	ldr	r3, [r1, #12]
 8015084: 4d f6 6c 61                  	movw	r1, #56940
 8015088: c0 f6 01 01                  	movt	r1, #2049
 801508c: 12 e0                        	b	#36 <$t.183+0x1be>
 801508e: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8015092: 1f 22                        	movs	r2, #31
 8015094: cb 68                        	ldr	r3, [r1, #12]
 8015096: 4d f6 85 61                  	movw	r1, #56965
 801509a: c0 f6 01 01                  	movt	r1, #2049
 801509e: 98 47                        	blx	r3
 80150a0: 04 46                        	mov	r4, r0
 80150a2: 41 e0                        	b	#130 <$t.183+0x232>
 80150a4: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 80150a8: 16 22                        	movs	r2, #22
 80150aa: cb 68                        	ldr	r3, [r1, #12]
 80150ac: 4d f6 a4 61                  	movw	r1, #56996
 80150b0: c0 f6 01 01                  	movt	r1, #2049
 80150b4: 98 47                        	blx	r3
 80150b6: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 80150ba: 00 20                        	movs	r0, #0
 80150bc: 4d f6 b8 32                  	movw	r2, #56248
 80150c0: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 80150c4: 01 90                        	str	r0, [sp, #4]
 80150c6: 60 1c                        	adds	r0, r4, #1
 80150c8: 03 a9                        	add	r1, sp, #12
 80150ca: 03 90                        	str	r0, [sp, #12]
 80150cc: c0 f6 01 02                  	movt	r2, #2049
 80150d0: 68 46                        	mov	r0, sp
 80150d2: 00 95                        	str	r5, [sp]
 80150d4: 01 f0 a9 fc                  	bl	#6482
 80150d8: 01 98                        	ldr	r0, [sp, #4]
 80150da: 9d f8 08 40                  	ldrb.w	r4, [sp, #8]
 80150de: 18 b3                        	cbz	r0, #70
 80150e0: 0c b1                        	cbz	r4, #2
 80150e2: 01 24                        	movs	r4, #1
 80150e4: 1e e0                        	b	#60 <$t.183+0x22e>
 80150e6: 01 28                        	cmp	r0, #1
 80150e8: 11 d1                        	bne	#34 <$t.183+0x218>
 80150ea: 9d f8 09 00                  	ldrb.w	r0, [sp, #9]
 80150ee: 70 b1                        	cbz	r0, #28
 80150f0: 00 99                        	ldr	r1, [sp]
 80150f2: 08 78                        	ldrb	r0, [r1]
 80150f4: 40 07                        	lsls	r0, r0, #29
 80150f6: 0a d4                        	bmi	#20 <$t.183+0x218>
 80150f8: 88 69                        	ldr	r0, [r1, #24]
 80150fa: 01 22                        	movs	r2, #1
 80150fc: c9 69                        	ldr	r1, [r1, #28]
 80150fe: 01 24                        	movs	r4, #1
 8015100: cb 68                        	ldr	r3, [r1, #12]
 8015102: 4e f6 21 41                  	movw	r1, #60449
 8015106: c0 f6 01 01                  	movt	r1, #2049
 801510a: 98 47                        	blx	r3
 801510c: 50 b9                        	cbnz	r0, #20
 801510e: 00 99                        	ldr	r1, [sp]
 8015110: 01 22                        	movs	r2, #1
 8015112: 88 69                        	ldr	r0, [r1, #24]
 8015114: c9 69                        	ldr	r1, [r1, #28]
 8015116: cb 68                        	ldr	r3, [r1, #12]
 8015118: 4f f2 69 61                  	movw	r1, #63081
 801511c: c0 f6 01 01                  	movt	r1, #2049
 8015120: 98 47                        	blx	r3
 8015122: 04 46                        	mov	r4, r0
 8015124: 8d f8 08 40                  	strb.w	r4, [sp, #8]
 8015128: 00 2c                        	cmp	r4, #0
 801512a: 18 bf                        	it	ne
 801512c: 01 24                        	movne	r4, #1
 801512e: 20 46                        	mov	r0, r4
 8015130: 04 b0                        	add	sp, #16
 8015132: b0 bd                        	pop	{r4, r5, r7, pc}
 8015134: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8015138: 18 22                        	movs	r2, #24
 801513a: cb 68                        	ldr	r3, [r1, #12]
 801513c: 4d f6 ba 61                  	movw	r1, #57018
 8015140: c0 f6 01 01                  	movt	r1, #2049
 8015144: 98 47                        	blx	r3
 8015146: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 801514a: 00 20                        	movs	r0, #0
 801514c: 4d f6 24 62                  	movw	r2, #56868
 8015150: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8015154: 01 90                        	str	r0, [sp, #4]
 8015156: 04 f1 08 00                  	add.w	r0, r4, #8
 801515a: 03 a9                        	add	r1, sp, #12
 801515c: 03 90                        	str	r0, [sp, #12]
 801515e: c0 f6 01 02                  	movt	r2, #2049
 8015162: b5 e7                        	b	#-150 <$t.183+0x1da>
 8015164: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8015168: 06 22                        	movs	r2, #6
 801516a: cb 68                        	ldr	r3, [r1, #12]
 801516c: 4e f6 fc 41                  	movw	r1, #60668
 8015170: c0 f6 01 01                  	movt	r1, #2049
 8015174: 98 47                        	blx	r3
 8015176: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 801517a: 00 20                        	movs	r0, #0
 801517c: 4d f6 58 52                  	movw	r2, #56664
 8015180: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8015184: 01 90                        	str	r0, [sp, #4]
;     Vendor(V),
 8015186: 60 1c                        	adds	r0, r4, #1
 8015188: 03 a9                        	add	r1, sp, #12
 801518a: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug, PartialEq)]
 801518c: c0 f6 01 02                  	movt	r2, #2049
 8015190: 9e e7                        	b	#-196 <$t.183+0x1da>
 8015192: 00 00                        	movs	r0, r0

08015194 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h54e8e0dd26917425:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8015194: b0 b5                        	push	{r4, r5, r7, lr}
 8015196: 02 af                        	add	r7, sp, #8
 8015198: 84 b0                        	sub	sp, #16
 801519a: 05 68                        	ldr	r5, [r0]
 801519c: 0c 46                        	mov	r4, r1
; #[derive(Copy, Clone, Debug, PartialEq)]
 801519e: 28 88                        	ldrh	r0, [r5]
 80151a0: df e8 00 f0                  	tbb	[pc, r0]

080151a4 $d.185:
 80151a4:	04 0f 18 21	.word	0x21180f04
 80151a8:	2a 41 63 6c	.word	0x6c63412a

080151ac $t.186:
 80151ac: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 80151b0: 0a 22                        	movs	r2, #10
 80151b2: cb 68                        	ldr	r3, [r1, #12]
 80151b4: 4d f6 00 71                  	movw	r1, #57088
 80151b8: c0 f6 01 01                  	movt	r1, #2049
 80151bc: 98 47                        	blx	r3
 80151be: 04 46                        	mov	r4, r0
 80151c0: 9f e0                        	b	#318 <$t.186+0x15a>
 80151c2: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 80151c6: 10 22                        	movs	r2, #16
 80151c8: cb 68                        	ldr	r3, [r1, #12]
 80151ca: 4d f2 1c 01                  	movw	r1, #53276
 80151ce: c0 f6 01 01                  	movt	r1, #2049
 80151d2: 5b e0                        	b	#182 <$t.186+0xe4>
 80151d4: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 80151d8: 0f 22                        	movs	r2, #15
 80151da: cb 68                        	ldr	r3, [r1, #12]
 80151dc: 4d f6 0a 71                  	movw	r1, #57098
 80151e0: c0 f6 01 01                  	movt	r1, #2049
 80151e4: 52 e0                        	b	#164 <$t.186+0xe4>
 80151e6: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 80151ea: 10 22                        	movs	r2, #16
 80151ec: cb 68                        	ldr	r3, [r1, #12]
 80151ee: 4d f2 2c 01                  	movw	r1, #53292
 80151f2: c0 f6 01 01                  	movt	r1, #2049
 80151f6: 1e e0                        	b	#60 <$t.186+0x8e>
 80151f8: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 80151fc: 14 22                        	movs	r2, #20
 80151fe: cb 68                        	ldr	r3, [r1, #12]
 8015200: 4d f6 19 71                  	movw	r1, #57113
 8015204: c0 f6 01 01                  	movt	r1, #2049
 8015208: 98 47                        	blx	r3
 801520a: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 801520e: 00 20                        	movs	r0, #0
 8015210: 4d f6 48 42                  	movw	r2, #56392
 8015214: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8015218: 01 90                        	str	r0, [sp, #4]
;     BadConnectionLatency(u16),
 801521a: a8 1c                        	adds	r0, r5, #2
 801521c: 03 a9                        	add	r1, sp, #12
 801521e: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug, PartialEq)]
 8015220: c0 f6 01 02                  	movt	r2, #2049
 8015224: 41 e0                        	b	#130 <$t.186+0x102>
 8015226: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 801522a: 1a 22                        	movs	r2, #26
 801522c: cb 68                        	ldr	r3, [r1, #12]
 801522e: 4d f6 2d 71                  	movw	r1, #57133
 8015232: c0 f6 01 01                  	movt	r1, #2049
 8015236: 98 47                        	blx	r3
 8015238: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 801523c: 00 20                        	movs	r0, #0
 801523e: 00 94                        	str	r4, [sp]
 8015240: 4d f6 f0 64                  	movw	r4, #57072
 8015244: c0 f6 01 04                  	movt	r4, #2049
 8015248: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 801524c: 01 90                        	str	r0, [sp, #4]
 801524e: 05 f1 08 00                  	add.w	r0, r5, #8
 8015252: 03 a9                        	add	r1, sp, #12
 8015254: 03 90                        	str	r0, [sp, #12]
 8015256: 68 46                        	mov	r0, sp
 8015258: 22 46                        	mov	r2, r4
 801525a: 01 f0 e6 fb                  	bl	#6092
 801525e: 05 f1 18 01                  	add.w	r1, r5, #24
 8015262: 03 91                        	str	r1, [sp, #12]
 8015264: 03 a9                        	add	r1, sp, #12
 8015266: 22 46                        	mov	r2, r4
 8015268: 21 e0                        	b	#66 <$t.186+0x106>
 801526a: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 801526e: 19 22                        	movs	r2, #25
 8015270: cb 68                        	ldr	r3, [r1, #12]
 8015272: 4d f6 47 71                  	movw	r1, #57159
 8015276: c0 f6 01 01                  	movt	r1, #2049
 801527a: 07 e0                        	b	#14 <$t.186+0xe4>
 801527c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8015280: 1c 22                        	movs	r2, #28
 8015282: cb 68                        	ldr	r3, [r1, #12]
 8015284: 4d f6 d2 61                  	movw	r1, #57042
 8015288: c0 f6 01 01                  	movt	r1, #2049
 801528c: 98 47                        	blx	r3
 801528e: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8015292: 00 20                        	movs	r0, #0
 8015294: 4d f6 f0 62                  	movw	r2, #57072
 8015298: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 801529c: 01 90                        	str	r0, [sp, #4]
 801529e: 05 f1 08 00                  	add.w	r0, r5, #8
 80152a2: 03 a9                        	add	r1, sp, #12
 80152a4: 03 90                        	str	r0, [sp, #12]
 80152a6: c0 f6 01 02                  	movt	r2, #2049
 80152aa: 68 46                        	mov	r0, sp
 80152ac: 00 94                        	str	r4, [sp]
 80152ae: 01 f0 bc fb                  	bl	#6008
 80152b2: 01 98                        	ldr	r0, [sp, #4]
 80152b4: 9d f8 08 40                  	ldrb.w	r4, [sp, #8]
 80152b8: 18 b3                        	cbz	r0, #70
 80152ba: 0c b1                        	cbz	r4, #2
 80152bc: 01 24                        	movs	r4, #1
 80152be: 1e e0                        	b	#60 <$t.186+0x156>
 80152c0: 01 28                        	cmp	r0, #1
 80152c2: 11 d1                        	bne	#34 <$t.186+0x140>
 80152c4: 9d f8 09 00                  	ldrb.w	r0, [sp, #9]
 80152c8: 70 b1                        	cbz	r0, #28
 80152ca: 00 99                        	ldr	r1, [sp]
 80152cc: 08 78                        	ldrb	r0, [r1]
 80152ce: 40 07                        	lsls	r0, r0, #29
 80152d0: 0a d4                        	bmi	#20 <$t.186+0x140>
 80152d2: 88 69                        	ldr	r0, [r1, #24]
 80152d4: 01 22                        	movs	r2, #1
 80152d6: c9 69                        	ldr	r1, [r1, #28]
 80152d8: 01 24                        	movs	r4, #1
 80152da: cb 68                        	ldr	r3, [r1, #12]
 80152dc: 4e f6 21 41                  	movw	r1, #60449
 80152e0: c0 f6 01 01                  	movt	r1, #2049
 80152e4: 98 47                        	blx	r3
 80152e6: 50 b9                        	cbnz	r0, #20
 80152e8: 00 99                        	ldr	r1, [sp]
 80152ea: 01 22                        	movs	r2, #1
 80152ec: 88 69                        	ldr	r0, [r1, #24]
 80152ee: c9 69                        	ldr	r1, [r1, #28]
 80152f0: cb 68                        	ldr	r3, [r1, #12]
 80152f2: 4f f2 69 61                  	movw	r1, #63081
 80152f6: c0 f6 01 01                  	movt	r1, #2049
 80152fa: 98 47                        	blx	r3
 80152fc: 04 46                        	mov	r4, r0
 80152fe: 8d f8 08 40                  	strb.w	r4, [sp, #8]
 8015302: 00 2c                        	cmp	r4, #0
 8015304: 18 bf                        	it	ne
 8015306: 01 24                        	movne	r4, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8015308: 20 46                        	mov	r0, r4
 801530a: 04 b0                        	add	sp, #16
 801530c: b0 bd                        	pop	{r4, r5, r7, pc}

0801530e _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h456fb8ef26ec2163:
 801530e: 00 68                        	ldr	r0, [r0]
 8015310: 01 f0 66 bc                  	b.w	#6348 <_ZN57_$LT$core..time..Duration$u20$as$u20$core..fmt..Debug$GT$3fmt17hdfe71d1866764a5cE+0x4>

08015314 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h5129294c4fe6a065:
 8015314: d0 b5                        	push	{r4, r6, r7, lr}
 8015316: 02 af                        	add	r7, sp, #8
 8015318: a2 b0                        	sub	sp, #136
 801531a: 0a 68                        	ldr	r2, [r1]
 801531c: 00 68                        	ldr	r0, [r0]
;                 if f.debug_lower_hex() {
 801531e: d3 06                        	lsls	r3, r2, #27
 8015320: 06 d4                        	bmi	#12 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h5129294c4fe6a065E+0x20>
;                 } else if f.debug_upper_hex() {
 8015322: 92 06                        	lsls	r2, r2, #26
 8015324: 20 d4                        	bmi	#64 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h5129294c4fe6a065E+0x58>
;                     fmt::Display::fmt(self, f)
 8015326: 22 b0                        	add	sp, #136
 8015328: bd e8 d0 40                  	pop.w	{r4, r6, r7, lr}
 801532c: 01 f0 06 be                  	b.w	#7180 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17ha1a36a310a39c053E+0x4>
 8015330: d0 e9 00 e3                  	ldrd	lr, r3, [r0]
 8015334: 0d f1 08 0c                  	add.w	r12, sp, #8
 8015338: 7f 20                        	movs	r0, #127
 801533a: 42 1c                        	adds	r2, r0, #1
 801533c: 36 d0                        	beq	#108 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h5129294c4fe6a065E+0x9c>
 801533e: 0e f0 0f 02                  	and	r2, lr, #15
 8015342: 02 f1 57 04                  	add.w	r4, r2, #87
 8015346: 0a 2a                        	cmp	r2, #10
 8015348: 38 bf                        	it	lo
 801534a: 02 f1 30 04                  	addlo.w	r4, r2, #48
 801534e: 4f ea 1e 12                  	lsr.w	r2, lr, #4
 8015352: 42 ea 03 7e                  	orr.w	lr, r2, r3, lsl #28
 8015356: 0c f8 00 40                  	strb.w	r4, [r12, r0]
 801535a: 4e ea 13 12                  	orr.w	r2, lr, r3, lsr #4
 801535e: 01 38                        	subs	r0, #1
 8015360: 1b 09                        	lsrs	r3, r3, #4
 8015362: 00 2a                        	cmp	r2, #0
 8015364: e9 d1                        	bne	#-46 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h5129294c4fe6a065E+0x2a>
 8015366: 1a e0                        	b	#52 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h5129294c4fe6a065E+0x8e>
 8015368: d0 e9 00 e3                  	ldrd	lr, r3, [r0]
 801536c: 0d f1 08 0c                  	add.w	r12, sp, #8
 8015370: 7f 20                        	movs	r0, #127
 8015372: 44 1c                        	adds	r4, r0, #1
 8015374: 1a d0                        	beq	#52 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h5129294c4fe6a065E+0x9c>
 8015376: 0e f0 0f 04                  	and	r4, lr, #15
 801537a: 04 f1 37 02                  	add.w	r2, r4, #55
 801537e: 0a 2c                        	cmp	r4, #10
 8015380: 38 bf                        	it	lo
 8015382: 04 f1 30 02                  	addlo.w	r2, r4, #48
 8015386: 0c f8 00 20                  	strb.w	r2, [r12, r0]
 801538a: 4f ea 1e 12                  	lsr.w	r2, lr, #4
 801538e: 42 ea 03 7e                  	orr.w	lr, r2, r3, lsl #28
 8015392: 01 38                        	subs	r0, #1
 8015394: 4e ea 13 12                  	orr.w	r2, lr, r3, lsr #4
 8015398: 1b 09                        	lsrs	r3, r3, #4
 801539a: 00 2a                        	cmp	r2, #0
 801539c: e9 d1                        	bne	#-46 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h5129294c4fe6a065E+0x62>
 801539e: 01 30                        	adds	r0, #1
 80153a0: 81 28                        	cmp	r0, #129
 80153a2: 04 d3                        	blo	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h5129294c4fe6a065E+0x9e>
 80153a4: 80 21                        	movs	r1, #128
 80153a6: 00 f0 36 fd                  	bl	#2668
 80153aa: fe de                        	trap
 80153ac: 00 20                        	movs	r0, #0
 80153ae: c0 f1 80 02                  	rsb.w	r2, r0, #128
 80153b2: 60 44                        	add	r0, r12
 80153b4: 02 23                        	movs	r3, #2
 80153b6: cd e9 00 02                  	strd	r0, r2, [sp]
 80153ba: 4e f6 b5 32                  	movw	r2, #60341
 80153be: 08 46                        	mov	r0, r1
 80153c0: c0 f6 01 02                  	movt	r2, #2049
 80153c4: 01 21                        	movs	r1, #1
 80153c6: 00 f0 b9 fb                  	bl	#1906
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 80153ca: 22 b0                        	add	sp, #136
 80153cc: d0 bd                        	pop	{r4, r6, r7, pc}

080153ce _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h50913c255d6c4324:
 80153ce: f0 b5                        	push	{r4, r5, r6, r7, lr}
 80153d0: 03 af                        	add	r7, sp, #12
 80153d2: 4d f8 04 8d                  	str	r8, [sp, #-4]!
 80153d6: 84 b0                        	sub	sp, #16
 80153d8: 0d 46                        	mov	r5, r1
 80153da: 04 68                        	ldr	r4, [r0]
 80153dc: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 80153e0: 01 22                        	movs	r2, #1
 80153e2: cb 68                        	ldr	r3, [r1, #12]
 80153e4: 4e f6 24 41                  	movw	r1, #60452
 80153e8: c0 f6 01 01                  	movt	r1, #2049
 80153ec: 4f f0 01 08                  	mov.w	r8, #1
 80153f0: 98 47                        	blx	r3
 80153f2: 01 95                        	str	r5, [sp, #4]
;             self.entry(&entry);
 80153f4: 4d f6 b8 35                  	movw	r5, #56248
 80153f8: 03 ae                        	add	r6, sp, #12
 80153fa: 00 21                        	movs	r1, #0
 80153fc: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8015400: c0 f6 01 05                  	movt	r5, #2049
 8015404: 01 a8                        	add	r0, sp, #4
 8015406: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 801540a: 31 46                        	mov	r1, r6
 801540c: 2a 46                        	mov	r2, r5
;         for entry in entries {
 801540e: 03 94                        	str	r4, [sp, #12]
;             self.entry(&entry);
 8015410: 01 f0 7b fb                  	bl	#5878
;         intrinsics::offset(self, count) as *mut T
 8015414: 61 1c                        	adds	r1, r4, #1
;         for entry in entries {
 8015416: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 8015418: 31 46                        	mov	r1, r6
 801541a: 2a 46                        	mov	r2, r5
 801541c: 01 f0 75 fb                  	bl	#5866
;         intrinsics::offset(self, count) as *mut T
 8015420: a1 1c                        	adds	r1, r4, #2
;         for entry in entries {
 8015422: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 8015424: 31 46                        	mov	r1, r6
 8015426: 2a 46                        	mov	r2, r5
 8015428: 01 f0 6f fb                  	bl	#5854
;         intrinsics::offset(self, count) as *mut T
 801542c: e1 1c                        	adds	r1, r4, #3
;         for entry in entries {
 801542e: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 8015430: 31 46                        	mov	r1, r6
 8015432: 2a 46                        	mov	r2, r5
 8015434: 01 f0 69 fb                  	bl	#5842
;         intrinsics::offset(self, count) as *mut T
 8015438: 21 1d                        	adds	r1, r4, #4
;         for entry in entries {
 801543a: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801543c: 31 46                        	mov	r1, r6
 801543e: 2a 46                        	mov	r2, r5
 8015440: 01 f0 63 fb                  	bl	#5830
 8015444: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 8015448: 20 b1                        	cbz	r0, #8
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801544a: 40 46                        	mov	r0, r8
 801544c: 04 b0                        	add	sp, #16
 801544e: 5d f8 04 8b                  	ldr	r8, [sp], #4
 8015452: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 8015454: 01 99                        	ldr	r1, [sp, #4]
 8015456: 01 22                        	movs	r2, #1
 8015458: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 801545c: cb 68                        	ldr	r3, [r1, #12]
 801545e: 4e f6 23 41                  	movw	r1, #60451
 8015462: c0 f6 01 01                  	movt	r1, #2049
 8015466: 98 47                        	blx	r3
 8015468: 80 46                        	mov	r8, r0
 801546a: 40 46                        	mov	r0, r8
 801546c: 04 b0                        	add	sp, #16
 801546e: 5d f8 04 8b                  	ldr	r8, [sp], #4
 8015472: f0 bd                        	pop	{r4, r5, r6, r7, pc}

08015474 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h69fc84b596c55a7d:
 8015474: fe de                        	trap

08015476 bluetooth_hci::types::connection_interval::ConnectionIntervalBuilder::build::h6125ce25b11c990f:
;     pub fn build(&self) -> Result<ConnectionInterval, ConnectionIntervalError> {
 8015476: f0 b5                        	push	{r4, r5, r6, r7, lr}
 8015478: 03 af                        	add	r7, sp, #12
 801547a: 2d e9 00 0f                  	push.w	{r8, r9, r10, r11}
 801547e: 8d b0                        	sub	sp, #52
 8015480: 0d 46                        	mov	r5, r1
 8015482: 04 46                        	mov	r4, r0
;         if self.interval.is_none()
 8015484: d1 e9 00 01                  	ldrd	r0, r1, [r1]
;         matches!(*self, Some(_))
 8015488: 80 f0 01 00                  	eor	r0, r0, #1
 801548c: 08 43                        	orrs	r0, r1
;         if self.interval.is_none()
 801548e: 0a d1                        	bne	#20 <_ZN13bluetooth_hci5types19connection_interval25ConnectionIntervalBuilder5build17h6125ce25b11c990fE+0x34>
;             || self.conn_latency.is_none()
 8015490: b5 f8 40 00                  	ldrh.w	r0, [r5, #64]
;         if self.interval.is_none()
 8015494: 01 28                        	cmp	r0, #1
;             || self.supervision_timeout.is_none()
 8015496: 02 bf                        	ittt	eq
 8015498: d5 e9 0a 01                  	ldrdeq	r0, r1, [r5, #40]
;         matches!(*self, Some(_))
 801549c: 80 f0 01 00                  	eoreq	r0, r0, #1
 80154a0: 50 ea 01 00                  	orrseq.w	r0, r0, r1
 80154a4: 08 d0                        	beq	#16 <_ZN13bluetooth_hci5types19connection_interval25ConnectionIntervalBuilder5build17h6125ce25b11c990fE+0x46>
 80154a6: 00 20                        	movs	r0, #0
;             return Err(ConnectionIntervalError::Incomplete);
 80154a8: 20 81                        	strh	r0, [r4, #8]
 80154aa: 01 21                        	movs	r1, #1
 80154ac: c4 e9 00 10                  	strd	r1, r0, [r4]
;     }
 80154b0: 0d b0                        	add	sp, #52
 80154b2: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 80154b6: f0 bd                        	pop	{r4, r5, r6, r7, pc}
;         let interval = self.interval.unwrap();
 80154b8: d5 e9 02 a6                  	ldrd	r10, r6, [r5, #8]
 80154bc: d5 e9 04 3c                  	ldrd	r3, r12, [r5, #16]
 80154c0: d5 e9 06 98                  	ldrd	r9, r8, [r5, #24]
;                     if *self < *other { Less }
 80154c4: 5a ea 06 00                  	orrs.w	r0, r10, r6
;         let interval = self.interval.unwrap();
 80154c8: d5 e9 08 be                  	ldrd	r11, lr, [r5, #32]
;             Equal => f(),
 80154cc: 11 d1                        	bne	#34 <_ZN13bluetooth_hci5types19connection_interval25ConnectionIntervalBuilder5build17h6125ce25b11c990fE+0x80>
 80154ce: 47 f2 e0 00                  	movw	r0, #28896
 80154d2: c0 f2 72 00                  	movt	r0, #114
 80154d6: 83 42                        	cmp	r3, r0
 80154d8: 0b d2                        	bhs	#22 <_ZN13bluetooth_hci5types19connection_interval25ConnectionIntervalBuilder5build17h6125ce25b11c990fE+0x80>
 80154da: 00 20                        	movs	r0, #0
 80154dc: 01 21                        	movs	r1, #1
;             return Err(ConnectionIntervalError::IntervalTooShort(interval.0));
 80154de: c4 e9 04 00                  	strd	r0, r0, [r4, #16]
 80154e2: a3 61                        	str	r3, [r4, #24]
 80154e4: 21 81                        	strh	r1, [r4, #8]
 80154e6: c4 e9 00 10                  	strd	r1, r0, [r4]
;     }
 80154ea: 0d b0                        	add	sp, #52
 80154ec: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 80154f0: f0 bd                        	pop	{r4, r5, r6, r7, pc}
;                     if *self < *other { Less }
 80154f2: b9 f1 04 01                  	subs.w	r1, r9, #4
 80154f6: 89 f0 04 02                  	eor	r2, r9, #4
 80154fa: 78 f1 00 01                  	sbcs	r1, r8, #0
 80154fe: 4f f0 00 00                  	mov.w	r0, #0
 8015502: 4f f0 00 01                  	mov.w	r1, #0
 8015506: 38 bf                        	it	lo
 8015508: 01 21                        	movlo	r1, #1
 801550a: 52 ea 08 02                  	orrs.w	r2, r2, r8
 801550e: 18 bf                        	it	ne
 8015510: 01 22                        	movne	r2, #1
 8015512: 00 29                        	cmp	r1, #0
 8015514: 18 bf                        	it	ne
 8015516: 4f f0 ff 32                  	movne.w	r2, #4294967295
;             Equal => f(),
 801551a: bb f1 00 0f                  	cmp.w	r11, #0
 801551e: 59 46                        	mov	r1, r11
 8015520: 18 bf                        	it	ne
 8015522: 01 21                        	movne	r1, #1
 8015524: 00 2a                        	cmp	r2, #0
 8015526: 18 bf                        	it	ne
 8015528: 11 46                        	movne	r1, r2
;         if interval.1 > INTERVAL_MAX {
 801552a: 01 29                        	cmp	r1, #1
 801552c: 07 d1                        	bne	#14 <_ZN13bluetooth_hci5types19connection_interval25ConnectionIntervalBuilder5build17h6125ce25b11c990fE+0xcc>
 801552e: 02 20                        	movs	r0, #2
;             return Err(ConnectionIntervalError::IntervalTooLong(interval.1));
 8015530: 20 81                        	strh	r0, [r4, #8]
 8015532: 00 20                        	movs	r0, #0
 8015534: c4 e9 04 98                  	strd	r9, r8, [r4, #16]
 8015538: c4 f8 18 b0                  	str.w	r11, [r4, #24]
 801553c: b5 e7                        	b	#-150 <_ZN13bluetooth_hci5types19connection_interval25ConnectionIntervalBuilder5build17h6125ce25b11c990fE+0x38>
;                     if *self < *other { Less }
 801553e: 8a ea 09 01                  	eor.w	r1, r10, r9
 8015542: 86 ea 08 02                  	eor.w	r2, r6, r8
 8015546: 11 43                        	orrs	r1, r2
 8015548: 18 bf                        	it	ne
 801554a: 01 21                        	movne	r1, #1
 801554c: ba eb 09 02                  	subs.w	r2, r10, r9
 8015550: 76 eb 08 02                  	sbcs.w	r2, r6, r8
 8015554: 38 bf                        	it	lo
 8015556: 01 20                        	movlo	r0, #1
 8015558: 00 28                        	cmp	r0, #0
 801555a: 18 bf                        	it	ne
 801555c: 4f f0 ff 31                  	movne.w	r1, #4294967295
 8015560: 29 b9                        	cbnz	r1, #10
 8015562: b3 eb 0b 01                  	subs.w	r1, r3, r11
 8015566: 18 bf                        	it	ne
 8015568: 01 21                        	movne	r1, #1
 801556a: 5b 45                        	cmp	r3, r11
 801556c: 0d d3                        	blo	#26 <_ZN13bluetooth_hci5types19connection_interval25ConnectionIntervalBuilder5build17h6125ce25b11c990fE+0x118>
; #[derive(Clone, Copy, PartialEq, Debug, Hash)]
 801556e: c8 b2                        	uxtb	r0, r1
;         if interval.0 > interval.1 {
 8015570: 01 28                        	cmp	r0, #1
 8015572: 0a d1                        	bne	#20 <_ZN13bluetooth_hci5types19connection_interval25ConnectionIntervalBuilder5build17h6125ce25b11c990fE+0x118>
 8015574: 03 20                        	movs	r0, #3
;             return Err(ConnectionIntervalError::IntervalInverted(
 8015576: 20 81                        	strh	r0, [r4, #8]
 8015578: 00 20                        	movs	r0, #0
 801557a: c4 e9 08 98                  	strd	r9, r8, [r4, #32]
 801557e: c4 f8 28 b0                  	str.w	r11, [r4, #40]
 8015582: c4 e9 04 a6                  	strd	r10, r6, [r4, #16]
 8015586: a3 61                        	str	r3, [r4, #24]
 8015588: 8f e7                        	b	#-226 <_ZN13bluetooth_hci5types19connection_interval25ConnectionIntervalBuilder5build17h6125ce25b11c990fE+0x38>
;         let conn_latency = self.conn_latency.unwrap();
 801558a: b5 f8 42 10                  	ldrh.w	r1, [r5, #66]
;         if conn_latency > LATENCY_MAX {
 801558e: 88 08                        	lsrs	r0, r1, #2
 8015590: 7c 28                        	cmp	r0, #124
 8015592: 04 d9                        	bls	#8 <_ZN13bluetooth_hci5types19connection_interval25ConnectionIntervalBuilder5build17h6125ce25b11c990fE+0x12c>
 8015594: 04 20                        	movs	r0, #4
;             return Err(ConnectionIntervalError::BadConnectionLatency(conn_latency));
 8015596: 61 81                        	strh	r1, [r4, #10]
 8015598: 20 81                        	strh	r0, [r4, #8]
 801559a: 00 20                        	movs	r0, #0
 801559c: 85 e7                        	b	#-246 <_ZN13bluetooth_hci5types19connection_interval25ConnectionIntervalBuilder5build17h6125ce25b11c990fE+0x38>
 801559e: 01 a8                        	add	r0, sp, #4
 80155a0: cd e9 04 3e                  	strd	r3, lr, [sp, #16]
 80155a4: 80 e8 42 10                  	stm.w	r0, {r1, r6, r12}
;         let computed_timeout_min = interval.1 * (1 + u32::from(conn_latency)) * 2;
 80155a8: 48 1c                        	adds	r0, r1, #1
 80155aa: 4f f0 00 0c                  	mov.w	r12, #0
 80155ae: a9 fb 00 12                  	umull	r1, r2, r9, r0
 80155b2: a8 fb 00 36                  	umull	r3, r6, r8, r0
 80155b6: 0c 91                        	str	r1, [sp, #48]
 80155b8: a0 fb 0b 01                  	umull	r0, r1, r0, r11
 80155bc: d2 18                        	adds	r2, r2, r3
 80155be: 0b 92                        	str	r2, [sp, #44]
 80155c0: 4c f1 00 02                  	adc	r2, r12, #0
 80155c4: 08 92                        	str	r2, [sp, #32]
 80155c6: 4c f6 00 22                  	movw	r2, #51712
 80155ca: c3 f6 9a 32                  	movt	r2, #15258
 80155ce: 00 23                        	movs	r3, #0
 80155d0: cd e9 09 01                  	strd	r0, r1, [sp, #36]
 80155d4: 06 f0 96 fe                  	bl	#27948
 80155d8: 0c 9a                        	ldr	r2, [sp, #48]
 80155da: 12 18                        	adds	r2, r2, r0
 80155dc: 0c 92                        	str	r2, [sp, #48]
 80155de: 0b 9a                        	ldr	r2, [sp, #44]
 80155e0: 4a 41                        	adcs	r2, r1
 80155e2: 0b 92                        	str	r2, [sp, #44]
 80155e4: 4f f0 00 02                  	mov.w	r2, #0
 80155e8: 42 f1 00 02                  	adc	r2, r2, #0
 80155ec: 00 2e                        	cmp	r6, #0
 80155ee: 18 bf                        	it	ne
 80155f0: 01 26                        	movne	r6, #1
 80155f2: 08 9b                        	ldr	r3, [sp, #32]
 80155f4: 33 43                        	orrs	r3, r6
 80155f6: 08 bf                        	it	eq
 80155f8: 00 2a                        	cmpeq	r2, #0
 80155fa: 34 d1                        	bne	#104 <_ZN13bluetooth_hci5types19connection_interval25ConnectionIntervalBuilder5build17h6125ce25b11c990fE+0x1f4>
 80155fc: 2a 6b                        	ldr	r2, [r5, #48]
 80155fe: 43 f2 00 66                  	movw	r6, #13824
 8015602: 07 92                        	str	r2, [sp, #28]
 8015604: cc f2 65 46                  	movt	r6, #50277
 8015608: 6a 6b                        	ldr	r2, [r5, #52]
 801560a: 08 92                        	str	r2, [sp, #32]
 801560c: aa 6b                        	ldr	r2, [r5, #56]
 801560e: 06 92                        	str	r2, [sp, #24]
 8015610: a0 fb 06 23                  	umull	r2, r3, r0, r6
 8015614: 18 1a                        	subs	r0, r3, r0
 8015616: 00 23                        	movs	r3, #0
 8015618: 01 fb 06 00                  	mla	r0, r1, r6, r0
 801561c: 09 99                        	ldr	r1, [sp, #36]
 801561e: 52 18                        	adds	r2, r2, r1
 8015620: 0a 99                        	ldr	r1, [sp, #40]
 8015622: 4f ea 42 06                  	lsl.w	r6, r2, #1
 8015626: 48 41                        	adcs	r0, r1
 8015628: 40 00                        	lsls	r0, r0, #1
 801562a: 40 ea d2 70                  	orr.w	r0, r0, r2, lsr #31
 801562e: 4c f6 00 22                  	movw	r2, #51712
 8015632: 00 f0 01 01                  	and	r1, r0, #1
 8015636: 40 f2 ff 10                  	movw	r0, #511
 801563a: 26 ea 00 00                  	bic.w	r0, r6, r0
 801563e: c3 f6 9a 32                  	movt	r2, #15258
 8015642: 06 f0 5f fe                  	bl	#27838
 8015646: 0c 9a                        	ldr	r2, [sp, #48]
 8015648: 4f f0 00 0c                  	mov.w	r12, #0
 801564c: 0b 9b                        	ldr	r3, [sp, #44]
 801564e: 92 18                        	adds	r2, r2, r2
 8015650: 5b 41                        	adcs	r3, r3
 8015652: 4c f1 00 05                  	adc	r5, r12, #0
 8015656: 12 18                        	adds	r2, r2, r0
 8015658: 4b 41                        	adcs	r3, r1
 801565a: 4c f1 00 01                  	adc	r1, r12, #0
 801565e: 00 2d                        	cmp	r5, #0
 8015660: 08 bf                        	it	eq
 8015662: 00 29                        	cmpeq	r1, #0
 8015664: 07 d0                        	beq	#14 <_ZN13bluetooth_hci5types19connection_interval25ConnectionIntervalBuilder5build17h6125ce25b11c990fE+0x204>
 8015666: 4e f6 25 40                  	movw	r0, #60453
 801566a: 2c 21                        	movs	r1, #44
 801566c: c0 f6 01 00                  	movt	r0, #2049
 8015670: 00 f0 f2 fe                  	bl	#3556
 8015674: fe de                        	trap
 8015676: 43 f2 00 61                  	movw	r1, #13824
;                     if *self < *other { Less }
 801567a: 82 f0 20 05                  	eor	r5, r2, #32
 801567e: cc f2 65 41                  	movt	r1, #50277
 8015682: 4f f0 00 0e                  	mov.w	lr, #0
 8015686: 00 fb 01 60                  	mla	r0, r0, r1, r6
 801568a: b2 f1 20 01                  	subs.w	r1, r2, #32
 801568e: 73 f1 00 01                  	sbcs	r1, r3, #0
 8015692: 4f f0 00 01                  	mov.w	r1, #0
 8015696: 38 bf                        	it	lo
 8015698: 01 21                        	movlo	r1, #1
 801569a: 1d 43                        	orrs	r5, r3
 801569c: 18 bf                        	it	ne
 801569e: 01 25                        	movne	r5, #1
 80156a0: 00 29                        	cmp	r1, #0
 80156a2: 18 bf                        	it	ne
 80156a4: 4f f0 ff 35                  	movne.w	r5, #4294967295
;             Equal => f(),
 80156a8: 00 28                        	cmp	r0, #0
 80156aa: 01 46                        	mov	r1, r0
 80156ac: 18 bf                        	it	ne
 80156ae: 01 21                        	movne	r1, #1
 80156b0: 00 2d                        	cmp	r5, #0
 80156b2: 18 bf                        	it	ne
 80156b4: 29 46                        	movne	r1, r5
;         if computed_timeout_min >= TIMEOUT_MAX {
 80156b6: 01 31                        	adds	r1, #1
 80156b8: 04 d0                        	beq	#8 <_ZN13bluetooth_hci5types19connection_interval25ConnectionIntervalBuilder5build17h6125ce25b11c990fE+0x252>
 80156ba: 07 21                        	movs	r1, #7
;             return Err(ConnectionIntervalError::ImpossibleSupervisionTimeout(
 80156bc: 21 81                        	strh	r1, [r4, #8]
 80156be: c4 e9 04 23                  	strd	r2, r3, [r4, #16]
 80156c2: 6f e0                        	b	#222 <_ZN13bluetooth_hci5types19connection_interval25ConnectionIntervalBuilder5build17h6125ce25b11c990fE+0x332>
 80156c4: 4e f2 00 16                  	movw	r6, #57600
 80156c8: c0 f2 f5 56                  	movt	r6, #1525
;     secs: u64,
 80156cc: 81 1b                        	subs	r1, r0, r6
 80156ce: 18 bf                        	it	ne
 80156d0: 01 21                        	movne	r1, #1
 80156d2: b0 42                        	cmp	r0, r6
 80156d4: 38 bf                        	it	lo
 80156d6: 4f f0 ff 31                  	movlo.w	r1, #4294967295
;                     if *self < *other { Less }
 80156da: 52 ea 03 05                  	orrs.w	r5, r2, r3
 80156de: 14 bf                        	ite	ne
 80156e0: 01 25                        	movne	r5, #1
;     secs: u64,
 80156e2: 0d 46                        	moveq	r5, r1
;         Ordering::Less | Ordering::Equal => v2,
 80156e4: 00 21                        	movs	r1, #0
 80156e6: 01 2d                        	cmp	r5, #1
 80156e8: 08 bf                        	it	eq
 80156ea: 19 46                        	moveq	r1, r3
 80156ec: 4f f0 00 03                  	mov.w	r3, #0
 80156f0: 08 bf                        	it	eq
 80156f2: 13 46                        	moveq	r3, r2
 80156f4: 07 9e                        	ldr	r6, [sp, #28]
 80156f6: dd f8 20 c0                  	ldr.w	r12, [sp, #32]
;                     if *self < *other { Less }
 80156fa: f2 1a                        	subs	r2, r6, r3
 80156fc: 7c eb 01 02                  	sbcs.w	r2, r12, r1
 8015700: 38 bf                        	it	lo
 8015702: 4f f0 01 0e                  	movlo.w	lr, #1
 8015706: 8c ea 01 02                  	eor.w	r2, r12, r1
 801570a: 0c 92                        	str	r2, [sp, #48]
 801570c: 86 ea 03 02                  	eor.w	r2, r6, r3
 8015710: 0c 9e                        	ldr	r6, [sp, #48]
 8015712: 4e f2 00 1c                  	movw	r12, #57600
 8015716: 32 43                        	orrs	r2, r6
 8015718: c0 f2 f5 5c                  	movt	r12, #1525
 801571c: 18 bf                        	it	ne
 801571e: 01 22                        	movne	r2, #1
 8015720: be f1 00 0f                  	cmp.w	lr, #0
 8015724: 18 bf                        	it	ne
 8015726: 4f f0 ff 32                  	movne.w	r2, #4294967295
;         Ordering::Less | Ordering::Equal => v2,
 801572a: 01 2d                        	cmp	r5, #1
 801572c: 08 bf                        	it	eq
 801572e: 84 46                        	moveq	r12, r0
 8015730: 05 9d                        	ldr	r5, [sp, #20]
;             Equal => f(),
 8015732: 32 b9                        	cbnz	r2, #12
 8015734: 06 98                        	ldr	r0, [sp, #24]
;                     if *self < *other { Less }
 8015736: b0 eb 0c 02                  	subs.w	r2, r0, r12
 801573a: 18 bf                        	it	ne
 801573c: 01 22                        	movne	r2, #1
 801573e: 60 45                        	cmp	r0, r12
 8015740: 25 d3                        	blo	#74 <_ZN13bluetooth_hci5types19connection_interval25ConnectionIntervalBuilder5build17h6125ce25b11c990fE+0x31c>
; #[derive(Clone, Copy, PartialEq, Debug, Hash)]
 8015742: d0 b2                        	uxtb	r0, r2
;         if supervision_timeout <= timeout_min {
 8015744: 01 28                        	cmp	r0, #1
 8015746: 22 d1                        	bne	#68 <_ZN13bluetooth_hci5types19connection_interval25ConnectionIntervalBuilder5build17h6125ce25b11c990fE+0x31c>
 8015748: 07 9e                        	ldr	r6, [sp, #28]
 801574a: 00 20                        	movs	r0, #0
 801574c: 08 9b                        	ldr	r3, [sp, #32]
;                     if *self < *other { Less }
 801574e: b6 f1 20 01                  	subs.w	r1, r6, #32
 8015752: 73 f1 00 01                  	sbcs	r1, r3, #0
 8015756: 38 bf                        	it	lo
 8015758: 01 20                        	movlo	r0, #1
 801575a: 86 f0 20 01                  	eor	r1, r6, #32
 801575e: 19 43                        	orrs	r1, r3
 8015760: 18 bf                        	it	ne
 8015762: 01 21                        	movne	r1, #1
 8015764: 00 28                        	cmp	r0, #0
 8015766: 18 bf                        	it	ne
 8015768: 4f f0 ff 31                  	movne.w	r1, #4294967295
 801576c: 06 9a                        	ldr	r2, [sp, #24]
;             Equal => f(),
 801576e: 00 2a                        	cmp	r2, #0
 8015770: 10 46                        	mov	r0, r2
 8015772: 18 bf                        	it	ne
 8015774: 01 20                        	movne	r0, #1
 8015776: 00 29                        	cmp	r1, #0
 8015778: 18 bf                        	it	ne
 801577a: 08 46                        	movne	r0, r1
;         if supervision_timeout > TIMEOUT_MAX {
 801577c: 01 28                        	cmp	r0, #1
 801577e: 14 d1                        	bne	#40 <_ZN13bluetooth_hci5types19connection_interval25ConnectionIntervalBuilder5build17h6125ce25b11c990fE+0x338>
 8015780: 06 20                        	movs	r0, #6
;             return Err(ConnectionIntervalError::SupervisionTimeoutTooLong(
 8015782: 20 81                        	strh	r0, [r4, #8]
 8015784: 00 20                        	movs	r0, #0
 8015786: c4 e9 04 63                  	strd	r6, r3, [r4, #16]
 801578a: a2 61                        	str	r2, [r4, #24]
 801578c: 8d e6                        	b	#-742 <_ZN13bluetooth_hci5types19connection_interval25ConnectionIntervalBuilder5build17h6125ce25b11c990fE+0x38>
 801578e: 05 20                        	movs	r0, #5
;             return Err(ConnectionIntervalError::SupervisionTimeoutTooShort(
 8015790: 20 81                        	strh	r0, [r4, #8]
 8015792: 07 98                        	ldr	r0, [sp, #28]
 8015794: c4 e9 08 31                  	strd	r3, r1, [r4, #32]
 8015798: 20 61                        	str	r0, [r4, #16]
 801579a: 08 98                        	ldr	r0, [sp, #32]
 801579c: 60 61                        	str	r0, [r4, #20]
 801579e: c4 f8 28 c0                  	str.w	r12, [r4, #40]
 80157a2: 06 98                        	ldr	r0, [sp, #24]
 80157a4: a0 61                        	str	r0, [r4, #24]
 80157a6: 00 20                        	movs	r0, #0
 80157a8: 7f e6                        	b	#-770 <_ZN13bluetooth_hci5types19connection_interval25ConnectionIntervalBuilder5build17h6125ce25b11c990fE+0x38>
;         Ok(ConnectionInterval {
 80157aa: 01 98                        	ldr	r0, [sp, #4]
 80157ac: 00 21                        	movs	r1, #0
 80157ae: 20 87                        	strh	r0, [r4, #56]
 80157b0: 02 98                        	ldr	r0, [sp, #8]
 80157b2: c4 e9 0a 63                  	strd	r6, r3, [r4, #40]
 80157b6: e0 60                        	str	r0, [r4, #12]
 80157b8: 04 98                        	ldr	r0, [sp, #16]
 80157ba: 20 61                        	str	r0, [r4, #16]
 80157bc: 03 98                        	ldr	r0, [sp, #12]
 80157be: 22 63                        	str	r2, [r4, #48]
 80157c0: c4 f8 08 a0                  	str.w	r10, [r4, #8]
 80157c4: c4 e9 05 09                  	strd	r0, r9, [r4, #20]
 80157c8: 00 20                        	movs	r0, #0
 80157ca: c4 e9 07 8b                  	strd	r8, r11, [r4, #28]
 80157ce: 65 62                        	str	r5, [r4, #36]
 80157d0: c4 e9 00 10                  	strd	r1, r0, [r4]
;     }
 80157d4: 0d b0                        	add	sp, #52
 80157d6: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 80157da: f0 bd                        	pop	{r4, r5, r6, r7, pc}

080157dc _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h8404066d9b20f5c8:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 80157dc: 02 68                        	ldr	r2, [r0]
; #[derive(Copy, Clone, Debug, PartialEq)]
 80157de: 4e f6 aa 0c                  	movw	r12, #59562
 80157e2: d1 e9 06 03                  	ldrd	r0, r3, [r1, #24]
 80157e6: 4e f6 ad 01                  	movw	r1, #59565
 80157ea: db 68                        	ldr	r3, [r3, #12]
 80157ec: c0 f6 01 01                  	movt	r1, #2049
 80157f0: 12 78                        	ldrb	r2, [r2]
 80157f2: c0 f6 01 0c                  	movt	r12, #2049
 80157f6: 01 2a                        	cmp	r2, #1
 80157f8: 4f f0 03 02                  	mov.w	r2, #3
 80157fc: 08 bf                        	it	eq
 80157fe: 61 46                        	moveq	r1, r12
 8015800: 18 47                        	bx	r3

08015802 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h019c6f7d0d5375c9:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8015802: f0 b5                        	push	{r4, r5, r6, r7, lr}
 8015804: 03 af                        	add	r7, sp, #12
 8015806: 4d f8 04 bd                  	str	r11, [sp, #-4]!
 801580a: 86 b0                        	sub	sp, #24
 801580c: 0c 46                        	mov	r4, r1
 801580e: 05 68                        	ldr	r5, [r0]
 8015810: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8015814: 00 22                        	movs	r2, #0
 8015816: cb 68                        	ldr	r3, [r1, #12]
 8015818: 4e f6 b4 41                  	movw	r1, #60596
 801581c: c0 f6 01 01                  	movt	r1, #2049
 8015820: 00 26                        	movs	r6, #0
 8015822: 98 47                        	blx	r3
 8015824: 8d f8 0c 00                  	strb.w	r0, [sp, #12]
 8015828: 01 20                        	movs	r0, #1
 801582a: 01 94                        	str	r4, [sp, #4]
;                     builder.field(&$name);
 801582c: 4d f6 f0 64                  	movw	r4, #57072
 8015830: 8d f8 0d 00                  	strb.w	r0, [sp, #13]
;                 let ($(ref $name,)+) = *self;
 8015834: 05 f1 10 00                  	add.w	r0, r5, #16
 8015838: 05 90                        	str	r0, [sp, #20]
;                     builder.field(&$name);
 801583a: c0 f6 01 04                  	movt	r4, #2049
 801583e: 01 a8                        	add	r0, sp, #4
 8015840: 04 a9                        	add	r1, sp, #16
 8015842: 22 46                        	mov	r2, r4
 8015844: 02 96                        	str	r6, [sp, #8]
;                 let ($(ref $name,)+) = *self;
 8015846: 04 95                        	str	r5, [sp, #16]
;                     builder.field(&$name);
 8015848: 01 f0 ef f8                  	bl	#4574
 801584c: 05 a9                        	add	r1, sp, #20
 801584e: 22 46                        	mov	r2, r4
 8015850: 01 f0 eb f8                  	bl	#4566
 8015854: 02 98                        	ldr	r0, [sp, #8]
 8015856: 9d f8 0c 40                  	ldrb.w	r4, [sp, #12]
 801585a: 18 b3                        	cbz	r0, #70
 801585c: 0c b1                        	cbz	r4, #2
 801585e: 01 24                        	movs	r4, #1
 8015860: 1e e0                        	b	#60 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h019c6f7d0d5375c9E+0xa2>
 8015862: 01 28                        	cmp	r0, #1
 8015864: 11 d1                        	bne	#34 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h019c6f7d0d5375c9E+0x8c>
 8015866: 9d f8 0d 00                  	ldrb.w	r0, [sp, #13]
 801586a: 70 b1                        	cbz	r0, #28
 801586c: 01 99                        	ldr	r1, [sp, #4]
 801586e: 08 78                        	ldrb	r0, [r1]
 8015870: 40 07                        	lsls	r0, r0, #29
 8015872: 0a d4                        	bmi	#20 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h019c6f7d0d5375c9E+0x8c>
 8015874: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8015878: 01 22                        	movs	r2, #1
 801587a: cb 68                        	ldr	r3, [r1, #12]
 801587c: 4e f6 21 41                  	movw	r1, #60449
 8015880: c0 f6 01 01                  	movt	r1, #2049
 8015884: 01 24                        	movs	r4, #1
 8015886: 98 47                        	blx	r3
 8015888: 50 b9                        	cbnz	r0, #20
 801588a: 01 99                        	ldr	r1, [sp, #4]
 801588c: 01 22                        	movs	r2, #1
 801588e: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8015892: cb 68                        	ldr	r3, [r1, #12]
 8015894: 4f f2 69 61                  	movw	r1, #63081
 8015898: c0 f6 01 01                  	movt	r1, #2049
 801589c: 98 47                        	blx	r3
 801589e: 04 46                        	mov	r4, r0
 80158a0: 8d f8 0c 40                  	strb.w	r4, [sp, #12]
 80158a4: 00 2c                        	cmp	r4, #0
 80158a6: 18 bf                        	it	ne
 80158a8: 01 24                        	movne	r4, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 80158aa: 20 46                        	mov	r0, r4
 80158ac: 06 b0                        	add	sp, #24
 80158ae: 5d f8 04 bb                  	ldr	r11, [sp], #4
 80158b2: f0 bd                        	pop	{r4, r5, r6, r7, pc}

080158b4 _$LT$bluetooth_hci..ConnectionHandle$u20$as$u20$core..fmt..Debug$GT$::fmt::h3f324084bd069dfa:
; #[derive(Clone, Copy, Debug, PartialEq)]
 80158b4: b0 b5                        	push	{r4, r5, r7, lr}
 80158b6: 02 af                        	add	r7, sp, #8
 80158b8: 84 b0                        	sub	sp, #16
 80158ba: 0c 46                        	mov	r4, r1
 80158bc: 05 46                        	mov	r5, r0
 80158be: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 80158c2: 10 22                        	movs	r2, #16
 80158c4: cb 68                        	ldr	r3, [r1, #12]
 80158c6: 4c f6 fc 71                  	movw	r1, #53244
 80158ca: c0 f6 01 01                  	movt	r1, #2049
 80158ce: 98 47                        	blx	r3
 80158d0: 4d f6 48 42                  	movw	r2, #56392
 80158d4: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 80158d8: 00 20                        	movs	r0, #0
 80158da: 03 a9                        	add	r1, sp, #12
 80158dc: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 80158e0: c0 f6 01 02                  	movt	r2, #2049
 80158e4: 01 90                        	str	r0, [sp, #4]
 80158e6: 68 46                        	mov	r0, sp
 80158e8: 00 94                        	str	r4, [sp]
; pub struct ConnectionHandle(pub u16);
 80158ea: 03 95                        	str	r5, [sp, #12]
; #[derive(Clone, Copy, Debug, PartialEq)]
 80158ec: 01 f0 9d f8                  	bl	#4410
 80158f0: 01 98                        	ldr	r0, [sp, #4]
 80158f2: 9d f8 08 40                  	ldrb.w	r4, [sp, #8]
 80158f6: 18 b3                        	cbz	r0, #70
 80158f8: 0c b1                        	cbz	r4, #2
 80158fa: 01 24                        	movs	r4, #1
 80158fc: 1e e0                        	b	#60 <_ZN68_$LT$bluetooth_hci..ConnectionHandle$u20$as$u20$core..fmt..Debug$GT$3fmt17h3f324084bd069dfaE+0x8c>
 80158fe: 01 28                        	cmp	r0, #1
 8015900: 11 d1                        	bne	#34 <_ZN68_$LT$bluetooth_hci..ConnectionHandle$u20$as$u20$core..fmt..Debug$GT$3fmt17h3f324084bd069dfaE+0x76>
 8015902: 9d f8 09 00                  	ldrb.w	r0, [sp, #9]
 8015906: 70 b1                        	cbz	r0, #28
 8015908: 00 99                        	ldr	r1, [sp]
 801590a: 08 78                        	ldrb	r0, [r1]
 801590c: 40 07                        	lsls	r0, r0, #29
 801590e: 0a d4                        	bmi	#20 <_ZN68_$LT$bluetooth_hci..ConnectionHandle$u20$as$u20$core..fmt..Debug$GT$3fmt17h3f324084bd069dfaE+0x76>
 8015910: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8015914: 01 22                        	movs	r2, #1
 8015916: cb 68                        	ldr	r3, [r1, #12]
 8015918: 4e f6 21 41                  	movw	r1, #60449
 801591c: c0 f6 01 01                  	movt	r1, #2049
 8015920: 01 24                        	movs	r4, #1
 8015922: 98 47                        	blx	r3
 8015924: 50 b9                        	cbnz	r0, #20
 8015926: 00 99                        	ldr	r1, [sp]
 8015928: 01 22                        	movs	r2, #1
 801592a: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 801592e: cb 68                        	ldr	r3, [r1, #12]
 8015930: 4f f2 69 61                  	movw	r1, #63081
 8015934: c0 f6 01 01                  	movt	r1, #2049
 8015938: 98 47                        	blx	r3
 801593a: 04 46                        	mov	r4, r0
 801593c: 8d f8 08 40                  	strb.w	r4, [sp, #8]
 8015940: 00 2c                        	cmp	r4, #0
 8015942: 18 bf                        	it	ne
 8015944: 01 24                        	movne	r4, #1
 8015946: 20 46                        	mov	r0, r4
 8015948: 04 b0                        	add	sp, #16
 801594a: b0 bd                        	pop	{r4, r5, r7, pc}

0801594c _$LT$bluetooth_hci..BdAddrType$u20$as$u20$core..fmt..Debug$GT$::fmt::hfc5dafcccc52a084:
; #[derive(Copy, Clone, Debug, PartialEq)]
 801594c: b0 b5                        	push	{r4, r5, r7, lr}
 801594e: 02 af                        	add	r7, sp, #8
 8015950: 84 b0                        	sub	sp, #16
 8015952: 04 46                        	mov	r4, r0
 8015954: 0d 46                        	mov	r5, r1
 8015956: 14 f8 01 0b                  	ldrb	r0, [r4], #1
 801595a: 01 28                        	cmp	r0, #1
 801595c: 20 d1                        	bne	#64 <_ZN62_$LT$bluetooth_hci..BdAddrType$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc5dafcccc52a084E+0x58>
 801595e: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8015962: 06 22                        	movs	r2, #6
 8015964: cb 68                        	ldr	r3, [r1, #12]
 8015966: 4d f6 cc 41                  	movw	r1, #56524
 801596a: c0 f6 01 01                  	movt	r1, #2049
 801596e: 98 47                        	blx	r3
 8015970: 4d f6 d4 42                  	movw	r2, #56532
 8015974: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8015978: 00 20                        	movs	r0, #0
 801597a: 03 a9                        	add	r1, sp, #12
 801597c: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8015980: c0 f6 01 02                  	movt	r2, #2049
 8015984: 01 90                        	str	r0, [sp, #4]
 8015986: 68 46                        	mov	r0, sp
 8015988: 00 95                        	str	r5, [sp]
;     Random(BdAddr),
 801598a: 03 94                        	str	r4, [sp, #12]
; #[derive(Copy, Clone, Debug, PartialEq)]
 801598c: 01 f0 4d f8                  	bl	#4250
 8015990: 01 98                        	ldr	r0, [sp, #4]
 8015992: 9d f8 08 40                  	ldrb.w	r4, [sp, #8]
 8015996: 00 28                        	cmp	r0, #0
 8015998: 42 d0                        	beq	#132 <_ZN62_$LT$bluetooth_hci..BdAddrType$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc5dafcccc52a084E+0xd8>
 801599a: 04 b3                        	cbz	r4, #64
 801599c: 01 24                        	movs	r4, #1
 801599e: 3d e0                        	b	#122 <_ZN62_$LT$bluetooth_hci..BdAddrType$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc5dafcccc52a084E+0xd4>
 80159a0: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 80159a4: 06 22                        	movs	r2, #6
 80159a6: cb 68                        	ldr	r3, [r1, #12]
 80159a8: 4d f6 e4 41                  	movw	r1, #56548
 80159ac: c0 f6 01 01                  	movt	r1, #2049
 80159b0: 98 47                        	blx	r3
 80159b2: 4d f6 d4 42                  	movw	r2, #56532
 80159b6: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 80159ba: 00 20                        	movs	r0, #0
 80159bc: 03 a9                        	add	r1, sp, #12
 80159be: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 80159c2: c0 f6 01 02                  	movt	r2, #2049
 80159c6: 01 90                        	str	r0, [sp, #4]
 80159c8: 68 46                        	mov	r0, sp
 80159ca: 00 95                        	str	r5, [sp]
;     Public(BdAddr),
 80159cc: 03 94                        	str	r4, [sp, #12]
; #[derive(Copy, Clone, Debug, PartialEq)]
 80159ce: 01 f0 2c f8                  	bl	#4184
 80159d2: 01 98                        	ldr	r0, [sp, #4]
 80159d4: 9d f8 08 40                  	ldrb.w	r4, [sp, #8]
 80159d8: 10 b3                        	cbz	r0, #68
 80159da: 00 2c                        	cmp	r4, #0
 80159dc: de d1                        	bne	#-68 <_ZN62_$LT$bluetooth_hci..BdAddrType$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc5dafcccc52a084E+0x54>
 80159de: 01 28                        	cmp	r0, #1
 80159e0: 11 d1                        	bne	#34 <_ZN62_$LT$bluetooth_hci..BdAddrType$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc5dafcccc52a084E+0xbe>
 80159e2: 9d f8 09 00                  	ldrb.w	r0, [sp, #9]
 80159e6: 70 b1                        	cbz	r0, #28
 80159e8: 00 99                        	ldr	r1, [sp]
 80159ea: 08 78                        	ldrb	r0, [r1]
 80159ec: 40 07                        	lsls	r0, r0, #29
 80159ee: 0a d4                        	bmi	#20 <_ZN62_$LT$bluetooth_hci..BdAddrType$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc5dafcccc52a084E+0xbe>
 80159f0: 88 69                        	ldr	r0, [r1, #24]
 80159f2: 01 22                        	movs	r2, #1
 80159f4: c9 69                        	ldr	r1, [r1, #28]
 80159f6: 01 24                        	movs	r4, #1
 80159f8: cb 68                        	ldr	r3, [r1, #12]
 80159fa: 4e f6 21 41                  	movw	r1, #60449
 80159fe: c0 f6 01 01                  	movt	r1, #2049
 8015a02: 98 47                        	blx	r3
 8015a04: 50 b9                        	cbnz	r0, #20
 8015a06: 00 99                        	ldr	r1, [sp]
 8015a08: 01 22                        	movs	r2, #1
 8015a0a: 88 69                        	ldr	r0, [r1, #24]
 8015a0c: c9 69                        	ldr	r1, [r1, #28]
 8015a0e: cb 68                        	ldr	r3, [r1, #12]
 8015a10: 4f f2 69 61                  	movw	r1, #63081
 8015a14: c0 f6 01 01                  	movt	r1, #2049
 8015a18: 98 47                        	blx	r3
 8015a1a: 04 46                        	mov	r4, r0
 8015a1c: 8d f8 08 40                  	strb.w	r4, [sp, #8]
 8015a20: 00 2c                        	cmp	r4, #0
 8015a22: 18 bf                        	it	ne
 8015a24: 01 24                        	movne	r4, #1
 8015a26: 20 46                        	mov	r0, r4
 8015a28: 04 b0                        	add	sp, #16
 8015a2a: b0 bd                        	pop	{r4, r5, r7, pc}

08015a2c core::ops::function::FnOnce::call_once::h49a5efb3be54073c:
 8015a2c: 00 68                        	ldr	r0, [r0]
 8015a2e: fe e7                        	b	#-4 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hae72f8ec025f0cfcE+0x2>

08015a30 core::fmt::num::imp::_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$::fmt::hae72f8ec025f0cfc:
 8015a30: f0 b5                        	push	{r4, r5, r6, r7, lr}
 8015a32: 03 af                        	add	r7, sp, #12
 8015a34: 2d e9 00 0f                  	push.w	{r8, r9, r10, r11}
 8015a38: 8d b0                        	sub	sp, #52
 8015a3a: 04 68                        	ldr	r4, [r0]
 8015a3c: 42 f2 10 70                  	movw	r0, #10000
 8015a40: 48 f2 1f 59                  	movw	r9, #34079
 8015a44: 0e 46                        	mov	r6, r1
 8015a46: 84 42                        	cmp	r4, r0
 8015a48: 4e f6 ed 20                  	movw	r0, #60141
 8015a4c: 4f f6 9c 7c                  	movw	r12, #65436
 8015a50: c5 f2 eb 19                  	movt	r9, #20971
 8015a54: c0 f6 01 00                  	movt	r0, #2049
 8015a58: 3d d3                        	blo	#122 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hae72f8ec025f0cfcE+0xaa>
 8015a5a: 41 f2 59 7e                  	movw	lr, #5977
 8015a5e: 4d f6 f0 0a                  	movw	r10, #55536
 8015a62: 4e f2 ff 08                  	movw	r8, #57599
 8015a66: 0d f1 0c 0b                  	add.w	r11, sp, #12
 8015a6a: 00 22                        	movs	r2, #0
 8015a6c: cd f2 b7 1e                  	movt	lr, #53687
 8015a70: cf f6 ff 7a                  	movt	r10, #65535
 8015a74: c0 f2 f5 58                  	movt	r8, #1525
 8015a78: 02 96                        	str	r6, [sp, #8]
 8015a7a: a4 fb 0e 35                  	umull	r3, r5, r4, lr
 8015a7e: 0b eb 02 01                  	add.w	r1, r11, r2
 8015a82: 04 3a                        	subs	r2, #4
 8015a84: 44 45                        	cmp	r4, r8
 8015a86: 4f ea 55 33                  	lsr.w	r3, r5, #13
 8015a8a: 03 fb 0a 45                  	mla	r5, r3, r10, r4
 8015a8e: 1c 46                        	mov	r4, r3
 8015a90: ae b2                        	uxth	r6, r5
 8015a92: a6 fb 09 6c                  	umull	r6, r12, r6, r9
 8015a96: 4f ea 5c 16                  	lsr.w	r6, r12, #5
 8015a9a: 4f f6 9c 7c                  	movw	r12, #65436
 8015a9e: 06 fb 0c 55                  	mla	r5, r6, r12, r5
 8015aa2: 30 f8 16 60                  	ldrh.w	r6, [r0, r6, lsl #1]
 8015aa6: a1 f8 23 60                  	strh.w	r6, [r1, #35]
 8015aaa: ad b2                        	uxth	r5, r5
 8015aac: 30 f8 15 50                  	ldrh.w	r5, [r0, r5, lsl #1]
 8015ab0: a1 f8 25 50                  	strh.w	r5, [r1, #37]
 8015ab4: e1 d8                        	bhi	#-62 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hae72f8ec025f0cfcE+0x4e>
 8015ab6: 02 9e                        	ldr	r6, [sp, #8]
 8015ab8: 02 f1 27 0e                  	add.w	lr, r2, #39
 8015abc: 1c 46                        	mov	r4, r3
 8015abe: 63 2c                        	cmp	r4, #99
 8015ac0: 0d dc                        	bgt	#26 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hae72f8ec025f0cfcE+0xb2>
 8015ac2: 21 46                        	mov	r1, r4
 8015ac4: 0a 29                        	cmp	r1, #10
 8015ac6: 1a db                        	blt	#52 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hae72f8ec025f0cfcE+0xd2>
 8015ac8: 30 f8 11 00                  	ldrh.w	r0, [r0, r1, lsl #1]
 8015acc: ae f1 02 02                  	sub.w	r2, lr, #2
 8015ad0: 03 a9                        	add	r1, sp, #12
 8015ad2: 88 52                        	strh	r0, [r1, r2]
 8015ad4: 19 e0                        	b	#50 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hae72f8ec025f0cfcE+0xde>
 8015ad6: 4f f0 27 0e                  	mov.w	lr, #39
 8015ada: 63 2c                        	cmp	r4, #99
 8015adc: f1 dd                        	ble	#-30 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hae72f8ec025f0cfcE+0x96>
 8015ade: a1 b2                        	uxth	r1, r4
 8015ae0: ae f1 02 0e                  	sub.w	lr, lr, #2
 8015ae4: a1 fb 09 12                  	umull	r1, r2, r1, r9
 8015ae8: 03 ab                        	add	r3, sp, #12
 8015aea: 51 09                        	lsrs	r1, r2, #5
 8015aec: 01 fb 0c 42                  	mla	r2, r1, r12, r4
 8015af0: 92 b2                        	uxth	r2, r2
 8015af2: 30 f8 12 20                  	ldrh.w	r2, [r0, r2, lsl #1]
 8015af6: 23 f8 0e 20                  	strh.w	r2, [r3, lr]
 8015afa: 0a 29                        	cmp	r1, #10
 8015afc: e4 da                        	bge	#-56 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hae72f8ec025f0cfcE+0x9c>
 8015afe: ae f1 01 02                  	sub.w	r2, lr, #1
 8015b02: 01 f1 30 00                  	add.w	r0, r1, #48
 8015b06: 03 a9                        	add	r1, sp, #12
 8015b08: 88 54                        	strb	r0, [r1, r2]
 8015b0a: 03 a9                        	add	r1, sp, #12
 8015b0c: c2 f1 27 00                  	rsb.w	r0, r2, #39
 8015b10: 11 44                        	add	r1, r2
 8015b12: 4e f6 b4 42                  	movw	r2, #60596
 8015b16: cd e9 00 10                  	strd	r1, r0, [sp]
 8015b1a: c0 f6 01 02                  	movt	r2, #2049
 8015b1e: 30 46                        	mov	r0, r6
 8015b20: 01 21                        	movs	r1, #1
 8015b22: 00 23                        	movs	r3, #0
 8015b24: 00 f0 0a f8                  	bl	#20
 8015b28: 0d b0                        	add	sp, #52
 8015b2a: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 8015b2e: f0 bd                        	pop	{r4, r5, r6, r7, pc}

08015b30 core::panicking::panic_fmt::haee0062454acdc4f:
 8015b30: 80 b5                        	push	{r7, lr}
 8015b32: 6f 46                        	mov	r7, sp
 8015b34: 01 f0 30 fc                  	bl	#6240
 8015b38: fe de                        	trap

08015b3a core::ptr::drop_in_place::h03565e102d1fb9b1:
 8015b3a: 70 47                        	bx	lr

08015b3c core::fmt::Formatter::pad_integral::h30da6d28dec7939e:
 8015b3c: f0 b5                        	push	{r4, r5, r6, r7, lr}
 8015b3e: 03 af                        	add	r7, sp, #12
 8015b40: 2d e9 00 0f                  	push.w	{r8, r9, r10, r11}
 8015b44: 83 b0                        	sub	sp, #12
 8015b46: d7 e9 02 64                  	ldrd	r6, r4, [r7, #8]
 8015b4a: 9a 46                        	mov	r10, r3
 8015b4c: 83 46                        	mov	r11, r0
 8015b4e: e1 b1                        	cbz	r1, #56
 8015b50: db f8 00 e0                  	ldr.w	lr, [r11]
 8015b54: 2b 21                        	movs	r1, #43
 8015b56: 1e f0 01 00                  	ands	r0, lr, #1
 8015b5a: 08 bf                        	it	eq
 8015b5c: 4f f4 88 11                  	moveq.w	r1, #1114112
 8015b60: 00 eb 04 08                  	add.w	r8, r0, r4
 8015b64: 5f ea 4e 70                  	lsls.w	r0, lr, #29
 8015b68: 17 d5                        	bpl	#46 <_ZN4core3fmt9Formatter12pad_integral17h30da6d28dec7939eE+0x62>
 8015b6a: ba f1 00 0f                  	cmp.w	r10, #0
 8015b6e: 1c d0                        	beq	#56 <_ZN4core3fmt9Formatter12pad_integral17h30da6d28dec7939eE+0x72>
 8015b70: aa f1 01 00                  	sub.w	r0, r10, #1
 8015b74: 0a f0 03 0c                  	and	r12, r10, #3
 8015b78: 03 28                        	cmp	r0, #3
 8015b7a: 19 d2                        	bhs	#50 <_ZN4core3fmt9Formatter12pad_integral17h30da6d28dec7939eE+0x78>
 8015b7c: 4f f0 00 09                  	mov.w	r9, #0
 8015b80: 13 46                        	mov	r3, r2
 8015b82: bc f1 00 0f                  	cmp.w	r12, #0
 8015b86: 42 d1                        	bne	#132 <_ZN4core3fmt9Formatter12pad_integral17h30da6d28dec7939eE+0xd6>
 8015b88: 5c e0                        	b	#184 <_ZN4core3fmt9Formatter12pad_integral17h30da6d28dec7939eE+0x10c>
 8015b8a: db f8 00 e0                  	ldr.w	lr, [r11]
 8015b8e: 04 f1 01 08                  	add.w	r8, r4, #1
 8015b92: 2d 21                        	movs	r1, #45
 8015b94: 5f ea 4e 70                  	lsls.w	r0, lr, #29
 8015b98: e7 d4                        	bmi	#-50 <_ZN4core3fmt9Formatter12pad_integral17h30da6d28dec7939eE+0x32>
 8015b9a: 00 22                        	movs	r2, #0
 8015b9c: 4f f0 00 0a                  	mov.w	r10, #0
 8015ba0: db f8 08 00                  	ldr.w	r0, [r11, #8]
 8015ba4: 01 28                        	cmp	r0, #1
 8015ba6: 55 d0                        	beq	#170 <_ZN4core3fmt9Formatter12pad_integral17h30da6d28dec7939eE+0x11c>
 8015ba8: 6e e0                        	b	#220 <$t.202+0xc>
 8015baa: 4f f0 00 09                  	mov.w	r9, #0
 8015bae: 49 e0                        	b	#146 <_ZN4core3fmt9Formatter12pad_integral17h30da6d28dec7939eE+0x10c>
 8015bb0: ac eb 0a 05                  	sub.w	r5, r12, r10
 8015bb4: 02 91                        	str	r1, [sp, #8]
 8015bb6: 4f f0 00 09                  	mov.w	r9, #0
 8015bba: 11 46                        	mov	r1, r2
 8015bbc: 13 46                        	mov	r3, r2
 8015bbe: cd e9 00 46                  	strd	r4, r6, [sp]
 8015bc2: 1a 78                        	ldrb	r2, [r3]
 8015bc4: 58 78                        	ldrb	r0, [r3, #1]
 8015bc6: 02 f0 c0 02                  	and	r2, r2, #192
 8015bca: 9e 78                        	ldrb	r6, [r3, #2]
 8015bcc: dc 78                        	ldrb	r4, [r3, #3]
 8015bce: 80 2a                        	cmp	r2, #128
 8015bd0: 00 f0 c0 00                  	and	r0, r0, #192
 8015bd4: 08 bf                        	it	eq
 8015bd6: 09 f1 01 09                  	addeq.w	r9, r9, #1
 8015bda: 80 28                        	cmp	r0, #128
 8015bdc: 06 f0 c0 00                  	and	r0, r6, #192
 8015be0: 08 bf                        	it	eq
 8015be2: 09 f1 01 09                  	addeq.w	r9, r9, #1
 8015be6: 80 28                        	cmp	r0, #128
 8015be8: 04 f0 c0 00                  	and	r0, r4, #192
 8015bec: 08 bf                        	it	eq
 8015bee: 09 f1 01 09                  	addeq.w	r9, r9, #1
 8015bf2: 80 28                        	cmp	r0, #128
 8015bf4: 08 bf                        	it	eq
 8015bf6: 09 f1 01 09                  	addeq.w	r9, r9, #1
 8015bfa: 04 33                        	adds	r3, #4
 8015bfc: 04 35                        	adds	r5, #4
 8015bfe: e0 d1                        	bne	#-64 <_ZN4core3fmt9Formatter12pad_integral17h30da6d28dec7939eE+0x8a>
 8015c00: 0a 46                        	mov	r2, r1
 8015c02: dd e9 00 46                  	ldrd	r4, r6, [sp]
 8015c06: 02 99                        	ldr	r1, [sp, #8]
 8015c08: bc f1 00 0f                  	cmp.w	r12, #0
 8015c0c: 1a d0                        	beq	#52 <_ZN4core3fmt9Formatter12pad_integral17h30da6d28dec7939eE+0x10c>
 8015c0e: 18 78                        	ldrb	r0, [r3]
 8015c10: 00 f0 c0 00                  	and	r0, r0, #192
 8015c14: 80 28                        	cmp	r0, #128
 8015c16: 08 bf                        	it	eq
 8015c18: 09 f1 01 09                  	addeq.w	r9, r9, #1
 8015c1c: bc f1 01 0f                  	cmp.w	r12, #1
 8015c20: 10 d0                        	beq	#32 <_ZN4core3fmt9Formatter12pad_integral17h30da6d28dec7939eE+0x10c>
 8015c22: 58 78                        	ldrb	r0, [r3, #1]
 8015c24: 00 f0 c0 00                  	and	r0, r0, #192
 8015c28: 80 28                        	cmp	r0, #128
 8015c2a: 08 bf                        	it	eq
 8015c2c: 09 f1 01 09                  	addeq.w	r9, r9, #1
 8015c30: bc f1 02 0f                  	cmp.w	r12, #2
 8015c34: 06 d0                        	beq	#12 <_ZN4core3fmt9Formatter12pad_integral17h30da6d28dec7939eE+0x10c>
 8015c36: 98 78                        	ldrb	r0, [r3, #2]
 8015c38: 00 f0 c0 00                  	and	r0, r0, #192
 8015c3c: 80 28                        	cmp	r0, #128
 8015c3e: 08 bf                        	it	eq
 8015c40: 09 f1 01 09                  	addeq.w	r9, r9, #1
 8015c44: 08 eb 0a 00                  	add.w	r0, r8, r10
 8015c48: a0 eb 09 08                  	sub.w	r8, r0, r9
 8015c4c: db f8 08 00                  	ldr.w	r0, [r11, #8]
 8015c50: 01 28                        	cmp	r0, #1
 8015c52: 19 d1                        	bne	#50 <$t.202+0xc>
 8015c54: db f8 0c 90                  	ldr.w	r9, [r11, #12]
 8015c58: c1 45                        	cmp	r9, r8
 8015c5a: 15 d9                        	bls	#42 <$t.202+0xc>
 8015c5c: 5f ea 0e 70                  	lsls.w	r0, lr, #28
 8015c60: 2a d4                        	bmi	#84 <$t.202+0x3c>
 8015c62: 01 92                        	str	r2, [sp, #4]
 8015c64: a9 eb 08 00                  	sub.w	r0, r9, r8
 8015c68: 9b f8 20 20                  	ldrb.w	r2, [r11, #32]
 8015c6c: 00 25                        	movs	r5, #0
 8015c6e: 81 46                        	mov	r9, r0
 8015c70: 03 2a                        	cmp	r2, #3
 8015c72: 08 bf                        	it	eq
 8015c74: 01 22                        	moveq	r2, #1
 8015c76: 02 91                        	str	r1, [sp, #8]
 8015c78: df e8 02 f0                  	tbb	[pc, r2]

08015c7c $d.201:
 8015c7c:	45 02 41 02	.word	0x02410245

08015c80 $t.202:
 8015c80: 4f f0 00 09                  	mov.w	r9, #0
 8015c84: 05 46                        	mov	r5, r0
 8015c86: 3e e0                        	b	#124 <$t.204+0x12>
 8015c88: 58 46                        	mov	r0, r11
 8015c8a: 53 46                        	mov	r3, r10
 8015c8c: 00 f0 a1 f8                  	bl	#322
 8015c90: 28 b1                        	cbz	r0, #10
 8015c92: 01 25                        	movs	r5, #1
 8015c94: 28 46                        	mov	r0, r5
 8015c96: 03 b0                        	add	sp, #12
 8015c98: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 8015c9c: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 8015c9e: db f8 1c 10                  	ldr.w	r1, [r11, #28]
 8015ca2: 22 46                        	mov	r2, r4
 8015ca4: db f8 18 00                  	ldr.w	r0, [r11, #24]
 8015ca8: cb 68                        	ldr	r3, [r1, #12]
 8015caa: 31 46                        	mov	r1, r6
 8015cac: 03 b0                        	add	sp, #12
 8015cae: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 8015cb2: bd e8 f0 40                  	pop.w	{r4, r5, r6, r7, lr}
 8015cb6: 18 47                        	bx	r3
 8015cb8: db f8 04 00                  	ldr.w	r0, [r11, #4]
 8015cbc: 01 25                        	movs	r5, #1
 8015cbe: 02 90                        	str	r0, [sp, #8]
 8015cc0: 30 20                        	movs	r0, #48
 8015cc2: 9b f8 20 30                  	ldrb.w	r3, [r11, #32]
 8015cc6: 01 93                        	str	r3, [sp, #4]
 8015cc8: 53 46                        	mov	r3, r10
 8015cca: cb f8 04 00                  	str.w	r0, [r11, #4]
 8015cce: 58 46                        	mov	r0, r11
 8015cd0: 8b f8 20 50                  	strb.w	r5, [r11, #32]
 8015cd4: 00 f0 7d f8                  	bl	#250
 8015cd8: 00 28                        	cmp	r0, #0
 8015cda: db d1                        	bne	#-74 <$t.202+0x18>
 8015cdc: 9b f8 20 20                  	ldrb.w	r2, [r11, #32]
 8015ce0: a9 eb 08 01                  	sub.w	r1, r9, r8
 8015ce4: 00 20                        	movs	r0, #0
 8015ce6: b1 46                        	mov	r9, r6
 8015ce8: 03 2a                        	cmp	r2, #3
 8015cea: 08 bf                        	it	eq
 8015cec: 01 22                        	moveq	r2, #1
 8015cee: 0d 46                        	mov	r5, r1
 8015cf0: df e8 02 f0                  	tbb	[pc, r2]

08015cf4 $d.203:
 8015cf4:	38 02 35 02	.word	0x02350238

08015cf8 $t.204:
 8015cf8: 00 25                        	movs	r5, #0
 8015cfa: 08 46                        	mov	r0, r1
 8015cfc: 32 e0                        	b	#100 <$t.204+0x70>
 8015cfe: 41 1c                        	adds	r1, r0, #1
 8015d00: 45 08                        	lsrs	r5, r0, #1
 8015d02: 4f ea 51 09                  	lsr.w	r9, r1, #1
 8015d06: 01 35                        	adds	r5, #1
 8015d08: 01 3d                        	subs	r5, #1
 8015d0a: 08 d0                        	beq	#16 <$t.204+0x2a>
 8015d0c: db e9 06 02                  	ldrd	r0, r2, [r11, #24]
 8015d10: db f8 04 10                  	ldr.w	r1, [r11, #4]
 8015d14: 12 69                        	ldr	r2, [r2, #16]
 8015d16: 90 47                        	blx	r2
 8015d18: 00 28                        	cmp	r0, #0
 8015d1a: f5 d0                        	beq	#-22 <$t.204+0x14>
 8015d1c: b9 e7                        	b	#-142 <$t.202+0x16>
 8015d1e: dd e9 01 21                  	ldrd	r2, r1, [sp, #4]
 8015d22: 58 46                        	mov	r0, r11
 8015d24: 53 46                        	mov	r3, r10
 8015d26: db f8 04 80                  	ldr.w	r8, [r11, #4]
 8015d2a: 00 f0 52 f8                  	bl	#164
 8015d2e: 00 28                        	cmp	r0, #0
 8015d30: af d1                        	bne	#-162 <$t.202+0x16>
 8015d32: db e9 06 01                  	ldrd	r0, r1, [r11, #24]
 8015d36: 22 46                        	mov	r2, r4
 8015d38: cb 68                        	ldr	r3, [r1, #12]
 8015d3a: 31 46                        	mov	r1, r6
 8015d3c: 98 47                        	blx	r3
 8015d3e: 00 28                        	cmp	r0, #0
 8015d40: a7 d1                        	bne	#-178 <$t.202+0x16>
 8015d42: db e9 06 a4                  	ldrd	r10, r4, [r11, #24]
 8015d46: 09 f1 01 06                  	add.w	r6, r9, #1
 8015d4a: 01 25                        	movs	r5, #1
 8015d4c: 01 3e                        	subs	r6, #1
 8015d4e: 2e d0                        	beq	#92 <$t.204+0xba>
 8015d50: 22 69                        	ldr	r2, [r4, #16]
 8015d52: 50 46                        	mov	r0, r10
 8015d54: 41 46                        	mov	r1, r8
 8015d56: 90 47                        	blx	r2
 8015d58: 00 28                        	cmp	r0, #0
 8015d5a: f7 d0                        	beq	#-18 <$t.204+0x58>
 8015d5c: 9a e7                        	b	#-204 <$t.202+0x18>
 8015d5e: 48 08                        	lsrs	r0, r1, #1
 8015d60: 01 31                        	adds	r1, #1
 8015d62: 4d 08                        	lsrs	r5, r1, #1
 8015d64: 46 1c                        	adds	r6, r0, #1
 8015d66: 01 3e                        	subs	r6, #1
 8015d68: 08 d0                        	beq	#16 <$t.204+0x88>
 8015d6a: db e9 06 02                  	ldrd	r0, r2, [r11, #24]
 8015d6e: db f8 04 10                  	ldr.w	r1, [r11, #4]
 8015d72: 12 69                        	ldr	r2, [r2, #16]
 8015d74: 90 47                        	blx	r2
 8015d76: 00 28                        	cmp	r0, #0
 8015d78: f5 d0                        	beq	#-22 <$t.204+0x72>
 8015d7a: 8a e7                        	b	#-236 <$t.202+0x16>
 8015d7c: db e9 06 01                  	ldrd	r0, r1, [r11, #24]
 8015d80: 22 46                        	mov	r2, r4
 8015d82: cb 68                        	ldr	r3, [r1, #12]
 8015d84: 49 46                        	mov	r1, r9
 8015d86: db f8 04 80                  	ldr.w	r8, [r11, #4]
 8015d8a: 98 47                        	blx	r3
 8015d8c: 00 28                        	cmp	r0, #0
 8015d8e: 7f f4 80 af                  	bne.w	#-256 <$t.202+0x16>
 8015d92: db e9 06 9a                  	ldrd	r9, r10, [r11, #24]
 8015d96: 6e 1c                        	adds	r6, r5, #1
 8015d98: 01 25                        	movs	r5, #1
 8015d9a: 01 3e                        	subs	r6, #1
 8015d9c: 0d d0                        	beq	#26 <$t.204+0xc6>
 8015d9e: da f8 10 20                  	ldr.w	r2, [r10, #16]
 8015da2: 48 46                        	mov	r0, r9
 8015da4: 41 46                        	mov	r1, r8
 8015da6: 90 47                        	blx	r2
 8015da8: 00 28                        	cmp	r0, #0
 8015daa: f6 d0                        	beq	#-20 <$t.204+0xa6>
 8015dac: 72 e7                        	b	#-284 <$t.202+0x18>
 8015dae: 00 25                        	movs	r5, #0
 8015db0: 28 46                        	mov	r0, r5
 8015db2: 03 b0                        	add	sp, #12
 8015db4: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 8015db8: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 8015dba: 01 98                        	ldr	r0, [sp, #4]
 8015dbc: 00 25                        	movs	r5, #0
 8015dbe: 8b f8 20 00                  	strb.w	r0, [r11, #32]
 8015dc2: 02 98                        	ldr	r0, [sp, #8]
 8015dc4: cb f8 04 00                  	str.w	r0, [r11, #4]
 8015dc8: 28 46                        	mov	r0, r5
 8015dca: 03 b0                        	add	sp, #12
 8015dcc: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 8015dd0: f0 bd                        	pop	{r4, r5, r6, r7, pc}

08015dd2 core::fmt::Formatter::pad_integral::write_prefix::h84ed2b59e6b045d2:
 8015dd2: f0 b5                        	push	{r4, r5, r6, r7, lr}
 8015dd4: 03 af                        	add	r7, sp, #12
 8015dd6: 4d f8 04 bd                  	str	r11, [sp, #-4]!
 8015dda: 1c 46                        	mov	r4, r3
 8015ddc: 15 46                        	mov	r5, r2
 8015dde: 06 46                        	mov	r6, r0
 8015de0: b1 f5 88 1f                  	cmp.w	r1, #1114112
 8015de4: 08 d0                        	beq	#16 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h84ed2b59e6b045d2E+0x2a>
 8015de6: d6 e9 06 02                  	ldrd	r0, r2, [r6, #24]
 8015dea: 12 69                        	ldr	r2, [r2, #16]
 8015dec: 90 47                        	blx	r2
 8015dee: 18 b1                        	cbz	r0, #6
 8015df0: 01 20                        	movs	r0, #1
 8015df2: 5d f8 04 bb                  	ldr	r11, [sp], #4
 8015df6: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 8015df8: 4d b1                        	cbz	r5, #18
 8015dfa: d6 e9 06 01                  	ldrd	r0, r1, [r6, #24]
 8015dfe: 22 46                        	mov	r2, r4
 8015e00: cb 68                        	ldr	r3, [r1, #12]
 8015e02: 29 46                        	mov	r1, r5
 8015e04: 5d f8 04 bb                  	ldr	r11, [sp], #4
 8015e08: bd e8 f0 40                  	pop.w	{r4, r5, r6, r7, lr}
 8015e0c: 18 47                        	bx	r3
 8015e0e: 00 20                        	movs	r0, #0
 8015e10: 5d f8 04 bb                  	ldr	r11, [sp], #4
 8015e14: f0 bd                        	pop	{r4, r5, r6, r7, pc}

08015e16 core::slice::slice_index_len_fail::h4b16adae02418e97:
 8015e16: 80 b5                        	push	{r7, lr}
 8015e18: 6f 46                        	mov	r7, sp
 8015e1a: ff f7 89 fe                  	bl	#-750
 8015e1e: fe de                        	trap

08015e20 core::fmt::Formatter::pad::hccdbdeacee9fe4fa:
 8015e20: f0 b5                        	push	{r4, r5, r6, r7, lr}
 8015e22: 03 af                        	add	r7, sp, #12
 8015e24: 2d e9 00 0f                  	push.w	{r8, r9, r10, r11}
 8015e28: 83 b0                        	sub	sp, #12
 8015e2a: 0d 46                        	mov	r5, r1
 8015e2c: 81 68                        	ldr	r1, [r0, #8]
 8015e2e: 82 46                        	mov	r10, r0
 8015e30: 00 69                        	ldr	r0, [r0, #16]
 8015e32: 91 46                        	mov	r9, r2
 8015e34: 01 29                        	cmp	r1, #1
 8015e36: 12 d1                        	bne	#36 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0x42>
 8015e38: 01 28                        	cmp	r0, #1
 8015e3a: 12 d0                        	beq	#36 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0x46>
 8015e3c: b9 f1 00 0f                  	cmp.w	r9, #0
 8015e40: 78 d0                        	beq	#240 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0x118>
 8015e42: a9 f1 01 01                  	sub.w	r1, r9, #1
 8015e46: 09 f0 03 0c                  	and	r12, r9, #3
 8015e4a: 03 29                        	cmp	r1, #3
 8015e4c: 80 f0 86 80                  	bhs.w	#268 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0x140>
 8015e50: 00 21                        	movs	r1, #0
 8015e52: 2a 46                        	mov	r2, r5
 8015e54: bc f1 00 0f                  	cmp.w	r12, #0
 8015e58: 40 f0 a4 80                  	bne.w	#328 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0x188>
 8015e5c: ba e0                        	b	#372 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0x1b8>
 8015e5e: 01 28                        	cmp	r0, #1
 8015e60: 6f d1                        	bne	#222 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0x126>
 8015e62: b9 f1 00 0f                  	cmp.w	r9, #0
 8015e66: 5d d0                        	beq	#186 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0x108>
 8015e68: da f8 14 00                  	ldr.w	r0, [r10, #20]
 8015e6c: 05 eb 09 0e                  	add.w	lr, r5, r9
 8015e70: 00 22                        	movs	r2, #0
 8015e72: 01 91                        	str	r1, [sp, #4]
 8015e74: 43 1c                        	adds	r3, r0, #1
 8015e76: 28 46                        	mov	r0, r5
 8015e78: 02 95                        	str	r5, [sp, #8]
 8015e7a: 04 46                        	mov	r4, r0
 8015e7c: 14 f9 01 1b                  	ldrsb	r1, [r4], #1
 8015e80: b1 f1 ff 3f                  	cmp.w	r1, #4294967295
 8015e84: ce b2                        	uxtb	r6, r1
 8015e86: 2f dc                        	bgt	#94 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0xcc>
 8015e88: 74 45                        	cmp	r4, lr
 8015e8a: 1a d0                        	beq	#52 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0xa6>
 8015e8c: 41 78                        	ldrb	r1, [r0, #1]
 8015e8e: 84 1c                        	adds	r4, r0, #2
 8015e90: 01 f0 3f 0c                  	and	r12, r1, #63
 8015e94: 20 46                        	mov	r0, r4
 8015e96: 06 f0 1f 0b                  	and	r11, r6, #31
 8015e9a: df 2e                        	cmp	r6, #223
 8015e9c: 18 d9                        	bls	#48 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0xb4>
 8015e9e: 70 45                        	cmp	r0, lr
 8015ea0: 19 d0                        	beq	#50 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0xba>
 8015ea2: 10 f8 01 1b                  	ldrb	r1, [r0], #1
 8015ea6: 01 f0 3f 08                  	and	r8, r1, #63
 8015eaa: 04 46                        	mov	r4, r0
 8015eac: 48 ea 8c 1c                  	orr.w	r12, r8, r12, lsl #6
 8015eb0: f0 2e                        	cmp	r6, #240
 8015eb2: 17 d3                        	blo	#46 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0xc8>
 8015eb4: 70 45                        	cmp	r0, lr
 8015eb6: 21 d0                        	beq	#66 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0xe0>
 8015eb8: 10 f8 01 1b                  	ldrb	r1, [r0], #1
 8015ebc: 01 f0 3f 06                  	and	r6, r1, #63
 8015ec0: 1e e0                        	b	#60 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0xe4>
 8015ec2: 4f f0 00 0c                  	mov.w	r12, #0
 8015ec6: 70 46                        	mov	r0, lr
 8015ec8: 06 f0 1f 0b                  	and	r11, r6, #31
 8015ecc: df 2e                        	cmp	r6, #223
 8015ece: e6 d8                        	bhi	#-52 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0x82>
 8015ed0: 4c ea 8b 16                  	orr.w	r6, r12, r11, lsl #6
 8015ed4: 08 e0                        	b	#16 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0xcc>
 8015ed6: 4f f0 00 08                  	mov.w	r8, #0
 8015eda: 70 46                        	mov	r0, lr
 8015edc: 48 ea 8c 1c                  	orr.w	r12, r8, r12, lsl #6
 8015ee0: f0 2e                        	cmp	r6, #240
 8015ee2: e7 d2                        	bhs	#-50 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0x98>
 8015ee4: 4c ea 0b 36                  	orr.w	r6, r12, r11, lsl #12
 8015ee8: 20 46                        	mov	r0, r4
 8015eea: 01 3b                        	subs	r3, #1
 8015eec: 00 f0 87 80                  	beq.w	#270 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0x1e2>
 8015ef0: 52 1b                        	subs	r2, r2, r5
 8015ef2: 86 45                        	cmp	lr, r0
 8015ef4: 02 44                        	add	r2, r0
 8015ef6: 05 46                        	mov	r5, r0
 8015ef8: bf d1                        	bne	#-130 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0x5e>
 8015efa: 0b e0                        	b	#22 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0xf8>
 8015efc: 00 26                        	movs	r6, #0
 8015efe: 20 46                        	mov	r0, r4
 8015f00: 4f f4 e0 11                  	mov.w	r1, #1835008
 8015f04: 01 ea 8b 41                  	and.w	r1, r1, r11, lsl #18
 8015f08: 41 ea 8c 11                  	orr.w	r1, r1, r12, lsl #6
 8015f0c: 0e 44                        	add	r6, r1
 8015f0e: b6 f5 88 1f                  	cmp.w	r6, #1114112
 8015f12: ea d1                        	bne	#-44 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0xce>
 8015f14: 4a 46                        	mov	r2, r9
 8015f16: dd e9 01 15                  	ldrd	r1, r5, [sp, #4]
 8015f1a: 01 29                        	cmp	r1, #1
 8015f1c: 05 d0                        	beq	#10 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0x10e>
 8015f1e: da e9 06 01                  	ldrd	r0, r1, [r10, #24]
 8015f22: 13 e0                        	b	#38 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0x130>
 8015f24: 00 22                        	movs	r2, #0
 8015f26: 01 29                        	cmp	r1, #1
 8015f28: f9 d1                        	bne	#-14 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0x102>
 8015f2a: 91 46                        	mov	r9, r2
 8015f2c: b9 f1 00 0f                  	cmp.w	r9, #0
 8015f30: 7f f4 87 af                  	bne.w	#-242 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0x26>
 8015f34: 00 21                        	movs	r1, #0
 8015f36: da f8 0c e0                  	ldr.w	lr, [r10, #12]
 8015f3a: a9 eb 01 01                  	sub.w	r1, r9, r1
 8015f3e: 71 45                        	cmp	r1, lr
 8015f40: 4e d3                        	blo	#156 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0x1c4>
 8015f42: da f8 1c 10                  	ldr.w	r1, [r10, #28]
 8015f46: 4a 46                        	mov	r2, r9
 8015f48: da f8 18 00                  	ldr.w	r0, [r10, #24]
 8015f4c: cb 68                        	ldr	r3, [r1, #12]
 8015f4e: 29 46                        	mov	r1, r5
 8015f50: 03 b0                        	add	sp, #12
 8015f52: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 8015f56: bd e8 f0 40                  	pop.w	{r4, r5, r6, r7, lr}
 8015f5a: 18 47                        	bx	r3
 8015f5c: ac eb 09 03                  	sub.w	r3, r12, r9
 8015f60: 00 21                        	movs	r1, #0
 8015f62: ae 46                        	mov	lr, r5
 8015f64: 2a 46                        	mov	r2, r5
 8015f66: 16 78                        	ldrb	r6, [r2]
 8015f68: 55 78                        	ldrb	r5, [r2, #1]
 8015f6a: 06 f0 c0 06                  	and	r6, r6, #192
 8015f6e: 94 78                        	ldrb	r4, [r2, #2]
 8015f70: d0 78                        	ldrb	r0, [r2, #3]
 8015f72: 80 2e                        	cmp	r6, #128
 8015f74: 05 f0 c0 06                  	and	r6, r5, #192
 8015f78: 08 bf                        	it	eq
 8015f7a: 01 31                        	addeq	r1, #1
 8015f7c: 80 2e                        	cmp	r6, #128
 8015f7e: 04 f0 c0 06                  	and	r6, r4, #192
 8015f82: 08 bf                        	it	eq
 8015f84: 01 31                        	addeq	r1, #1
 8015f86: 80 2e                        	cmp	r6, #128
 8015f88: 00 f0 c0 00                  	and	r0, r0, #192
 8015f8c: 08 bf                        	it	eq
 8015f8e: 01 31                        	addeq	r1, #1
 8015f90: 80 28                        	cmp	r0, #128
 8015f92: 08 bf                        	it	eq
 8015f94: 01 31                        	addeq	r1, #1
 8015f96: 04 32                        	adds	r2, #4
 8015f98: 04 33                        	adds	r3, #4
 8015f9a: e4 d1                        	bne	#-56 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0x14a>
 8015f9c: 75 46                        	mov	r5, lr
 8015f9e: bc f1 00 0f                  	cmp.w	r12, #0
 8015fa2: 17 d0                        	beq	#46 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0x1b8>
 8015fa4: 10 78                        	ldrb	r0, [r2]
 8015fa6: 00 f0 c0 00                  	and	r0, r0, #192
 8015faa: 80 28                        	cmp	r0, #128
 8015fac: 08 bf                        	it	eq
 8015fae: 01 31                        	addeq	r1, #1
 8015fb0: bc f1 01 0f                  	cmp.w	r12, #1
 8015fb4: 0e d0                        	beq	#28 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0x1b8>
 8015fb6: 50 78                        	ldrb	r0, [r2, #1]
 8015fb8: 00 f0 c0 00                  	and	r0, r0, #192
 8015fbc: 80 28                        	cmp	r0, #128
 8015fbe: 08 bf                        	it	eq
 8015fc0: 01 31                        	addeq	r1, #1
 8015fc2: bc f1 02 0f                  	cmp.w	r12, #2
 8015fc6: 05 d0                        	beq	#10 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0x1b8>
 8015fc8: 90 78                        	ldrb	r0, [r2, #2]
 8015fca: 00 f0 c0 00                  	and	r0, r0, #192
 8015fce: 80 28                        	cmp	r0, #128
 8015fd0: 08 bf                        	it	eq
 8015fd2: 01 31                        	addeq	r1, #1
 8015fd4: da f8 0c e0                  	ldr.w	lr, [r10, #12]
 8015fd8: a9 eb 01 01                  	sub.w	r1, r9, r1
 8015fdc: 71 45                        	cmp	r1, lr
 8015fde: b0 d2                        	bhs	#-160 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0x126>
 8015fe0: b9 f1 00 0f                  	cmp.w	r9, #0
 8015fe4: 14 d0                        	beq	#40 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0x1f4>
 8015fe6: a9 f1 01 01                  	sub.w	r1, r9, #1
 8015fea: 09 f0 03 0c                  	and	r12, r9, #3
 8015fee: 03 29                        	cmp	r1, #3
 8015ff0: 10 d2                        	bhs	#32 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0x1f8>
 8015ff2: 00 21                        	movs	r1, #0
 8015ff4: 2b 46                        	mov	r3, r5
 8015ff6: bc f1 00 0f                  	cmp.w	r12, #0
 8015ffa: 2f d1                        	bne	#94 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0x240>
 8015ffc: 46 e0                        	b	#140 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0x270>
 8015ffe: dd e9 01 15                  	ldrd	r1, r5, [sp, #4]
 8016002: b6 f5 88 1f                  	cmp.w	r6, #1114112
 8016006: 54 d1                        	bne	#168 <$t.209+0xc>
 8016008: 4a 46                        	mov	r2, r9
 801600a: 01 29                        	cmp	r1, #1
 801600c: 8d d0                        	beq	#-230 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0x10e>
 801600e: 86 e7                        	b	#-244 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0x102>
 8016010: 00 21                        	movs	r1, #0
 8016012: 3b e0                        	b	#118 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0x270>
 8016014: ac eb 09 06                  	sub.w	r6, r12, r9
 8016018: 00 21                        	movs	r1, #0
 801601a: a8 46                        	mov	r8, r5
 801601c: 2b 46                        	mov	r3, r5
 801601e: 1d 78                        	ldrb	r5, [r3]
 8016020: 5c 78                        	ldrb	r4, [r3, #1]
 8016022: 9a 78                        	ldrb	r2, [r3, #2]
 8016024: 05 f0 c0 05                  	and	r5, r5, #192
 8016028: d8 78                        	ldrb	r0, [r3, #3]
 801602a: 80 2d                        	cmp	r5, #128
 801602c: 04 f0 c0 04                  	and	r4, r4, #192
 8016030: 08 bf                        	it	eq
 8016032: 01 31                        	addeq	r1, #1
 8016034: 80 2c                        	cmp	r4, #128
 8016036: 02 f0 c0 02                  	and	r2, r2, #192
 801603a: 08 bf                        	it	eq
 801603c: 01 31                        	addeq	r1, #1
 801603e: 80 2a                        	cmp	r2, #128
 8016040: 00 f0 c0 00                  	and	r0, r0, #192
 8016044: 08 bf                        	it	eq
 8016046: 01 31                        	addeq	r1, #1
 8016048: 80 28                        	cmp	r0, #128
 801604a: 08 bf                        	it	eq
 801604c: 01 31                        	addeq	r1, #1
 801604e: 04 33                        	adds	r3, #4
 8016050: 04 36                        	adds	r6, #4
 8016052: e4 d1                        	bne	#-56 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0x202>
 8016054: 45 46                        	mov	r5, r8
 8016056: bc f1 00 0f                  	cmp.w	r12, #0
 801605a: 17 d0                        	beq	#46 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0x270>
 801605c: 18 78                        	ldrb	r0, [r3]
 801605e: 00 f0 c0 00                  	and	r0, r0, #192
 8016062: 80 28                        	cmp	r0, #128
 8016064: 08 bf                        	it	eq
 8016066: 01 31                        	addeq	r1, #1
 8016068: bc f1 01 0f                  	cmp.w	r12, #1
 801606c: 0e d0                        	beq	#28 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0x270>
 801606e: 58 78                        	ldrb	r0, [r3, #1]
 8016070: 00 f0 c0 00                  	and	r0, r0, #192
 8016074: 80 28                        	cmp	r0, #128
 8016076: 08 bf                        	it	eq
 8016078: 01 31                        	addeq	r1, #1
 801607a: bc f1 02 0f                  	cmp.w	r12, #2
 801607e: 05 d0                        	beq	#10 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0x270>
 8016080: 98 78                        	ldrb	r0, [r3, #2]
 8016082: 00 f0 c0 00                  	and	r0, r0, #192
 8016086: 80 28                        	cmp	r0, #128
 8016088: 08 bf                        	it	eq
 801608a: 01 31                        	addeq	r1, #1
 801608c: 9a f8 20 00                  	ldrb.w	r0, [r10, #32]
 8016090: c2 1e                        	subs	r2, r0, #3
 8016092: 18 bf                        	it	ne
 8016094: 02 46                        	movne	r2, r0
 8016096: a1 eb 09 00                  	sub.w	r0, r1, r9
 801609a: 00 eb 0e 01                  	add.w	r1, r0, lr
 801609e: 00 20                        	movs	r0, #0
 80160a0: 88 46                        	mov	r8, r1
 80160a2: df e8 02 f0                  	tbb	[pc, r2]

080160a6 $d.208:
 80160a6:	17 02 13 02	.word	0x02130217

080160aa $t.209:
 80160aa: 4f f0 00 08                  	mov.w	r8, #0
 80160ae: 08 46                        	mov	r0, r1
 80160b0: 10 e0                        	b	#32 <$t.209+0x2e>
 80160b2: 00 2a                        	cmp	r2, #0
 80160b4: 18 bf                        	it	ne
 80160b6: 4a 45                        	cmpne	r2, r9
 80160b8: 37 d1                        	bne	#110 <$t.209+0x84>
 80160ba: 28 46                        	mov	r0, r5
 80160bc: 00 28                        	cmp	r0, #0
 80160be: 0c bf                        	ite	eq
 80160c0: 4a 46                        	moveq	r2, r9
 80160c2: 05 46                        	movne	r5, r0
 80160c4: 01 29                        	cmp	r1, #1
 80160c6: 7f f4 2a af                  	bne.w	#-428 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0x102>
 80160ca: 2e e7                        	b	#-420 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0x10e>
 80160cc: 48 08                        	lsrs	r0, r1, #1
 80160ce: 01 31                        	adds	r1, #1
 80160d0: 4f ea 51 08                  	lsr.w	r8, r1, #1
 80160d4: 44 1c                        	adds	r4, r0, #1
 80160d6: 01 3c                        	subs	r4, #1
 80160d8: 08 d0                        	beq	#16 <$t.209+0x46>
 80160da: da e9 06 02                  	ldrd	r0, r2, [r10, #24]
 80160de: da f8 04 10                  	ldr.w	r1, [r10, #4]
 80160e2: 12 69                        	ldr	r2, [r2, #16]
 80160e4: 90 47                        	blx	r2
 80160e6: 00 28                        	cmp	r0, #0
 80160e8: f5 d0                        	beq	#-22 <$t.209+0x30>
 80160ea: 14 e0                        	b	#40 <$t.209+0x70>
 80160ec: da e9 06 01                  	ldrd	r0, r1, [r10, #24]
 80160f0: 4a 46                        	mov	r2, r9
 80160f2: cb 68                        	ldr	r3, [r1, #12]
 80160f4: 29 46                        	mov	r1, r5
 80160f6: da f8 04 b0                  	ldr.w	r11, [r10, #4]
 80160fa: 98 47                        	blx	r3
 80160fc: 58 b9                        	cbnz	r0, #22
 80160fe: da e9 06 65                  	ldrd	r6, r5, [r10, #24]
 8016102: 08 f1 01 04                  	add.w	r4, r8, #1
 8016106: 01 3c                        	subs	r4, #1
 8016108: 0a d0                        	beq	#20 <$t.209+0x7a>
 801610a: 2a 69                        	ldr	r2, [r5, #16]
 801610c: 30 46                        	mov	r0, r6
 801610e: 59 46                        	mov	r1, r11
 8016110: 90 47                        	blx	r2
 8016112: 00 28                        	cmp	r0, #0
 8016114: f7 d0                        	beq	#-18 <$t.209+0x60>
 8016116: 01 20                        	movs	r0, #1
 8016118: 03 b0                        	add	sp, #12
 801611a: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 801611e: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 8016120: 00 20                        	movs	r0, #0
 8016122: 03 b0                        	add	sp, #12
 8016124: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 8016128: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 801612a: 4a 45                        	cmp	r2, r9
 801612c: 03 d2                        	bhs	#6 <$t.209+0x90>
 801612e: a8 56                        	ldrsb	r0, [r5, r2]
 8016130: 10 f1 40 0f                  	cmn.w	r0, #64
 8016134: c1 da                        	bge	#-126 <$t.209+0x14>
 8016136: 00 20                        	movs	r0, #0
 8016138: 00 22                        	movs	r2, #0
 801613a: 00 28                        	cmp	r0, #0
 801613c: 0c bf                        	ite	eq
 801613e: 4a 46                        	moveq	r2, r9
 8016140: 05 46                        	movne	r5, r0
 8016142: 01 29                        	cmp	r1, #1
 8016144: 7f f4 eb ae                  	bne.w	#-554 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0x102>
 8016148: ef e6                        	b	#-546 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0x10e>

0801614a core::str::slice_error_fail::ha17f6e291f31d8ea:
 801614a: 80 b5                        	push	{r7, lr}
 801614c: 6f 46                        	mov	r7, sp
 801614e: 8a 42                        	cmp	r2, r1
 8016150: 03 d8                        	bhi	#6 <_ZN4core3str16slice_error_fail17ha17f6e291f31d8eaE+0x14>
 8016152: 8b 42                        	cmp	r3, r1
 8016154: 98 bf                        	it	ls
 8016156: 9a 42                        	cmpls	r2, r3
 8016158: 02 d9                        	bls	#4 <_ZN4core3str16slice_error_fail17ha17f6e291f31d8eaE+0x1a>
 801615a: ff f7 e9 fc                  	bl	#-1582
 801615e: fe de                        	trap
 8016160: 00 2a                        	cmp	r2, #0
 8016162: 18 bf                        	it	ne
 8016164: 91 42                        	cmpne	r1, r2
 8016166: 1d d1                        	bne	#58 <_ZN4core3str16slice_error_fail17ha17f6e291f31d8eaE+0x5e>
 8016168: 1a 46                        	mov	r2, r3
 801616a: 00 2a                        	cmp	r2, #0
 801616c: 18 bf                        	it	ne
 801616e: 8a 42                        	cmpne	r2, r1
 8016170: 1f d1                        	bne	#62 <_ZN4core3str16slice_error_fail17ha17f6e291f31d8eaE+0x6c>
 8016172: 13 46                        	mov	r3, r2
 8016174: 8b 42                        	cmp	r3, r1
 8016176: 07 d1                        	bne	#14 <_ZN4core3str16slice_error_fail17ha17f6e291f31d8eaE+0x42>
 8016178: 40 f6 44 20                  	movw	r0, #2628
 801617c: 2b 21                        	movs	r1, #43
 801617e: c0 f6 02 00                  	movt	r0, #2050
 8016182: 00 f0 69 f9                  	bl	#722
 8016186: fe de                        	trap
 8016188: c2 18                        	adds	r2, r0, r3
 801618a: 13 46                        	mov	r3, r2
 801618c: 13 f9 01 6b                  	ldrsb	r6, [r3], #1
 8016190: b6 f1 ff 3f                  	cmp.w	r6, #4294967295
 8016194: e1 dc                        	bgt	#-62 <_ZN4core3str16slice_error_fail17ha17f6e291f31d8eaE+0x14>
 8016196: 01 44                        	add	r1, r0
 8016198: f0 b2                        	uxtb	r0, r6
 801619a: 8b 42                        	cmp	r3, r1
 801619c: 45 d1                        	bne	#138 <_ZN4core3str16slice_error_fail17ha17f6e291f31d8eaE+0xe4>
 801619e: 00 23                        	movs	r3, #0
 80161a0: 0a 46                        	mov	r2, r1
 80161a2: 47 e0                        	b	#142 <_ZN4core3str16slice_error_fail17ha17f6e291f31d8eaE+0xee>
 80161a4: e1 d9                        	bls	#-62 <_ZN4core3str16slice_error_fail17ha17f6e291f31d8eaE+0x24>
 80161a6: 86 56                        	ldrsb	r6, [r0, r2]
 80161a8: 16 f1 40 0f                  	cmn.w	r6, #64
 80161ac: a8 bf                        	it	ge
 80161ae: 1a 46                        	movge	r2, r3
 80161b0: db e7                        	b	#-74 <_ZN4core3str16slice_error_fail17ha17f6e291f31d8eaE+0x24>
 80161b2: 01 f1 02 0c                  	add.w	r12, r1, #2
 80161b6: a0 f1 01 0e                  	sub.w	lr, r0, #1
 80161ba: cc 1c                        	adds	r4, r1, #3
 80161bc: 4d 1c                        	adds	r5, r1, #1
 80161be: 01 f1 04 08                  	add.w	r8, r1, #4
 80161c2: 8a 42                        	cmp	r2, r1
 80161c4: 06 d2                        	bhs	#12 <_ZN4core3str16slice_error_fail17ha17f6e291f31d8eaE+0x8e>
 80161c6: 0e eb 02 03                  	add.w	r3, lr, r2
 80161ca: 93 f9 01 30                  	ldrsb.w	r3, [r3, #1]
 80161ce: 13 f1 41 0f                  	cmn.w	r3, #65
 80161d2: ce dc                        	bgt	#-100 <_ZN4core3str16slice_error_fail17ha17f6e291f31d8eaE+0x2c>
 80161d4: 53 1e                        	subs	r3, r2, #1
 80161d6: 18 bf                        	it	ne
 80161d8: 95 42                        	cmpne	r5, r2
 80161da: cb d0                        	beq	#-106 <_ZN4core3str16slice_error_fail17ha17f6e291f31d8eaE+0x2e>
 80161dc: 8b 42                        	cmp	r3, r1
 80161de: 04 d2                        	bhs	#8 <_ZN4core3str16slice_error_fail17ha17f6e291f31d8eaE+0xa4>
 80161e0: 1e f9 02 60                  	ldrsb.w	r6, [lr, r2]
 80161e4: 16 f1 41 0f                  	cmn.w	r6, #65
 80161e8: c4 dc                        	bgt	#-120 <_ZN4core3str16slice_error_fail17ha17f6e291f31d8eaE+0x2e>
 80161ea: 93 1e                        	subs	r3, r2, #2
 80161ec: 18 bf                        	it	ne
 80161ee: 94 45                        	cmpne	r12, r2
 80161f0: c0 d0                        	beq	#-128 <_ZN4core3str16slice_error_fail17ha17f6e291f31d8eaE+0x2e>
 80161f2: 8b 42                        	cmp	r3, r1
 80161f4: 06 d2                        	bhs	#12 <_ZN4core3str16slice_error_fail17ha17f6e291f31d8eaE+0xbe>
 80161f6: 0e eb 02 06                  	add.w	r6, lr, r2
 80161fa: 16 f9 01 6c                  	ldrsb	r6, [r6, #-1]
 80161fe: 16 f1 41 0f                  	cmn.w	r6, #65
 8016202: b7 dc                        	bgt	#-146 <_ZN4core3str16slice_error_fail17ha17f6e291f31d8eaE+0x2e>
 8016204: d3 1e                        	subs	r3, r2, #3
 8016206: 18 bf                        	it	ne
 8016208: 94 42                        	cmpne	r4, r2
 801620a: b3 d0                        	beq	#-154 <_ZN4core3str16slice_error_fail17ha17f6e291f31d8eaE+0x2e>
 801620c: 8b 42                        	cmp	r3, r1
 801620e: 06 d2                        	bhs	#12 <_ZN4core3str16slice_error_fail17ha17f6e291f31d8eaE+0xd8>
 8016210: 0e eb 02 06                  	add.w	r6, lr, r2
 8016214: 16 f9 02 6c                  	ldrsb	r6, [r6, #-2]
 8016218: 16 f1 41 0f                  	cmn.w	r6, #65
 801621c: aa dc                        	bgt	#-172 <_ZN4core3str16slice_error_fail17ha17f6e291f31d8eaE+0x2e>
 801621e: 13 1f                        	subs	r3, r2, #4
 8016220: a8 d0                        	beq	#-176 <_ZN4core3str16slice_error_fail17ha17f6e291f31d8eaE+0x2e>
 8016222: 90 45                        	cmp	r8, r2
 8016224: 1a 46                        	mov	r2, r3
 8016226: cc d1                        	bne	#-104 <_ZN4core3str16slice_error_fail17ha17f6e291f31d8eaE+0x7c>
 8016228: a4 e7                        	b	#-184 <_ZN4core3str16slice_error_fail17ha17f6e291f31d8eaE+0x2e>
 801622a: 53 78                        	ldrb	r3, [r2, #1]
 801622c: 02 32                        	adds	r2, #2
 801622e: 03 f0 3f 03                  	and	r3, r3, #63
 8016232: 9b 01                        	lsls	r3, r3, #6
 8016234: e0 28                        	cmp	r0, #224
 8016236: ff f4 90 af                  	blo.w	#-224 <_ZN4core3str16slice_error_fail17ha17f6e291f31d8eaE+0x14>
 801623a: 8a 42                        	cmp	r2, r1
 801623c: 02 d1                        	bne	#4 <_ZN4core3str16slice_error_fail17ha17f6e291f31d8eaE+0xfe>
 801623e: 00 26                        	movs	r6, #0
 8016240: 0a 46                        	mov	r2, r1
 8016242: 03 e0                        	b	#6 <_ZN4core3str16slice_error_fail17ha17f6e291f31d8eaE+0x106>
 8016244: 12 f8 01 6b                  	ldrb	r6, [r2], #1
 8016248: 06 f0 3f 06                  	and	r6, r6, #63
 801624c: f0 28                        	cmp	r0, #240
 801624e: ff f4 84 af                  	blo.w	#-248 <_ZN4core3str16slice_error_fail17ha17f6e291f31d8eaE+0x14>
 8016252: 33 43                        	orrs	r3, r6
 8016254: 8a 42                        	cmp	r2, r1
 8016256: 1a bf                        	itte	ne
 8016258: 11 78                        	ldrbne	r1, [r2]
 801625a: 01 f0 3f 01                  	andne	r1, r1, #63
 801625e: 00 21                        	moveq	r1, #0
 8016260: 4f f4 e0 12                  	mov.w	r2, #1835008
 8016264: 02 ea 80 40                  	and.w	r0, r2, r0, lsl #18
 8016268: 40 ea 83 10                  	orr.w	r0, r0, r3, lsl #6
 801626c: 08 44                        	add	r0, r1
 801626e: b0 f5 88 1f                  	cmp.w	r0, #1114112
 8016272: 7f f4 72 af                  	bne.w	#-284 <_ZN4core3str16slice_error_fail17ha17f6e291f31d8eaE+0x14>
 8016276: 7f e7                        	b	#-258 <_ZN4core3str16slice_error_fail17ha17f6e291f31d8eaE+0x32>

08016278 _$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$::fmt::h80f2088003d44ddb:
 8016278: 0b 46                        	mov	r3, r1
 801627a: d0 e9 00 12                  	ldrd	r1, r2, [r0]
 801627e: 18 46                        	mov	r0, r3
 8016280: ff f7 ce bd                  	b.w	#-1124 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0x4>

08016284 core::fmt::write::he2ad71e42731696e:
 8016284: f0 b5                        	push	{r4, r5, r6, r7, lr}
 8016286: 03 af                        	add	r7, sp, #12
 8016288: 2d e9 00 0f                  	push.w	{r8, r9, r10, r11}
 801628c: 8d b0                        	sub	sp, #52
 801628e: 96 68                        	ldr	r6, [r2, #8]
 8016290: 03 23                        	movs	r3, #3
 8016292: 8d f8 30 30                  	strb.w	r3, [sp, #48]
 8016296: 20 23                        	movs	r3, #32
 8016298: 05 93                        	str	r3, [sp, #20]
 801629a: 00 23                        	movs	r3, #0
 801629c: 00 2e                        	cmp	r6, #0
 801629e: 04 93                        	str	r3, [sp, #16]
 80162a0: 0b 91                        	str	r1, [sp, #44]
 80162a2: 0a 90                        	str	r0, [sp, #40]
 80162a4: 08 93                        	str	r3, [sp, #32]
 80162a6: 06 93                        	str	r3, [sp, #24]
 80162a8: 01 96                        	str	r6, [sp, #4]
 80162aa: 00 f0 82 80                  	beq.w	#260 <_ZN4core3fmt5write17he2ad71e42731696eE+0x132>
 80162ae: d2 f8 0c b0                  	ldr.w	r11, [r2, #12]
 80162b2: d2 e9 00 69                  	ldrd	r6, r9, [r2]
 80162b6: cb 45                        	cmp	r11, r9
 80162b8: 88 bf                        	it	hi
 80162ba: cb 46                        	movhi	r11, r9
 80162bc: bb f1 00 0f                  	cmp.w	r11, #0
 80162c0: 03 96                        	str	r6, [sp, #12]
 80162c2: 00 f0 a3 80                  	beq.w	#326 <_ZN4core3fmt5write17he2ad71e42731696eE+0x18c>
 80162c6: d2 e9 04 42                  	ldrd	r4, r2, [r2, #16]
 80162ca: cd f8 00 90                  	str.w	r9, [sp]
 80162ce: 02 92                        	str	r2, [sp, #8]
 80162d0: d6 e9 00 32                  	ldrd	r3, r2, [r6]
 80162d4: cd 68                        	ldr	r5, [r1, #12]
 80162d6: 19 46                        	mov	r1, r3
 80162d8: a8 47                        	blx	r5
 80162da: 00 28                        	cmp	r0, #0
 80162dc: 40 f0 aa 80                  	bne.w	#340 <_ZN4core3fmt5write17he2ad71e42731696eE+0x1b4>
 80162e0: 01 98                        	ldr	r0, [sp, #4]
 80162e2: 4f f0 01 09                  	mov.w	r9, #1
 80162e6: 4f f0 00 0a                  	mov.w	r10, #0
 80162ea: 00 f1 10 08                  	add.w	r8, r0, #16
 80162ee: 01 98                        	ldr	r0, [sp, #4]
 80162f0: 00 eb 8a 01                  	add.w	r1, r0, r10, lsl #2
 80162f4: d1 e9 05 20                  	ldrd	r2, r0, [r1, #20]
 80162f8: d1 e9 01 35                  	ldrd	r3, r5, [r1, #4]
 80162fc: 0e 7f                        	ldrb	r6, [r1, #28]
 80162fe: 05 93                        	str	r3, [sp, #20]
 8016300: 8d f8 30 60                  	strb.w	r6, [sp, #48]
 8016304: 04 95                        	str	r5, [sp, #16]
 8016306: 8a b1                        	cbz	r2, #34
 8016308: 02 2a                        	cmp	r2, #2
 801630a: 11 d0                        	beq	#34 <_ZN4core3fmt5write17he2ad71e42731696eE+0xb0>
 801630c: 02 9a                        	ldr	r2, [sp, #8]
 801630e: 90 42                        	cmp	r0, r2
 8016310: 80 f0 9e 80                  	bhs.w	#316 <_ZN4core3fmt5write17he2ad71e42731696eE+0x1d0>
 8016314: 04 eb c0 02                  	add.w	r2, r4, r0, lsl #3
 8016318: 45 f6 2d 23                  	movw	r3, #23085
 801631c: c0 f6 01 03                  	movt	r3, #2049
 8016320: 52 68                        	ldr	r2, [r2, #4]
 8016322: 9a 42                        	cmp	r2, r3
 8016324: 04 d1                        	bne	#8 <_ZN4core3fmt5write17he2ad71e42731696eE+0xb0>
 8016326: 54 f8 30 00                  	ldr.w	r0, [r4, r0, lsl #3]
 801632a: 00 68                        	ldr	r0, [r0]
 801632c: 01 22                        	movs	r2, #1
 801632e: 00 e0                        	b	#0 <_ZN4core3fmt5write17he2ad71e42731696eE+0xb2>
 8016330: 00 22                        	movs	r2, #0
 8016332: cd e9 06 20                  	strd	r2, r0, [sp, #24]
 8016336: c9 68                        	ldr	r1, [r1, #12]
 8016338: d8 f8 00 00                  	ldr.w	r0, [r8]
 801633c: 89 b1                        	cbz	r1, #34
 801633e: 02 29                        	cmp	r1, #2
 8016340: 11 d0                        	beq	#34 <_ZN4core3fmt5write17he2ad71e42731696eE+0xe6>
 8016342: 02 99                        	ldr	r1, [sp, #8]
 8016344: 88 42                        	cmp	r0, r1
 8016346: 80 f0 83 80                  	bhs.w	#262 <_ZN4core3fmt5write17he2ad71e42731696eE+0x1d0>
 801634a: 04 eb c0 01                  	add.w	r1, r4, r0, lsl #3
 801634e: 45 f6 2d 22                  	movw	r2, #23085
 8016352: c0 f6 01 02                  	movt	r2, #2049
 8016356: 49 68                        	ldr	r1, [r1, #4]
 8016358: 91 42                        	cmp	r1, r2
 801635a: 04 d1                        	bne	#8 <_ZN4core3fmt5write17he2ad71e42731696eE+0xe6>
 801635c: 54 f8 30 00                  	ldr.w	r0, [r4, r0, lsl #3]
 8016360: 00 68                        	ldr	r0, [r0]
 8016362: 01 21                        	movs	r1, #1
 8016364: 00 e0                        	b	#0 <_ZN4core3fmt5write17he2ad71e42731696eE+0xe8>
 8016366: 00 21                        	movs	r1, #0
 8016368: 09 90                        	str	r0, [sp, #36]
 801636a: 58 f8 10 0c                  	ldr	r0, [r8, #-16]
 801636e: 08 91                        	str	r1, [sp, #32]
 8016370: 02 99                        	ldr	r1, [sp, #8]
 8016372: 88 42                        	cmp	r0, r1
 8016374: 6c d2                        	bhs	#216 <_ZN4core3fmt5write17he2ad71e42731696eE+0x1d0>
 8016376: 54 f8 30 10                  	ldr.w	r1, [r4, r0, lsl #3]
 801637a: 04 eb c0 00                  	add.w	r0, r4, r0, lsl #3
 801637e: 42 68                        	ldr	r2, [r0, #4]
 8016380: 08 46                        	mov	r0, r1
 8016382: 04 a9                        	add	r1, sp, #16
 8016384: 90 47                        	blx	r2
 8016386: 00 28                        	cmp	r0, #0
 8016388: 54 d1                        	bne	#168 <_ZN4core3fmt5write17he2ad71e42731696eE+0x1b4>
 801638a: d9 45                        	cmp	r9, r11
 801638c: 57 d2                        	bhs	#174 <_ZN4core3fmt5write17he2ad71e42731696eE+0x1be>
 801638e: 03 99                        	ldr	r1, [sp, #12]
 8016390: dd e9 0a 03                  	ldrd	r0, r3, [sp, #40]
 8016394: 01 eb 0a 02                  	add.w	r2, r1, r10
 8016398: db 68                        	ldr	r3, [r3, #12]
 801639a: d2 e9 02 12                  	ldrd	r1, r2, [r2, #8]
 801639e: 98 47                        	blx	r3
 80163a0: 08 f1 20 08                  	add.w	r8, r8, #32
 80163a4: 0a f1 08 0a                  	add.w	r10, r10, #8
 80163a8: 09 f1 01 09                  	add.w	r9, r9, #1
 80163ac: 00 28                        	cmp	r0, #0
 80163ae: 9e d0                        	beq	#-196 <_ZN4core3fmt5write17he2ad71e42731696eE+0x6e>
 80163b0: 40 e0                        	b	#128 <_ZN4core3fmt5write17he2ad71e42731696eE+0x1b4>
 80163b2: d2 f8 14 b0                  	ldr.w	r11, [r2, #20]
 80163b6: d2 e9 00 59                  	ldrd	r5, r9, [r2]
 80163ba: cb 45                        	cmp	r11, r9
 80163bc: 88 bf                        	it	hi
 80163be: cb 46                        	movhi	r11, r9
 80163c0: bb f1 00 0f                  	cmp.w	r11, #0
 80163c4: 03 95                        	str	r5, [sp, #12]
 80163c6: 26 d0                        	beq	#76 <_ZN4core3fmt5write17he2ad71e42731696eE+0x196>
 80163c8: 16 69                        	ldr	r6, [r2, #16]
 80163ca: d5 e9 00 32                  	ldrd	r3, r2, [r5]
 80163ce: cd 68                        	ldr	r5, [r1, #12]
 80163d0: 19 46                        	mov	r1, r3
 80163d2: a8 47                        	blx	r5
 80163d4: 70 bb                        	cbnz	r0, #92
 80163d6: 0d f1 10 08                  	add.w	r8, sp, #16
 80163da: 00 24                        	movs	r4, #0
 80163dc: 06 eb c4 01                  	add.w	r1, r6, r4, lsl #3
 80163e0: 56 f8 34 00                  	ldr.w	r0, [r6, r4, lsl #3]
 80163e4: 4a 68                        	ldr	r2, [r1, #4]
 80163e6: 41 46                        	mov	r1, r8
 80163e8: 90 47                        	blx	r2
 80163ea: 18 bb                        	cbnz	r0, #70
 80163ec: 65 1c                        	adds	r5, r4, #1
 80163ee: 5d 45                        	cmp	r5, r11
 80163f0: 13 d2                        	bhs	#38 <_ZN4core3fmt5write17he2ad71e42731696eE+0x19a>
 80163f2: 03 99                        	ldr	r1, [sp, #12]
 80163f4: dd e9 0a 03                  	ldrd	r0, r3, [sp, #40]
 80163f8: 01 eb c4 02                  	add.w	r2, r1, r4, lsl #3
 80163fc: db 68                        	ldr	r3, [r3, #12]
 80163fe: d2 e9 02 12                  	ldrd	r1, r2, [r2, #8]
 8016402: 98 47                        	blx	r3
 8016404: 00 28                        	cmp	r0, #0
 8016406: 2c 46                        	mov	r4, r5
 8016408: e8 d0                        	beq	#-48 <_ZN4core3fmt5write17he2ad71e42731696eE+0x15c>
 801640a: 13 e0                        	b	#38 <_ZN4core3fmt5write17he2ad71e42731696eE+0x1b4>
 801640c: 4f f0 00 0b                  	mov.w	r11, #0
 8016410: d9 45                        	cmp	r9, r11
 8016412: 04 d8                        	bhi	#8 <_ZN4core3fmt5write17he2ad71e42731696eE+0x19e>
 8016414: 17 e0                        	b	#46 <_ZN4core3fmt5write17he2ad71e42731696eE+0x1c6>
 8016416: 4f f0 00 0b                  	mov.w	r11, #0
 801641a: d9 45                        	cmp	r9, r11
 801641c: 13 d9                        	bls	#38 <_ZN4core3fmt5write17he2ad71e42731696eE+0x1c6>
 801641e: 03 9a                        	ldr	r2, [sp, #12]
 8016420: dd e9 0a 03                  	ldrd	r0, r3, [sp, #40]
 8016424: db 68                        	ldr	r3, [r3, #12]
 8016426: 52 f8 3b 10                  	ldr.w	r1, [r2, r11, lsl #3]
 801642a: 02 eb cb 02                  	add.w	r2, r2, r11, lsl #3
 801642e: 52 68                        	ldr	r2, [r2, #4]
 8016430: 98 47                        	blx	r3
 8016432: 40 b1                        	cbz	r0, #16
 8016434: 01 20                        	movs	r0, #1
 8016436: 0d b0                        	add	sp, #52
 8016438: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 801643c: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 801643e: dd f8 00 90                  	ldr.w	r9, [sp]
 8016442: d9 45                        	cmp	r9, r11
 8016444: eb d8                        	bhi	#-42 <_ZN4core3fmt5write17he2ad71e42731696eE+0x19e>
 8016446: 00 20                        	movs	r0, #0
 8016448: 0d b0                        	add	sp, #52
 801644a: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 801644e: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 8016450: 02 99                        	ldr	r1, [sp, #8]
 8016452: ff f7 e0 fc                  	bl	#-1600
 8016456: fe de                        	trap

08016458 core::option::expect_failed::h960c656216d03ec8:
 8016458: 80 b5                        	push	{r7, lr}
 801645a: 6f 46                        	mov	r7, sp
 801645c: ff f7 68 fb                  	bl	#-2352
 8016460: fe de                        	trap

08016462 core::option::expect_none_failed::he5612e4362bbccdf:
 8016462: 80 b5                        	push	{r7, lr}
 8016464: 6f 46                        	mov	r7, sp
 8016466: ff f7 63 fb                  	bl	#-2362
 801646a: fe de                        	trap

0801646c _$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$::write_str::h86e2276038ee2847:
 801646c: f0 b5                        	push	{r4, r5, r6, r7, lr}
 801646e: 03 af                        	add	r7, sp, #12
 8016470: 2d e9 00 0f                  	push.w	{r8, r9, r10, r11}
 8016474: 89 b0                        	sub	sp, #36
 8016476: 4f f0 00 09                  	mov.w	r9, #0
 801647a: 00 2a                        	cmp	r2, #0
 801647c: 00 f0 93 80                  	beq.w	#294 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h86e2276038ee2847E+0x13e>
 8016480: 83 46                        	mov	r11, r0
 8016482: 02 a8                        	add	r0, sp, #8
 8016484: 92 46                        	mov	r10, r2
 8016486: 0d 46                        	mov	r5, r1
 8016488: 18 30                        	adds	r0, #24
 801648a: 01 90                        	str	r0, [sp, #4]
 801648c: 04 e0                        	b	#8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h86e2276038ee2847E+0x30>
 801648e: 25 44                        	add	r5, r4
 8016490: 00 2e                        	cmp	r6, #0
 8016492: b2 46                        	mov	r10, r6
 8016494: 00 f0 8c 80                  	beq.w	#280 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h86e2276038ee2847E+0x148>
 8016498: db f8 08 00                  	ldr.w	r0, [r11, #8]
 801649c: 00 78                        	ldrb	r0, [r0]
 801649e: 50 b1                        	cbz	r0, #20
 80164a0: db e9 00 01                  	ldrd	r0, r1, [r11]
 80164a4: 04 22                        	movs	r2, #4
 80164a6: cb 68                        	ldr	r3, [r1, #12]
 80164a8: 4d f2 a4 21                  	movw	r1, #53924
 80164ac: c0 f6 01 01                  	movt	r1, #2049
 80164b0: 98 47                        	blx	r3
 80164b2: 00 28                        	cmp	r0, #0
 80164b4: 75 d1                        	bne	#234 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h86e2276038ee2847E+0x13a>
 80164b6: 0a 20                        	movs	r0, #10
 80164b8: 01 21                        	movs	r1, #1
 80164ba: 08 90                        	str	r0, [sp, #32]
 80164bc: 52 46                        	mov	r2, r10
 80164be: cd e9 06 01                  	strd	r0, r1, [sp, #24]
 80164c2: 0a 20                        	movs	r0, #10
 80164c4: 29 46                        	mov	r1, r5
 80164c6: cd e9 04 9a                  	strd	r9, r10, [sp, #16]
 80164ca: cd e9 02 5a                  	strd	r5, r10, [sp, #8]
 80164ce: 06 e0                        	b	#12 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h86e2276038ee2847E+0x76>
 80164d0: a0 eb 09 02                  	sub.w	r2, r0, r9
 80164d4: 02 a8                        	add	r0, sp, #8
 80164d6: 02 99                        	ldr	r1, [sp, #8]
 80164d8: 20 44                        	add	r0, r4
 80164da: c0 7d                        	ldrb	r0, [r0, #23]
 80164dc: 49 44                        	add	r1, r9
 80164de: 00 f0 81 f8                  	bl	#258
 80164e2: 01 28                        	cmp	r0, #1
 80164e4: 52 d1                        	bne	#164 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h86e2276038ee2847E+0x124>
 80164e6: 04 98                        	ldr	r0, [sp, #16]
 80164e8: 07 9c                        	ldr	r4, [sp, #28]
 80164ea: 08 44                        	add	r0, r1
 80164ec: 00 f1 01 09                  	add.w	r9, r0, #1
 80164f0: cd f8 10 90                  	str.w	r9, [sp, #16]
 80164f4: a1 45                        	cmp	r9, r4
 80164f6: 02 d2                        	bhs	#4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h86e2276038ee2847E+0x96>
 80164f8: dd f8 0c 80                  	ldr.w	r8, [sp, #12]
 80164fc: 16 e0                        	b	#44 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h86e2276038ee2847E+0xc4>
 80164fe: dd f8 0c 80                  	ldr.w	r8, [sp, #12]
 8016502: 20 46                        	mov	r0, r4
 8016504: c8 45                        	cmp	r8, r9
 8016506: 38 bf                        	it	lo
 8016508: 00 20                        	movlo	r0, #0
 801650a: 0f d3                        	blo	#30 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h86e2276038ee2847E+0xc4>
 801650c: 05 2c                        	cmp	r4, #5
 801650e: 56 d2                        	bhs	#172 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h86e2276038ee2847E+0x156>
 8016510: a0 42                        	cmp	r0, r4
 8016512: 0b d1                        	bne	#22 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h86e2276038ee2847E+0xc4>
 8016514: 02 98                        	ldr	r0, [sp, #8]
 8016516: a9 eb 04 06                  	sub.w	r6, r9, r4
 801651a: 01 99                        	ldr	r1, [sp, #4]
 801651c: 30 44                        	add	r0, r6
 801651e: 88 42                        	cmp	r0, r1
 8016520: 37 d0                        	beq	#110 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h86e2276038ee2847E+0x12a>
 8016522: 01 99                        	ldr	r1, [sp, #4]
 8016524: 22 46                        	mov	r2, r4
 8016526: 05 f0 b6 fe                  	bl	#23916
 801652a: 90 b3                        	cbz	r0, #100
 801652c: 05 98                        	ldr	r0, [sp, #20]
 801652e: 48 45                        	cmp	r0, r9
 8016530: 28 bf                        	it	hs
 8016532: 80 45                        	cmphs	r8, r0
 8016534: cc d2                        	bhs	#-104 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h86e2276038ee2847E+0x68>
 8016536: db f8 08 00                  	ldr.w	r0, [r11, #8]
 801653a: 4f f0 00 09                  	mov.w	r9, #0
 801653e: 54 46                        	mov	r4, r10
 8016540: 80 f8 00 90                  	strb.w	r9, [r0]
 8016544: aa eb 04 06                  	sub.w	r6, r10, r4
 8016548: b4 fa 84 f3                  	clz	r3, r4
 801654c: b6 fa 86 f2                  	clz	r2, r6
 8016550: db e9 00 01                  	ldrd	r0, r1, [r11]
 8016554: 5b 09                        	lsrs	r3, r3, #5
 8016556: 52 09                        	lsrs	r2, r2, #5
 8016558: 53 ea 02 08                  	orrs.w	r8, r3, r2
 801655c: 05 d1                        	bne	#10 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h86e2276038ee2847E+0x102>
 801655e: a2 45                        	cmp	r10, r4
 8016560: 32 d9                        	bls	#100 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h86e2276038ee2847E+0x160>
 8016562: 2a 57                        	ldrsb	r2, [r5, r4]
 8016564: 12 f1 41 0f                  	cmn.w	r2, #65
 8016568: 2e dd                        	ble	#92 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h86e2276038ee2847E+0x160>
 801656a: cb 68                        	ldr	r3, [r1, #12]
 801656c: 29 46                        	mov	r1, r5
 801656e: 22 46                        	mov	r2, r4
 8016570: 98 47                        	blx	r3
 8016572: b0 b9                        	cbnz	r0, #44
 8016574: b8 f1 00 0f                  	cmp.w	r8, #0
 8016578: 7f f4 89 af                  	bne.w	#-238 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h86e2276038ee2847E+0x26>
 801657c: a2 45                        	cmp	r10, r4
 801657e: 2a d9                        	bls	#84 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h86e2276038ee2847E+0x16e>
 8016580: 28 57                        	ldrsb	r0, [r5, r4]
 8016582: 10 f1 41 0f                  	cmn.w	r0, #65
 8016586: 3f f7 82 af                  	bgt.w	#-252 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h86e2276038ee2847E+0x26>
 801658a: 24 e0                        	b	#72 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h86e2276038ee2847E+0x16e>
 801658c: 05 98                        	ldr	r0, [sp, #20]
 801658e: 04 90                        	str	r0, [sp, #16]
 8016590: d1 e7                        	b	#-94 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h86e2276038ee2847E+0xce>
 8016592: db f8 08 00                  	ldr.w	r0, [r11, #8]
 8016596: 74 1c                        	adds	r4, r6, #1
 8016598: 01 21                        	movs	r1, #1
 801659a: 4f f0 00 09                  	mov.w	r9, #0
 801659e: 01 70                        	strb	r1, [r0]
 80165a0: d0 e7                        	b	#-96 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h86e2276038ee2847E+0xdc>
 80165a2: 4f f0 01 09                  	mov.w	r9, #1
 80165a6: 48 46                        	mov	r0, r9
 80165a8: 09 b0                        	add	sp, #36
 80165aa: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 80165ae: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 80165b0: 4f f0 00 09                  	mov.w	r9, #0
 80165b4: 48 46                        	mov	r0, r9
 80165b6: 09 b0                        	add	sp, #36
 80165b8: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 80165bc: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 80165be: 20 46                        	mov	r0, r4
 80165c0: 04 21                        	movs	r1, #4
 80165c2: ff f7 28 fc                  	bl	#-1968
 80165c6: fe de                        	trap
 80165c8: 28 46                        	mov	r0, r5
 80165ca: 51 46                        	mov	r1, r10
 80165cc: 00 22                        	movs	r2, #0
 80165ce: 23 46                        	mov	r3, r4
 80165d0: ff f7 bb fd                  	bl	#-1162
 80165d4: fe de                        	trap
 80165d6: 28 46                        	mov	r0, r5
 80165d8: 51 46                        	mov	r1, r10
 80165da: 22 46                        	mov	r2, r4
 80165dc: 53 46                        	mov	r3, r10
 80165de: ff f7 b4 fd                  	bl	#-1176
 80165e2: fe de                        	trap

080165e4 core::slice::memchr::memchr::h0cc46d9cdd2ec3da:
 80165e4: f0 b5                        	push	{r4, r5, r6, r7, lr}
 80165e6: 03 af                        	add	r7, sp, #12
 80165e8: 4d f8 04 bd                  	str	r11, [sp, #-4]!
 80165ec: 11 f0 03 03                  	ands	r3, r1, #3
 80165f0: 5f fa 80 fc                  	uxtb.w	r12, r0
 80165f4: 4f f0 00 00                  	mov.w	r0, #0
 80165f8: 18 bf                        	it	ne
 80165fa: d3 f1 04 03                  	rsbsne.w	r3, r3, #4
 80165fe: 4a d1                        	bne	#148 <_ZN4core5slice6memchr6memchr17h0cc46d9cdd2ec3daE+0xb6>
 8016600: 08 2a                        	cmp	r2, #8
 8016602: 1d d3                        	blo	#58 <_ZN4core5slice6memchr6memchr17h0cc46d9cdd2ec3daE+0x60>
 8016604: a2 f1 08 0e                  	sub.w	lr, r2, #8
 8016608: 70 45                        	cmp	r0, lr
 801660a: 19 d8                        	bhi	#50 <_ZN4core5slice6memchr6memchr17h0cc46d9cdd2ec3daE+0x60>
 801660c: 4f f0 01 33                  	mov.w	r3, #16843009
 8016610: 0c fb 03 f3                  	mul	r3, r12, r3
 8016614: 0c 58                        	ldr	r4, [r1, r0]
 8016616: 0d 18                        	adds	r5, r1, r0
 8016618: 6d 68                        	ldr	r5, [r5, #4]
 801661a: 5c 40                        	eors	r4, r3
 801661c: a4 f1 01 36                  	sub.w	r6, r4, #16843009
 8016620: 5d 40                        	eors	r5, r3
 8016622: 26 ea 04 04                  	bic.w	r4, r6, r4
 8016626: a5 f1 01 36                  	sub.w	r6, r5, #16843009
 801662a: 26 ea 05 05                  	bic.w	r5, r6, r5
 801662e: 2c 43                        	orrs	r4, r5
 8016630: 14 f0 80 3f                  	tst.w	r4, #2155905152
 8016634: 02 d1                        	bne	#4 <_ZN4core5slice6memchr6memchr17h0cc46d9cdd2ec3daE+0x5c>
 8016636: 08 30                        	adds	r0, #8
 8016638: 70 45                        	cmp	r0, lr
 801663a: eb d9                        	bls	#-42 <_ZN4core5slice6memchr6memchr17h0cc46d9cdd2ec3daE+0x34>
 801663c: 90 42                        	cmp	r0, r2
 801663e: 73 d8                        	bhi	#230 <_ZN4core5slice6memchr6memchr17h0cc46d9cdd2ec3daE+0x148>
 8016640: 90 42                        	cmp	r0, r2
 8016642: 08 d1                        	bne	#16 <_ZN4core5slice6memchr6memchr17h0cc46d9cdd2ec3daE+0x76>
 8016644: 4f f0 00 0e                  	mov.w	lr, #0
 8016648: 00 22                        	movs	r2, #0
 801664a: 0e eb 00 01                  	add.w	r1, lr, r0
 801664e: 10 46                        	mov	r0, r2
 8016650: 5d f8 04 bb                  	ldr	r11, [sp], #4
 8016654: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 8016656: 8b 18                        	adds	r3, r1, r2
 8016658: a2 eb 00 0e                  	sub.w	lr, r2, r0
 801665c: 01 44                        	add	r1, r0
 801665e: 00 22                        	movs	r2, #0
 8016660: 8c 5c                        	ldrb	r4, [r1, r2]
 8016662: 64 45                        	cmp	r4, r12
 8016664: 2a d0                        	beq	#84 <_ZN4core5slice6memchr6memchr17h0cc46d9cdd2ec3daE+0xdc>
 8016666: 8c 18                        	adds	r4, r1, r2
 8016668: 01 34                        	adds	r4, #1
 801666a: 9c 42                        	cmp	r4, r3
 801666c: ec d0                        	beq	#-40 <_ZN4core5slice6memchr6memchr17h0cc46d9cdd2ec3daE+0x68>
 801666e: 25 78                        	ldrb	r5, [r4]
 8016670: 65 45                        	cmp	r5, r12
 8016672: 25 d0                        	beq	#74 <_ZN4core5slice6memchr6memchr17h0cc46d9cdd2ec3daE+0xe0>
 8016674: 01 34                        	adds	r4, #1
 8016676: 9c 42                        	cmp	r4, r3
 8016678: e6 d0                        	beq	#-52 <_ZN4core5slice6memchr6memchr17h0cc46d9cdd2ec3daE+0x68>
 801667a: 25 78                        	ldrb	r5, [r4]
 801667c: 65 45                        	cmp	r5, r12
 801667e: 22 d0                        	beq	#68 <_ZN4core5slice6memchr6memchr17h0cc46d9cdd2ec3daE+0xe6>
 8016680: 01 34                        	adds	r4, #1
 8016682: 9c 42                        	cmp	r4, r3
 8016684: e0 d0                        	beq	#-64 <_ZN4core5slice6memchr6memchr17h0cc46d9cdd2ec3daE+0x68>
 8016686: 25 78                        	ldrb	r5, [r4]
 8016688: 65 45                        	cmp	r5, r12
 801668a: 28 d0                        	beq	#80 <_ZN4core5slice6memchr6memchr17h0cc46d9cdd2ec3daE+0xfe>
 801668c: 01 34                        	adds	r4, #1
 801668e: 04 32                        	adds	r2, #4
 8016690: 9c 42                        	cmp	r4, r3
 8016692: e5 d1                        	bne	#-54 <_ZN4core5slice6memchr6memchr17h0cc46d9cdd2ec3daE+0x80>
 8016694: d8 e7                        	b	#-80 <_ZN4core5slice6memchr6memchr17h0cc46d9cdd2ec3daE+0x68>
 8016696: 93 42                        	cmp	r3, r2
 8016698: 88 bf                        	it	hi
 801669a: 13 46                        	movhi	r3, r2
 801669c: 43 b1                        	cbz	r3, #16
 801669e: 08 78                        	ldrb	r0, [r1]
 80166a0: 60 45                        	cmp	r0, r12
 80166a2: 07 d1                        	bne	#14 <_ZN4core5slice6memchr6memchr17h0cc46d9cdd2ec3daE+0xd4>
 80166a4: 00 21                        	movs	r1, #0
 80166a6: 01 22                        	movs	r2, #1
 80166a8: 10 46                        	mov	r0, r2
 80166aa: 5d f8 04 bb                  	ldr	r11, [sp], #4
 80166ae: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 80166b0: 00 20                        	movs	r0, #0
 80166b2: a5 e7                        	b	#-182 <_ZN4core5slice6memchr6memchr17h0cc46d9cdd2ec3daE+0x20>
 80166b4: 01 2b                        	cmp	r3, #1
 80166b6: 09 d1                        	bne	#18 <_ZN4core5slice6memchr6memchr17h0cc46d9cdd2ec3daE+0xec>
 80166b8: 01 20                        	movs	r0, #1
 80166ba: a1 e7                        	b	#-190 <_ZN4core5slice6memchr6memchr17h0cc46d9cdd2ec3daE+0x20>
 80166bc: 96 46                        	mov	lr, r2
 80166be: 10 e0                        	b	#32 <_ZN4core5slice6memchr6memchr17h0cc46d9cdd2ec3daE+0x102>
 80166c0: 02 f1 01 0e                  	add.w	lr, r2, #1
 80166c4: 0d e0                        	b	#26 <_ZN4core5slice6memchr6memchr17h0cc46d9cdd2ec3daE+0x102>
 80166c6: 02 f1 02 0e                  	add.w	lr, r2, #2
 80166ca: 0a e0                        	b	#20 <_ZN4core5slice6memchr6memchr17h0cc46d9cdd2ec3daE+0x102>
 80166cc: 48 78                        	ldrb	r0, [r1, #1]
 80166ce: 60 45                        	cmp	r0, r12
 80166d0: 0e d1                        	bne	#28 <_ZN4core5slice6memchr6memchr17h0cc46d9cdd2ec3daE+0x110>
 80166d2: 01 21                        	movs	r1, #1
 80166d4: 01 22                        	movs	r2, #1
 80166d6: 10 46                        	mov	r0, r2
 80166d8: 5d f8 04 bb                  	ldr	r11, [sp], #4
 80166dc: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 80166de: 02 f1 03 0e                  	add.w	lr, r2, #3
 80166e2: 01 22                        	movs	r2, #1
 80166e4: 0e eb 00 01                  	add.w	r1, lr, r0
 80166e8: 10 46                        	mov	r0, r2
 80166ea: 5d f8 04 bb                  	ldr	r11, [sp], #4
 80166ee: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 80166f0: 02 2b                        	cmp	r3, #2
 80166f2: 01 d1                        	bne	#2 <_ZN4core5slice6memchr6memchr17h0cc46d9cdd2ec3daE+0x118>
 80166f4: 02 20                        	movs	r0, #2
 80166f6: 83 e7                        	b	#-250 <_ZN4core5slice6memchr6memchr17h0cc46d9cdd2ec3daE+0x20>
 80166f8: 88 78                        	ldrb	r0, [r1, #2]
 80166fa: 60 45                        	cmp	r0, r12
 80166fc: 05 d1                        	bne	#10 <_ZN4core5slice6memchr6memchr17h0cc46d9cdd2ec3daE+0x12a>
 80166fe: 02 21                        	movs	r1, #2
 8016700: 01 22                        	movs	r2, #1
 8016702: 10 46                        	mov	r0, r2
 8016704: 5d f8 04 bb                  	ldr	r11, [sp], #4
 8016708: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 801670a: 03 2b                        	cmp	r3, #3
 801670c: 01 d1                        	bne	#2 <_ZN4core5slice6memchr6memchr17h0cc46d9cdd2ec3daE+0x132>
 801670e: 03 20                        	movs	r0, #3
 8016710: 76 e7                        	b	#-276 <_ZN4core5slice6memchr6memchr17h0cc46d9cdd2ec3daE+0x20>
 8016712: c8 78                        	ldrb	r0, [r1, #3]
 8016714: 60 45                        	cmp	r0, r12
 8016716: 18 46                        	mov	r0, r3
 8016718: 7f f4 72 af                  	bne.w	#-284 <_ZN4core5slice6memchr6memchr17h0cc46d9cdd2ec3daE+0x20>
 801671c: 03 21                        	movs	r1, #3
 801671e: 01 22                        	movs	r2, #1
 8016720: 10 46                        	mov	r0, r2
 8016722: 5d f8 04 bb                  	ldr	r11, [sp], #4
 8016726: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 8016728: 11 46                        	mov	r1, r2
 801672a: ff f7 74 fb                  	bl	#-2328
 801672e: fe de                        	trap

08016730 core::fmt::builders::DebugStruct::field::h664097e0c91ac2c9:
 8016730: f0 b5                        	push	{r4, r5, r6, r7, lr}
 8016732: 03 af                        	add	r7, sp, #12
 8016734: 2d e9 00 0f                  	push.w	{r8, r9, r10, r11}
 8016738: 8d b0                        	sub	sp, #52
 801673a: 04 46                        	mov	r4, r0
 801673c: 00 79                        	ldrb	r0, [r0, #4]
 801673e: 4f f0 01 09                  	mov.w	r9, #1
 8016742: 00 28                        	cmp	r0, #0
 8016744: 4f f0 01 00                  	mov.w	r0, #1
 8016748: 7e d1                        	bne	#252 <_ZN4core3fmt8builders11DebugStruct5field17h664097e0c91ac2c9E+0x11c>
 801674a: 0d 46                        	mov	r5, r1
 801674c: 21 68                        	ldr	r1, [r4]
 801674e: 16 46                        	mov	r6, r2
 8016750: d7 f8 08 a0                  	ldr.w	r10, [r7, #8]
 8016754: 62 79                        	ldrb	r2, [r4, #5]
 8016756: 98 46                        	mov	r8, r3
 8016758: 08 78                        	ldrb	r0, [r1]
 801675a: 40 07                        	lsls	r0, r0, #29
 801675c: 2f d4                        	bmi	#94 <_ZN4core3fmt8builders11DebugStruct5field17h664097e0c91ac2c9E+0x92>
 801675e: d1 e9 06 03                  	ldrd	r0, r3, [r1, #24]
 8016762: 4e f6 d4 41                  	movw	r1, #60628
 8016766: 4e f6 e2 3c                  	movw	r12, #60386
 801676a: c0 f6 01 01                  	movt	r1, #2049
 801676e: 00 2a                        	cmp	r2, #0
 8016770: c0 f6 01 0c                  	movt	r12, #2049
 8016774: 08 bf                        	it	eq
 8016776: 61 46                        	moveq	r1, r12
 8016778: db 68                        	ldr	r3, [r3, #12]
 801677a: 4f f0 02 02                  	mov.w	r2, #2
 801677e: 08 bf                        	it	eq
 8016780: 03 22                        	moveq	r2, #3
 8016782: 98 47                        	blx	r3
 8016784: 00 28                        	cmp	r0, #0
 8016786: 5e d1                        	bne	#188 <_ZN4core3fmt8builders11DebugStruct5field17h664097e0c91ac2c9E+0x11a>
 8016788: 21 68                        	ldr	r1, [r4]
 801678a: 32 46                        	mov	r2, r6
 801678c: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8016790: cb 68                        	ldr	r3, [r1, #12]
 8016792: 29 46                        	mov	r1, r5
 8016794: 98 47                        	blx	r3
 8016796: 00 28                        	cmp	r0, #0
 8016798: 55 d1                        	bne	#170 <_ZN4core3fmt8builders11DebugStruct5field17h664097e0c91ac2c9E+0x11a>
 801679a: 21 68                        	ldr	r1, [r4]
 801679c: 02 22                        	movs	r2, #2
 801679e: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 80167a2: cb 68                        	ldr	r3, [r1, #12]
 80167a4: 4e f6 db 31                  	movw	r1, #60379
 80167a8: c0 f6 01 01                  	movt	r1, #2049
 80167ac: 98 47                        	blx	r3
 80167ae: 00 28                        	cmp	r0, #0
 80167b0: 49 d1                        	bne	#146 <_ZN4core3fmt8builders11DebugStruct5field17h664097e0c91ac2c9E+0x11a>
 80167b2: da f8 0c 20                  	ldr.w	r2, [r10, #12]
 80167b6: 40 46                        	mov	r0, r8
 80167b8: 21 68                        	ldr	r1, [r4]
 80167ba: 90 47                        	blx	r2
 80167bc: 44 e0                        	b	#136 <_ZN4core3fmt8builders11DebugStruct5field17h664097e0c91ac2c9E+0x11c>
 80167be: 52 b9                        	cbnz	r2, #20
 80167c0: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 80167c4: 03 22                        	movs	r2, #3
 80167c6: cb 68                        	ldr	r3, [r1, #12]
 80167c8: 4e f6 e5 31                  	movw	r1, #60389
 80167cc: c0 f6 01 01                  	movt	r1, #2049
 80167d0: 98 47                        	blx	r3
 80167d2: c0 bb                        	cbnz	r0, #112
 80167d4: 21 68                        	ldr	r1, [r4]
 80167d6: 01 20                        	movs	r0, #1
 80167d8: ca 69                        	ldr	r2, [r1, #28]
 80167da: 07 f8 41 0c                  	strb	r0, [r7, #-65]
 80167de: a7 f1 41 0a                  	sub.w	r10, r7, #65
 80167e2: d1 e9 05 b0                  	ldrd	r11, r0, [r1, #20]
 80167e6: d1 e9 03 ce                  	ldrd	r12, lr, [r1, #12]
 80167ea: cd f8 08 a0                  	str.w	r10, [sp, #8]
 80167ee: 91 f8 20 30                  	ldrb.w	r3, [r1, #32]
 80167f2: d1 f8 08 a0                  	ldr.w	r10, [r1, #8]
 80167f6: cd e9 00 02                  	strd	r0, r2, [sp]
 80167fa: 4e f6 e8 30                  	movw	r0, #60392
 80167fe: c0 f6 01 00                  	movt	r0, #2049
 8016802: 0a 68                        	ldr	r2, [r1]
 8016804: 0b 90                        	str	r0, [sp, #44]
 8016806: 68 46                        	mov	r0, sp
 8016808: 49 68                        	ldr	r1, [r1, #4]
 801680a: 8d f8 30 30                  	strb.w	r3, [sp, #48]
 801680e: 06 ab                        	add	r3, sp, #24
 8016810: 0a 90                        	str	r0, [sp, #40]
 8016812: cd f8 24 b0                  	str.w	r11, [sp, #36]
 8016816: 83 e8 00 54                  	stm.w	r3, {r10, r12, lr}
 801681a: cd e9 04 21                  	strd	r2, r1, [sp, #16]
 801681e: 29 46                        	mov	r1, r5
 8016820: 32 46                        	mov	r2, r6
 8016822: ff f7 23 fe                  	bl	#-954
 8016826: 70 b9                        	cbnz	r0, #28
 8016828: 4e f6 db 31                  	movw	r1, #60379
 801682c: 68 46                        	mov	r0, sp
 801682e: c0 f6 01 01                  	movt	r1, #2049
 8016832: 02 22                        	movs	r2, #2
 8016834: ff f7 1a fe                  	bl	#-972
 8016838: 28 b9                        	cbnz	r0, #10
 801683a: b8 68                        	ldr	r0, [r7, #8]
 801683c: 04 a9                        	add	r1, sp, #16
 801683e: c2 68                        	ldr	r2, [r0, #12]
 8016840: 40 46                        	mov	r0, r8
 8016842: 90 47                        	blx	r2
 8016844: 40 b1                        	cbz	r0, #16
 8016846: 01 20                        	movs	r0, #1
 8016848: 20 71                        	strb	r0, [r4, #4]
 801684a: 20 46                        	mov	r0, r4
 801684c: 84 f8 05 90                  	strb.w	r9, [r4, #5]
 8016850: 0d b0                        	add	sp, #52
 8016852: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 8016856: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 8016858: dd e9 0a 01                  	ldrd	r0, r1, [sp, #40]
 801685c: 02 22                        	movs	r2, #2
 801685e: cb 68                        	ldr	r3, [r1, #12]
 8016860: 4e f6 00 41                  	movw	r1, #60416
 8016864: c0 f6 01 01                  	movt	r1, #2049
 8016868: 98 47                        	blx	r3
 801686a: ed e7                        	b	#-38 <_ZN4core3fmt8builders11DebugStruct5field17h664097e0c91ac2c9E+0x11c>

0801686c core::fmt::Write::write_char::hf0da9ef0d5b9638c:
 801686c: 80 b5                        	push	{r7, lr}
 801686e: 6f 46                        	mov	r7, sp
 8016870: 82 b0                        	sub	sp, #8
 8016872: 8c 46                        	mov	r12, r1
 8016874: 00 21                        	movs	r1, #0
 8016876: bc f1 80 0f                  	cmp.w	r12, #128
 801687a: 01 91                        	str	r1, [sp, #4]
 801687c: 07 d2                        	bhs	#14 <_ZN4core3fmt5Write10write_char17hf0da9ef0d5b9638cE+0x26>
 801687e: 8d f8 04 c0                  	strb.w	r12, [sp, #4]
 8016882: 01 a9                        	add	r1, sp, #4
 8016884: 01 22                        	movs	r2, #1
 8016886: ff f7 f1 fd                  	bl	#-1054
 801688a: 02 b0                        	add	sp, #8
 801688c: 80 bd                        	pop	{r7, pc}
 801688e: bc f5 00 6f                  	cmp.w	r12, #2048
 8016892: 0f d2                        	bhs	#30 <_ZN4core3fmt5Write10write_char17hf0da9ef0d5b9638cE+0x4c>
 8016894: 02 22                        	movs	r2, #2
 8016896: 61 46                        	mov	r1, r12
 8016898: 62 f3 9f 11                  	bfi	r1, r2, #6, #26
 801689c: 8d f8 05 10                  	strb.w	r1, [sp, #5]
 80168a0: c0 21                        	movs	r1, #192
 80168a2: 41 ea 9c 11                  	orr.w	r1, r1, r12, lsr #6
 80168a6: 8d f8 04 10                  	strb.w	r1, [sp, #4]
 80168aa: 01 a9                        	add	r1, sp, #4
 80168ac: ff f7 de fd                  	bl	#-1092
 80168b0: 02 b0                        	add	sp, #8
 80168b2: 80 bd                        	pop	{r7, pc}
 80168b4: 02 22                        	movs	r2, #2
 80168b6: 63 46                        	mov	r3, r12
 80168b8: 01 a9                        	add	r1, sp, #4
 80168ba: 62 f3 9f 13                  	bfi	r3, r2, #6, #26
 80168be: bc f5 80 3f                  	cmp.w	r12, #65536
 80168c2: 11 d2                        	bhs	#34 <_ZN4core3fmt5Write10write_char17hf0da9ef0d5b9638cE+0x80>
 80168c4: 8d f8 06 30                  	strb.w	r3, [sp, #6]
 80168c8: 4f ea 9c 13                  	lsr.w	r3, r12, #6
 80168cc: 62 f3 9f 13                  	bfi	r3, r2, #6, #26
 80168d0: e0 22                        	movs	r2, #224
 80168d2: 42 ea 1c 32                  	orr.w	r2, r2, r12, lsr #12
 80168d6: 8d f8 04 20                  	strb.w	r2, [sp, #4]
 80168da: 8d f8 05 30                  	strb.w	r3, [sp, #5]
 80168de: 03 22                        	movs	r2, #3
 80168e0: ff f7 c4 fd                  	bl	#-1144
 80168e4: 02 b0                        	add	sp, #8
 80168e6: 80 bd                        	pop	{r7, pc}
 80168e8: 8d f8 07 30                  	strb.w	r3, [sp, #7]
 80168ec: 4f ea 9c 13                  	lsr.w	r3, r12, #6
 80168f0: 62 f3 9f 13                  	bfi	r3, r2, #6, #26
 80168f4: 8d f8 06 30                  	strb.w	r3, [sp, #6]
 80168f8: 4f ea 1c 33                  	lsr.w	r3, r12, #12
 80168fc: 62 f3 9f 13                  	bfi	r3, r2, #6, #26
 8016900: f0 22                        	movs	r2, #240
 8016902: 42 ea 9c 42                  	orr.w	r2, r2, r12, lsr #18
 8016906: 8d f8 04 20                  	strb.w	r2, [sp, #4]
 801690a: 04 22                        	movs	r2, #4
 801690c: 8d f8 05 30                  	strb.w	r3, [sp, #5]
 8016910: ff f7 ac fd                  	bl	#-1192
 8016914: 02 b0                        	add	sp, #8
 8016916: 80 bd                        	pop	{r7, pc}

08016918 core::fmt::Write::write_fmt::h24696d359e956d96:
 8016918: f0 b5                        	push	{r4, r5, r6, r7, lr}
 801691a: 03 af                        	add	r7, sp, #12
 801691c: 4d f8 04 bd                  	str	r11, [sp, #-4]!
 8016920: 88 b0                        	sub	sp, #32
 8016922: 01 90                        	str	r0, [sp, #4]
 8016924: 02 aa                        	add	r2, sp, #8
 8016926: 91 e8 78 50                  	ldm.w	r1, {r3, r4, r5, r6, r12, lr}
 801692a: 4e f6 04 41                  	movw	r1, #60420
 801692e: 10 46                        	mov	r0, r2
 8016930: c0 f6 01 01                  	movt	r1, #2049
 8016934: 80 e8 78 50                  	stm.w	r0, {r3, r4, r5, r6, r12, lr}
 8016938: 01 a8                        	add	r0, sp, #4
 801693a: ff f7 a3 fc                  	bl	#-1722
 801693e: 08 b0                        	add	sp, #32
 8016940: 5d f8 04 bb                  	ldr	r11, [sp], #4
 8016944: f0 bd                        	pop	{r4, r5, r6, r7, pc}

08016946 _$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$::write_str::h40e81db21a3a34d2:
 8016946: 00 68                        	ldr	r0, [r0]
 8016948: ff f7 90 bd                  	b.w	#-1248 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h86e2276038ee2847E+0x4>

0801694c _$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$::write_char::h0507eca6fdeeb8e9:
 801694c: 80 b5                        	push	{r7, lr}
 801694e: 6f 46                        	mov	r7, sp
 8016950: 82 b0                        	sub	sp, #8
 8016952: 00 68                        	ldr	r0, [r0]
 8016954: 8c 46                        	mov	r12, r1
 8016956: 00 21                        	movs	r1, #0
 8016958: bc f1 80 0f                  	cmp.w	r12, #128
 801695c: 01 91                        	str	r1, [sp, #4]
 801695e: 07 d2                        	bhs	#14 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h0507eca6fdeeb8e9E+0x28>
 8016960: 8d f8 04 c0                  	strb.w	r12, [sp, #4]
 8016964: 01 a9                        	add	r1, sp, #4
 8016966: 01 22                        	movs	r2, #1
 8016968: ff f7 80 fd                  	bl	#-1280
 801696c: 02 b0                        	add	sp, #8
 801696e: 80 bd                        	pop	{r7, pc}
 8016970: bc f5 00 6f                  	cmp.w	r12, #2048
 8016974: 0f d2                        	bhs	#30 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h0507eca6fdeeb8e9E+0x4e>
 8016976: 02 22                        	movs	r2, #2
 8016978: 61 46                        	mov	r1, r12
 801697a: 62 f3 9f 11                  	bfi	r1, r2, #6, #26
 801697e: 8d f8 05 10                  	strb.w	r1, [sp, #5]
 8016982: c0 21                        	movs	r1, #192
 8016984: 41 ea 9c 11                  	orr.w	r1, r1, r12, lsr #6
 8016988: 8d f8 04 10                  	strb.w	r1, [sp, #4]
 801698c: 01 a9                        	add	r1, sp, #4
 801698e: ff f7 6d fd                  	bl	#-1318
 8016992: 02 b0                        	add	sp, #8
 8016994: 80 bd                        	pop	{r7, pc}
 8016996: 02 22                        	movs	r2, #2
 8016998: 63 46                        	mov	r3, r12
 801699a: 01 a9                        	add	r1, sp, #4
 801699c: 62 f3 9f 13                  	bfi	r3, r2, #6, #26
 80169a0: bc f5 80 3f                  	cmp.w	r12, #65536
 80169a4: 11 d2                        	bhs	#34 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h0507eca6fdeeb8e9E+0x82>
 80169a6: 8d f8 06 30                  	strb.w	r3, [sp, #6]
 80169aa: 4f ea 9c 13                  	lsr.w	r3, r12, #6
 80169ae: 62 f3 9f 13                  	bfi	r3, r2, #6, #26
 80169b2: e0 22                        	movs	r2, #224
 80169b4: 42 ea 1c 32                  	orr.w	r2, r2, r12, lsr #12
 80169b8: 8d f8 04 20                  	strb.w	r2, [sp, #4]
 80169bc: 8d f8 05 30                  	strb.w	r3, [sp, #5]
 80169c0: 03 22                        	movs	r2, #3
 80169c2: ff f7 53 fd                  	bl	#-1370
 80169c6: 02 b0                        	add	sp, #8
 80169c8: 80 bd                        	pop	{r7, pc}
 80169ca: 8d f8 07 30                  	strb.w	r3, [sp, #7]
 80169ce: 4f ea 9c 13                  	lsr.w	r3, r12, #6
 80169d2: 62 f3 9f 13                  	bfi	r3, r2, #6, #26
 80169d6: 8d f8 06 30                  	strb.w	r3, [sp, #6]
 80169da: 4f ea 1c 33                  	lsr.w	r3, r12, #12
 80169de: 62 f3 9f 13                  	bfi	r3, r2, #6, #26
 80169e2: f0 22                        	movs	r2, #240
 80169e4: 42 ea 9c 42                  	orr.w	r2, r2, r12, lsr #18
 80169e8: 8d f8 04 20                  	strb.w	r2, [sp, #4]
 80169ec: 04 22                        	movs	r2, #4
 80169ee: 8d f8 05 30                  	strb.w	r3, [sp, #5]
 80169f2: ff f7 3b fd                  	bl	#-1418
 80169f6: 02 b0                        	add	sp, #8
 80169f8: 80 bd                        	pop	{r7, pc}

080169fa _$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$::write_fmt::h887580ce43eac08c:
 80169fa: f0 b5                        	push	{r4, r5, r6, r7, lr}
 80169fc: 03 af                        	add	r7, sp, #12
 80169fe: 4d f8 04 bd                  	str	r11, [sp, #-4]!
 8016a02: 88 b0                        	sub	sp, #32
 8016a04: 00 68                        	ldr	r0, [r0]
 8016a06: 02 aa                        	add	r2, sp, #8
 8016a08: 01 90                        	str	r0, [sp, #4]
 8016a0a: 91 e8 78 50                  	ldm.w	r1, {r3, r4, r5, r6, r12, lr}
 8016a0e: 10 46                        	mov	r0, r2
 8016a10: 4e f6 04 41                  	movw	r1, #60420
 8016a14: c0 f6 01 01                  	movt	r1, #2049
 8016a18: 80 e8 78 50                  	stm.w	r0, {r3, r4, r5, r6, r12, lr}
 8016a1c: 01 a8                        	add	r0, sp, #4
 8016a1e: ff f7 31 fc                  	bl	#-1950
 8016a22: 08 b0                        	add	sp, #32
 8016a24: 5d f8 04 bb                  	ldr	r11, [sp], #4
 8016a28: f0 bd                        	pop	{r4, r5, r6, r7, pc}

08016a2a core::fmt::builders::DebugTuple::field::h0c3a0249e70e3d92:
 8016a2a: f0 b5                        	push	{r4, r5, r6, r7, lr}
 8016a2c: 03 af                        	add	r7, sp, #12
 8016a2e: 2d e9 00 0b                  	push.w	{r8, r9, r11}
 8016a32: 8e b0                        	sub	sp, #56
 8016a34: 04 46                        	mov	r4, r0
 8016a36: 00 7a                        	ldrb	r0, [r0, #8]
 8016a38: 48 b1                        	cbz	r0, #18
 8016a3a: 01 20                        	movs	r0, #1
 8016a3c: 61 68                        	ldr	r1, [r4, #4]
 8016a3e: 20 72                        	strb	r0, [r4, #8]
 8016a40: 48 1c                        	adds	r0, r1, #1
 8016a42: 60 60                        	str	r0, [r4, #4]
 8016a44: 20 46                        	mov	r0, r4
 8016a46: 0e b0                        	add	sp, #56
 8016a48: bd e8 00 0b                  	pop.w	{r8, r9, r11}
 8016a4c: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 8016a4e: 16 46                        	mov	r6, r2
 8016a50: 0d 46                        	mov	r5, r1
 8016a52: d4 e9 00 12                  	ldrd	r1, r2, [r4]
 8016a56: 08 78                        	ldrb	r0, [r1]
 8016a58: 40 07                        	lsls	r0, r0, #29
 8016a5a: 19 d4                        	bmi	#50 <_ZN4core3fmt8builders10DebugTuple5field17h0c3a0249e70e3d92E+0x6a>
 8016a5c: d1 e9 06 03                  	ldrd	r0, r3, [r1, #24]
 8016a60: 4e f6 d4 41                  	movw	r1, #60628
 8016a64: 4e f6 1e 4c                  	movw	r12, #60446
 8016a68: c0 f6 01 01                  	movt	r1, #2049
 8016a6c: 00 2a                        	cmp	r2, #0
 8016a6e: c0 f6 01 0c                  	movt	r12, #2049
 8016a72: 08 bf                        	it	eq
 8016a74: 61 46                        	moveq	r1, r12
 8016a76: db 68                        	ldr	r3, [r3, #12]
 8016a78: 4f f0 02 02                  	mov.w	r2, #2
 8016a7c: 08 bf                        	it	eq
 8016a7e: 01 22                        	moveq	r2, #1
 8016a80: 98 47                        	blx	r3
 8016a82: 00 28                        	cmp	r0, #0
 8016a84: d9 d1                        	bne	#-78 <_ZN4core3fmt8builders10DebugTuple5field17h0c3a0249e70e3d92E+0x14>
 8016a86: f2 68                        	ldr	r2, [r6, #12]
 8016a88: 28 46                        	mov	r0, r5
 8016a8a: 21 68                        	ldr	r1, [r4]
 8016a8c: 90 47                        	blx	r2
 8016a8e: d5 e7                        	b	#-86 <_ZN4core3fmt8builders10DebugTuple5field17h0c3a0249e70e3d92E+0x16>
 8016a90: 5a b9                        	cbnz	r2, #22
 8016a92: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8016a96: 02 22                        	movs	r2, #2
 8016a98: cb 68                        	ldr	r3, [r1, #12]
 8016a9a: 4e f6 1f 41                  	movw	r1, #60447
 8016a9e: c0 f6 01 01                  	movt	r1, #2049
 8016aa2: 98 47                        	blx	r3
 8016aa4: 00 28                        	cmp	r0, #0
 8016aa6: c8 d1                        	bne	#-112 <_ZN4core3fmt8builders10DebugTuple5field17h0c3a0249e70e3d92E+0x14>
 8016aa8: 21 68                        	ldr	r1, [r4]
 8016aaa: 01 20                        	movs	r0, #1
 8016aac: cb 69                        	ldr	r3, [r1, #28]
 8016aae: 07 f8 3d 0c                  	strb	r0, [r7, #-61]
 8016ab2: a7 f1 3d 02                  	sub.w	r2, r7, #61
 8016ab6: d1 e9 05 80                  	ldrd	r8, r0, [r1, #20]
 8016aba: d1 e9 03 ce                  	ldrd	r12, lr, [r1, #12]
 8016abe: 03 92                        	str	r2, [sp, #12]
 8016ac0: 91 f8 20 90                  	ldrb.w	r9, [r1, #32]
 8016ac4: 8a 68                        	ldr	r2, [r1, #8]
 8016ac6: cd e9 01 03                  	strd	r0, r3, [sp, #4]
 8016aca: 4e f6 e8 33                  	movw	r3, #60392
 8016ace: c0 f6 01 03                  	movt	r3, #2049
 8016ad2: 08 68                        	ldr	r0, [r1]
 8016ad4: 0c 93                        	str	r3, [sp, #48]
 8016ad6: 01 ab                        	add	r3, sp, #4
 8016ad8: 49 68                        	ldr	r1, [r1, #4]
 8016ada: 0b 93                        	str	r3, [sp, #44]
 8016adc: 05 ab                        	add	r3, sp, #20
 8016ade: 8d f8 34 90                  	strb.w	r9, [sp, #52]
 8016ae2: cd f8 28 80                  	str.w	r8, [sp, #40]
 8016ae6: 83 e8 07 50                  	stm.w	r3, {r0, r1, r2, r12, lr}
 8016aea: 05 a9                        	add	r1, sp, #20
 8016aec: 28 46                        	mov	r0, r5
 8016aee: f2 68                        	ldr	r2, [r6, #12]
 8016af0: 90 47                        	blx	r2
 8016af2: 00 28                        	cmp	r0, #0
 8016af4: a1 d1                        	bne	#-190 <_ZN4core3fmt8builders10DebugTuple5field17h0c3a0249e70e3d92E+0x14>
 8016af6: dd e9 0b 01                  	ldrd	r0, r1, [sp, #44]
 8016afa: 02 22                        	movs	r2, #2
 8016afc: cb 68                        	ldr	r3, [r1, #12]
 8016afe: 4e f6 00 41                  	movw	r1, #60416
 8016b02: c0 f6 01 01                  	movt	r1, #2049
 8016b06: 98 47                        	blx	r3
 8016b08: 98 e7                        	b	#-208 <_ZN4core3fmt8builders10DebugTuple5field17h0c3a0249e70e3d92E+0x16>

08016b0a core::fmt::builders::DebugSet::entry::h6da3138a3c5bceef:
 8016b0a: f0 b5                        	push	{r4, r5, r6, r7, lr}
 8016b0c: 03 af                        	add	r7, sp, #12
 8016b0e: 2d e9 00 07                  	push.w	{r8, r9, r10}
 8016b12: 8e b0                        	sub	sp, #56
 8016b14: 04 46                        	mov	r4, r0
 8016b16: 00 79                        	ldrb	r0, [r0, #4]
 8016b18: 4f f0 01 09                  	mov.w	r9, #1
 8016b1c: 01 25                        	movs	r5, #1
 8016b1e: 00 28                        	cmp	r0, #0
 8016b20: 56 d1                        	bne	#172 <_ZN4core3fmt8builders8DebugSet5entry17h6da3138a3c5bceefE+0xca>
 8016b22: 88 46                        	mov	r8, r1
 8016b24: 21 68                        	ldr	r1, [r4]
 8016b26: 16 46                        	mov	r6, r2
 8016b28: 60 79                        	ldrb	r0, [r4, #5]
 8016b2a: 0a 78                        	ldrb	r2, [r1]
 8016b2c: 52 07                        	lsls	r2, r2, #29
 8016b2e: 0f d4                        	bmi	#30 <_ZN4core3fmt8builders8DebugSet5entry17h6da3138a3c5bceefE+0x4a>
 8016b30: 50 b1                        	cbz	r0, #20
 8016b32: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8016b36: 02 22                        	movs	r2, #2
 8016b38: cb 68                        	ldr	r3, [r1, #12]
 8016b3a: 4e f6 d4 41                  	movw	r1, #60628
 8016b3e: c0 f6 01 01                  	movt	r1, #2049
 8016b42: 98 47                        	blx	r3
 8016b44: c0 bb                        	cbnz	r0, #112
 8016b46: 21 68                        	ldr	r1, [r4]
 8016b48: f2 68                        	ldr	r2, [r6, #12]
 8016b4a: 40 46                        	mov	r0, r8
 8016b4c: 90 47                        	blx	r2
 8016b4e: 3e e0                        	b	#124 <_ZN4core3fmt8builders8DebugSet5entry17h6da3138a3c5bceefE+0xc8>
 8016b50: 58 b9                        	cbnz	r0, #22
 8016b52: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8016b56: 01 22                        	movs	r2, #1
 8016b58: cb 68                        	ldr	r3, [r1, #12]
 8016b5a: 4e f6 22 41                  	movw	r1, #60450
 8016b5e: c0 f6 01 01                  	movt	r1, #2049
 8016b62: 01 25                        	movs	r5, #1
 8016b64: 98 47                        	blx	r3
 8016b66: 98 bb                        	cbnz	r0, #102
 8016b68: 21 68                        	ldr	r1, [r4]
 8016b6a: 01 20                        	movs	r0, #1
 8016b6c: ca 69                        	ldr	r2, [r1, #28]
 8016b6e: 07 f8 3d 0c                  	strb	r0, [r7, #-61]
 8016b72: a7 f1 3d 03                  	sub.w	r3, r7, #61
 8016b76: d1 e9 05 a5                  	ldrd	r10, r5, [r1, #20]
 8016b7a: d1 e9 03 ce                  	ldrd	r12, lr, [r1, #12]
 8016b7e: 03 93                        	str	r3, [sp, #12]
 8016b80: 91 f8 20 00                  	ldrb.w	r0, [r1, #32]
 8016b84: 8b 68                        	ldr	r3, [r1, #8]
 8016b86: cd e9 01 52                  	strd	r5, r2, [sp, #4]
 8016b8a: 4e f6 e8 35                  	movw	r5, #60392
 8016b8e: c0 f6 01 05                  	movt	r5, #2049
 8016b92: 0a 68                        	ldr	r2, [r1]
 8016b94: 0c 95                        	str	r5, [sp, #48]
 8016b96: 01 ad                        	add	r5, sp, #4
 8016b98: 49 68                        	ldr	r1, [r1, #4]
 8016b9a: 8d f8 34 00                  	strb.w	r0, [sp, #52]
 8016b9e: 07 a8                        	add	r0, sp, #28
 8016ba0: 0b 95                        	str	r5, [sp, #44]
 8016ba2: cd f8 28 a0                  	str.w	r10, [sp, #40]
 8016ba6: 80 e8 08 50                  	stm.w	r0, {r3, r12, lr}
 8016baa: 40 46                        	mov	r0, r8
 8016bac: cd e9 05 21                  	strd	r2, r1, [sp, #20]
 8016bb0: 05 a9                        	add	r1, sp, #20
 8016bb2: f2 68                        	ldr	r2, [r6, #12]
 8016bb4: 90 47                        	blx	r2
 8016bb6: 08 b1                        	cbz	r0, #2
 8016bb8: 01 25                        	movs	r5, #1
 8016bba: 09 e0                        	b	#18 <_ZN4core3fmt8builders8DebugSet5entry17h6da3138a3c5bceefE+0xca>
 8016bbc: dd e9 0b 01                  	ldrd	r0, r1, [sp, #44]
 8016bc0: 02 22                        	movs	r2, #2
 8016bc2: cb 68                        	ldr	r3, [r1, #12]
 8016bc4: 4e f6 00 41                  	movw	r1, #60416
 8016bc8: c0 f6 01 01                  	movt	r1, #2049
 8016bcc: 98 47                        	blx	r3
 8016bce: 05 46                        	mov	r5, r0
 8016bd0: 84 f8 05 90                  	strb.w	r9, [r4, #5]
 8016bd4: 20 46                        	mov	r0, r4
 8016bd6: 25 71                        	strb	r5, [r4, #4]
 8016bd8: 0e b0                        	add	sp, #56
 8016bda: bd e8 00 07                  	pop.w	{r8, r9, r10}
 8016bde: f0 bd                        	pop	{r4, r5, r6, r7, pc}

08016be0 _$LT$core..time..Duration$u20$as$u20$core..fmt..Debug$GT$::fmt::hdfe71d1866764a5c:
 8016be0: b0 b5                        	push	{r4, r5, r7, lr}
 8016be2: 02 af                        	add	r7, sp, #8
 8016be4: 88 b0                        	sub	sp, #32
 8016be6: 05 46                        	mov	r5, r0
 8016be8: 08 78                        	ldrb	r0, [r1]
 8016bea: 0c 46                        	mov	r4, r1
 8016bec: c0 07                        	lsls	r0, r0, #31
 8016bee: 16 d0                        	beq	#44 <_ZN57_$LT$core..time..Duration$u20$as$u20$core..fmt..Debug$GT$3fmt17hdfe71d1866764a5cE+0x42>
 8016bf0: 4e f6 b4 43                  	movw	r3, #60596
 8016bf4: 00 22                        	movs	r2, #0
 8016bf6: c0 f6 01 03                  	movt	r3, #2049
 8016bfa: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8016bfe: 07 92                        	str	r2, [sp, #28]
 8016c00: 06 93                        	str	r3, [sp, #24]
 8016c02: cd e9 04 22                  	strd	r2, r2, [sp, #16]
 8016c06: 01 22                        	movs	r2, #1
 8016c08: 03 92                        	str	r2, [sp, #12]
 8016c0a: 4e f6 54 42                  	movw	r2, #60500
 8016c0e: c0 f6 01 02                  	movt	r2, #2049
 8016c12: 02 92                        	str	r2, [sp, #8]
 8016c14: 02 aa                        	add	r2, sp, #8
 8016c16: ff f7 35 fb                  	bl	#-2454
 8016c1a: 00 28                        	cmp	r0, #0
 8016c1c: 71 d1                        	bne	#226 <_ZN57_$LT$core..time..Duration$u20$as$u20$core..fmt..Debug$GT$3fmt17hdfe71d1866764a5cE+0x126>
 8016c1e: d5 e9 00 13                  	ldrd	r1, r3, [r5]
 8016c22: aa 68                        	ldr	r2, [r5, #8]
 8016c24: 51 ea 03 00                  	orrs.w	r0, r1, r3
 8016c28: 17 d0                        	beq	#46 <_ZN57_$LT$core..time..Duration$u20$as$u20$core..fmt..Debug$GT$3fmt17hdfe71d1866764a5cE+0x7e>
 8016c2a: 4e f2 00 10                  	movw	r0, #57600
 8016c2e: c0 f2 f5 50                  	movt	r0, #1525
 8016c32: cd e9 00 20                  	strd	r2, r0, [sp]
 8016c36: 20 46                        	mov	r0, r4
 8016c38: 0a 46                        	mov	r2, r1
 8016c3a: 00 f0 71 f8                  	bl	#226
 8016c3e: 00 28                        	cmp	r0, #0
 8016c40: 5f d1                        	bne	#190 <_ZN57_$LT$core..time..Duration$u20$as$u20$core..fmt..Debug$GT$3fmt17hdfe71d1866764a5cE+0x126>
 8016c42: 4e f6 5c 41                  	movw	r1, #60508
 8016c46: d4 e9 06 02                  	ldrd	r0, r2, [r4, #24]
 8016c4a: d3 68                        	ldr	r3, [r2, #12]
 8016c4c: c0 f6 01 01                  	movt	r1, #2049
 8016c50: 01 22                        	movs	r2, #1
 8016c52: 08 b0                        	add	sp, #32
 8016c54: bd e8 b0 40                  	pop.w	{r4, r5, r7, lr}
 8016c58: 18 47                        	bx	r3
 8016c5a: 44 f2 3f 20                  	movw	r0, #16959
 8016c5e: c0 f2 0f 00                  	movt	r0, #15
 8016c62: 82 42                        	cmp	r2, r0
 8016c64: 1f d9                        	bls	#62 <_ZN57_$LT$core..time..Duration$u20$as$u20$core..fmt..Debug$GT$3fmt17hdfe71d1866764a5cE+0xca>
 8016c66: 4d f6 83 60                  	movw	r0, #56963
 8016c6a: 00 23                        	movs	r3, #0
 8016c6c: c4 f2 1b 30                  	movt	r0, #17179
 8016c70: a2 fb 00 01                  	umull	r0, r1, r2, r0
 8016c74: 4b f6 c0 50                  	movw	r0, #48576
 8016c78: cf f6 f0 70                  	movt	r0, #65520
 8016c7c: 89 0c                        	lsrs	r1, r1, #18
 8016c7e: 01 fb 00 20                  	mla	r0, r1, r0, r2
 8016c82: 48 f2 a0 62                  	movw	r2, #34464
 8016c86: c0 f2 01 02                  	movt	r2, #1
 8016c8a: cd e9 00 02                  	strd	r0, r2, [sp]
 8016c8e: 20 46                        	mov	r0, r4
 8016c90: 0a 46                        	mov	r2, r1
 8016c92: 00 f0 45 f8                  	bl	#138
 8016c96: a0 bb                        	cbnz	r0, #104
 8016c98: d4 e9 06 02                  	ldrd	r0, r2, [r4, #24]
 8016c9c: 4e f6 5d 41                  	movw	r1, #60509
 8016ca0: c0 f6 01 01                  	movt	r1, #2049
 8016ca4: 36 e0                        	b	#108 <_ZN57_$LT$core..time..Duration$u20$as$u20$core..fmt..Debug$GT$3fmt17hdfe71d1866764a5cE+0x138>
 8016ca6: d0 08                        	lsrs	r0, r2, #3
 8016ca8: 7c 28                        	cmp	r0, #124
 8016caa: 21 d9                        	bls	#66 <_ZN57_$LT$core..time..Duration$u20$as$u20$core..fmt..Debug$GT$3fmt17hdfe71d1866764a5cE+0x114>
 8016cac: 44 f6 d3 50                  	movw	r0, #19923
 8016cb0: 00 23                        	movs	r3, #0
 8016cb2: c1 f2 62 00                  	movt	r0, #4194
 8016cb6: a2 fb 00 01                  	umull	r0, r1, r2, r0
 8016cba: 4f f6 18 40                  	movw	r0, #64536
 8016cbe: cf f6 ff 70                  	movt	r0, #65535
 8016cc2: 89 09                        	lsrs	r1, r1, #6
 8016cc4: 01 fb 00 20                  	mla	r0, r1, r0, r2
 8016cc8: 64 22                        	movs	r2, #100
 8016cca: cd e9 00 02                  	strd	r0, r2, [sp]
 8016cce: 20 46                        	mov	r0, r4
 8016cd0: 0a 46                        	mov	r2, r1
 8016cd2: 00 f0 25 f8                  	bl	#74
 8016cd6: a0 b9                        	cbnz	r0, #40
 8016cd8: 4e f6 5f 41                  	movw	r1, #60511
 8016cdc: d4 e9 06 02                  	ldrd	r0, r2, [r4, #24]
 8016ce0: d3 68                        	ldr	r3, [r2, #12]
 8016ce2: c0 f6 01 01                  	movt	r1, #2049
 8016ce6: 03 22                        	movs	r2, #3
 8016ce8: 08 b0                        	add	sp, #32
 8016cea: bd e8 b0 40                  	pop.w	{r4, r5, r7, lr}
 8016cee: 18 47                        	bx	r3
 8016cf0: 01 20                        	movs	r0, #1
 8016cf2: 00 21                        	movs	r1, #0
 8016cf4: cd e9 00 10                  	strd	r1, r0, [sp]
 8016cf8: 20 46                        	mov	r0, r4
 8016cfa: 00 23                        	movs	r3, #0
 8016cfc: 00 f0 10 f8                  	bl	#32
 8016d00: 10 b1                        	cbz	r0, #4
 8016d02: 01 20                        	movs	r0, #1
 8016d04: 08 b0                        	add	sp, #32
 8016d06: b0 bd                        	pop	{r4, r5, r7, pc}
 8016d08: 4e f6 62 41                  	movw	r1, #60514
 8016d0c: d4 e9 06 02                  	ldrd	r0, r2, [r4, #24]
 8016d10: c0 f6 01 01                  	movt	r1, #2049
 8016d14: d3 68                        	ldr	r3, [r2, #12]
 8016d16: 02 22                        	movs	r2, #2
 8016d18: 08 b0                        	add	sp, #32
 8016d1a: bd e8 b0 40                  	pop.w	{r4, r5, r7, lr}
 8016d1e: 18 47                        	bx	r3

08016d20 _$LT$core..time..Duration$u20$as$u20$core..fmt..Debug$GT$::fmt::fmt_decimal::hd97dfe744df77e64:
 8016d20: f0 b5                        	push	{r4, r5, r6, r7, lr}
 8016d22: 03 af                        	add	r7, sp, #12
 8016d24: 2d e9 00 0f                  	push.w	{r8, r9, r10, r11}
 8016d28: 99 b0                        	sub	sp, #100
 8016d2a: cd e9 04 23                  	strd	r2, r3, [sp, #16]
 8016d2e: 30 21                        	movs	r1, #48
 8016d30: bd 68                        	ldr	r5, [r7, #8]
 8016d32: d0 e9 04 eb                  	ldrd	lr, r11, [r0, #16]
 8016d36: 8d f8 24 10                  	strb.w	r1, [sp, #36]
 8016d3a: 4f f0 30 31                  	mov.w	r1, #808464432
 8016d3e: cd e9 07 11                  	strd	r1, r1, [sp, #28]
 8016d42: 25 b3                        	cbz	r5, #72
 8016d44: fe 68                        	ldr	r6, [r7, #12]
 8016d46: 4c f6 cd 49                  	movw	r9, #52429
 8016d4a: 0d f1 1c 08                  	add.w	r8, sp, #28
 8016d4e: dc 46                        	mov	r12, r11
 8016d50: 00 24                        	movs	r4, #0
 8016d52: cc f6 cc 49                  	movt	r9, #52428
 8016d56: be f1 00 0f                  	cmp.w	lr, #0
 8016d5a: 08 bf                        	it	eq
 8016d5c: 4f f0 09 0c                  	moveq.w	r12, #9
 8016d60: a4 45                        	cmp	r12, r4
 8016d62: 16 d0                        	beq	#44 <_ZN57_$LT$core..time..Duration$u20$as$u20$core..fmt..Debug$GT$3fmt11fmt_decimal17hd97dfe744df77e64E+0x76>
 8016d64: 00 2e                        	cmp	r6, #0
 8016d66: 00 f0 d7 80                  	beq.w	#430 <_ZN57_$LT$core..time..Duration$u20$as$u20$core..fmt..Debug$GT$3fmt11fmt_decimal17hd97dfe744df77e64E+0x1fc>
 8016d6a: 09 2c                        	cmp	r4, #9
 8016d6c: 00 f0 dc 80                  	beq.w	#440 <_ZN57_$LT$core..time..Duration$u20$as$u20$core..fmt..Debug$GT$3fmt11fmt_decimal17hd97dfe744df77e64E+0x20c>
 8016d70: a6 fb 09 1a                  	umull	r1, r10, r6, r9
 8016d74: b5 fb f6 f1                  	udiv	r1, r5, r6
 8016d78: 01 fb 16 55                  	mls	r5, r1, r6, r5
 8016d7c: 30 31                        	adds	r1, #48
 8016d7e: 08 f8 04 10                  	strb.w	r1, [r8, r4]
 8016d82: 01 34                        	adds	r4, #1
 8016d84: 4f ea da 06                  	lsr.w	r6, r10, #3
 8016d88: 00 2d                        	cmp	r5, #0
 8016d8a: e9 d1                        	bne	#-46 <_ZN57_$LT$core..time..Duration$u20$as$u20$core..fmt..Debug$GT$3fmt11fmt_decimal17hd97dfe744df77e64E+0x44>
 8016d8c: 69 e0                        	b	#210 <_ZN57_$LT$core..time..Duration$u20$as$u20$core..fmt..Debug$GT$3fmt11fmt_decimal17hd97dfe744df77e64E+0x146>
 8016d8e: 00 24                        	movs	r4, #0
 8016d90: 67 e0                        	b	#206 <_ZN57_$LT$core..time..Duration$u20$as$u20$core..fmt..Debug$GT$3fmt11fmt_decimal17hd97dfe744df77e64E+0x146>
 8016d92: 06 eb 86 04                  	add.w	r4, r6, r6, lsl #2
 8016d96: a5 42                        	cmp	r5, r4
 8016d98: 62 d3                        	blo	#196 <_ZN57_$LT$core..time..Duration$u20$as$u20$core..fmt..Debug$GT$3fmt11fmt_decimal17hd97dfe744df77e64E+0x144>
 8016d9a: bc f1 00 0f                  	cmp.w	r12, #0
 8016d9e: 5a d0                        	beq	#180 <_ZN57_$LT$core..time..Duration$u20$as$u20$core..fmt..Debug$GT$3fmt11fmt_decimal17hd97dfe744df77e64E+0x13a>
 8016da0: ac f1 02 01                  	sub.w	r1, r12, #2
 8016da4: 02 91                        	str	r1, [sp, #8]
 8016da6: ac f1 01 01                  	sub.w	r1, r12, #1
 8016daa: a8 f1 02 0a                  	sub.w	r10, r8, #2
 8016dae: 03 91                        	str	r1, [sp, #12]
 8016db0: ac f1 03 01                  	sub.w	r1, r12, #3
 8016db4: 00 25                        	movs	r5, #0
 8016db6: 01 91                        	str	r1, [sp, #4]
 8016db8: ac f1 04 01                  	sub.w	r1, r12, #4
 8016dbc: 00 91                        	str	r1, [sp]
 8016dbe: 0a eb 0c 09                  	add.w	r9, r10, r12
 8016dc2: 30 26                        	movs	r6, #48
 8016dc4: 99 f8 01 40                  	ldrb.w	r4, [r9, #1]
 8016dc8: 39 2c                        	cmp	r4, #57
 8016dca: 38 bf                        	it	lo
 8016dcc: 66 1c                        	addlo	r6, r4, #1
 8016dce: 89 f8 01 60                  	strb.w	r6, [r9, #1]
 8016dd2: 4f f0 00 06                  	mov.w	r6, #0
 8016dd6: 38 bf                        	it	lo
 8016dd8: 01 26                        	movlo	r6, #1
 8016dda: 03 99                        	ldr	r1, [sp, #12]
 8016ddc: a9 42                        	cmp	r1, r5
 8016dde: 18 bf                        	it	ne
 8016de0: 38 2c                        	cmpne	r4, #56
 8016de2: 37 d9                        	bls	#110 <_ZN57_$LT$core..time..Duration$u20$as$u20$core..fmt..Debug$GT$3fmt11fmt_decimal17hd97dfe744df77e64E+0x138>
 8016de4: 1a f8 0c 40                  	ldrb.w	r4, [r10, r12]
 8016de8: 30 26                        	movs	r6, #48
 8016dea: 39 2c                        	cmp	r4, #57
 8016dec: 38 bf                        	it	lo
 8016dee: 66 1c                        	addlo	r6, r4, #1
 8016df0: 0a f8 0c 60                  	strb.w	r6, [r10, r12]
 8016df4: 4f f0 00 06                  	mov.w	r6, #0
 8016df8: 38 bf                        	it	lo
 8016dfa: 01 26                        	movlo	r6, #1
 8016dfc: 02 99                        	ldr	r1, [sp, #8]
 8016dfe: a9 42                        	cmp	r1, r5
 8016e00: 28 d0                        	beq	#80 <_ZN57_$LT$core..time..Duration$u20$as$u20$core..fmt..Debug$GT$3fmt11fmt_decimal17hd97dfe744df77e64E+0x138>
 8016e02: 39 2c                        	cmp	r4, #57
 8016e04: 26 d3                        	blo	#76 <_ZN57_$LT$core..time..Duration$u20$as$u20$core..fmt..Debug$GT$3fmt11fmt_decimal17hd97dfe744df77e64E+0x138>
 8016e06: 19 f8 01 4c                  	ldrb	r4, [r9, #-1]
 8016e0a: 30 26                        	movs	r6, #48
 8016e0c: 39 2c                        	cmp	r4, #57
 8016e0e: 38 bf                        	it	lo
 8016e10: 66 1c                        	addlo	r6, r4, #1
 8016e12: 09 f8 01 6c                  	strb	r6, [r9, #-1]
 8016e16: 4f f0 00 06                  	mov.w	r6, #0
 8016e1a: 38 bf                        	it	lo
 8016e1c: 01 26                        	movlo	r6, #1
 8016e1e: 01 99                        	ldr	r1, [sp, #4]
 8016e20: a9 42                        	cmp	r1, r5
 8016e22: 17 d0                        	beq	#46 <_ZN57_$LT$core..time..Duration$u20$as$u20$core..fmt..Debug$GT$3fmt11fmt_decimal17hd97dfe744df77e64E+0x138>
 8016e24: 39 2c                        	cmp	r4, #57
 8016e26: 15 d3                        	blo	#42 <_ZN57_$LT$core..time..Duration$u20$as$u20$core..fmt..Debug$GT$3fmt11fmt_decimal17hd97dfe744df77e64E+0x138>
 8016e28: 19 f8 02 8c                  	ldrb	r8, [r9, #-2]
 8016e2c: 30 24                        	movs	r4, #48
 8016e2e: 00 26                        	movs	r6, #0
 8016e30: b8 f1 39 0f                  	cmp.w	r8, #57
 8016e34: 38 bf                        	it	lo
 8016e36: 08 f1 01 04                  	addlo.w	r4, r8, #1
 8016e3a: 09 f8 02 4c                  	strb	r4, [r9, #-2]
 8016e3e: 38 bf                        	it	lo
 8016e40: 01 26                        	movlo	r6, #1
 8016e42: 00 99                        	ldr	r1, [sp]
 8016e44: a9 42                        	cmp	r1, r5
 8016e46: 1e bf                        	ittt	ne
 8016e48: aa f1 04 0a                  	subne.w	r10, r10, #4
 8016e4c: 04 35                        	addne	r5, #4
 8016e4e: b8 f1 38 0f                  	cmpne.w	r8, #56
 8016e52: b4 d8                        	bhi	#-152 <_ZN57_$LT$core..time..Duration$u20$as$u20$core..fmt..Debug$GT$3fmt11fmt_decimal17hd97dfe744df77e64E+0xa2>
 8016e54: 26 b9                        	cbnz	r6, #8
 8016e56: 51 1c                        	adds	r1, r2, #1
 8016e58: 04 91                        	str	r1, [sp, #16]
 8016e5a: 43 f1 00 01                  	adc	r1, r3, #0
 8016e5e: 05 91                        	str	r1, [sp, #20]
 8016e60: 64 46                        	mov	r4, r12
 8016e62: bb f1 09 0f                  	cmp.w	r11, #9
 8016e66: 59 46                        	mov	r1, r11
 8016e68: 28 bf                        	it	hs
 8016e6a: 09 21                        	movhs	r1, #9
 8016e6c: be f1 00 0f                  	cmp.w	lr, #0
 8016e70: 08 bf                        	it	eq
 8016e72: 21 46                        	moveq	r1, r4
 8016e74: 91 b3                        	cbz	r1, #100
 8016e76: 0a 29                        	cmp	r1, #10
 8016e78: 5b d2                        	bhs	#182 <_ZN57_$LT$core..time..Duration$u20$as$u20$core..fmt..Debug$GT$3fmt11fmt_decimal17hd97dfe744df77e64E+0x216>
 8016e7a: 07 aa                        	add	r2, sp, #28
 8016e7c: cd e9 0a 21                  	strd	r2, r1, [sp, #40]
 8016e80: be f1 00 0f                  	cmp.w	lr, #0
 8016e84: 08 bf                        	it	eq
 8016e86: a3 46                        	moveq	r11, r4
 8016e88: cd f8 30 b0                  	str.w	r11, [sp, #48]
 8016e8c: 45 f6 2d 22                  	movw	r2, #23085
 8016e90: d0 e9 06 31                  	ldrd	r3, r1, [r0, #24]
 8016e94: 0c a8                        	add	r0, sp, #48
 8016e96: 11 90                        	str	r0, [sp, #68]
 8016e98: 46 f2 79 20                  	movw	r0, #25209
 8016e9c: c0 f6 01 00                  	movt	r0, #2049
 8016ea0: c0 f6 01 02                  	movt	r2, #2049
 8016ea4: 10 90                        	str	r0, [sp, #64]
 8016ea6: 0a a8                        	add	r0, sp, #40
 8016ea8: 0f 90                        	str	r0, [sp, #60]
 8016eaa: 46 f6 3d 70                  	movw	r0, #28477
 8016eae: c0 f6 01 00                  	movt	r0, #2049
 8016eb2: 12 92                        	str	r2, [sp, #72]
 8016eb4: 0e 90                        	str	r0, [sp, #56]
 8016eb6: 04 a8                        	add	r0, sp, #16
 8016eb8: 0d 90                        	str	r0, [sp, #52]
 8016eba: 03 20                        	movs	r0, #3
 8016ebc: 4e f6 74 42                  	movw	r2, #60532
 8016ec0: 18 90                        	str	r0, [sp, #96]
 8016ec2: 0d a8                        	add	r0, sp, #52
 8016ec4: 17 90                        	str	r0, [sp, #92]
 8016ec6: 02 20                        	movs	r0, #2
 8016ec8: c0 f6 01 02                  	movt	r2, #2049
 8016ecc: 16 90                        	str	r0, [sp, #88]
 8016ece: cd e9 14 02                  	strd	r0, r2, [sp, #80]
 8016ed2: 4e f6 64 40                  	movw	r0, #60516
 8016ed6: c0 f6 01 00                  	movt	r0, #2049
 8016eda: 14 e0                        	b	#40 <_ZN57_$LT$core..time..Duration$u20$as$u20$core..fmt..Debug$GT$3fmt11fmt_decimal17hd97dfe744df77e64E+0x1ea>
 8016edc: d0 e9 06 31                  	ldrd	r3, r1, [r0, #24]
 8016ee0: 46 f6 3d 70                  	movw	r0, #28477
 8016ee4: c0 f6 01 00                  	movt	r0, #2049
 8016ee8: 0d aa                        	add	r2, sp, #52
 8016eea: 0e 90                        	str	r0, [sp, #56]
 8016eec: 04 a8                        	add	r0, sp, #16
 8016eee: 0d 90                        	str	r0, [sp, #52]
 8016ef0: 01 20                        	movs	r0, #1
 8016ef2: 17 92                        	str	r2, [sp, #92]
 8016ef4: 00 22                        	movs	r2, #0
 8016ef6: 18 90                        	str	r0, [sp, #96]
 8016ef8: 16 92                        	str	r2, [sp, #88]
 8016efa: cd e9 14 02                  	strd	r0, r2, [sp, #80]
 8016efe: 4f f2 a0 40                  	movw	r0, #62624
 8016f02: c0 f6 01 00                  	movt	r0, #2049
 8016f06: 13 aa                        	add	r2, sp, #76
 8016f08: 13 90                        	str	r0, [sp, #76]
 8016f0a: 18 46                        	mov	r0, r3
 8016f0c: ff f7 ba f9                  	bl	#-3212
 8016f10: 19 b0                        	add	sp, #100
 8016f12: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 8016f16: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 8016f18: 4e f6 c0 30                  	movw	r0, #60352
 8016f1c: 19 21                        	movs	r1, #25
 8016f1e: c0 f6 01 00                  	movt	r0, #2049
 8016f22: ff f7 99 fa                  	bl	#-2766
 8016f26: fe de                        	trap
 8016f28: 09 20                        	movs	r0, #9
 8016f2a: 09 21                        	movs	r1, #9
 8016f2c: fe f7 73 ff                  	bl	#-4378
 8016f30: fe de                        	trap
 8016f32: 08 46                        	mov	r0, r1
 8016f34: 09 21                        	movs	r1, #9
 8016f36: fe f7 6e ff                  	bl	#-4388
 8016f3a: fe de                        	trap

08016f3c core::fmt::num::imp::_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$::fmt::ha1a36a310a39c053:
 8016f3c: f0 b5                        	push	{r4, r5, r6, r7, lr}
 8016f3e: 03 af                        	add	r7, sp, #12
 8016f40: 2d e9 00 0f                  	push.w	{r8, r9, r10, r11}
 8016f44: 8d b0                        	sub	sp, #52
 8016f46: d0 e9 00 56                  	ldrd	r5, r6, [r0]
 8016f4a: 42 f2 10 70                  	movw	r0, #10000
 8016f4e: 48 f2 1f 5e                  	movw	lr, #34079
 8016f52: 4e f6 ed 28                  	movw	r8, #60141
 8016f56: 28 1a                        	subs	r0, r5, r0
 8016f58: 0c 46                        	mov	r4, r1
 8016f5a: 4f f6 9c 7c                  	movw	r12, #65436
 8016f5e: 76 f1 00 00                  	sbcs	r0, r6, #0
 8016f62: c5 f2 eb 1e                  	movt	lr, #20971
 8016f66: c0 f6 01 08                  	movt	r8, #2049
 8016f6a: 43 d3                        	blo	#134 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17ha1a36a310a39c053E+0xbc>
 8016f6c: 4e f2 ff 0b                  	movw	r11, #57599
 8016f70: 0d f1 0c 09                  	add.w	r9, sp, #12
 8016f74: c0 f2 f5 5b                  	movt	r11, #1525
 8016f78: 4f f0 00 0a                  	mov.w	r10, #0
 8016f7c: 02 94                        	str	r4, [sp, #8]
 8016f7e: 28 46                        	mov	r0, r5
 8016f80: 31 46                        	mov	r1, r6
 8016f82: 42 f2 10 72                  	movw	r2, #10000
 8016f86: 00 23                        	movs	r3, #0
 8016f88: 74 46                        	mov	r4, lr
 8016f8a: 05 f0 bb f9                  	bl	#21366
 8016f8e: 4d f6 f0 02                  	movw	r2, #55536
 8016f92: a6 46                        	mov	lr, r4
 8016f94: cf f6 ff 72                  	movt	r2, #65535
 8016f98: 4f f6 9c 7c                  	movw	r12, #65436
 8016f9c: 00 fb 02 52                  	mla	r2, r0, r2, r5
 8016fa0: 93 b2                        	uxth	r3, r2
 8016fa2: a3 fb 04 34                  	umull	r3, r4, r3, r4
 8016fa6: 63 09                        	lsrs	r3, r4, #5
 8016fa8: 09 eb 0a 04                  	add.w	r4, r9, r10
 8016fac: 03 fb 0c 22                  	mla	r2, r3, r12, r2
 8016fb0: 38 f8 13 30                  	ldrh.w	r3, [r8, r3, lsl #1]
 8016fb4: aa f1 04 0a                  	sub.w	r10, r10, #4
 8016fb8: a4 f8 23 30                  	strh.w	r3, [r4, #35]
 8016fbc: 92 b2                        	uxth	r2, r2
 8016fbe: 38 f8 12 20                  	ldrh.w	r2, [r8, r2, lsl #1]
 8016fc2: a4 f8 25 20                  	strh.w	r2, [r4, #37]
 8016fc6: bb eb 05 02                  	subs.w	r2, r11, r5
 8016fca: 4f f0 00 02                  	mov.w	r2, #0
 8016fce: 05 46                        	mov	r5, r0
 8016fd0: b2 41                        	sbcs	r2, r6
 8016fd2: 0e 46                        	mov	r6, r1
 8016fd4: d3 d3                        	blo	#-90 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17ha1a36a310a39c053E+0x46>
 8016fd6: 02 9c                        	ldr	r4, [sp, #8]
 8016fd8: 0a f1 27 01                  	add.w	r1, r10, #39
 8016fdc: 05 46                        	mov	r5, r0
 8016fde: 63 2d                        	cmp	r5, #99
 8016fe0: 0b dc                        	bgt	#22 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17ha1a36a310a39c053E+0xc2>
 8016fe2: 28 46                        	mov	r0, r5
 8016fe4: 0a 28                        	cmp	r0, #10
 8016fe6: 16 db                        	blt	#44 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17ha1a36a310a39c053E+0xde>
 8016fe8: 02 39                        	subs	r1, #2
 8016fea: 38 f8 10 00                  	ldrh.w	r0, [r8, r0, lsl #1]
 8016fee: 03 aa                        	add	r2, sp, #12
 8016ff0: 50 52                        	strh	r0, [r2, r1]
 8016ff2: 14 e0                        	b	#40 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17ha1a36a310a39c053E+0xe6>
 8016ff4: 27 21                        	movs	r1, #39
 8016ff6: 63 2d                        	cmp	r5, #99
 8016ff8: f3 dd                        	ble	#-26 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17ha1a36a310a39c053E+0xaa>
 8016ffa: a8 b2                        	uxth	r0, r5
 8016ffc: 02 39                        	subs	r1, #2
 8016ffe: a0 fb 0e 02                  	umull	r0, r2, r0, lr
 8017002: 03 ab                        	add	r3, sp, #12
 8017004: 50 09                        	lsrs	r0, r2, #5
 8017006: 00 fb 0c 52                  	mla	r2, r0, r12, r5
 801700a: 92 b2                        	uxth	r2, r2
 801700c: 38 f8 12 20                  	ldrh.w	r2, [r8, r2, lsl #1]
 8017010: 5a 52                        	strh	r2, [r3, r1]
 8017012: 0a 28                        	cmp	r0, #10
 8017014: e8 da                        	bge	#-48 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17ha1a36a310a39c053E+0xb0>
 8017016: 01 39                        	subs	r1, #1
 8017018: 03 aa                        	add	r2, sp, #12
 801701a: 30 30                        	adds	r0, #48
 801701c: 50 54                        	strb	r0, [r2, r1]
 801701e: c1 f1 27 00                  	rsb.w	r0, r1, #39
 8017022: 03 aa                        	add	r2, sp, #12
 8017024: 11 44                        	add	r1, r2
 8017026: 4e f6 b4 42                  	movw	r2, #60596
 801702a: cd e9 00 10                  	strd	r1, r0, [sp]
 801702e: c0 f6 01 02                  	movt	r2, #2049
 8017032: 20 46                        	mov	r0, r4
 8017034: 01 21                        	movs	r1, #1
 8017036: 00 23                        	movs	r3, #0
 8017038: fe f7 80 fd                  	bl	#-5376
 801703c: 0d b0                        	add	sp, #52
 801703e: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 8017042: f0 bd                        	pop	{r4, r5, r6, r7, pc}

08017044 core::fmt::num::_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$::fmt::hb4a458a38e11c9e2:
 8017044: b0 b5                        	push	{r4, r5, r7, lr}
 8017046: 02 af                        	add	r7, sp, #8
 8017048: a2 b0                        	sub	sp, #136
 801704a: 0d f1 08 0e                  	add.w	lr, sp, #8
 801704e: 8c 46                        	mov	r12, r1
 8017050: 81 22                        	movs	r2, #129
 8017052: 00 21                        	movs	r1, #0
 8017054: 00 f0 0f 03                  	and	r3, r0, #15
 8017058: 03 f1 57 04                  	add.w	r4, r3, #87
 801705c: 0a 2b                        	cmp	r3, #10
 801705e: 38 bf                        	it	lo
 8017060: 03 f1 30 04                  	addlo.w	r4, r3, #48
 8017064: 0e eb 02 03                  	add.w	r3, lr, r2
 8017068: b1 eb 10 1f                  	cmp.w	r1, r0, lsr #4
 801706c: 03 f8 02 4c                  	strb	r4, [r3, #-2]
 8017070: 2e d0                        	beq	#92 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb4a458a38e11c9e2E+0x90>
 8017072: 04 09                        	lsrs	r4, r0, #4
 8017074: 04 f0 0f 04                  	and	r4, r4, #15
 8017078: 04 f1 57 05                  	add.w	r5, r4, #87
 801707c: 0a 2c                        	cmp	r4, #10
 801707e: 38 bf                        	it	lo
 8017080: 04 f1 30 05                  	addlo.w	r5, r4, #48
 8017084: b1 eb 10 2f                  	cmp.w	r1, r0, lsr #8
 8017088: 03 f8 03 5c                  	strb	r5, [r3, #-3]
 801708c: 23 d0                        	beq	#70 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb4a458a38e11c9e2E+0x96>
 801708e: 04 0a                        	lsrs	r4, r0, #8
 8017090: 04 f0 0f 04                  	and	r4, r4, #15
 8017094: 04 f1 57 05                  	add.w	r5, r4, #87
 8017098: 0a 2c                        	cmp	r4, #10
 801709a: 38 bf                        	it	lo
 801709c: 04 f1 30 05                  	addlo.w	r5, r4, #48
 80170a0: b1 eb 10 3f                  	cmp.w	r1, r0, lsr #12
 80170a4: 03 f8 04 5c                  	strb	r5, [r3, #-4]
 80170a8: 18 d0                        	beq	#48 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb4a458a38e11c9e2E+0x9c>
 80170aa: 04 0b                        	lsrs	r4, r0, #12
 80170ac: 04 3a                        	subs	r2, #4
 80170ae: 04 f0 0f 04                  	and	r4, r4, #15
 80170b2: 04 f1 57 05                  	add.w	r5, r4, #87
 80170b6: 0a 2c                        	cmp	r4, #10
 80170b8: 38 bf                        	it	lo
 80170ba: 04 f1 30 05                  	addlo.w	r5, r4, #48
 80170be: 03 f8 05 5c                  	strb	r5, [r3, #-5]
 80170c2: 03 0c                        	lsrs	r3, r0, #16
 80170c4: b1 eb 10 4f                  	cmp.w	r1, r0, lsr #16
 80170c8: 18 46                        	mov	r0, r3
 80170ca: c3 d1                        	bne	#-122 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb4a458a38e11c9e2E+0x14>
 80170cc: 50 1e                        	subs	r0, r2, #1
 80170ce: 07 e0                        	b	#14 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb4a458a38e11c9e2E+0xa0>
 80170d0: 90 1e                        	subs	r0, r2, #2
 80170d2: 01 3a                        	subs	r2, #1
 80170d4: 04 e0                        	b	#8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb4a458a38e11c9e2E+0xa0>
 80170d6: d0 1e                        	subs	r0, r2, #3
 80170d8: 02 3a                        	subs	r2, #2
 80170da: 01 e0                        	b	#2 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb4a458a38e11c9e2E+0xa0>
 80170dc: 10 1f                        	subs	r0, r2, #4
 80170de: 03 3a                        	subs	r2, #3
 80170e0: 81 28                        	cmp	r0, #129
 80170e2: 0f d2                        	bhs	#30 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb4a458a38e11c9e2E+0xc4>
 80170e4: c2 f1 81 01                  	rsb.w	r1, r2, #129
 80170e8: 4e f6 b5 32                  	movw	r2, #60341
 80170ec: 70 44                        	add	r0, lr
 80170ee: c0 f6 01 02                  	movt	r2, #2049
 80170f2: cd e9 00 01                  	strd	r0, r1, [sp]
 80170f6: 60 46                        	mov	r0, r12
 80170f8: 01 21                        	movs	r1, #1
 80170fa: 02 23                        	movs	r3, #2
 80170fc: fe f7 1e fd                  	bl	#-5572
 8017100: 22 b0                        	add	sp, #136
 8017102: b0 bd                        	pop	{r4, r5, r7, pc}
 8017104: 80 21                        	movs	r1, #128
 8017106: fe f7 86 fe                  	bl	#-4852
 801710a: fe de                        	trap

0801710c core::fmt::num::_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$::fmt::h4b769b3137071b17:
 801710c: b0 b5                        	push	{r4, r5, r7, lr}
 801710e: 02 af                        	add	r7, sp, #8
 8017110: a2 b0                        	sub	sp, #136
 8017112: 0d f1 08 0e                  	add.w	lr, sp, #8
 8017116: 8c 46                        	mov	r12, r1
 8017118: 81 22                        	movs	r2, #129
 801711a: 00 21                        	movs	r1, #0
 801711c: 00 f0 0f 03                  	and	r3, r0, #15
 8017120: 03 f1 37 04                  	add.w	r4, r3, #55
 8017124: 0a 2b                        	cmp	r3, #10
 8017126: 38 bf                        	it	lo
 8017128: 03 f1 30 04                  	addlo.w	r4, r3, #48
 801712c: 0e eb 02 03                  	add.w	r3, lr, r2
 8017130: b1 eb 10 1f                  	cmp.w	r1, r0, lsr #4
 8017134: 03 f8 02 4c                  	strb	r4, [r3, #-2]
 8017138: 2e d0                        	beq	#92 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h4b769b3137071b17E+0x90>
 801713a: 04 09                        	lsrs	r4, r0, #4
 801713c: 04 f0 0f 04                  	and	r4, r4, #15
 8017140: 04 f1 37 05                  	add.w	r5, r4, #55
 8017144: 0a 2c                        	cmp	r4, #10
 8017146: 38 bf                        	it	lo
 8017148: 04 f1 30 05                  	addlo.w	r5, r4, #48
 801714c: b1 eb 10 2f                  	cmp.w	r1, r0, lsr #8
 8017150: 03 f8 03 5c                  	strb	r5, [r3, #-3]
 8017154: 23 d0                        	beq	#70 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h4b769b3137071b17E+0x96>
 8017156: 04 0a                        	lsrs	r4, r0, #8
 8017158: 04 f0 0f 04                  	and	r4, r4, #15
 801715c: 04 f1 37 05                  	add.w	r5, r4, #55
 8017160: 0a 2c                        	cmp	r4, #10
 8017162: 38 bf                        	it	lo
 8017164: 04 f1 30 05                  	addlo.w	r5, r4, #48
 8017168: b1 eb 10 3f                  	cmp.w	r1, r0, lsr #12
 801716c: 03 f8 04 5c                  	strb	r5, [r3, #-4]
 8017170: 18 d0                        	beq	#48 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h4b769b3137071b17E+0x9c>
 8017172: 04 0b                        	lsrs	r4, r0, #12
 8017174: 04 3a                        	subs	r2, #4
 8017176: 04 f0 0f 04                  	and	r4, r4, #15
 801717a: 04 f1 37 05                  	add.w	r5, r4, #55
 801717e: 0a 2c                        	cmp	r4, #10
 8017180: 38 bf                        	it	lo
 8017182: 04 f1 30 05                  	addlo.w	r5, r4, #48
 8017186: 03 f8 05 5c                  	strb	r5, [r3, #-5]
 801718a: 03 0c                        	lsrs	r3, r0, #16
 801718c: b1 eb 10 4f                  	cmp.w	r1, r0, lsr #16
 8017190: 18 46                        	mov	r0, r3
 8017192: c3 d1                        	bne	#-122 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h4b769b3137071b17E+0x14>
 8017194: 50 1e                        	subs	r0, r2, #1
 8017196: 07 e0                        	b	#14 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h4b769b3137071b17E+0xa0>
 8017198: 90 1e                        	subs	r0, r2, #2
 801719a: 01 3a                        	subs	r2, #1
 801719c: 04 e0                        	b	#8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h4b769b3137071b17E+0xa0>
 801719e: d0 1e                        	subs	r0, r2, #3
 80171a0: 02 3a                        	subs	r2, #2
 80171a2: 01 e0                        	b	#2 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h4b769b3137071b17E+0xa0>
 80171a4: 10 1f                        	subs	r0, r2, #4
 80171a6: 03 3a                        	subs	r2, #3
 80171a8: 81 28                        	cmp	r0, #129
 80171aa: 0f d2                        	bhs	#30 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h4b769b3137071b17E+0xc4>
 80171ac: c2 f1 81 01                  	rsb.w	r1, r2, #129
 80171b0: 4e f6 b5 32                  	movw	r2, #60341
 80171b4: 70 44                        	add	r0, lr
 80171b6: c0 f6 01 02                  	movt	r2, #2049
 80171ba: cd e9 00 01                  	strd	r0, r1, [sp]
 80171be: 60 46                        	mov	r0, r12
 80171c0: 01 21                        	movs	r1, #1
 80171c2: 02 23                        	movs	r3, #2
 80171c4: fe f7 ba fc                  	bl	#-5772
 80171c8: 22 b0                        	add	sp, #136
 80171ca: b0 bd                        	pop	{r4, r5, r7, pc}
 80171cc: 80 21                        	movs	r1, #128
 80171ce: fe f7 22 fe                  	bl	#-5052
 80171d2: fe de                        	trap

080171d4 core::fmt::num::imp::_$LT$impl$u20$core..fmt..Display$u20$for$u20$i8$GT$::fmt::h77effd64fc661fa4:
 80171d4: f0 b5                        	push	{r4, r5, r6, r7, lr}
 80171d6: 03 af                        	add	r7, sp, #12
 80171d8: 2d e9 00 0f                  	push.w	{r8, r9, r10, r11}
 80171dc: 8f b0                        	sub	sp, #60
 80171de: 0d 46                        	mov	r5, r1
 80171e0: 46 b2                        	sxtb	r6, r0
 80171e2: 00 2e                        	cmp	r6, #0
 80171e4: 42 f2 10 71                  	movw	r1, #10000
 80171e8: 48 bf                        	it	mi
 80171ea: 76 42                        	rsbmi	r6, r6, #0
 80171ec: 48 f2 1f 58                  	movw	r8, #34079
 80171f0: 8e 42                        	cmp	r6, r1
 80171f2: 4e f6 ed 21                  	movw	r1, #60141
 80171f6: 4f f6 9c 7c                  	movw	r12, #65436
 80171fa: c5 f2 eb 18                  	movt	r8, #20971
 80171fe: c0 f6 01 01                  	movt	r1, #2049
 8017202: 3f d3                        	blo	#126 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$i8$GT$3fmt17h77effd64fc661fa4E+0xb4>
 8017204: 41 f2 59 79                  	movw	r9, #5977
 8017208: 4d f6 f0 0a                  	movw	r10, #55536
 801720c: 4e f2 ff 0e                  	movw	lr, #57599
 8017210: 0d f1 14 0b                  	add.w	r11, sp, #20
 8017214: 00 24                        	movs	r4, #0
 8017216: cd f2 b7 19                  	movt	r9, #53687
 801721a: cf f6 ff 7a                  	movt	r10, #65535
 801721e: c0 f2 f5 5e                  	movt	lr, #1525
 8017222: cd e9 03 05                  	strd	r0, r5, [sp, #12]
 8017226: a6 fb 09 23                  	umull	r2, r3, r6, r9
 801722a: 76 45                        	cmp	r6, lr
 801722c: 4f ea 53 32                  	lsr.w	r2, r3, #13
 8017230: 02 fb 0a 63                  	mla	r3, r2, r10, r6
 8017234: 16 46                        	mov	r6, r2
 8017236: 1f fa 83 fc                  	uxth.w	r12, r3
 801723a: ac fb 08 50                  	umull	r5, r0, r12, r8
 801723e: 4f f6 9c 7c                  	movw	r12, #65436
 8017242: 0b eb 04 05                  	add.w	r5, r11, r4
 8017246: a4 f1 04 04                  	sub.w	r4, r4, #4
 801724a: 4f ea 50 10                  	lsr.w	r0, r0, #5
 801724e: 00 fb 0c 33                  	mla	r3, r0, r12, r3
 8017252: 31 f8 10 00                  	ldrh.w	r0, [r1, r0, lsl #1]
 8017256: a5 f8 23 00                  	strh.w	r0, [r5, #35]
 801725a: 9b b2                        	uxth	r3, r3
 801725c: 31 f8 13 30                  	ldrh.w	r3, [r1, r3, lsl #1]
 8017260: a5 f8 25 30                  	strh.w	r3, [r5, #37]
 8017264: df d8                        	bhi	#-66 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$i8$GT$3fmt17h77effd64fc661fa4E+0x56>
 8017266: dd e9 03 05                  	ldrd	r0, r5, [sp, #12]
 801726a: 27 34                        	adds	r4, #39
 801726c: 16 46                        	mov	r6, r2
 801726e: 63 2e                        	cmp	r6, #99
 8017270: 0b d8                        	bhi	#22 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$i8$GT$3fmt17h77effd64fc661fa4E+0xba>
 8017272: 32 46                        	mov	r2, r6
 8017274: 0a 2a                        	cmp	r2, #10
 8017276: 16 db                        	blt	#44 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$i8$GT$3fmt17h77effd64fc661fa4E+0xd6>
 8017278: 31 f8 12 20                  	ldrh.w	r2, [r1, r2, lsl #1]
 801727c: a3 1e                        	subs	r3, r4, #2
 801727e: 05 a9                        	add	r1, sp, #20
 8017280: ca 52                        	strh	r2, [r1, r3]
 8017282: 14 e0                        	b	#40 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$i8$GT$3fmt17h77effd64fc661fa4E+0xde>
 8017284: 27 24                        	movs	r4, #39
 8017286: 63 2e                        	cmp	r6, #99
 8017288: f3 d9                        	bls	#-26 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$i8$GT$3fmt17h77effd64fc661fa4E+0xa2>
 801728a: b2 b2                        	uxth	r2, r6
 801728c: 02 3c                        	subs	r4, #2
 801728e: a2 fb 08 32                  	umull	r3, r2, r2, r8
 8017292: 52 09                        	lsrs	r2, r2, #5
 8017294: 02 fb 0c 63                  	mla	r3, r2, r12, r6
 8017298: 9b b2                        	uxth	r3, r3
 801729a: 31 f8 13 60                  	ldrh.w	r6, [r1, r3, lsl #1]
 801729e: 05 ab                        	add	r3, sp, #20
 80172a0: 1e 53                        	strh	r6, [r3, r4]
 80172a2: 0a 2a                        	cmp	r2, #10
 80172a4: e8 da                        	bge	#-48 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$i8$GT$3fmt17h77effd64fc661fa4E+0xa8>
 80172a6: 63 1e                        	subs	r3, r4, #1
 80172a8: 05 a9                        	add	r1, sp, #20
 80172aa: 30 32                        	adds	r2, #48
 80172ac: ca 54                        	strb	r2, [r1, r3]
 80172ae: c3 f1 27 02                  	rsb.w	r2, r3, #39
 80172b2: 05 a9                        	add	r1, sp, #20
 80172b4: 19 44                        	add	r1, r3
 80172b6: 40 b2                        	sxtb	r0, r0
 80172b8: cd e9 00 12                  	strd	r1, r2, [sp]
 80172bc: 4e f6 b4 42                  	movw	r2, #60596
 80172c0: b0 f1 ff 3f                  	cmp.w	r0, #4294967295
 80172c4: 4f f0 00 01                  	mov.w	r1, #0
 80172c8: c0 f6 01 02                  	movt	r2, #2049
 80172cc: 28 46                        	mov	r0, r5
 80172ce: 4f f0 00 03                  	mov.w	r3, #0
 80172d2: c8 bf                        	it	gt
 80172d4: 01 21                        	movgt	r1, #1
 80172d6: fe f7 31 fc                  	bl	#-6046
 80172da: 0f b0                        	add	sp, #60
 80172dc: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 80172e0: f0 bd                        	pop	{r4, r5, r6, r7, pc}

080172e2 Reset:
; pub unsafe extern "C" fn Reset() -> ! {
 80172e2: 80 b5                        	push	{r7, lr}
 80172e4: 6f 46                        	mov	r7, sp
;     __pre_init();
 80172e6: 00 f0 56 f8                  	bl	#172
;     while sbss < ebss {
 80172ea: 40 f2 28 20                  	movw	r0, #552
 80172ee: 40 f2 04 01                  	movw	r1, #4
 80172f2: c2 f2 00 00                  	movt	r0, #8192
 80172f6: c2 f2 00 01                  	movt	r1, #8192
 80172fa: 81 42                        	cmp	r1, r0
 80172fc: 14 d2                        	bhs	#40 <Reset+0x4a>
 80172fe: 40 f2 04 01                  	movw	r1, #4
 8017302: 00 22                        	movs	r2, #0
 8017304: c2 f2 00 01                  	movt	r1, #8192
;     intrinsics::volatile_store(dst, src);
 8017308: 41 f8 04 2b                  	str	r2, [r1], #4
;     while sbss < ebss {
 801730c: 81 42                        	cmp	r1, r0
;     intrinsics::volatile_store(dst, src);
 801730e: 3c bf                        	itt	lo
 8017310: 41 f8 04 2b                  	strlo	r2, [r1], #4
;     while sbss < ebss {
 8017314: 81 42                        	cmplo	r1, r0
 8017316: 07 d2                        	bhs	#14 <Reset+0x4a>
;     intrinsics::volatile_store(dst, src);
 8017318: 41 f8 04 2b                  	str	r2, [r1], #4
;     while sbss < ebss {
 801731c: 81 42                        	cmp	r1, r0
 801731e: 03 d2                        	bhs	#6 <Reset+0x4a>
;     intrinsics::volatile_store(dst, src);
 8017320: 41 f8 04 2b                  	str	r2, [r1], #4
;     while sbss < ebss {
 8017324: 81 42                        	cmp	r1, r0
 8017326: ef d3                        	blo	#-34 <Reset+0x2a>
;     while sdata < edata {
 8017328: 40 f2 04 00                  	movw	r0, #4
 801732c: 40 f2 04 01                  	movw	r1, #4
 8017330: c2 f2 00 00                  	movt	r0, #8192
 8017334: c2 f2 00 01                  	movt	r1, #8192
 8017338: 81 42                        	cmp	r1, r0
 801733a: 1c d2                        	bhs	#56 <Reset+0x98>
 801733c: 40 f6 c8 21                  	movw	r1, #2760
 8017340: 40 f2 04 02                  	movw	r2, #4
 8017344: c0 f6 02 01                  	movt	r1, #2050
 8017348: c2 f2 00 02                  	movt	r2, #8192
;         ptr::write(sdata, ptr::read(sidata));
 801734c: 0b 68                        	ldr	r3, [r1]
;     intrinsics::move_val_init(&mut *dst, src)
 801734e: 42 f8 04 3b                  	str	r3, [r2], #4
;     while sdata < edata {
 8017352: 82 42                        	cmp	r2, r0
 8017354: 0f d2                        	bhs	#30 <Reset+0x98>
;         ptr::write(sdata, ptr::read(sidata));
 8017356: 4b 68                        	ldr	r3, [r1, #4]
;     intrinsics::move_val_init(&mut *dst, src)
 8017358: 42 f8 04 3b                  	str	r3, [r2], #4
;     while sdata < edata {
 801735c: 82 42                        	cmp	r2, r0
 801735e: 0a d2                        	bhs	#20 <Reset+0x98>
;         ptr::write(sdata, ptr::read(sidata));
 8017360: 8b 68                        	ldr	r3, [r1, #8]
;     intrinsics::move_val_init(&mut *dst, src)
 8017362: 42 f8 04 3b                  	str	r3, [r2], #4
;     while sdata < edata {
 8017366: 82 42                        	cmp	r2, r0
 8017368: 05 d2                        	bhs	#10 <Reset+0x98>
;         ptr::write(sdata, ptr::read(sidata));
 801736a: cb 68                        	ldr	r3, [r1, #12]
;     while sdata < edata {
 801736c: 10 31                        	adds	r1, #16
;     intrinsics::move_val_init(&mut *dst, src)
 801736e: 42 f8 04 3b                  	str	r3, [r2], #4
;     while sdata < edata {
 8017372: 82 42                        	cmp	r2, r0
 8017374: ea d3                        	blo	#-44 <Reset+0x6e>
 8017376: 4e f6 88 50                  	movw	r0, #60808
 801737a: ce f2 00 00                  	movt	r0, #57344
;                 *SCB_CPACR | SCB_CPACR_FPU_ENABLE | SCB_CPACR_FPU_USER,
 801737e: 01 68                        	ldr	r1, [r0]
 8017380: 41 f4 70 01                  	orr	r1, r1, #15728640
;     intrinsics::volatile_store(dst, src);
 8017384: 01 60                        	str	r1, [r0]
;             trampoline()
 8017386: 00 f0 01 f8                  	bl	#2
 801738a: fe de                        	trap

0801738c ResetTrampoline:
;             fn trampoline() -> ! {
 801738c: 80 b5                        	push	{r7, lr}
 801738e: 6f 46                        	mov	r7, sp
;                 unsafe { main() }
 8017390: fd f7 e5 f8                  	bl	#-11830
 8017394: fe de                        	trap

08017396 __pre_init:
; pub unsafe extern "C" fn DefaultPreInit() {}
 8017396: 70 47                        	bx	lr

08017398 rust_begin_unwind:
; fn panic(_info: &PanicInfo) -> ! {
 8017398: 80 b5                        	push	{r7, lr}
 801739a: 6f 46                        	mov	r7, sp
;     cortex_m::peripheral::SCB::sys_reset();
 801739c: 00 f0 01 f8                  	bl	#2
 80173a0: fe de                        	trap

080173a2 cortex_m::peripheral::scb::_$LT$impl$u20$cortex_m..peripheral..SCB$GT$::sys_reset::h18090853f37639f7:
;     pub fn sys_reset() -> ! {
 80173a2: 80 b5                        	push	{r7, lr}
 80173a4: 6f 46                        	mov	r7, sp
;             __dsb()
 80173a6: 04 f0 6a ff                  	bl	#20180
 80173aa: 4e f6 0c 50                  	movw	r0, #60684
 80173ae: 04 22                        	movs	r2, #4
 80173b0: ce f2 00 00                  	movt	r0, #57344
 80173b4: c0 f2 fa 52                  	movt	r2, #1530
;     intrinsics::volatile_load(src)
 80173b8: 01 68                        	ldr	r1, [r0]
;             r & SCB_AIRCR_PRIGROUP_MASK | // keep priority group unchanged
 80173ba: 01 f4 a0 61                  	and	r1, r1, #1280
;                     SCB_AIRCR_VECTKEY | // otherwise the write is ignored
 80173be: 11 43                        	orrs	r1, r2
;     intrinsics::volatile_store(dst, src);
 80173c0: 01 60                        	str	r1, [r0]
;             __dsb()
 80173c2: 04 f0 5c ff                  	bl	#20152
;             __nop()
 80173c6: 04 f0 5d ff                  	bl	#20154
;         loop {
 80173ca: fc e7                        	b	#-8 <_ZN8cortex_m10peripheral3scb43_$LT$impl$u20$cortex_m..peripheral..SCB$GT$9sys_reset17h18090853f37639f7E+0x28>

080173cc stm32wb55::event::command::to_status::h8b02fa73a810efc9:
; fn to_status(
 80173cc: d0 b5                        	push	{r4, r6, r7, lr}
 80173ce: 02 af                        	add	r7, sp, #8
 80173d0: 04 46                        	mov	r4, r0
;     require_len_at_least!(bytes, 1);
 80173d2: 00 2a                        	cmp	r2, #0
 80173d4: 00 f0 4f 80                  	beq.w	#158 <$t.240+0x8>
;     bytes[0].try_into().map_err(hci::event::rewrap_bad_status)
 80173d8: 08 78                        	ldrb	r0, [r1]
;             0x00 => Ok(Status::Success),
 80173da: 44 28                        	cmp	r0, #68
 80173dc: 00 f2 52 80                  	bhi.w	#164 <$t.240+0x16>
 80173e0: 43 21                        	movs	r1, #67
 80173e2: 00 22                        	movs	r2, #0
 80173e4: df e8 10 f0                  	tbh	[pc, r0, lsl #1]

080173e8 $d.239:
 80173e8:	d6 00 45 00	.word	0x004500d6
 80173ec:	55 00 57 00	.word	0x00570055
 80173f0:	59 00 5b 00	.word	0x005b0059
 80173f4:	5d 00 5f 00	.word	0x005f005d
 80173f8:	61 00 63 00	.word	0x00630061
 80173fc:	65 00 67 00	.word	0x00670065
 8017400:	69 00 6b 00	.word	0x006b0069
 8017404:	6d 00 6f 00	.word	0x006f006d
 8017408:	71 00 73 00	.word	0x00730071
 801740c:	75 00 77 00	.word	0x00770075
 8017410:	79 00 7b 00	.word	0x007b0079
 8017414:	7d 00 7f 00	.word	0x007f007d
 8017418:	81 00 83 00	.word	0x00830081
 801741c:	85 00 87 00	.word	0x00870085
 8017420:	89 00 8b 00	.word	0x008b0089
 8017424:	8d 00 8f 00	.word	0x008f008d
 8017428:	91 00 93 00	.word	0x00930091
 801742c:	95 00 97 00	.word	0x00970095
 8017430:	99 00 9b 00	.word	0x009b0099
 8017434:	9d 00 9f 00	.word	0x009f009d
 8017438:	a1 00 a3 00	.word	0x00a300a1
 801743c:	a5 00 a7 00	.word	0x00a700a5
 8017440:	a9 00 ab 00	.word	0x00ab00a9
 8017444:	ad 00 af 00	.word	0x00af00ad
 8017448:	b1 00 b3 00	.word	0x00b300b1
 801744c:	b5 00 b7 00	.word	0x00b700b5
 8017450:	b9 00 bb 00	.word	0x00bb00b9
 8017454:	bd 00 bf 00	.word	0x00bf00bd
 8017458:	c1 00 c3 00	.word	0x00c300c1
 801745c:	c5 00 c7 00	.word	0x00c700c5
 8017460:	c9 00 cb 00	.word	0x00cb00c9
 8017464:	cd 00 cf 00	.word	0x00cf00cd
 8017468:	d1 00 d3 00	.word	0x00d300d1
 801746c:	d5 00 db 00	.word	0x00db00d5
 8017470:	da 00		.short	0x00da

08017472 $t.240:
 8017472: 01 22                        	movs	r2, #1
 8017474: 8e e0                        	b	#284 <$t.240+0x126>
 8017476: 01 20                        	movs	r0, #1
 8017478: 00 21                        	movs	r1, #0
;     require_len_at_least!(bytes, 1);
 801747a: c4 e9 03 10                  	strd	r1, r0, [r4, #12]
 801747e: 20 72                        	strb	r0, [r4, #8]
 8017480: 20 70                        	strb	r0, [r4]
; }
 8017482: d0 bd                        	pop	{r4, r6, r7, pc}
;             _ => Ok(Status::Vendor(V::try_from(value)?)),
 8017484: 00 f0 92 f8                  	bl	#292
;             Ok(t) => Ok(t),
 8017488: c0 07                        	lsls	r0, r0, #31
 801748a: 0a 46                        	mov	r2, r1
 801748c: 00 f0 82 80                  	beq.w	#260 <$t.240+0x126>
 8017490: 85 e0                        	b	#266 <$t.240+0x130>
 8017492: 02 22                        	movs	r2, #2
 8017494: 7e e0                        	b	#252 <$t.240+0x126>
 8017496: 03 22                        	movs	r2, #3
 8017498: 7c e0                        	b	#248 <$t.240+0x126>
 801749a: 04 22                        	movs	r2, #4
 801749c: 7a e0                        	b	#244 <$t.240+0x126>
 801749e: 05 22                        	movs	r2, #5
 80174a0: 78 e0                        	b	#240 <$t.240+0x126>
 80174a2: 06 22                        	movs	r2, #6
 80174a4: 76 e0                        	b	#236 <$t.240+0x126>
 80174a6: 07 22                        	movs	r2, #7
 80174a8: 74 e0                        	b	#232 <$t.240+0x126>
 80174aa: 08 22                        	movs	r2, #8
 80174ac: 72 e0                        	b	#228 <$t.240+0x126>
 80174ae: 09 22                        	movs	r2, #9
 80174b0: 70 e0                        	b	#224 <$t.240+0x126>
 80174b2: 0a 22                        	movs	r2, #10
 80174b4: 6e e0                        	b	#220 <$t.240+0x126>
 80174b6: 0b 22                        	movs	r2, #11
 80174b8: 6c e0                        	b	#216 <$t.240+0x126>
 80174ba: 0c 22                        	movs	r2, #12
 80174bc: 6a e0                        	b	#212 <$t.240+0x126>
 80174be: 0d 22                        	movs	r2, #13
 80174c0: 68 e0                        	b	#208 <$t.240+0x126>
 80174c2: 0e 22                        	movs	r2, #14
 80174c4: 66 e0                        	b	#204 <$t.240+0x126>
 80174c6: 0f 22                        	movs	r2, #15
 80174c8: 64 e0                        	b	#200 <$t.240+0x126>
 80174ca: 10 22                        	movs	r2, #16
 80174cc: 62 e0                        	b	#196 <$t.240+0x126>
 80174ce: 11 22                        	movs	r2, #17
 80174d0: 60 e0                        	b	#192 <$t.240+0x126>
 80174d2: 12 22                        	movs	r2, #18
 80174d4: 5e e0                        	b	#188 <$t.240+0x126>
 80174d6: 13 22                        	movs	r2, #19
 80174d8: 5c e0                        	b	#184 <$t.240+0x126>
 80174da: 14 22                        	movs	r2, #20
 80174dc: 5a e0                        	b	#180 <$t.240+0x126>
 80174de: 15 22                        	movs	r2, #21
 80174e0: 58 e0                        	b	#176 <$t.240+0x126>
 80174e2: 16 22                        	movs	r2, #22
 80174e4: 56 e0                        	b	#172 <$t.240+0x126>
 80174e6: 17 22                        	movs	r2, #23
 80174e8: 54 e0                        	b	#168 <$t.240+0x126>
 80174ea: 18 22                        	movs	r2, #24
 80174ec: 52 e0                        	b	#164 <$t.240+0x126>
 80174ee: 19 22                        	movs	r2, #25
 80174f0: 50 e0                        	b	#160 <$t.240+0x126>
 80174f2: 1a 22                        	movs	r2, #26
 80174f4: 4e e0                        	b	#156 <$t.240+0x126>
 80174f6: 1b 22                        	movs	r2, #27
 80174f8: 4c e0                        	b	#152 <$t.240+0x126>
 80174fa: 1c 22                        	movs	r2, #28
 80174fc: 4a e0                        	b	#148 <$t.240+0x126>
 80174fe: 1d 22                        	movs	r2, #29
 8017500: 48 e0                        	b	#144 <$t.240+0x126>
 8017502: 1e 22                        	movs	r2, #30
 8017504: 46 e0                        	b	#140 <$t.240+0x126>
 8017506: 1f 22                        	movs	r2, #31
 8017508: 44 e0                        	b	#136 <$t.240+0x126>
 801750a: 20 22                        	movs	r2, #32
 801750c: 42 e0                        	b	#132 <$t.240+0x126>
 801750e: 21 22                        	movs	r2, #33
 8017510: 40 e0                        	b	#128 <$t.240+0x126>
 8017512: 22 22                        	movs	r2, #34
 8017514: 3e e0                        	b	#124 <$t.240+0x126>
 8017516: 23 22                        	movs	r2, #35
 8017518: 3c e0                        	b	#120 <$t.240+0x126>
 801751a: 24 22                        	movs	r2, #36
 801751c: 3a e0                        	b	#116 <$t.240+0x126>
 801751e: 25 22                        	movs	r2, #37
 8017520: 38 e0                        	b	#112 <$t.240+0x126>
 8017522: 26 22                        	movs	r2, #38
 8017524: 36 e0                        	b	#108 <$t.240+0x126>
 8017526: 27 22                        	movs	r2, #39
 8017528: 34 e0                        	b	#104 <$t.240+0x126>
 801752a: 28 22                        	movs	r2, #40
 801752c: 32 e0                        	b	#100 <$t.240+0x126>
 801752e: 29 22                        	movs	r2, #41
 8017530: 30 e0                        	b	#96 <$t.240+0x126>
 8017532: 2a 22                        	movs	r2, #42
 8017534: 2e e0                        	b	#92 <$t.240+0x126>
 8017536: 2b 22                        	movs	r2, #43
 8017538: 2c e0                        	b	#88 <$t.240+0x126>
 801753a: 2c 22                        	movs	r2, #44
 801753c: 2a e0                        	b	#84 <$t.240+0x126>
 801753e: 2d 22                        	movs	r2, #45
 8017540: 28 e0                        	b	#80 <$t.240+0x126>
 8017542: 2e 22                        	movs	r2, #46
 8017544: 26 e0                        	b	#76 <$t.240+0x126>
 8017546: 2f 22                        	movs	r2, #47
 8017548: 24 e0                        	b	#72 <$t.240+0x126>
 801754a: 30 22                        	movs	r2, #48
 801754c: 22 e0                        	b	#68 <$t.240+0x126>
 801754e: 31 22                        	movs	r2, #49
 8017550: 20 e0                        	b	#64 <$t.240+0x126>
 8017552: 32 22                        	movs	r2, #50
 8017554: 1e e0                        	b	#60 <$t.240+0x126>
 8017556: 33 22                        	movs	r2, #51
 8017558: 1c e0                        	b	#56 <$t.240+0x126>
 801755a: 34 22                        	movs	r2, #52
 801755c: 1a e0                        	b	#52 <$t.240+0x126>
 801755e: 35 22                        	movs	r2, #53
 8017560: 18 e0                        	b	#48 <$t.240+0x126>
 8017562: 36 22                        	movs	r2, #54
 8017564: 16 e0                        	b	#44 <$t.240+0x126>
 8017566: 37 22                        	movs	r2, #55
 8017568: 14 e0                        	b	#40 <$t.240+0x126>
 801756a: 38 22                        	movs	r2, #56
 801756c: 12 e0                        	b	#36 <$t.240+0x126>
 801756e: 39 22                        	movs	r2, #57
 8017570: 10 e0                        	b	#32 <$t.240+0x126>
 8017572: 3a 22                        	movs	r2, #58
 8017574: 0e e0                        	b	#28 <$t.240+0x126>
 8017576: 3b 22                        	movs	r2, #59
 8017578: 0c e0                        	b	#24 <$t.240+0x126>
 801757a: 3c 22                        	movs	r2, #60
 801757c: 0a e0                        	b	#20 <$t.240+0x126>
 801757e: 3d 22                        	movs	r2, #61
 8017580: 08 e0                        	b	#16 <$t.240+0x126>
 8017582: 3e 22                        	movs	r2, #62
 8017584: 06 e0                        	b	#12 <$t.240+0x126>
 8017586: 3f 22                        	movs	r2, #63
 8017588: 04 e0                        	b	#8 <$t.240+0x126>
 801758a: 40 22                        	movs	r2, #64
 801758c: 02 e0                        	b	#4 <$t.240+0x126>
 801758e: 41 22                        	movs	r2, #65
 8017590: 00 e0                        	b	#0 <$t.240+0x126>
 8017592: 42 22                        	movs	r2, #66
 8017594: 00 20                        	movs	r0, #0
 8017596: 62 70                        	strb	r2, [r4, #1]
 8017598: 20 70                        	strb	r0, [r4]
; }
 801759a: d0 bd                        	pop	{r4, r6, r7, pc}
 801759c: 44 21                        	movs	r1, #68
 801759e: 02 20                        	movs	r0, #2
;             Err(e) => Err(op(e)),
 80175a0: 61 72                        	strb	r1, [r4, #9]
 80175a2: 20 72                        	strb	r0, [r4, #8]
 80175a4: 01 20                        	movs	r0, #1
 80175a6: 20 70                        	strb	r0, [r4]
; }
 80175a8: d0 bd                        	pop	{r4, r6, r7, pc}
 80175aa: 00 00                        	movs	r0, r0

080175ac _$LT$stm32wb55..event..Status$u20$as$u20$core..convert..TryFrom$LT$u8$GT$$GT$::try_from::hf8ab2e949a0ded50:
;     fn try_from(value: u8) -> Result<Self, <Self as TryFrom<u8>>::Error> {
 80175ac: 01 46                        	mov	r1, r0
 80175ae: 6f f0 40 00                  	mvn	r0, #64
;             0x41 => Ok(Status::Failed),
 80175b2: 50 fa 81 f2                  	uxtab	r2, r0, r1
 80175b6: 01 20                        	movs	r0, #1
 80175b8: be 2a                        	cmp	r2, #190
;     }
 80175ba: 88 bf                        	it	hi
 80175bc: 70 47                        	bxhi	lr
 80175be: df e8 12 f0                  	tbh	[pc, r2, lsl #1]

080175c2 $d.242:
 80175c2:	bf 00 bf 00	.word	0x00bf00bf
 80175c6:	c0 00 c0 00	.word	0x00c000c0
 80175ca:	c0 00 bf 00	.word	0x00bf00c0
 80175ce:	bf 00 bf 00	.word	0x00bf00bf
 80175d2:	bf 00 bf 00	.word	0x00bf00bf
 80175d6:	bf 00 c0 00	.word	0x00c000bf
 80175da:	c0 00 c0 00	.word	0x00c000c0
 80175de:	c0 00 bf 00	.word	0x00bf00c0
 80175e2:	c0 00 c0 00	.word	0x00c000c0
 80175e6:	c0 00 bf 00	.word	0x00bf00c0
 80175ea:	bf 00 c0 00	.word	0x00c000bf
 80175ee:	c0 00 c0 00	.word	0x00c000c0
 80175f2:	c0 00 bf 00	.word	0x00bf00c0
 80175f6:	bf 00 bf 00	.word	0x00bf00bf
 80175fa:	bf 00 bf 00	.word	0x00bf00bf
 80175fe:	bf 00 bf 00	.word	0x00bf00bf
 8017602:	bf 00 bf 00	.word	0x00bf00bf
 8017606:	bf 00 bf 00	.word	0x00bf00bf
 801760a:	bf 00 bf 00	.word	0x00bf00bf
 801760e:	c0 00 c0 00	.word	0x00c000c0
 8017612:	c0 00 c0 00	.word	0x00c000c0
 8017616:	c0 00 c0 00	.word	0x00c000c0
 801761a:	c0 00 c0 00	.word	0x00c000c0
 801761e:	c0 00 c0 00	.word	0x00c000c0
 8017622:	c0 00 c0 00	.word	0x00c000c0
 8017626:	c0 00 c0 00	.word	0x00c000c0
 801762a:	c0 00 c0 00	.word	0x00c000c0
 801762e:	c0 00 c0 00	.word	0x00c000c0
 8017632:	c0 00 c0 00	.word	0x00c000c0
 8017636:	c0 00 c0 00	.word	0x00c000c0
 801763a:	c0 00 c0 00	.word	0x00c000c0
 801763e:	c0 00 c0 00	.word	0x00c000c0
 8017642:	c0 00 bf 00	.word	0x00bf00c0
 8017646:	bf 00 bf 00	.word	0x00bf00bf
 801764a:	bf 00 bf 00	.word	0x00bf00bf
 801764e:	c0 00 c0 00	.word	0x00c000c0
 8017652:	c0 00 c0 00	.word	0x00c000c0
 8017656:	c0 00 c0 00	.word	0x00c000c0
 801765a:	c0 00 c0 00	.word	0x00c000c0
 801765e:	c0 00 c0 00	.word	0x00c000c0
 8017662:	c0 00 c0 00	.word	0x00c000c0
 8017666:	c0 00 c0 00	.word	0x00c000c0
 801766a:	c0 00 c0 00	.word	0x00c000c0
 801766e:	c0 00 c0 00	.word	0x00c000c0
 8017672:	c0 00 c0 00	.word	0x00c000c0
 8017676:	c0 00 c0 00	.word	0x00c000c0
 801767a:	c0 00 c0 00	.word	0x00c000c0
 801767e:	c0 00 c0 00	.word	0x00c000c0
 8017682:	c0 00 c0 00	.word	0x00c000c0
 8017686:	c0 00 c0 00	.word	0x00c000c0
 801768a:	c0 00 c0 00	.word	0x00c000c0
 801768e:	c0 00 c0 00	.word	0x00c000c0
 8017692:	c0 00 c0 00	.word	0x00c000c0
 8017696:	c0 00 c0 00	.word	0x00c000c0
 801769a:	c0 00 c0 00	.word	0x00c000c0
 801769e:	c0 00 c0 00	.word	0x00c000c0
 80176a2:	c0 00 c0 00	.word	0x00c000c0
 80176a6:	c0 00 c0 00	.word	0x00c000c0
 80176aa:	c0 00 c0 00	.word	0x00c000c0
 80176ae:	c0 00 c0 00	.word	0x00c000c0
 80176b2:	c0 00 c0 00	.word	0x00c000c0
 80176b6:	c0 00 c0 00	.word	0x00c000c0
 80176ba:	c0 00 c0 00	.word	0x00c000c0
 80176be:	c0 00 c0 00	.word	0x00c000c0
 80176c2:	c0 00 c0 00	.word	0x00c000c0
 80176c6:	c0 00 c0 00	.word	0x00c000c0
 80176ca:	c0 00 c0 00	.word	0x00c000c0
 80176ce:	c0 00 c0 00	.word	0x00c000c0
 80176d2:	c0 00 c0 00	.word	0x00c000c0
 80176d6:	c0 00 c0 00	.word	0x00c000c0
 80176da:	c0 00 c0 00	.word	0x00c000c0
 80176de:	c0 00 c0 00	.word	0x00c000c0
 80176e2:	c0 00 c0 00	.word	0x00c000c0
 80176e6:	c0 00 c0 00	.word	0x00c000c0
 80176ea:	c0 00 c0 00	.word	0x00c000c0
 80176ee:	c0 00 c0 00	.word	0x00c000c0
 80176f2:	c0 00 c0 00	.word	0x00c000c0
 80176f6:	c0 00 c0 00	.word	0x00c000c0
 80176fa:	c0 00 c0 00	.word	0x00c000c0
 80176fe:	c0 00 c0 00	.word	0x00c000c0
 8017702:	c0 00 c0 00	.word	0x00c000c0
 8017706:	c0 00 c0 00	.word	0x00c000c0
 801770a:	c0 00 c0 00	.word	0x00c000c0
 801770e:	c0 00 c0 00	.word	0x00c000c0
 8017712:	c0 00 c0 00	.word	0x00c000c0
 8017716:	c0 00 c0 00	.word	0x00c000c0
 801771a:	c0 00 c0 00	.word	0x00c000c0
 801771e:	c0 00 bf 00	.word	0x00bf00c0
 8017722:	bf 00 c0 00	.word	0x00c000bf
 8017726:	c0 00 c0 00	.word	0x00c000c0
 801772a:	c0 00 c0 00	.word	0x00c000c0
 801772e:	c0 00 c0 00	.word	0x00c000c0
 8017732:	c0 00 c0 00	.word	0x00c000c0
 8017736:	c0 00 c0 00	.word	0x00c000c0
 801773a:	c0 00 c0 00	.word	0x00c000c0
 801773e:	bf 00		.short	0x00bf

08017740 $t.243:
 8017740: 00 20                        	movs	r0, #0
 8017742: 70 47                        	bx	lr

08017744 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h33f691de05ae3356:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8017744: 00 68                        	ldr	r0, [r0]
 8017746: fe f7 01 b9                  	b.w	#-7678 <_ZN62_$LT$bluetooth_hci..BdAddrType$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc5dafcccc52a084E+0x4>
 801774a: 00 00                        	movs	r0, r0

0801774c _$LT$bluetooth_hci..Status$LT$V$GT$$u20$as$u20$core..fmt..Debug$GT$::fmt::h54c2e287dd3ab253:
; #[derive(Copy, Clone, Debug, PartialEq)]
 801774c: b0 b5                        	push	{r4, r5, r7, lr}
 801774e: 02 af                        	add	r7, sp, #8
 8017750: 84 b0                        	sub	sp, #16
 8017752: 05 46                        	mov	r5, r0
 8017754: 00 78                        	ldrb	r0, [r0]
 8017756: 0c 46                        	mov	r4, r1
 8017758: 41 28                        	cmp	r0, #65
 801775a: 28 bf                        	it	hs
 801775c: 41 20                        	movhs	r0, #65
 801775e: df e8 10 f0                  	tbh	[pc, r0, lsl #1]

08017762 $d.246:
 8017762:	42 00 4b 00	.word	0x004b0042
 8017766:	54 00 5d 00	.word	0x005d0054
 801776a:	66 00 6f 00	.word	0x006f0066
 801776e:	78 00 81 00	.word	0x00810078
 8017772:	8a 00 93 00	.word	0x0093008a
 8017776:	9c 00 a5 00	.word	0x00a5009c
 801777a:	ae 00 b7 00	.word	0x00b700ae
 801777e:	c0 00 c9 00	.word	0x00c900c0
 8017782:	d2 00 db 00	.word	0x00db00d2
 8017786:	e4 00 ed 00	.word	0x00ed00e4
 801778a:	f6 00 ff 00	.word	0x00ff00f6
 801778e:	08 01 11 01	.word	0x01110108
 8017792:	1a 01 23 01	.word	0x0123011a
 8017796:	2c 01 35 01	.word	0x0135012c
 801779a:	3e 01 47 01	.word	0x0147013e
 801779e:	50 01 59 01	.word	0x01590150
 80177a2:	62 01 6b 01	.word	0x016b0162
 80177a6:	74 01 7d 01	.word	0x017d0174
 80177aa:	86 01 8f 01	.word	0x018f0186
 80177ae:	98 01 a1 01	.word	0x01a10198
 80177b2:	aa 01 b3 01	.word	0x01b301aa
 80177b6:	bc 01 c5 01	.word	0x01c501bc
 80177ba:	ce 01 d7 01	.word	0x01d701ce
 80177be:	e0 01 e9 01	.word	0x01e901e0
 80177c2:	f2 01 fb 01	.word	0x01fb01f2
 80177c6:	04 02 0d 02	.word	0x020d0204
 80177ca:	16 02 1f 02	.word	0x021f0216
 80177ce:	28 02 31 02	.word	0x02310228
 80177d2:	3a 02 43 02	.word	0x0243023a
 80177d6:	4c 02 55 02	.word	0x0255024c
 80177da:	5e 02 67 02	.word	0x0267025e
 80177de:	70 02 79 02	.word	0x02790270
 80177e2:	82 02 92 02	.word	0x02920282

080177e6 $t.247:
 80177e6: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 80177ea: 07 22                        	movs	r2, #7
 80177ec: cb 68                        	ldr	r3, [r1, #12]
 80177ee: 4e f6 14 51                  	movw	r1, #60692
 80177f2: c0 f6 01 01                  	movt	r1, #2049
 80177f6: 3e e2                        	b	#1148 <$t.247+0x494>
 80177f8: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 80177fc: 0e 22                        	movs	r2, #14
 80177fe: cb 68                        	ldr	r3, [r1, #12]
 8017800: 4e f6 1b 51                  	movw	r1, #60699
 8017804: c0 f6 01 01                  	movt	r1, #2049
 8017808: 35 e2                        	b	#1130 <$t.247+0x494>
 801780a: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 801780e: 13 22                        	movs	r2, #19
 8017810: cb 68                        	ldr	r3, [r1, #12]
 8017812: 4e f6 29 51                  	movw	r1, #60713
 8017816: c0 f6 01 01                  	movt	r1, #2049
 801781a: 2c e2                        	b	#1112 <$t.247+0x494>
 801781c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8017820: 0f 22                        	movs	r2, #15
 8017822: cb 68                        	ldr	r3, [r1, #12]
 8017824: 4e f6 3c 51                  	movw	r1, #60732
 8017828: c0 f6 01 01                  	movt	r1, #2049
 801782c: 23 e2                        	b	#1094 <$t.247+0x494>
 801782e: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8017832: 0b 22                        	movs	r2, #11
 8017834: cb 68                        	ldr	r3, [r1, #12]
 8017836: 4e f6 4b 51                  	movw	r1, #60747
 801783a: c0 f6 01 01                  	movt	r1, #2049
 801783e: 1a e2                        	b	#1076 <$t.247+0x494>
 8017840: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8017844: 0b 22                        	movs	r2, #11
 8017846: cb 68                        	ldr	r3, [r1, #12]
 8017848: 4e f6 56 51                  	movw	r1, #60758
 801784c: c0 f6 01 01                  	movt	r1, #2049
 8017850: 11 e2                        	b	#1058 <$t.247+0x494>
 8017852: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8017856: 0f 22                        	movs	r2, #15
 8017858: cb 68                        	ldr	r3, [r1, #12]
 801785a: 4e f6 61 51                  	movw	r1, #60769
 801785e: c0 f6 01 01                  	movt	r1, #2049
 8017862: 08 e2                        	b	#1040 <$t.247+0x494>
 8017864: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8017868: 0b 22                        	movs	r2, #11
 801786a: cb 68                        	ldr	r3, [r1, #12]
 801786c: 4e f6 70 51                  	movw	r1, #60784
 8017870: c0 f6 01 01                  	movt	r1, #2049
 8017874: ff e1                        	b	#1022 <$t.247+0x494>
 8017876: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 801787a: 11 22                        	movs	r2, #17
 801787c: cb 68                        	ldr	r3, [r1, #12]
 801787e: 4e f6 7b 51                  	movw	r1, #60795
 8017882: c0 f6 01 01                  	movt	r1, #2049
 8017886: f6 e1                        	b	#1004 <$t.247+0x494>
 8017888: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 801788c: 18 22                        	movs	r2, #24
 801788e: cb 68                        	ldr	r3, [r1, #12]
 8017890: 4e f6 8c 51                  	movw	r1, #60812
 8017894: c0 f6 01 01                  	movt	r1, #2049
 8017898: ed e1                        	b	#986 <$t.247+0x494>
 801789a: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 801789e: 1b 22                        	movs	r2, #27
 80178a0: cb 68                        	ldr	r3, [r1, #12]
 80178a2: 4e f6 a4 51                  	movw	r1, #60836
 80178a6: c0 f6 01 01                  	movt	r1, #2049
 80178aa: e4 e1                        	b	#968 <$t.247+0x494>
 80178ac: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 80178b0: 17 22                        	movs	r2, #23
 80178b2: cb 68                        	ldr	r3, [r1, #12]
 80178b4: 4e f6 bf 51                  	movw	r1, #60863
 80178b8: c0 f6 01 01                  	movt	r1, #2049
 80178bc: db e1                        	b	#950 <$t.247+0x494>
 80178be: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 80178c2: 11 22                        	movs	r2, #17
 80178c4: cb 68                        	ldr	r3, [r1, #12]
 80178c6: 4e f6 d6 51                  	movw	r1, #60886
 80178ca: c0 f6 01 01                  	movt	r1, #2049
 80178ce: d2 e1                        	b	#932 <$t.247+0x494>
 80178d0: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 80178d4: 10 22                        	movs	r2, #16
 80178d6: cb 68                        	ldr	r3, [r1, #12]
 80178d8: 4d f2 7c 01                  	movw	r1, #53372
 80178dc: c0 f6 01 01                  	movt	r1, #2049
 80178e0: c9 e1                        	b	#914 <$t.247+0x494>
 80178e2: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 80178e6: 1a 22                        	movs	r2, #26
 80178e8: cb 68                        	ldr	r3, [r1, #12]
 80178ea: 4e f6 e7 51                  	movw	r1, #60903
 80178ee: c0 f6 01 01                  	movt	r1, #2049
 80178f2: c0 e1                        	b	#896 <$t.247+0x494>
 80178f4: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 80178f8: 12 22                        	movs	r2, #18
 80178fa: cb 68                        	ldr	r3, [r1, #12]
 80178fc: 4e f6 01 61                  	movw	r1, #60929
 8017900: c0 f6 01 01                  	movt	r1, #2049
 8017904: b7 e1                        	b	#878 <$t.247+0x494>
 8017906: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 801790a: 15 22                        	movs	r2, #21
 801790c: cb 68                        	ldr	r3, [r1, #12]
 801790e: 4e f6 13 61                  	movw	r1, #60947
 8017912: c0 f6 01 01                  	movt	r1, #2049
 8017916: ae e1                        	b	#860 <$t.247+0x494>
 8017918: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 801791c: 12 22                        	movs	r2, #18
 801791e: cb 68                        	ldr	r3, [r1, #12]
 8017920: 4e f6 28 61                  	movw	r1, #60968
 8017924: c0 f6 01 01                  	movt	r1, #2049
 8017928: a5 e1                        	b	#842 <$t.247+0x494>
 801792a: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 801792e: 11 22                        	movs	r2, #17
 8017930: cb 68                        	ldr	r3, [r1, #12]
 8017932: 4e f6 3a 61                  	movw	r1, #60986
 8017936: c0 f6 01 01                  	movt	r1, #2049
 801793a: 9c e1                        	b	#824 <$t.247+0x494>
 801793c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8017940: 17 22                        	movs	r2, #23
 8017942: cb 68                        	ldr	r3, [r1, #12]
 8017944: 4e f6 4b 61                  	movw	r1, #61003
 8017948: c0 f6 01 01                  	movt	r1, #2049
 801794c: 93 e1                        	b	#806 <$t.247+0x494>
 801794e: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8017952: 1d 22                        	movs	r2, #29
 8017954: cb 68                        	ldr	r3, [r1, #12]
 8017956: 4e f6 62 61                  	movw	r1, #61026
 801795a: c0 f6 01 01                  	movt	r1, #2049
 801795e: 8a e1                        	b	#788 <$t.247+0x494>
 8017960: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8017964: 19 22                        	movs	r2, #25
 8017966: cb 68                        	ldr	r3, [r1, #12]
 8017968: 4e f6 7f 61                  	movw	r1, #61055
 801796c: c0 f6 01 01                  	movt	r1, #2049
 8017970: 81 e1                        	b	#770 <$t.247+0x494>
 8017972: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8017976: 1a 22                        	movs	r2, #26
 8017978: cb 68                        	ldr	r3, [r1, #12]
 801797a: 4e f6 98 61                  	movw	r1, #61080
 801797e: c0 f6 01 01                  	movt	r1, #2049
 8017982: 78 e1                        	b	#752 <$t.247+0x494>
 8017984: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8017988: 10 22                        	movs	r2, #16
 801798a: cb 68                        	ldr	r3, [r1, #12]
 801798c: 4d f2 8c 01                  	movw	r1, #53388
 8017990: c0 f6 01 01                  	movt	r1, #2049
 8017994: 6f e1                        	b	#734 <$t.247+0x494>
 8017996: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 801799a: 11 22                        	movs	r2, #17
 801799c: cb 68                        	ldr	r3, [r1, #12]
 801799e: 4e f6 b2 61                  	movw	r1, #61106
 80179a2: c0 f6 01 01                  	movt	r1, #2049
 80179a6: 66 e1                        	b	#716 <$t.247+0x494>
 80179a8: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 80179ac: 0d 22                        	movs	r2, #13
 80179ae: cb 68                        	ldr	r3, [r1, #12]
 80179b0: 4e f6 c3 61                  	movw	r1, #61123
 80179b4: c0 f6 01 01                  	movt	r1, #2049
 80179b8: 5d e1                        	b	#698 <$t.247+0x494>
 80179ba: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 80179be: 18 22                        	movs	r2, #24
 80179c0: cb 68                        	ldr	r3, [r1, #12]
 80179c2: 4e f6 d0 61                  	movw	r1, #61136
 80179c6: c0 f6 01 01                  	movt	r1, #2049
 80179ca: 54 e1                        	b	#680 <$t.247+0x494>
 80179cc: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 80179d0: 11 22                        	movs	r2, #17
 80179d2: cb 68                        	ldr	r3, [r1, #12]
 80179d4: 4e f6 e8 61                  	movw	r1, #61160
 80179d8: c0 f6 01 01                  	movt	r1, #2049
 80179dc: 4b e1                        	b	#662 <$t.247+0x494>
 80179de: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 80179e2: 13 22                        	movs	r2, #19
 80179e4: cb 68                        	ldr	r3, [r1, #12]
 80179e6: 4e f6 f9 61                  	movw	r1, #61177
 80179ea: c0 f6 01 01                  	movt	r1, #2049
 80179ee: 42 e1                        	b	#644 <$t.247+0x494>
 80179f0: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 80179f4: 12 22                        	movs	r2, #18
 80179f6: cb 68                        	ldr	r3, [r1, #12]
 80179f8: 4e f6 0c 71                  	movw	r1, #61196
 80179fc: c0 f6 01 01                  	movt	r1, #2049
 8017a00: 39 e1                        	b	#626 <$t.247+0x494>
 8017a02: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8017a06: 14 22                        	movs	r2, #20
 8017a08: cb 68                        	ldr	r3, [r1, #12]
 8017a0a: 4e f6 1e 71                  	movw	r1, #61214
 8017a0e: c0 f6 01 01                  	movt	r1, #2049
 8017a12: 30 e1                        	b	#608 <$t.247+0x494>
 8017a14: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8017a18: 10 22                        	movs	r2, #16
 8017a1a: cb 68                        	ldr	r3, [r1, #12]
 8017a1c: 4d f2 9c 01                  	movw	r1, #53404
 8017a20: c0 f6 01 01                  	movt	r1, #2049
 8017a24: 27 e1                        	b	#590 <$t.247+0x494>
 8017a26: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8017a2a: 1c 22                        	movs	r2, #28
 8017a2c: cb 68                        	ldr	r3, [r1, #12]
 8017a2e: 4e f6 32 71                  	movw	r1, #61234
 8017a32: c0 f6 01 01                  	movt	r1, #2049
 8017a36: 1e e1                        	b	#572 <$t.247+0x494>
 8017a38: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8017a3c: 14 22                        	movs	r2, #20
 8017a3e: cb 68                        	ldr	r3, [r1, #12]
 8017a40: 4e f6 4e 71                  	movw	r1, #61262
 8017a44: c0 f6 01 01                  	movt	r1, #2049
 8017a48: 15 e1                        	b	#554 <$t.247+0x494>
 8017a4a: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8017a4e: 12 22                        	movs	r2, #18
 8017a50: cb 68                        	ldr	r3, [r1, #12]
 8017a52: 4e f6 62 71                  	movw	r1, #61282
 8017a56: c0 f6 01 01                  	movt	r1, #2049
 8017a5a: 0c e1                        	b	#536 <$t.247+0x494>
 8017a5c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8017a60: 17 22                        	movs	r2, #23
 8017a62: cb 68                        	ldr	r3, [r1, #12]
 8017a64: 4e f6 74 71                  	movw	r1, #61300
 8017a68: c0 f6 01 01                  	movt	r1, #2049
 8017a6c: 03 e1                        	b	#518 <$t.247+0x494>
 8017a6e: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8017a72: 10 22                        	movs	r2, #16
 8017a74: cb 68                        	ldr	r3, [r1, #12]
 8017a76: 4d f2 ac 01                  	movw	r1, #53420
 8017a7a: c0 f6 01 01                  	movt	r1, #2049
 8017a7e: fa e0                        	b	#500 <$t.247+0x494>
 8017a80: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8017a84: 1b 22                        	movs	r2, #27
 8017a86: cb 68                        	ldr	r3, [r1, #12]
 8017a88: 4e f6 8b 71                  	movw	r1, #61323
 8017a8c: c0 f6 01 01                  	movt	r1, #2049
 8017a90: f1 e0                        	b	#482 <$t.247+0x494>
 8017a92: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8017a96: 16 22                        	movs	r2, #22
 8017a98: cb 68                        	ldr	r3, [r1, #12]
 8017a9a: 4e f6 a6 71                  	movw	r1, #61350
 8017a9e: c0 f6 01 01                  	movt	r1, #2049
 8017aa2: e8 e0                        	b	#464 <$t.247+0x494>
 8017aa4: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8017aa8: 18 22                        	movs	r2, #24
 8017aaa: cb 68                        	ldr	r3, [r1, #12]
 8017aac: 4e f6 bc 71                  	movw	r1, #61372
 8017ab0: c0 f6 01 01                  	movt	r1, #2049
 8017ab4: df e0                        	b	#446 <$t.247+0x494>
 8017ab6: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8017aba: 0d 22                        	movs	r2, #13
 8017abc: cb 68                        	ldr	r3, [r1, #12]
 8017abe: 4e f6 d4 71                  	movw	r1, #61396
 8017ac2: c0 f6 01 01                  	movt	r1, #2049
 8017ac6: d6 e0                        	b	#428 <$t.247+0x494>
 8017ac8: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8017acc: 1e 22                        	movs	r2, #30
 8017ace: cb 68                        	ldr	r3, [r1, #12]
 8017ad0: 4e f6 e1 71                  	movw	r1, #61409
 8017ad4: c0 f6 01 01                  	movt	r1, #2049
 8017ad8: cd e0                        	b	#410 <$t.247+0x494>
 8017ada: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8017ade: 1d 22                        	movs	r2, #29
 8017ae0: cb 68                        	ldr	r3, [r1, #12]
 8017ae2: 4e f6 ff 71                  	movw	r1, #61439
 8017ae6: c0 f6 01 01                  	movt	r1, #2049
 8017aea: c4 e0                        	b	#392 <$t.247+0x494>
 8017aec: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8017af0: 14 22                        	movs	r2, #20
 8017af2: cb 68                        	ldr	r3, [r1, #12]
 8017af4: 4f f2 1c 01                  	movw	r1, #61468
 8017af8: c0 f6 01 01                  	movt	r1, #2049
 8017afc: bb e0                        	b	#374 <$t.247+0x494>
 8017afe: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8017b02: 18 22                        	movs	r2, #24
 8017b04: cb 68                        	ldr	r3, [r1, #12]
 8017b06: 4f f2 30 01                  	movw	r1, #61488
 8017b0a: c0 f6 01 01                  	movt	r1, #2049
 8017b0e: b2 e0                        	b	#356 <$t.247+0x494>
 8017b10: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8017b14: 0b 22                        	movs	r2, #11
 8017b16: cb 68                        	ldr	r3, [r1, #12]
 8017b18: 4f f2 48 01                  	movw	r1, #61512
 8017b1c: c0 f6 01 01                  	movt	r1, #2049
 8017b20: a9 e0                        	b	#338 <$t.247+0x494>
 8017b22: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8017b26: 21 22                        	movs	r2, #33
 8017b28: cb 68                        	ldr	r3, [r1, #12]
 8017b2a: 4f f2 53 01                  	movw	r1, #61523
 8017b2e: c0 f6 01 01                  	movt	r1, #2049
 8017b32: a0 e0                        	b	#320 <$t.247+0x494>
 8017b34: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8017b38: 14 22                        	movs	r2, #20
 8017b3a: cb 68                        	ldr	r3, [r1, #12]
 8017b3c: 4f f2 74 01                  	movw	r1, #61556
 8017b40: c0 f6 01 01                  	movt	r1, #2049
 8017b44: 97 e0                        	b	#302 <$t.247+0x494>
 8017b46: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8017b4a: 1c 22                        	movs	r2, #28
 8017b4c: cb 68                        	ldr	r3, [r1, #12]
 8017b4e: 4f f2 88 01                  	movw	r1, #61576
 8017b52: c0 f6 01 01                  	movt	r1, #2049
 8017b56: 8e e0                        	b	#284 <$t.247+0x494>
 8017b58: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8017b5c: 16 22                        	movs	r2, #22
 8017b5e: cb 68                        	ldr	r3, [r1, #12]
 8017b60: 4f f2 a4 01                  	movw	r1, #61604
 8017b64: c0 f6 01 01                  	movt	r1, #2049
 8017b68: 85 e0                        	b	#266 <$t.247+0x494>
 8017b6a: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8017b6e: 11 22                        	movs	r2, #17
 8017b70: cb 68                        	ldr	r3, [r1, #12]
 8017b72: 4f f2 ba 01                  	movw	r1, #61626
 8017b76: c0 f6 01 01                  	movt	r1, #2049
 8017b7a: 7c e0                        	b	#248 <$t.247+0x494>
 8017b7c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8017b80: 16 22                        	movs	r2, #22
 8017b82: cb 68                        	ldr	r3, [r1, #12]
 8017b84: 4f f2 cb 01                  	movw	r1, #61643
 8017b88: c0 f6 01 01                  	movt	r1, #2049
 8017b8c: 73 e0                        	b	#230 <$t.247+0x494>
 8017b8e: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8017b92: 15 22                        	movs	r2, #21
 8017b94: cb 68                        	ldr	r3, [r1, #12]
 8017b96: 4f f2 e1 01                  	movw	r1, #61665
 8017b9a: c0 f6 01 01                  	movt	r1, #2049
 8017b9e: 6a e0                        	b	#212 <$t.247+0x494>
 8017ba0: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8017ba4: 10 22                        	movs	r2, #16
 8017ba6: cb 68                        	ldr	r3, [r1, #12]
 8017ba8: 4d f2 bc 01                  	movw	r1, #53436
 8017bac: c0 f6 01 01                  	movt	r1, #2049
 8017bb0: 61 e0                        	b	#194 <$t.247+0x494>
 8017bb2: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8017bb6: 1f 22                        	movs	r2, #31
 8017bb8: cb 68                        	ldr	r3, [r1, #12]
 8017bba: 4f f2 f6 01                  	movw	r1, #61686
 8017bbe: c0 f6 01 01                  	movt	r1, #2049
 8017bc2: 58 e0                        	b	#176 <$t.247+0x494>
 8017bc4: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8017bc8: 25 22                        	movs	r2, #37
 8017bca: cb 68                        	ldr	r3, [r1, #12]
 8017bcc: 4f f2 15 11                  	movw	r1, #61717
 8017bd0: c0 f6 01 01                  	movt	r1, #2049
 8017bd4: 4f e0                        	b	#158 <$t.247+0x494>
 8017bd6: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8017bda: 0f 22                        	movs	r2, #15
 8017bdc: cb 68                        	ldr	r3, [r1, #12]
 8017bde: 4f f2 3a 11                  	movw	r1, #61754
 8017be2: c0 f6 01 01                  	movt	r1, #2049
 8017be6: 46 e0                        	b	#140 <$t.247+0x494>
 8017be8: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8017bec: 23 22                        	movs	r2, #35
 8017bee: cb 68                        	ldr	r3, [r1, #12]
 8017bf0: 4f f2 49 11                  	movw	r1, #61769
 8017bf4: c0 f6 01 01                  	movt	r1, #2049
 8017bf8: 3d e0                        	b	#122 <$t.247+0x494>
 8017bfa: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8017bfe: 0e 22                        	movs	r2, #14
 8017c00: cb 68                        	ldr	r3, [r1, #12]
 8017c02: 4f f2 6c 11                  	movw	r1, #61804
 8017c06: c0 f6 01 01                  	movt	r1, #2049
 8017c0a: 34 e0                        	b	#104 <$t.247+0x494>
 8017c0c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8017c10: 20 22                        	movs	r2, #32
 8017c12: cb 68                        	ldr	r3, [r1, #12]
 8017c14: 4c f6 84 31                  	movw	r1, #52100
 8017c18: c0 f6 01 01                  	movt	r1, #2049
 8017c1c: 2b e0                        	b	#86 <$t.247+0x494>
 8017c1e: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8017c22: 12 22                        	movs	r2, #18
 8017c24: cb 68                        	ldr	r3, [r1, #12]
 8017c26: 4f f2 7a 11                  	movw	r1, #61818
 8017c2a: c0 f6 01 01                  	movt	r1, #2049
 8017c2e: 22 e0                        	b	#68 <$t.247+0x494>
 8017c30: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8017c34: 1e 22                        	movs	r2, #30
 8017c36: cb 68                        	ldr	r3, [r1, #12]
 8017c38: 4f f2 8c 11                  	movw	r1, #61836
 8017c3c: c0 f6 01 01                  	movt	r1, #2049
 8017c40: 19 e0                        	b	#50 <$t.247+0x494>
 8017c42: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8017c46: 1b 22                        	movs	r2, #27
 8017c48: cb 68                        	ldr	r3, [r1, #12]
 8017c4a: 4f f2 aa 11                  	movw	r1, #61866
 8017c4e: c0 f6 01 01                  	movt	r1, #2049
 8017c52: 10 e0                        	b	#32 <$t.247+0x494>
 8017c54: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8017c58: 13 22                        	movs	r2, #19
 8017c5a: cb 68                        	ldr	r3, [r1, #12]
 8017c5c: 4f f2 c5 11                  	movw	r1, #61893
 8017c60: c0 f6 01 01                  	movt	r1, #2049
 8017c64: 07 e0                        	b	#14 <$t.247+0x494>
 8017c66: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8017c6a: 2e 22                        	movs	r2, #46
 8017c6c: cb 68                        	ldr	r3, [r1, #12]
 8017c6e: 4f f2 d8 11                  	movw	r1, #61912
 8017c72: c0 f6 01 01                  	movt	r1, #2049
 8017c76: 98 47                        	blx	r3
 8017c78: 04 46                        	mov	r4, r0
 8017c7a: 00 2c                        	cmp	r4, #0
 8017c7c: 18 bf                        	it	ne
 8017c7e: 01 24                        	movne	r4, #1
 8017c80: 20 46                        	mov	r0, r4
 8017c82: 04 b0                        	add	sp, #16
 8017c84: b0 bd                        	pop	{r4, r5, r7, pc}
 8017c86: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8017c8a: 06 22                        	movs	r2, #6
 8017c8c: cb 68                        	ldr	r3, [r1, #12]
 8017c8e: 4e f6 fc 41                  	movw	r1, #60668
 8017c92: c0 f6 01 01                  	movt	r1, #2049
 8017c96: 98 47                        	blx	r3
 8017c98: 4e f6 04 52                  	movw	r2, #60676
 8017c9c: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8017ca0: 00 20                        	movs	r0, #0
 8017ca2: 03 a9                        	add	r1, sp, #12
 8017ca4: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8017ca8: c0 f6 01 02                  	movt	r2, #2049
 8017cac: 01 90                        	str	r0, [sp, #4]
 8017cae: 68 46                        	mov	r0, sp
 8017cb0: 00 94                        	str	r4, [sp]
;     Vendor(V),
 8017cb2: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug, PartialEq)]
 8017cb4: fe f7 b9 fe                  	bl	#-4750
 8017cb8: 01 98                        	ldr	r0, [sp, #4]
 8017cba: 9d f8 08 40                  	ldrb.w	r4, [sp, #8]
 8017cbe: 00 28                        	cmp	r0, #0
 8017cc0: db d0                        	beq	#-74 <$t.247+0x498>
 8017cc2: 1c b1                        	cbz	r4, #6
 8017cc4: 01 24                        	movs	r4, #1
 8017cc6: 8d f8 08 40                  	strb.w	r4, [sp, #8]
 8017cca: d6 e7                        	b	#-84 <$t.247+0x498>
 8017ccc: 01 28                        	cmp	r0, #1
 8017cce: 11 d1                        	bne	#34 <$t.247+0x512>
 8017cd0: 9d f8 09 00                  	ldrb.w	r0, [sp, #9]
 8017cd4: 70 b1                        	cbz	r0, #28
 8017cd6: 00 99                        	ldr	r1, [sp]
 8017cd8: 08 78                        	ldrb	r0, [r1]
 8017cda: 40 07                        	lsls	r0, r0, #29
 8017cdc: 0a d4                        	bmi	#20 <$t.247+0x512>
 8017cde: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8017ce2: 01 22                        	movs	r2, #1
 8017ce4: cb 68                        	ldr	r3, [r1, #12]
 8017ce6: 4e f6 21 41                  	movw	r1, #60449
 8017cea: c0 f6 01 01                  	movt	r1, #2049
 8017cee: 01 24                        	movs	r4, #1
 8017cf0: 98 47                        	blx	r3
 8017cf2: 50 b9                        	cbnz	r0, #20
 8017cf4: 00 99                        	ldr	r1, [sp]
 8017cf6: 01 22                        	movs	r2, #1
 8017cf8: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8017cfc: cb 68                        	ldr	r3, [r1, #12]
 8017cfe: 4f f2 69 61                  	movw	r1, #63081
 8017d02: c0 f6 01 01                  	movt	r1, #2049
 8017d06: 98 47                        	blx	r3
 8017d08: 04 46                        	mov	r4, r0
 8017d0a: 8d f8 08 40                  	strb.w	r4, [sp, #8]
 8017d0e: b4 e7                        	b	#-152 <$t.247+0x498>

08017d10 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h308b02151f8bb473:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8017d10: 00 68                        	ldr	r0, [r0]
 8017d12: 00 78                        	ldrb	r0, [r0]
 8017d14: 00 f0 00 b8                  	b.w	#0 <_ZN61_$LT$stm32wb55..event..Status$u20$as$u20$core..fmt..Debug$GT$3fmt17hd22b47b807ed4f96E+0x4>

08017d18 _$LT$stm32wb55..event..Status$u20$as$u20$core..fmt..Debug$GT$::fmt::hd22b47b807ed4f96:
; #[derive(Copy, Clone, Debug, PartialEq)]
 8017d18: 6f f0 40 02                  	mvn	r2, #64
 8017d1c: 52 fa 80 f0                  	uxtab	r0, r2, r0
 8017d20: df e8 10 f0                  	tbh	[pc, r0, lsl #1]

08017d24 $d.250:
 8017d24:	bf 00 19 01	.word	0x011900bf
 8017d28:	df 01 df 01	.word	0x01df01df
 8017d2c:	df 01 22 01	.word	0x012201df
 8017d30:	2b 01 34 01	.word	0x0134012b
 8017d34:	7c 01 d1 00	.word	0x00d1017c
 8017d38:	da 00 df 01	.word	0x01df00da
 8017d3c:	df 01 df 01	.word	0x01df01df
 8017d40:	df 01 e3 00	.word	0x00e301df
 8017d44:	df 01 df 01	.word	0x01df01df
 8017d48:	df 01 85 01	.word	0x018501df
 8017d4c:	ec 00 df 01	.word	0x01df00ec
 8017d50:	df 01 df 01	.word	0x01df01df
 8017d54:	df 01 8e 01	.word	0x018e01df
 8017d58:	f5 00 3d 01	.word	0x013d00f5
 8017d5c:	97 01 fe 00	.word	0x00fe0197
 8017d60:	a9 01 46 01	.word	0x014601a9
 8017d64:	4f 01 b2 01	.word	0x01b2014f
 8017d68:	58 01 61 01	.word	0x01610158
 8017d6c:	a0 01 bb 01	.word	0x01bb01a0
 8017d70:	df 01 df 01	.word	0x01df01df
 8017d74:	df 01 df 01	.word	0x01df01df
 8017d78:	df 01 df 01	.word	0x01df01df
 8017d7c:	df 01 df 01	.word	0x01df01df
 8017d80:	df 01 df 01	.word	0x01df01df
 8017d84:	df 01 df 01	.word	0x01df01df
 8017d88:	df 01 df 01	.word	0x01df01df
 8017d8c:	df 01 df 01	.word	0x01df01df
 8017d90:	df 01 df 01	.word	0x01df01df
 8017d94:	df 01 df 01	.word	0x01df01df
 8017d98:	df 01 df 01	.word	0x01df01df
 8017d9c:	df 01 df 01	.word	0x01df01df
 8017da0:	df 01 df 01	.word	0x01df01df
 8017da4:	df 01 07 01	.word	0x010701df
 8017da8:	10 01 d6 01	.word	0x01d60110
 8017dac:	c8 00 c4 01	.word	0x01c400c8
 8017db0:	df 01 df 01	.word	0x01df01df
 8017db4:	df 01 df 01	.word	0x01df01df
 8017db8:	df 01 df 01	.word	0x01df01df
 8017dbc:	df 01 df 01	.word	0x01df01df
 8017dc0:	df 01 df 01	.word	0x01df01df
 8017dc4:	df 01 df 01	.word	0x01df01df
 8017dc8:	df 01 df 01	.word	0x01df01df
 8017dcc:	df 01 df 01	.word	0x01df01df
 8017dd0:	df 01 df 01	.word	0x01df01df
 8017dd4:	df 01 df 01	.word	0x01df01df
 8017dd8:	df 01 df 01	.word	0x01df01df
 8017ddc:	df 01 df 01	.word	0x01df01df
 8017de0:	df 01 df 01	.word	0x01df01df
 8017de4:	df 01 df 01	.word	0x01df01df
 8017de8:	df 01 df 01	.word	0x01df01df
 8017dec:	df 01 df 01	.word	0x01df01df
 8017df0:	df 01 df 01	.word	0x01df01df
 8017df4:	df 01 df 01	.word	0x01df01df
 8017df8:	df 01 df 01	.word	0x01df01df
 8017dfc:	df 01 df 01	.word	0x01df01df
 8017e00:	df 01 df 01	.word	0x01df01df
 8017e04:	df 01 df 01	.word	0x01df01df
 8017e08:	df 01 df 01	.word	0x01df01df
 8017e0c:	df 01 df 01	.word	0x01df01df
 8017e10:	df 01 df 01	.word	0x01df01df
 8017e14:	df 01 df 01	.word	0x01df01df
 8017e18:	df 01 df 01	.word	0x01df01df
 8017e1c:	df 01 df 01	.word	0x01df01df
 8017e20:	df 01 df 01	.word	0x01df01df
 8017e24:	df 01 df 01	.word	0x01df01df
 8017e28:	df 01 df 01	.word	0x01df01df
 8017e2c:	df 01 df 01	.word	0x01df01df
 8017e30:	df 01 df 01	.word	0x01df01df
 8017e34:	df 01 df 01	.word	0x01df01df
 8017e38:	df 01 df 01	.word	0x01df01df
 8017e3c:	df 01 df 01	.word	0x01df01df
 8017e40:	df 01 df 01	.word	0x01df01df
 8017e44:	df 01 df 01	.word	0x01df01df
 8017e48:	df 01 df 01	.word	0x01df01df
 8017e4c:	df 01 df 01	.word	0x01df01df
 8017e50:	df 01 df 01	.word	0x01df01df
 8017e54:	df 01 df 01	.word	0x01df01df
 8017e58:	df 01 df 01	.word	0x01df01df
 8017e5c:	df 01 df 01	.word	0x01df01df
 8017e60:	df 01 df 01	.word	0x01df01df
 8017e64:	df 01 df 01	.word	0x01df01df
 8017e68:	df 01 df 01	.word	0x01df01df
 8017e6c:	df 01 df 01	.word	0x01df01df
 8017e70:	df 01 df 01	.word	0x01df01df
 8017e74:	df 01 df 01	.word	0x01df01df
 8017e78:	df 01 df 01	.word	0x01df01df
 8017e7c:	df 01 df 01	.word	0x01df01df
 8017e80:	df 01 cd 01	.word	0x01cd01df
 8017e84:	6a 01 df 01	.word	0x01df016a
 8017e88:	df 01 df 01	.word	0x01df01df
 8017e8c:	df 01 df 01	.word	0x01df01df
 8017e90:	df 01 df 01	.word	0x01df01df
 8017e94:	df 01 df 01	.word	0x01df01df
 8017e98:	df 01 df 01	.word	0x01df01df
 8017e9c:	df 01 df 01	.word	0x01df01df
 8017ea0:	73 01		.short	0x0173

08017ea2 $t.251:
 8017ea2: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8017ea6: 4f f2 13 21                  	movw	r1, #61971
 8017eaa: d3 68                        	ldr	r3, [r2, #12]
 8017eac: c0 f6 01 01                  	movt	r1, #2049
 8017eb0: 06 22                        	movs	r2, #6
 8017eb2: 18 47                        	bx	r3
 8017eb4: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8017eb8: 4d f2 0c 11                  	movw	r1, #53516
 8017ebc: c0 f6 01 01                  	movt	r1, #2049
 8017ec0: d3 68                        	ldr	r3, [r2, #12]
 8017ec2: 10 22                        	movs	r2, #16
 8017ec4: 18 47                        	bx	r3
 8017ec6: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8017eca: 4d f2 cc 01                  	movw	r1, #53452
 8017ece: c0 f6 01 01                  	movt	r1, #2049
 8017ed2: d3 68                        	ldr	r3, [r2, #12]
 8017ed4: 10 22                        	movs	r2, #16
 8017ed6: 18 47                        	bx	r3
 8017ed8: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8017edc: 4d f2 dc 01                  	movw	r1, #53468
 8017ee0: c0 f6 01 01                  	movt	r1, #2049
 8017ee4: d3 68                        	ldr	r3, [r2, #12]
 8017ee6: 10 22                        	movs	r2, #16
 8017ee8: 18 47                        	bx	r3
 8017eea: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8017eee: 4f f2 49 21                  	movw	r1, #62025
 8017ef2: c0 f6 01 01                  	movt	r1, #2049
 8017ef6: d3 68                        	ldr	r3, [r2, #12]
 8017ef8: 0a 22                        	movs	r2, #10
 8017efa: 18 47                        	bx	r3
 8017efc: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8017f00: 4f f2 65 21                  	movw	r1, #62053
 8017f04: d3 68                        	ldr	r3, [r2, #12]
 8017f06: c0 f6 01 01                  	movt	r1, #2049
 8017f0a: 1a 22                        	movs	r2, #26
 8017f0c: 18 47                        	bx	r3
 8017f0e: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8017f12: 4f f2 8b 21                  	movw	r1, #62091
 8017f16: c0 f6 01 01                  	movt	r1, #2049
 8017f1a: d3 68                        	ldr	r3, [r2, #12]
 8017f1c: 0b 22                        	movs	r2, #11
 8017f1e: 18 47                        	bx	r3
 8017f20: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8017f24: 4f f2 c2 21                  	movw	r1, #62146
 8017f28: c0 f6 01 01                  	movt	r1, #2049
 8017f2c: d3 68                        	ldr	r3, [r2, #12]
 8017f2e: 0f 22                        	movs	r2, #15
 8017f30: 18 47                        	bx	r3
 8017f32: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8017f36: 4f f2 47 31                  	movw	r1, #62279
 8017f3a: c0 f6 01 01                  	movt	r1, #2049
 8017f3e: d3 68                        	ldr	r3, [r2, #12]
 8017f40: 0b 22                        	movs	r2, #11
 8017f42: 18 47                        	bx	r3
 8017f44: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8017f48: 4f f2 52 31                  	movw	r1, #62290
 8017f4c: c0 f6 01 01                  	movt	r1, #2049
 8017f50: d3 68                        	ldr	r3, [r2, #12]
 8017f52: 12 22                        	movs	r2, #18
 8017f54: 18 47                        	bx	r3
 8017f56: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8017f5a: 4e f6 3a 61                  	movw	r1, #60986
 8017f5e: c0 f6 01 01                  	movt	r1, #2049
 8017f62: d3 68                        	ldr	r3, [r2, #12]
 8017f64: 11 22                        	movs	r2, #17
 8017f66: 18 47                        	bx	r3
 8017f68: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8017f6c: 4f f2 19 21                  	movw	r1, #61977
 8017f70: c0 f6 01 01                  	movt	r1, #2049
 8017f74: d3 68                        	ldr	r3, [r2, #12]
 8017f76: 0a 22                        	movs	r2, #10
 8017f78: 18 47                        	bx	r3
 8017f7a: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8017f7e: 4f f2 23 21                  	movw	r1, #61987
 8017f82: d3 68                        	ldr	r3, [r2, #12]
 8017f84: c0 f6 01 01                  	movt	r1, #2049
 8017f88: 05 22                        	movs	r2, #5
 8017f8a: 18 47                        	bx	r3
 8017f8c: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8017f90: 4f f2 28 21                  	movw	r1, #61992
 8017f94: c0 f6 01 01                  	movt	r1, #2049
 8017f98: d3 68                        	ldr	r3, [r2, #12]
 8017f9a: 12 22                        	movs	r2, #18
 8017f9c: 18 47                        	bx	r3
 8017f9e: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8017fa2: 4f f2 96 21                  	movw	r1, #62102
 8017fa6: d3 68                        	ldr	r3, [r2, #12]
 8017fa8: c0 f6 01 01                  	movt	r1, #2049
 8017fac: 18 22                        	movs	r2, #24
 8017fae: 18 47                        	bx	r3
 8017fb0: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8017fb4: 4f f2 e2 21                  	movw	r1, #62178
 8017fb8: c0 f6 01 01                  	movt	r1, #2049
 8017fbc: d3 68                        	ldr	r3, [r2, #12]
 8017fbe: 0d 22                        	movs	r2, #13
 8017fc0: 18 47                        	bx	r3
 8017fc2: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8017fc6: 4d f2 ec 01                  	movw	r1, #53484
 8017fca: c0 f6 01 01                  	movt	r1, #2049
 8017fce: d3 68                        	ldr	r3, [r2, #12]
 8017fd0: 10 22                        	movs	r2, #16
 8017fd2: 18 47                        	bx	r3
 8017fd4: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8017fd8: 4d f2 fc 01                  	movw	r1, #53500
 8017fdc: c0 f6 01 01                  	movt	r1, #2049
 8017fe0: d3 68                        	ldr	r3, [r2, #12]
 8017fe2: 10 22                        	movs	r2, #16
 8017fe4: 18 47                        	bx	r3
 8017fe6: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8017fea: 4f f2 fa 21                  	movw	r1, #62202
 8017fee: d3 68                        	ldr	r3, [r2, #12]
 8017ff0: c0 f6 01 01                  	movt	r1, #2049
 8017ff4: 15 22                        	movs	r2, #21
 8017ff6: 18 47                        	bx	r3
 8017ff8: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8017ffc: 4f f2 06 21                  	movw	r1, #61958
 8018000: c0 f6 01 01                  	movt	r1, #2049
 8018004: d3 68                        	ldr	r3, [r2, #12]
 8018006: 0d 22                        	movs	r2, #13
 8018008: 18 47                        	bx	r3
 801800a: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801800e: 4f f2 81 31                  	movw	r1, #62337
 8018012: d3 68                        	ldr	r3, [r2, #12]
 8018014: c0 f6 01 01                  	movt	r1, #2049
 8018018: 07 22                        	movs	r2, #7
 801801a: 18 47                        	bx	r3
 801801c: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8018020: 4f f2 3a 21                  	movw	r1, #62010
 8018024: c0 f6 01 01                  	movt	r1, #2049
 8018028: d3 68                        	ldr	r3, [r2, #12]
 801802a: 0f 22                        	movs	r2, #15
 801802c: 18 47                        	bx	r3
 801802e: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8018032: 4f f2 53 21                  	movw	r1, #62035
 8018036: c0 f6 01 01                  	movt	r1, #2049
 801803a: d3 68                        	ldr	r3, [r2, #12]
 801803c: 12 22                        	movs	r2, #18
 801803e: 18 47                        	bx	r3
 8018040: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8018044: 4f f2 7f 21                  	movw	r1, #62079
 8018048: c0 f6 01 01                  	movt	r1, #2049
 801804c: d3 68                        	ldr	r3, [r2, #12]
 801804e: 0c 22                        	movs	r2, #12
 8018050: 18 47                        	bx	r3
 8018052: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8018056: 4f f2 ae 21                  	movw	r1, #62126
 801805a: d3 68                        	ldr	r3, [r2, #12]
 801805c: c0 f6 01 01                  	movt	r1, #2049
 8018060: 14 22                        	movs	r2, #20
 8018062: 18 47                        	bx	r3
 8018064: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8018068: 4f f2 0f 31                  	movw	r1, #62223
 801806c: d3 68                        	ldr	r3, [r2, #12]
 801806e: c0 f6 01 01                  	movt	r1, #2049
 8018072: 1d 22                        	movs	r2, #29
 8018074: 18 47                        	bx	r3
 8018076: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801807a: 4f f2 d1 21                  	movw	r1, #62161
 801807e: c0 f6 01 01                  	movt	r1, #2049
 8018082: d3 68                        	ldr	r3, [r2, #12]
 8018084: 11 22                        	movs	r2, #17
 8018086: 18 47                        	bx	r3
 8018088: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801808c: 4f f2 ef 21                  	movw	r1, #62191
 8018090: c0 f6 01 01                  	movt	r1, #2049
 8018094: d3 68                        	ldr	r3, [r2, #12]
 8018096: 0b 22                        	movs	r2, #11
 8018098: 18 47                        	bx	r3
 801809a: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801809e: 4f f2 2c 31                  	movw	r1, #62252
 80180a2: d3 68                        	ldr	r3, [r2, #12]
 80180a4: c0 f6 01 01                  	movt	r1, #2049
 80180a8: 1b 22                        	movs	r2, #27
 80180aa: 18 47                        	bx	r3
 80180ac: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 80180b0: 4f f2 75 31                  	movw	r1, #62325
 80180b4: c0 f6 01 01                  	movt	r1, #2049
 80180b8: d3 68                        	ldr	r3, [r2, #12]
 80180ba: 0c 22                        	movs	r2, #12
 80180bc: 18 47                        	bx	r3
 80180be: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 80180c2: 4f f2 88 31                  	movw	r1, #62344
 80180c6: d3 68                        	ldr	r3, [r2, #12]
 80180c8: c0 f6 01 01                  	movt	r1, #2049
 80180cc: 19 22                        	movs	r2, #25
 80180ce: 18 47                        	bx	r3
 80180d0: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 80180d4: 4f f2 64 31                  	movw	r1, #62308
 80180d8: c0 f6 01 01                  	movt	r1, #2049
 80180dc: d3 68                        	ldr	r3, [r2, #12]
 80180de: 11 22                        	movs	r2, #17
 80180e0: 18 47                        	bx	r3
 80180e2: fe de                        	trap

080180e4 stm32wb55::event::to_att_read_response::h0e8ae0a4a79eca61:
; fn to_att_read_response(
 80180e4: f0 b5                        	push	{r4, r5, r6, r7, lr}
 80180e6: 03 af                        	add	r7, sp, #12
 80180e8: 4d f8 04 8d                  	str	r8, [sp, #-4]!
 80180ec: c0 b0                        	sub	sp, #256
 80180ee: 15 46                        	mov	r5, r2
 80180f0: 04 46                        	mov	r4, r0
;     require_len_at_least!(buffer, 5);
 80180f2: 04 2a                        	cmp	r2, #4
 80180f4: 01 d8                        	bhi	#2 <_ZN9stm32wb555event20to_att_read_response17h0e8ae0a4a79eca61E+0x1a>
 80180f6: 05 20                        	movs	r0, #5
 80180f8: 27 e0                        	b	#78 <_ZN9stm32wb555event20to_att_read_response17h0e8ae0a4a79eca61E+0x6a>
;     let data_len = buffer[4] as usize;
 80180fa: 0e 79                        	ldrb	r6, [r1, #4]
 80180fc: 88 46                        	mov	r8, r1
;     require_len!(buffer, 5 + data_len);
 80180fe: 70 1d                        	adds	r0, r6, #5
 8018100: a8 42                        	cmp	r0, r5
 8018102: 22 d1                        	bne	#68 <_ZN9stm32wb555event20to_att_read_response17h0e8ae0a4a79eca61E+0x6a>
 8018104: 01 a8                        	add	r0, sp, #4
;     let mut value_buf = [0; MAX_READ_RESPONSE_LEN];
 8018106: fa 21                        	movs	r1, #250
 8018108: 04 f0 7c fa                  	bl	#17656
;         } else if self.end > slice.len() {
 801810c: fb 2e                        	cmp	r6, #251
 801810e: 25 d2                        	bhs	#74 <_ZN9stm32wb555event20to_att_read_response17h0e8ae0a4a79eca61E+0x7c>
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 8018110: 68 1f                        	subs	r0, r5, #5
;                 if !(*left_val == *right_val) {
 8018112: b0 42                        	cmp	r0, r6
 8018114: 27 d1                        	bne	#78 <_ZN9stm32wb555event20to_att_read_response17h0e8ae0a4a79eca61E+0x86>
;         intrinsics::offset(self, count)
 8018116: 08 f1 05 01                  	add.w	r1, r8, #5
 801811a: 01 a8                        	add	r0, sp, #4
;     copy_nonoverlapping(src, dst, count)
 801811c: 32 46                        	mov	r2, r6
 801811e: 04 f0 fc f8                  	bl	#16888
;         assert!($size <= $src.len());
 8018122: 25 f0 01 00                  	bic	r0, r5, #1
 8018126: 02 28                        	cmp	r0, #2
 8018128: 20 d0                        	beq	#64 <_ZN9stm32wb555event20to_att_read_response17h0e8ae0a4a79eca61E+0x8c>
;     copy_nonoverlapping(src, dst, count)
 801812a: b8 f8 02 00                  	ldrh.w	r0, [r8, #2]
 801812e: 01 a9                        	add	r1, sp, #4
;     Ok(AttReadResponse {
 8018130: 20 81                        	strh	r0, [r4, #8]
 8018132: 04 f1 0a 00                  	add.w	r0, r4, #10
 8018136: fa 22                        	movs	r2, #250
 8018138: 66 60                        	str	r6, [r4, #4]
 801813a: 04 f0 ee f8                  	bl	#16860
 801813e: 00 20                        	movs	r0, #0
 8018140: 20 60                        	str	r0, [r4]
; }
 8018142: 40 b0                        	add	sp, #256
 8018144: 5d f8 04 8b                  	ldr	r8, [sp], #4
 8018148: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 801814a: e5 60                        	str	r5, [r4, #12]
 801814c: 20 61                        	str	r0, [r4, #16]
 801814e: 01 20                        	movs	r0, #1
 8018150: 20 72                        	strb	r0, [r4, #8]
 8018152: 20 60                        	str	r0, [r4]
 8018154: 40 b0                        	add	sp, #256
 8018156: 5d f8 04 8b                  	ldr	r8, [sp], #4
 801815a: f0 bd                        	pop	{r4, r5, r6, r7, pc}
;             slice_index_len_fail(self.end, slice.len());
 801815c: 30 46                        	mov	r0, r6
 801815e: fa 21                        	movs	r1, #250
 8018160: fd f7 59 fe                  	bl	#-9038
 8018164: fe de                        	trap
;         $crate::panicking::panic_fmt($crate::format_args!($fmt, $($arg)+))
 8018166: fd f7 e3 fc                  	bl	#-9786
 801816a: fe de                        	trap
;         $crate::panicking::panic($msg)
 801816c: 4c f6 64 30                  	movw	r0, #52068
 8018170: 20 21                        	movs	r1, #32
 8018172: c0 f6 01 00                  	movt	r0, #2049
 8018176: fe f7 6f f9                  	bl	#-7458
 801817a: fe de                        	trap

0801817c stm32wb55::event::to_attribute_value::h02dd038988e36bfd:
; fn to_attribute_value(buffer: &[u8]) -> Result<AttributeValue, hci::event::Error<Stm32Wb5xError>> {
 801817c: f0 b5                        	push	{r4, r5, r6, r7, lr}
 801817e: 03 af                        	add	r7, sp, #12
 8018180: 2d e9 00 0b                  	push.w	{r8, r9, r11}
 8018184: be b0                        	sub	sp, #248
 8018186: 16 46                        	mov	r6, r2
 8018188: 04 46                        	mov	r4, r0
;     require_len_at_least!(buffer, 7);
 801818a: 06 2a                        	cmp	r2, #6
 801818c: 01 d8                        	bhi	#2 <_ZN9stm32wb555event18to_attribute_value17h02dd038988e36bfdE+0x1a>
 801818e: 07 20                        	movs	r0, #7
 8018190: 2e e0                        	b	#92 <_ZN9stm32wb555event18to_attribute_value17h02dd038988e36bfdE+0x78>
;     let data_len = buffer[4] as usize;
 8018192: 0d 79                        	ldrb	r5, [r1, #4]
 8018194: 89 46                        	mov	r9, r1
;     require_len!(buffer, 5 + data_len);
 8018196: 68 1d                        	adds	r0, r5, #5
 8018198: b0 42                        	cmp	r0, r6
 801819a: 29 d1                        	bne	#82 <_ZN9stm32wb555event18to_attribute_value17h02dd038988e36bfdE+0x78>
 801819c: 68 46                        	mov	r0, sp
;     let mut value_buf = [0; MAX_ATTRIBUTE_VALUE_LEN];
 801819e: f8 21                        	movs	r1, #248
 80181a0: 04 f0 30 fa                  	bl	#17504
;     let value_len = data_len - 2;
 80181a4: a5 f1 02 08                  	sub.w	r8, r5, #2
;         } else if self.end > slice.len() {
 80181a8: b8 f1 f9 0f                  	cmp.w	r8, #249
 80181ac: 29 d2                        	bhs	#82 <_ZN9stm32wb555event18to_attribute_value17h02dd038988e36bfdE+0x8a>
;                 if !(*left_val == *right_val) {
 80181ae: 70 1f                        	subs	r0, r6, #5
 80181b0: a8 42                        	cmp	r0, r5
 80181b2: 2b d1                        	bne	#86 <_ZN9stm32wb555event18to_attribute_value17h02dd038988e36bfdE+0x94>
;         intrinsics::offset(self, count)
 80181b4: 09 f1 07 01                  	add.w	r1, r9, #7
 80181b8: 68 46                        	mov	r0, sp
;     copy_nonoverlapping(src, dst, count)
 80181ba: 42 46                        	mov	r2, r8
 80181bc: 04 f0 ad f8                  	bl	#16730
;         assert!($size <= $src.len());
 80181c0: 26 f0 01 00                  	bic	r0, r6, #1
 80181c4: 02 28                        	cmp	r0, #2
 80181c6: 24 d0                        	beq	#72 <_ZN9stm32wb555event18to_attribute_value17h02dd038988e36bfdE+0x9a>
;     copy_nonoverlapping(src, dst, count)
 80181c8: b9 f8 02 00                  	ldrh.w	r0, [r9, #2]
;     Ok(AttributeValue {
 80181cc: f8 22                        	movs	r2, #248
;     copy_nonoverlapping(src, dst, count)
 80181ce: b9 f8 05 10                  	ldrh.w	r1, [r9, #5]
;     Ok(AttributeValue {
 80181d2: 20 81                        	strh	r0, [r4, #8]
 80181d4: 04 f1 0c 00                  	add.w	r0, r4, #12
 80181d8: 61 81                        	strh	r1, [r4, #10]
 80181da: 69 46                        	mov	r1, sp
 80181dc: c4 f8 04 80                  	str.w	r8, [r4, #4]
 80181e0: 04 f0 d8 f8                  	bl	#16816
 80181e4: 00 20                        	movs	r0, #0
 80181e6: 20 60                        	str	r0, [r4]
; }
 80181e8: 3e b0                        	add	sp, #248
 80181ea: bd e8 00 0b                  	pop.w	{r8, r9, r11}
 80181ee: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 80181f0: e6 60                        	str	r6, [r4, #12]
 80181f2: 20 61                        	str	r0, [r4, #16]
 80181f4: 01 20                        	movs	r0, #1
 80181f6: 20 72                        	strb	r0, [r4, #8]
 80181f8: 20 60                        	str	r0, [r4]
 80181fa: 3e b0                        	add	sp, #248
 80181fc: bd e8 00 0b                  	pop.w	{r8, r9, r11}
 8018200: f0 bd                        	pop	{r4, r5, r6, r7, pc}
;             slice_index_len_fail(self.end, slice.len());
 8018202: 40 46                        	mov	r0, r8
 8018204: f8 21                        	movs	r1, #248
 8018206: fd f7 06 fe                  	bl	#-9204
 801820a: fe de                        	trap
;         $crate::panicking::panic_fmt($crate::format_args!($fmt, $($arg)+))
 801820c: fd f7 90 fc                  	bl	#-9952
 8018210: fe de                        	trap
;         $crate::panicking::panic($msg)
 8018212: 4c f6 64 30                  	movw	r0, #52068
 8018216: 20 21                        	movs	r1, #32
 8018218: c0 f6 01 00                  	movt	r0, #2049
 801821c: fe f7 1c f9                  	bl	#-7624
 8018220: fe de                        	trap

08018222 _$LT$stm32wb55..event..AttributeHandle$u20$as$u20$core..fmt..Debug$GT$::fmt::ha75f110e2dcaf436:
; #[derive(Copy, Clone, Debug, PartialEq)]
 8018222: b0 b5                        	push	{r4, r5, r7, lr}
 8018224: 02 af                        	add	r7, sp, #8
 8018226: 84 b0                        	sub	sp, #16
 8018228: 0c 46                        	mov	r4, r1
 801822a: 05 46                        	mov	r5, r0
 801822c: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8018230: 0f 22                        	movs	r2, #15
 8018232: cb 68                        	ldr	r3, [r1, #12]
 8018234: 4f f2 39 41                  	movw	r1, #62521
 8018238: c0 f6 01 01                  	movt	r1, #2049
 801823c: 98 47                        	blx	r3
 801823e: 4f f2 48 42                  	movw	r2, #62536
 8018242: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8018246: 00 20                        	movs	r0, #0
 8018248: 03 a9                        	add	r1, sp, #12
 801824a: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 801824e: c0 f6 01 02                  	movt	r2, #2049
 8018252: 01 90                        	str	r0, [sp, #4]
 8018254: 68 46                        	mov	r0, sp
 8018256: 00 94                        	str	r4, [sp]
; pub struct AttributeHandle(pub u16);
 8018258: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug, PartialEq)]
 801825a: fe f7 e6 fb                  	bl	#-6196
 801825e: 01 98                        	ldr	r0, [sp, #4]
 8018260: 9d f8 08 40                  	ldrb.w	r4, [sp, #8]
 8018264: 18 b3                        	cbz	r0, #70
 8018266: 0c b1                        	cbz	r4, #2
 8018268: 01 24                        	movs	r4, #1
 801826a: 1e e0                        	b	#60 <_ZN70_$LT$stm32wb55..event..AttributeHandle$u20$as$u20$core..fmt..Debug$GT$3fmt17ha75f110e2dcaf436E+0x8c>
 801826c: 01 28                        	cmp	r0, #1
 801826e: 11 d1                        	bne	#34 <_ZN70_$LT$stm32wb55..event..AttributeHandle$u20$as$u20$core..fmt..Debug$GT$3fmt17ha75f110e2dcaf436E+0x76>
 8018270: 9d f8 09 00                  	ldrb.w	r0, [sp, #9]
 8018274: 70 b1                        	cbz	r0, #28
 8018276: 00 99                        	ldr	r1, [sp]
 8018278: 08 78                        	ldrb	r0, [r1]
 801827a: 40 07                        	lsls	r0, r0, #29
 801827c: 0a d4                        	bmi	#20 <_ZN70_$LT$stm32wb55..event..AttributeHandle$u20$as$u20$core..fmt..Debug$GT$3fmt17ha75f110e2dcaf436E+0x76>
 801827e: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8018282: 01 22                        	movs	r2, #1
 8018284: cb 68                        	ldr	r3, [r1, #12]
 8018286: 4e f6 21 41                  	movw	r1, #60449
 801828a: c0 f6 01 01                  	movt	r1, #2049
 801828e: 01 24                        	movs	r4, #1
 8018290: 98 47                        	blx	r3
 8018292: 50 b9                        	cbnz	r0, #20
 8018294: 00 99                        	ldr	r1, [sp]
 8018296: 01 22                        	movs	r2, #1
 8018298: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 801829c: cb 68                        	ldr	r3, [r1, #12]
 801829e: 4f f2 69 61                  	movw	r1, #63081
 80182a2: c0 f6 01 01                  	movt	r1, #2049
 80182a6: 98 47                        	blx	r3
 80182a8: 04 46                        	mov	r4, r0
 80182aa: 8d f8 08 40                  	strb.w	r4, [sp, #8]
 80182ae: 00 2c                        	cmp	r4, #0
 80182b0: 18 bf                        	it	ne
 80182b2: 01 24                        	movne	r4, #1
 80182b4: 20 46                        	mov	r0, r4
 80182b6: 04 b0                        	add	sp, #16
 80182b8: b0 bd                        	pop	{r4, r5, r7, pc}

080182ba _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h3884a7f4eed3e4a7:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 80182ba: f0 b5                        	push	{r4, r5, r6, r7, lr}
 80182bc: 03 af                        	add	r7, sp, #12
 80182be: 4d f8 04 8d                  	str	r8, [sp, #-4]!
 80182c2: 84 b0                        	sub	sp, #16
 80182c4: 0d 46                        	mov	r5, r1
 80182c6: d0 e9 00 64                  	ldrd	r6, r4, [r0]
 80182ca: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 80182ce: 01 22                        	movs	r2, #1
 80182d0: cb 68                        	ldr	r3, [r1, #12]
 80182d2: 4e f6 24 41                  	movw	r1, #60452
 80182d6: c0 f6 01 01                  	movt	r1, #2049
 80182da: 98 47                        	blx	r3
 80182dc: 00 21                        	movs	r1, #0
 80182de: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 80182e2: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 80182e6: 01 95                        	str	r5, [sp, #4]
;                     if is_empty!(self) {
 80182e8: 84 b1                        	cbz	r4, #32
 80182ea: 4f f2 ec 38                  	movw	r8, #62444
 80182ee: 01 a8                        	add	r0, sp, #4
 80182f0: 03 ad                        	add	r5, sp, #12
 80182f2: c0 f6 01 08                  	movt	r8, #2049
;             self.entry(&entry);
 80182f6: 29 46                        	mov	r1, r5
 80182f8: 42 46                        	mov	r2, r8
;         for entry in entries {
 80182fa: 03 96                        	str	r6, [sp, #12]
;             self.entry(&entry);
 80182fc: fe f7 05 fc                  	bl	#-6134
;         $self.ptr.as_ptr() as *const T == $self.end
 8018300: 01 3c                        	subs	r4, #1
;         intrinsics::offset(self, count) as *mut T
 8018302: 06 f1 01 06                  	add.w	r6, r6, #1
;                     if is_empty!(self) {
 8018306: f6 d1                        	bne	#-20 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3884a7f4eed3e4a7E+0x40>
 8018308: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 801830c: 20 b1                        	cbz	r0, #8
 801830e: 01 20                        	movs	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8018310: 04 b0                        	add	sp, #16
 8018312: 5d f8 04 8b                  	ldr	r8, [sp], #4
 8018316: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 8018318: 01 99                        	ldr	r1, [sp, #4]
 801831a: 01 22                        	movs	r2, #1
 801831c: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8018320: cb 68                        	ldr	r3, [r1, #12]
 8018322: 4e f6 23 41                  	movw	r1, #60451
 8018326: c0 f6 01 01                  	movt	r1, #2049
 801832a: 98 47                        	blx	r3
 801832c: 04 b0                        	add	sp, #16
 801832e: 5d f8 04 8b                  	ldr	r8, [sp], #4
 8018332: f0 bd                        	pop	{r4, r5, r6, r7, pc}

08018334 _$LT$stm32wb55..event..Uuid16$u20$as$u20$core..fmt..Debug$GT$::fmt::hd493f165efebe214:
; #[derive(Copy, Clone, Debug, PartialEq)]
 8018334: b0 b5                        	push	{r4, r5, r7, lr}
 8018336: 02 af                        	add	r7, sp, #8
 8018338: 84 b0                        	sub	sp, #16
 801833a: 0c 46                        	mov	r4, r1
 801833c: 05 46                        	mov	r5, r0
 801833e: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8018342: 06 22                        	movs	r2, #6
 8018344: cb 68                        	ldr	r3, [r1, #12]
 8018346: 4f f2 88 41                  	movw	r1, #62600
 801834a: c0 f6 01 01                  	movt	r1, #2049
 801834e: 98 47                        	blx	r3
 8018350: 4f f2 48 42                  	movw	r2, #62536
 8018354: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8018358: 00 20                        	movs	r0, #0
 801835a: 03 a9                        	add	r1, sp, #12
 801835c: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8018360: c0 f6 01 02                  	movt	r2, #2049
 8018364: 01 90                        	str	r0, [sp, #4]
 8018366: 68 46                        	mov	r0, sp
 8018368: 00 94                        	str	r4, [sp]
; pub struct Uuid16(pub u16);
 801836a: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug, PartialEq)]
 801836c: fe f7 5d fb                  	bl	#-6470
 8018370: 01 98                        	ldr	r0, [sp, #4]
 8018372: 9d f8 08 40                  	ldrb.w	r4, [sp, #8]
 8018376: 18 b3                        	cbz	r0, #70
 8018378: 0c b1                        	cbz	r4, #2
 801837a: 01 24                        	movs	r4, #1
 801837c: 1e e0                        	b	#60 <_ZN61_$LT$stm32wb55..event..Uuid16$u20$as$u20$core..fmt..Debug$GT$3fmt17hd493f165efebe214E+0x8c>
 801837e: 01 28                        	cmp	r0, #1
 8018380: 11 d1                        	bne	#34 <_ZN61_$LT$stm32wb55..event..Uuid16$u20$as$u20$core..fmt..Debug$GT$3fmt17hd493f165efebe214E+0x76>
 8018382: 9d f8 09 00                  	ldrb.w	r0, [sp, #9]
 8018386: 70 b1                        	cbz	r0, #28
 8018388: 00 99                        	ldr	r1, [sp]
 801838a: 08 78                        	ldrb	r0, [r1]
 801838c: 40 07                        	lsls	r0, r0, #29
 801838e: 0a d4                        	bmi	#20 <_ZN61_$LT$stm32wb55..event..Uuid16$u20$as$u20$core..fmt..Debug$GT$3fmt17hd493f165efebe214E+0x76>
 8018390: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8018394: 01 22                        	movs	r2, #1
 8018396: cb 68                        	ldr	r3, [r1, #12]
 8018398: 4e f6 21 41                  	movw	r1, #60449
 801839c: c0 f6 01 01                  	movt	r1, #2049
 80183a0: 01 24                        	movs	r4, #1
 80183a2: 98 47                        	blx	r3
 80183a4: 50 b9                        	cbnz	r0, #20
 80183a6: 00 99                        	ldr	r1, [sp]
 80183a8: 01 22                        	movs	r2, #1
 80183aa: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 80183ae: cb 68                        	ldr	r3, [r1, #12]
 80183b0: 4f f2 69 61                  	movw	r1, #63081
 80183b4: c0 f6 01 01                  	movt	r1, #2049
 80183b8: 98 47                        	blx	r3
 80183ba: 04 46                        	mov	r4, r0
 80183bc: 8d f8 08 40                  	strb.w	r4, [sp, #8]
 80183c0: 00 2c                        	cmp	r4, #0
 80183c2: 18 bf                        	it	ne
 80183c4: 01 24                        	movne	r4, #1
 80183c6: 20 46                        	mov	r0, r4
 80183c8: 04 b0                        	add	sp, #16
 80183ca: b0 bd                        	pop	{r4, r5, r7, pc}

080183cc _$LT$stm32wb55..event..Uuid128$u20$as$u20$core..fmt..Debug$GT$::fmt::h0f5effcc7c4624fc:
; #[derive(Copy, Clone, Debug, PartialEq)]
 80183cc: b0 b5                        	push	{r4, r5, r7, lr}
 80183ce: 02 af                        	add	r7, sp, #8
 80183d0: 84 b0                        	sub	sp, #16
 80183d2: 0c 46                        	mov	r4, r1
 80183d4: 05 46                        	mov	r5, r0
 80183d6: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 80183da: 07 22                        	movs	r2, #7
 80183dc: cb 68                        	ldr	r3, [r1, #12]
 80183de: 4f f2 70 41                  	movw	r1, #62576
 80183e2: c0 f6 01 01                  	movt	r1, #2049
 80183e6: 98 47                        	blx	r3
 80183e8: 4f f2 78 42                  	movw	r2, #62584
 80183ec: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 80183f0: 00 20                        	movs	r0, #0
 80183f2: 03 a9                        	add	r1, sp, #12
 80183f4: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 80183f8: c0 f6 01 02                  	movt	r2, #2049
 80183fc: 01 90                        	str	r0, [sp, #4]
 80183fe: 68 46                        	mov	r0, sp
 8018400: 00 94                        	str	r4, [sp]
; pub struct Uuid128(pub [u8; 16]);
 8018402: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug, PartialEq)]
 8018404: fe f7 11 fb                  	bl	#-6622
 8018408: 01 98                        	ldr	r0, [sp, #4]
 801840a: 9d f8 08 40                  	ldrb.w	r4, [sp, #8]
 801840e: 18 b3                        	cbz	r0, #70
 8018410: 0c b1                        	cbz	r4, #2
 8018412: 01 24                        	movs	r4, #1
 8018414: 1e e0                        	b	#60 <_ZN62_$LT$stm32wb55..event..Uuid128$u20$as$u20$core..fmt..Debug$GT$3fmt17h0f5effcc7c4624fcE+0x8c>
 8018416: 01 28                        	cmp	r0, #1
 8018418: 11 d1                        	bne	#34 <_ZN62_$LT$stm32wb55..event..Uuid128$u20$as$u20$core..fmt..Debug$GT$3fmt17h0f5effcc7c4624fcE+0x76>
 801841a: 9d f8 09 00                  	ldrb.w	r0, [sp, #9]
 801841e: 70 b1                        	cbz	r0, #28
 8018420: 00 99                        	ldr	r1, [sp]
 8018422: 08 78                        	ldrb	r0, [r1]
 8018424: 40 07                        	lsls	r0, r0, #29
 8018426: 0a d4                        	bmi	#20 <_ZN62_$LT$stm32wb55..event..Uuid128$u20$as$u20$core..fmt..Debug$GT$3fmt17h0f5effcc7c4624fcE+0x76>
 8018428: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 801842c: 01 22                        	movs	r2, #1
 801842e: cb 68                        	ldr	r3, [r1, #12]
 8018430: 4e f6 21 41                  	movw	r1, #60449
 8018434: c0 f6 01 01                  	movt	r1, #2049
 8018438: 01 24                        	movs	r4, #1
 801843a: 98 47                        	blx	r3
 801843c: 50 b9                        	cbnz	r0, #20
 801843e: 00 99                        	ldr	r1, [sp]
 8018440: 01 22                        	movs	r2, #1
 8018442: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8018446: cb 68                        	ldr	r3, [r1, #12]
 8018448: 4f f2 69 61                  	movw	r1, #63081
 801844c: c0 f6 01 01                  	movt	r1, #2049
 8018450: 98 47                        	blx	r3
 8018452: 04 46                        	mov	r4, r0
 8018454: 8d f8 08 40                  	strb.w	r4, [sp, #8]
 8018458: 00 2c                        	cmp	r4, #0
 801845a: 18 bf                        	it	ne
 801845c: 01 24                        	movne	r4, #1
 801845e: 20 46                        	mov	r0, r4
 8018460: 04 b0                        	add	sp, #16
 8018462: b0 bd                        	pop	{r4, r5, r7, pc}

08018464 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h98aab30bf6d6460f:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8018464: f0 b5                        	push	{r4, r5, r6, r7, lr}
 8018466: 03 af                        	add	r7, sp, #12
 8018468: 4d f8 04 8d                  	str	r8, [sp, #-4]!
 801846c: 84 b0                        	sub	sp, #16
 801846e: 0d 46                        	mov	r5, r1
 8018470: 04 68                        	ldr	r4, [r0]
 8018472: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8018476: 01 22                        	movs	r2, #1
 8018478: cb 68                        	ldr	r3, [r1, #12]
 801847a: 4e f6 24 41                  	movw	r1, #60452
 801847e: c0 f6 01 01                  	movt	r1, #2049
 8018482: 4f f0 01 08                  	mov.w	r8, #1
 8018486: 98 47                        	blx	r3
 8018488: 01 95                        	str	r5, [sp, #4]
;             self.entry(&entry);
 801848a: 4f f2 ec 35                  	movw	r5, #62444
 801848e: 03 ae                        	add	r6, sp, #12
 8018490: 00 21                        	movs	r1, #0
 8018492: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8018496: c0 f6 01 05                  	movt	r5, #2049
 801849a: 01 a8                        	add	r0, sp, #4
 801849c: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 80184a0: 31 46                        	mov	r1, r6
 80184a2: 2a 46                        	mov	r2, r5
;         for entry in entries {
 80184a4: 03 94                        	str	r4, [sp, #12]
;             self.entry(&entry);
 80184a6: fe f7 30 fb                  	bl	#-6560
;         intrinsics::offset(self, count) as *mut T
 80184aa: 61 1c                        	adds	r1, r4, #1
;         for entry in entries {
 80184ac: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 80184ae: 31 46                        	mov	r1, r6
 80184b0: 2a 46                        	mov	r2, r5
 80184b2: fe f7 2a fb                  	bl	#-6572
;         intrinsics::offset(self, count) as *mut T
 80184b6: a1 1c                        	adds	r1, r4, #2
;         for entry in entries {
 80184b8: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 80184ba: 31 46                        	mov	r1, r6
 80184bc: 2a 46                        	mov	r2, r5
 80184be: fe f7 24 fb                  	bl	#-6584
;         intrinsics::offset(self, count) as *mut T
 80184c2: e1 1c                        	adds	r1, r4, #3
;         for entry in entries {
 80184c4: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 80184c6: 31 46                        	mov	r1, r6
 80184c8: 2a 46                        	mov	r2, r5
 80184ca: fe f7 1e fb                  	bl	#-6596
;         intrinsics::offset(self, count) as *mut T
 80184ce: 21 1d                        	adds	r1, r4, #4
;         for entry in entries {
 80184d0: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 80184d2: 31 46                        	mov	r1, r6
 80184d4: 2a 46                        	mov	r2, r5
 80184d6: fe f7 18 fb                  	bl	#-6608
;         intrinsics::offset(self, count) as *mut T
 80184da: 61 1d                        	adds	r1, r4, #5
;         for entry in entries {
 80184dc: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 80184de: 31 46                        	mov	r1, r6
 80184e0: 2a 46                        	mov	r2, r5
 80184e2: fe f7 12 fb                  	bl	#-6620
;         intrinsics::offset(self, count) as *mut T
 80184e6: a1 1d                        	adds	r1, r4, #6
;         for entry in entries {
 80184e8: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 80184ea: 31 46                        	mov	r1, r6
 80184ec: 2a 46                        	mov	r2, r5
 80184ee: fe f7 0c fb                  	bl	#-6632
;         intrinsics::offset(self, count) as *mut T
 80184f2: e1 1d                        	adds	r1, r4, #7
;         for entry in entries {
 80184f4: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 80184f6: 31 46                        	mov	r1, r6
 80184f8: 2a 46                        	mov	r2, r5
 80184fa: fe f7 06 fb                  	bl	#-6644
;         intrinsics::offset(self, count) as *mut T
 80184fe: 04 f1 08 01                  	add.w	r1, r4, #8
;         for entry in entries {
 8018502: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 8018504: 31 46                        	mov	r1, r6
 8018506: 2a 46                        	mov	r2, r5
 8018508: fe f7 ff fa                  	bl	#-6658
;         intrinsics::offset(self, count) as *mut T
 801850c: 04 f1 09 01                  	add.w	r1, r4, #9
;         for entry in entries {
 8018510: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 8018512: 31 46                        	mov	r1, r6
 8018514: 2a 46                        	mov	r2, r5
 8018516: fe f7 f8 fa                  	bl	#-6672
;         intrinsics::offset(self, count) as *mut T
 801851a: 04 f1 0a 01                  	add.w	r1, r4, #10
;         for entry in entries {
 801851e: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 8018520: 31 46                        	mov	r1, r6
 8018522: 2a 46                        	mov	r2, r5
 8018524: fe f7 f1 fa                  	bl	#-6686
;         intrinsics::offset(self, count) as *mut T
 8018528: 04 f1 0b 01                  	add.w	r1, r4, #11
;         for entry in entries {
 801852c: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801852e: 31 46                        	mov	r1, r6
 8018530: 2a 46                        	mov	r2, r5
 8018532: fe f7 ea fa                  	bl	#-6700
;         intrinsics::offset(self, count) as *mut T
 8018536: 04 f1 0c 01                  	add.w	r1, r4, #12
;         for entry in entries {
 801853a: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801853c: 31 46                        	mov	r1, r6
 801853e: 2a 46                        	mov	r2, r5
 8018540: fe f7 e3 fa                  	bl	#-6714
;         intrinsics::offset(self, count) as *mut T
 8018544: 04 f1 0d 01                  	add.w	r1, r4, #13
;         for entry in entries {
 8018548: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801854a: 31 46                        	mov	r1, r6
 801854c: 2a 46                        	mov	r2, r5
 801854e: fe f7 dc fa                  	bl	#-6728
;         intrinsics::offset(self, count) as *mut T
 8018552: 04 f1 0e 01                  	add.w	r1, r4, #14
;         for entry in entries {
 8018556: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 8018558: 31 46                        	mov	r1, r6
 801855a: 2a 46                        	mov	r2, r5
 801855c: fe f7 d5 fa                  	bl	#-6742
;         intrinsics::offset(self, count) as *mut T
 8018560: 04 f1 0f 01                  	add.w	r1, r4, #15
;         for entry in entries {
 8018564: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 8018566: 31 46                        	mov	r1, r6
 8018568: 2a 46                        	mov	r2, r5
 801856a: fe f7 ce fa                  	bl	#-6756
 801856e: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 8018572: 20 b1                        	cbz	r0, #8
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8018574: 40 46                        	mov	r0, r8
 8018576: 04 b0                        	add	sp, #16
 8018578: 5d f8 04 8b                  	ldr	r8, [sp], #4
 801857c: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 801857e: 01 99                        	ldr	r1, [sp, #4]
 8018580: 01 22                        	movs	r2, #1
 8018582: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8018586: cb 68                        	ldr	r3, [r1, #12]
 8018588: 4e f6 23 41                  	movw	r1, #60451
 801858c: c0 f6 01 01                  	movt	r1, #2049
 8018590: 98 47                        	blx	r3
 8018592: 80 46                        	mov	r8, r0
 8018594: 40 46                        	mov	r0, r8
 8018596: 04 b0                        	add	sp, #16
 8018598: 5d f8 04 8b                  	ldr	r8, [sp], #4
 801859c: f0 bd                        	pop	{r4, r5, r6, r7, pc}

0801859e _$LT$stm32wb55..event..HandleInfoPair$u20$as$u20$core..fmt..Debug$GT$::fmt::h1fe1714f576b5a42:
; #[derive(Copy, Clone, Debug)]
 801859e: b0 b5                        	push	{r4, r5, r7, lr}
 80185a0: 02 af                        	add	r7, sp, #8
 80185a2: 84 b0                        	sub	sp, #16
 80185a4: 0d 46                        	mov	r5, r1
 80185a6: 04 46                        	mov	r4, r0
 80185a8: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 80185ac: 0e 22                        	movs	r2, #14
 80185ae: cb 68                        	ldr	r3, [r1, #12]
 80185b0: 4f f2 a8 41                  	movw	r1, #62632
 80185b4: c0 f6 01 01                  	movt	r1, #2049
 80185b8: 98 47                        	blx	r3
 80185ba: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 80185be: 4f f2 c0 40                  	movw	r0, #62656
 80185c2: 00 21                        	movs	r1, #0
 80185c4: c0 f6 01 00                  	movt	r0, #2049
 80185c8: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 80185cc: 4f f2 b6 41                  	movw	r1, #62646
 80185d0: 00 90                        	str	r0, [sp]
 80185d2: 01 a8                        	add	r0, sp, #4
 80185d4: 03 ab                        	add	r3, sp, #12
 80185d6: c0 f6 01 01                  	movt	r1, #2049
 80185da: 09 22                        	movs	r2, #9
 80185dc: 01 95                        	str	r5, [sp, #4]
;     pub attribute: AttributeHandle,
 80185de: 03 94                        	str	r4, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 80185e0: fe f7 a6 f8                  	bl	#-7860
;     pub group_end: GroupEndHandle,
 80185e4: a1 1c                        	adds	r1, r4, #2
 80185e6: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 80185e8: 4f f2 dc 41                  	movw	r1, #62684
 80185ec: 03 ab                        	add	r3, sp, #12
 80185ee: c0 f6 01 01                  	movt	r1, #2049
 80185f2: 09 22                        	movs	r2, #9
 80185f4: 00 91                        	str	r1, [sp]
 80185f6: 4f f2 d0 41                  	movw	r1, #62672
 80185fa: c0 f6 01 01                  	movt	r1, #2049
 80185fe: fe f7 97 f8                  	bl	#-7890
 8018602: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 8018606: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 801860a: b9 b1                        	cbz	r1, #46
 801860c: 08 b1                        	cbz	r0, #2
 801860e: 01 20                        	movs	r0, #1
 8018610: 12 e0                        	b	#36 <_ZN69_$LT$stm32wb55..event..HandleInfoPair$u20$as$u20$core..fmt..Debug$GT$3fmt17h1fe1714f576b5a42E+0x9e>
 8018612: 01 99                        	ldr	r1, [sp, #4]
 8018614: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8018618: 09 78                        	ldrb	r1, [r1]
 801861a: d3 68                        	ldr	r3, [r2, #12]
 801861c: 49 07                        	lsls	r1, r1, #29
 801861e: 05 d4                        	bmi	#10 <_ZN69_$LT$stm32wb55..event..HandleInfoPair$u20$as$u20$core..fmt..Debug$GT$3fmt17h1fe1714f576b5a42E+0x92>
 8018620: 4e f6 1c 41                  	movw	r1, #60444
 8018624: 02 22                        	movs	r2, #2
 8018626: c0 f6 01 01                  	movt	r1, #2049
 801862a: 04 e0                        	b	#8 <_ZN69_$LT$stm32wb55..event..HandleInfoPair$u20$as$u20$core..fmt..Debug$GT$3fmt17h1fe1714f576b5a42E+0x9c>
 801862c: 4e f6 d6 41                  	movw	r1, #60630
 8018630: 01 22                        	movs	r2, #1
 8018632: c0 f6 01 01                  	movt	r1, #2049
 8018636: 98 47                        	blx	r3
 8018638: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 801863c: 00 28                        	cmp	r0, #0
 801863e: 18 bf                        	it	ne
 8018640: 01 20                        	movne	r0, #1
 8018642: 04 b0                        	add	sp, #16
 8018644: b0 bd                        	pop	{r4, r5, r7, pc}

08018646 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::hbd409415701e85a3:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8018646: b0 b5                        	push	{r4, r5, r7, lr}
 8018648: 02 af                        	add	r7, sp, #8
 801864a: 84 b0                        	sub	sp, #16
 801864c: 0c 46                        	mov	r4, r1
 801864e: 05 68                        	ldr	r5, [r0]
 8018650: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8018654: 0e 22                        	movs	r2, #14
 8018656: cb 68                        	ldr	r3, [r1, #12]
 8018658: 4f f2 ec 41                  	movw	r1, #62700
 801865c: c0 f6 01 01                  	movt	r1, #2049
 8018660: 98 47                        	blx	r3
; #[derive(Copy, Clone, Debug, PartialEq)]
 8018662: 4f f2 48 42                  	movw	r2, #62536
 8018666: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 801866a: 00 20                        	movs	r0, #0
 801866c: 03 a9                        	add	r1, sp, #12
 801866e: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8018672: c0 f6 01 02                  	movt	r2, #2049
 8018676: 01 90                        	str	r0, [sp, #4]
 8018678: 68 46                        	mov	r0, sp
 801867a: 00 94                        	str	r4, [sp]
; pub struct GroupEndHandle(pub u16);
 801867c: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug, PartialEq)]
 801867e: fe f7 d4 f9                  	bl	#-7256
 8018682: 01 98                        	ldr	r0, [sp, #4]
 8018684: 9d f8 08 40                  	ldrb.w	r4, [sp, #8]
 8018688: 18 b3                        	cbz	r0, #70
 801868a: 0c b1                        	cbz	r4, #2
 801868c: 01 24                        	movs	r4, #1
 801868e: 1e e0                        	b	#60 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hbd409415701e85a3E+0x8c>
 8018690: 01 28                        	cmp	r0, #1
 8018692: 11 d1                        	bne	#34 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hbd409415701e85a3E+0x76>
 8018694: 9d f8 09 00                  	ldrb.w	r0, [sp, #9]
 8018698: 70 b1                        	cbz	r0, #28
 801869a: 00 99                        	ldr	r1, [sp]
 801869c: 08 78                        	ldrb	r0, [r1]
 801869e: 40 07                        	lsls	r0, r0, #29
 80186a0: 0a d4                        	bmi	#20 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hbd409415701e85a3E+0x76>
 80186a2: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 80186a6: 01 22                        	movs	r2, #1
 80186a8: cb 68                        	ldr	r3, [r1, #12]
 80186aa: 4e f6 21 41                  	movw	r1, #60449
 80186ae: c0 f6 01 01                  	movt	r1, #2049
 80186b2: 01 24                        	movs	r4, #1
 80186b4: 98 47                        	blx	r3
 80186b6: 50 b9                        	cbnz	r0, #20
 80186b8: 00 99                        	ldr	r1, [sp]
 80186ba: 01 22                        	movs	r2, #1
 80186bc: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 80186c0: cb 68                        	ldr	r3, [r1, #12]
 80186c2: 4f f2 69 61                  	movw	r1, #63081
 80186c6: c0 f6 01 01                  	movt	r1, #2049
 80186ca: 98 47                        	blx	r3
 80186cc: 04 46                        	mov	r4, r0
 80186ce: 8d f8 08 40                  	strb.w	r4, [sp, #8]
 80186d2: 00 2c                        	cmp	r4, #0
 80186d4: 18 bf                        	it	ne
 80186d6: 01 24                        	movne	r4, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 80186d8: 20 46                        	mov	r0, r4
 80186da: 04 b0                        	add	sp, #16
 80186dc: b0 bd                        	pop	{r4, r5, r7, pc}

080186de _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h42498ef35ed7c6c5:
 80186de: b0 b5                        	push	{r4, r5, r7, lr}
 80186e0: 02 af                        	add	r7, sp, #8
 80186e2: 84 b0                        	sub	sp, #16
 80186e4: 0c 46                        	mov	r4, r1
 80186e6: 05 68                        	ldr	r5, [r0]
 80186e8: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 80186ec: 0f 22                        	movs	r2, #15
 80186ee: cb 68                        	ldr	r3, [r1, #12]
 80186f0: 4f f2 39 41                  	movw	r1, #62521
 80186f4: c0 f6 01 01                  	movt	r1, #2049
 80186f8: 98 47                        	blx	r3
; #[derive(Copy, Clone, Debug, PartialEq)]
 80186fa: 4f f2 48 42                  	movw	r2, #62536
 80186fe: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8018702: 00 20                        	movs	r0, #0
 8018704: 03 a9                        	add	r1, sp, #12
 8018706: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 801870a: c0 f6 01 02                  	movt	r2, #2049
 801870e: 01 90                        	str	r0, [sp, #4]
 8018710: 68 46                        	mov	r0, sp
 8018712: 00 94                        	str	r4, [sp]
; pub struct AttributeHandle(pub u16);
 8018714: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug, PartialEq)]
 8018716: fe f7 88 f9                  	bl	#-7408
 801871a: 01 98                        	ldr	r0, [sp, #4]
 801871c: 9d f8 08 40                  	ldrb.w	r4, [sp, #8]
 8018720: 18 b3                        	cbz	r0, #70
 8018722: 0c b1                        	cbz	r4, #2
 8018724: 01 24                        	movs	r4, #1
 8018726: 1e e0                        	b	#60 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h42498ef35ed7c6c5E+0x8c>
 8018728: 01 28                        	cmp	r0, #1
 801872a: 11 d1                        	bne	#34 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h42498ef35ed7c6c5E+0x76>
 801872c: 9d f8 09 00                  	ldrb.w	r0, [sp, #9]
 8018730: 70 b1                        	cbz	r0, #28
 8018732: 00 99                        	ldr	r1, [sp]
 8018734: 08 78                        	ldrb	r0, [r1]
 8018736: 40 07                        	lsls	r0, r0, #29
 8018738: 0a d4                        	bmi	#20 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h42498ef35ed7c6c5E+0x76>
 801873a: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 801873e: 01 22                        	movs	r2, #1
 8018740: cb 68                        	ldr	r3, [r1, #12]
 8018742: 4e f6 21 41                  	movw	r1, #60449
 8018746: c0 f6 01 01                  	movt	r1, #2049
 801874a: 01 24                        	movs	r4, #1
 801874c: 98 47                        	blx	r3
 801874e: 50 b9                        	cbnz	r0, #20
 8018750: 00 99                        	ldr	r1, [sp]
 8018752: 01 22                        	movs	r2, #1
 8018754: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8018758: cb 68                        	ldr	r3, [r1, #12]
 801875a: 4f f2 69 61                  	movw	r1, #63081
 801875e: c0 f6 01 01                  	movt	r1, #2049
 8018762: 98 47                        	blx	r3
 8018764: 04 46                        	mov	r4, r0
 8018766: 8d f8 08 40                  	strb.w	r4, [sp, #8]
 801876a: 00 2c                        	cmp	r4, #0
 801876c: 18 bf                        	it	ne
 801876e: 01 24                        	movne	r4, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8018770: 20 46                        	mov	r0, r4
 8018772: 04 b0                        	add	sp, #16
 8018774: b0 bd                        	pop	{r4, r5, r7, pc}

08018776 _$LT$stm32wb55..event..GroupEndHandle$u20$as$u20$core..fmt..Debug$GT$::fmt::h6f4dab86373a0ed2:
; #[derive(Copy, Clone, Debug, PartialEq)]
 8018776: b0 b5                        	push	{r4, r5, r7, lr}
 8018778: 02 af                        	add	r7, sp, #8
 801877a: 84 b0                        	sub	sp, #16
 801877c: 0c 46                        	mov	r4, r1
 801877e: 05 46                        	mov	r5, r0
 8018780: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8018784: 0e 22                        	movs	r2, #14
 8018786: cb 68                        	ldr	r3, [r1, #12]
 8018788: 4f f2 ec 41                  	movw	r1, #62700
 801878c: c0 f6 01 01                  	movt	r1, #2049
 8018790: 98 47                        	blx	r3
 8018792: 4f f2 48 42                  	movw	r2, #62536
 8018796: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 801879a: 00 20                        	movs	r0, #0
 801879c: 03 a9                        	add	r1, sp, #12
 801879e: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 80187a2: c0 f6 01 02                  	movt	r2, #2049
 80187a6: 01 90                        	str	r0, [sp, #4]
 80187a8: 68 46                        	mov	r0, sp
 80187aa: 00 94                        	str	r4, [sp]
; pub struct GroupEndHandle(pub u16);
 80187ac: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug, PartialEq)]
 80187ae: fe f7 3c f9                  	bl	#-7560
 80187b2: 01 98                        	ldr	r0, [sp, #4]
 80187b4: 9d f8 08 40                  	ldrb.w	r4, [sp, #8]
 80187b8: 18 b3                        	cbz	r0, #70
 80187ba: 0c b1                        	cbz	r4, #2
 80187bc: 01 24                        	movs	r4, #1
 80187be: 1e e0                        	b	#60 <_ZN69_$LT$stm32wb55..event..GroupEndHandle$u20$as$u20$core..fmt..Debug$GT$3fmt17h6f4dab86373a0ed2E+0x8c>
 80187c0: 01 28                        	cmp	r0, #1
 80187c2: 11 d1                        	bne	#34 <_ZN69_$LT$stm32wb55..event..GroupEndHandle$u20$as$u20$core..fmt..Debug$GT$3fmt17h6f4dab86373a0ed2E+0x76>
 80187c4: 9d f8 09 00                  	ldrb.w	r0, [sp, #9]
 80187c8: 70 b1                        	cbz	r0, #28
 80187ca: 00 99                        	ldr	r1, [sp]
 80187cc: 08 78                        	ldrb	r0, [r1]
 80187ce: 40 07                        	lsls	r0, r0, #29
 80187d0: 0a d4                        	bmi	#20 <_ZN69_$LT$stm32wb55..event..GroupEndHandle$u20$as$u20$core..fmt..Debug$GT$3fmt17h6f4dab86373a0ed2E+0x76>
 80187d2: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 80187d6: 01 22                        	movs	r2, #1
 80187d8: cb 68                        	ldr	r3, [r1, #12]
 80187da: 4e f6 21 41                  	movw	r1, #60449
 80187de: c0 f6 01 01                  	movt	r1, #2049
 80187e2: 01 24                        	movs	r4, #1
 80187e4: 98 47                        	blx	r3
 80187e6: 50 b9                        	cbnz	r0, #20
 80187e8: 00 99                        	ldr	r1, [sp]
 80187ea: 01 22                        	movs	r2, #1
 80187ec: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 80187f0: cb 68                        	ldr	r3, [r1, #12]
 80187f2: 4f f2 69 61                  	movw	r1, #63081
 80187f6: c0 f6 01 01                  	movt	r1, #2049
 80187fa: 98 47                        	blx	r3
 80187fc: 04 46                        	mov	r4, r0
 80187fe: 8d f8 08 40                  	strb.w	r4, [sp, #8]
 8018802: 00 2c                        	cmp	r4, #0
 8018804: 18 bf                        	it	ne
 8018806: 01 24                        	movne	r4, #1
 8018808: 20 46                        	mov	r0, r4
 801880a: 04 b0                        	add	sp, #16
 801880c: b0 bd                        	pop	{r4, r5, r7, pc}

0801880e _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h426d4ec1eb928321:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801880e: f0 b5                        	push	{r4, r5, r6, r7, lr}
 8018810: 03 af                        	add	r7, sp, #12
 8018812: 4d f8 04 8d                  	str	r8, [sp, #-4]!
 8018816: 84 b0                        	sub	sp, #16
 8018818: 0c 46                        	mov	r4, r1
 801881a: d0 e9 00 65                  	ldrd	r6, r5, [r0]
 801881e: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8018822: 01 22                        	movs	r2, #1
 8018824: cb 68                        	ldr	r3, [r1, #12]
 8018826: 4e f6 24 41                  	movw	r1, #60452
 801882a: c0 f6 01 01                  	movt	r1, #2049
 801882e: 98 47                        	blx	r3
 8018830: 00 21                        	movs	r1, #0
 8018832: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 8018836: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 801883a: 01 94                        	str	r4, [sp, #4]
;                     if is_empty!(self) {
 801883c: 8d b1                        	cbz	r5, #34
 801883e: 4f f2 c0 48                  	movw	r8, #62656
 8018842: 6c 00                        	lsls	r4, r5, #1
 8018844: 01 a8                        	add	r0, sp, #4
 8018846: 03 ad                        	add	r5, sp, #12
 8018848: c0 f6 01 08                  	movt	r8, #2049
;             self.entry(&entry);
 801884c: 29 46                        	mov	r1, r5
 801884e: 42 46                        	mov	r2, r8
;         for entry in entries {
 8018850: 03 96                        	str	r6, [sp, #12]
;             self.entry(&entry);
 8018852: fe f7 5a f9                  	bl	#-7500
;         $self.ptr.as_ptr() as *const T == $self.end
 8018856: 02 3c                        	subs	r4, #2
;         intrinsics::offset(self, count) as *mut T
 8018858: 06 f1 02 06                  	add.w	r6, r6, #2
;                     if is_empty!(self) {
 801885c: f6 d1                        	bne	#-20 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h426d4ec1eb928321E+0x42>
 801885e: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 8018862: 20 b1                        	cbz	r0, #8
 8018864: 01 20                        	movs	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8018866: 04 b0                        	add	sp, #16
 8018868: 5d f8 04 8b                  	ldr	r8, [sp], #4
 801886c: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 801886e: 01 99                        	ldr	r1, [sp, #4]
 8018870: 01 22                        	movs	r2, #1
 8018872: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8018876: cb 68                        	ldr	r3, [r1, #12]
 8018878: 4e f6 23 41                  	movw	r1, #60451
 801887c: c0 f6 01 01                  	movt	r1, #2049
 8018880: 98 47                        	blx	r3
 8018882: 04 b0                        	add	sp, #16
 8018884: 5d f8 04 8b                  	ldr	r8, [sp], #4
 8018888: f0 bd                        	pop	{r4, r5, r6, r7, pc}

0801888a _$LT$stm32wb55..RadioCoprocessor$u20$as$u20$stm32wb55..command..gatt..Commands$GT$::add_characteristic::hea326cc0463ec234:
;         fn $method(&mut self, params: &$param_type) -> nb::Result<(), Self::Error> {
 801888a: f0 b5                        	push	{r4, r5, r6, r7, lr}
 801888c: 03 af                        	add	r7, sp, #12
 801888e: 4d f8 04 8d                  	str	r8, [sp, #-4]!
 8018892: 88 b0                        	sub	sp, #32
 8018894: 80 46                        	mov	r8, r0
;             Uuid::Uuid16(uuid) => {
 8018896: 88 79                        	ldrb	r0, [r1, #6]
 8018898: 00 23                        	movs	r3, #0
;         LittleEndian::write_u16(&mut bytes[0..2], self.service_handle.0);
 801889a: 8a 88                        	ldrh	r2, [r1, #4]
;             Uuid::Uuid16(uuid) => {
 801889c: 01 28                        	cmp	r0, #1
;             let mut bytes = [0; $param_type::MAX_LENGTH];
 801889e: cd f8 1a 30                  	str.w	r3, [sp, #26]
 80188a2: cd f8 16 30                  	str.w	r3, [sp, #22]
 80188a6: cd f8 12 30                  	str.w	r3, [sp, #18]
 80188aa: cd f8 0e 30                  	str.w	r3, [sp, #14]
 80188ae: cd f8 0a 30                  	str.w	r3, [sp, #10]
 80188b2: cd f8 06 30                  	str.w	r3, [sp, #6]
;     copy_nonoverlapping(src, dst, count)
 80188b6: ad f8 04 20                  	strh.w	r2, [sp, #4]
;             Uuid::Uuid16(uuid) => {
 80188ba: 1f d1                        	bne	#62 <_ZN82_$LT$stm32wb55..RadioCoprocessor$u20$as$u20$stm32wb55..command..gatt..Commands$GT$18add_characteristic17hea326cc0463ec234E+0x76>
;     copy_nonoverlapping(src, dst, count)
 80188bc: d1 f8 0f 30                  	ldr.w	r3, [r1, #15]
 80188c0: 02 25                        	movs	r5, #2
 80188c2: d1 f8 07 00                  	ldr.w	r0, [r1, #7]
 80188c6: d1 f8 0b 20                  	ldr.w	r2, [r1, #11]
 80188ca: d1 f8 13 60                  	ldr.w	r6, [r1, #19]
 80188ce: cd f8 0f 30                  	str.w	r3, [sp, #15]
 80188d2: 11 23                        	movs	r3, #17
;                 bytes[0] = 0x02;
 80188d4: 8d f8 06 50                  	strb.w	r5, [sp, #6]
;     copy_nonoverlapping(src, dst, count)
 80188d8: cd f8 07 00                  	str.w	r0, [sp, #7]
 80188dc: cd f8 0b 20                  	str.w	r2, [sp, #11]
 80188e0: cd f8 13 60                  	str.w	r6, [sp, #19]
;         if self.fw_version_before_v72 {
 80188e4: 4a 7f                        	ldrb	r2, [r1, #29]
;         let mut next = 2 + uuid_len;
 80188e6: 98 1c                        	adds	r0, r3, #2
;         if self.fw_version_before_v72 {
 80188e8: 9a b1                        	cbz	r2, #38
 80188ea: 01 ad                        	add	r5, sp, #4
;             bytes[next] = self.characteristic_value_len as u8;
 80188ec: 0a 68                        	ldr	r2, [r1]
;         bytes[next] = self.characteristic_properties.bits();
 80188ee: 0e 7e                        	ldrb	r6, [r1, #24]
;             bytes[next] = self.characteristic_value_len as u8;
 80188f0: 2a 54                        	strb	r2, [r5, r0]
;             next += 1;
 80188f2: da 1c                        	adds	r2, r3, #3
;         bytes[next + 1] = self.security_permissions.bits();
 80188f4: 43 f0 04 00                  	orr	r0, r3, #4
;         bytes[next] = self.characteristic_properties.bits();
 80188f8: ae 54                        	strb	r6, [r5, r2]
 80188fa: 14 e0                        	b	#40 <_ZN82_$LT$stm32wb55..RadioCoprocessor$u20$as$u20$stm32wb55..command..gatt..Commands$GT$18add_characteristic17hea326cc0463ec234E+0xa0>
 80188fc: 01 20                        	movs	r0, #1
 80188fe: 03 23                        	movs	r3, #3
;                 bytes[0] = 0x01;
 8018900: 8d f8 06 00                  	strb.w	r0, [sp, #6]
;             Uuid::Uuid16(uuid) => {
 8018904: 08 89                        	ldrh	r0, [r1, #8]
;     copy_nonoverlapping(src, dst, count)
 8018906: ad f8 07 00                  	strh.w	r0, [sp, #7]
;         if self.fw_version_before_v72 {
 801890a: 4a 7f                        	ldrb	r2, [r1, #29]
;         let mut next = 2 + uuid_len;
 801890c: 98 1c                        	adds	r0, r3, #2
;         if self.fw_version_before_v72 {
 801890e: 00 2a                        	cmp	r2, #0
 8018910: eb d1                        	bne	#-42 <_ZN82_$LT$stm32wb55..RadioCoprocessor$u20$as$u20$stm32wb55..command..gatt..Commands$GT$18add_characteristic17hea326cc0463ec234E+0x64>
;                 &mut bytes[next..next + 2],
 8018912: 43 f0 04 02                  	orr	r2, r3, #4
;         if self.start > self.end {
 8018916: 82 42                        	cmp	r2, r0
 8018918: 5e d3                        	blo	#188 <_ZN82_$LT$stm32wb55..RadioCoprocessor$u20$as$u20$stm32wb55..command..gatt..Commands$GT$18add_characteristic17hea326cc0463ec234E+0x152>
 801891a: 01 ae                        	add	r6, sp, #4
;                 self.characteristic_value_len as u16,
 801891c: 0d 68                        	ldr	r5, [r1]
;         bytes[next] = self.characteristic_properties.bits();
 801891e: 0b 7e                        	ldrb	r3, [r1, #24]
;     copy_nonoverlapping(src, dst, count)
 8018920: 35 52                        	strh	r5, [r6, r0]
;         bytes[next + 1] = self.security_permissions.bits();
 8018922: 50 1c                        	adds	r0, r2, #1
;         bytes[next] = self.characteristic_properties.bits();
 8018924: b3 54                        	strb	r3, [r6, r2]
 8018926: 01 ad                        	add	r5, sp, #4
;         bytes[next + 1] = self.security_permissions.bits();
 8018928: 4b 7e                        	ldrb	r3, [r1, #25]
;         bytes[next + 2] = self.gatt_event_mask.bits();
 801892a: 8e 7e                        	ldrb	r6, [r1, #26]
;         } else if self.end > slice.len() {
 801892c: 16 2a                        	cmp	r2, #22
;         bytes[next + 1] = self.security_permissions.bits();
 801892e: 2b 54                        	strb	r3, [r5, r0]
;         bytes[next + 2] = self.gatt_event_mask.bits();
 8018930: 02 eb 05 00                  	add.w	r0, r2, r5
;         next + 5
 8018934: 02 f1 05 05                  	add.w	r5, r2, #5
;         bytes[next + 3] = self.encryption_key_size.0;
 8018938: b1 f8 1b 10                  	ldrh.w	r1, [r1, #27]
 801893c: a0 f8 03 10                  	strh.w	r1, [r0, #3]
;         bytes[next + 2] = self.gatt_event_mask.bits();
 8018940: 86 70                        	strb	r6, [r0, #2]
;         } else if self.end > slice.len() {
 8018942: 44 d2                        	bhs	#136 <_ZN82_$LT$stm32wb55..RadioCoprocessor$u20$as$u20$stm32wb55..command..gatt..Commands$GT$18add_characteristic17hea326cc0463ec234E+0x148>
;         let cmd = TlPacketType::try_from(cmd_code).map_err(|_| ())?;
 8018944: 01 20                        	movs	r0, #1
 8018946: 03 f0 63 fb                  	bl	#14022
 801894a: 42 28                        	cmp	r0, #66
 801894c: 04 d1                        	bne	#8 <_ZN82_$LT$stm32wb55..RadioCoprocessor$u20$as$u20$stm32wb55..command..gatt..Commands$GT$18add_characteristic17hea326cc0463ec234E+0xd2>
 801894e: 00 20                        	movs	r0, #0
;         }
 8018950: 08 b0                        	add	sp, #32
 8018952: 5d f8 04 8b                  	ldr	r8, [sp], #4
 8018956: f0 bd                        	pop	{r4, r5, r6, r7, pc}
;         self.tx_buf = [0; TX_BUF_SIZE];
 8018958: 08 f1 c1 04                  	add.w	r4, r8, #193
 801895c: 06 46                        	mov	r6, r0
 801895e: ff 21                        	movs	r1, #255
 8018960: 20 46                        	mov	r0, r4
 8018962: 03 f0 4c fe                  	bl	#15512
 8018966: 40 f2 01 40                  	movw	r0, #1025
 801896a: 01 a9                        	add	r1, sp, #4
 801896c: c0 f2 fd 00                  	movt	r0, #253
;     copy_nonoverlapping(src, dst, count)
 8018970: 2a 46                        	mov	r2, r5
 8018972: 40 ea 05 60                  	orr.w	r0, r0, r5, lsl #24
 8018976: 48 f8 bd 0f                  	str	r0, [r8, #189]!
 801897a: 20 46                        	mov	r0, r4
 801897c: 03 f0 cd fc                  	bl	#14746
;             TlPacketType::AclData => {
 8018980: 02 2e                        	cmp	r6, #2
 8018982: 18 bf                        	it	ne
 8018984: 10 2e                        	cmpne	r6, #16
 8018986: 07 d1                        	bne	#14 <_ZN82_$LT$stm32wb55..RadioCoprocessor$u20$as$u20$stm32wb55..command..gatt..Commands$GT$18add_characteristic17hea326cc0463ec234E+0x112>
 8018988: 40 f6 17 20                  	movw	r0, #2583
 801898c: 13 21                        	movs	r1, #19
 801898e: c0 f6 02 00                  	movt	r0, #2050
 8018992: fd f7 61 fd                  	bl	#-9534
 8018996: fe de                        	trap
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 8018998: 40 f2 00 00                  	movw	r0, #0
;     copy(src, dst, count)
 801899c: 41 46                        	mov	r1, r8
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 801899e: c2 f2 03 00                  	movt	r0, #8195
;     copy(src, dst, count)
 80189a2: 40 f2 03 12                  	movw	r2, #259
;         let pcmd_buffer: *mut CmdPacket = (&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 80189a6: 44 68                        	ldr	r4, [r0, #4]
 80189a8: 20 68                        	ldr	r0, [r4]
;         self as _
 80189aa: 08 30                        	adds	r0, #8
;     copy(src, dst, count)
 80189ac: 03 f0 b5 fc                  	bl	#14698
;         let mut cmd_packet = &mut *(&*TL_REF_TABLE.assume_init().ble_table).pcmd_buffer;
 80189b0: 20 68                        	ldr	r0, [r4]
 80189b2: 01 21                        	movs	r1, #1
;         cmd_packet.cmdserial.ty = TlPacketType::BleCmd as u8;
 80189b4: 01 72                        	strb	r1, [r0, #8]
 80189b6: 40 f6 08 40                  	movw	r0, #3080
 80189ba: c5 f6 00 00                  	movt	r0, #22528
 80189be: 4f f4 80 31                  	mov.w	r1, #65536
;     intrinsics::volatile_store(dst, src);
 80189c2: 01 60                        	str	r1, [r0]
 80189c4: 02 20                        	movs	r0, #2
;         }
 80189c6: 08 b0                        	add	sp, #32
 80189c8: 5d f8 04 8b                  	ldr	r8, [sp], #4
 80189cc: f0 bd                        	pop	{r4, r5, r6, r7, pc}
;             slice_index_len_fail(self.end, slice.len());
 80189ce: 28 46                        	mov	r0, r5
 80189d0: 1a 21                        	movs	r1, #26
 80189d2: fd f7 20 fa                  	bl	#-11200
 80189d6: fe de                        	trap
;             slice_index_order_fail(self.start, self.end);
 80189d8: 11 46                        	mov	r1, r2
 80189da: fd f7 1c fa                  	bl	#-11208
 80189de: fe de                        	trap

080189e0 _$LT$stm32wb55..event..command..ReturnParameters$u20$as$u20$core..fmt..Debug$GT$::fmt::h61e4adde080e2541:
; #[derive(Clone, Debug)]
 80189e0: b0 b5                        	push	{r4, r5, r7, lr}
 80189e2: 02 af                        	add	r7, sp, #8
 80189e4: 84 b0                        	sub	sp, #16
 80189e6: 04 46                        	mov	r4, r0
 80189e8: 00 78                        	ldrb	r0, [r0]
 80189ea: 0d 46                        	mov	r5, r1
 80189ec: df e8 10 f0                  	tbh	[pc, r0, lsl #1]

080189f0 $d.266:
 80189f0:	33 00 4a 00	.word	0x004a0033
 80189f4:	53 00 6a 00	.word	0x006a0053
 80189f8:	73 00 7c 00	.word	0x007c0073
 80189fc:	93 00 9c 00	.word	0x009c0093
 8018a00:	a5 00 bc 00	.word	0x00bc00a5
 8018a04:	d4 00 dd 00	.word	0x00dd00d4
 8018a08:	e6 00 ef 00	.word	0x00ef00e6
 8018a0c:	f8 00 01 01	.word	0x010100f8
 8018a10:	0a 01 13 01	.word	0x0113010a
 8018a14:	1c 01 33 01	.word	0x0133011c
 8018a18:	3c 01 45 01	.word	0x0145013c
 8018a1c:	4e 01 57 01	.word	0x0157014e
 8018a20:	6e 01 77 01	.word	0x0177016e
 8018a24:	80 01 89 01	.word	0x01890180
 8018a28:	92 01 9b 01	.word	0x019b0192
 8018a2c:	a4 01 bb 01	.word	0x01bb01a4
 8018a30:	c4 01 cd 01	.word	0x01cd01c4
 8018a34:	d6 01 ed 01	.word	0x01ed01d6
 8018a38:	04 02 1b 02	.word	0x021b0204
 8018a3c:	24 02 2d 02	.word	0x022d0224
 8018a40:	36 02 3f 02	.word	0x023f0236
 8018a44:	48 02 51 02	.word	0x02510248
 8018a48:	5a 02 63 02	.word	0x0263025a
 8018a4c:	6c 02 75 02	.word	0x0275026c
 8018a50:	98 02 d2 02	.word	0x02d20298
 8018a54:	e9 02		.short	0x02e9

08018a56 $t.267:
 8018a56: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018a5a: 16 22                        	movs	r2, #22
 8018a5c: cb 68                        	ldr	r3, [r1, #12]
 8018a5e: 4f f2 c4 61                  	movw	r1, #63172
 8018a62: c0 f6 01 01                  	movt	r1, #2049
 8018a66: 98 47                        	blx	r3
 8018a68: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8018a6c: 00 20                        	movs	r0, #0
 8018a6e: 4f f2 dc 62                  	movw	r2, #63196
 8018a72: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8018a76: 01 90                        	str	r0, [sp, #4]
;     HalGetFirmwareRevision(HalFirmwareRevision),
 8018a78: a0 1c                        	adds	r0, r4, #2
 8018a7a: 03 a9                        	add	r1, sp, #12
 8018a7c: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Debug)]
 8018a7e: c0 f6 01 02                  	movt	r2, #2049
 8018a82: b4 e2                        	b	#1384 <$t.267+0x59c>
 8018a84: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018a88: 12 22                        	movs	r2, #18
 8018a8a: cb 68                        	ldr	r3, [r1, #12]
 8018a8c: 4f f2 ec 61                  	movw	r1, #63212
 8018a90: c0 f6 01 01                  	movt	r1, #2049
 8018a94: 9d e2                        	b	#1338 <$t.267+0x580>
 8018a96: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018a9a: 11 22                        	movs	r2, #17
 8018a9c: cb 68                        	ldr	r3, [r1, #12]
 8018a9e: 4f f2 fe 61                  	movw	r1, #63230
 8018aa2: c0 f6 01 01                  	movt	r1, #2049
 8018aa6: 98 47                        	blx	r3
 8018aa8: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8018aac: 00 20                        	movs	r0, #0
 8018aae: 4f f2 10 72                  	movw	r2, #63248
 8018ab2: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8018ab6: 01 90                        	str	r0, [sp, #4]
;     HalReadConfigData(HalConfigData),
 8018ab8: a0 1c                        	adds	r0, r4, #2
 8018aba: 03 a9                        	add	r1, sp, #12
 8018abc: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Debug)]
 8018abe: c0 f6 01 02                  	movt	r2, #2049
 8018ac2: 94 e2                        	b	#1320 <$t.267+0x59c>
 8018ac4: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018ac8: 12 22                        	movs	r2, #18
 8018aca: cb 68                        	ldr	r3, [r1, #12]
 8018acc: 4f f2 20 71                  	movw	r1, #63264
 8018ad0: c0 f6 01 01                  	movt	r1, #2049
 8018ad4: 7d e2                        	b	#1274 <$t.267+0x580>
 8018ad6: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018ada: 10 22                        	movs	r2, #16
 8018adc: cb 68                        	ldr	r3, [r1, #12]
 8018ade: 4d f2 3c 11                  	movw	r1, #53564
 8018ae2: c0 f6 01 01                  	movt	r1, #2049
 8018ae6: 74 e2                        	b	#1256 <$t.267+0x580>
 8018ae8: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018aec: 17 22                        	movs	r2, #23
 8018aee: cb 68                        	ldr	r3, [r1, #12]
 8018af0: 4f f2 32 71                  	movw	r1, #63282
 8018af4: c0 f6 01 01                  	movt	r1, #2049
 8018af8: 98 47                        	blx	r3
 8018afa: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8018afe: 00 20                        	movs	r0, #0
 8018b00: 4f f2 4c 72                  	movw	r2, #63308
 8018b04: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8018b08: 01 90                        	str	r0, [sp, #4]
;     HalGetTxTestPacketCount(HalTxTestPacketCount),
 8018b0a: 20 1d                        	adds	r0, r4, #4
 8018b0c: 03 a9                        	add	r1, sp, #12
 8018b0e: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Debug)]
 8018b10: c0 f6 01 02                  	movt	r2, #2049
 8018b14: 6b e2                        	b	#1238 <$t.267+0x59c>
 8018b16: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018b1a: 0c 22                        	movs	r2, #12
 8018b1c: cb 68                        	ldr	r3, [r1, #12]
 8018b1e: 4f f2 5c 71                  	movw	r1, #63324
 8018b22: c0 f6 01 01                  	movt	r1, #2049
 8018b26: 54 e2                        	b	#1192 <$t.267+0x580>
 8018b28: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018b2c: 0b 22                        	movs	r2, #11
 8018b2e: cb 68                        	ldr	r3, [r1, #12]
 8018b30: 4f f2 68 71                  	movw	r1, #63336
 8018b34: c0 f6 01 01                  	movt	r1, #2049
 8018b38: 4b e2                        	b	#1174 <$t.267+0x580>
 8018b3a: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018b3e: 10 22                        	movs	r2, #16
 8018b40: cb 68                        	ldr	r3, [r1, #12]
 8018b42: 4d f2 4c 11                  	movw	r1, #53580
 8018b46: c0 f6 01 01                  	movt	r1, #2049
 8018b4a: 98 47                        	blx	r3
 8018b4c: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8018b50: 00 20                        	movs	r0, #0
 8018b52: 4f f2 74 72                  	movw	r2, #63348
 8018b56: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8018b5a: 01 90                        	str	r0, [sp, #4]
;     HalGetLinkStatus(HalLinkStatus),
 8018b5c: a0 1c                        	adds	r0, r4, #2
 8018b5e: 03 a9                        	add	r1, sp, #12
 8018b60: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Debug)]
 8018b62: c0 f6 01 02                  	movt	r2, #2049
 8018b66: 42 e2                        	b	#1156 <$t.267+0x59c>
 8018b68: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018b6c: 12 22                        	movs	r2, #18
 8018b6e: cb 68                        	ldr	r3, [r1, #12]
 8018b70: 4f f2 84 71                  	movw	r1, #63364
 8018b74: c0 f6 01 01                  	movt	r1, #2049
 8018b78: 98 47                        	blx	r3
 8018b7a: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8018b7e: 00 20                        	movs	r0, #0
 8018b80: 4f f2 98 72                  	movw	r2, #63384
 8018b84: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8018b88: 01 90                        	str	r0, [sp, #4]
;     HalGetAnchorPeriod(HalAnchorPeriod),
 8018b8a: 04 f1 08 00                  	add.w	r0, r4, #8
 8018b8e: 03 a9                        	add	r1, sp, #12
 8018b90: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Debug)]
 8018b92: c0 f6 01 02                  	movt	r2, #2049
 8018b96: 2a e2                        	b	#1108 <$t.267+0x59c>
 8018b98: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018b9c: 15 22                        	movs	r2, #21
 8018b9e: cb 68                        	ldr	r3, [r1, #12]
 8018ba0: 4f f2 a8 71                  	movw	r1, #63400
 8018ba4: c0 f6 01 01                  	movt	r1, #2049
 8018ba8: 13 e2                        	b	#1062 <$t.267+0x580>
 8018baa: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018bae: 12 22                        	movs	r2, #18
 8018bb0: cb 68                        	ldr	r3, [r1, #12]
 8018bb2: 4f f2 bd 71                  	movw	r1, #63421
 8018bb6: c0 f6 01 01                  	movt	r1, #2049
 8018bba: 0a e2                        	b	#1044 <$t.267+0x580>
 8018bbc: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018bc0: 17 22                        	movs	r2, #23
 8018bc2: cb 68                        	ldr	r3, [r1, #12]
 8018bc4: 4f f2 cf 71                  	movw	r1, #63439
 8018bc8: c0 f6 01 01                  	movt	r1, #2049
 8018bcc: 01 e2                        	b	#1026 <$t.267+0x580>
 8018bce: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018bd2: 12 22                        	movs	r2, #18
 8018bd4: cb 68                        	ldr	r3, [r1, #12]
 8018bd6: 4f f2 e6 71                  	movw	r1, #63462
 8018bda: c0 f6 01 01                  	movt	r1, #2049
 8018bde: f8 e1                        	b	#1008 <$t.267+0x580>
 8018be0: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018be4: 1f 22                        	movs	r2, #31
 8018be6: cb 68                        	ldr	r3, [r1, #12]
 8018be8: 4f f2 f8 71                  	movw	r1, #63480
 8018bec: c0 f6 01 01                  	movt	r1, #2049
 8018bf0: ef e1                        	b	#990 <$t.267+0x580>
 8018bf2: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018bf6: 1e 22                        	movs	r2, #30
 8018bf8: cb 68                        	ldr	r3, [r1, #12]
 8018bfa: 4f f6 17 01                  	movw	r1, #63511
 8018bfe: c0 f6 01 01                  	movt	r1, #2049
 8018c02: e6 e1                        	b	#972 <$t.267+0x580>
 8018c04: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018c08: 12 22                        	movs	r2, #18
 8018c0a: cb 68                        	ldr	r3, [r1, #12]
 8018c0c: 4f f6 35 01                  	movw	r1, #63541
 8018c10: c0 f6 01 01                  	movt	r1, #2049
 8018c14: dd e1                        	b	#954 <$t.267+0x580>
 8018c16: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018c1a: 18 22                        	movs	r2, #24
 8018c1c: cb 68                        	ldr	r3, [r1, #12]
 8018c1e: 4f f6 47 01                  	movw	r1, #63559
 8018c22: c0 f6 01 01                  	movt	r1, #2049
 8018c26: d4 e1                        	b	#936 <$t.267+0x580>
 8018c28: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018c2c: 07 22                        	movs	r2, #7
 8018c2e: cb 68                        	ldr	r3, [r1, #12]
 8018c30: 4f f6 5f 01                  	movw	r1, #63583
 8018c34: c0 f6 01 01                  	movt	r1, #2049
 8018c38: 98 47                        	blx	r3
 8018c3a: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8018c3e: 00 20                        	movs	r0, #0
 8018c40: 4f f6 68 02                  	movw	r2, #63592
 8018c44: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8018c48: 01 90                        	str	r0, [sp, #4]
;     GapInit(GapInit),
 8018c4a: a0 1c                        	adds	r0, r4, #2
 8018c4c: 03 a9                        	add	r1, sp, #12
 8018c4e: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Debug)]
 8018c50: c0 f6 01 02                  	movt	r2, #2049
 8018c54: cb e1                        	b	#918 <$t.267+0x59c>
 8018c56: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018c5a: 14 22                        	movs	r2, #20
 8018c5c: cb 68                        	ldr	r3, [r1, #12]
 8018c5e: 4f f6 78 01                  	movw	r1, #63608
 8018c62: c0 f6 01 01                  	movt	r1, #2049
 8018c66: b4 e1                        	b	#872 <$t.267+0x580>
 8018c68: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018c6c: 1b 22                        	movs	r2, #27
 8018c6e: cb 68                        	ldr	r3, [r1, #12]
 8018c70: 4f f6 8c 01                  	movw	r1, #63628
 8018c74: c0 f6 01 01                  	movt	r1, #2049
 8018c78: ab e1                        	b	#854 <$t.267+0x580>
 8018c7a: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018c7e: 18 22                        	movs	r2, #24
 8018c80: cb 68                        	ldr	r3, [r1, #12]
 8018c82: 4f f6 a7 01                  	movw	r1, #63655
 8018c86: c0 f6 01 01                  	movt	r1, #2049
 8018c8a: a2 e1                        	b	#836 <$t.267+0x580>
 8018c8c: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018c90: 0f 22                        	movs	r2, #15
 8018c92: cb 68                        	ldr	r3, [r1, #12]
 8018c94: 4f f6 bf 01                  	movw	r1, #63679
 8018c98: c0 f6 01 01                  	movt	r1, #2049
 8018c9c: 99 e1                        	b	#818 <$t.267+0x580>
 8018c9e: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018ca2: 13 22                        	movs	r2, #19
 8018ca4: cb 68                        	ldr	r3, [r1, #12]
 8018ca6: 4f f6 ce 01                  	movw	r1, #63694
 8018caa: c0 f6 01 01                  	movt	r1, #2049
 8018cae: 98 47                        	blx	r3
 8018cb0: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8018cb4: 00 20                        	movs	r0, #0
 8018cb6: 4f f6 e4 02                  	movw	r2, #63716
 8018cba: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8018cbe: 01 90                        	str	r0, [sp, #4]
;     GapGetSecurityLevel(GapSecurityLevel),
 8018cc0: 60 1c                        	adds	r0, r4, #1
 8018cc2: 03 a9                        	add	r1, sp, #12
 8018cc4: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Debug)]
 8018cc6: c0 f6 01 02                  	movt	r2, #2049
 8018cca: 90 e1                        	b	#800 <$t.267+0x59c>
 8018ccc: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018cd0: 0f 22                        	movs	r2, #15
 8018cd2: cb 68                        	ldr	r3, [r1, #12]
 8018cd4: 4f f6 f4 01                  	movw	r1, #63732
 8018cd8: c0 f6 01 01                  	movt	r1, #2049
 8018cdc: 79 e1                        	b	#754 <$t.267+0x580>
 8018cde: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018ce2: 15 22                        	movs	r2, #21
 8018ce4: cb 68                        	ldr	r3, [r1, #12]
 8018ce6: 4f f6 03 11                  	movw	r1, #63747
 8018cea: c0 f6 01 01                  	movt	r1, #2049
 8018cee: 70 e1                        	b	#736 <$t.267+0x580>
 8018cf0: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018cf4: 18 22                        	movs	r2, #24
 8018cf6: cb 68                        	ldr	r3, [r1, #12]
 8018cf8: 4f f6 18 11                  	movw	r1, #63768
 8018cfc: c0 f6 01 01                  	movt	r1, #2049
 8018d00: 67 e1                        	b	#718 <$t.267+0x580>
 8018d02: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018d06: 0e 22                        	movs	r2, #14
 8018d08: cb 68                        	ldr	r3, [r1, #12]
 8018d0a: 4f f6 30 11                  	movw	r1, #63792
 8018d0e: c0 f6 01 01                  	movt	r1, #2049
 8018d12: 5e e1                        	b	#700 <$t.267+0x580>
 8018d14: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018d18: 15 22                        	movs	r2, #21
 8018d1a: cb 68                        	ldr	r3, [r1, #12]
 8018d1c: 4f f6 3e 11                  	movw	r1, #63806
 8018d20: c0 f6 01 01                  	movt	r1, #2049
 8018d24: 55 e1                        	b	#682 <$t.267+0x580>
 8018d26: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018d2a: 18 22                        	movs	r2, #24
 8018d2c: cb 68                        	ldr	r3, [r1, #12]
 8018d2e: 4f f6 53 11                  	movw	r1, #63827
 8018d32: c0 f6 01 01                  	movt	r1, #2049
 8018d36: 4c e1                        	b	#664 <$t.267+0x580>
 8018d38: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018d3c: 13 22                        	movs	r2, #19
 8018d3e: cb 68                        	ldr	r3, [r1, #12]
 8018d40: 4f f6 6b 11                  	movw	r1, #63851
 8018d44: c0 f6 01 01                  	movt	r1, #2049
 8018d48: 98 47                        	blx	r3
 8018d4a: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8018d4e: 00 20                        	movs	r0, #0
 8018d50: 4f f6 80 12                  	movw	r2, #63872
 8018d54: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8018d58: 01 90                        	str	r0, [sp, #4]
;     GapGetBondedDevices(GapBondedDevices),
 8018d5a: 20 1d                        	adds	r0, r4, #4
 8018d5c: 03 a9                        	add	r1, sp, #12
 8018d5e: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Debug)]
 8018d60: c0 f6 01 02                  	movt	r2, #2049
 8018d64: 43 e1                        	b	#646 <$t.267+0x59c>
 8018d66: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018d6a: 11 22                        	movs	r2, #17
 8018d6c: cb 68                        	ldr	r3, [r1, #12]
 8018d6e: 4f f6 90 11                  	movw	r1, #63888
 8018d72: c0 f6 01 01                  	movt	r1, #2049
 8018d76: 2c e1                        	b	#600 <$t.267+0x580>
 8018d78: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018d7c: 08 22                        	movs	r2, #8
 8018d7e: cb 68                        	ldr	r3, [r1, #12]
 8018d80: 4c f6 fc 31                  	movw	r1, #52220
 8018d84: c0 f6 01 01                  	movt	r1, #2049
 8018d88: 23 e1                        	b	#582 <$t.267+0x580>
 8018d8a: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018d8e: 0e 22                        	movs	r2, #14
 8018d90: cb 68                        	ldr	r3, [r1, #12]
 8018d92: 4f f6 a1 11                  	movw	r1, #63905
 8018d96: c0 f6 01 01                  	movt	r1, #2049
 8018d9a: 07 e0                        	b	#14 <$t.267+0x35a>
 8018d9c: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018da0: 12 22                        	movs	r2, #18
 8018da2: cb 68                        	ldr	r3, [r1, #12]
 8018da4: 4f f6 c0 11                  	movw	r1, #63936
 8018da8: c0 f6 01 01                  	movt	r1, #2049
 8018dac: 98 47                        	blx	r3
 8018dae: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8018db2: 00 20                        	movs	r0, #0
 8018db4: 4f f6 b0 12                  	movw	r2, #63920
 8018db8: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8018dbc: 01 90                        	str	r0, [sp, #4]
 8018dbe: a0 1c                        	adds	r0, r4, #2
 8018dc0: 03 a9                        	add	r1, sp, #12
 8018dc2: 03 90                        	str	r0, [sp, #12]
 8018dc4: c0 f6 01 02                  	movt	r2, #2049
 8018dc8: 11 e1                        	b	#546 <$t.267+0x59c>
 8018dca: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018dce: 15 22                        	movs	r2, #21
 8018dd0: cb 68                        	ldr	r3, [r1, #12]
 8018dd2: 4f f6 d2 11                  	movw	r1, #63954
 8018dd6: c0 f6 01 01                  	movt	r1, #2049
 8018dda: 98 47                        	blx	r3
 8018ddc: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8018de0: 00 20                        	movs	r0, #0
 8018de2: 4f f6 e8 12                  	movw	r2, #63976
 8018de6: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8018dea: 01 90                        	str	r0, [sp, #4]
;     GattAddCharacteristic(GattCharacteristic),
 8018dec: a0 1c                        	adds	r0, r4, #2
 8018dee: 03 a9                        	add	r1, sp, #12
 8018df0: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Debug)]
 8018df2: c0 f6 01 02                  	movt	r2, #2049
 8018df6: 86 e0                        	b	#268 <$t.267+0x4b4>
 8018df8: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018dfc: 1f 22                        	movs	r2, #31
 8018dfe: cb 68                        	ldr	r3, [r1, #12]
 8018e00: 4f f6 f8 11                  	movw	r1, #63992
 8018e04: c0 f6 01 01                  	movt	r1, #2049
 8018e08: 98 47                        	blx	r3
 8018e0a: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8018e0e: 00 20                        	movs	r0, #0
 8018e10: 4f f6 18 22                  	movw	r2, #64024
 8018e14: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8018e18: 01 90                        	str	r0, [sp, #4]
;     GattAddCharacteristicDescriptor(GattCharacteristicDescriptor),
 8018e1a: a0 1c                        	adds	r0, r4, #2
 8018e1c: 03 a9                        	add	r1, sp, #12
 8018e1e: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Debug)]
 8018e20: c0 f6 01 02                  	movt	r2, #2049
 8018e24: 6f e0                        	b	#222 <$t.267+0x4b4>
 8018e26: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018e2a: 1d 22                        	movs	r2, #29
 8018e2c: cb 68                        	ldr	r3, [r1, #12]
 8018e2e: 4f f6 28 21                  	movw	r1, #64040
 8018e32: c0 f6 01 01                  	movt	r1, #2049
 8018e36: 58 e0                        	b	#176 <$t.267+0x498>
 8018e38: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018e3c: 18 22                        	movs	r2, #24
 8018e3e: cb 68                        	ldr	r3, [r1, #12]
 8018e40: 4f f6 45 21                  	movw	r1, #64069
 8018e44: c0 f6 01 01                  	movt	r1, #2049
 8018e48: 4f e0                        	b	#158 <$t.267+0x498>
 8018e4a: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018e4e: 11 22                        	movs	r2, #17
 8018e50: cb 68                        	ldr	r3, [r1, #12]
 8018e52: 4f f6 5d 21                  	movw	r1, #64093
 8018e56: c0 f6 01 01                  	movt	r1, #2049
 8018e5a: 46 e0                        	b	#140 <$t.267+0x498>
 8018e5c: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018e60: 19 22                        	movs	r2, #25
 8018e62: cb 68                        	ldr	r3, [r1, #12]
 8018e64: 4f f6 6e 21                  	movw	r1, #64110
 8018e68: c0 f6 01 01                  	movt	r1, #2049
 8018e6c: 3d e0                        	b	#122 <$t.267+0x498>
 8018e6e: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018e72: 10 22                        	movs	r2, #16
 8018e74: cb 68                        	ldr	r3, [r1, #12]
 8018e76: 4d f2 5c 11                  	movw	r1, #53596
 8018e7a: c0 f6 01 01                  	movt	r1, #2049
 8018e7e: 34 e0                        	b	#104 <$t.267+0x498>
 8018e80: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018e84: 18 22                        	movs	r2, #24
 8018e86: cb 68                        	ldr	r3, [r1, #12]
 8018e88: 4f f6 87 21                  	movw	r1, #64135
 8018e8c: c0 f6 01 01                  	movt	r1, #2049
 8018e90: 2b e0                        	b	#86 <$t.267+0x498>
 8018e92: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018e96: 1e 22                        	movs	r2, #30
 8018e98: cb 68                        	ldr	r3, [r1, #12]
 8018e9a: 4f f6 9f 21                  	movw	r1, #64159
 8018e9e: c0 f6 01 01                  	movt	r1, #2049
 8018ea2: 22 e0                        	b	#68 <$t.267+0x498>
 8018ea4: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018ea8: 15 22                        	movs	r2, #21
 8018eaa: cb 68                        	ldr	r3, [r1, #12]
 8018eac: 4f f6 bd 21                  	movw	r1, #64189
 8018eb0: c0 f6 01 01                  	movt	r1, #2049
 8018eb4: 19 e0                        	b	#50 <$t.267+0x498>
 8018eb6: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018eba: 11 22                        	movs	r2, #17
 8018ebc: cb 68                        	ldr	r3, [r1, #12]
 8018ebe: 4f f6 d2 21                  	movw	r1, #64210
 8018ec2: c0 f6 01 01                  	movt	r1, #2049
 8018ec6: 10 e0                        	b	#32 <$t.267+0x498>
 8018ec8: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018ecc: 0d 22                        	movs	r2, #13
 8018ece: cb 68                        	ldr	r3, [r1, #12]
 8018ed0: 4f f6 e3 21                  	movw	r1, #64227
 8018ed4: c0 f6 01 01                  	movt	r1, #2049
 8018ed8: 07 e0                        	b	#14 <$t.267+0x498>
 8018eda: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018ede: 19 22                        	movs	r2, #25
 8018ee0: cb 68                        	ldr	r3, [r1, #12]
 8018ee2: 4f f6 f0 21                  	movw	r1, #64240
 8018ee6: c0 f6 01 01                  	movt	r1, #2049
 8018eea: 98 47                        	blx	r3
 8018eec: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8018ef0: 00 20                        	movs	r0, #0
 8018ef2: 4f f2 b4 62                  	movw	r2, #63156
 8018ef6: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8018efa: 01 90                        	str	r0, [sp, #4]
 8018efc: 60 1c                        	adds	r0, r4, #1
 8018efe: 03 a9                        	add	r1, sp, #12
 8018f00: 03 90                        	str	r0, [sp, #12]
 8018f02: c0 f6 01 02                  	movt	r2, #2049
 8018f06: 68 46                        	mov	r0, sp
 8018f08: 00 95                        	str	r5, [sp]
 8018f0a: fd f7 8e fd                  	bl	#-9444
 8018f0e: 01 98                        	ldr	r0, [sp, #4]
 8018f10: 9d f8 08 40                  	ldrb.w	r4, [sp, #8]
 8018f14: 00 28                        	cmp	r0, #0
 8018f16: 00 f0 96 80                  	beq.w	#300 <$t.267+0x5f4>
 8018f1a: 00 2c                        	cmp	r4, #0
 8018f1c: 70 d1                        	bne	#224 <$t.267+0x5ae>
 8018f1e: 71 e0                        	b	#226 <$t.267+0x5b2>
 8018f20: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018f24: 16 22                        	movs	r2, #22
 8018f26: cb 68                        	ldr	r3, [r1, #12]
 8018f28: 4f f6 09 31                  	movw	r1, #64265
 8018f2c: c0 f6 01 01                  	movt	r1, #2049
 8018f30: 98 47                        	blx	r3
 8018f32: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8018f36: 00 20                        	movs	r0, #0
 8018f38: 4f f2 b4 62                  	movw	r2, #63156
 8018f3c: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8018f40: 01 90                        	str	r0, [sp, #4]
;     GattSetDescriptorValue(hci::Status<crate::event::Status>),
 8018f42: 60 1c                        	adds	r0, r4, #1
 8018f44: 03 a9                        	add	r1, sp, #12
 8018f46: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Debug)]
 8018f48: c0 f6 01 02                  	movt	r2, #2049
 8018f4c: 68 46                        	mov	r0, sp
 8018f4e: 00 95                        	str	r5, [sp]
 8018f50: fd f7 6b fd                  	bl	#-9514
 8018f54: 01 98                        	ldr	r0, [sp, #4]
 8018f56: 9d f8 08 40                  	ldrb.w	r4, [sp, #8]
 8018f5a: 00 28                        	cmp	r0, #0
 8018f5c: 73 d0                        	beq	#230 <$t.267+0x5f4>
 8018f5e: 00 2c                        	cmp	r4, #0
 8018f60: 4e d1                        	bne	#156 <$t.267+0x5ae>
 8018f62: 01 28                        	cmp	r0, #1
 8018f64: 12 d1                        	bne	#36 <$t.267+0x53a>
 8018f66: 9d f8 09 00                  	ldrb.w	r0, [sp, #9]
 8018f6a: 78 b1                        	cbz	r0, #30
 8018f6c: 00 99                        	ldr	r1, [sp]
 8018f6e: 08 78                        	ldrb	r0, [r1]
 8018f70: 40 07                        	lsls	r0, r0, #29
 8018f72: 0b d4                        	bmi	#22 <$t.267+0x53a>
 8018f74: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8018f78: 01 22                        	movs	r2, #1
 8018f7a: cb 68                        	ldr	r3, [r1, #12]
 8018f7c: 4e f6 21 41                  	movw	r1, #60449
 8018f80: c0 f6 01 01                  	movt	r1, #2049
 8018f84: 01 24                        	movs	r4, #1
 8018f86: 98 47                        	blx	r3
 8018f88: 00 28                        	cmp	r0, #0
 8018f8a: 5a d1                        	bne	#180 <$t.267+0x5f0>
 8018f8c: 00 99                        	ldr	r1, [sp]
 8018f8e: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8018f92: 4e e0                        	b	#156 <$t.267+0x5e0>
 8018f94: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018f98: 13 22                        	movs	r2, #19
 8018f9a: cb 68                        	ldr	r3, [r1, #12]
 8018f9c: 4f f6 1f 31                  	movw	r1, #64287
 8018fa0: c0 f6 01 01                  	movt	r1, #2049
 8018fa4: 98 47                        	blx	r3
 8018fa6: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8018faa: 00 20                        	movs	r0, #0
 8018fac: 4f f6 34 32                  	movw	r2, #64308
 8018fb0: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8018fb4: 01 90                        	str	r0, [sp, #4]
;     GattReadHandleValue(GattHandleValue),
 8018fb6: 20 1d                        	adds	r0, r4, #4
 8018fb8: 03 a9                        	add	r1, sp, #12
 8018fba: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Debug)]
 8018fbc: c0 f6 01 02                  	movt	r2, #2049
 8018fc0: 15 e0                        	b	#42 <$t.267+0x59c>
 8018fc2: d5 e9 06 01                  	ldrd	r0, r1, [r5, #24]
 8018fc6: 26 22                        	movs	r2, #38
 8018fc8: cb 68                        	ldr	r3, [r1, #12]
 8018fca: 4f f2 8d 61                  	movw	r1, #63117
 8018fce: c0 f6 01 01                  	movt	r1, #2049
 8018fd2: 98 47                        	blx	r3
 8018fd4: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8018fd8: 00 20                        	movs	r0, #0
 8018fda: 4f f2 b4 62                  	movw	r2, #63156
 8018fde: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8018fe2: 01 90                        	str	r0, [sp, #4]
 8018fe4: 60 1c                        	adds	r0, r4, #1
 8018fe6: 03 a9                        	add	r1, sp, #12
 8018fe8: 03 90                        	str	r0, [sp, #12]
 8018fea: c0 f6 01 02                  	movt	r2, #2049
 8018fee: 68 46                        	mov	r0, sp
 8018ff0: 00 95                        	str	r5, [sp]
 8018ff2: fd f7 1a fd                  	bl	#-9676
 8018ff6: 01 98                        	ldr	r0, [sp, #4]
 8018ff8: 9d f8 08 40                  	ldrb.w	r4, [sp, #8]
 8018ffc: 18 b3                        	cbz	r0, #70
 8018ffe: 0c b1                        	cbz	r4, #2
 8019000: 01 24                        	movs	r4, #1
 8019002: 1e e0                        	b	#60 <$t.267+0x5f0>
 8019004: 01 28                        	cmp	r0, #1
 8019006: 11 d1                        	bne	#34 <$t.267+0x5da>
 8019008: 9d f8 09 00                  	ldrb.w	r0, [sp, #9]
 801900c: 70 b1                        	cbz	r0, #28
 801900e: 00 99                        	ldr	r1, [sp]
 8019010: 08 78                        	ldrb	r0, [r1]
 8019012: 40 07                        	lsls	r0, r0, #29
 8019014: 0a d4                        	bmi	#20 <$t.267+0x5da>
 8019016: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 801901a: 01 22                        	movs	r2, #1
 801901c: cb 68                        	ldr	r3, [r1, #12]
 801901e: 4e f6 21 41                  	movw	r1, #60449
 8019022: c0 f6 01 01                  	movt	r1, #2049
 8019026: 01 24                        	movs	r4, #1
 8019028: 98 47                        	blx	r3
 801902a: 50 b9                        	cbnz	r0, #20
 801902c: 00 99                        	ldr	r1, [sp]
 801902e: 88 69                        	ldr	r0, [r1, #24]
 8019030: c9 69                        	ldr	r1, [r1, #28]
 8019032: cb 68                        	ldr	r3, [r1, #12]
 8019034: 4f f2 69 61                  	movw	r1, #63081
 8019038: c0 f6 01 01                  	movt	r1, #2049
 801903c: 01 22                        	movs	r2, #1
 801903e: 98 47                        	blx	r3
 8019040: 04 46                        	mov	r4, r0
 8019042: 8d f8 08 40                  	strb.w	r4, [sp, #8]
 8019046: 00 2c                        	cmp	r4, #0
 8019048: 18 bf                        	it	ne
 801904a: 01 24                        	movne	r4, #1
 801904c: 20 46                        	mov	r0, r4
 801904e: 04 b0                        	add	sp, #16
 8019050: b0 bd                        	pop	{r4, r5, r7, pc}

08019052 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h1b5a25c54204507f:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8019052: f0 b5                        	push	{r4, r5, r6, r7, lr}
 8019054: 03 af                        	add	r7, sp, #12
 8019056: 2d e9 00 0f                  	push.w	{r8, r9, r10, r11}
 801905a: 89 b0                        	sub	sp, #36
 801905c: d0 f8 00 80                  	ldr.w	r8, [r0]
 8019060: 4e f6 b4 40                  	movw	r0, #60596
 8019064: 8b 46                        	mov	r11, r1
 8019066: d1 e9 06 31                  	ldrd	r3, r1, [r1, #24]
 801906a: c0 f6 01 00                  	movt	r0, #2049
 801906e: 00 24                        	movs	r4, #0
 8019070: 07 90                        	str	r0, [sp, #28]
 8019072: 4e f6 b4 40                  	movw	r0, #60596
 8019076: c0 f6 01 00                  	movt	r0, #2049
 801907a: 03 aa                        	add	r2, sp, #12
 801907c: 08 94                        	str	r4, [sp, #32]
 801907e: 01 25                        	movs	r5, #1
 8019080: cd e9 05 44                  	strd	r4, r4, [sp, #20]
 8019084: 03 90                        	str	r0, [sp, #12]
 8019086: 18 46                        	mov	r0, r3
 8019088: 04 95                        	str	r5, [sp, #16]
 801908a: fd f7 fb f8                  	bl	#-11786
;         write!(f, "{{")?;
 801908e: 00 28                        	cmp	r0, #0
 8019090: 42 d1                        	bne	#132 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b5a25c54204507fE+0xca>
;         write!(f, "status: {:?}; value: {{", self.status)?;
 8019092: 47 f2 4d 72                  	movw	r2, #30541
 8019096: db e9 06 01                  	ldrd	r0, r1, [r11, #24]
 801909a: c0 f6 01 02                  	movt	r2, #2049
 801909e: 08 95                        	str	r5, [sp, #32]
 80190a0: 02 92                        	str	r2, [sp, #8]
 80190a2: 08 f1 04 02                  	add.w	r2, r8, #4
 80190a6: 01 92                        	str	r2, [sp, #4]
 80190a8: 01 aa                        	add	r2, sp, #4
 80190aa: 07 92                        	str	r2, [sp, #28]
 80190ac: 02 22                        	movs	r2, #2
 80190ae: cd e9 05 44                  	strd	r4, r4, [sp, #20]
 80190b2: 04 92                        	str	r2, [sp, #16]
 80190b4: 4e f6 d8 42                  	movw	r2, #60632
 80190b8: c0 f6 01 02                  	movt	r2, #2049
 80190bc: 03 92                        	str	r2, [sp, #12]
 80190be: 03 aa                        	add	r2, sp, #12
 80190c0: fd f7 e0 f8                  	bl	#-11840
 80190c4: 40 bb                        	cbnz	r0, #80
;         &self.value_buf[..self.value_len]
 80190c6: d8 f8 00 60                  	ldr.w	r6, [r8]
;         } else if self.end > slice.len() {
 80190ca: fa 2e                        	cmp	r6, #250
 80190cc: 44 d2                        	bhs	#136 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b5a25c54204507fE+0x10a>
 80190ce: 4e f6 c4 4a                  	movw	r10, #60612
;         self as *const [T] as *const T
 80190d2: 08 f1 05 04                  	add.w	r4, r8, #5
 80190d6: 0d f1 0c 08                  	add.w	r8, sp, #12
 80190da: 4f f0 00 09                  	mov.w	r9, #0
 80190de: c0 f6 01 0a                  	movt	r10, #2049
 80190e2: 01 25                        	movs	r5, #1
;                     if is_empty!(self) {
 80190e4: ee b1                        	cbz	r6, #58
;             write!(f, "{:?}, ", addr)?;
 80190e6: 4e f6 b9 42                  	movw	r2, #60601
;         for addr in self.value().iter() {
 80190ea: 00 94                        	str	r4, [sp]
;             write!(f, "{:?}, ", addr)?;
 80190ec: c0 f6 00 02                  	movt	r2, #2048
 80190f0: db e9 06 01                  	ldrd	r0, r1, [r11, #24]
 80190f4: 02 92                        	str	r2, [sp, #8]
 80190f6: 6a 46                        	mov	r2, sp
 80190f8: 01 92                        	str	r2, [sp, #4]
 80190fa: 01 aa                        	add	r2, sp, #4
 80190fc: 07 92                        	str	r2, [sp, #28]
 80190fe: 02 22                        	movs	r2, #2
 8019100: 08 95                        	str	r5, [sp, #32]
 8019102: cd e9 05 99                  	strd	r9, r9, [sp, #20]
 8019106: cd e9 03 a2                  	strd	r10, r2, [sp, #12]
 801910a: 42 46                        	mov	r2, r8
 801910c: fd f7 ba f8                  	bl	#-11916
 8019110: 01 3e                        	subs	r6, #1
;         intrinsics::offset(self, count) as *mut T
 8019112: 01 34                        	adds	r4, #1
;             write!(f, "{:?}, ", addr)?;
 8019114: 00 28                        	cmp	r0, #0
 8019116: e5 d0                        	beq	#-54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1b5a25c54204507fE+0x96>
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8019118: 28 46                        	mov	r0, r5
 801911a: 09 b0                        	add	sp, #36
 801911c: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 8019120: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 8019122: 4e f6 b4 43                  	movw	r3, #60596
 8019126: 00 22                        	movs	r2, #0
 8019128: c0 f6 01 03                  	movt	r3, #2049
 801912c: db e9 06 01                  	ldrd	r0, r1, [r11, #24]
 8019130: 08 92                        	str	r2, [sp, #32]
 8019132: 07 93                        	str	r3, [sp, #28]
 8019134: cd e9 05 22                  	strd	r2, r2, [sp, #20]
 8019138: 01 22                        	movs	r2, #1
 801913a: 04 92                        	str	r2, [sp, #16]
 801913c: 4e f6 e8 42                  	movw	r2, #60648
 8019140: c0 f6 01 02                  	movt	r2, #2049
 8019144: 03 92                        	str	r2, [sp, #12]
 8019146: 03 aa                        	add	r2, sp, #12
 8019148: fd f7 9c f8                  	bl	#-11976
 801914c: 05 46                        	mov	r5, r0
 801914e: 28 46                        	mov	r0, r5
 8019150: 09 b0                        	add	sp, #36
 8019152: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 8019156: f0 bd                        	pop	{r4, r5, r6, r7, pc}
;             slice_index_len_fail(self.end, slice.len());
 8019158: 30 46                        	mov	r0, r6
 801915a: f9 21                        	movs	r1, #249
 801915c: fc f7 5b fe                  	bl	#-13130
 8019160: fe de                        	trap

08019162 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h77dcc83ab7f27995:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8019162: b0 b5                        	push	{r4, r5, r7, lr}
 8019164: 02 af                        	add	r7, sp, #8
 8019166: 84 b0                        	sub	sp, #16
 8019168: 0c 46                        	mov	r4, r1
 801916a: 05 68                        	ldr	r5, [r0]
 801916c: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8019170: 1c 22                        	movs	r2, #28
 8019172: cb 68                        	ldr	r3, [r1, #12]
 8019174: 4f f6 44 31                  	movw	r1, #64324
 8019178: c0 f6 01 01                  	movt	r1, #2049
 801917c: 98 47                        	blx	r3
 801917e: 8d f8 08 00                  	strb.w	r0, [sp, #8]
;     pub status: hci::Status<crate::event::Status>,
 8019182: a8 1c                        	adds	r0, r5, #2
 8019184: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 8019186: 4f f2 b4 60                  	movw	r0, #63156
 801918a: 00 21                        	movs	r1, #0
 801918c: c0 f6 01 00                  	movt	r0, #2049
 8019190: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 8019194: 4f f6 60 31                  	movw	r1, #64352
 8019198: 00 90                        	str	r0, [sp]
 801919a: 01 a8                        	add	r0, sp, #4
 801919c: 03 ab                        	add	r3, sp, #12
 801919e: c0 f6 01 01                  	movt	r1, #2049
 80191a2: 06 22                        	movs	r2, #6
 80191a4: 01 94                        	str	r4, [sp, #4]
 80191a6: fd f7 c3 fa                  	bl	#-10874
 80191aa: 4f f6 78 31                  	movw	r1, #64376
 80191ae: 03 ab                        	add	r3, sp, #12
 80191b0: c0 f6 01 01                  	movt	r1, #2049
 80191b4: 11 22                        	movs	r2, #17
 80191b6: 00 91                        	str	r1, [sp]
 80191b8: 4f f6 66 31                  	movw	r1, #64358
 80191bc: c0 f6 01 01                  	movt	r1, #2049
;     pub descriptor_handle: crate::gatt::DescriptorHandle,
 80191c0: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 80191c2: fd f7 b5 fa                  	bl	#-10902
 80191c6: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 80191ca: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 80191ce: b9 b1                        	cbz	r1, #46
 80191d0: 08 b1                        	cbz	r0, #2
 80191d2: 01 20                        	movs	r0, #1
 80191d4: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h77dcc83ab7f27995E+0x9e>
 80191d6: 01 99                        	ldr	r1, [sp, #4]
 80191d8: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 80191dc: 09 78                        	ldrb	r1, [r1]
 80191de: d3 68                        	ldr	r3, [r2, #12]
 80191e0: 49 07                        	lsls	r1, r1, #29
 80191e2: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h77dcc83ab7f27995E+0x92>
 80191e4: 4e f6 1c 41                  	movw	r1, #60444
 80191e8: 02 22                        	movs	r2, #2
 80191ea: c0 f6 01 01                  	movt	r1, #2049
 80191ee: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h77dcc83ab7f27995E+0x9c>
 80191f0: 4e f6 d6 41                  	movw	r1, #60630
 80191f4: 01 22                        	movs	r2, #1
 80191f6: c0 f6 01 01                  	movt	r1, #2049
 80191fa: 98 47                        	blx	r3
 80191fc: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8019200: 00 28                        	cmp	r0, #0
 8019202: 18 bf                        	it	ne
 8019204: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8019206: 04 b0                        	add	sp, #16
 8019208: b0 bd                        	pop	{r4, r5, r7, pc}

0801920a _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h2b8b6af46306fcc2:
 801920a: b0 b5                        	push	{r4, r5, r7, lr}
 801920c: 02 af                        	add	r7, sp, #8
 801920e: 84 b0                        	sub	sp, #16
 8019210: 0c 46                        	mov	r4, r1
 8019212: 05 68                        	ldr	r5, [r0]
 8019214: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8019218: 10 22                        	movs	r2, #16
 801921a: cb 68                        	ldr	r3, [r1, #12]
 801921c: 4d f2 2c 11                  	movw	r1, #53548
 8019220: c0 f6 01 01                  	movt	r1, #2049
 8019224: 98 47                        	blx	r3
; #[derive(Copy, Clone, Debug, PartialEq)]
 8019226: 4f f2 48 42                  	movw	r2, #62536
 801922a: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 801922e: 00 20                        	movs	r0, #0
 8019230: 03 a9                        	add	r1, sp, #12
 8019232: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8019236: c0 f6 01 02                  	movt	r2, #2049
 801923a: 01 90                        	str	r0, [sp, #4]
 801923c: 68 46                        	mov	r0, sp
 801923e: 00 94                        	str	r4, [sp]
; pub struct DescriptorHandle(pub u16);
 8019240: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug, PartialEq)]
 8019242: fd f7 f2 fb                  	bl	#-10268
 8019246: 01 98                        	ldr	r0, [sp, #4]
 8019248: 9d f8 08 40                  	ldrb.w	r4, [sp, #8]
 801924c: 18 b3                        	cbz	r0, #70
 801924e: 0c b1                        	cbz	r4, #2
 8019250: 01 24                        	movs	r4, #1
 8019252: 1e e0                        	b	#60 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2b8b6af46306fcc2E+0x8c>
 8019254: 01 28                        	cmp	r0, #1
 8019256: 11 d1                        	bne	#34 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2b8b6af46306fcc2E+0x76>
 8019258: 9d f8 09 00                  	ldrb.w	r0, [sp, #9]
 801925c: 70 b1                        	cbz	r0, #28
 801925e: 00 99                        	ldr	r1, [sp]
 8019260: 08 78                        	ldrb	r0, [r1]
 8019262: 40 07                        	lsls	r0, r0, #29
 8019264: 0a d4                        	bmi	#20 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2b8b6af46306fcc2E+0x76>
 8019266: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 801926a: 01 22                        	movs	r2, #1
 801926c: cb 68                        	ldr	r3, [r1, #12]
 801926e: 4e f6 21 41                  	movw	r1, #60449
 8019272: c0 f6 01 01                  	movt	r1, #2049
 8019276: 01 24                        	movs	r4, #1
 8019278: 98 47                        	blx	r3
 801927a: 50 b9                        	cbnz	r0, #20
 801927c: 00 99                        	ldr	r1, [sp]
 801927e: 01 22                        	movs	r2, #1
 8019280: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8019284: cb 68                        	ldr	r3, [r1, #12]
 8019286: 4f f2 69 61                  	movw	r1, #63081
 801928a: c0 f6 01 01                  	movt	r1, #2049
 801928e: 98 47                        	blx	r3
 8019290: 04 46                        	mov	r4, r0
 8019292: 8d f8 08 40                  	strb.w	r4, [sp, #8]
 8019296: 00 2c                        	cmp	r4, #0
 8019298: 18 bf                        	it	ne
 801929a: 01 24                        	movne	r4, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801929c: 20 46                        	mov	r0, r4
 801929e: 04 b0                        	add	sp, #16
 80192a0: b0 bd                        	pop	{r4, r5, r7, pc}

080192a2 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::hbdc6349f96c82112:
 80192a2: b0 b5                        	push	{r4, r5, r7, lr}
 80192a4: 02 af                        	add	r7, sp, #8
 80192a6: 84 b0                        	sub	sp, #16
 80192a8: 0c 46                        	mov	r4, r1
 80192aa: 05 68                        	ldr	r5, [r0]
 80192ac: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 80192b0: 12 22                        	movs	r2, #18
 80192b2: cb 68                        	ldr	r3, [r1, #12]
 80192b4: 4f f6 88 31                  	movw	r1, #64392
 80192b8: c0 f6 01 01                  	movt	r1, #2049
 80192bc: 98 47                        	blx	r3
 80192be: 8d f8 08 00                  	strb.w	r0, [sp, #8]
;     pub status: hci::Status<crate::event::Status>,
 80192c2: a8 1c                        	adds	r0, r5, #2
 80192c4: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 80192c6: 4f f2 b4 60                  	movw	r0, #63156
 80192ca: 00 21                        	movs	r1, #0
 80192cc: c0 f6 01 00                  	movt	r0, #2049
 80192d0: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 80192d4: 4f f6 60 31                  	movw	r1, #64352
 80192d8: 00 90                        	str	r0, [sp]
 80192da: 01 a8                        	add	r0, sp, #4
 80192dc: 03 ab                        	add	r3, sp, #12
 80192de: c0 f6 01 01                  	movt	r1, #2049
 80192e2: 06 22                        	movs	r2, #6
 80192e4: 01 94                        	str	r4, [sp, #4]
 80192e6: fd f7 23 fa                  	bl	#-11194
 80192ea: 4f f6 b0 31                  	movw	r1, #64432
 80192ee: 03 ab                        	add	r3, sp, #12
 80192f0: c0 f6 01 01                  	movt	r1, #2049
 80192f4: 15 22                        	movs	r2, #21
 80192f6: 00 91                        	str	r1, [sp]
 80192f8: 4f f6 9a 31                  	movw	r1, #64410
 80192fc: c0 f6 01 01                  	movt	r1, #2049
;     pub characteristic_handle: crate::gatt::CharacteristicHandle,
 8019300: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 8019302: fd f7 15 fa                  	bl	#-11222
 8019306: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 801930a: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 801930e: b9 b1                        	cbz	r1, #46
 8019310: 08 b1                        	cbz	r0, #2
 8019312: 01 20                        	movs	r0, #1
 8019314: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hbdc6349f96c82112E+0x9e>
 8019316: 01 99                        	ldr	r1, [sp, #4]
 8019318: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801931c: 09 78                        	ldrb	r1, [r1]
 801931e: d3 68                        	ldr	r3, [r2, #12]
 8019320: 49 07                        	lsls	r1, r1, #29
 8019322: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hbdc6349f96c82112E+0x92>
 8019324: 4e f6 1c 41                  	movw	r1, #60444
 8019328: 02 22                        	movs	r2, #2
 801932a: c0 f6 01 01                  	movt	r1, #2049
 801932e: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hbdc6349f96c82112E+0x9c>
 8019330: 4e f6 d6 41                  	movw	r1, #60630
 8019334: 01 22                        	movs	r2, #1
 8019336: c0 f6 01 01                  	movt	r1, #2049
 801933a: 98 47                        	blx	r3
 801933c: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8019340: 00 28                        	cmp	r0, #0
 8019342: 18 bf                        	it	ne
 8019344: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8019346: 04 b0                        	add	sp, #16
 8019348: b0 bd                        	pop	{r4, r5, r7, pc}

0801934a core::ptr::drop_in_place::h0007514d538c9721:
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
 801934a: 70 47                        	bx	lr

0801934c _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h437c620a0c8b52be:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801934c: b0 b5                        	push	{r4, r5, r7, lr}
 801934e: 02 af                        	add	r7, sp, #8
 8019350: 84 b0                        	sub	sp, #16
 8019352: 0c 46                        	mov	r4, r1
 8019354: 05 68                        	ldr	r5, [r0]
 8019356: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 801935a: 14 22                        	movs	r2, #20
 801935c: cb 68                        	ldr	r3, [r1, #12]
 801935e: 4f f2 79 61                  	movw	r1, #63097
 8019362: c0 f6 01 01                  	movt	r1, #2049
 8019366: 98 47                        	blx	r3
; #[derive(Copy, Clone, Debug, PartialEq, PartialOrd)]
 8019368: 4f f2 48 42                  	movw	r2, #62536
 801936c: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8019370: 00 20                        	movs	r0, #0
 8019372: 03 a9                        	add	r1, sp, #12
 8019374: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8019378: c0 f6 01 02                  	movt	r2, #2049
 801937c: 01 90                        	str	r0, [sp, #4]
 801937e: 68 46                        	mov	r0, sp
 8019380: 00 94                        	str	r4, [sp]
; pub struct CharacteristicHandle(pub u16);
 8019382: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug, PartialEq, PartialOrd)]
 8019384: fd f7 51 fb                  	bl	#-10590
 8019388: 01 98                        	ldr	r0, [sp, #4]
 801938a: 9d f8 08 40                  	ldrb.w	r4, [sp, #8]
 801938e: 18 b3                        	cbz	r0, #70
 8019390: 0c b1                        	cbz	r4, #2
 8019392: 01 24                        	movs	r4, #1
 8019394: 1e e0                        	b	#60 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h437c620a0c8b52beE+0x8c>
 8019396: 01 28                        	cmp	r0, #1
 8019398: 11 d1                        	bne	#34 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h437c620a0c8b52beE+0x76>
 801939a: 9d f8 09 00                  	ldrb.w	r0, [sp, #9]
 801939e: 70 b1                        	cbz	r0, #28
 80193a0: 00 99                        	ldr	r1, [sp]
 80193a2: 08 78                        	ldrb	r0, [r1]
 80193a4: 40 07                        	lsls	r0, r0, #29
 80193a6: 0a d4                        	bmi	#20 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h437c620a0c8b52beE+0x76>
 80193a8: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 80193ac: 01 22                        	movs	r2, #1
 80193ae: cb 68                        	ldr	r3, [r1, #12]
 80193b0: 4e f6 21 41                  	movw	r1, #60449
 80193b4: c0 f6 01 01                  	movt	r1, #2049
 80193b8: 01 24                        	movs	r4, #1
 80193ba: 98 47                        	blx	r3
 80193bc: 50 b9                        	cbnz	r0, #20
 80193be: 00 99                        	ldr	r1, [sp]
 80193c0: 01 22                        	movs	r2, #1
 80193c2: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 80193c6: cb 68                        	ldr	r3, [r1, #12]
 80193c8: 4f f2 69 61                  	movw	r1, #63081
 80193cc: c0 f6 01 01                  	movt	r1, #2049
 80193d0: 98 47                        	blx	r3
 80193d2: 04 46                        	mov	r4, r0
 80193d4: 8d f8 08 40                  	strb.w	r4, [sp, #8]
 80193d8: 00 2c                        	cmp	r4, #0
 80193da: 18 bf                        	it	ne
 80193dc: 01 24                        	movne	r4, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 80193de: 20 46                        	mov	r0, r4
 80193e0: 04 b0                        	add	sp, #16
 80193e2: b0 bd                        	pop	{r4, r5, r7, pc}

080193e4 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h9697e81be5f30bf4:
 80193e4: b0 b5                        	push	{r4, r5, r7, lr}
 80193e6: 02 af                        	add	r7, sp, #8
 80193e8: 84 b0                        	sub	sp, #16
 80193ea: 0c 46                        	mov	r4, r1
 80193ec: 05 68                        	ldr	r5, [r0]
 80193ee: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 80193f2: 0b 22                        	movs	r2, #11
 80193f4: cb 68                        	ldr	r3, [r1, #12]
 80193f6: 4f f6 c0 31                  	movw	r1, #64448
 80193fa: c0 f6 01 01                  	movt	r1, #2049
 80193fe: 98 47                        	blx	r3
 8019400: 8d f8 08 00                  	strb.w	r0, [sp, #8]
;     pub status: hci::Status<crate::event::Status>,
 8019404: a8 1c                        	adds	r0, r5, #2
 8019406: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 8019408: 4f f2 b4 60                  	movw	r0, #63156
 801940c: 00 21                        	movs	r1, #0
 801940e: c0 f6 01 00                  	movt	r0, #2049
 8019412: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 8019416: 4f f6 60 31                  	movw	r1, #64352
 801941a: 00 90                        	str	r0, [sp]
 801941c: 01 a8                        	add	r0, sp, #4
 801941e: 03 ab                        	add	r3, sp, #12
 8019420: c0 f6 01 01                  	movt	r1, #2049
 8019424: 06 22                        	movs	r2, #6
 8019426: 01 94                        	str	r4, [sp, #4]
 8019428: fd f7 82 f9                  	bl	#-11516
 801942c: 4f f6 dc 31                  	movw	r1, #64476
 8019430: 03 ab                        	add	r3, sp, #12
 8019432: c0 f6 01 01                  	movt	r1, #2049
 8019436: 0e 22                        	movs	r2, #14
 8019438: 00 91                        	str	r1, [sp]
 801943a: 4f f6 cb 31                  	movw	r1, #64459
 801943e: c0 f6 01 01                  	movt	r1, #2049
;     pub service_handle: crate::gatt::ServiceHandle,
 8019442: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 8019444: fd f7 74 f9                  	bl	#-11544
 8019448: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 801944c: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 8019450: b9 b1                        	cbz	r1, #46
 8019452: 08 b1                        	cbz	r0, #2
 8019454: 01 20                        	movs	r0, #1
 8019456: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h9697e81be5f30bf4E+0x9e>
 8019458: 01 99                        	ldr	r1, [sp, #4]
 801945a: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801945e: 09 78                        	ldrb	r1, [r1]
 8019460: d3 68                        	ldr	r3, [r2, #12]
 8019462: 49 07                        	lsls	r1, r1, #29
 8019464: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h9697e81be5f30bf4E+0x92>
 8019466: 4e f6 1c 41                  	movw	r1, #60444
 801946a: 02 22                        	movs	r2, #2
 801946c: c0 f6 01 01                  	movt	r1, #2049
 8019470: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h9697e81be5f30bf4E+0x9c>
 8019472: 4e f6 d6 41                  	movw	r1, #60630
 8019476: 01 22                        	movs	r2, #1
 8019478: c0 f6 01 01                  	movt	r1, #2049
 801947c: 98 47                        	blx	r3
 801947e: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8019482: 00 28                        	cmp	r0, #0
 8019484: 18 bf                        	it	ne
 8019486: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8019488: 04 b0                        	add	sp, #16
 801948a: b0 bd                        	pop	{r4, r5, r7, pc}

0801948c _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h4f313916e436ca85:
 801948c: b0 b5                        	push	{r4, r5, r7, lr}
 801948e: 02 af                        	add	r7, sp, #8
 8019490: 84 b0                        	sub	sp, #16
 8019492: 0c 46                        	mov	r4, r1
 8019494: 05 68                        	ldr	r5, [r0]
 8019496: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 801949a: 0d 22                        	movs	r2, #13
 801949c: cb 68                        	ldr	r3, [r1, #12]
 801949e: 4f f2 6c 61                  	movw	r1, #63084
 80194a2: c0 f6 01 01                  	movt	r1, #2049
 80194a6: 98 47                        	blx	r3
; #[derive(Copy, Clone, Debug, PartialEq, PartialOrd)]
 80194a8: 4f f2 48 42                  	movw	r2, #62536
 80194ac: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 80194b0: 00 20                        	movs	r0, #0
 80194b2: 03 a9                        	add	r1, sp, #12
 80194b4: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 80194b8: c0 f6 01 02                  	movt	r2, #2049
 80194bc: 01 90                        	str	r0, [sp, #4]
 80194be: 68 46                        	mov	r0, sp
 80194c0: 00 94                        	str	r4, [sp]
; pub struct ServiceHandle(pub u16);
 80194c2: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug, PartialEq, PartialOrd)]
 80194c4: fd f7 b1 fa                  	bl	#-10910
 80194c8: 01 98                        	ldr	r0, [sp, #4]
 80194ca: 9d f8 08 40                  	ldrb.w	r4, [sp, #8]
 80194ce: 18 b3                        	cbz	r0, #70
 80194d0: 0c b1                        	cbz	r4, #2
 80194d2: 01 24                        	movs	r4, #1
 80194d4: 1e e0                        	b	#60 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4f313916e436ca85E+0x8c>
 80194d6: 01 28                        	cmp	r0, #1
 80194d8: 11 d1                        	bne	#34 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4f313916e436ca85E+0x76>
 80194da: 9d f8 09 00                  	ldrb.w	r0, [sp, #9]
 80194de: 70 b1                        	cbz	r0, #28
 80194e0: 00 99                        	ldr	r1, [sp]
 80194e2: 08 78                        	ldrb	r0, [r1]
 80194e4: 40 07                        	lsls	r0, r0, #29
 80194e6: 0a d4                        	bmi	#20 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4f313916e436ca85E+0x76>
 80194e8: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 80194ec: 01 22                        	movs	r2, #1
 80194ee: cb 68                        	ldr	r3, [r1, #12]
 80194f0: 4e f6 21 41                  	movw	r1, #60449
 80194f4: c0 f6 01 01                  	movt	r1, #2049
 80194f8: 01 24                        	movs	r4, #1
 80194fa: 98 47                        	blx	r3
 80194fc: 50 b9                        	cbnz	r0, #20
 80194fe: 00 99                        	ldr	r1, [sp]
 8019500: 01 22                        	movs	r2, #1
 8019502: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8019506: cb 68                        	ldr	r3, [r1, #12]
 8019508: 4f f2 69 61                  	movw	r1, #63081
 801950c: c0 f6 01 01                  	movt	r1, #2049
 8019510: 98 47                        	blx	r3
 8019512: 04 46                        	mov	r4, r0
 8019514: 8d f8 08 40                  	strb.w	r4, [sp, #8]
 8019518: 00 2c                        	cmp	r4, #0
 801951a: 18 bf                        	it	ne
 801951c: 01 24                        	movne	r4, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801951e: 20 46                        	mov	r0, r4
 8019520: 04 b0                        	add	sp, #16
 8019522: b0 bd                        	pop	{r4, r5, r7, pc}

08019524 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::hc961b35f2c7d4fa4:
 8019524: f0 b5                        	push	{r4, r5, r6, r7, lr}
 8019526: 03 af                        	add	r7, sp, #12
 8019528: 2d e9 00 0f                  	push.w	{r8, r9, r10, r11}
 801952c: 89 b0                        	sub	sp, #36
 801952e: 4e f6 b4 42                  	movw	r2, #60596
 8019532: 8a 46                        	mov	r10, r1
 8019534: 04 68                        	ldr	r4, [r0]
 8019536: 00 20                        	movs	r0, #0
 8019538: d1 e9 06 31                  	ldrd	r3, r1, [r1, #24]
 801953c: c0 f6 01 02                  	movt	r2, #2049
 8019540: 07 92                        	str	r2, [sp, #28]
 8019542: 03 aa                        	add	r2, sp, #12
 8019544: 08 90                        	str	r0, [sp, #32]
 8019546: 01 25                        	movs	r5, #1
 8019548: cd e9 05 00                  	strd	r0, r0, [sp, #20]
 801954c: 4e f6 b4 40                  	movw	r0, #60596
 8019550: c0 f6 01 00                  	movt	r0, #2049
 8019554: 04 95                        	str	r5, [sp, #16]
 8019556: 03 90                        	str	r0, [sp, #12]
 8019558: 18 46                        	mov	r0, r3
 801955a: fc f7 93 fe                  	bl	#-13018
;         write!(f, "{{")?;
 801955e: 40 bb                        	cbnz	r0, #80
;         &self.address_buffer[..self.address_count]
 8019560: 20 68                        	ldr	r0, [r4]
;         } else if self.end > slice.len() {
 8019562: 24 28                        	cmp	r0, #36
 8019564: 45 d2                        	bhs	#138 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc961b35f2c7d4fa4E+0xd2>
 8019566: 4e f6 c4 4b                  	movw	r11, #60612
;         for addr in self.bonded_addresses().iter() {
 801956a: c0 eb c0 06                  	rsb	r6, r0, r0, lsl #3
;         NonNull { pointer: ptr as _ }
 801956e: 05 34                        	adds	r4, #5
 8019570: 0d f1 0c 09                  	add.w	r9, sp, #12
 8019574: 4f f0 00 08                  	mov.w	r8, #0
 8019578: c0 f6 01 0b                  	movt	r11, #2049
 801957c: 01 25                        	movs	r5, #1
;                     if is_empty!(self) {
 801957e: ee b1                        	cbz	r6, #58
;             write!(f, "{:?}, ", addr)?;
 8019580: 47 f2 45 72                  	movw	r2, #30533
;         for addr in self.bonded_addresses().iter() {
 8019584: 00 94                        	str	r4, [sp]
;             write!(f, "{:?}, ", addr)?;
 8019586: c0 f6 01 02                  	movt	r2, #2049
 801958a: da e9 06 01                  	ldrd	r0, r1, [r10, #24]
 801958e: 02 92                        	str	r2, [sp, #8]
 8019590: 6a 46                        	mov	r2, sp
 8019592: 01 92                        	str	r2, [sp, #4]
 8019594: 01 aa                        	add	r2, sp, #4
 8019596: 07 92                        	str	r2, [sp, #28]
 8019598: 02 22                        	movs	r2, #2
 801959a: 08 95                        	str	r5, [sp, #32]
 801959c: cd e9 05 88                  	strd	r8, r8, [sp, #20]
 80195a0: cd e9 03 b2                  	strd	r11, r2, [sp, #12]
 80195a4: 4a 46                        	mov	r2, r9
 80195a6: fc f7 6d fe                  	bl	#-13094
 80195aa: 07 3e                        	subs	r6, #7
;         NonNull { pointer: ptr as _ }
 80195ac: 07 34                        	adds	r4, #7
;             write!(f, "{:?}, ", addr)?;
 80195ae: 00 28                        	cmp	r0, #0
 80195b0: e5 d0                        	beq	#-54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc961b35f2c7d4fa4E+0x5e>
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 80195b2: 28 46                        	mov	r0, r5
 80195b4: 09 b0                        	add	sp, #36
 80195b6: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 80195ba: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 80195bc: 4e f6 b4 43                  	movw	r3, #60596
 80195c0: 00 22                        	movs	r2, #0
 80195c2: c0 f6 01 03                  	movt	r3, #2049
 80195c6: da e9 06 01                  	ldrd	r0, r1, [r10, #24]
 80195ca: 08 92                        	str	r2, [sp, #32]
 80195cc: 07 93                        	str	r3, [sp, #28]
 80195ce: cd e9 05 22                  	strd	r2, r2, [sp, #20]
 80195d2: 01 22                        	movs	r2, #1
 80195d4: 04 92                        	str	r2, [sp, #16]
 80195d6: 4e f6 bc 42                  	movw	r2, #60604
 80195da: c0 f6 01 02                  	movt	r2, #2049
 80195de: 03 92                        	str	r2, [sp, #12]
 80195e0: 03 aa                        	add	r2, sp, #12
 80195e2: fc f7 4f fe                  	bl	#-13154
 80195e6: 05 46                        	mov	r5, r0
 80195e8: 28 46                        	mov	r0, r5
 80195ea: 09 b0                        	add	sp, #36
 80195ec: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 80195f0: f0 bd                        	pop	{r4, r5, r6, r7, pc}
;             slice_index_len_fail(self.end, slice.len());
 80195f2: 23 21                        	movs	r1, #35
 80195f4: fc f7 0f fc                  	bl	#-14306
 80195f8: fe de                        	trap

080195fa _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::he02e93dc5dc9c19c:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 80195fa: b0 b5                        	push	{r4, r5, r7, lr}
 80195fc: 02 af                        	add	r7, sp, #8
 80195fe: 84 b0                        	sub	sp, #16
 8019600: 0c 46                        	mov	r4, r1
 8019602: 05 68                        	ldr	r5, [r0]
 8019604: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8019608: 10 22                        	movs	r2, #16
 801960a: cb 68                        	ldr	r3, [r1, #12]
 801960c: 4d f2 6c 11                  	movw	r1, #53612
 8019610: c0 f6 01 01                  	movt	r1, #2049
 8019614: 98 47                        	blx	r3
 8019616: 8d f8 08 00                  	strb.w	r0, [sp, #8]
; #[derive(Copy, Clone, Debug)]
 801961a: 4f f2 b4 60                  	movw	r0, #63156
 801961e: 00 21                        	movs	r1, #0
 8019620: c0 f6 01 00                  	movt	r0, #2049
 8019624: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 8019628: 4f f6 60 31                  	movw	r1, #64352
 801962c: 00 90                        	str	r0, [sp]
 801962e: 01 a8                        	add	r0, sp, #4
 8019630: 03 ab                        	add	r3, sp, #12
 8019632: c0 f6 01 01                  	movt	r1, #2049
 8019636: 06 22                        	movs	r2, #6
 8019638: 01 94                        	str	r4, [sp, #4]
;     pub status: hci::Status<crate::event::Status>,
 801963a: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 801963c: fd f7 78 f8                  	bl	#-12048
;     pub mitm_protection_required: bool,
 8019640: 69 1c                        	adds	r1, r5, #1
; #[derive(Copy, Clone, Debug)]
 8019642: 4f f6 04 44                  	movw	r4, #64516
;     pub mitm_protection_required: bool,
 8019646: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 8019648: 4f f6 ec 31                  	movw	r1, #64492
 801964c: 03 ab                        	add	r3, sp, #12
 801964e: c0 f6 01 04                  	movt	r4, #2049
 8019652: c0 f6 01 01                  	movt	r1, #2049
 8019656: 18 22                        	movs	r2, #24
 8019658: 00 94                        	str	r4, [sp]
 801965a: fd f7 69 f8                  	bl	#-12078
;     pub bonding_required: bool,
 801965e: a9 1c                        	adds	r1, r5, #2
 8019660: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 8019662: 4d f2 7c 11                  	movw	r1, #53628
 8019666: 03 ab                        	add	r3, sp, #12
 8019668: c0 f6 01 01                  	movt	r1, #2049
 801966c: 10 22                        	movs	r2, #16
 801966e: 00 94                        	str	r4, [sp]
 8019670: fd f7 5e f8                  	bl	#-12100
;     pub out_of_band_data_present: bool,
 8019674: e9 1c                        	adds	r1, r5, #3
 8019676: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 8019678: 4f f6 14 41                  	movw	r1, #64532
 801967c: 03 ab                        	add	r3, sp, #12
 801967e: c0 f6 01 01                  	movt	r1, #2049
 8019682: 18 22                        	movs	r2, #24
 8019684: 00 94                        	str	r4, [sp]
 8019686: fd f7 53 f8                  	bl	#-12122
;     pub pass_key_required: PassKeyRequirement,
 801968a: 29 1d                        	adds	r1, r5, #4
 801968c: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 801968e: 4f f6 40 41                  	movw	r1, #64576
 8019692: 03 ab                        	add	r3, sp, #12
 8019694: c0 f6 01 01                  	movt	r1, #2049
 8019698: 11 22                        	movs	r2, #17
 801969a: 00 91                        	str	r1, [sp]
 801969c: 4f f6 2c 41                  	movw	r1, #64556
 80196a0: c0 f6 01 01                  	movt	r1, #2049
 80196a4: fd f7 44 f8                  	bl	#-12152
 80196a8: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 80196ac: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 80196b0: b9 b1                        	cbz	r1, #46
 80196b2: 08 b1                        	cbz	r0, #2
 80196b4: 01 20                        	movs	r0, #1
 80196b6: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he02e93dc5dc9c19cE+0xe8>
 80196b8: 01 99                        	ldr	r1, [sp, #4]
 80196ba: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 80196be: 09 78                        	ldrb	r1, [r1]
 80196c0: d3 68                        	ldr	r3, [r2, #12]
 80196c2: 49 07                        	lsls	r1, r1, #29
 80196c4: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he02e93dc5dc9c19cE+0xdc>
 80196c6: 4e f6 1c 41                  	movw	r1, #60444
 80196ca: 02 22                        	movs	r2, #2
 80196cc: c0 f6 01 01                  	movt	r1, #2049
 80196d0: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he02e93dc5dc9c19cE+0xe6>
 80196d2: 4e f6 d6 41                  	movw	r1, #60630
 80196d6: 01 22                        	movs	r2, #1
 80196d8: c0 f6 01 01                  	movt	r1, #2049
 80196dc: 98 47                        	blx	r3
 80196de: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 80196e2: 00 28                        	cmp	r0, #0
 80196e4: 18 bf                        	it	ne
 80196e6: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 80196e8: 04 b0                        	add	sp, #16
 80196ea: b0 bd                        	pop	{r4, r5, r7, pc}

080196ec _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::hb9fe203389bfb70f:
 80196ec: 00 68                        	ldr	r0, [r0]
; #[derive(Copy, Clone, Debug, PartialEq)]
 80196ee: 00 78                        	ldrb	r0, [r0]
 80196f0: 50 b1                        	cbz	r0, #20
 80196f2: 01 28                        	cmp	r0, #1
 80196f4: 11 d0                        	beq	#34 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hb9fe203389bfb70fE+0x32>
 80196f6: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 80196fa: 4f f6 50 41                  	movw	r1, #64592
 80196fe: d3 68                        	ldr	r3, [r2, #12]
 8019700: c0 f6 01 01                  	movt	r1, #2049
 8019704: 09 22                        	movs	r2, #9
 8019706: 18 47                        	bx	r3
 8019708: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801970c: 4f f6 59 41                  	movw	r1, #64601
 8019710: d3 68                        	ldr	r3, [r2, #12]
 8019712: c0 f6 01 01                  	movt	r1, #2049
 8019716: 0b 22                        	movs	r2, #11
 8019718: 18 47                        	bx	r3
 801971a: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801971e: 4c f6 04 41                  	movw	r1, #52228
 8019722: d3 68                        	ldr	r3, [r2, #12]
 8019724: c0 f6 01 01                  	movt	r1, #2049
 8019728: 08 22                        	movs	r2, #8
 801972a: 18 47                        	bx	r3

0801972c _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::hdef584d7d4252f98:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801972c: 00 68                        	ldr	r0, [r0]
 801972e: 0a 46                        	mov	r2, r1
 8019730: 00 78                        	ldrb	r0, [r0]
 8019732: 38 b1                        	cbz	r0, #14
 8019734: 4d f2 a0 21                  	movw	r1, #53920
 8019738: 10 46                        	mov	r0, r2
 801973a: c0 f6 01 01                  	movt	r1, #2049
 801973e: 04 22                        	movs	r2, #4
 8019740: fc f7 6e bb                  	b.w	#-14628 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0x4>
 8019744: 4e f6 dd 31                  	movw	r1, #60381
 8019748: 10 46                        	mov	r0, r2
 801974a: c0 f6 01 01                  	movt	r1, #2049
 801974e: 05 22                        	movs	r2, #5
 8019750: fc f7 66 bb                  	b.w	#-14644 <_ZN4core3fmt9Formatter3pad17hccdbdeacee9fe4faE+0x4>

08019754 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h27ee74c6838529ce:
 8019754: b0 b5                        	push	{r4, r5, r7, lr}
 8019756: 02 af                        	add	r7, sp, #8
 8019758: 84 b0                        	sub	sp, #16
 801975a: 0c 46                        	mov	r4, r1
 801975c: 05 68                        	ldr	r5, [r0]
 801975e: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8019762: 07 22                        	movs	r2, #7
 8019764: cb 68                        	ldr	r3, [r1, #12]
 8019766: 4f f6 5f 01                  	movw	r1, #63583
 801976a: c0 f6 01 01                  	movt	r1, #2049
 801976e: 98 47                        	blx	r3
 8019770: 8d f8 08 00                  	strb.w	r0, [sp, #8]
;     pub status: hci::Status<crate::event::Status>,
 8019774: a8 1d                        	adds	r0, r5, #6
 8019776: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 8019778: 4f f2 b4 60                  	movw	r0, #63156
 801977c: 00 21                        	movs	r1, #0
 801977e: c0 f6 01 00                  	movt	r0, #2049
 8019782: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 8019786: 4f f6 60 31                  	movw	r1, #64352
 801978a: 00 90                        	str	r0, [sp]
 801978c: 01 a8                        	add	r0, sp, #4
 801978e: 03 ab                        	add	r3, sp, #12
 8019790: c0 f6 01 01                  	movt	r1, #2049
 8019794: 06 22                        	movs	r2, #6
 8019796: 01 94                        	str	r4, [sp, #4]
 8019798: fc f7 ca ff                  	bl	#-12396
 801979c: 4f f6 dc 31                  	movw	r1, #64476
 80197a0: 03 ab                        	add	r3, sp, #12
 80197a2: c0 f6 01 01                  	movt	r1, #2049
 80197a6: 0e 22                        	movs	r2, #14
 80197a8: 00 91                        	str	r1, [sp]
 80197aa: 4f f6 cb 31                  	movw	r1, #64459
 80197ae: c0 f6 01 01                  	movt	r1, #2049
;     pub service_handle: crate::gatt::ServiceHandle,
 80197b2: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 80197b4: fc f7 bc ff                  	bl	#-12424
;     pub dev_name_handle: crate::gatt::CharacteristicHandle,
 80197b8: a9 1c                        	adds	r1, r5, #2
; #[derive(Copy, Clone, Debug)]
 80197ba: 4f f6 b0 34                  	movw	r4, #64432
;     pub dev_name_handle: crate::gatt::CharacteristicHandle,
 80197be: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 80197c0: 4f f6 64 41                  	movw	r1, #64612
 80197c4: 03 ab                        	add	r3, sp, #12
 80197c6: c0 f6 01 04                  	movt	r4, #2049
 80197ca: c0 f6 01 01                  	movt	r1, #2049
 80197ce: 0f 22                        	movs	r2, #15
 80197d0: 00 94                        	str	r4, [sp]
 80197d2: fc f7 ad ff                  	bl	#-12454
;     pub appearance_handle: crate::gatt::CharacteristicHandle,
 80197d6: 29 1d                        	adds	r1, r5, #4
 80197d8: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 80197da: 4f f6 73 41                  	movw	r1, #64627
 80197de: 03 ab                        	add	r3, sp, #12
 80197e0: c0 f6 01 01                  	movt	r1, #2049
 80197e4: 11 22                        	movs	r2, #17
 80197e6: 00 94                        	str	r4, [sp]
 80197e8: fc f7 a2 ff                  	bl	#-12476
 80197ec: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 80197f0: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 80197f4: b9 b1                        	cbz	r1, #46
 80197f6: 08 b1                        	cbz	r0, #2
 80197f8: 01 20                        	movs	r0, #1
 80197fa: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h27ee74c6838529ceE+0xd2>
 80197fc: 01 99                        	ldr	r1, [sp, #4]
 80197fe: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8019802: 09 78                        	ldrb	r1, [r1]
 8019804: d3 68                        	ldr	r3, [r2, #12]
 8019806: 49 07                        	lsls	r1, r1, #29
 8019808: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h27ee74c6838529ceE+0xc6>
 801980a: 4e f6 1c 41                  	movw	r1, #60444
 801980e: 02 22                        	movs	r2, #2
 8019810: c0 f6 01 01                  	movt	r1, #2049
 8019814: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h27ee74c6838529ceE+0xd0>
 8019816: 4e f6 d6 41                  	movw	r1, #60630
 801981a: 01 22                        	movs	r2, #1
 801981c: c0 f6 01 01                  	movt	r1, #2049
 8019820: 98 47                        	blx	r3
 8019822: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8019826: 00 28                        	cmp	r0, #0
 8019828: 18 bf                        	it	ne
 801982a: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801982c: 04 b0                        	add	sp, #16
 801982e: b0 bd                        	pop	{r4, r5, r7, pc}

08019830 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h93b7e58868f80519:
 8019830: b0 b5                        	push	{r4, r5, r7, lr}
 8019832: 02 af                        	add	r7, sp, #8
 8019834: 84 b0                        	sub	sp, #16
 8019836: 0c 46                        	mov	r4, r1
 8019838: 05 68                        	ldr	r5, [r0]
 801983a: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 801983e: 0f 22                        	movs	r2, #15
 8019840: cb 68                        	ldr	r3, [r1, #12]
 8019842: 4f f6 84 41                  	movw	r1, #64644
 8019846: c0 f6 01 01                  	movt	r1, #2049
 801984a: 98 47                        	blx	r3
 801984c: 8d f8 08 00                  	strb.w	r0, [sp, #8]
;     pub status: hci::Status<crate::event::Status>,
 8019850: 05 f1 20 00                  	add.w	r0, r5, #32
 8019854: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Debug)]
 8019856: 4f f2 b4 60                  	movw	r0, #63156
 801985a: 00 21                        	movs	r1, #0
 801985c: c0 f6 01 00                  	movt	r0, #2049
 8019860: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 8019864: 4f f6 60 31                  	movw	r1, #64352
 8019868: 00 90                        	str	r0, [sp]
 801986a: 01 a8                        	add	r0, sp, #4
 801986c: 03 ab                        	add	r3, sp, #12
 801986e: c0 f6 01 01                  	movt	r1, #2049
 8019872: 06 22                        	movs	r2, #6
 8019874: 01 94                        	str	r4, [sp, #4]
 8019876: fc f7 5b ff                  	bl	#-12618
 801987a: 4f f6 a4 44                  	movw	r4, #64676
 801987e: 4f f6 93 41                  	movw	r1, #64659
 8019882: 03 ab                        	add	r3, sp, #12
 8019884: c0 f6 01 04                  	movt	r4, #2049
 8019888: c0 f6 01 01                  	movt	r1, #2049
 801988c: 0f 22                        	movs	r2, #15
;     pub anchor_interval: Duration,
 801988e: 03 95                        	str	r5, [sp, #12]
; #[derive(Clone, Debug)]
 8019890: 00 94                        	str	r4, [sp]
 8019892: fc f7 4d ff                  	bl	#-12646
;     pub max_slot: Duration,
 8019896: 05 f1 10 01                  	add.w	r1, r5, #16
 801989a: 03 91                        	str	r1, [sp, #12]
; #[derive(Clone, Debug)]
 801989c: 4c f6 0c 41                  	movw	r1, #52236
 80198a0: 03 ab                        	add	r3, sp, #12
 80198a2: c0 f6 01 01                  	movt	r1, #2049
 80198a6: 08 22                        	movs	r2, #8
 80198a8: 00 94                        	str	r4, [sp]
 80198aa: fc f7 41 ff                  	bl	#-12670
 80198ae: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 80198b2: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 80198b6: b9 b1                        	cbz	r1, #46
 80198b8: 08 b1                        	cbz	r0, #2
 80198ba: 01 20                        	movs	r0, #1
 80198bc: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h93b7e58868f80519E+0xb8>
 80198be: 01 99                        	ldr	r1, [sp, #4]
 80198c0: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 80198c4: 09 78                        	ldrb	r1, [r1]
 80198c6: d3 68                        	ldr	r3, [r2, #12]
 80198c8: 49 07                        	lsls	r1, r1, #29
 80198ca: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h93b7e58868f80519E+0xac>
 80198cc: 4e f6 1c 41                  	movw	r1, #60444
 80198d0: 02 22                        	movs	r2, #2
 80198d2: c0 f6 01 01                  	movt	r1, #2049
 80198d6: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h93b7e58868f80519E+0xb6>
 80198d8: 4e f6 d6 41                  	movw	r1, #60630
 80198dc: 01 22                        	movs	r2, #1
 80198de: c0 f6 01 01                  	movt	r1, #2049
 80198e2: 98 47                        	blx	r3
 80198e4: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 80198e8: 00 28                        	cmp	r0, #0
 80198ea: 18 bf                        	it	ne
 80198ec: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 80198ee: 04 b0                        	add	sp, #16
 80198f0: b0 bd                        	pop	{r4, r5, r7, pc}

080198f2 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h58f6cda5f73ec068:
 80198f2: b0 b5                        	push	{r4, r5, r7, lr}
 80198f4: 02 af                        	add	r7, sp, #8
 80198f6: 84 b0                        	sub	sp, #16
 80198f8: 0c 46                        	mov	r4, r1
 80198fa: 05 68                        	ldr	r5, [r0]
 80198fc: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8019900: 0d 22                        	movs	r2, #13
 8019902: cb 68                        	ldr	r3, [r1, #12]
 8019904: 4f f6 b4 41                  	movw	r1, #64692
 8019908: c0 f6 01 01                  	movt	r1, #2049
 801990c: 98 47                        	blx	r3
 801990e: 8d f8 08 00                  	strb.w	r0, [sp, #8]
;     pub status: hci::Status<crate::event::Status>,
 8019912: 05 f1 20 00                  	add.w	r0, r5, #32
 8019916: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Debug)]
 8019918: 4f f2 b4 60                  	movw	r0, #63156
 801991c: 00 21                        	movs	r1, #0
 801991e: c0 f6 01 00                  	movt	r0, #2049
 8019922: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 8019926: 4f f6 60 31                  	movw	r1, #64352
 801992a: 00 90                        	str	r0, [sp]
 801992c: 01 a8                        	add	r0, sp, #4
 801992e: 03 ab                        	add	r3, sp, #12
 8019930: c0 f6 01 01                  	movt	r1, #2049
 8019934: 06 22                        	movs	r2, #6
 8019936: 01 94                        	str	r4, [sp, #4]
 8019938: fc f7 fa fe                  	bl	#-12812
 801993c: 4f f6 c8 41                  	movw	r1, #64712
 8019940: 03 ab                        	add	r3, sp, #12
 8019942: c0 f6 01 01                  	movt	r1, #2049
 8019946: 07 22                        	movs	r2, #7
 8019948: 00 91                        	str	r1, [sp]
 801994a: 4f f6 c1 41                  	movw	r1, #64705
 801994e: c0 f6 01 01                  	movt	r1, #2049
;     pub clients: [ClientStatus; 8],
 8019952: 03 95                        	str	r5, [sp, #12]
; #[derive(Clone, Debug)]
 8019954: fc f7 ec fe                  	bl	#-12840
 8019958: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 801995c: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 8019960: b9 b1                        	cbz	r1, #46
 8019962: 08 b1                        	cbz	r0, #2
 8019964: 01 20                        	movs	r0, #1
 8019966: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h58f6cda5f73ec068E+0xa0>
 8019968: 01 99                        	ldr	r1, [sp, #4]
 801996a: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801996e: 09 78                        	ldrb	r1, [r1]
 8019970: d3 68                        	ldr	r3, [r2, #12]
 8019972: 49 07                        	lsls	r1, r1, #29
 8019974: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h58f6cda5f73ec068E+0x94>
 8019976: 4e f6 1c 41                  	movw	r1, #60444
 801997a: 02 22                        	movs	r2, #2
 801997c: c0 f6 01 01                  	movt	r1, #2049
 8019980: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h58f6cda5f73ec068E+0x9e>
 8019982: 4e f6 d6 41                  	movw	r1, #60630
 8019986: 01 22                        	movs	r2, #1
 8019988: c0 f6 01 01                  	movt	r1, #2049
 801998c: 98 47                        	blx	r3
 801998e: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8019992: 00 28                        	cmp	r0, #0
 8019994: 18 bf                        	it	ne
 8019996: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8019998: 04 b0                        	add	sp, #16
 801999a: b0 bd                        	pop	{r4, r5, r7, pc}

0801999c _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h175faefe2adc8cbf:
 801999c: f0 b5                        	push	{r4, r5, r6, r7, lr}
 801999e: 03 af                        	add	r7, sp, #12
 80199a0: 4d f8 04 8d                  	str	r8, [sp, #-4]!
 80199a4: 84 b0                        	sub	sp, #16
 80199a6: 0d 46                        	mov	r5, r1
 80199a8: 04 68                        	ldr	r4, [r0]
 80199aa: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 80199ae: 01 22                        	movs	r2, #1
 80199b0: cb 68                        	ldr	r3, [r1, #12]
 80199b2: 4e f6 24 41                  	movw	r1, #60452
 80199b6: c0 f6 01 01                  	movt	r1, #2049
 80199ba: 4f f0 01 08                  	mov.w	r8, #1
 80199be: 98 47                        	blx	r3
 80199c0: 01 95                        	str	r5, [sp, #4]
;             self.entry(&entry);
 80199c2: 4f f6 d8 45                  	movw	r5, #64728
 80199c6: 03 ae                        	add	r6, sp, #12
 80199c8: 00 21                        	movs	r1, #0
 80199ca: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 80199ce: c0 f6 01 05                  	movt	r5, #2049
 80199d2: 01 a8                        	add	r0, sp, #4
 80199d4: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 80199d8: 31 46                        	mov	r1, r6
 80199da: 2a 46                        	mov	r2, r5
;         for entry in entries {
 80199dc: 03 94                        	str	r4, [sp, #12]
;             self.entry(&entry);
 80199de: fd f7 94 f8                  	bl	#-11992
;         NonNull { pointer: ptr as _ }
 80199e2: 21 1d                        	adds	r1, r4, #4
;         for entry in entries {
 80199e4: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 80199e6: 31 46                        	mov	r1, r6
 80199e8: 2a 46                        	mov	r2, r5
 80199ea: fd f7 8e f8                  	bl	#-12004
;         NonNull { pointer: ptr as _ }
 80199ee: 04 f1 08 01                  	add.w	r1, r4, #8
;         for entry in entries {
 80199f2: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 80199f4: 31 46                        	mov	r1, r6
 80199f6: 2a 46                        	mov	r2, r5
 80199f8: fd f7 87 f8                  	bl	#-12018
;         NonNull { pointer: ptr as _ }
 80199fc: 04 f1 0c 01                  	add.w	r1, r4, #12
;         for entry in entries {
 8019a00: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 8019a02: 31 46                        	mov	r1, r6
 8019a04: 2a 46                        	mov	r2, r5
 8019a06: fd f7 80 f8                  	bl	#-12032
;         NonNull { pointer: ptr as _ }
 8019a0a: 04 f1 10 01                  	add.w	r1, r4, #16
;         for entry in entries {
 8019a0e: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 8019a10: 31 46                        	mov	r1, r6
 8019a12: 2a 46                        	mov	r2, r5
 8019a14: fd f7 79 f8                  	bl	#-12046
;         NonNull { pointer: ptr as _ }
 8019a18: 04 f1 14 01                  	add.w	r1, r4, #20
;         for entry in entries {
 8019a1c: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 8019a1e: 31 46                        	mov	r1, r6
 8019a20: 2a 46                        	mov	r2, r5
 8019a22: fd f7 72 f8                  	bl	#-12060
;         NonNull { pointer: ptr as _ }
 8019a26: 04 f1 18 01                  	add.w	r1, r4, #24
;         for entry in entries {
 8019a2a: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 8019a2c: 31 46                        	mov	r1, r6
 8019a2e: 2a 46                        	mov	r2, r5
 8019a30: fd f7 6b f8                  	bl	#-12074
;         NonNull { pointer: ptr as _ }
 8019a34: 04 f1 1c 01                  	add.w	r1, r4, #28
;         for entry in entries {
 8019a38: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 8019a3a: 31 46                        	mov	r1, r6
 8019a3c: 2a 46                        	mov	r2, r5
 8019a3e: fd f7 64 f8                  	bl	#-12088
 8019a42: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 8019a46: 20 b1                        	cbz	r0, #8
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8019a48: 40 46                        	mov	r0, r8
 8019a4a: 04 b0                        	add	sp, #16
 8019a4c: 5d f8 04 8b                  	ldr	r8, [sp], #4
 8019a50: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 8019a52: 01 99                        	ldr	r1, [sp, #4]
 8019a54: 01 22                        	movs	r2, #1
 8019a56: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8019a5a: cb 68                        	ldr	r3, [r1, #12]
 8019a5c: 4e f6 23 41                  	movw	r1, #60451
 8019a60: c0 f6 01 01                  	movt	r1, #2049
 8019a64: 98 47                        	blx	r3
 8019a66: 80 46                        	mov	r8, r0
 8019a68: 40 46                        	mov	r0, r8
 8019a6a: 04 b0                        	add	sp, #16
 8019a6c: 5d f8 04 8b                  	ldr	r8, [sp], #4
 8019a70: f0 bd                        	pop	{r4, r5, r6, r7, pc}

08019a72 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h9a125546112389e7:
 8019a72: b0 b5                        	push	{r4, r5, r7, lr}
 8019a74: 02 af                        	add	r7, sp, #8
 8019a76: 84 b0                        	sub	sp, #16
 8019a78: 0c 46                        	mov	r4, r1
 8019a7a: 05 68                        	ldr	r5, [r0]
 8019a7c: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8019a80: 0c 22                        	movs	r2, #12
 8019a82: cb 68                        	ldr	r3, [r1, #12]
 8019a84: 4f f6 e8 41                  	movw	r1, #64744
 8019a88: c0 f6 01 01                  	movt	r1, #2049
 8019a8c: 98 47                        	blx	r3
 8019a8e: 8d f8 08 00                  	strb.w	r0, [sp, #8]
;     pub state: LinkState,
 8019a92: a8 1c                        	adds	r0, r5, #2
 8019a94: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug, PartialEq)]
 8019a96: 4f f6 fc 40                  	movw	r0, #64764
 8019a9a: 00 21                        	movs	r1, #0
 8019a9c: c0 f6 01 00                  	movt	r0, #2049
 8019aa0: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 8019aa4: 4f f6 f4 41                  	movw	r1, #64756
 8019aa8: 00 90                        	str	r0, [sp]
 8019aaa: 01 a8                        	add	r0, sp, #4
 8019aac: 03 ab                        	add	r3, sp, #12
 8019aae: c0 f6 01 01                  	movt	r1, #2049
 8019ab2: 05 22                        	movs	r2, #5
 8019ab4: 01 94                        	str	r4, [sp, #4]
 8019ab6: fc f7 3b fe                  	bl	#-13194
 8019aba: 4f f6 18 51                  	movw	r1, #64792
 8019abe: 03 ab                        	add	r3, sp, #12
 8019ac0: c0 f6 01 01                  	movt	r1, #2049
 8019ac4: 0b 22                        	movs	r2, #11
 8019ac6: 00 91                        	str	r1, [sp]
 8019ac8: 4f f6 0c 51                  	movw	r1, #64780
 8019acc: c0 f6 01 01                  	movt	r1, #2049
;     pub conn_handle: hci::ConnectionHandle,
 8019ad0: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug, PartialEq)]
 8019ad2: fc f7 2d fe                  	bl	#-13222
 8019ad6: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 8019ada: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 8019ade: b9 b1                        	cbz	r1, #46
 8019ae0: 08 b1                        	cbz	r0, #2
 8019ae2: 01 20                        	movs	r0, #1
 8019ae4: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h9a125546112389e7E+0x9e>
 8019ae6: 01 99                        	ldr	r1, [sp, #4]
 8019ae8: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8019aec: 09 78                        	ldrb	r1, [r1]
 8019aee: d3 68                        	ldr	r3, [r2, #12]
 8019af0: 49 07                        	lsls	r1, r1, #29
 8019af2: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h9a125546112389e7E+0x92>
 8019af4: 4e f6 1c 41                  	movw	r1, #60444
 8019af8: 02 22                        	movs	r2, #2
 8019afa: c0 f6 01 01                  	movt	r1, #2049
 8019afe: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h9a125546112389e7E+0x9c>
 8019b00: 4e f6 d6 41                  	movw	r1, #60630
 8019b04: 01 22                        	movs	r2, #1
 8019b06: c0 f6 01 01                  	movt	r1, #2049
 8019b0a: 98 47                        	blx	r3
 8019b0c: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8019b10: 00 28                        	cmp	r0, #0
 8019b12: 18 bf                        	it	ne
 8019b14: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8019b16: 04 b0                        	add	sp, #16
 8019b18: b0 bd                        	pop	{r4, r5, r7, pc}
 8019b1a: 00 00                        	movs	r0, r0

08019b1c _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::hc2e4e609b9795574:
 8019b1c: 00 68                        	ldr	r0, [r0]
; #[derive(Copy, Clone, Debug, PartialEq)]
 8019b1e: 00 78                        	ldrb	r0, [r0]
 8019b20: df e8 00 f0                  	tbb	[pc, r0]

08019b24 $d.286:
 8019b24:	04 0d 16 1f	.word	0x1f160d04
 8019b28:	28 31 3a 43	.word	0x433a3128

08019b2c $t.287:
 8019b2c: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8019b30: 4d f2 ac 21                  	movw	r1, #53932
 8019b34: d3 68                        	ldr	r3, [r2, #12]
 8019b36: c0 f6 01 01                  	movt	r1, #2049
 8019b3a: 04 22                        	movs	r2, #4
 8019b3c: 18 47                        	bx	r3
 8019b3e: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8019b42: 4f f6 2e 51                  	movw	r1, #64814
 8019b46: d3 68                        	ldr	r3, [r2, #12]
 8019b48: c0 f6 01 01                  	movt	r1, #2049
 8019b4c: 0b 22                        	movs	r2, #11
 8019b4e: 18 47                        	bx	r3
 8019b50: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8019b54: 4f f6 39 51                  	movw	r1, #64825
 8019b58: d3 68                        	ldr	r3, [r2, #12]
 8019b5a: c0 f6 01 01                  	movt	r1, #2049
 8019b5e: 15 22                        	movs	r2, #21
 8019b60: 18 47                        	bx	r3
 8019b62: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8019b66: 4c f6 14 41                  	movw	r1, #52244
 8019b6a: c0 f6 01 01                  	movt	r1, #2049
 8019b6e: d3 68                        	ldr	r3, [r2, #12]
 8019b70: 08 22                        	movs	r2, #8
 8019b72: 18 47                        	bx	r3
 8019b74: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8019b78: 4c f6 1c 41                  	movw	r1, #52252
 8019b7c: c0 f6 01 01                  	movt	r1, #2049
 8019b80: d3 68                        	ldr	r3, [r2, #12]
 8019b82: 08 22                        	movs	r2, #8
 8019b84: 18 47                        	bx	r3
 8019b86: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8019b8a: 4f f6 4e 51                  	movw	r1, #64846
 8019b8e: d3 68                        	ldr	r3, [r2, #12]
 8019b90: c0 f6 01 01                  	movt	r1, #2049
 8019b94: 12 22                        	movs	r2, #18
 8019b96: 18 47                        	bx	r3
 8019b98: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8019b9c: 4f f6 60 51                  	movw	r1, #64864
 8019ba0: c0 f6 01 01                  	movt	r1, #2049
 8019ba4: d3 68                        	ldr	r3, [r2, #12]
 8019ba6: 06 22                        	movs	r2, #6
 8019ba8: 18 47                        	bx	r3
 8019baa: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8019bae: 4f f6 28 51                  	movw	r1, #64808
 8019bb2: c0 f6 01 01                  	movt	r1, #2049
 8019bb6: d3 68                        	ldr	r3, [r2, #12]
 8019bb8: 06 22                        	movs	r2, #6
 8019bba: 18 47                        	bx	r3

08019bbc _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h267f7fbfe511190e:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8019bbc: b0 b5                        	push	{r4, r5, r7, lr}
 8019bbe: 02 af                        	add	r7, sp, #8
 8019bc0: 84 b0                        	sub	sp, #16
 8019bc2: 0c 46                        	mov	r4, r1
 8019bc4: 05 68                        	ldr	r5, [r0]
 8019bc6: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8019bca: 14 22                        	movs	r2, #20
 8019bcc: cb 68                        	ldr	r3, [r1, #12]
 8019bce: 4f f6 66 51                  	movw	r1, #64870
 8019bd2: c0 f6 01 01                  	movt	r1, #2049
 8019bd6: 98 47                        	blx	r3
 8019bd8: 8d f8 08 00                  	strb.w	r0, [sp, #8]
;     pub status: hci::Status<crate::event::Status>,
 8019bdc: 28 1d                        	adds	r0, r5, #4
 8019bde: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Debug)]
 8019be0: 4f f2 b4 60                  	movw	r0, #63156
 8019be4: 00 21                        	movs	r1, #0
 8019be6: c0 f6 01 00                  	movt	r0, #2049
 8019bea: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 8019bee: 4f f6 60 31                  	movw	r1, #64352
 8019bf2: 00 90                        	str	r0, [sp]
 8019bf4: 01 a8                        	add	r0, sp, #4
 8019bf6: 03 ab                        	add	r3, sp, #12
 8019bf8: c0 f6 01 01                  	movt	r1, #2049
 8019bfc: 06 22                        	movs	r2, #6
 8019bfe: 01 94                        	str	r4, [sp, #4]
 8019c00: fc f7 96 fd                  	bl	#-13524
 8019c04: 4f f6 88 51                  	movw	r1, #64904
 8019c08: 03 ab                        	add	r3, sp, #12
 8019c0a: c0 f6 01 01                  	movt	r1, #2049
 8019c0e: 0c 22                        	movs	r2, #12
 8019c10: 00 91                        	str	r1, [sp]
 8019c12: 4f f6 7a 51                  	movw	r1, #64890
 8019c16: c0 f6 01 01                  	movt	r1, #2049
;     pub packet_count: u32,
 8019c1a: 03 95                        	str	r5, [sp, #12]
; #[derive(Clone, Debug)]
 8019c1c: fc f7 88 fd                  	bl	#-13552
 8019c20: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 8019c24: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 8019c28: b9 b1                        	cbz	r1, #46
 8019c2a: 08 b1                        	cbz	r0, #2
 8019c2c: 01 20                        	movs	r0, #1
 8019c2e: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h267f7fbfe511190eE+0x9e>
 8019c30: 01 99                        	ldr	r1, [sp, #4]
 8019c32: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8019c36: 09 78                        	ldrb	r1, [r1]
 8019c38: d3 68                        	ldr	r3, [r2, #12]
 8019c3a: 49 07                        	lsls	r1, r1, #29
 8019c3c: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h267f7fbfe511190eE+0x92>
 8019c3e: 4e f6 1c 41                  	movw	r1, #60444
 8019c42: 02 22                        	movs	r2, #2
 8019c44: c0 f6 01 01                  	movt	r1, #2049
 8019c48: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h267f7fbfe511190eE+0x9c>
 8019c4a: 4e f6 d6 41                  	movw	r1, #60630
 8019c4e: 01 22                        	movs	r2, #1
 8019c50: c0 f6 01 01                  	movt	r1, #2049
 8019c54: 98 47                        	blx	r3
 8019c56: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8019c5a: 00 28                        	cmp	r0, #0
 8019c5c: 18 bf                        	it	ne
 8019c5e: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8019c60: 04 b0                        	add	sp, #16
 8019c62: b0 bd                        	pop	{r4, r5, r7, pc}

08019c64 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h9c4bc21b97d94cf1:
 8019c64: b0 b5                        	push	{r4, r5, r7, lr}
 8019c66: 02 af                        	add	r7, sp, #8
 8019c68: 84 b0                        	sub	sp, #16
 8019c6a: 0c 46                        	mov	r4, r1
 8019c6c: 05 68                        	ldr	r5, [r0]
 8019c6e: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8019c72: 0d 22                        	movs	r2, #13
 8019c74: cb 68                        	ldr	r3, [r1, #12]
 8019c76: 4f f6 98 51                  	movw	r1, #64920
 8019c7a: c0 f6 01 01                  	movt	r1, #2049
 8019c7e: 98 47                        	blx	r3
 8019c80: 8d f8 08 00                  	strb.w	r0, [sp, #8]
;     pub status: hci::Status<crate::event::Status>,
 8019c84: 05 f1 12 00                  	add.w	r0, r5, #18
 8019c88: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Debug)]
 8019c8a: 4f f2 b4 60                  	movw	r0, #63156
 8019c8e: 00 21                        	movs	r1, #0
 8019c90: c0 f6 01 00                  	movt	r0, #2049
 8019c94: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 8019c98: 4f f6 60 31                  	movw	r1, #64352
 8019c9c: 00 90                        	str	r0, [sp]
 8019c9e: 01 a8                        	add	r0, sp, #4
 8019ca0: 03 ab                        	add	r3, sp, #12
 8019ca2: c0 f6 01 01                  	movt	r1, #2049
 8019ca6: 06 22                        	movs	r2, #6
 8019ca8: 01 94                        	str	r4, [sp, #4]
 8019caa: fc f7 41 fd                  	bl	#-13694
 8019cae: 4f f6 ac 51                  	movw	r1, #64940
 8019cb2: 03 ab                        	add	r3, sp, #12
 8019cb4: c0 f6 01 01                  	movt	r1, #2049
 8019cb8: 05 22                        	movs	r2, #5
 8019cba: 00 91                        	str	r1, [sp]
 8019cbc: 4f f6 a5 51                  	movw	r1, #64933
 8019cc0: c0 f6 01 01                  	movt	r1, #2049
;     pub value: HalConfigParameter,
 8019cc4: 03 95                        	str	r5, [sp, #12]
; #[derive(Clone, Debug)]
 8019cc6: fc f7 33 fd                  	bl	#-13722
 8019cca: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 8019cce: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 8019cd2: b9 b1                        	cbz	r1, #46
 8019cd4: 08 b1                        	cbz	r0, #2
 8019cd6: 01 20                        	movs	r0, #1
 8019cd8: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h9c4bc21b97d94cf1E+0xa0>
 8019cda: 01 99                        	ldr	r1, [sp, #4]
 8019cdc: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8019ce0: 09 78                        	ldrb	r1, [r1]
 8019ce2: d3 68                        	ldr	r3, [r2, #12]
 8019ce4: 49 07                        	lsls	r1, r1, #29
 8019ce6: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h9c4bc21b97d94cf1E+0x94>
 8019ce8: 4e f6 1c 41                  	movw	r1, #60444
 8019cec: 02 22                        	movs	r2, #2
 8019cee: c0 f6 01 01                  	movt	r1, #2049
 8019cf2: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h9c4bc21b97d94cf1E+0x9e>
 8019cf4: 4e f6 d6 41                  	movw	r1, #60630
 8019cf8: 01 22                        	movs	r2, #1
 8019cfa: c0 f6 01 01                  	movt	r1, #2049
 8019cfe: 98 47                        	blx	r3
 8019d00: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8019d04: 00 28                        	cmp	r0, #0
 8019d06: 18 bf                        	it	ne
 8019d08: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8019d0a: 04 b0                        	add	sp, #16
 8019d0c: b0 bd                        	pop	{r4, r5, r7, pc}
 8019d0e: 00 00                        	movs	r0, r0

08019d10 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h8de7d52ef018a7d3:
 8019d10: b0 b5                        	push	{r4, r5, r7, lr}
 8019d12: 02 af                        	add	r7, sp, #8
 8019d14: 84 b0                        	sub	sp, #16
 8019d16: 05 68                        	ldr	r5, [r0]
 8019d18: 0c 46                        	mov	r4, r1
; #[derive(Clone, Debug, PartialEq)]
 8019d1a: 28 78                        	ldrb	r0, [r5]
 8019d1c: df e8 00 f0                  	tbb	[pc, r0]

08019d20 $d.291:
 8019d20:	03 0c 23 3a	.word	0x3a230c03
 8019d24:	51 00		.short	0x0051

08019d26 $t.292:
 8019d26: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8019d2a: 0d 22                        	movs	r2, #13
 8019d2c: cb 68                        	ldr	r3, [r1, #12]
 8019d2e: 4f f6 bc 51                  	movw	r1, #64956
 8019d32: c0 f6 01 01                  	movt	r1, #2049
 8019d36: 07 e0                        	b	#14 <$t.292+0x26>
 8019d38: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8019d3c: 0d 22                        	movs	r2, #13
 8019d3e: cb 68                        	ldr	r3, [r1, #12]
 8019d40: 4f f6 dc 51                  	movw	r1, #64988
 8019d44: c0 f6 01 01                  	movt	r1, #2049
 8019d48: 98 47                        	blx	r3
 8019d4a: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8019d4e: 00 20                        	movs	r0, #0
 8019d50: 4f f6 cc 52                  	movw	r2, #64972
 8019d54: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8019d58: 01 90                        	str	r0, [sp, #4]
 8019d5a: 68 1c                        	adds	r0, r5, #1
 8019d5c: 03 a9                        	add	r1, sp, #12
 8019d5e: 03 90                        	str	r0, [sp, #12]
 8019d60: c0 f6 01 02                  	movt	r2, #2049
 8019d64: 43 e0                        	b	#134 <$t.292+0xcc>
 8019d66: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8019d6a: 0b 22                        	movs	r2, #11
 8019d6c: cb 68                        	ldr	r3, [r1, #12]
 8019d6e: 4f f6 e9 51                  	movw	r1, #65001
 8019d72: c0 f6 01 01                  	movt	r1, #2049
 8019d76: 98 47                        	blx	r3
 8019d78: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8019d7c: 00 20                        	movs	r0, #0
 8019d7e: 4f f2 48 42                  	movw	r2, #62536
 8019d82: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8019d86: 01 90                        	str	r0, [sp, #4]
;     Diversifier(u16),
 8019d88: a8 1c                        	adds	r0, r5, #2
 8019d8a: 03 a9                        	add	r1, sp, #12
 8019d8c: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Debug, PartialEq)]
 8019d8e: c0 f6 01 02                  	movt	r2, #2049
 8019d92: 2c e0                        	b	#88 <$t.292+0xcc>
 8019d94: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8019d98: 0d 22                        	movs	r2, #13
 8019d9a: cb 68                        	ldr	r3, [r1, #12]
 8019d9c: 4f f6 f4 51                  	movw	r1, #65012
 8019da0: c0 f6 01 01                  	movt	r1, #2049
 8019da4: 98 47                        	blx	r3
 8019da6: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8019daa: 00 20                        	movs	r0, #0
 8019dac: 4f f6 04 62                  	movw	r2, #65028
 8019db0: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8019db4: 01 90                        	str	r0, [sp, #4]
;     EncryptionKey(hci::host::EncryptionKey),
 8019db6: 68 1c                        	adds	r0, r5, #1
 8019db8: 03 a9                        	add	r1, sp, #12
 8019dba: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Debug, PartialEq)]
 8019dbc: c0 f6 01 02                  	movt	r2, #2049
 8019dc0: 15 e0                        	b	#42 <$t.292+0xcc>
 8019dc2: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 8019dc6: 04 22                        	movs	r2, #4
 8019dc8: cb 68                        	ldr	r3, [r1, #12]
 8019dca: 4d f2 b0 21                  	movw	r1, #53936
 8019dce: c0 f6 01 01                  	movt	r1, #2049
 8019dd2: 98 47                        	blx	r3
 8019dd4: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8019dd8: 00 20                        	movs	r0, #0
 8019dda: 4f f2 ec 32                  	movw	r2, #62444
 8019dde: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 8019de2: 01 90                        	str	r0, [sp, #4]
;     Byte(u8),
 8019de4: 68 1c                        	adds	r0, r5, #1
 8019de6: 03 a9                        	add	r1, sp, #12
 8019de8: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Debug, PartialEq)]
 8019dea: c0 f6 01 02                  	movt	r2, #2049
 8019dee: 68 46                        	mov	r0, sp
 8019df0: 00 94                        	str	r4, [sp]
 8019df2: fc f7 1a fe                  	bl	#-13260
 8019df6: 01 98                        	ldr	r0, [sp, #4]
 8019df8: 9d f8 08 40                  	ldrb.w	r4, [sp, #8]
 8019dfc: 18 b3                        	cbz	r0, #70
 8019dfe: 0c b1                        	cbz	r4, #2
 8019e00: 01 24                        	movs	r4, #1
 8019e02: 1e e0                        	b	#60 <$t.292+0x120>
 8019e04: 01 28                        	cmp	r0, #1
 8019e06: 11 d1                        	bne	#34 <$t.292+0x10a>
 8019e08: 9d f8 09 00                  	ldrb.w	r0, [sp, #9]
 8019e0c: 70 b1                        	cbz	r0, #28
 8019e0e: 00 99                        	ldr	r1, [sp]
 8019e10: 08 78                        	ldrb	r0, [r1]
 8019e12: 40 07                        	lsls	r0, r0, #29
 8019e14: 0a d4                        	bmi	#20 <$t.292+0x10a>
 8019e16: 88 69                        	ldr	r0, [r1, #24]
 8019e18: 01 22                        	movs	r2, #1
 8019e1a: c9 69                        	ldr	r1, [r1, #28]
 8019e1c: 01 24                        	movs	r4, #1
 8019e1e: cb 68                        	ldr	r3, [r1, #12]
 8019e20: 4e f6 21 41                  	movw	r1, #60449
 8019e24: c0 f6 01 01                  	movt	r1, #2049
 8019e28: 98 47                        	blx	r3
 8019e2a: 50 b9                        	cbnz	r0, #20
 8019e2c: 00 99                        	ldr	r1, [sp]
 8019e2e: 01 22                        	movs	r2, #1
 8019e30: 88 69                        	ldr	r0, [r1, #24]
 8019e32: c9 69                        	ldr	r1, [r1, #28]
 8019e34: cb 68                        	ldr	r3, [r1, #12]
 8019e36: 4f f2 69 61                  	movw	r1, #63081
 8019e3a: c0 f6 01 01                  	movt	r1, #2049
 8019e3e: 98 47                        	blx	r3
 8019e40: 04 46                        	mov	r4, r0
 8019e42: 8d f8 08 40                  	strb.w	r4, [sp, #8]
 8019e46: 00 2c                        	cmp	r4, #0
 8019e48: 18 bf                        	it	ne
 8019e4a: 01 24                        	movne	r4, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8019e4c: 20 46                        	mov	r0, r4
 8019e4e: 04 b0                        	add	sp, #16
 8019e50: b0 bd                        	pop	{r4, r5, r7, pc}

08019e52 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h6663488e6c30a5b2:
 8019e52: 80 b5                        	push	{r7, lr}
 8019e54: 6f 46                        	mov	r7, sp
 8019e56: 88 b0                        	sub	sp, #32
;         write!(f, "AES-128 Key ({:X?})", self.0)
 8019e58: 44 f2 d1 63                  	movw	r3, #18129
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8019e5c: 02 68                        	ldr	r2, [r0]
;         write!(f, "AES-128 Key ({:X?})", self.0)
 8019e5e: c0 f6 01 03                  	movt	r3, #2049
 8019e62: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8019e66: cd e9 00 23                  	strd	r2, r3, [sp]
 8019e6a: 01 22                        	movs	r2, #1
 8019e6c: 6b 46                        	mov	r3, sp
 8019e6e: 07 92                        	str	r2, [sp, #28]
 8019e70: cd e9 05 23                  	strd	r2, r3, [sp, #20]
 8019e74: 4c f6 24 32                  	movw	r2, #52004
 8019e78: c0 f6 01 02                  	movt	r2, #2049
 8019e7c: 04 92                        	str	r2, [sp, #16]
 8019e7e: 02 22                        	movs	r2, #2
 8019e80: 03 92                        	str	r2, [sp, #12]
 8019e82: 4d f6 68 72                  	movw	r2, #57192
 8019e86: c0 f6 01 02                  	movt	r2, #2049
 8019e8a: 02 92                        	str	r2, [sp, #8]
 8019e8c: 02 aa                        	add	r2, sp, #8
 8019e8e: fc f7 f9 f9                  	bl	#-15374
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8019e92: 08 b0                        	add	sp, #32
 8019e94: 80 bd                        	pop	{r7, pc}

08019e96 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h2217af317fc8727c:
 8019e96: b0 b5                        	push	{r4, r5, r7, lr}
 8019e98: 02 af                        	add	r7, sp, #8
 8019e9a: 84 b0                        	sub	sp, #16
 8019e9c: 0c 46                        	mov	r4, r1
 8019e9e: 05 68                        	ldr	r5, [r0]
 8019ea0: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8019ea4: 13 22                        	movs	r2, #19
 8019ea6: cb 68                        	ldr	r3, [r1, #12]
 8019ea8: 4f f6 14 61                  	movw	r1, #65044
 8019eac: c0 f6 01 01                  	movt	r1, #2049
 8019eb0: 98 47                        	blx	r3
 8019eb2: 8d f8 08 00                  	strb.w	r0, [sp, #8]
;     pub status: hci::Status<crate::event::Status>,
 8019eb6: a8 1c                        	adds	r0, r5, #2
 8019eb8: 03 90                        	str	r0, [sp, #12]
; #[derive(Clone, Debug)]
 8019eba: 4f f2 b4 60                  	movw	r0, #63156
 8019ebe: 00 21                        	movs	r1, #0
 8019ec0: c0 f6 01 00                  	movt	r0, #2049
 8019ec4: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 8019ec8: 4f f6 60 31                  	movw	r1, #64352
 8019ecc: 00 90                        	str	r0, [sp]
 8019ece: 01 a8                        	add	r0, sp, #4
 8019ed0: 03 ab                        	add	r3, sp, #12
 8019ed2: c0 f6 01 01                  	movt	r1, #2049
 8019ed6: 06 22                        	movs	r2, #6
 8019ed8: 01 94                        	str	r4, [sp, #4]
 8019eda: fc f7 29 fc                  	bl	#-14254
 8019ede: 4f f2 48 41                  	movw	r1, #62536
 8019ee2: 03 ab                        	add	r3, sp, #12
 8019ee4: c0 f6 01 01                  	movt	r1, #2049
 8019ee8: 08 22                        	movs	r2, #8
 8019eea: 00 91                        	str	r1, [sp]
 8019eec: 4c f6 24 41                  	movw	r1, #52260
 8019ef0: c0 f6 01 01                  	movt	r1, #2049
;     pub revision: u16,
 8019ef4: 03 95                        	str	r5, [sp, #12]
; #[derive(Clone, Debug)]
 8019ef6: fc f7 1b fc                  	bl	#-14282
 8019efa: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 8019efe: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 8019f02: b9 b1                        	cbz	r1, #46
 8019f04: 08 b1                        	cbz	r0, #2
 8019f06: 01 20                        	movs	r0, #1
 8019f08: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2217af317fc8727cE+0x9e>
 8019f0a: 01 99                        	ldr	r1, [sp, #4]
 8019f0c: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8019f10: 09 78                        	ldrb	r1, [r1]
 8019f12: d3 68                        	ldr	r3, [r2, #12]
 8019f14: 49 07                        	lsls	r1, r1, #29
 8019f16: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2217af317fc8727cE+0x92>
 8019f18: 4e f6 1c 41                  	movw	r1, #60444
 8019f1c: 02 22                        	movs	r2, #2
 8019f1e: c0 f6 01 01                  	movt	r1, #2049
 8019f22: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2217af317fc8727cE+0x9c>
 8019f24: 4e f6 d6 41                  	movw	r1, #60630
 8019f28: 01 22                        	movs	r2, #1
 8019f2a: c0 f6 01 01                  	movt	r1, #2049
 8019f2e: 98 47                        	blx	r3
 8019f30: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 8019f34: 00 28                        	cmp	r0, #0
 8019f36: 18 bf                        	it	ne
 8019f38: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8019f3a: 04 b0                        	add	sp, #16
 8019f3c: b0 bd                        	pop	{r4, r5, r7, pc}

08019f3e _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h51e048fb0936a9a5:
 8019f3e: 00 68                        	ldr	r0, [r0]
 8019f40: fd f7 04 bc                  	b.w	#-10232 <_ZN67_$LT$bluetooth_hci..Status$LT$V$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h54c2e287dd3ab253E+0x4>

08019f44 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h19c6a89a209d6bad:
 8019f44: b0 b5                        	push	{r4, r5, r7, lr}
 8019f46: 02 af                        	add	r7, sp, #8
 8019f48: 84 b0                        	sub	sp, #16
 8019f4a: 0c 46                        	mov	r4, r1
 8019f4c: 05 68                        	ldr	r5, [r0]
 8019f4e: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 8019f52: 14 22                        	movs	r2, #20
 8019f54: cb 68                        	ldr	r3, [r1, #12]
 8019f56: 40 f2 f3 11                  	movw	r1, #499
 8019f5a: c0 f6 02 01                  	movt	r1, #2050
 8019f5e: 98 47                        	blx	r3
 8019f60: 8d f8 08 00                  	strb.w	r0, [sp, #8]
;     pub conn_handle: ConnectionHandle,
 8019f64: 28 1d                        	adds	r0, r5, #4
 8019f66: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 8019f68: 4f f6 18 50                  	movw	r0, #64792
 8019f6c: 00 21                        	movs	r1, #0
 8019f6e: c0 f6 01 00                  	movt	r0, #2049
 8019f72: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 8019f76: 4f f6 0c 51                  	movw	r1, #64780
 8019f7a: 00 90                        	str	r0, [sp]
 8019f7c: 01 a8                        	add	r0, sp, #4
 8019f7e: 03 ab                        	add	r3, sp, #12
 8019f80: c0 f6 01 01                  	movt	r1, #2049
 8019f84: 0b 22                        	movs	r2, #11
 8019f86: 01 94                        	str	r4, [sp, #4]
 8019f88: fc f7 d2 fb                  	bl	#-14428
;     pub attribute_handle: AttributeHandle,
 8019f8c: a9 1d                        	adds	r1, r5, #6
 8019f8e: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 8019f90: 4f f2 c0 41                  	movw	r1, #62656
 8019f94: 03 ab                        	add	r3, sp, #12
 8019f96: c0 f6 01 01                  	movt	r1, #2049
 8019f9a: 10 22                        	movs	r2, #16
 8019f9c: 00 91                        	str	r1, [sp]
 8019f9e: 4d f2 bc 11                  	movw	r1, #53692
 8019fa2: c0 f6 01 01                  	movt	r1, #2049
 8019fa6: fc f7 c3 fb                  	bl	#-14458
 8019faa: 40 f2 20 21                  	movw	r1, #544
 8019fae: 03 ab                        	add	r3, sp, #12
 8019fb0: c0 f6 02 01                  	movt	r1, #2050
 8019fb4: 06 22                        	movs	r2, #6
 8019fb6: 00 91                        	str	r1, [sp]
 8019fb8: 40 f2 18 21                  	movw	r1, #536
 8019fbc: c0 f6 02 01                  	movt	r1, #2050
;     pub offset: usize,
 8019fc0: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 8019fc2: fc f7 b5 fb                  	bl	#-14486
 8019fc6: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 8019fca: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 8019fce: b9 b1                        	cbz	r1, #46
 8019fd0: 08 b1                        	cbz	r0, #2
 8019fd2: 01 20                        	movs	r0, #1
 8019fd4: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h19c6a89a209d6badE+0xbc>
 8019fd6: 01 99                        	ldr	r1, [sp, #4]
 8019fd8: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 8019fdc: 09 78                        	ldrb	r1, [r1]
 8019fde: d3 68                        	ldr	r3, [r2, #12]
 8019fe0: 49 07                        	lsls	r1, r1, #29
 8019fe2: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h19c6a89a209d6badE+0xb0>
 8019fe4: 4e f6 1c 41                  	movw	r1, #60444
 8019fe8: 02 22                        	movs	r2, #2
 8019fea: c0 f6 01 01                  	movt	r1, #2049
 8019fee: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h19c6a89a209d6badE+0xba>
 8019ff0: 4e f6 d6 41                  	movw	r1, #60630
 8019ff4: 01 22                        	movs	r2, #1
 8019ff6: c0 f6 01 01                  	movt	r1, #2049
 8019ffa: 98 47                        	blx	r3
 8019ffc: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 801a000: 00 28                        	cmp	r0, #0
 801a002: 18 bf                        	it	ne
 801a004: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801a006: 04 b0                        	add	sp, #16
 801a008: b0 bd                        	pop	{r4, r5, r7, pc}

0801a00a _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h49cab70b109cd8e0:
 801a00a: b0 b5                        	push	{r4, r5, r7, lr}
 801a00c: 02 af                        	add	r7, sp, #8
 801a00e: 84 b0                        	sub	sp, #16
 801a010: 0c 46                        	mov	r4, r1
 801a012: 05 68                        	ldr	r5, [r0]
 801a014: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 801a018: 10 22                        	movs	r2, #16
 801a01a: cb 68                        	ldr	r3, [r1, #12]
 801a01c: 4d f2 ac 11                  	movw	r1, #53676
 801a020: c0 f6 01 01                  	movt	r1, #2049
 801a024: 98 47                        	blx	r3
 801a026: 8d f8 08 00                  	strb.w	r0, [sp, #8]
; #[derive(Copy, Clone, Debug)]
 801a02a: 4f f6 18 50                  	movw	r0, #64792
 801a02e: 00 21                        	movs	r1, #0
 801a030: c0 f6 01 00                  	movt	r0, #2049
 801a034: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 801a038: 4f f6 0c 51                  	movw	r1, #64780
 801a03c: 00 90                        	str	r0, [sp]
 801a03e: 01 a8                        	add	r0, sp, #4
 801a040: 03 ab                        	add	r3, sp, #12
 801a042: c0 f6 01 01                  	movt	r1, #2049
 801a046: 0b 22                        	movs	r2, #11
 801a048: 01 94                        	str	r4, [sp, #4]
;     pub conn_handle: ConnectionHandle,
 801a04a: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 801a04c: fc f7 70 fb                  	bl	#-14624
;     pub request: AttRequest,
 801a050: 29 1d                        	adds	r1, r5, #4
 801a052: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 801a054: 40 f2 38 21                  	movw	r1, #568
 801a058: 03 ab                        	add	r3, sp, #12
 801a05a: c0 f6 02 01                  	movt	r1, #2050
 801a05e: 07 22                        	movs	r2, #7
 801a060: 00 91                        	str	r1, [sp]
 801a062: 40 f2 30 21                  	movw	r1, #560
 801a066: c0 f6 02 01                  	movt	r1, #2050
 801a06a: fc f7 61 fb                  	bl	#-14654
;     pub attribute_handle: AttributeHandle,
 801a06e: a9 1c                        	adds	r1, r5, #2
 801a070: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 801a072: 4f f2 c0 41                  	movw	r1, #62656
 801a076: 03 ab                        	add	r3, sp, #12
 801a078: c0 f6 01 01                  	movt	r1, #2049
 801a07c: 10 22                        	movs	r2, #16
 801a07e: 00 91                        	str	r1, [sp]
 801a080: 4d f2 bc 11                  	movw	r1, #53692
 801a084: c0 f6 01 01                  	movt	r1, #2049
 801a088: fc f7 52 fb                  	bl	#-14684
;     pub error: AttError,
 801a08c: 69 1d                        	adds	r1, r5, #5
 801a08e: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 801a090: 40 f2 50 21                  	movw	r1, #592
 801a094: 03 ab                        	add	r3, sp, #12
 801a096: c0 f6 02 01                  	movt	r1, #2050
 801a09a: 05 22                        	movs	r2, #5
 801a09c: 00 91                        	str	r1, [sp]
 801a09e: 40 f2 48 21                  	movw	r1, #584
 801a0a2: c0 f6 02 01                  	movt	r1, #2050
 801a0a6: fc f7 43 fb                  	bl	#-14714
 801a0aa: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 801a0ae: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 801a0b2: b9 b1                        	cbz	r1, #46
 801a0b4: 08 b1                        	cbz	r0, #2
 801a0b6: 01 20                        	movs	r0, #1
 801a0b8: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h49cab70b109cd8e0E+0xda>
 801a0ba: 01 99                        	ldr	r1, [sp, #4]
 801a0bc: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a0c0: 09 78                        	ldrb	r1, [r1]
 801a0c2: d3 68                        	ldr	r3, [r2, #12]
 801a0c4: 49 07                        	lsls	r1, r1, #29
 801a0c6: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h49cab70b109cd8e0E+0xce>
 801a0c8: 4e f6 1c 41                  	movw	r1, #60444
 801a0cc: 02 22                        	movs	r2, #2
 801a0ce: c0 f6 01 01                  	movt	r1, #2049
 801a0d2: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h49cab70b109cd8e0E+0xd8>
 801a0d4: 4e f6 d6 41                  	movw	r1, #60630
 801a0d8: 01 22                        	movs	r2, #1
 801a0da: c0 f6 01 01                  	movt	r1, #2049
 801a0de: 98 47                        	blx	r3
 801a0e0: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 801a0e4: 00 28                        	cmp	r0, #0
 801a0e6: 18 bf                        	it	ne
 801a0e8: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801a0ea: 04 b0                        	add	sp, #16
 801a0ec: b0 bd                        	pop	{r4, r5, r7, pc}
 801a0ee: 00 00                        	movs	r0, r0

0801a0f0 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h25c6fc6ea7c66921:
 801a0f0: 00 68                        	ldr	r0, [r0]
; #[derive(Copy, Clone, Debug, PartialEq)]
 801a0f2: 00 78                        	ldrb	r0, [r0]
 801a0f4: 01 38                        	subs	r0, #1
 801a0f6: df e8 10 f0                  	tbh	[pc, r0, lsl #1]

0801a0fa $d.299:
 801a0fa:	ff 00 83 01	.word	0x018300ff
 801a0fe:	8a 01 91 01	.word	0x0191018a
 801a102:	98 01 9f 01	.word	0x019f0198
 801a106:	a8 01 af 01	.word	0x01af01a8
 801a10a:	b8 01 bf 01	.word	0x01bf01b8
 801a10e:	c8 01 45 01	.word	0x014501c8
 801a112:	d1 01 da 01	.word	0x01da01d1
 801a116:	4e 01 e3 01	.word	0x01e3014e
 801a11a:	57 01 8c 02	.word	0x028c0157
 801a11e:	8c 02 8c 02	.word	0x028c028c
 801a122:	8c 02 8c 02	.word	0x028c028c
 801a126:	8c 02 8c 02	.word	0x028c028c
 801a12a:	8c 02 8c 02	.word	0x028c028c
 801a12e:	8c 02 8c 02	.word	0x028c028c
 801a132:	8c 02 8c 02	.word	0x028c028c
 801a136:	8c 02 8c 02	.word	0x028c028c
 801a13a:	8c 02 8c 02	.word	0x028c028c
 801a13e:	8c 02 8c 02	.word	0x028c028c
 801a142:	8c 02 8c 02	.word	0x028c028c
 801a146:	8c 02 8c 02	.word	0x028c028c
 801a14a:	8c 02 8c 02	.word	0x028c028c
 801a14e:	8c 02 8c 02	.word	0x028c028c
 801a152:	8c 02 8c 02	.word	0x028c028c
 801a156:	8c 02 8c 02	.word	0x028c028c
 801a15a:	8c 02 8c 02	.word	0x028c028c
 801a15e:	8c 02 8c 02	.word	0x028c028c
 801a162:	8c 02 8c 02	.word	0x028c028c
 801a166:	8c 02 8c 02	.word	0x028c028c
 801a16a:	8c 02 8c 02	.word	0x028c028c
 801a16e:	8c 02 8c 02	.word	0x028c028c
 801a172:	8c 02 8c 02	.word	0x028c028c
 801a176:	8c 02 8c 02	.word	0x028c028c
 801a17a:	8c 02 8c 02	.word	0x028c028c
 801a17e:	8c 02 8c 02	.word	0x028c028c
 801a182:	8c 02 8c 02	.word	0x028c028c
 801a186:	8c 02 8c 02	.word	0x028c028c
 801a18a:	8c 02 8c 02	.word	0x028c028c
 801a18e:	8c 02 8c 02	.word	0x028c028c
 801a192:	8c 02 8c 02	.word	0x028c028c
 801a196:	8c 02 8c 02	.word	0x028c028c
 801a19a:	8c 02 8c 02	.word	0x028c028c
 801a19e:	8c 02 8c 02	.word	0x028c028c
 801a1a2:	8c 02 8c 02	.word	0x028c028c
 801a1a6:	8c 02 8c 02	.word	0x028c028c
 801a1aa:	8c 02 8c 02	.word	0x028c028c
 801a1ae:	8c 02 8c 02	.word	0x028c028c
 801a1b2:	8c 02 8c 02	.word	0x028c028c
 801a1b6:	8c 02 8c 02	.word	0x028c028c
 801a1ba:	8c 02 8c 02	.word	0x028c028c
 801a1be:	8c 02 8c 02	.word	0x028c028c
 801a1c2:	8c 02 8c 02	.word	0x028c028c
 801a1c6:	8c 02 8c 02	.word	0x028c028c
 801a1ca:	8c 02 8c 02	.word	0x028c028c
 801a1ce:	8c 02 8c 02	.word	0x028c028c
 801a1d2:	8c 02 8c 02	.word	0x028c028c
 801a1d6:	8c 02 8c 02	.word	0x028c028c
 801a1da:	8c 02 8c 02	.word	0x028c028c
 801a1de:	8c 02 8c 02	.word	0x028c028c
 801a1e2:	8c 02 8c 02	.word	0x028c028c
 801a1e6:	8c 02 8c 02	.word	0x028c028c
 801a1ea:	8c 02 8c 02	.word	0x028c028c
 801a1ee:	8c 02 8c 02	.word	0x028c028c
 801a1f2:	8c 02 8c 02	.word	0x028c028c
 801a1f6:	8c 02 ea 01	.word	0x01ea028c
 801a1fa:	f1 01 29 02	.word	0x022901f1
 801a1fe:	f8 01 ff 01	.word	0x01ff01f8
 801a202:	30 02 37 02	.word	0x02370230
 801a206:	60 01 67 01	.word	0x01670160
 801a20a:	3e 02 29 01	.word	0x0129023e
 801a20e:	45 02 4c 02	.word	0x024c0245
 801a212:	06 02 0d 02	.word	0x020d0206
 801a216:	14 02 30 01	.word	0x01300214
 801a21a:	37 01 0d 01	.word	0x010d0137
 801a21e:	14 01 1b 01	.word	0x011b0114
 801a222:	53 02 5a 02	.word	0x025a0253
 801a226:	6e 01 1b 02	.word	0x021b016e
 801a22a:	61 02 06 01	.word	0x01060261
 801a22e:	3e 01 22 02	.word	0x0222013e
 801a232:	68 02 22 01	.word	0x01220268
 801a236:	75 01 8c 02	.word	0x028c0175
 801a23a:	8c 02 8c 02	.word	0x028c028c
 801a23e:	8c 02 8c 02	.word	0x028c028c
 801a242:	8c 02 8c 02	.word	0x028c028c
 801a246:	8c 02 8c 02	.word	0x028c028c
 801a24a:	8c 02 8c 02	.word	0x028c028c
 801a24e:	8c 02 8c 02	.word	0x028c028c
 801a252:	8c 02 8c 02	.word	0x028c028c
 801a256:	8c 02 8c 02	.word	0x028c028c
 801a25a:	8c 02 8c 02	.word	0x028c028c
 801a25e:	8c 02 8c 02	.word	0x028c028c
 801a262:	8c 02 8c 02	.word	0x028c028c
 801a266:	8c 02 8c 02	.word	0x028c028c
 801a26a:	8c 02 8c 02	.word	0x028c028c
 801a26e:	8c 02 8c 02	.word	0x028c028c
 801a272:	8c 02 8c 02	.word	0x028c028c
 801a276:	8c 02 8c 02	.word	0x028c028c
 801a27a:	8c 02 8c 02	.word	0x028c028c
 801a27e:	8c 02 8c 02	.word	0x028c028c
 801a282:	8c 02 8c 02	.word	0x028c028c
 801a286:	8c 02 8c 02	.word	0x028c028c
 801a28a:	8c 02 8c 02	.word	0x028c028c
 801a28e:	8c 02 8c 02	.word	0x028c028c
 801a292:	8c 02 8c 02	.word	0x028c028c
 801a296:	8c 02 8c 02	.word	0x028c028c
 801a29a:	8c 02 8c 02	.word	0x028c028c
 801a29e:	8c 02 8c 02	.word	0x028c028c
 801a2a2:	8c 02 8c 02	.word	0x028c028c
 801a2a6:	8c 02 8c 02	.word	0x028c028c
 801a2aa:	8c 02 8c 02	.word	0x028c028c
 801a2ae:	8c 02 8c 02	.word	0x028c028c
 801a2b2:	8c 02 8c 02	.word	0x028c028c
 801a2b6:	8c 02 8c 02	.word	0x028c028c
 801a2ba:	8c 02 8c 02	.word	0x028c028c
 801a2be:	8c 02 8c 02	.word	0x028c028c
 801a2c2:	8c 02 8c 02	.word	0x028c028c
 801a2c6:	8c 02 8c 02	.word	0x028c028c
 801a2ca:	8c 02 8c 02	.word	0x028c028c
 801a2ce:	8c 02 8c 02	.word	0x028c028c
 801a2d2:	8c 02 8c 02	.word	0x028c028c
 801a2d6:	8c 02 8c 02	.word	0x028c028c
 801a2da:	8c 02 8c 02	.word	0x028c028c
 801a2de:	8c 02 8c 02	.word	0x028c028c
 801a2e2:	8c 02 8c 02	.word	0x028c028c
 801a2e6:	8c 02 8c 02	.word	0x028c028c
 801a2ea:	8c 02 8c 02	.word	0x028c028c
 801a2ee:	8c 02 7c 01	.word	0x017c028c
 801a2f2:	83 02 71 02	.word	0x02710283
 801a2f6:	7a 02		.short	0x027a

0801a2f8 $t.300:
 801a2f8: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a2fc: 4f f2 e2 21                  	movw	r1, #62178
 801a300: c0 f6 01 01                  	movt	r1, #2049
 801a304: d9 e0                        	b	#434 <$t.300+0x1c6>
 801a306: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a30a: 40 f2 43 51                  	movw	r1, #1347
 801a30e: c0 f6 02 01                  	movt	r1, #2050
 801a312: 60 e1                        	b	#704 <$t.300+0x2e2>
 801a314: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a318: 40 f2 a3 41                  	movw	r1, #1187
 801a31c: c0 f6 02 01                  	movt	r1, #2050
 801a320: 59 e1                        	b	#690 <$t.300+0x2e2>
 801a322: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a326: 40 f2 b7 41                  	movw	r1, #1207
 801a32a: c0 f6 02 01                  	movt	r1, #2050
 801a32e: 52 e1                        	b	#676 <$t.300+0x2e2>
 801a330: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a334: 40 f2 cb 41                  	movw	r1, #1227
 801a338: c0 f6 02 01                  	movt	r1, #2050
 801a33c: 4b e1                        	b	#662 <$t.300+0x2e2>
 801a33e: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a342: 40 f2 93 51                  	movw	r1, #1427
 801a346: c0 f6 02 01                  	movt	r1, #2050
 801a34a: 44 e1                        	b	#648 <$t.300+0x2e2>
 801a34c: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a350: 40 f2 03 41                  	movw	r1, #1027
 801a354: c0 f6 02 01                  	movt	r1, #2050
 801a358: 3d e1                        	b	#634 <$t.300+0x2e2>
 801a35a: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a35e: 40 f2 7b 41                  	movw	r1, #1147
 801a362: c0 f6 02 01                  	movt	r1, #2050
 801a366: 36 e1                        	b	#620 <$t.300+0x2e2>
 801a368: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a36c: 40 f2 8f 41                  	movw	r1, #1167
 801a370: c0 f6 02 01                  	movt	r1, #2050
 801a374: 2f e1                        	b	#606 <$t.300+0x2e2>
 801a376: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a37a: 40 f2 57 51                  	movw	r1, #1367
 801a37e: c0 f6 02 01                  	movt	r1, #2050
 801a382: 28 e1                        	b	#592 <$t.300+0x2e2>
 801a384: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a388: 4f f2 0f 31                  	movw	r1, #62223
 801a38c: d3 68                        	ldr	r3, [r2, #12]
 801a38e: c0 f6 01 01                  	movt	r1, #2049
 801a392: 1d 22                        	movs	r2, #29
 801a394: 18 47                        	bx	r3
 801a396: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a39a: 40 f2 11 31                  	movw	r1, #785
 801a39e: d3 68                        	ldr	r3, [r2, #12]
 801a3a0: c0 f6 02 01                  	movt	r1, #2050
 801a3a4: 16 22                        	movs	r2, #22
 801a3a6: 18 47                        	bx	r3
 801a3a8: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a3ac: 4f f2 fa 21                  	movw	r1, #62202
 801a3b0: d3 68                        	ldr	r3, [r2, #12]
 801a3b2: c0 f6 01 01                  	movt	r1, #2049
 801a3b6: 15 22                        	movs	r2, #21
 801a3b8: 18 47                        	bx	r3
 801a3ba: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a3be: 40 f2 c7 31                  	movw	r1, #967
 801a3c2: c0 f6 02 01                  	movt	r1, #2050
 801a3c6: 06 e1                        	b	#524 <$t.300+0x2e2>
 801a3c8: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a3cc: 40 f2 db 31                  	movw	r1, #987
 801a3d0: c0 f6 02 01                  	movt	r1, #2050
 801a3d4: ff e0                        	b	#510 <$t.300+0x2e2>
 801a3d6: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a3da: 40 f2 07 51                  	movw	r1, #1287
 801a3de: c0 f6 02 01                  	movt	r1, #2050
 801a3e2: f8 e0                        	b	#496 <$t.300+0x2e2>
 801a3e4: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a3e8: 40 f2 a7 51                  	movw	r1, #1447
 801a3ec: c0 f6 02 01                  	movt	r1, #2050
 801a3f0: f1 e0                        	b	#482 <$t.300+0x2e2>
 801a3f2: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a3f6: 40 f2 bb 51                  	movw	r1, #1467
 801a3fa: c0 f6 02 01                  	movt	r1, #2050
 801a3fe: ea e0                        	b	#468 <$t.300+0x2e2>
 801a400: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a404: 4d f2 cc 11                  	movw	r1, #53708
 801a408: c0 f6 01 01                  	movt	r1, #2049
 801a40c: 43 e0                        	b	#134 <$t.300+0x1a2>
 801a40e: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a412: 40 f2 6a 21                  	movw	r1, #618
 801a416: c0 f6 02 01                  	movt	r1, #2050
 801a41a: 33 e0                        	b	#102 <$t.300+0x190>
 801a41c: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a420: 40 f2 7b 21                  	movw	r1, #635
 801a424: c0 f6 02 01                  	movt	r1, #2050
 801a428: e7 e0                        	b	#462 <$t.300+0x306>
 801a42a: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a42e: 40 f2 85 21                  	movw	r1, #645
 801a432: c0 f6 02 01                  	movt	r1, #2050
 801a436: d7 e0                        	b	#430 <$t.300+0x2f4>
 801a438: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a43c: 40 f2 9f 21                  	movw	r1, #671
 801a440: d3 68                        	ldr	r3, [r2, #12]
 801a442: c0 f6 02 01                  	movt	r1, #2050
 801a446: 13 22                        	movs	r2, #19
 801a448: 18 47                        	bx	r3
 801a44a: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a44e: 40 f2 b2 21                  	movw	r1, #690
 801a452: c0 f6 02 01                  	movt	r1, #2050
 801a456: 30 e0                        	b	#96 <$t.300+0x1c6>
 801a458: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a45c: 40 f2 bf 21                  	movw	r1, #703
 801a460: d3 68                        	ldr	r3, [r2, #12]
 801a462: c0 f6 02 01                  	movt	r1, #2050
 801a466: 19 22                        	movs	r2, #25
 801a468: 18 47                        	bx	r3
 801a46a: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a46e: 4d f2 dc 11                  	movw	r1, #53724
 801a472: c0 f6 01 01                  	movt	r1, #2049
 801a476: 0e e0                        	b	#28 <$t.300+0x1a2>
 801a478: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a47c: 40 f2 d8 21                  	movw	r1, #728
 801a480: c0 f6 02 01                  	movt	r1, #2050
 801a484: d3 68                        	ldr	r3, [r2, #12]
 801a486: 11 22                        	movs	r2, #17
 801a488: 18 47                        	bx	r3
 801a48a: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a48e: 4d f2 ec 11                  	movw	r1, #53740
 801a492: c0 f6 01 01                  	movt	r1, #2049
 801a496: d3 68                        	ldr	r3, [r2, #12]
 801a498: 10 22                        	movs	r2, #16
 801a49a: 18 47                        	bx	r3
 801a49c: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a4a0: 40 f2 e9 21                  	movw	r1, #745
 801a4a4: d3 68                        	ldr	r3, [r2, #12]
 801a4a6: c0 f6 02 01                  	movt	r1, #2050
 801a4aa: 1b 22                        	movs	r2, #27
 801a4ac: 18 47                        	bx	r3
 801a4ae: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a4b2: 40 f2 04 31                  	movw	r1, #772
 801a4b6: c0 f6 02 01                  	movt	r1, #2050
 801a4ba: d3 68                        	ldr	r3, [r2, #12]
 801a4bc: 0d 22                        	movs	r2, #13
 801a4be: 18 47                        	bx	r3
 801a4c0: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a4c4: 40 f2 27 31                  	movw	r1, #807
 801a4c8: c0 f6 02 01                  	movt	r1, #2050
 801a4cc: 83 e0                        	b	#262 <$t.300+0x2e2>
 801a4ce: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a4d2: 40 f2 3b 31                  	movw	r1, #827
 801a4d6: c0 f6 02 01                  	movt	r1, #2050
 801a4da: 7c e0                        	b	#248 <$t.300+0x2e2>
 801a4dc: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a4e0: 40 f2 4f 31                  	movw	r1, #847
 801a4e4: c0 f6 02 01                  	movt	r1, #2050
 801a4e8: 75 e0                        	b	#234 <$t.300+0x2e2>
 801a4ea: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a4ee: 40 f2 77 31                  	movw	r1, #887
 801a4f2: c0 f6 02 01                  	movt	r1, #2050
 801a4f6: 6e e0                        	b	#220 <$t.300+0x2e2>
 801a4f8: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a4fc: 40 f2 8b 31                  	movw	r1, #907
 801a500: c0 f6 02 01                  	movt	r1, #2050
 801a504: 67 e0                        	b	#206 <$t.300+0x2e2>
 801a506: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a50a: 40 f2 3f 41                  	movw	r1, #1087
 801a50e: c0 f6 02 01                  	movt	r1, #2050
 801a512: 60 e0                        	b	#192 <$t.300+0x2e2>
 801a514: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a518: 40 f2 53 41                  	movw	r1, #1107
 801a51c: c0 f6 02 01                  	movt	r1, #2050
 801a520: 59 e0                        	b	#178 <$t.300+0x2e2>
 801a522: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a526: 40 f2 67 41                  	movw	r1, #1127
 801a52a: c0 f6 02 01                  	movt	r1, #2050
 801a52e: 52 e0                        	b	#164 <$t.300+0x2e2>
 801a530: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a534: 40 f2 1b 51                  	movw	r1, #1307
 801a538: c0 f6 02 01                  	movt	r1, #2050
 801a53c: 4b e0                        	b	#150 <$t.300+0x2e2>
 801a53e: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a542: 40 f2 6b 51                  	movw	r1, #1387
 801a546: c0 f6 02 01                  	movt	r1, #2050
 801a54a: 44 e0                        	b	#136 <$t.300+0x2e2>
 801a54c: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a550: 40 f2 63 31                  	movw	r1, #867
 801a554: c0 f6 02 01                  	movt	r1, #2050
 801a558: 3d e0                        	b	#122 <$t.300+0x2e2>
 801a55a: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a55e: 40 f2 9f 31                  	movw	r1, #927
 801a562: c0 f6 02 01                  	movt	r1, #2050
 801a566: 36 e0                        	b	#108 <$t.300+0x2e2>
 801a568: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a56c: 40 f2 b3 31                  	movw	r1, #947
 801a570: c0 f6 02 01                  	movt	r1, #2050
 801a574: 2f e0                        	b	#94 <$t.300+0x2e2>
 801a576: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a57a: 40 f2 ef 31                  	movw	r1, #1007
 801a57e: c0 f6 02 01                  	movt	r1, #2050
 801a582: 28 e0                        	b	#80 <$t.300+0x2e2>
 801a584: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a588: 40 f2 17 41                  	movw	r1, #1047
 801a58c: c0 f6 02 01                  	movt	r1, #2050
 801a590: 21 e0                        	b	#66 <$t.300+0x2e2>
 801a592: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a596: 40 f2 2b 41                  	movw	r1, #1067
 801a59a: c0 f6 02 01                  	movt	r1, #2050
 801a59e: 1a e0                        	b	#52 <$t.300+0x2e2>
 801a5a0: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a5a4: 40 f2 df 41                  	movw	r1, #1247
 801a5a8: c0 f6 02 01                  	movt	r1, #2050
 801a5ac: 13 e0                        	b	#38 <$t.300+0x2e2>
 801a5ae: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a5b2: 40 f2 f3 41                  	movw	r1, #1267
 801a5b6: c0 f6 02 01                  	movt	r1, #2050
 801a5ba: 0c e0                        	b	#24 <$t.300+0x2e2>
 801a5bc: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a5c0: 40 f2 2f 51                  	movw	r1, #1327
 801a5c4: c0 f6 02 01                  	movt	r1, #2050
 801a5c8: 05 e0                        	b	#10 <$t.300+0x2e2>
 801a5ca: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a5ce: 40 f2 7f 51                  	movw	r1, #1407
 801a5d2: c0 f6 02 01                  	movt	r1, #2050
 801a5d6: d3 68                        	ldr	r3, [r2, #12]
 801a5d8: 14 22                        	movs	r2, #20
 801a5da: 18 47                        	bx	r3
 801a5dc: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a5e0: 40 f2 0e 61                  	movw	r1, #1550
 801a5e4: c0 f6 02 01                  	movt	r1, #2050
 801a5e8: d3 68                        	ldr	r3, [r2, #12]
 801a5ea: 1a 22                        	movs	r2, #26
 801a5ec: 18 47                        	bx	r3
 801a5ee: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a5f2: 40 f2 60 21                  	movw	r1, #608
 801a5f6: c0 f6 02 01                  	movt	r1, #2050
 801a5fa: d3 68                        	ldr	r3, [r2, #12]
 801a5fc: 0a 22                        	movs	r2, #10
 801a5fe: 18 47                        	bx	r3
 801a600: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a604: 40 f2 cf 51                  	movw	r1, #1487
 801a608: d3 68                        	ldr	r3, [r2, #12]
 801a60a: c0 f6 02 01                  	movt	r1, #2050
 801a60e: 3f 22                        	movs	r2, #63
 801a610: 18 47                        	bx	r3
 801a612: fe de                        	trap

0801a614 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h0ba7fdc1608c9de5:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801a614: 00 68                        	ldr	r0, [r0]
; #[derive(Copy, Clone, Debug, PartialEq)]
 801a616: 00 78                        	ldrb	r0, [r0]
 801a618: 01 38                        	subs	r0, #1
 801a61a: df e8 10 f0                  	tbh	[pc, r0, lsl #1]

0801a61e $d.302:
 801a61e:	d2 00 2c 01	.word	0x012c00d2
 801a622:	35 01 3e 01	.word	0x013e0135
 801a626:	ff 00 6b 01	.word	0x016b00ff
 801a62a:	74 01 47 01	.word	0x01470174
 801a62e:	7d 01 08 01	.word	0x0108017d
 801a632:	86 01 f6 00	.word	0x00f60186
 801a636:	11 01 8f 01	.word	0x018f0111
 801a63a:	ed 00 50 01	.word	0x015000ed
 801a63e:	e4 00 98 01	.word	0x019800e4
 801a642:	a1 01 ce 01	.word	0x01ce01a1
 801a646:	ce 01 b3 01	.word	0x01b301ce
 801a64a:	59 01 62 01	.word	0x01620159
 801a64e:	aa 01 ce 01	.word	0x01ce01aa
 801a652:	bc 01 ce 01	.word	0x01ce01bc
 801a656:	1a 01 23 01	.word	0x0123011a
 801a65a:	ce 01 ce 01	.word	0x01ce01ce
 801a65e:	ce 01 ce 01	.word	0x01ce01ce
 801a662:	ce 01 ce 01	.word	0x01ce01ce
 801a666:	ce 01 ce 01	.word	0x01ce01ce
 801a66a:	ce 01 ce 01	.word	0x01ce01ce
 801a66e:	ce 01 ce 01	.word	0x01ce01ce
 801a672:	ce 01 ce 01	.word	0x01ce01ce
 801a676:	ce 01 ce 01	.word	0x01ce01ce
 801a67a:	ce 01 ce 01	.word	0x01ce01ce
 801a67e:	ce 01 ce 01	.word	0x01ce01ce
 801a682:	ce 01 ce 01	.word	0x01ce01ce
 801a686:	ce 01 ce 01	.word	0x01ce01ce
 801a68a:	ce 01 ce 01	.word	0x01ce01ce
 801a68e:	ce 01 ce 01	.word	0x01ce01ce
 801a692:	ce 01 ce 01	.word	0x01ce01ce
 801a696:	ce 01 ce 01	.word	0x01ce01ce
 801a69a:	ce 01 ce 01	.word	0x01ce01ce
 801a69e:	ce 01 ce 01	.word	0x01ce01ce
 801a6a2:	ce 01 ce 01	.word	0x01ce01ce
 801a6a6:	ce 01 ce 01	.word	0x01ce01ce
 801a6aa:	ce 01 ce 01	.word	0x01ce01ce
 801a6ae:	ce 01 ce 01	.word	0x01ce01ce
 801a6b2:	ce 01 ce 01	.word	0x01ce01ce
 801a6b6:	ce 01 ce 01	.word	0x01ce01ce
 801a6ba:	ce 01 ce 01	.word	0x01ce01ce
 801a6be:	ce 01 c5 01	.word	0x01c501ce
 801a6c2:	ce 01 ce 01	.word	0x01ce01ce
 801a6c6:	ce 01 ce 01	.word	0x01ce01ce
 801a6ca:	ce 01 ce 01	.word	0x01ce01ce
 801a6ce:	ce 01 ce 01	.word	0x01ce01ce
 801a6d2:	ce 01 ce 01	.word	0x01ce01ce
 801a6d6:	ce 01 ce 01	.word	0x01ce01ce
 801a6da:	ce 01 ce 01	.word	0x01ce01ce
 801a6de:	ce 01 ce 01	.word	0x01ce01ce
 801a6e2:	ce 01 ce 01	.word	0x01ce01ce
 801a6e6:	ce 01 ce 01	.word	0x01ce01ce
 801a6ea:	ce 01 ce 01	.word	0x01ce01ce
 801a6ee:	ce 01 ce 01	.word	0x01ce01ce
 801a6f2:	ce 01 ce 01	.word	0x01ce01ce
 801a6f6:	ce 01 ce 01	.word	0x01ce01ce
 801a6fa:	ce 01 ce 01	.word	0x01ce01ce
 801a6fe:	ce 01 ce 01	.word	0x01ce01ce
 801a702:	ce 01 ce 01	.word	0x01ce01ce
 801a706:	ce 01 ce 01	.word	0x01ce01ce
 801a70a:	ce 01 ce 01	.word	0x01ce01ce
 801a70e:	ce 01 ce 01	.word	0x01ce01ce
 801a712:	ce 01 ce 01	.word	0x01ce01ce
 801a716:	ce 01 ce 01	.word	0x01ce01ce
 801a71a:	ce 01 ce 01	.word	0x01ce01ce
 801a71e:	ce 01 ce 01	.word	0x01ce01ce
 801a722:	ce 01 ce 01	.word	0x01ce01ce
 801a726:	ce 01 ce 01	.word	0x01ce01ce
 801a72a:	ce 01 ce 01	.word	0x01ce01ce
 801a72e:	ce 01 ce 01	.word	0x01ce01ce
 801a732:	ce 01 ce 01	.word	0x01ce01ce
 801a736:	ce 01 ce 01	.word	0x01ce01ce
 801a73a:	ce 01 ce 01	.word	0x01ce01ce
 801a73e:	ce 01 ce 01	.word	0x01ce01ce
 801a742:	ce 01 ce 01	.word	0x01ce01ce
 801a746:	ce 01 ce 01	.word	0x01ce01ce
 801a74a:	ce 01 ce 01	.word	0x01ce01ce
 801a74e:	ce 01 ce 01	.word	0x01ce01ce
 801a752:	ce 01 ce 01	.word	0x01ce01ce
 801a756:	ce 01 ce 01	.word	0x01ce01ce
 801a75a:	ce 01 ce 01	.word	0x01ce01ce
 801a75e:	ce 01 ce 01	.word	0x01ce01ce
 801a762:	ce 01 ce 01	.word	0x01ce01ce
 801a766:	ce 01 ce 01	.word	0x01ce01ce
 801a76a:	ce 01 ce 01	.word	0x01ce01ce
 801a76e:	ce 01 ce 01	.word	0x01ce01ce
 801a772:	ce 01 ce 01	.word	0x01ce01ce
 801a776:	ce 01 ce 01	.word	0x01ce01ce
 801a77a:	ce 01 ce 01	.word	0x01ce01ce
 801a77e:	ce 01 ce 01	.word	0x01ce01ce
 801a782:	ce 01 ce 01	.word	0x01ce01ce
 801a786:	ce 01 ce 01	.word	0x01ce01ce
 801a78a:	ce 01 ce 01	.word	0x01ce01ce
 801a78e:	ce 01 ce 01	.word	0x01ce01ce
 801a792:	ce 01 ce 01	.word	0x01ce01ce
 801a796:	ce 01 ce 01	.word	0x01ce01ce
 801a79a:	ce 01 ce 01	.word	0x01ce01ce
 801a79e:	ce 01 ce 01	.word	0x01ce01ce
 801a7a2:	ce 01 ce 01	.word	0x01ce01ce
 801a7a6:	ce 01 ce 01	.word	0x01ce01ce
 801a7aa:	ce 01 ce 01	.word	0x01ce01ce
 801a7ae:	ce 01 ce 01	.word	0x01ce01ce
 801a7b2:	ce 01 ce 01	.word	0x01ce01ce
 801a7b6:	ce 01 ce 01	.word	0x01ce01ce
 801a7ba:	ce 01 ce 01	.word	0x01ce01ce
 801a7be:	ce 01 db 00	.word	0x00db01ce

0801a7c2 $t.303:
 801a7c2: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a7c6: 40 f2 3f 61                  	movw	r1, #1599
 801a7ca: c0 f6 02 01                  	movt	r1, #2050
 801a7ce: d3 68                        	ldr	r3, [r2, #12]
 801a7d0: 0d 22                        	movs	r2, #13
 801a7d2: 18 47                        	bx	r3
 801a7d4: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a7d8: 40 f2 8d 71                  	movw	r1, #1933
 801a7dc: c0 f6 02 01                  	movt	r1, #2050
 801a7e0: d3 68                        	ldr	r3, [r2, #12]
 801a7e2: 12 22                        	movs	r2, #18
 801a7e4: 18 47                        	bx	r3
 801a7e6: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a7ea: 40 f2 51 71                  	movw	r1, #1873
 801a7ee: c0 f6 02 01                  	movt	r1, #2050
 801a7f2: d3 68                        	ldr	r3, [r2, #12]
 801a7f4: 17 22                        	movs	r2, #23
 801a7f6: 18 47                        	bx	r3
 801a7f8: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a7fc: 40 f2 27 71                  	movw	r1, #1831
 801a800: c0 f6 02 01                  	movt	r1, #2050
 801a804: d3 68                        	ldr	r3, [r2, #12]
 801a806: 14 22                        	movs	r2, #20
 801a808: 18 47                        	bx	r3
 801a80a: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a80e: 40 f2 05 71                  	movw	r1, #1797
 801a812: d3 68                        	ldr	r3, [r2, #12]
 801a814: c0 f6 02 01                  	movt	r1, #2050
 801a818: 0f 22                        	movs	r2, #15
 801a81a: 18 47                        	bx	r3
 801a81c: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a820: 40 f2 87 61                  	movw	r1, #1671
 801a824: c0 f6 02 01                  	movt	r1, #2050
 801a828: d3 68                        	ldr	r3, [r2, #12]
 801a82a: 17 22                        	movs	r2, #23
 801a82c: 18 47                        	bx	r3
 801a82e: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a832: 40 f2 ee 61                  	movw	r1, #1774
 801a836: d3 68                        	ldr	r3, [r2, #12]
 801a838: c0 f6 02 01                  	movt	r1, #2050
 801a83c: 0b 22                        	movs	r2, #11
 801a83e: 18 47                        	bx	r3
 801a840: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a844: 4d f2 fc 11                  	movw	r1, #53756
 801a848: d3 68                        	ldr	r3, [r2, #12]
 801a84a: c0 f6 01 01                  	movt	r1, #2049
 801a84e: 10 22                        	movs	r2, #16
 801a850: 18 47                        	bx	r3
 801a852: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a856: 40 f6 04 01                  	movw	r1, #2052
 801a85a: d3 68                        	ldr	r3, [r2, #12]
 801a85c: c0 f6 02 01                  	movt	r1, #2050
 801a860: 15 22                        	movs	r2, #21
 801a862: 18 47                        	bx	r3
 801a864: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a868: 40 f2 28 61                  	movw	r1, #1576
 801a86c: c0 f6 02 01                  	movt	r1, #2050
 801a870: d3 68                        	ldr	r3, [r2, #12]
 801a872: 17 22                        	movs	r2, #23
 801a874: 18 47                        	bx	r3
 801a876: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a87a: 40 f2 4c 61                  	movw	r1, #1612
 801a87e: c0 f6 02 01                  	movt	r1, #2050
 801a882: d3 68                        	ldr	r3, [r2, #12]
 801a884: 12 22                        	movs	r2, #18
 801a886: 18 47                        	bx	r3
 801a888: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a88c: 40 f2 5e 61                  	movw	r1, #1630
 801a890: c0 f6 02 01                  	movt	r1, #2050
 801a894: d3 68                        	ldr	r3, [r2, #12]
 801a896: 13 22                        	movs	r2, #19
 801a898: 18 47                        	bx	r3
 801a89a: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a89e: 40 f2 71 61                  	movw	r1, #1649
 801a8a2: c0 f6 02 01                  	movt	r1, #2050
 801a8a6: d3 68                        	ldr	r3, [r2, #12]
 801a8a8: 16 22                        	movs	r2, #22
 801a8aa: 18 47                        	bx	r3
 801a8ac: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a8b0: 40 f2 cb 61                  	movw	r1, #1739
 801a8b4: d3 68                        	ldr	r3, [r2, #12]
 801a8b6: c0 f6 02 01                  	movt	r1, #2050
 801a8ba: 11 22                        	movs	r2, #17
 801a8bc: 18 47                        	bx	r3
 801a8be: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a8c2: 40 f2 3b 71                  	movw	r1, #1851
 801a8c6: c0 f6 02 01                  	movt	r1, #2050
 801a8ca: d3 68                        	ldr	r3, [r2, #12]
 801a8cc: 16 22                        	movs	r2, #22
 801a8ce: 18 47                        	bx	r3
 801a8d0: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a8d4: 40 f2 b2 71                  	movw	r1, #1970
 801a8d8: c0 f6 02 01                  	movt	r1, #2050
 801a8dc: d3 68                        	ldr	r3, [r2, #12]
 801a8de: 14 22                        	movs	r2, #20
 801a8e0: 18 47                        	bx	r3
 801a8e2: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a8e6: 40 f2 c6 71                  	movw	r1, #1990
 801a8ea: c0 f6 02 01                  	movt	r1, #2050
 801a8ee: d3 68                        	ldr	r3, [r2, #12]
 801a8f0: 13 22                        	movs	r2, #19
 801a8f2: 18 47                        	bx	r3
 801a8f4: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a8f8: 40 f2 9e 61                  	movw	r1, #1694
 801a8fc: c0 f6 02 01                  	movt	r1, #2050
 801a900: d3 68                        	ldr	r3, [r2, #12]
 801a902: 16 22                        	movs	r2, #22
 801a904: 18 47                        	bx	r3
 801a906: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a90a: 40 f2 b4 61                  	movw	r1, #1716
 801a90e: c0 f6 02 01                  	movt	r1, #2050
 801a912: d3 68                        	ldr	r3, [r2, #12]
 801a914: 17 22                        	movs	r2, #23
 801a916: 18 47                        	bx	r3
 801a918: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a91c: 40 f2 dc 61                  	movw	r1, #1756
 801a920: c0 f6 02 01                  	movt	r1, #2050
 801a924: d3 68                        	ldr	r3, [r2, #12]
 801a926: 12 22                        	movs	r2, #18
 801a928: 18 47                        	bx	r3
 801a92a: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a92e: 40 f2 f9 61                  	movw	r1, #1785
 801a932: c0 f6 02 01                  	movt	r1, #2050
 801a936: d3 68                        	ldr	r3, [r2, #12]
 801a938: 0c 22                        	movs	r2, #12
 801a93a: 18 47                        	bx	r3
 801a93c: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a940: 40 f2 14 71                  	movw	r1, #1812
 801a944: c0 f6 02 01                  	movt	r1, #2050
 801a948: d3 68                        	ldr	r3, [r2, #12]
 801a94a: 13 22                        	movs	r2, #19
 801a94c: 18 47                        	bx	r3
 801a94e: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a952: 40 f2 68 71                  	movw	r1, #1896
 801a956: c0 f6 02 01                  	movt	r1, #2050
 801a95a: d3 68                        	ldr	r3, [r2, #12]
 801a95c: 0c 22                        	movs	r2, #12
 801a95e: 18 47                        	bx	r3
 801a960: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a964: 40 f2 74 71                  	movw	r1, #1908
 801a968: c0 f6 02 01                  	movt	r1, #2050
 801a96c: d3 68                        	ldr	r3, [r2, #12]
 801a96e: 0d 22                        	movs	r2, #13
 801a970: 18 47                        	bx	r3
 801a972: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a976: 40 f2 d9 71                  	movw	r1, #2009
 801a97a: c0 f6 02 01                  	movt	r1, #2050
 801a97e: d3 68                        	ldr	r3, [r2, #12]
 801a980: 14 22                        	movs	r2, #20
 801a982: 18 47                        	bx	r3
 801a984: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a988: 40 f2 9f 71                  	movw	r1, #1951
 801a98c: c0 f6 02 01                  	movt	r1, #2050
 801a990: d3 68                        	ldr	r3, [r2, #12]
 801a992: 13 22                        	movs	r2, #19
 801a994: 18 47                        	bx	r3
 801a996: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a99a: 40 f2 ed 71                  	movw	r1, #2029
 801a99e: c0 f6 02 01                  	movt	r1, #2050
 801a9a2: d3 68                        	ldr	r3, [r2, #12]
 801a9a4: 17 22                        	movs	r2, #23
 801a9a6: 18 47                        	bx	r3
 801a9a8: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801a9ac: 40 f2 81 71                  	movw	r1, #1921
 801a9b0: c0 f6 02 01                  	movt	r1, #2050
 801a9b4: d3 68                        	ldr	r3, [r2, #12]
 801a9b6: 0c 22                        	movs	r2, #12
 801a9b8: 18 47                        	bx	r3
 801a9ba: fe de                        	trap

0801a9bc _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::hf63574b3d10bb634:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801a9bc: b0 b5                        	push	{r4, r5, r7, lr}
 801a9be: 02 af                        	add	r7, sp, #8
 801a9c0: 84 b0                        	sub	sp, #16
 801a9c2: 0c 46                        	mov	r4, r1
 801a9c4: 05 68                        	ldr	r5, [r0]
 801a9c6: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 801a9ca: 15 22                        	movs	r2, #21
 801a9cc: cb 68                        	ldr	r3, [r1, #12]
 801a9ce: 40 f2 78 11                  	movw	r1, #376
 801a9d2: c0 f6 02 01                  	movt	r1, #2050
 801a9d6: 98 47                        	blx	r3
 801a9d8: 8d f8 08 00                  	strb.w	r0, [sp, #8]
; #[derive(Copy, Clone, Debug)]
 801a9dc: 4f f6 18 50                  	movw	r0, #64792
 801a9e0: 00 21                        	movs	r1, #0
 801a9e2: c0 f6 01 00                  	movt	r0, #2049
 801a9e6: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 801a9ea: 4f f6 0c 51                  	movw	r1, #64780
 801a9ee: 00 90                        	str	r0, [sp]
 801a9f0: 01 a8                        	add	r0, sp, #4
 801a9f2: 03 ab                        	add	r3, sp, #12
 801a9f4: c0 f6 01 01                  	movt	r1, #2049
 801a9f8: 0b 22                        	movs	r2, #11
 801a9fa: 01 94                        	str	r4, [sp, #4]
;     pub conn_handle: ConnectionHandle,
 801a9fc: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 801a9fe: fb f7 97 fe                  	bl	#-17106
;     pub status: GattProcedureStatus,
 801aa02: a9 1c                        	adds	r1, r5, #2
 801aa04: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 801aa06: 40 f6 1c 01                  	movw	r1, #2076
 801aa0a: 03 ab                        	add	r3, sp, #12
 801aa0c: c0 f6 02 01                  	movt	r1, #2050
 801aa10: 06 22                        	movs	r2, #6
 801aa12: 00 91                        	str	r1, [sp]
 801aa14: 4f f6 60 31                  	movw	r1, #64352
 801aa18: c0 f6 01 01                  	movt	r1, #2049
 801aa1c: fb f7 88 fe                  	bl	#-17136
 801aa20: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 801aa24: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 801aa28: b9 b1                        	cbz	r1, #46
 801aa2a: 08 b1                        	cbz	r0, #2
 801aa2c: 01 20                        	movs	r0, #1
 801aa2e: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hf63574b3d10bb634E+0x9e>
 801aa30: 01 99                        	ldr	r1, [sp, #4]
 801aa32: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801aa36: 09 78                        	ldrb	r1, [r1]
 801aa38: d3 68                        	ldr	r3, [r2, #12]
 801aa3a: 49 07                        	lsls	r1, r1, #29
 801aa3c: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hf63574b3d10bb634E+0x92>
 801aa3e: 4e f6 1c 41                  	movw	r1, #60444
 801aa42: 02 22                        	movs	r2, #2
 801aa44: c0 f6 01 01                  	movt	r1, #2049
 801aa48: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hf63574b3d10bb634E+0x9c>
 801aa4a: 4e f6 d6 41                  	movw	r1, #60630
 801aa4e: 01 22                        	movs	r2, #1
 801aa50: c0 f6 01 01                  	movt	r1, #2049
 801aa54: 98 47                        	blx	r3
 801aa56: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 801aa5a: 00 28                        	cmp	r0, #0
 801aa5c: 18 bf                        	it	ne
 801aa5e: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801aa60: 04 b0                        	add	sp, #16
 801aa62: b0 bd                        	pop	{r4, r5, r7, pc}

0801aa64 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h0b8858354afdf4d9:
 801aa64: 02 46                        	mov	r2, r0
 801aa66: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 801aa6a: 12 68                        	ldr	r2, [r2]
 801aa6c: cb 68                        	ldr	r3, [r1, #12]
; #[derive(Copy, Clone, Debug, PartialEq)]
 801aa6e: 11 78                        	ldrb	r1, [r2]
 801aa70: 01 29                        	cmp	r1, #1
 801aa72: 05 d1                        	bne	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h0b8858354afdf4d9E+0x20>
 801aa74: 4f f2 13 21                  	movw	r1, #61971
 801aa78: 06 22                        	movs	r2, #6
 801aa7a: c0 f6 01 01                  	movt	r1, #2049
 801aa7e: 18 47                        	bx	r3
 801aa80: 4e f6 14 51                  	movw	r1, #60692
 801aa84: 07 22                        	movs	r2, #7
 801aa86: c0 f6 01 01                  	movt	r1, #2049
 801aa8a: 18 47                        	bx	r3

0801aa8c _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::he123209f6a71dc6a:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801aa8c: 80 b5                        	push	{r7, lr}
 801aa8e: 6f 46                        	mov	r7, sp
 801aa90: 8e b0                        	sub	sp, #56
 801aa92: 02 68                        	ldr	r2, [r0]
;         &self.value_buf[..self.value_len]
 801aa94: 10 68                        	ldr	r0, [r2]
;         } else if self.end > slice.len() {
 801aa96: f9 28                        	cmp	r0, #249
 801aa98: 31 d2                        	bhs	#98 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he123209f6a71dc6aE+0x76>
;         write!(
 801aa9a: 48 f2 bb 23                  	movw	r3, #33467
;     if buffer.len() < 16 {
 801aa9e: 10 28                        	cmp	r0, #16
;         write!(
 801aaa0: c0 f6 01 03                  	movt	r3, #2049
 801aaa4: 05 93                        	str	r3, [sp, #20]
 801aaa6: 06 ab                        	add	r3, sp, #24
 801aaa8: 04 93                        	str	r3, [sp, #16]
 801aaaa: 48 f2 23 23                  	movw	r3, #33315
 801aaae: c0 f6 01 03                  	movt	r3, #2049
 801aab2: 03 93                        	str	r3, [sp, #12]
 801aab4: 45 f6 b5 03                  	movw	r3, #22709
 801aab8: c0 f6 01 03                  	movt	r3, #2049
 801aabc: 01 93                        	str	r3, [sp, #4]
 801aabe: d1 e9 06 31                  	ldrd	r3, r1, [r1, #24]
;     if buffer.len() < 16 {
 801aac2: 28 bf                        	it	hs
 801aac4: 10 20                        	movhs	r0, #16
;             first_16(self.value())
 801aac6: 07 90                        	str	r0, [sp, #28]
;         &self.value_buf[..self.value_len]
 801aac8: 02 f1 08 00                  	add.w	r0, r2, #8
;             first_16(self.value())
 801aacc: 06 90                        	str	r0, [sp, #24]
;             self.attribute_handle,
 801aace: 90 1d                        	adds	r0, r2, #6
;         write!(
 801aad0: 02 90                        	str	r0, [sp, #8]
;             self.conn_handle,
 801aad2: 10 1d                        	adds	r0, r2, #4
;         write!(
 801aad4: 00 90                        	str	r0, [sp]
 801aad6: 03 20                        	movs	r0, #3
 801aad8: 0d 90                        	str	r0, [sp, #52]
 801aada: 68 46                        	mov	r0, sp
 801aadc: 0c 90                        	str	r0, [sp, #48]
 801aade: 00 20                        	movs	r0, #0
 801aae0: cd e9 0a 00                  	strd	r0, r0, [sp, #40]
 801aae4: 04 20                        	movs	r0, #4
 801aae6: 09 90                        	str	r0, [sp, #36]
 801aae8: 4f f2 f0 50                  	movw	r0, #62960
 801aaec: c0 f6 01 00                  	movt	r0, #2049
 801aaf0: 08 aa                        	add	r2, sp, #32
 801aaf2: 08 90                        	str	r0, [sp, #32]
 801aaf4: 18 46                        	mov	r0, r3
 801aaf6: fb f7 c5 fb                  	bl	#-18550
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801aafa: 0e b0                        	add	sp, #56
 801aafc: 80 bd                        	pop	{r7, pc}
;             slice_index_len_fail(self.end, slice.len());
 801aafe: f8 21                        	movs	r1, #248
 801ab00: fb f7 89 f9                  	bl	#-19694
 801ab04: fe de                        	trap

0801ab06 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h1c26a812514f5717:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801ab06: 80 b5                        	push	{r7, lr}
 801ab08: 6f 46                        	mov	r7, sp
 801ab0a: 90 b0                        	sub	sp, #64
 801ab0c: 02 68                        	ldr	r2, [r0]
;         &self.value_buf[..self.value_len]
 801ab0e: 50 68                        	ldr	r0, [r2, #4]
;         } else if self.end > slice.len() {
 801ab10: f7 28                        	cmp	r0, #247
 801ab12: 39 d2                        	bhs	#114 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1c26a812514f5717E+0x86>
;         write!(
 801ab14: 48 f2 bb 23                  	movw	r3, #33467
;     if buffer.len() < 16 {
 801ab18: 10 28                        	cmp	r0, #16
;         write!(
 801ab1a: c0 f6 01 03                  	movt	r3, #2049
 801ab1e: 07 93                        	str	r3, [sp, #28]
 801ab20: 08 ab                        	add	r3, sp, #32
 801ab22: 06 93                        	str	r3, [sp, #24]
 801ab24: 45 f6 31 23                  	movw	r3, #23089
 801ab28: c0 f6 01 03                  	movt	r3, #2049
 801ab2c: 05 93                        	str	r3, [sp, #20]
 801ab2e: 48 f2 23 23                  	movw	r3, #33315
 801ab32: c0 f6 01 03                  	movt	r3, #2049
 801ab36: 03 93                        	str	r3, [sp, #12]
 801ab38: 45 f6 b5 03                  	movw	r3, #22709
 801ab3c: c0 f6 01 03                  	movt	r3, #2049
 801ab40: 01 93                        	str	r3, [sp, #4]
 801ab42: d1 e9 06 31                  	ldrd	r3, r1, [r1, #24]
;     if buffer.len() < 16 {
 801ab46: 28 bf                        	it	hs
 801ab48: 10 20                        	movhs	r0, #16
;             first_16(self.value())
 801ab4a: 09 90                        	str	r0, [sp, #36]
;         &self.value_buf[..self.value_len]
 801ab4c: 02 f1 0c 00                  	add.w	r0, r2, #12
;             first_16(self.value())
 801ab50: 08 90                        	str	r0, [sp, #32]
;             self.attribute_handle,
 801ab52: 02 f1 0a 00                  	add.w	r0, r2, #10
;         write!(
 801ab56: 02 90                        	str	r0, [sp, #8]
;             self.conn_handle,
 801ab58: 02 f1 08 00                  	add.w	r0, r2, #8
;         write!(
 801ab5c: 00 90                        	str	r0, [sp]
 801ab5e: 04 20                        	movs	r0, #4
 801ab60: 0f 90                        	str	r0, [sp, #60]
 801ab62: 68 46                        	mov	r0, sp
 801ab64: 0e 90                        	str	r0, [sp, #56]
 801ab66: 00 20                        	movs	r0, #0
 801ab68: cd e9 0c 00                  	strd	r0, r0, [sp, #48]
 801ab6c: 05 20                        	movs	r0, #5
 801ab6e: 0b 90                        	str	r0, [sp, #44]
 801ab70: 4f f2 a4 50                  	movw	r0, #62884
 801ab74: 04 92                        	str	r2, [sp, #16]
 801ab76: c0 f6 01 00                  	movt	r0, #2049
 801ab7a: 0a aa                        	add	r2, sp, #40
 801ab7c: 0a 90                        	str	r0, [sp, #40]
 801ab7e: 18 46                        	mov	r0, r3
 801ab80: fb f7 80 fb                  	bl	#-18688
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801ab84: 10 b0                        	add	sp, #64
 801ab86: 80 bd                        	pop	{r7, pc}
;             slice_index_len_fail(self.end, slice.len());
 801ab88: f6 21                        	movs	r1, #246
 801ab8a: fb f7 44 f9                  	bl	#-19832
 801ab8e: fe de                        	trap

0801ab90 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::hc171e77b7b525251:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801ab90: f0 b5                        	push	{r4, r5, r6, r7, lr}
 801ab92: 03 af                        	add	r7, sp, #12
 801ab94: 2d e9 00 0f                  	push.w	{r8, r9, r10, r11}
 801ab98: 91 b0                        	sub	sp, #68
;         write!(f, "{{.conn_handle = {:?}, ", self.conn_handle)?;
 801ab9a: 45 f6 b5 02                  	movw	r2, #22709
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801ab9e: 05 68                        	ldr	r5, [r0]
;         write!(f, "{{.conn_handle = {:?}, ", self.conn_handle)?;
 801aba0: c0 f6 01 02                  	movt	r2, #2049
 801aba4: 0c 46                        	mov	r4, r1
 801aba6: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 801abaa: 01 26                        	movs	r6, #1
 801abac: 04 92                        	str	r2, [sp, #16]
 801abae: 05 f1 08 02                  	add.w	r2, r5, #8
 801abb2: 03 92                        	str	r2, [sp, #12]
 801abb4: 03 aa                        	add	r2, sp, #12
 801abb6: 0f 92                        	str	r2, [sp, #60]
 801abb8: 4f f0 00 0a                  	mov.w	r10, #0
 801abbc: 02 22                        	movs	r2, #2
 801abbe: 10 96                        	str	r6, [sp, #64]
 801abc0: cd e9 0d aa                  	strd	r10, r10, [sp, #52]
 801abc4: 0c 92                        	str	r2, [sp, #48]
 801abc6: 4f f2 90 42                  	movw	r2, #62608
 801abca: c0 f6 01 02                  	movt	r2, #2049
 801abce: 0b 92                        	str	r2, [sp, #44]
 801abd0: 0b aa                        	add	r2, sp, #44
 801abd2: fb f7 57 fb                  	bl	#-18770
 801abd6: 00 28                        	cmp	r0, #0
 801abd8: 59 d1                        	bne	#178 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc171e77b7b525251E+0x102>
 801abda: 68 46                        	mov	r0, sp
 801abdc: 00 f1 0a 0b                  	add.w	r11, r0, #10
 801abe0: 00 f1 08 09                  	add.w	r9, r0, #8
 801abe4: 0d f1 2c 08                  	add.w	r8, sp, #44
 801abe8: 00 20                        	movs	r0, #0
;         if self.next_index >= self.event.data_len {
 801abea: 29 68                        	ldr	r1, [r5]
 801abec: 88 42                        	cmp	r0, r1
 801abee: 53 d2                        	bhs	#166 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc171e77b7b525251E+0x10c>
;         if self.start > self.end {
 801abf0: fa 28                        	cmp	r0, #250
 801abf2: 7c d2                        	bhs	#248 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc171e77b7b525251E+0x162>
;         assert!($size <= $src.len());
 801abf4: f8 28                        	cmp	r0, #248
 801abf6: 6a d2                        	bhs	#212 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc171e77b7b525251E+0x142>
 801abf8: 81 1c                        	adds	r1, r0, #2
;         if self.start > self.end {
 801abfa: fa 29                        	cmp	r1, #250
 801abfc: 6f d2                        	bhs	#222 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc171e77b7b525251E+0x152>
;         assert!($size <= $src.len());
 801abfe: 40 f0 01 02                  	orr	r2, r0, #1
 801ac02: f7 2a                        	cmp	r2, #247
 801ac04: 63 d0                        	beq	#198 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc171e77b7b525251E+0x142>
 801ac06: 6a 68                        	ldr	r2, [r5, #4]
 801ac08: 16 18                        	adds	r6, r2, r0
 801ac0a: 02 1d                        	adds	r2, r0, #4
;         if self.start > self.end {
 801ac0c: 96 42                        	cmp	r6, r2
 801ac0e: 68 d3                        	blo	#208 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc171e77b7b525251E+0x156>
;         } else if self.end > slice.len() {
 801ac10: f9 2e                        	cmp	r6, #249
 801ac12: 6b d8                        	bhi	#214 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc171e77b7b525251E+0x160>
 801ac14: 28 44                        	add	r0, r5
 801ac16: 29 44                        	add	r1, r5
;         from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)
 801ac18: b3 1a                        	subs	r3, r6, r2
 801ac1a: 40 89                        	ldrh	r0, [r0, #10]
;     if buffer.len() < 16 {
 801ac1c: 10 2b                        	cmp	r3, #16
 801ac1e: 49 89                        	ldrh	r1, [r1, #10]
;         for attribute_data in self.attribute_data_iter() {
 801ac20: ad f8 08 00                  	strh.w	r0, [sp, #8]
;         intrinsics::offset(self, count)
 801ac24: 05 eb 02 00                  	add.w	r0, r5, r2
 801ac28: 00 f1 0a 02                  	add.w	r2, r0, #10
;             write!(
 801ac2c: 48 f2 bb 20                  	movw	r0, #33467
 801ac30: c0 f6 01 00                  	movt	r0, #2049
;         for attribute_data in self.attribute_data_iter() {
 801ac34: ad f8 0a 10                  	strh.w	r1, [sp, #10]
;             write!(
 801ac38: 08 90                        	str	r0, [sp, #32]
 801ac3a: 09 a8                        	add	r0, sp, #36
 801ac3c: 07 90                        	str	r0, [sp, #28]
 801ac3e: 48 f2 77 70                  	movw	r0, #34679
 801ac42: c0 f6 01 00                  	movt	r0, #2049
;         for attribute_data in self.attribute_data_iter() {
 801ac46: 01 93                        	str	r3, [sp, #4]
;             write!(
 801ac48: cd e9 05 b0                  	strd	r11, r0, [sp, #20]
 801ac4c: 48 f2 23 20                  	movw	r0, #33315
 801ac50: c0 f6 01 00                  	movt	r0, #2049
;         for attribute_data in self.attribute_data_iter() {
 801ac54: 00 92                        	str	r2, [sp]
;             write!(
 801ac56: cd e9 03 90                  	strd	r9, r0, [sp, #12]
 801ac5a: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
;     if buffer.len() < 16 {
 801ac5e: 28 bf                        	it	hs
 801ac60: 10 23                        	movhs	r3, #16
;                 first_16(attribute_data.value)
 801ac62: cd e9 09 23                  	strd	r2, r3, [sp, #36]
 801ac66: 03 22                        	movs	r2, #3
 801ac68: 10 92                        	str	r2, [sp, #64]
 801ac6a: 03 aa                        	add	r2, sp, #12
 801ac6c: 0f 92                        	str	r2, [sp, #60]
 801ac6e: 04 22                        	movs	r2, #4
 801ac70: cd e9 0d aa                  	strd	r10, r10, [sp, #52]
 801ac74: 0c 92                        	str	r2, [sp, #48]
 801ac76: 4f f2 4c 52                  	movw	r2, #62796
 801ac7a: c0 f6 01 02                  	movt	r2, #2049
 801ac7e: 0b 92                        	str	r2, [sp, #44]
 801ac80: 42 46                        	mov	r2, r8
 801ac82: fb f7 ff fa                  	bl	#-18946
;             )?;
 801ac86: 00 28                        	cmp	r0, #0
 801ac88: 30 46                        	mov	r0, r6
 801ac8a: ae d0                        	beq	#-164 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc171e77b7b525251E+0x5e>
 801ac8c: 01 26                        	movs	r6, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801ac8e: 30 46                        	mov	r0, r6
 801ac90: 11 b0                        	add	sp, #68
 801ac92: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 801ac96: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 801ac98: 4e f6 b4 43                  	movw	r3, #60596
 801ac9c: 00 22                        	movs	r2, #0
 801ac9e: c0 f6 01 03                  	movt	r3, #2049
 801aca2: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 801aca6: 10 92                        	str	r2, [sp, #64]
 801aca8: 0f 93                        	str	r3, [sp, #60]
 801acaa: cd e9 0d 22                  	strd	r2, r2, [sp, #52]
 801acae: 01 22                        	movs	r2, #1
 801acb0: 0c 92                        	str	r2, [sp, #48]
 801acb2: 4e f6 bc 42                  	movw	r2, #60604
 801acb6: c0 f6 01 02                  	movt	r2, #2049
 801acba: 0b 92                        	str	r2, [sp, #44]
 801acbc: 0b aa                        	add	r2, sp, #44
 801acbe: fb f7 e1 fa                  	bl	#-19006
 801acc2: 06 46                        	mov	r6, r0
 801acc4: 30 46                        	mov	r0, r6
 801acc6: 11 b0                        	add	sp, #68
 801acc8: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 801accc: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 801acce: 4c f6 64 30                  	movw	r0, #52068
 801acd2: 20 21                        	movs	r1, #32
 801acd4: c0 f6 01 00                  	movt	r0, #2049
 801acd8: fb f7 be fb                  	bl	#-18564
 801acdc: fe de                        	trap
;             slice_index_order_fail(self.start, self.end);
 801acde: 08 46                        	mov	r0, r1
 801ace0: 05 e0                        	b	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc171e77b7b525251E+0x162>
 801ace2: 10 46                        	mov	r0, r2
 801ace4: 31 46                        	mov	r1, r6
 801ace6: fb f7 96 f8                  	bl	#-20180
 801acea: fe de                        	trap
;             slice_index_len_fail(self.end, slice.len());
 801acec: 30 46                        	mov	r0, r6
 801acee: f9 21                        	movs	r1, #249
 801acf0: fb f7 91 f8                  	bl	#-20190
 801acf4: fe de                        	trap

0801acf6 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h0dd49187ef38e017:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801acf6: 80 b5                        	push	{r7, lr}
 801acf8: 6f 46                        	mov	r7, sp
 801acfa: 8c b0                        	sub	sp, #48
 801acfc: 02 68                        	ldr	r2, [r0]
;         &self.value_buf[..self.value_len]
 801acfe: 10 68                        	ldr	r0, [r2]
;         } else if self.end > slice.len() {
 801ad00: fb 28                        	cmp	r0, #251
 801ad02: 29 d2                        	bhs	#82 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h0dd49187ef38e017E+0x66>
;         write!(
 801ad04: 48 f2 bb 23                  	movw	r3, #33467
;     if buffer.len() < 16 {
 801ad08: 10 28                        	cmp	r0, #16
;         write!(
 801ad0a: c0 f6 01 03                  	movt	r3, #2049
 801ad0e: 03 93                        	str	r3, [sp, #12]
 801ad10: 04 ab                        	add	r3, sp, #16
 801ad12: 02 93                        	str	r3, [sp, #8]
 801ad14: 45 f6 b5 03                  	movw	r3, #22709
 801ad18: c0 f6 01 03                  	movt	r3, #2049
 801ad1c: 01 93                        	str	r3, [sp, #4]
 801ad1e: d1 e9 06 31                  	ldrd	r3, r1, [r1, #24]
;     if buffer.len() < 16 {
 801ad22: 28 bf                        	it	hs
 801ad24: 10 20                        	movhs	r0, #16
;             first_16(self.value())
 801ad26: 05 90                        	str	r0, [sp, #20]
;         &self.value_buf[..self.value_len]
 801ad28: 90 1d                        	adds	r0, r2, #6
;             first_16(self.value())
 801ad2a: 04 90                        	str	r0, [sp, #16]
;             self.conn_handle,
 801ad2c: 10 1d                        	adds	r0, r2, #4
;         write!(
 801ad2e: 00 90                        	str	r0, [sp]
 801ad30: 02 20                        	movs	r0, #2
 801ad32: 0b 90                        	str	r0, [sp, #44]
 801ad34: 68 46                        	mov	r0, sp
 801ad36: 0a 90                        	str	r0, [sp, #40]
 801ad38: 00 20                        	movs	r0, #0
 801ad3a: cd e9 08 00                  	strd	r0, r0, [sp, #32]
 801ad3e: 03 20                        	movs	r0, #3
 801ad40: 07 90                        	str	r0, [sp, #28]
 801ad42: 4f f2 28 50                  	movw	r0, #62760
 801ad46: c0 f6 01 00                  	movt	r0, #2049
 801ad4a: 06 aa                        	add	r2, sp, #24
 801ad4c: 06 90                        	str	r0, [sp, #24]
 801ad4e: 18 46                        	mov	r0, r3
 801ad50: fb f7 98 fa                  	bl	#-19152
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801ad54: 0c b0                        	add	sp, #48
 801ad56: 80 bd                        	pop	{r7, pc}
;             slice_index_len_fail(self.end, slice.len());
 801ad58: fa 21                        	movs	r1, #250
 801ad5a: fb f7 5c f8                  	bl	#-20296
 801ad5e: fe de                        	trap

0801ad60 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h763d175dcac57e01:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801ad60: f0 b5                        	push	{r4, r5, r6, r7, lr}
 801ad62: 03 af                        	add	r7, sp, #12
 801ad64: 2d e9 00 0f                  	push.w	{r8, r9, r10, r11}
 801ad68: 8f b0                        	sub	sp, #60
;         write!(f, "{{.conn_handle = {:?}, ", self.conn_handle)?;
 801ad6a: 45 f6 b5 02                  	movw	r2, #22709
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801ad6e: 05 68                        	ldr	r5, [r0]
;         write!(f, "{{.conn_handle = {:?}, ", self.conn_handle)?;
 801ad70: c0 f6 01 02                  	movt	r2, #2049
 801ad74: 0c 46                        	mov	r4, r1
 801ad76: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 801ad7a: 01 26                        	movs	r6, #1
 801ad7c: 04 92                        	str	r2, [sp, #16]
 801ad7e: 05 f1 08 02                  	add.w	r2, r5, #8
 801ad82: 03 92                        	str	r2, [sp, #12]
 801ad84: 03 aa                        	add	r2, sp, #12
 801ad86: 0d 92                        	str	r2, [sp, #52]
 801ad88: 4f f0 00 0a                  	mov.w	r10, #0
 801ad8c: 02 22                        	movs	r2, #2
 801ad8e: 0e 96                        	str	r6, [sp, #56]
 801ad90: cd e9 0b aa                  	strd	r10, r10, [sp, #44]
 801ad94: 0a 92                        	str	r2, [sp, #40]
 801ad96: 4f f2 90 42                  	movw	r2, #62608
 801ad9a: c0 f6 01 02                  	movt	r2, #2049
 801ad9e: 09 92                        	str	r2, [sp, #36]
 801ada0: 09 aa                        	add	r2, sp, #36
 801ada2: fb f7 6f fa                  	bl	#-19234
 801ada6: 00 28                        	cmp	r0, #0
 801ada8: 44 d1                        	bne	#136 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h763d175dcac57e01E+0xd8>
 801adaa: 4f f2 fc 4b                  	movw	r11, #62716
 801adae: 68 46                        	mov	r0, sp
 801adb0: 00 f1 08 09                  	add.w	r9, r0, #8
 801adb4: 0d f1 24 08                  	add.w	r8, sp, #36
 801adb8: c0 f6 01 0b                  	movt	r11, #2049
 801adbc: 00 21                        	movs	r1, #0
;         if self.index >= self.event.data_len {
 801adbe: 28 68                        	ldr	r0, [r5]
 801adc0: 81 42                        	cmp	r1, r0
 801adc2: 3c d2                        	bhs	#120 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h763d175dcac57e01E+0xe2>
;         assert!($size <= $src.len());
 801adc4: f8 29                        	cmp	r1, #248
 801adc6: 55 d2                        	bhs	#170 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h763d175dcac57e01E+0x118>
 801adc8: 6a 68                        	ldr	r2, [r5, #4]
 801adca: 88 1c                        	adds	r0, r1, #2
 801adcc: 16 18                        	adds	r6, r2, r0
;         if self.start > self.end {
 801adce: 86 42                        	cmp	r6, r0
 801add0: 58 d3                        	blo	#176 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h763d175dcac57e01E+0x128>
;         } else if self.end > slice.len() {
 801add2: f9 2e                        	cmp	r6, #249
 801add4: 5a d8                        	bhi	#180 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h763d175dcac57e01E+0x130>
;         intrinsics::offset(self, count)
 801add6: 28 44                        	add	r0, r5
 801add8: 29 44                        	add	r1, r5
 801adda: 00 f1 0a 03                  	add.w	r3, r0, #10
;             write!(
 801adde: 48 f2 bb 20                  	movw	r0, #33467
 801ade2: c0 f6 01 00                  	movt	r0, #2049
 801ade6: 49 89                        	ldrh	r1, [r1, #10]
 801ade8: 06 90                        	str	r0, [sp, #24]
 801adea: 07 a8                        	add	r0, sp, #28
 801adec: 05 90                        	str	r0, [sp, #20]
 801adee: 48 f2 23 20                  	movw	r0, #33315
 801adf2: c0 f6 01 00                  	movt	r0, #2049
;         for handle_value_pair in self.handle_value_pair_iter() {
 801adf6: ad f8 0a a0                  	strh.w	r10, [sp, #10]
 801adfa: ad f8 08 10                  	strh.w	r1, [sp, #8]
;     if buffer.len() < 16 {
 801adfe: 10 2a                        	cmp	r2, #16
;         for handle_value_pair in self.handle_value_pair_iter() {
 801ae00: 01 92                        	str	r2, [sp, #4]
 801ae02: 00 93                        	str	r3, [sp]
;             write!(
 801ae04: cd e9 03 90                  	strd	r9, r0, [sp, #12]
 801ae08: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
;     if buffer.len() < 16 {
 801ae0c: 28 bf                        	it	hs
 801ae0e: 10 22                        	movhs	r2, #16
;                 first_16(handle_value_pair.value)
 801ae10: cd e9 07 32                  	strd	r3, r2, [sp, #28]
 801ae14: 02 22                        	movs	r2, #2
 801ae16: 0e 92                        	str	r2, [sp, #56]
 801ae18: 03 aa                        	add	r2, sp, #12
 801ae1a: 0d 92                        	str	r2, [sp, #52]
 801ae1c: 03 22                        	movs	r2, #3
 801ae1e: cd e9 0b aa                  	strd	r10, r10, [sp, #44]
 801ae22: cd e9 09 b2                  	strd	r11, r2, [sp, #36]
 801ae26: 42 46                        	mov	r2, r8
 801ae28: fb f7 2c fa                  	bl	#-19368
;             )?;
 801ae2c: 00 28                        	cmp	r0, #0
 801ae2e: 31 46                        	mov	r1, r6
 801ae30: c5 d0                        	beq	#-118 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h763d175dcac57e01E+0x62>
 801ae32: 01 26                        	movs	r6, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801ae34: 30 46                        	mov	r0, r6
 801ae36: 0f b0                        	add	sp, #60
 801ae38: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 801ae3c: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 801ae3e: 4e f6 b4 43                  	movw	r3, #60596
 801ae42: 00 22                        	movs	r2, #0
 801ae44: c0 f6 01 03                  	movt	r3, #2049
 801ae48: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 801ae4c: 0e 92                        	str	r2, [sp, #56]
 801ae4e: 0d 93                        	str	r3, [sp, #52]
 801ae50: cd e9 0b 22                  	strd	r2, r2, [sp, #44]
 801ae54: 01 22                        	movs	r2, #1
 801ae56: 0a 92                        	str	r2, [sp, #40]
 801ae58: 4e f6 bc 42                  	movw	r2, #60604
 801ae5c: c0 f6 01 02                  	movt	r2, #2049
 801ae60: 09 92                        	str	r2, [sp, #36]
 801ae62: 09 aa                        	add	r2, sp, #36
 801ae64: fb f7 0e fa                  	bl	#-19428
 801ae68: 06 46                        	mov	r6, r0
 801ae6a: 30 46                        	mov	r0, r6
 801ae6c: 0f b0                        	add	sp, #60
 801ae6e: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 801ae72: f0 bd                        	pop	{r4, r5, r6, r7, pc}
;         $crate::panicking::panic($msg)
 801ae74: 4c f6 64 30                  	movw	r0, #52068
 801ae78: 20 21                        	movs	r1, #32
 801ae7a: c0 f6 01 00                  	movt	r0, #2049
 801ae7e: fb f7 eb fa                  	bl	#-18986
 801ae82: fe de                        	trap
;             slice_index_order_fail(self.start, self.end);
 801ae84: 31 46                        	mov	r1, r6
 801ae86: fa f7 c6 ff                  	bl	#-20596
 801ae8a: fe de                        	trap
;             slice_index_len_fail(self.end, slice.len());
 801ae8c: 30 46                        	mov	r0, r6
 801ae8e: f9 21                        	movs	r1, #249
 801ae90: fa f7 c1 ff                  	bl	#-20606
 801ae94: fe de                        	trap

0801ae96 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h3f299e41e59da136:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801ae96: f0 b5                        	push	{r4, r5, r6, r7, lr}
 801ae98: 03 af                        	add	r7, sp, #12
 801ae9a: 2d e9 00 0f                  	push.w	{r8, r9, r10, r11}
 801ae9e: 89 b0                        	sub	sp, #36
;         write!(f, "{{.conn_handle = {:?}, ", self.conn_handle)?;
 801aea0: 45 f6 b5 02                  	movw	r2, #22709
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801aea4: 06 68                        	ldr	r6, [r0]
;         write!(f, "{{.conn_handle = {:?}, ", self.conn_handle)?;
 801aea6: c0 f6 01 02                  	movt	r2, #2049
 801aeaa: 0c 46                        	mov	r4, r1
 801aeac: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 801aeb0: 01 25                        	movs	r5, #1
 801aeb2: 02 92                        	str	r2, [sp, #8]
 801aeb4: 32 1d                        	adds	r2, r6, #4
 801aeb6: 01 92                        	str	r2, [sp, #4]
 801aeb8: 01 aa                        	add	r2, sp, #4
 801aeba: 07 92                        	str	r2, [sp, #28]
 801aebc: 4f f0 00 0a                  	mov.w	r10, #0
 801aec0: 02 22                        	movs	r2, #2
 801aec2: 08 95                        	str	r5, [sp, #32]
 801aec4: cd e9 05 aa                  	strd	r10, r10, [sp, #20]
 801aec8: 04 92                        	str	r2, [sp, #16]
 801aeca: 4f f2 90 42                  	movw	r2, #62608
 801aece: c0 f6 01 02                  	movt	r2, #2049
 801aed2: 03 92                        	str	r2, [sp, #12]
 801aed4: 03 aa                        	add	r2, sp, #12
 801aed6: fb f7 d5 f9                  	bl	#-19542
 801aeda: 50 bb                        	cbnz	r0, #84
 801aedc: 4f f2 a0 4b                  	movw	r11, #62624
 801aee0: 0d f1 0c 08                  	add.w	r8, sp, #12
 801aee4: c0 f6 01 0b                  	movt	r11, #2049
 801aee8: 4f f0 00 09                  	mov.w	r9, #0
 801aeec: 01 25                        	movs	r5, #1
;         if self.next_index >= self.event.handle_pair_count {
 801aeee: 30 68                        	ldr	r0, [r6]
 801aef0: 81 45                        	cmp	r9, r0
 801aef2: 23 d2                        	bhs	#70 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3f299e41e59da136E+0xaa>
;         Some(self.event.handles[index])
 801aef4: b9 f1 3e 0f                  	cmp.w	r9, #62
 801aef8: 3b d0                        	beq	#118 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3f299e41e59da136E+0xe0>
 801aefa: 06 eb 89 00                  	add.w	r0, r6, r9, lsl #2
;             write!(f, "{:?}", handle_pair)?;
 801aefe: 48 f2 9f 52                  	movw	r2, #34207
 801af02: c0 f6 01 02                  	movt	r2, #2049
;         Some(self.event.handles[index])
 801af06: d0 f8 06 00                  	ldr.w	r0, [r0, #6]
;         for handle_pair in self.handle_pairs_iter() {
 801af0a: 00 90                        	str	r0, [sp]
 801af0c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
;             write!(f, "{:?}", handle_pair)?;
 801af10: 02 92                        	str	r2, [sp, #8]
 801af12: 6a 46                        	mov	r2, sp
 801af14: 01 92                        	str	r2, [sp, #4]
 801af16: 01 aa                        	add	r2, sp, #4
 801af18: 07 92                        	str	r2, [sp, #28]
 801af1a: 42 46                        	mov	r2, r8
 801af1c: 08 95                        	str	r5, [sp, #32]
 801af1e: cd e9 05 aa                  	strd	r10, r10, [sp, #20]
 801af22: cd e9 03 b5                  	strd	r11, r5, [sp, #12]
 801af26: fb f7 ad f9                  	bl	#-19622
;         self.next_index += 1;
 801af2a: 09 f1 01 09                  	add.w	r9, r9, #1
;             write!(f, "{:?}", handle_pair)?;
 801af2e: 00 28                        	cmp	r0, #0
 801af30: dd d0                        	beq	#-70 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3f299e41e59da136E+0x5c>
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801af32: 28 46                        	mov	r0, r5
 801af34: 09 b0                        	add	sp, #36
 801af36: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 801af3a: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 801af3c: 4e f6 b4 43                  	movw	r3, #60596
 801af40: 00 22                        	movs	r2, #0
 801af42: c0 f6 01 03                  	movt	r3, #2049
 801af46: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 801af4a: 08 92                        	str	r2, [sp, #32]
 801af4c: 07 93                        	str	r3, [sp, #28]
 801af4e: cd e9 05 22                  	strd	r2, r2, [sp, #20]
 801af52: 01 22                        	movs	r2, #1
 801af54: 04 92                        	str	r2, [sp, #16]
 801af56: 4e f6 bc 42                  	movw	r2, #60604
 801af5a: c0 f6 01 02                  	movt	r2, #2049
 801af5e: 03 92                        	str	r2, [sp, #12]
 801af60: 03 aa                        	add	r2, sp, #12
 801af62: fb f7 8f f9                  	bl	#-19682
 801af66: 05 46                        	mov	r5, r0
 801af68: 28 46                        	mov	r0, r5
 801af6a: 09 b0                        	add	sp, #36
 801af6c: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 801af70: f0 bd                        	pop	{r4, r5, r6, r7, pc}
;         Some(self.event.handles[index])
 801af72: 3e 20                        	movs	r0, #62
 801af74: 3e 21                        	movs	r1, #62
 801af76: fa f7 4e ff                  	bl	#-20836
 801af7a: fe de                        	trap

0801af7c _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h0f483b88d2a577da:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801af7c: b0 b5                        	push	{r4, r5, r7, lr}
 801af7e: 02 af                        	add	r7, sp, #8
 801af80: 84 b0                        	sub	sp, #16
 801af82: 0c 46                        	mov	r4, r1
 801af84: 05 68                        	ldr	r5, [r0]
 801af86: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 801af8a: 1a 22                        	movs	r2, #26
 801af8c: cb 68                        	ldr	r3, [r1, #12]
 801af8e: 40 f2 24 01                  	movw	r1, #36
 801af92: c0 f6 02 01                  	movt	r1, #2050
 801af96: 98 47                        	blx	r3
 801af98: 8d f8 08 00                  	strb.w	r0, [sp, #8]
;     pub conn_handle: ConnectionHandle,
 801af9c: 05 f5 80 70                  	add.w	r0, r5, #256
 801afa0: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 801afa2: 4f f6 18 50                  	movw	r0, #64792
 801afa6: 00 21                        	movs	r1, #0
 801afa8: c0 f6 01 00                  	movt	r0, #2049
 801afac: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 801afb0: 4f f6 0c 51                  	movw	r1, #64780
 801afb4: 00 90                        	str	r0, [sp]
 801afb6: 01 a8                        	add	r0, sp, #4
 801afb8: 03 ab                        	add	r3, sp, #12
 801afba: c0 f6 01 01                  	movt	r1, #2049
 801afbe: 0b 22                        	movs	r2, #11
 801afc0: 01 94                        	str	r4, [sp, #4]
 801afc2: fb f7 b5 fb                  	bl	#-18582
 801afc6: 40 f6 40 01                  	movw	r1, #2112
 801afca: 03 ab                        	add	r3, sp, #12
 801afcc: c0 f6 02 01                  	movt	r1, #2050
 801afd0: 11 22                        	movs	r2, #17
 801afd2: 00 91                        	str	r1, [sp]
 801afd4: 40 f6 2c 01                  	movw	r1, #2092
 801afd8: c0 f6 02 01                  	movt	r1, #2050
;     handle_uuid_pairs: HandleUuidPairs,
 801afdc: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 801afde: fb f7 a7 fb                  	bl	#-18610
 801afe2: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 801afe6: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 801afea: b9 b1                        	cbz	r1, #46
 801afec: 08 b1                        	cbz	r0, #2
 801afee: 01 20                        	movs	r0, #1
 801aff0: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h0f483b88d2a577daE+0xa0>
 801aff2: 01 99                        	ldr	r1, [sp, #4]
 801aff4: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801aff8: 09 78                        	ldrb	r1, [r1]
 801affa: d3 68                        	ldr	r3, [r2, #12]
 801affc: 49 07                        	lsls	r1, r1, #29
 801affe: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h0f483b88d2a577daE+0x94>
 801b000: 4e f6 1c 41                  	movw	r1, #60444
 801b004: 02 22                        	movs	r2, #2
 801b006: c0 f6 01 01                  	movt	r1, #2049
 801b00a: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h0f483b88d2a577daE+0x9e>
 801b00c: 4e f6 d6 41                  	movw	r1, #60630
 801b010: 01 22                        	movs	r2, #1
 801b012: c0 f6 01 01                  	movt	r1, #2049
 801b016: 98 47                        	blx	r3
 801b018: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 801b01c: 00 28                        	cmp	r0, #0
 801b01e: 18 bf                        	it	ne
 801b020: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801b022: 04 b0                        	add	sp, #16
 801b024: b0 bd                        	pop	{r4, r5, r7, pc}

0801b026 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h0efe591acb3d5116:
 801b026: f0 b5                        	push	{r4, r5, r6, r7, lr}
 801b028: 03 af                        	add	r7, sp, #12
 801b02a: 2d e9 00 0f                  	push.w	{r8, r9, r10, r11}
 801b02e: c9 b0                        	sub	sp, #292
 801b030: 4e f6 b4 42                  	movw	r2, #60596
 801b034: 0c 46                        	mov	r4, r1
 801b036: 06 68                        	ldr	r6, [r0]
 801b038: 00 20                        	movs	r0, #0
 801b03a: d1 e9 06 31                  	ldrd	r3, r1, [r1, #24]
 801b03e: c0 f6 01 02                  	movt	r2, #2049
 801b042: 05 92                        	str	r2, [sp, #20]
 801b044: 01 aa                        	add	r2, sp, #4
 801b046: 06 90                        	str	r0, [sp, #24]
 801b048: 01 25                        	movs	r5, #1
 801b04a: cd e9 03 00                  	strd	r0, r0, [sp, #12]
 801b04e: 4e f6 b4 40                  	movw	r0, #60596
 801b052: c0 f6 01 00                  	movt	r0, #2049
 801b056: 02 95                        	str	r5, [sp, #8]
 801b058: 01 90                        	str	r0, [sp, #4]
 801b05a: 18 46                        	mov	r0, r3
 801b05c: fb f7 12 f9                  	bl	#-19932
;         write!(f, "{{")?;
 801b060: d8 bb                        	cbnz	r0, #118
;             HandleUuidPairs::Format16(count, pairs) => {
 801b062: 30 88                        	ldrh	r0, [r6]
 801b064: 01 28                        	cmp	r0, #1
 801b066: 3d d1                        	bne	#122 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h0efe591acb3d5116E+0xc2>
;             HandleUuidPairs::Format128(count, pairs) => {
 801b068: b1 1c                        	adds	r1, r6, #2
 801b06a: 01 a8                        	add	r0, sp, #4
 801b06c: ea 22                        	movs	r2, #234
 801b06e: d6 f8 ec 50                  	ldr.w	r5, [r6, #236]
 801b072: 01 f0 52 f9                  	bl	#4772
;         } else if self.end > slice.len() {
 801b076: 0e 2d                        	cmp	r5, #14
 801b078: 80 f0 89 80                  	bhs.w	#274 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h0efe591acb3d5116E+0x16c>
;                 for handle_uuid_pair in &pairs[..count] {
 801b07c: 05 eb c5 00                  	add.w	r0, r5, r5, lsl #3
 801b080: 4f f2 58 4a                  	movw	r10, #62552
 801b084: 01 ad                        	add	r5, sp, #4
 801b086: 0d f5 86 79                  	add.w	r9, sp, #268
 801b08a: 46 00                        	lsls	r6, r0, #1
 801b08c: 4f f0 00 0b                  	mov.w	r11, #0
 801b090: 4f f0 03 08                  	mov.w	r8, #3
 801b094: c0 f6 01 0a                  	movt	r10, #2049
;                     if is_empty!(self) {
 801b098: 00 2e                        	cmp	r6, #0
 801b09a: 5d d0                        	beq	#186 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h0efe591acb3d5116E+0x136>
;                     write!(
 801b09c: 48 f2 cd 32                  	movw	r2, #33741
 801b0a0: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 801b0a4: c0 f6 01 02                  	movt	r2, #2049
 801b0a8: 42 92                        	str	r2, [sp, #264]
;                         handle_uuid_pair.handle, handle_uuid_pair.uuid
 801b0aa: aa 1c                        	adds	r2, r5, #2
;                     write!(
 801b0ac: 41 92                        	str	r2, [sp, #260]
 801b0ae: 48 f2 23 22                  	movw	r2, #33315
 801b0b2: c0 f6 01 02                  	movt	r2, #2049
 801b0b6: cd e9 3f 52                  	strd	r5, r2, [sp, #252]
 801b0ba: 02 22                        	movs	r2, #2
 801b0bc: 48 92                        	str	r2, [sp, #288]
 801b0be: 3f aa                        	add	r2, sp, #252
 801b0c0: 47 92                        	str	r2, [sp, #284]
 801b0c2: 4a 46                        	mov	r2, r9
 801b0c4: cd e9 45 bb                  	strd	r11, r11, [sp, #276]
 801b0c8: cd e9 43 a8                  	strd	r10, r8, [sp, #268]
 801b0cc: fb f7 da f8                  	bl	#-20044
;                     )?
 801b0d0: 12 3e                        	subs	r6, #18
;         NonNull { pointer: ptr as _ }
 801b0d2: 12 35                        	adds	r5, #18
;                     )?
 801b0d4: 00 28                        	cmp	r0, #0
 801b0d6: df d0                        	beq	#-66 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h0efe591acb3d5116E+0x76>
 801b0d8: 01 25                        	movs	r5, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801b0da: 28 46                        	mov	r0, r5
 801b0dc: 49 b0                        	add	sp, #292
 801b0de: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 801b0e2: f0 bd                        	pop	{r4, r5, r6, r7, pc}
;             HandleUuidPairs::Format16(count, pairs) => {
 801b0e4: b1 1c                        	adds	r1, r6, #2
 801b0e6: 01 a8                        	add	r0, sp, #4
 801b0e8: f8 22                        	movs	r2, #248
 801b0ea: d6 f8 fc 50                  	ldr.w	r5, [r6, #252]
 801b0ee: 01 f0 14 f9                  	bl	#4648
;         } else if self.end > slice.len() {
 801b0f2: 3f 2d                        	cmp	r5, #63
 801b0f4: 50 d2                        	bhs	#160 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h0efe591acb3d5116E+0x176>
 801b0f6: 4f f2 58 4a                  	movw	r10, #62552
;                 for handle_uuid_pair in &pairs[..count] {
 801b0fa: ae 00                        	lsls	r6, r5, #2
 801b0fc: 01 ad                        	add	r5, sp, #4
 801b0fe: 0d f5 86 79                  	add.w	r9, sp, #268
 801b102: 4f f0 00 0b                  	mov.w	r11, #0
 801b106: 4f f0 03 08                  	mov.w	r8, #3
 801b10a: c0 f6 01 0a                  	movt	r10, #2049
;                     if is_empty!(self) {
 801b10e: 1e b3                        	cbz	r6, #70
;                     write!(
 801b110: 48 f2 35 32                  	movw	r2, #33589
 801b114: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 801b118: c0 f6 01 02                  	movt	r2, #2049
 801b11c: 42 92                        	str	r2, [sp, #264]
;                         handle_uuid_pair.handle, handle_uuid_pair.uuid
 801b11e: aa 1c                        	adds	r2, r5, #2
;                     write!(
 801b120: 41 92                        	str	r2, [sp, #260]
 801b122: 48 f2 23 22                  	movw	r2, #33315
 801b126: c0 f6 01 02                  	movt	r2, #2049
 801b12a: cd e9 3f 52                  	strd	r5, r2, [sp, #252]
 801b12e: 02 22                        	movs	r2, #2
 801b130: 48 92                        	str	r2, [sp, #288]
 801b132: 3f aa                        	add	r2, sp, #252
 801b134: 47 92                        	str	r2, [sp, #284]
 801b136: 4a 46                        	mov	r2, r9
 801b138: cd e9 45 bb                  	strd	r11, r11, [sp, #276]
 801b13c: cd e9 43 a8                  	strd	r10, r8, [sp, #268]
 801b140: fb f7 a0 f8                  	bl	#-20160
;                     )?
 801b144: 04 3e                        	subs	r6, #4
;         NonNull { pointer: ptr as _ }
 801b146: 04 35                        	adds	r5, #4
;                     )?
 801b148: 00 28                        	cmp	r0, #0
 801b14a: e0 d0                        	beq	#-64 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h0efe591acb3d5116E+0xec>
 801b14c: 01 25                        	movs	r5, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801b14e: 28 46                        	mov	r0, r5
 801b150: 49 b0                        	add	sp, #292
 801b152: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 801b156: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 801b158: 4e f6 b4 43                  	movw	r3, #60596
 801b15c: 00 22                        	movs	r2, #0
 801b15e: c0 f6 01 03                  	movt	r3, #2049
 801b162: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 801b166: 06 92                        	str	r2, [sp, #24]
 801b168: 05 93                        	str	r3, [sp, #20]
 801b16a: cd e9 03 22                  	strd	r2, r2, [sp, #12]
 801b16e: 01 22                        	movs	r2, #1
 801b170: 02 92                        	str	r2, [sp, #8]
 801b172: 4e f6 bc 42                  	movw	r2, #60604
 801b176: c0 f6 01 02                  	movt	r2, #2049
 801b17a: 01 92                        	str	r2, [sp, #4]
 801b17c: 01 aa                        	add	r2, sp, #4
 801b17e: fb f7 81 f8                  	bl	#-20222
 801b182: 05 46                        	mov	r5, r0
 801b184: 28 46                        	mov	r0, r5
 801b186: 49 b0                        	add	sp, #292
 801b188: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 801b18c: f0 bd                        	pop	{r4, r5, r6, r7, pc}
;             slice_index_len_fail(self.end, slice.len());
 801b18e: 28 46                        	mov	r0, r5
 801b190: 0d 21                        	movs	r1, #13
 801b192: fa f7 40 fe                  	bl	#-21376
 801b196: fe de                        	trap
 801b198: 28 46                        	mov	r0, r5
 801b19a: 3e 21                        	movs	r1, #62
 801b19c: fa f7 3b fe                  	bl	#-21386
 801b1a0: fe de                        	trap

0801b1a2 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h64e0f1fd97e9d237:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801b1a2: b0 b5                        	push	{r4, r5, r7, lr}
 801b1a4: 02 af                        	add	r7, sp, #8
 801b1a6: 84 b0                        	sub	sp, #16
 801b1a8: 0c 46                        	mov	r4, r1
 801b1aa: 05 68                        	ldr	r5, [r0]
 801b1ac: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 801b1b0: 16 22                        	movs	r2, #22
 801b1b2: cb 68                        	ldr	r3, [r1, #12]
 801b1b4: 4f f6 fc 71                  	movw	r1, #65532
 801b1b8: c0 f6 01 01                  	movt	r1, #2049
 801b1bc: 98 47                        	blx	r3
 801b1be: 8d f8 08 00                  	strb.w	r0, [sp, #8]
;     pub conn_handle: ConnectionHandle,
 801b1c2: 28 1d                        	adds	r0, r5, #4
 801b1c4: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 801b1c6: 4f f6 18 50                  	movw	r0, #64792
 801b1ca: 00 21                        	movs	r1, #0
 801b1cc: c0 f6 01 00                  	movt	r0, #2049
 801b1d0: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 801b1d4: 4f f6 0c 51                  	movw	r1, #64780
 801b1d8: 00 90                        	str	r0, [sp]
 801b1da: 01 a8                        	add	r0, sp, #4
 801b1dc: 03 ab                        	add	r3, sp, #12
 801b1de: c0 f6 01 01                  	movt	r1, #2049
 801b1e2: 0b 22                        	movs	r2, #11
 801b1e4: 01 94                        	str	r4, [sp, #4]
 801b1e6: fb f7 a3 fa                  	bl	#-19130
 801b1ea: 40 f2 20 21                  	movw	r1, #544
 801b1ee: 03 ab                        	add	r3, sp, #12
 801b1f0: c0 f6 02 01                  	movt	r1, #2050
 801b1f4: 0d 22                        	movs	r2, #13
 801b1f6: 00 91                        	str	r1, [sp]
 801b1f8: 40 f6 50 01                  	movw	r1, #2128
 801b1fc: c0 f6 02 01                  	movt	r1, #2050
;     pub server_rx_mtu: usize,
 801b200: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 801b202: fb f7 95 fa                  	bl	#-19158
 801b206: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 801b20a: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 801b20e: b9 b1                        	cbz	r1, #46
 801b210: 08 b1                        	cbz	r0, #2
 801b212: 01 20                        	movs	r0, #1
 801b214: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h64e0f1fd97e9d237E+0x9e>
 801b216: 01 99                        	ldr	r1, [sp, #4]
 801b218: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801b21c: 09 78                        	ldrb	r1, [r1]
 801b21e: d3 68                        	ldr	r3, [r2, #12]
 801b220: 49 07                        	lsls	r1, r1, #29
 801b222: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h64e0f1fd97e9d237E+0x92>
 801b224: 4e f6 1c 41                  	movw	r1, #60444
 801b228: 02 22                        	movs	r2, #2
 801b22a: c0 f6 01 01                  	movt	r1, #2049
 801b22e: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h64e0f1fd97e9d237E+0x9c>
 801b230: 4e f6 d6 41                  	movw	r1, #60630
 801b234: 01 22                        	movs	r2, #1
 801b236: c0 f6 01 01                  	movt	r1, #2049
 801b23a: 98 47                        	blx	r3
 801b23c: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 801b240: 00 28                        	cmp	r0, #0
 801b242: 18 bf                        	it	ne
 801b244: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801b246: 04 b0                        	add	sp, #16
 801b248: b0 bd                        	pop	{r4, r5, r7, pc}

0801b24a _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h3e0aae81830037ec:
 801b24a: 80 b5                        	push	{r7, lr}
 801b24c: 6f 46                        	mov	r7, sp
 801b24e: 8e b0                        	sub	sp, #56
 801b250: 02 68                        	ldr	r2, [r0]
;         &self.data_buf[..self.data_len]
 801b252: 10 68                        	ldr	r0, [r2]
;         } else if self.end > slice.len() {
 801b254: f9 28                        	cmp	r0, #249
 801b256: 31 d2                        	bhs	#98 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3e0aae81830037ecE+0x76>
;         write!(
 801b258: 48 f2 bb 23                  	movw	r3, #33467
;     if buffer.len() < 16 {
 801b25c: 10 28                        	cmp	r0, #16
;         write!(
 801b25e: c0 f6 01 03                  	movt	r3, #2049
 801b262: 05 93                        	str	r3, [sp, #20]
 801b264: 06 ab                        	add	r3, sp, #24
 801b266: 04 93                        	str	r3, [sp, #16]
 801b268: 48 f2 23 23                  	movw	r3, #33315
 801b26c: c0 f6 01 03                  	movt	r3, #2049
 801b270: 03 93                        	str	r3, [sp, #12]
 801b272: 45 f6 b5 03                  	movw	r3, #22709
 801b276: c0 f6 01 03                  	movt	r3, #2049
 801b27a: 01 93                        	str	r3, [sp, #4]
 801b27c: d1 e9 06 31                  	ldrd	r3, r1, [r1, #24]
;     if buffer.len() < 16 {
 801b280: 28 bf                        	it	hs
 801b282: 10 20                        	movhs	r0, #16
;             first_16(self.data()),
 801b284: 07 90                        	str	r0, [sp, #28]
;         &self.data_buf[..self.data_len]
 801b286: 02 f1 08 00                  	add.w	r0, r2, #8
;             first_16(self.data()),
 801b28a: 06 90                        	str	r0, [sp, #24]
;             self.attr_handle,
 801b28c: 90 1d                        	adds	r0, r2, #6
;         write!(
 801b28e: 02 90                        	str	r0, [sp, #8]
;             self.conn_handle,
 801b290: 10 1d                        	adds	r0, r2, #4
;         write!(
 801b292: 00 90                        	str	r0, [sp]
 801b294: 03 20                        	movs	r0, #3
 801b296: 0d 90                        	str	r0, [sp, #52]
 801b298: 68 46                        	mov	r0, sp
 801b29a: 0c 90                        	str	r0, [sp, #48]
 801b29c: 00 20                        	movs	r0, #0
 801b29e: cd e9 0a 00                  	strd	r0, r0, [sp, #40]
 801b2a2: 04 20                        	movs	r0, #4
 801b2a4: 09 90                        	str	r0, [sp, #36]
 801b2a6: 4f f2 fc 30                  	movw	r0, #62460
 801b2aa: c0 f6 01 00                  	movt	r0, #2049
 801b2ae: 08 aa                        	add	r2, sp, #32
 801b2b0: 08 90                        	str	r0, [sp, #32]
 801b2b2: 18 46                        	mov	r0, r3
 801b2b4: fa f7 e6 ff                  	bl	#-20532
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801b2b8: 0e b0                        	add	sp, #56
 801b2ba: 80 bd                        	pop	{r7, pc}
;             slice_index_len_fail(self.end, slice.len());
 801b2bc: f8 21                        	movs	r1, #248
 801b2be: fa f7 aa fd                  	bl	#-21676
 801b2c2: fe de                        	trap

0801b2c4 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h498aab23b7e1bc03:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801b2c4: b0 b5                        	push	{r4, r5, r7, lr}
 801b2c6: 02 af                        	add	r7, sp, #8
 801b2c8: 84 b0                        	sub	sp, #16
 801b2ca: 0c 46                        	mov	r4, r1
 801b2cc: 05 68                        	ldr	r5, [r0]
 801b2ce: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 801b2d2: 1c 22                        	movs	r2, #28
 801b2d4: cb 68                        	ldr	r3, [r1, #12]
 801b2d6: 4f f6 91 71                  	movw	r1, #65425
 801b2da: c0 f6 01 01                  	movt	r1, #2049
 801b2de: 98 47                        	blx	r3
 801b2e0: 8d f8 08 00                  	strb.w	r0, [sp, #8]
;     pub conn_handle: ConnectionHandle,
 801b2e4: 05 f1 38 00                  	add.w	r0, r5, #56
 801b2e8: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 801b2ea: 4f f6 18 50                  	movw	r0, #64792
 801b2ee: 00 21                        	movs	r1, #0
 801b2f0: c0 f6 01 00                  	movt	r0, #2049
 801b2f4: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 801b2f8: 4f f6 0c 51                  	movw	r1, #64780
 801b2fc: 00 90                        	str	r0, [sp]
 801b2fe: 01 a8                        	add	r0, sp, #4
 801b300: 03 ab                        	add	r3, sp, #12
 801b302: c0 f6 01 01                  	movt	r1, #2049
 801b306: 0b 22                        	movs	r2, #11
 801b308: 01 94                        	str	r4, [sp, #4]
 801b30a: fb f7 11 fa                  	bl	#-19422
;     pub identifier: u8,
 801b30e: 05 f1 3a 01                  	add.w	r1, r5, #58
 801b312: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 801b314: 4f f2 ec 31                  	movw	r1, #62444
 801b318: 03 ab                        	add	r3, sp, #12
 801b31a: c0 f6 01 01                  	movt	r1, #2049
 801b31e: 0a 22                        	movs	r2, #10
 801b320: 00 91                        	str	r1, [sp]
 801b322: 40 f6 5d 01                  	movw	r1, #2141
 801b326: c0 f6 02 01                  	movt	r1, #2050
 801b32a: fb f7 01 fa                  	bl	#-19454
 801b32e: 40 f6 74 01                  	movw	r1, #2164
 801b332: 03 ab                        	add	r3, sp, #12
 801b334: c0 f6 02 01                  	movt	r1, #2050
 801b338: 0d 22                        	movs	r2, #13
 801b33a: 00 91                        	str	r1, [sp]
 801b33c: 40 f6 67 01                  	movw	r1, #2151
 801b340: c0 f6 02 01                  	movt	r1, #2050
;     pub conn_interval: ConnectionInterval,
 801b344: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 801b346: fb f7 f3 f9                  	bl	#-19482
 801b34a: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 801b34e: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 801b352: b9 b1                        	cbz	r1, #46
 801b354: 08 b1                        	cbz	r0, #2
 801b356: 01 20                        	movs	r0, #1
 801b358: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h498aab23b7e1bc03E+0xc0>
 801b35a: 01 99                        	ldr	r1, [sp, #4]
 801b35c: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801b360: 09 78                        	ldrb	r1, [r1]
 801b362: d3 68                        	ldr	r3, [r2, #12]
 801b364: 49 07                        	lsls	r1, r1, #29
 801b366: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h498aab23b7e1bc03E+0xb4>
 801b368: 4e f6 1c 41                  	movw	r1, #60444
 801b36c: 02 22                        	movs	r2, #2
 801b36e: c0 f6 01 01                  	movt	r1, #2049
 801b372: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h498aab23b7e1bc03E+0xbe>
 801b374: 4e f6 d6 41                  	movw	r1, #60630
 801b378: 01 22                        	movs	r2, #1
 801b37a: c0 f6 01 01                  	movt	r1, #2049
 801b37e: 98 47                        	blx	r3
 801b380: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 801b384: 00 28                        	cmp	r0, #0
 801b386: 18 bf                        	it	ne
 801b388: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801b38a: 04 b0                        	add	sp, #16
 801b38c: b0 bd                        	pop	{r4, r5, r7, pc}

0801b38e _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h04e675c82b028182:
 801b38e: b0 b5                        	push	{r4, r5, r7, lr}
 801b390: 02 af                        	add	r7, sp, #8
 801b392: 84 b0                        	sub	sp, #16
 801b394: 0c 46                        	mov	r4, r1
 801b396: 05 68                        	ldr	r5, [r0]
 801b398: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 801b39c: 12 22                        	movs	r2, #18
 801b39e: cb 68                        	ldr	r3, [r1, #12]
 801b3a0: 4e f6 4b 21                  	movw	r1, #59979
 801b3a4: c0 f6 01 01                  	movt	r1, #2049
 801b3a8: 98 47                        	blx	r3
 801b3aa: 8d f8 08 00                  	strb.w	r0, [sp, #8]
; #[derive(Copy, Clone, Debug)]
 801b3ae: 4e f6 dc 10                  	movw	r0, #59868
 801b3b2: 00 21                        	movs	r1, #0
 801b3b4: c0 f6 01 00                  	movt	r0, #2049
 801b3b8: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 801b3bc: 4e f6 5d 21                  	movw	r1, #59997
 801b3c0: 00 90                        	str	r0, [sp]
 801b3c2: 01 a8                        	add	r0, sp, #4
 801b3c4: 03 ab                        	add	r3, sp, #12
 801b3c6: c0 f6 01 01                  	movt	r1, #2049
 801b3ca: 09 22                        	movs	r2, #9
 801b3cc: 01 94                        	str	r4, [sp, #4]
;     interval_: (Duration, Duration),
 801b3ce: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 801b3d0: fb f7 ae f9                  	bl	#-19620
;     conn_latency_: u16,
 801b3d4: 05 f1 30 01                  	add.w	r1, r5, #48
 801b3d8: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 801b3da: 4d f6 48 41                  	movw	r1, #56392
 801b3de: 03 ab                        	add	r3, sp, #12
 801b3e0: c0 f6 01 01                  	movt	r1, #2049
 801b3e4: 0d 22                        	movs	r2, #13
 801b3e6: 00 91                        	str	r1, [sp]
 801b3e8: 4e f6 66 21                  	movw	r1, #60006
 801b3ec: c0 f6 01 01                  	movt	r1, #2049
 801b3f0: fb f7 9e f9                  	bl	#-19652
;     supervision_timeout_: Duration,
 801b3f4: 05 f1 20 01                  	add.w	r1, r5, #32
 801b3f8: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 801b3fa: 4d f6 f0 61                  	movw	r1, #57072
 801b3fe: 03 ab                        	add	r3, sp, #12
 801b400: c0 f6 01 01                  	movt	r1, #2049
 801b404: 14 22                        	movs	r2, #20
 801b406: 00 91                        	str	r1, [sp]
 801b408: 4e f6 73 21                  	movw	r1, #60019
 801b40c: c0 f6 01 01                  	movt	r1, #2049
 801b410: fb f7 8e f9                  	bl	#-19684
 801b414: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 801b418: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 801b41c: b9 b1                        	cbz	r1, #46
 801b41e: 08 b1                        	cbz	r0, #2
 801b420: 01 20                        	movs	r0, #1
 801b422: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h04e675c82b028182E+0xc0>
 801b424: 01 99                        	ldr	r1, [sp, #4]
 801b426: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801b42a: 09 78                        	ldrb	r1, [r1]
 801b42c: d3 68                        	ldr	r3, [r2, #12]
 801b42e: 49 07                        	lsls	r1, r1, #29
 801b430: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h04e675c82b028182E+0xb4>
 801b432: 4e f6 1c 41                  	movw	r1, #60444
 801b436: 02 22                        	movs	r2, #2
 801b438: c0 f6 01 01                  	movt	r1, #2049
 801b43c: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h04e675c82b028182E+0xbe>
 801b43e: 4e f6 d6 41                  	movw	r1, #60630
 801b442: 01 22                        	movs	r2, #1
 801b444: c0 f6 01 01                  	movt	r1, #2049
 801b448: 98 47                        	blx	r3
 801b44a: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 801b44e: 00 28                        	cmp	r0, #0
 801b450: 18 bf                        	it	ne
 801b452: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801b454: 04 b0                        	add	sp, #16
 801b456: b0 bd                        	pop	{r4, r5, r7, pc}

0801b458 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h374520651e6e5d7f:
 801b458: b0 b5                        	push	{r4, r5, r7, lr}
 801b45a: 02 af                        	add	r7, sp, #8
 801b45c: 84 b0                        	sub	sp, #16
 801b45e: 0c 46                        	mov	r4, r1
 801b460: 05 68                        	ldr	r5, [r0]
 801b462: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 801b466: 1d 22                        	movs	r2, #29
 801b468: cb 68                        	ldr	r3, [r1, #12]
 801b46a: 4f f6 4e 71                  	movw	r1, #65358
 801b46e: c0 f6 01 01                  	movt	r1, #2049
 801b472: 98 47                        	blx	r3
 801b474: 8d f8 08 00                  	strb.w	r0, [sp, #8]
; #[derive(Copy, Clone, Debug)]
 801b478: 4f f6 18 50                  	movw	r0, #64792
 801b47c: 00 21                        	movs	r1, #0
 801b47e: c0 f6 01 00                  	movt	r0, #2049
 801b482: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 801b486: 4f f6 0c 51                  	movw	r1, #64780
 801b48a: 00 90                        	str	r0, [sp]
 801b48c: 01 a8                        	add	r0, sp, #4
 801b48e: 03 ab                        	add	r3, sp, #12
 801b490: c0 f6 01 01                  	movt	r1, #2049
 801b494: 0b 22                        	movs	r2, #11
 801b496: 01 94                        	str	r4, [sp, #4]
;     pub conn_handle: ConnectionHandle,
 801b498: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 801b49a: fb f7 49 f9                  	bl	#-19822
;     pub result: L2CapConnectionUpdateResult,
 801b49e: a9 1c                        	adds	r1, r5, #2
 801b4a0: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 801b4a2: 40 f6 8c 01                  	movw	r1, #2188
 801b4a6: 03 ab                        	add	r3, sp, #12
 801b4a8: c0 f6 02 01                  	movt	r1, #2050
 801b4ac: 06 22                        	movs	r2, #6
 801b4ae: 00 91                        	str	r1, [sp]
 801b4b0: 40 f6 84 01                  	movw	r1, #2180
 801b4b4: c0 f6 02 01                  	movt	r1, #2050
 801b4b8: fb f7 3a f9                  	bl	#-19852
 801b4bc: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 801b4c0: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 801b4c4: b9 b1                        	cbz	r1, #46
 801b4c6: 08 b1                        	cbz	r0, #2
 801b4c8: 01 20                        	movs	r0, #1
 801b4ca: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h374520651e6e5d7fE+0x9e>
 801b4cc: 01 99                        	ldr	r1, [sp, #4]
 801b4ce: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801b4d2: 09 78                        	ldrb	r1, [r1]
 801b4d4: d3 68                        	ldr	r3, [r2, #12]
 801b4d6: 49 07                        	lsls	r1, r1, #29
 801b4d8: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h374520651e6e5d7fE+0x92>
 801b4da: 4e f6 1c 41                  	movw	r1, #60444
 801b4de: 02 22                        	movs	r2, #2
 801b4e0: c0 f6 01 01                  	movt	r1, #2049
 801b4e4: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h374520651e6e5d7fE+0x9c>
 801b4e6: 4e f6 d6 41                  	movw	r1, #60630
 801b4ea: 01 22                        	movs	r2, #1
 801b4ec: c0 f6 01 01                  	movt	r1, #2049
 801b4f0: 98 47                        	blx	r3
 801b4f2: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 801b4f6: 00 28                        	cmp	r0, #0
 801b4f8: 18 bf                        	it	ne
 801b4fa: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801b4fc: 04 b0                        	add	sp, #16
 801b4fe: b0 bd                        	pop	{r4, r5, r7, pc}

0801b500 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::hfe0c86483046d50a:
 801b500: f0 b5                        	push	{r4, r5, r6, r7, lr}
 801b502: 03 af                        	add	r7, sp, #12
 801b504: 4d f8 04 bd                  	str	r11, [sp, #-4]!
 801b508: 84 b0                        	sub	sp, #16
 801b50a: 05 68                        	ldr	r5, [r0]
 801b50c: 0c 46                        	mov	r4, r1
 801b50e: 01 22                        	movs	r2, #1
 801b510: 00 26                        	movs	r6, #0
; #[derive(Copy, Clone, Debug, PartialEq)]
 801b512: 28 78                        	ldrb	r0, [r5]
 801b514: c1 1e                        	subs	r1, r0, #3
 801b516: c8 b2                        	uxtb	r0, r1
 801b518: 02 28                        	cmp	r0, #2
 801b51a: 4f f0 00 00                  	mov.w	r0, #0
 801b51e: 38 bf                        	it	lo
 801b520: 52 fa 81 f0                  	uxtablo	r0, r2, r1
 801b524: 50 b1                        	cbz	r0, #20
 801b526: 01 28                        	cmp	r0, #1
 801b528: 29 d0                        	beq	#82 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hfe0c86483046d50aE+0x82>
 801b52a: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 801b52e: 11 22                        	movs	r2, #17
 801b530: cb 68                        	ldr	r3, [r1, #12]
 801b532: 40 f6 9c 01                  	movw	r1, #2204
 801b536: c0 f6 02 01                  	movt	r1, #2050
 801b53a: 28 e0                        	b	#80 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hfe0c86483046d50aE+0x92>
 801b53c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 801b540: 0f 22                        	movs	r2, #15
 801b542: cb 68                        	ldr	r3, [r1, #12]
 801b544: 40 f6 ad 01                  	movw	r1, #2221
 801b548: c0 f6 02 01                  	movt	r1, #2050
 801b54c: 98 47                        	blx	r3
 801b54e: 40 f6 bc 02                  	movw	r2, #2236
 801b552: 03 a9                        	add	r1, sp, #12
 801b554: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 801b558: c0 f6 02 02                  	movt	r2, #2050
 801b55c: 68 46                        	mov	r0, sp
 801b55e: 00 94                        	str	r4, [sp]
 801b560: 8d f8 09 60                  	strb.w	r6, [sp, #9]
 801b564: 01 96                        	str	r6, [sp, #4]
;     CommandRejected(L2CapRejectionReason),
 801b566: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug, PartialEq)]
 801b568: fb f7 5f fa                  	bl	#-19266
 801b56c: 01 98                        	ldr	r0, [sp, #4]
 801b56e: 9d f8 08 40                  	ldrb.w	r4, [sp, #8]
 801b572: 70 b1                        	cbz	r0, #28
 801b574: ac b1                        	cbz	r4, #42
 801b576: 01 24                        	movs	r4, #1
 801b578: 8d f8 08 40                  	strb.w	r4, [sp, #8]
 801b57c: 09 e0                        	b	#18 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hfe0c86483046d50aE+0x96>
 801b57e: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 801b582: 12 22                        	movs	r2, #18
 801b584: cb 68                        	ldr	r3, [r1, #12]
 801b586: 40 f6 cc 01                  	movw	r1, #2252
 801b58a: c0 f6 02 01                  	movt	r1, #2050
 801b58e: 98 47                        	blx	r3
 801b590: 04 46                        	mov	r4, r0
 801b592: 00 2c                        	cmp	r4, #0
 801b594: 18 bf                        	it	ne
 801b596: 01 24                        	movne	r4, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801b598: 20 46                        	mov	r0, r4
 801b59a: 04 b0                        	add	sp, #16
 801b59c: 5d f8 04 bb                  	ldr	r11, [sp], #4
 801b5a0: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 801b5a2: 01 28                        	cmp	r0, #1
 801b5a4: 11 d1                        	bne	#34 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hfe0c86483046d50aE+0xce>
 801b5a6: 9d f8 09 00                  	ldrb.w	r0, [sp, #9]
 801b5aa: 70 b1                        	cbz	r0, #28
 801b5ac: 00 99                        	ldr	r1, [sp]
 801b5ae: 08 78                        	ldrb	r0, [r1]
 801b5b0: 40 07                        	lsls	r0, r0, #29
 801b5b2: 0a d4                        	bmi	#20 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hfe0c86483046d50aE+0xce>
 801b5b4: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 801b5b8: 01 22                        	movs	r2, #1
 801b5ba: cb 68                        	ldr	r3, [r1, #12]
 801b5bc: 4e f6 21 41                  	movw	r1, #60449
 801b5c0: c0 f6 01 01                  	movt	r1, #2049
 801b5c4: 01 24                        	movs	r4, #1
 801b5c6: 98 47                        	blx	r3
 801b5c8: 50 b9                        	cbnz	r0, #20
 801b5ca: 00 99                        	ldr	r1, [sp]
 801b5cc: 01 22                        	movs	r2, #1
 801b5ce: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 801b5d2: cb 68                        	ldr	r3, [r1, #12]
 801b5d4: 4f f2 69 61                  	movw	r1, #63081
 801b5d8: c0 f6 01 01                  	movt	r1, #2049
 801b5dc: 98 47                        	blx	r3
 801b5de: 04 46                        	mov	r4, r0
 801b5e0: 8d f8 08 40                  	strb.w	r4, [sp, #8]
 801b5e4: d5 e7                        	b	#-86 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hfe0c86483046d50aE+0x96>

0801b5e6 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h172454f9de735e38:
 801b5e6: 00 68                        	ldr	r0, [r0]
; #[derive(Copy, Clone, Debug, PartialEq)]
 801b5e8: 00 78                        	ldrb	r0, [r0]
 801b5ea: 50 b1                        	cbz	r0, #20
 801b5ec: 01 28                        	cmp	r0, #1
 801b5ee: 11 d0                        	beq	#34 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h172454f9de735e38E+0x32>
 801b5f0: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801b5f4: 4f f2 49 21                  	movw	r1, #62025
 801b5f8: d3 68                        	ldr	r3, [r2, #12]
 801b5fa: c0 f6 01 01                  	movt	r1, #2049
 801b5fe: 0a 22                        	movs	r2, #10
 801b600: 18 47                        	bx	r3
 801b602: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801b606: 40 f6 de 01                  	movw	r1, #2270
 801b60a: c0 f6 02 01                  	movt	r1, #2050
 801b60e: d3 68                        	ldr	r3, [r2, #12]
 801b610: 14 22                        	movs	r2, #20
 801b612: 18 47                        	bx	r3
 801b614: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801b618: 40 f6 f2 01                  	movw	r1, #2290
 801b61c: c0 f6 02 01                  	movt	r1, #2050
 801b620: d3 68                        	ldr	r3, [r2, #12]
 801b622: 14 22                        	movs	r2, #20
 801b624: 18 47                        	bx	r3

0801b626 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::he3c0a0041fb3d4ec:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801b626: b0 b5                        	push	{r4, r5, r7, lr}
 801b628: 02 af                        	add	r7, sp, #8
 801b62a: 84 b0                        	sub	sp, #16
 801b62c: 0c 46                        	mov	r4, r1
 801b62e: 05 68                        	ldr	r5, [r0]
 801b630: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 801b634: 14 22                        	movs	r2, #20
 801b636: cb 68                        	ldr	r3, [r1, #12]
 801b638: 4f f6 14 71                  	movw	r1, #65300
 801b63c: c0 f6 01 01                  	movt	r1, #2049
 801b640: 98 47                        	blx	r3
 801b642: 8d f8 08 00                  	strb.w	r0, [sp, #8]
; #[derive(Copy, Clone, Debug)]
 801b646: 40 f6 10 10                  	movw	r0, #2320
 801b64a: 00 21                        	movs	r1, #0
 801b64c: c0 f6 02 00                  	movt	r0, #2050
 801b650: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 801b654: 40 f6 06 11                  	movw	r1, #2310
 801b658: 00 90                        	str	r0, [sp]
 801b65a: 01 a8                        	add	r0, sp, #4
 801b65c: 03 ab                        	add	r3, sp, #12
 801b65e: c0 f6 02 01                  	movt	r1, #2050
 801b662: 09 22                        	movs	r2, #9
 801b664: 01 94                        	str	r4, [sp, #4]
;     pub procedure: GapProcedure,
 801b666: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 801b668: fb f7 62 f8                  	bl	#-20284
;     pub status: GapProcedureStatus,
 801b66c: 05 f5 80 71                  	add.w	r1, r5, #256
 801b670: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 801b672: 40 f6 20 11                  	movw	r1, #2336
 801b676: 03 ab                        	add	r3, sp, #12
 801b678: c0 f6 02 01                  	movt	r1, #2050
 801b67c: 06 22                        	movs	r2, #6
 801b67e: 00 91                        	str	r1, [sp]
 801b680: 4f f6 60 31                  	movw	r1, #64352
 801b684: c0 f6 01 01                  	movt	r1, #2049
 801b688: fb f7 52 f8                  	bl	#-20316
 801b68c: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 801b690: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 801b694: b9 b1                        	cbz	r1, #46
 801b696: 08 b1                        	cbz	r0, #2
 801b698: 01 20                        	movs	r0, #1
 801b69a: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he3c0a0041fb3d4ecE+0xa0>
 801b69c: 01 99                        	ldr	r1, [sp, #4]
 801b69e: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801b6a2: 09 78                        	ldrb	r1, [r1]
 801b6a4: d3 68                        	ldr	r3, [r2, #12]
 801b6a6: 49 07                        	lsls	r1, r1, #29
 801b6a8: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he3c0a0041fb3d4ecE+0x94>
 801b6aa: 4e f6 1c 41                  	movw	r1, #60444
 801b6ae: 02 22                        	movs	r2, #2
 801b6b0: c0 f6 01 01                  	movt	r1, #2049
 801b6b4: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he3c0a0041fb3d4ecE+0x9e>
 801b6b6: 4e f6 d6 41                  	movw	r1, #60630
 801b6ba: 01 22                        	movs	r2, #1
 801b6bc: c0 f6 01 01                  	movt	r1, #2049
 801b6c0: 98 47                        	blx	r3
 801b6c2: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 801b6c6: 00 28                        	cmp	r0, #0
 801b6c8: 18 bf                        	it	ne
 801b6ca: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801b6cc: 04 b0                        	add	sp, #16
 801b6ce: b0 bd                        	pop	{r4, r5, r7, pc}

0801b6d0 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::he60d77ce871c6ab0:
 801b6d0: 00 68                        	ldr	r0, [r0]
; #[derive(Copy, Clone, Debug, PartialEq)]
 801b6d2: 00 78                        	ldrb	r0, [r0]
 801b6d4: 50 b1                        	cbz	r0, #20
 801b6d6: 01 28                        	cmp	r0, #1
 801b6d8: 11 d0                        	beq	#34 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he60d77ce871c6ab0E+0x32>
 801b6da: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801b6de: 4e f6 56 51                  	movw	r1, #60758
 801b6e2: d3 68                        	ldr	r3, [r2, #12]
 801b6e4: c0 f6 01 01                  	movt	r1, #2049
 801b6e8: 0b 22                        	movs	r2, #11
 801b6ea: 18 47                        	bx	r3
 801b6ec: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801b6f0: 4e f6 14 51                  	movw	r1, #60692
 801b6f4: d3 68                        	ldr	r3, [r2, #12]
 801b6f6: c0 f6 01 01                  	movt	r1, #2049
 801b6fa: 07 22                        	movs	r2, #7
 801b6fc: 18 47                        	bx	r3
 801b6fe: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801b702: 4f f2 13 21                  	movw	r1, #61971
 801b706: d3 68                        	ldr	r3, [r2, #12]
 801b708: c0 f6 01 01                  	movt	r1, #2049
 801b70c: 06 22                        	movs	r2, #6
 801b70e: 18 47                        	bx	r3

0801b710 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::he15972e728d1f588:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801b710: b0 b5                        	push	{r4, r5, r7, lr}
 801b712: 02 af                        	add	r7, sp, #8
 801b714: 84 b0                        	sub	sp, #16
 801b716: 05 68                        	ldr	r5, [r0]
 801b718: 0c 46                        	mov	r4, r1
; #[derive(Copy, Clone, Debug, PartialEq)]
 801b71a: 28 78                        	ldrb	r0, [r5]
 801b71c: df e8 00 f0                  	tbb	[pc, r0]

0801b720 $d.324:
 801b720:	04 0d 16 63	.word	0x63160d04
 801b724:	6c 90 99 00	.word	0x0099906c

0801b728 $t.325:
 801b728: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 801b72c: 10 22                        	movs	r2, #16
 801b72e: cb 68                        	ldr	r3, [r1, #12]
 801b730: 4d f2 0c 21                  	movw	r1, #53772
 801b734: c0 f6 01 01                  	movt	r1, #2049
 801b738: 93 e0                        	b	#294 <$t.325+0x13e>
 801b73a: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 801b73e: 10 22                        	movs	r2, #16
 801b740: cb 68                        	ldr	r3, [r1, #12]
 801b742: 4d f2 1c 21                  	movw	r1, #53788
 801b746: c0 f6 01 01                  	movt	r1, #2049
 801b74a: 8a e0                        	b	#276 <$t.325+0x13e>
 801b74c: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 801b750: 0d 22                        	movs	r2, #13
 801b752: cb 68                        	ldr	r3, [r1, #12]
 801b754: 40 f6 4d 11                  	movw	r1, #2381
 801b758: c0 f6 02 01                  	movt	r1, #2050
 801b75c: 98 47                        	blx	r3
 801b75e: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 801b762: 00 20                        	movs	r0, #0
 801b764: 40 f2 20 22                  	movw	r2, #544
 801b768: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 801b76c: 01 90                        	str	r0, [sp, #4]
;     NameDiscovery(usize, NameBuffer),
 801b76e: 05 f1 fc 00                  	add.w	r0, r5, #252
 801b772: 03 a9                        	add	r1, sp, #12
 801b774: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug, PartialEq)]
 801b776: c0 f6 02 02                  	movt	r2, #2050
 801b77a: 68 46                        	mov	r0, sp
 801b77c: 00 94                        	str	r4, [sp]
 801b77e: fb f7 54 f9                  	bl	#-19800
;     NameDiscovery(usize, NameBuffer),
 801b782: 69 1c                        	adds	r1, r5, #1
; #[derive(Copy, Clone, Debug, PartialEq)]
 801b784: 40 f6 5c 12                  	movw	r2, #2396
;     NameDiscovery(usize, NameBuffer),
 801b788: 03 91                        	str	r1, [sp, #12]
 801b78a: 03 a9                        	add	r1, sp, #12
; #[derive(Copy, Clone, Debug, PartialEq)]
 801b78c: c0 f6 02 02                  	movt	r2, #2050
 801b790: fb f7 4b f9                  	bl	#-19818
 801b794: 01 98                        	ldr	r0, [sp, #4]
 801b796: 9d f8 08 40                  	ldrb.w	r4, [sp, #8]
 801b79a: 00 28                        	cmp	r0, #0
 801b79c: 63 d0                        	beq	#198 <$t.325+0x142>
 801b79e: 00 2c                        	cmp	r4, #0
 801b7a0: 4a d1                        	bne	#148 <$t.325+0x114>
 801b7a2: 01 28                        	cmp	r0, #1
 801b7a4: 11 d1                        	bne	#34 <$t.325+0xa6>
 801b7a6: 9d f8 09 00                  	ldrb.w	r0, [sp, #9]
 801b7aa: 70 b1                        	cbz	r0, #28
 801b7ac: 00 99                        	ldr	r1, [sp]
 801b7ae: 08 78                        	ldrb	r0, [r1]
 801b7b0: 40 07                        	lsls	r0, r0, #29
 801b7b2: 0a d4                        	bmi	#20 <$t.325+0xa6>
 801b7b4: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 801b7b8: 01 22                        	movs	r2, #1
 801b7ba: cb 68                        	ldr	r3, [r1, #12]
 801b7bc: 4e f6 21 41                  	movw	r1, #60449
 801b7c0: c0 f6 01 01                  	movt	r1, #2049
 801b7c4: 01 24                        	movs	r4, #1
 801b7c6: 98 47                        	blx	r3
 801b7c8: 50 b9                        	cbnz	r0, #20
 801b7ca: 00 99                        	ldr	r1, [sp]
 801b7cc: 01 22                        	movs	r2, #1
 801b7ce: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 801b7d2: cb 68                        	ldr	r3, [r1, #12]
 801b7d4: 4f f2 69 61                  	movw	r1, #63081
 801b7d8: c0 f6 01 01                  	movt	r1, #2049
 801b7dc: 98 47                        	blx	r3
 801b7de: 04 46                        	mov	r4, r0
 801b7e0: 8d f8 08 40                  	strb.w	r4, [sp, #8]
 801b7e4: 3f e0                        	b	#126 <$t.325+0x142>
 801b7e6: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 801b7ea: 1b 22                        	movs	r2, #27
 801b7ec: cb 68                        	ldr	r3, [r1, #12]
 801b7ee: 40 f6 6c 11                  	movw	r1, #2412
 801b7f2: c0 f6 02 01                  	movt	r1, #2050
 801b7f6: 34 e0                        	b	#104 <$t.325+0x13e>
 801b7f8: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 801b7fc: 1e 22                        	movs	r2, #30
 801b7fe: cb 68                        	ldr	r3, [r1, #12]
 801b800: 40 f6 87 11                  	movw	r1, #2439
 801b804: c0 f6 02 01                  	movt	r1, #2050
 801b808: 98 47                        	blx	r3
 801b80a: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 801b80e: 00 20                        	movs	r0, #0
 801b810: 4f f6 cc 52                  	movw	r2, #64972
 801b814: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 801b818: 01 90                        	str	r0, [sp, #4]
;     GeneralConnectionEstablishment(BdAddr),
 801b81a: 68 1c                        	adds	r0, r5, #1
 801b81c: 03 a9                        	add	r1, sp, #12
 801b81e: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug, PartialEq)]
 801b820: c0 f6 01 02                  	movt	r2, #2049
 801b824: 68 46                        	mov	r0, sp
 801b826: 00 94                        	str	r4, [sp]
 801b828: fb f7 ff f8                  	bl	#-19970
 801b82c: 01 98                        	ldr	r0, [sp, #4]
 801b82e: 9d f8 08 40                  	ldrb.w	r4, [sp, #8]
 801b832: c0 b1                        	cbz	r0, #48
 801b834: 00 2c                        	cmp	r4, #0
 801b836: b4 d0                        	beq	#-152 <$t.325+0x7e>
 801b838: 01 24                        	movs	r4, #1
 801b83a: 8d f8 08 40                  	strb.w	r4, [sp, #8]
 801b83e: 12 e0                        	b	#36 <$t.325+0x142>
 801b840: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 801b844: 20 22                        	movs	r2, #32
 801b846: cb 68                        	ldr	r3, [r1, #12]
 801b848: 4c f6 a4 31                  	movw	r1, #52132
 801b84c: c0 f6 01 01                  	movt	r1, #2049
 801b850: 07 e0                        	b	#14 <$t.325+0x13e>
 801b852: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 801b856: 1d 22                        	movs	r2, #29
 801b858: cb 68                        	ldr	r3, [r1, #12]
 801b85a: 40 f6 30 11                  	movw	r1, #2352
 801b85e: c0 f6 02 01                  	movt	r1, #2050
 801b862: 98 47                        	blx	r3
 801b864: 04 46                        	mov	r4, r0
 801b866: 00 2c                        	cmp	r4, #0
 801b868: 18 bf                        	it	ne
 801b86a: 01 24                        	movne	r4, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801b86c: 20 46                        	mov	r0, r4
 801b86e: 04 b0                        	add	sp, #16
 801b870: b0 bd                        	pop	{r4, r5, r7, pc}

0801b872 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h7e988ebafffb0eaf:
 801b872: f0 b5                        	push	{r4, r5, r6, r7, lr}
 801b874: 03 af                        	add	r7, sp, #12
 801b876: 4d f8 04 8d                  	str	r8, [sp, #-4]!
 801b87a: 84 b0                        	sub	sp, #16
 801b87c: 0d 46                        	mov	r5, r1
 801b87e: 04 68                        	ldr	r4, [r0]
 801b880: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 801b884: 01 22                        	movs	r2, #1
 801b886: cb 68                        	ldr	r3, [r1, #12]
 801b888: 4e f6 24 41                  	movw	r1, #60452
 801b88c: c0 f6 01 01                  	movt	r1, #2049
 801b890: 4f f0 01 08                  	mov.w	r8, #1
 801b894: 98 47                        	blx	r3
 801b896: 01 95                        	str	r5, [sp, #4]
;             self.entry(&entry);
 801b898: 4f f2 ec 35                  	movw	r5, #62444
 801b89c: 03 ae                        	add	r6, sp, #12
 801b89e: 00 21                        	movs	r1, #0
 801b8a0: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 801b8a4: c0 f6 01 05                  	movt	r5, #2049
 801b8a8: 01 a8                        	add	r0, sp, #4
 801b8aa: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 801b8ae: 31 46                        	mov	r1, r6
 801b8b0: 2a 46                        	mov	r2, r5
;         for entry in entries {
 801b8b2: 03 94                        	str	r4, [sp, #12]
;             self.entry(&entry);
 801b8b4: fb f7 29 f9                  	bl	#-19886
;         intrinsics::offset(self, count) as *mut T
 801b8b8: 61 1c                        	adds	r1, r4, #1
;         for entry in entries {
 801b8ba: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801b8bc: 31 46                        	mov	r1, r6
 801b8be: 2a 46                        	mov	r2, r5
 801b8c0: fb f7 23 f9                  	bl	#-19898
;         intrinsics::offset(self, count) as *mut T
 801b8c4: a1 1c                        	adds	r1, r4, #2
;         for entry in entries {
 801b8c6: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801b8c8: 31 46                        	mov	r1, r6
 801b8ca: 2a 46                        	mov	r2, r5
 801b8cc: fb f7 1d f9                  	bl	#-19910
;         intrinsics::offset(self, count) as *mut T
 801b8d0: e1 1c                        	adds	r1, r4, #3
;         for entry in entries {
 801b8d2: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801b8d4: 31 46                        	mov	r1, r6
 801b8d6: 2a 46                        	mov	r2, r5
 801b8d8: fb f7 17 f9                  	bl	#-19922
;         intrinsics::offset(self, count) as *mut T
 801b8dc: 21 1d                        	adds	r1, r4, #4
;         for entry in entries {
 801b8de: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801b8e0: 31 46                        	mov	r1, r6
 801b8e2: 2a 46                        	mov	r2, r5
 801b8e4: fb f7 11 f9                  	bl	#-19934
;         intrinsics::offset(self, count) as *mut T
 801b8e8: 61 1d                        	adds	r1, r4, #5
;         for entry in entries {
 801b8ea: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801b8ec: 31 46                        	mov	r1, r6
 801b8ee: 2a 46                        	mov	r2, r5
 801b8f0: fb f7 0b f9                  	bl	#-19946
;         intrinsics::offset(self, count) as *mut T
 801b8f4: a1 1d                        	adds	r1, r4, #6
;         for entry in entries {
 801b8f6: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801b8f8: 31 46                        	mov	r1, r6
 801b8fa: 2a 46                        	mov	r2, r5
 801b8fc: fb f7 05 f9                  	bl	#-19958
;         intrinsics::offset(self, count) as *mut T
 801b900: e1 1d                        	adds	r1, r4, #7
;         for entry in entries {
 801b902: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801b904: 31 46                        	mov	r1, r6
 801b906: 2a 46                        	mov	r2, r5
 801b908: fb f7 ff f8                  	bl	#-19970
;         intrinsics::offset(self, count) as *mut T
 801b90c: 04 f1 08 01                  	add.w	r1, r4, #8
;         for entry in entries {
 801b910: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801b912: 31 46                        	mov	r1, r6
 801b914: 2a 46                        	mov	r2, r5
 801b916: fb f7 f8 f8                  	bl	#-19984
;         intrinsics::offset(self, count) as *mut T
 801b91a: 04 f1 09 01                  	add.w	r1, r4, #9
;         for entry in entries {
 801b91e: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801b920: 31 46                        	mov	r1, r6
 801b922: 2a 46                        	mov	r2, r5
 801b924: fb f7 f1 f8                  	bl	#-19998
;         intrinsics::offset(self, count) as *mut T
 801b928: 04 f1 0a 01                  	add.w	r1, r4, #10
;         for entry in entries {
 801b92c: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801b92e: 31 46                        	mov	r1, r6
 801b930: 2a 46                        	mov	r2, r5
 801b932: fb f7 ea f8                  	bl	#-20012
;         intrinsics::offset(self, count) as *mut T
 801b936: 04 f1 0b 01                  	add.w	r1, r4, #11
;         for entry in entries {
 801b93a: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801b93c: 31 46                        	mov	r1, r6
 801b93e: 2a 46                        	mov	r2, r5
 801b940: fb f7 e3 f8                  	bl	#-20026
;         intrinsics::offset(self, count) as *mut T
 801b944: 04 f1 0c 01                  	add.w	r1, r4, #12
;         for entry in entries {
 801b948: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801b94a: 31 46                        	mov	r1, r6
 801b94c: 2a 46                        	mov	r2, r5
 801b94e: fb f7 dc f8                  	bl	#-20040
;         intrinsics::offset(self, count) as *mut T
 801b952: 04 f1 0d 01                  	add.w	r1, r4, #13
;         for entry in entries {
 801b956: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801b958: 31 46                        	mov	r1, r6
 801b95a: 2a 46                        	mov	r2, r5
 801b95c: fb f7 d5 f8                  	bl	#-20054
;         intrinsics::offset(self, count) as *mut T
 801b960: 04 f1 0e 01                  	add.w	r1, r4, #14
;         for entry in entries {
 801b964: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801b966: 31 46                        	mov	r1, r6
 801b968: 2a 46                        	mov	r2, r5
 801b96a: fb f7 ce f8                  	bl	#-20068
;         intrinsics::offset(self, count) as *mut T
 801b96e: 04 f1 0f 01                  	add.w	r1, r4, #15
;         for entry in entries {
 801b972: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801b974: 31 46                        	mov	r1, r6
 801b976: 2a 46                        	mov	r2, r5
 801b978: fb f7 c7 f8                  	bl	#-20082
 801b97c: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 801b980: 20 b1                        	cbz	r0, #8
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801b982: 40 46                        	mov	r0, r8
 801b984: 04 b0                        	add	sp, #16
 801b986: 5d f8 04 8b                  	ldr	r8, [sp], #4
 801b98a: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 801b98c: 01 99                        	ldr	r1, [sp, #4]
 801b98e: 01 22                        	movs	r2, #1
 801b990: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 801b994: cb 68                        	ldr	r3, [r1, #12]
 801b996: 4e f6 23 41                  	movw	r1, #60451
 801b99a: c0 f6 01 01                  	movt	r1, #2049
 801b99e: 98 47                        	blx	r3
 801b9a0: 80 46                        	mov	r8, r0
 801b9a2: 40 46                        	mov	r0, r8
 801b9a4: 04 b0                        	add	sp, #16
 801b9a6: 5d f8 04 8b                  	ldr	r8, [sp], #4
 801b9aa: f0 bd                        	pop	{r4, r5, r6, r7, pc}

0801b9ac _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h22d8acd6be6dfe74:
 801b9ac: b0 b5                        	push	{r4, r5, r7, lr}
 801b9ae: 02 af                        	add	r7, sp, #8
 801b9b0: 84 b0                        	sub	sp, #16
 801b9b2: 0c 46                        	mov	r4, r1
 801b9b4: 05 68                        	ldr	r5, [r0]
 801b9b6: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 801b9ba: 0e 22                        	movs	r2, #14
 801b9bc: cb 68                        	ldr	r3, [r1, #12]
 801b9be: 4f f6 f5 61                  	movw	r1, #65269
 801b9c2: c0 f6 01 01                  	movt	r1, #2049
 801b9c6: 98 47                        	blx	r3
 801b9c8: 8d f8 08 00                  	strb.w	r0, [sp, #8]
;     pub event: GapDeviceFoundEvent,
 801b9cc: 28 1d                        	adds	r0, r5, #4
 801b9ce: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 801b9d0: 40 f6 ac 10                  	movw	r0, #2476
 801b9d4: 00 21                        	movs	r1, #0
 801b9d6: c0 f6 02 00                  	movt	r0, #2050
 801b9da: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 801b9de: 40 f6 a5 11                  	movw	r1, #2469
 801b9e2: 00 90                        	str	r0, [sp]
 801b9e4: 01 a8                        	add	r0, sp, #4
 801b9e6: 03 ab                        	add	r3, sp, #12
 801b9e8: c0 f6 02 01                  	movt	r1, #2050
 801b9ec: 05 22                        	movs	r2, #5
 801b9ee: 01 94                        	str	r4, [sp, #4]
 801b9f0: fa f7 9e fe                  	bl	#-21188
;     pub bdaddr: BdAddrType,
 801b9f4: 69 1d                        	adds	r1, r5, #5
 801b9f6: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 801b9f8: 40 f6 c4 11                  	movw	r1, #2500
 801b9fc: 03 ab                        	add	r3, sp, #12
 801b9fe: c0 f6 02 01                  	movt	r1, #2050
 801ba02: 06 22                        	movs	r2, #6
 801ba04: 00 91                        	str	r1, [sp]
 801ba06: 40 f6 bc 11                  	movw	r1, #2492
 801ba0a: c0 f6 02 01                  	movt	r1, #2050
 801ba0e: fa f7 8f fe                  	bl	#-21218
 801ba12: 40 f2 20 21                  	movw	r1, #544
 801ba16: 03 ab                        	add	r3, sp, #12
 801ba18: c0 f6 02 01                  	movt	r1, #2050
 801ba1c: 08 22                        	movs	r2, #8
 801ba1e: 00 91                        	str	r1, [sp]
 801ba20: 4c f6 2c 41                  	movw	r1, #52268
 801ba24: c0 f6 01 01                  	movt	r1, #2049
;     data_len: usize,
 801ba28: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 801ba2a: fa f7 81 fe                  	bl	#-21246
;     data_buf: [u8; 31],
 801ba2e: 05 f1 0c 01                  	add.w	r1, r5, #12
 801ba32: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 801ba34: 40 f6 d4 11                  	movw	r1, #2516
 801ba38: 03 ab                        	add	r3, sp, #12
 801ba3a: c0 f6 02 01                  	movt	r1, #2050
 801ba3e: 08 22                        	movs	r2, #8
 801ba40: 00 91                        	str	r1, [sp]
 801ba42: 4c f6 34 41                  	movw	r1, #52276
 801ba46: c0 f6 01 01                  	movt	r1, #2049
 801ba4a: fa f7 71 fe                  	bl	#-21278
;     pub rssi: Option<i8>,
 801ba4e: 05 f1 2b 01                  	add.w	r1, r5, #43
 801ba52: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 801ba54: 40 f6 e4 11                  	movw	r1, #2532
 801ba58: 03 ab                        	add	r3, sp, #12
 801ba5a: c0 f6 02 01                  	movt	r1, #2050
 801ba5e: 04 22                        	movs	r2, #4
 801ba60: 00 91                        	str	r1, [sp]
 801ba62: 4d f2 b4 21                  	movw	r1, #53940
 801ba66: c0 f6 01 01                  	movt	r1, #2049
 801ba6a: fa f7 61 fe                  	bl	#-21310
 801ba6e: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 801ba72: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 801ba76: b9 b1                        	cbz	r1, #46
 801ba78: 08 b1                        	cbz	r0, #2
 801ba7a: 01 20                        	movs	r0, #1
 801ba7c: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h22d8acd6be6dfe74E+0xfc>
 801ba7e: 01 99                        	ldr	r1, [sp, #4]
 801ba80: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801ba84: 09 78                        	ldrb	r1, [r1]
 801ba86: d3 68                        	ldr	r3, [r2, #12]
 801ba88: 49 07                        	lsls	r1, r1, #29
 801ba8a: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h22d8acd6be6dfe74E+0xf0>
 801ba8c: 4e f6 1c 41                  	movw	r1, #60444
 801ba90: 02 22                        	movs	r2, #2
 801ba92: c0 f6 01 01                  	movt	r1, #2049
 801ba96: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h22d8acd6be6dfe74E+0xfa>
 801ba98: 4e f6 d6 41                  	movw	r1, #60630
 801ba9c: 01 22                        	movs	r2, #1
 801ba9e: c0 f6 01 01                  	movt	r1, #2049
 801baa2: 98 47                        	blx	r3
 801baa4: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 801baa8: 00 28                        	cmp	r0, #0
 801baaa: 18 bf                        	it	ne
 801baac: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801baae: 04 b0                        	add	sp, #16
 801bab0: b0 bd                        	pop	{r4, r5, r7, pc}

0801bab2 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h985886d89cd8e519:
 801bab2: b0 b5                        	push	{r4, r5, r7, lr}
 801bab4: 02 af                        	add	r7, sp, #8
 801bab6: 84 b0                        	sub	sp, #16
 801bab8: 05 68                        	ldr	r5, [r0]
 801baba: 0c 46                        	mov	r4, r1
; #[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]
 801babc: 28 78                        	ldrb	r0, [r5]
 801babe: 01 28                        	cmp	r0, #1
 801bac0: 22 d1                        	bne	#68 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h985886d89cd8e519E+0x5a>
 801bac2: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 801bac6: 04 22                        	movs	r2, #4
 801bac8: cb 68                        	ldr	r3, [r1, #12]
 801baca: 4d f2 b8 21                  	movw	r1, #53944
 801bace: c0 f6 01 01                  	movt	r1, #2049
 801bad2: 98 47                        	blx	r3
 801bad4: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 801bad8: 00 20                        	movs	r0, #0
 801bada: 40 f6 f4 12                  	movw	r2, #2548
 801bade: 8d f8 09 00                  	strb.w	r0, [sp, #9]
 801bae2: 01 90                        	str	r0, [sp, #4]
;     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
 801bae4: 68 1c                        	adds	r0, r5, #1
 801bae6: 03 a9                        	add	r1, sp, #12
 801bae8: 03 90                        	str	r0, [sp, #12]
; #[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]
 801baea: c0 f6 02 02                  	movt	r2, #2050
 801baee: 68 46                        	mov	r0, sp
 801baf0: 00 94                        	str	r4, [sp]
 801baf2: fa f7 9a ff                  	bl	#-20684
 801baf6: 01 98                        	ldr	r0, [sp, #4]
 801baf8: 9d f8 08 40                  	ldrb.w	r4, [sp, #8]
 801bafc: 70 b1                        	cbz	r0, #28
 801bafe: 9c b1                        	cbz	r4, #38
 801bb00: 01 24                        	movs	r4, #1
 801bb02: 8d f8 08 40                  	strb.w	r4, [sp, #8]
 801bb06: 09 e0                        	b	#18 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h985886d89cd8e519E+0x6e>
 801bb08: d4 e9 06 01                  	ldrd	r0, r1, [r4, #24]
 801bb0c: 04 22                        	movs	r2, #4
 801bb0e: cb 68                        	ldr	r3, [r1, #12]
 801bb10: 4d f2 a8 21                  	movw	r1, #53928
 801bb14: c0 f6 01 01                  	movt	r1, #2049
 801bb18: 98 47                        	blx	r3
 801bb1a: 04 46                        	mov	r4, r0
 801bb1c: 00 2c                        	cmp	r4, #0
 801bb1e: 18 bf                        	it	ne
 801bb20: 01 24                        	movne	r4, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801bb22: 20 46                        	mov	r0, r4
 801bb24: 04 b0                        	add	sp, #16
 801bb26: b0 bd                        	pop	{r4, r5, r7, pc}
 801bb28: 01 28                        	cmp	r0, #1
 801bb2a: 11 d1                        	bne	#34 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h985886d89cd8e519E+0xa2>
 801bb2c: 9d f8 09 00                  	ldrb.w	r0, [sp, #9]
 801bb30: 70 b1                        	cbz	r0, #28
 801bb32: 00 99                        	ldr	r1, [sp]
 801bb34: 08 78                        	ldrb	r0, [r1]
 801bb36: 40 07                        	lsls	r0, r0, #29
 801bb38: 0a d4                        	bmi	#20 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h985886d89cd8e519E+0xa2>
 801bb3a: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 801bb3e: 01 22                        	movs	r2, #1
 801bb40: cb 68                        	ldr	r3, [r1, #12]
 801bb42: 4e f6 21 41                  	movw	r1, #60449
 801bb46: c0 f6 01 01                  	movt	r1, #2049
 801bb4a: 01 24                        	movs	r4, #1
 801bb4c: 98 47                        	blx	r3
 801bb4e: 50 b9                        	cbnz	r0, #20
 801bb50: 00 99                        	ldr	r1, [sp]
 801bb52: 01 22                        	movs	r2, #1
 801bb54: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 801bb58: cb 68                        	ldr	r3, [r1, #12]
 801bb5a: 4f f2 69 61                  	movw	r1, #63081
 801bb5e: c0 f6 01 01                  	movt	r1, #2049
 801bb62: 98 47                        	blx	r3
 801bb64: 04 46                        	mov	r4, r0
 801bb66: 8d f8 08 40                  	strb.w	r4, [sp, #8]
 801bb6a: d7 e7                        	b	#-82 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h985886d89cd8e519E+0x6e>

0801bb6c _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h71ff880d162085a8:
 801bb6c: f0 b5                        	push	{r4, r5, r6, r7, lr}
 801bb6e: 03 af                        	add	r7, sp, #12
 801bb70: 4d f8 04 8d                  	str	r8, [sp, #-4]!
 801bb74: 84 b0                        	sub	sp, #16
 801bb76: 0d 46                        	mov	r5, r1
 801bb78: 04 68                        	ldr	r4, [r0]
 801bb7a: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 801bb7e: 01 22                        	movs	r2, #1
 801bb80: cb 68                        	ldr	r3, [r1, #12]
 801bb82: 4e f6 24 41                  	movw	r1, #60452
 801bb86: c0 f6 01 01                  	movt	r1, #2049
 801bb8a: 4f f0 01 08                  	mov.w	r8, #1
 801bb8e: 98 47                        	blx	r3
 801bb90: 01 95                        	str	r5, [sp, #4]
;             self.entry(&entry);
 801bb92: 4f f2 ec 35                  	movw	r5, #62444
 801bb96: 03 ae                        	add	r6, sp, #12
 801bb98: 00 21                        	movs	r1, #0
 801bb9a: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 801bb9e: c0 f6 01 05                  	movt	r5, #2049
 801bba2: 01 a8                        	add	r0, sp, #4
 801bba4: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 801bba8: 31 46                        	mov	r1, r6
 801bbaa: 2a 46                        	mov	r2, r5
;         for entry in entries {
 801bbac: 03 94                        	str	r4, [sp, #12]
;             self.entry(&entry);
 801bbae: fa f7 ac ff                  	bl	#-20648
;         intrinsics::offset(self, count) as *mut T
 801bbb2: 61 1c                        	adds	r1, r4, #1
;         for entry in entries {
 801bbb4: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801bbb6: 31 46                        	mov	r1, r6
 801bbb8: 2a 46                        	mov	r2, r5
 801bbba: fa f7 a6 ff                  	bl	#-20660
;         intrinsics::offset(self, count) as *mut T
 801bbbe: a1 1c                        	adds	r1, r4, #2
;         for entry in entries {
 801bbc0: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801bbc2: 31 46                        	mov	r1, r6
 801bbc4: 2a 46                        	mov	r2, r5
 801bbc6: fa f7 a0 ff                  	bl	#-20672
;         intrinsics::offset(self, count) as *mut T
 801bbca: e1 1c                        	adds	r1, r4, #3
;         for entry in entries {
 801bbcc: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801bbce: 31 46                        	mov	r1, r6
 801bbd0: 2a 46                        	mov	r2, r5
 801bbd2: fa f7 9a ff                  	bl	#-20684
;         intrinsics::offset(self, count) as *mut T
 801bbd6: 21 1d                        	adds	r1, r4, #4
;         for entry in entries {
 801bbd8: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801bbda: 31 46                        	mov	r1, r6
 801bbdc: 2a 46                        	mov	r2, r5
 801bbde: fa f7 94 ff                  	bl	#-20696
;         intrinsics::offset(self, count) as *mut T
 801bbe2: 61 1d                        	adds	r1, r4, #5
;         for entry in entries {
 801bbe4: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801bbe6: 31 46                        	mov	r1, r6
 801bbe8: 2a 46                        	mov	r2, r5
 801bbea: fa f7 8e ff                  	bl	#-20708
;         intrinsics::offset(self, count) as *mut T
 801bbee: a1 1d                        	adds	r1, r4, #6
;         for entry in entries {
 801bbf0: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801bbf2: 31 46                        	mov	r1, r6
 801bbf4: 2a 46                        	mov	r2, r5
 801bbf6: fa f7 88 ff                  	bl	#-20720
;         intrinsics::offset(self, count) as *mut T
 801bbfa: e1 1d                        	adds	r1, r4, #7
;         for entry in entries {
 801bbfc: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801bbfe: 31 46                        	mov	r1, r6
 801bc00: 2a 46                        	mov	r2, r5
 801bc02: fa f7 82 ff                  	bl	#-20732
;         intrinsics::offset(self, count) as *mut T
 801bc06: 04 f1 08 01                  	add.w	r1, r4, #8
;         for entry in entries {
 801bc0a: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801bc0c: 31 46                        	mov	r1, r6
 801bc0e: 2a 46                        	mov	r2, r5
 801bc10: fa f7 7b ff                  	bl	#-20746
;         intrinsics::offset(self, count) as *mut T
 801bc14: 04 f1 09 01                  	add.w	r1, r4, #9
;         for entry in entries {
 801bc18: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801bc1a: 31 46                        	mov	r1, r6
 801bc1c: 2a 46                        	mov	r2, r5
 801bc1e: fa f7 74 ff                  	bl	#-20760
;         intrinsics::offset(self, count) as *mut T
 801bc22: 04 f1 0a 01                  	add.w	r1, r4, #10
;         for entry in entries {
 801bc26: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801bc28: 31 46                        	mov	r1, r6
 801bc2a: 2a 46                        	mov	r2, r5
 801bc2c: fa f7 6d ff                  	bl	#-20774
;         intrinsics::offset(self, count) as *mut T
 801bc30: 04 f1 0b 01                  	add.w	r1, r4, #11
;         for entry in entries {
 801bc34: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801bc36: 31 46                        	mov	r1, r6
 801bc38: 2a 46                        	mov	r2, r5
 801bc3a: fa f7 66 ff                  	bl	#-20788
;         intrinsics::offset(self, count) as *mut T
 801bc3e: 04 f1 0c 01                  	add.w	r1, r4, #12
;         for entry in entries {
 801bc42: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801bc44: 31 46                        	mov	r1, r6
 801bc46: 2a 46                        	mov	r2, r5
 801bc48: fa f7 5f ff                  	bl	#-20802
;         intrinsics::offset(self, count) as *mut T
 801bc4c: 04 f1 0d 01                  	add.w	r1, r4, #13
;         for entry in entries {
 801bc50: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801bc52: 31 46                        	mov	r1, r6
 801bc54: 2a 46                        	mov	r2, r5
 801bc56: fa f7 58 ff                  	bl	#-20816
;         intrinsics::offset(self, count) as *mut T
 801bc5a: 04 f1 0e 01                  	add.w	r1, r4, #14
;         for entry in entries {
 801bc5e: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801bc60: 31 46                        	mov	r1, r6
 801bc62: 2a 46                        	mov	r2, r5
 801bc64: fa f7 51 ff                  	bl	#-20830
;         intrinsics::offset(self, count) as *mut T
 801bc68: 04 f1 0f 01                  	add.w	r1, r4, #15
;         for entry in entries {
 801bc6c: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801bc6e: 31 46                        	mov	r1, r6
 801bc70: 2a 46                        	mov	r2, r5
 801bc72: fa f7 4a ff                  	bl	#-20844
;         intrinsics::offset(self, count) as *mut T
 801bc76: 04 f1 10 01                  	add.w	r1, r4, #16
;         for entry in entries {
 801bc7a: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801bc7c: 31 46                        	mov	r1, r6
 801bc7e: 2a 46                        	mov	r2, r5
 801bc80: fa f7 43 ff                  	bl	#-20858
;         intrinsics::offset(self, count) as *mut T
 801bc84: 04 f1 11 01                  	add.w	r1, r4, #17
;         for entry in entries {
 801bc88: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801bc8a: 31 46                        	mov	r1, r6
 801bc8c: 2a 46                        	mov	r2, r5
 801bc8e: fa f7 3c ff                  	bl	#-20872
;         intrinsics::offset(self, count) as *mut T
 801bc92: 04 f1 12 01                  	add.w	r1, r4, #18
;         for entry in entries {
 801bc96: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801bc98: 31 46                        	mov	r1, r6
 801bc9a: 2a 46                        	mov	r2, r5
 801bc9c: fa f7 35 ff                  	bl	#-20886
;         intrinsics::offset(self, count) as *mut T
 801bca0: 04 f1 13 01                  	add.w	r1, r4, #19
;         for entry in entries {
 801bca4: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801bca6: 31 46                        	mov	r1, r6
 801bca8: 2a 46                        	mov	r2, r5
 801bcaa: fa f7 2e ff                  	bl	#-20900
;         intrinsics::offset(self, count) as *mut T
 801bcae: 04 f1 14 01                  	add.w	r1, r4, #20
;         for entry in entries {
 801bcb2: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801bcb4: 31 46                        	mov	r1, r6
 801bcb6: 2a 46                        	mov	r2, r5
 801bcb8: fa f7 27 ff                  	bl	#-20914
;         intrinsics::offset(self, count) as *mut T
 801bcbc: 04 f1 15 01                  	add.w	r1, r4, #21
;         for entry in entries {
 801bcc0: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801bcc2: 31 46                        	mov	r1, r6
 801bcc4: 2a 46                        	mov	r2, r5
 801bcc6: fa f7 20 ff                  	bl	#-20928
;         intrinsics::offset(self, count) as *mut T
 801bcca: 04 f1 16 01                  	add.w	r1, r4, #22
;         for entry in entries {
 801bcce: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801bcd0: 31 46                        	mov	r1, r6
 801bcd2: 2a 46                        	mov	r2, r5
 801bcd4: fa f7 19 ff                  	bl	#-20942
;         intrinsics::offset(self, count) as *mut T
 801bcd8: 04 f1 17 01                  	add.w	r1, r4, #23
;         for entry in entries {
 801bcdc: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801bcde: 31 46                        	mov	r1, r6
 801bce0: 2a 46                        	mov	r2, r5
 801bce2: fa f7 12 ff                  	bl	#-20956
;         intrinsics::offset(self, count) as *mut T
 801bce6: 04 f1 18 01                  	add.w	r1, r4, #24
;         for entry in entries {
 801bcea: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801bcec: 31 46                        	mov	r1, r6
 801bcee: 2a 46                        	mov	r2, r5
 801bcf0: fa f7 0b ff                  	bl	#-20970
;         intrinsics::offset(self, count) as *mut T
 801bcf4: 04 f1 19 01                  	add.w	r1, r4, #25
;         for entry in entries {
 801bcf8: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801bcfa: 31 46                        	mov	r1, r6
 801bcfc: 2a 46                        	mov	r2, r5
 801bcfe: fa f7 04 ff                  	bl	#-20984
;         intrinsics::offset(self, count) as *mut T
 801bd02: 04 f1 1a 01                  	add.w	r1, r4, #26
;         for entry in entries {
 801bd06: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801bd08: 31 46                        	mov	r1, r6
 801bd0a: 2a 46                        	mov	r2, r5
 801bd0c: fa f7 fd fe                  	bl	#-20998
;         intrinsics::offset(self, count) as *mut T
 801bd10: 04 f1 1b 01                  	add.w	r1, r4, #27
;         for entry in entries {
 801bd14: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801bd16: 31 46                        	mov	r1, r6
 801bd18: 2a 46                        	mov	r2, r5
 801bd1a: fa f7 f6 fe                  	bl	#-21012
;         intrinsics::offset(self, count) as *mut T
 801bd1e: 04 f1 1c 01                  	add.w	r1, r4, #28
;         for entry in entries {
 801bd22: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801bd24: 31 46                        	mov	r1, r6
 801bd26: 2a 46                        	mov	r2, r5
 801bd28: fa f7 ef fe                  	bl	#-21026
;         intrinsics::offset(self, count) as *mut T
 801bd2c: 04 f1 1d 01                  	add.w	r1, r4, #29
;         for entry in entries {
 801bd30: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801bd32: 31 46                        	mov	r1, r6
 801bd34: 2a 46                        	mov	r2, r5
 801bd36: fa f7 e8 fe                  	bl	#-21040
;         intrinsics::offset(self, count) as *mut T
 801bd3a: 04 f1 1e 01                  	add.w	r1, r4, #30
;         for entry in entries {
 801bd3e: 03 91                        	str	r1, [sp, #12]
;             self.entry(&entry);
 801bd40: 31 46                        	mov	r1, r6
 801bd42: 2a 46                        	mov	r2, r5
 801bd44: fa f7 e1 fe                  	bl	#-21054
 801bd48: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 801bd4c: 20 b1                        	cbz	r0, #8
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801bd4e: 40 46                        	mov	r0, r8
 801bd50: 04 b0                        	add	sp, #16
 801bd52: 5d f8 04 8b                  	ldr	r8, [sp], #4
 801bd56: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 801bd58: 01 99                        	ldr	r1, [sp, #4]
 801bd5a: 01 22                        	movs	r2, #1
 801bd5c: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 801bd60: cb 68                        	ldr	r3, [r1, #12]
 801bd62: 4e f6 23 41                  	movw	r1, #60451
 801bd66: c0 f6 01 01                  	movt	r1, #2049
 801bd6a: 98 47                        	blx	r3
 801bd6c: 80 46                        	mov	r8, r0
 801bd6e: 40 46                        	mov	r0, r8
 801bd70: 04 b0                        	add	sp, #16
 801bd72: 5d f8 04 8b                  	ldr	r8, [sp], #4
 801bd76: f0 bd                        	pop	{r4, r5, r6, r7, pc}

0801bd78 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h1df29dd52a82ffac:
 801bd78: 00 68                        	ldr	r0, [r0]
 801bd7a: 00 78                        	ldrb	r0, [r0]
 801bd7c: f9 f7 6e b8                  	b.w	#-28452 <_ZN77_$LT$bluetooth_hci..event..AdvertisementEvent$u20$as$u20$core..fmt..Debug$GT$3fmt17h9b26a2a72f7fad92E+0x4>

0801bd80 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h355a3df8f8bd99ea:
 801bd80: b0 b5                        	push	{r4, r5, r7, lr}
 801bd82: 02 af                        	add	r7, sp, #8
 801bd84: 84 b0                        	sub	sp, #16
 801bd86: 0c 46                        	mov	r4, r1
 801bd88: 05 68                        	ldr	r5, [r0]
 801bd8a: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 801bd8e: 12 22                        	movs	r2, #18
 801bd90: cb 68                        	ldr	r3, [r1, #12]
 801bd92: 4f f6 81 61                  	movw	r1, #65153
 801bd96: c0 f6 01 01                  	movt	r1, #2049
 801bd9a: 98 47                        	blx	r3
 801bd9c: 8d f8 08 00                  	strb.w	r0, [sp, #8]
; #[derive(Copy, Clone, Debug)]
 801bda0: 4f f6 18 50                  	movw	r0, #64792
 801bda4: 00 21                        	movs	r1, #0
 801bda6: c0 f6 01 00                  	movt	r0, #2049
 801bdaa: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 801bdae: 4f f6 0c 51                  	movw	r1, #64780
 801bdb2: 00 90                        	str	r0, [sp]
 801bdb4: 01 a8                        	add	r0, sp, #4
 801bdb6: 03 ab                        	add	r3, sp, #12
 801bdb8: c0 f6 01 01                  	movt	r1, #2049
 801bdbc: 0b 22                        	movs	r2, #11
 801bdbe: 01 94                        	str	r4, [sp, #4]
;     pub conn_handle: ConnectionHandle,
 801bdc0: 03 95                        	str	r5, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 801bdc2: fa f7 b5 fc                  	bl	#-22166
;     pub status: GapPairingStatus,
 801bdc6: a9 1c                        	adds	r1, r5, #2
 801bdc8: 03 91                        	str	r1, [sp, #12]
; #[derive(Copy, Clone, Debug)]
 801bdca: 40 f6 04 21                  	movw	r1, #2564
 801bdce: 03 ab                        	add	r3, sp, #12
 801bdd0: c0 f6 02 01                  	movt	r1, #2050
 801bdd4: 06 22                        	movs	r2, #6
 801bdd6: 00 91                        	str	r1, [sp]
 801bdd8: 4f f6 60 31                  	movw	r1, #64352
 801bddc: c0 f6 01 01                  	movt	r1, #2049
 801bde0: fa f7 a6 fc                  	bl	#-22196
 801bde4: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 801bde8: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 801bdec: b9 b1                        	cbz	r1, #46
 801bdee: 08 b1                        	cbz	r0, #2
 801bdf0: 01 20                        	movs	r0, #1
 801bdf2: 12 e0                        	b	#36 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h355a3df8f8bd99eaE+0x9e>
 801bdf4: 01 99                        	ldr	r1, [sp, #4]
 801bdf6: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801bdfa: 09 78                        	ldrb	r1, [r1]
 801bdfc: d3 68                        	ldr	r3, [r2, #12]
 801bdfe: 49 07                        	lsls	r1, r1, #29
 801be00: 05 d4                        	bmi	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h355a3df8f8bd99eaE+0x92>
 801be02: 4e f6 1c 41                  	movw	r1, #60444
 801be06: 02 22                        	movs	r2, #2
 801be08: c0 f6 01 01                  	movt	r1, #2049
 801be0c: 04 e0                        	b	#8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h355a3df8f8bd99eaE+0x9c>
 801be0e: 4e f6 d6 41                  	movw	r1, #60630
 801be12: 01 22                        	movs	r2, #1
 801be14: c0 f6 01 01                  	movt	r1, #2049
 801be18: 98 47                        	blx	r3
 801be1a: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 801be1e: 00 28                        	cmp	r0, #0
 801be20: 18 bf                        	it	ne
 801be22: 01 20                        	movne	r0, #1
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801be24: 04 b0                        	add	sp, #16
 801be26: b0 bd                        	pop	{r4, r5, r7, pc}

0801be28 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h58afe7895937d501:
 801be28: 00 68                        	ldr	r0, [r0]
; #[derive(Copy, Clone, Debug, PartialEq)]
 801be2a: 00 78                        	ldrb	r0, [r0]
 801be2c: 50 b1                        	cbz	r0, #20
 801be2e: 01 28                        	cmp	r0, #1
 801be30: 11 d0                        	beq	#34 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h58afe7895937d501E+0x32>
 801be32: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801be36: 4f f2 13 21                  	movw	r1, #61971
 801be3a: d3 68                        	ldr	r3, [r2, #12]
 801be3c: c0 f6 01 01                  	movt	r1, #2049
 801be40: 06 22                        	movs	r2, #6
 801be42: 18 47                        	bx	r3
 801be44: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801be48: 4e f6 14 51                  	movw	r1, #60692
 801be4c: c0 f6 01 01                  	movt	r1, #2049
 801be50: d3 68                        	ldr	r3, [r2, #12]
 801be52: 07 22                        	movs	r2, #7
 801be54: 18 47                        	bx	r3
 801be56: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801be5a: 4f f2 81 31                  	movw	r1, #62337
 801be5e: c0 f6 01 01                  	movt	r1, #2049
 801be62: d3 68                        	ldr	r3, [r2, #12]
 801be64: 07 22                        	movs	r2, #7
 801be66: 18 47                        	bx	r3

0801be68 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h0202d9597a06497f:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801be68: 02 46                        	mov	r2, r0
 801be6a: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 801be6e: 12 68                        	ldr	r2, [r2]
 801be70: cb 68                        	ldr	r3, [r1, #12]
; #[derive(Clone, Copy, Debug, PartialEq)]
 801be72: 11 78                        	ldrb	r1, [r2]
 801be74: 01 29                        	cmp	r1, #1
 801be76: 05 d1                        	bne	#10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h0202d9597a06497fE+0x20>
 801be78: 40 f6 14 21                  	movw	r1, #2580
 801be7c: 03 22                        	movs	r2, #3
 801be7e: c0 f6 02 01                  	movt	r1, #2050
 801be82: 18 47                        	bx	r3
 801be84: 4c f6 3c 41                  	movw	r1, #52284
 801be88: 08 22                        	movs	r2, #8
 801be8a: c0 f6 01 01                  	movt	r1, #2049
 801be8e: 18 47                        	bx	r3

0801be90 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::h3c16c065505cb2ea:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801be90: 80 b5                        	push	{r7, lr}
 801be92: 6f 46                        	mov	r7, sp
 801be94: 8c b0                        	sub	sp, #48
 801be96: 02 68                        	ldr	r2, [r0]
;         &self.handles_buf[..self.handles_len]
 801be98: 10 68                        	ldr	r0, [r2]
;         } else if self.end > slice.len() {
 801be9a: 7e 28                        	cmp	r0, #126
 801be9c: 28 d2                        	bhs	#80 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3c16c065505cb2eaE+0x64>
;         write!(
 801be9e: 48 f6 0f 03                  	movw	r3, #34831
;     if buffer.len() < 16 {
 801bea2: 10 28                        	cmp	r0, #16
;         write!(
 801bea4: c0 f6 01 03                  	movt	r3, #2049
 801bea8: 03 93                        	str	r3, [sp, #12]
 801beaa: 04 ab                        	add	r3, sp, #16
 801beac: 02 93                        	str	r3, [sp, #8]
 801beae: 45 f6 b5 03                  	movw	r3, #22709
 801beb2: c0 f6 01 03                  	movt	r3, #2049
 801beb6: 01 93                        	str	r3, [sp, #4]
 801beb8: d1 e9 06 31                  	ldrd	r3, r1, [r1, #24]
;     if buffer.len() < 16 {
 801bebc: 28 bf                        	it	hs
 801bebe: 10 20                        	movhs	r0, #16
;             first_16(self.handles())
 801bec0: 05 90                        	str	r0, [sp, #20]
;         &self.handles_buf[..self.handles_len]
 801bec2: 90 1d                        	adds	r0, r2, #6
;             first_16(self.handles())
 801bec4: 04 90                        	str	r0, [sp, #16]
;             self.conn_handle,
 801bec6: 10 1d                        	adds	r0, r2, #4
 801bec8: 6a 46                        	mov	r2, sp
;         write!(
 801beca: 00 90                        	str	r0, [sp]
 801becc: 02 20                        	movs	r0, #2
 801bece: 0a 92                        	str	r2, [sp, #40]
 801bed0: 00 22                        	movs	r2, #0
 801bed2: 0b 90                        	str	r0, [sp, #44]
 801bed4: 09 92                        	str	r2, [sp, #36]
 801bed6: cd e9 07 02                  	strd	r0, r2, [sp, #28]
 801beda: 4f f2 10 60                  	movw	r0, #62992
 801bede: c0 f6 01 00                  	movt	r0, #2049
 801bee2: 06 aa                        	add	r2, sp, #24
 801bee4: 06 90                        	str	r0, [sp, #24]
 801bee6: 18 46                        	mov	r0, r3
 801bee8: fa f7 cc f9                  	bl	#-23656
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801beec: 0c b0                        	add	sp, #48
 801beee: 80 bd                        	pop	{r7, pc}
;             slice_index_len_fail(self.end, slice.len());
 801bef0: 7d 21                        	movs	r1, #125
 801bef2: f9 f7 90 ff                  	bl	#-24800
 801bef6: fe de                        	trap

0801bef8 stm32wb_hal::rtc::Rtc::rtc::hfa205f148d29a9b6:
;     pub fn rtc(rtc: RTC, rcc: &mut Rcc) -> Self {
 801bef8: 80 b5                        	push	{r7, lr}
 801befa: 6f 46                        	mov	r7, sp
 801befc: 90 21                        	movs	r1, #144
 801befe: c5 f6 00 01                  	movt	r1, #22528
;     intrinsics::volatile_load(src)
 801bf02: d1 f8 70 23                  	ldr.w	r2, [r1, #880]
;         self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
 801bf06: 42 f4 80 72                  	orr	r2, r2, #256
;     intrinsics::volatile_store(dst, src);
 801bf0a: c1 f8 70 23                  	str.w	r2, [r1, #880]
;     intrinsics::volatile_load(src)
 801bf0e: d1 f8 70 23                  	ldr.w	r2, [r1, #880]
;         self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
 801bf12: 42 f4 80 72                  	orr	r2, r2, #256
;     intrinsics::volatile_store(dst, src);
 801bf16: c1 f8 70 23                  	str.w	r2, [r1, #880]
;     intrinsics::volatile_load(src)
 801bf1a: 51 f8 38 2c                  	ldr	r2, [r1, #-56]
;         self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
 801bf1e: 42 f4 80 62                  	orr	r2, r2, #1024
;     intrinsics::volatile_store(dst, src);
 801bf22: 41 f8 38 2c                  	str	r2, [r1, #-56]
;     intrinsics::volatile_load(src)
 801bf26: 0a 68                        	ldr	r2, [r1]
;             .modify(|_, w| unsafe { w.rtcsel().bits(rcc.config.rtc_src as u8) });
 801bf28: 90 f8 9e 30                  	ldrb.w	r3, [r0, #158]
;         self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
 801bf2c: 22 f4 40 72                  	bic	r2, r2, #768
 801bf30: 42 ea 03 22                  	orr.w	r2, r2, r3, lsl #8
;     intrinsics::volatile_store(dst, src);
 801bf34: 0a 60                        	str	r2, [r1]
;     intrinsics::volatile_load(src)
 801bf36: 0a 68                        	ldr	r2, [r1]
;         self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
 801bf38: 42 f4 00 42                  	orr	r2, r2, #32768
;     intrinsics::volatile_store(dst, src);
 801bf3c: 0a 60                        	str	r2, [r1]
;             RtcClkSrc::None => 0.hz(),
 801bf3e: 90 f8 9e 10                  	ldrb.w	r1, [r0, #158]
 801bf42: df e8 01 f0                  	tbb	[pc, r1]

0801bf46 $d.336:
 801bf46:	54 02 07 09	.word	0x09070254

0801bf4a $t.337:
;             RtcClkSrc::Lse => rcc.clocks.lse.unwrap(),
 801bf4a: 41 69                        	ldr	r1, [r0, #20]
;             Some(val) => val,
 801bf4c: 00 29                        	cmp	r1, #0
 801bf4e: 56 d0                        	beq	#172 <$t.337+0xb8>
 801bf50: 81 69                        	ldr	r1, [r0, #24]
 801bf52: 0a e0                        	b	#20 <$t.337+0x24>
;             RtcClkSrc::Lsi => rcc.clocks.lsi,
 801bf54: 41 6b                        	ldr	r1, [r0, #52]
 801bf56: 08 e0                        	b	#16 <$t.337+0x24>
;             RtcClkSrc::HseDiv32 => (rcc.clocks.hse.unwrap().0 / 32).hz(),
 801bf58: c1 69                        	ldr	r1, [r0, #28]
;             Some(val) => val,
 801bf5a: 00 29                        	cmp	r1, #0
 801bf5c: 4f d0                        	beq	#158 <$t.337+0xb8>
;             RtcClkSrc::HseDiv32 => (rcc.clocks.hse.unwrap().0 / 32).hz(),
 801bf5e: 01 6a                        	ldr	r1, [r0, #32]
 801bf60: 00 22                        	movs	r2, #0
;         assert!(self > 0);
 801bf62: b2 eb 51 1f                  	cmp.w	r2, r1, lsr #5
 801bf66: 42 d0                        	beq	#132 <$t.337+0xa8>
 801bf68: 49 09                        	lsrs	r1, r1, #5
;         rcc.clocks.rtcclk = match rcc.config.rtc_src {
 801bf6a: 81 63                        	str	r1, [r0, #56]
 801bf6c: 42 f6 0c 00                  	movw	r0, #10252
 801bf70: c4 f2 00 00                  	movt	r0, #16384
 801bf74: ca 21                        	movs	r1, #202
;     intrinsics::volatile_store(dst, src);
 801bf76: 81 61                        	str	r1, [r0, #24]
 801bf78: 53 21                        	movs	r1, #83
 801bf7a: 81 61                        	str	r1, [r0, #24]
;     intrinsics::volatile_load(src)
 801bf7c: 01 68                        	ldr	r1, [r0]
;         if isr.initf().bit_is_clear() {
 801bf7e: 49 06                        	lsls	r1, r1, #25
 801bf80: 0f d4                        	bmi	#30 <$t.337+0x5c>
 801bf82: 4f f0 ff 31                  	mov.w	r1, #4294967295
;     intrinsics::volatile_store(dst, src);
 801bf86: 01 60                        	str	r1, [r0]
;     intrinsics::volatile_load(src)
 801bf88: 01 68                        	ldr	r1, [r0]
;             while rtc.isr.read().initf().bit_is_clear() {} // wait to return to init state
 801bf8a: 49 06                        	lsls	r1, r1, #25
 801bf8c: 09 d4                        	bmi	#18 <$t.337+0x5c>
;     intrinsics::volatile_load(src)
 801bf8e: 01 68                        	ldr	r1, [r0]
;             while rtc.isr.read().initf().bit_is_clear() {} // wait to return to init state
 801bf90: 49 06                        	lsls	r1, r1, #25
;     intrinsics::volatile_load(src)
 801bf92: 5c bf                        	itt	pl
 801bf94: 01 68                        	ldrpl	r1, [r0]
;             while rtc.isr.read().initf().bit_is_clear() {} // wait to return to init state
 801bf96: 5f ea 41 61                  	lslspl.w	r1, r1, #25
 801bf9a: 02 d4                        	bmi	#4 <$t.337+0x5c>
;     intrinsics::volatile_load(src)
 801bf9c: 01 68                        	ldr	r1, [r0]
;             while rtc.isr.read().initf().bit_is_clear() {} // wait to return to init state
 801bf9e: 49 06                        	lsls	r1, r1, #25
 801bfa0: f2 d5                        	bpl	#-28 <$t.337+0x42>
;     intrinsics::volatile_load(src)
 801bfa2: 50 f8 04 1c                  	ldr	r1, [r0, #-4]
 801bfa6: 4f f6 bf 72                  	movw	r2, #65471
 801bfaa: cf f6 8f 72                  	movt	r2, #65423
;         self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
 801bfae: 11 40                        	ands	r1, r2
 801bfb0: 48 f2 00 02                  	movw	r2, #32768
;         self.w.bits = (self.w.bits & !(0x03 << 21)) | (((value as u32) & 0x03) << 21);
 801bfb4: 01 f5 c0 01                  	add.w	r1, r1, #6291456
;     intrinsics::volatile_store(dst, src);
 801bfb8: 40 f8 04 1c                  	str	r1, [r0, #-4]
;     intrinsics::volatile_load(src)
 801bfbc: 50 f8 04 1c                  	ldr	r1, [r0, #-4]
 801bfc0: cf f6 80 72                  	movt	r2, #65408
;         self.w.bits = (self.w.bits & !0x07) | ((value as u32) & 0x07);
 801bfc4: 21 f0 07 01                  	bic	r1, r1, #7
;     intrinsics::volatile_store(dst, src);
 801bfc8: 40 f8 04 1c                  	str	r1, [r0, #-4]
;     intrinsics::volatile_load(src)
 801bfcc: 41 68                        	ldr	r1, [r0, #4]
;         self.w.bits = (self.w.bits & !(0x7f << 16)) | (((value as u32) & 0x7f) << 16);
 801bfce: 11 40                        	ands	r1, r2
 801bfd0: 47 f6 ff 72                  	movw	r2, #32767
 801bfd4: c0 f2 0f 02                  	movt	r2, #15
 801bfd8: 11 43                        	orrs	r1, r2
;     intrinsics::volatile_store(dst, src);
 801bfda: 41 60                        	str	r1, [r0, #4]
 801bfdc: 07 21                        	movs	r1, #7
 801bfde: 01 60                        	str	r1, [r0]
;     intrinsics::volatile_load(src)
 801bfe0: 01 6c                        	ldr	r1, [r0, #64]
;         self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
 801bfe2: 21 f0 03 01                  	bic	r1, r1, #3
;     intrinsics::volatile_store(dst, src);
 801bfe6: 01 64                        	str	r1, [r0, #64]
 801bfe8: ff 21                        	movs	r1, #255
 801bfea: 81 61                        	str	r1, [r0, #24]
;     }
 801bfec: 80 bd                        	pop	{r7, pc}
 801bfee: 40 f6 2a 20                  	movw	r0, #2602
 801bff2: 1a 21                        	movs	r1, #26
 801bff4: c0 f6 02 00                  	movt	r0, #2050
 801bff8: fa f7 2e fa                  	bl	#-23460
 801bffc: fe de                        	trap
 801bffe: 40 f6 44 20                  	movw	r0, #2628
 801c002: 2b 21                        	movs	r1, #43
 801c004: c0 f6 02 00                  	movt	r0, #2050
 801c008: fa f7 26 fa                  	bl	#-23476
 801c00c: fe de                        	trap
 801c00e: 00 00                        	movs	r0, r0

0801c010 _$LT$stm32wb_hal..tl_mbox..consts..TlPacketType$u20$as$u20$core..convert..TryFrom$LT$u8$GT$$GT$::try_from::h46893482328133ec:
;     fn try_from(value: u8) -> Result<Self, Self::Error> {
 801c010: 4f f0 ff 31                  	mov.w	r1, #4294967295
;             0x01 => Ok(TlPacketType::BleCmd),
 801c014: 51 fa 80 f1                  	uxtab	r1, r1, r0
 801c018: 42 20                        	movs	r0, #66
 801c01a: 40 29                        	cmp	r1, #64
;     }
 801c01c: 88 bf                        	it	hi
 801c01e: 70 47                        	bxhi	lr
 801c020: df e8 01 f0                  	tbb	[pc, r1]

0801c024 $d.339:
 801c024:	21 23 42 25	.word	0x25422321
 801c028:	42 42 42 27	.word	0x27424242
 801c02c:	29 2b 42 2d	.word	0x2d422b29
 801c030:	2f 31 33 35	.word	0x3533312f
 801c034:	37 39 42 42	.word	0x42423937
 801c038:	42 42 42 42	.word	0x42424242
 801c03c:	42 42 42 42	.word	0x42424242
 801c040:	42 42 42 3b	.word	0x3b424242
 801c044:	3d 42 42 42	.word	0x4242423d
 801c048:	42 42 42 42	.word	0x42424242
 801c04c:	42 42 42 42	.word	0x42424242
 801c050:	42 42 42 42	.word	0x42424242
 801c054:	42 42 42 42	.word	0x42424242
 801c058:	42 42 42 42	.word	0x42424242
 801c05c:	42 42 42 42	.word	0x42424242
 801c060:	42 42 42 3f	.word	0x3f424242
 801c064:	41 00		.short	0x0041

0801c066 $t.340:
 801c066: 01 20                        	movs	r0, #1
 801c068: 70 47                        	bx	lr
 801c06a: 02 20                        	movs	r0, #2
 801c06c: 70 47                        	bx	lr
 801c06e: 04 20                        	movs	r0, #4
 801c070: 70 47                        	bx	lr
 801c072: 08 20                        	movs	r0, #8
 801c074: 70 47                        	bx	lr
 801c076: 09 20                        	movs	r0, #9
 801c078: 70 47                        	bx	lr
 801c07a: 0a 20                        	movs	r0, #10
 801c07c: 70 47                        	bx	lr
 801c07e: 0c 20                        	movs	r0, #12
 801c080: 70 47                        	bx	lr
 801c082: 0d 20                        	movs	r0, #13
 801c084: 70 47                        	bx	lr
 801c086: 0e 20                        	movs	r0, #14
 801c088: 70 47                        	bx	lr
 801c08a: 0f 20                        	movs	r0, #15
 801c08c: 70 47                        	bx	lr
 801c08e: 10 20                        	movs	r0, #16
 801c090: 70 47                        	bx	lr
 801c092: 11 20                        	movs	r0, #17
 801c094: 70 47                        	bx	lr
 801c096: 12 20                        	movs	r0, #18
 801c098: 70 47                        	bx	lr
 801c09a: 20 20                        	movs	r0, #32
 801c09c: 70 47                        	bx	lr
 801c09e: 21 20                        	movs	r0, #33
 801c0a0: 70 47                        	bx	lr
 801c0a2: 40 20                        	movs	r0, #64
 801c0a4: 70 47                        	bx	lr
 801c0a6: 41 20                        	movs	r0, #65
 801c0a8: 70 47                        	bx	lr

0801c0aa stm32wb_hal::tl_mbox::mm::send_free_buf::hb7e1cdef026af748:
; pub fn send_free_buf() {
 801c0aa: f0 b5                        	push	{r4, r5, r6, r7, lr}
 801c0ac: 03 af                        	add	r7, sp, #12
 801c0ae: 2d e9 00 0b                  	push.w	{r8, r9, r11}
 801c0b2: 40 f2 08 29                  	movw	r9, #520
 801c0b6: 40 f2 00 08                  	movw	r8, #0
 801c0ba: c2 f2 00 09                  	movt	r9, #8192
 801c0be: c2 f2 03 08                  	movt	r8, #8195
;                     unsafe { __primask() }
 801c0c2: 00 f0 e0 f8                  	bl	#448
 801c0c6: 04 46                        	mov	r4, r0
;             __cpsid();
 801c0c8: 00 f0 d5 f8                  	bl	#426
;     if primask.is_active() {
 801c0cc: e0 07                        	lsls	r0, r4, #31
;     interrupt::free(|_| ((*listHead).next) == listHead)
 801c0ce: d9 f8 0c 50                  	ldr.w	r5, [r9, #12]
;             __cpsie();
 801c0d2: 08 bf                        	it	eq
 801c0d4: 00 f0 d1 f8                  	bleq	#418
;     interrupt::free(|_| ((*listHead).next) == listHead)
 801c0d8: 09 f1 0c 00                  	add.w	r0, r9, #12
;         while !LST_is_empty(LOCAL_FREE_BUF_QUEUE.as_mut_ptr()) {
 801c0dc: 85 42                        	cmp	r5, r0
 801c0de: 2e d0                        	beq	#92 <_ZN11stm32wb_hal7tl_mbox2mm13send_free_buf17hb7e1cdef026af748E+0x98>
;                     unsafe { __primask() }
 801c0e0: 00 f0 d1 f8                  	bl	#418
 801c0e4: 04 46                        	mov	r4, r0
;             __cpsid();
 801c0e6: 00 f0 c6 f8                  	bl	#396
;         *node = (*listHead).next;
 801c0ea: d9 f8 0c 60                  	ldr.w	r6, [r9, #12]
;                     unsafe { __primask() }
 801c0ee: 00 f0 ca f8                  	bl	#404
 801c0f2: 05 46                        	mov	r5, r0
;             __cpsid();
 801c0f4: 00 f0 bf f8                  	bl	#382
;         (*(*node).prev).next = (*node).next;
 801c0f8: d6 e9 00 01                  	ldrd	r0, r1, [r6]
;             if r & (1 << 0) == (1 << 0) {
 801c0fc: 04 f0 01 04                  	and	r4, r4, #1
;         (*(*node).prev).next = (*node).next;
 801c100: 08 60                        	str	r0, [r1]
;         (*(*node).next).prev = (*node).prev;
 801c102: d6 e9 00 01                  	ldrd	r0, r1, [r6]
 801c106: 41 60                        	str	r1, [r0, #4]
;     if primask.is_active() {
 801c108: e8 07                        	lsls	r0, r5, #31
;             __cpsie();
 801c10a: 08 bf                        	it	eq
 801c10c: 00 f0 b5 f8                  	bleq	#362
;     if primask.is_active() {
 801c110: 00 2c                        	cmp	r4, #0
;             __cpsie();
 801c112: 08 bf                        	it	eq
 801c114: 00 f0 b1 f8                  	bleq	#354
;                 (&*(*TL_REF_TABLE.as_ptr()).mem_manager_table).pevt_free_buffer_queue,
 801c118: d8 f8 10 00                  	ldr.w	r0, [r8, #16]
 801c11c: 05 69                        	ldr	r5, [r0, #16]
;                     unsafe { __primask() }
 801c11e: 00 f0 b2 f8                  	bl	#356
 801c122: 04 46                        	mov	r4, r0
;             __cpsid();
 801c124: 00 f0 a7 f8                  	bl	#334
;         (*node).next = listHead;
 801c128: 35 60                        	str	r5, [r6]
;         (*node).prev = (*listHead).prev;
 801c12a: 68 68                        	ldr	r0, [r5, #4]
 801c12c: 70 60                        	str	r0, [r6, #4]
;         (*listHead).prev = node;
 801c12e: 6e 60                        	str	r6, [r5, #4]
;         (*(*node).prev).next = node;
 801c130: 70 68                        	ldr	r0, [r6, #4]
 801c132: 06 60                        	str	r6, [r0]
;     if primask.is_active() {
 801c134: e0 07                        	lsls	r0, r4, #31
 801c136: c4 d1                        	bne	#-120 <_ZN11stm32wb_hal7tl_mbox2mm13send_free_buf17hb7e1cdef026af748E+0x1c>
;             __cpsie();
 801c138: 00 f0 9f f8                  	bl	#318
 801c13c: c1 e7                        	b	#-126 <_ZN11stm32wb_hal7tl_mbox2mm13send_free_buf17hb7e1cdef026af748E+0x1c>
; }
 801c13e: bd e8 00 0b                  	pop.w	{r8, r9, r11}
 801c142: f0 bd                        	pop	{r4, r5, r6, r7, pc}

0801c144 core::ptr::drop_in_place::hdbd857f0b5eba22b:
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
 801c144: f0 b5                        	push	{r4, r5, r6, r7, lr}
 801c146: 03 af                        	add	r7, sp, #12
 801c148: 4d f8 04 bd                  	str	r11, [sp, #-4]!
;         DEVICE_PERIPHERALS = true;
 801c14c: 40 f2 08 25                  	movw	r5, #520
 801c150: 01 21                        	movs	r1, #1
 801c152: c2 f2 00 05                  	movt	r5, #8192
 801c156: 29 70                        	strb	r1, [r5]
;         super::mm::evt_drop(self.ptr, &mut ipcc);
 801c158: 06 68                        	ldr	r6, [r0]
;                     unsafe { __primask() }
 801c15a: 00 f0 94 f8                  	bl	#296
 801c15e: 04 46                        	mov	r4, r0
;             __cpsid();
 801c160: 00 f0 89 f8                  	bl	#274
;         (*node).next = listHead;
 801c164: 05 f1 0c 00                  	add.w	r0, r5, #12
 801c168: 30 60                        	str	r0, [r6]
;         (*node).prev = (*listHead).prev;
 801c16a: 28 69                        	ldr	r0, [r5, #16]
 801c16c: 70 60                        	str	r0, [r6, #4]
;         (*listHead).prev = node;
 801c16e: 2e 61                        	str	r6, [r5, #16]
;         (*(*node).prev).next = node;
 801c170: 70 68                        	ldr	r0, [r6, #4]
 801c172: 06 60                        	str	r6, [r0]
;     if primask.is_active() {
 801c174: e0 07                        	lsls	r0, r4, #31
;             __cpsie();
 801c176: 08 bf                        	it	eq
 801c178: 00 f0 7f f8                  	bleq	#254
 801c17c: 40 f6 04 44                  	movw	r4, #3076
 801c180: c5 f6 00 04                  	movt	r4, #22528
;     intrinsics::volatile_load(src)
 801c184: a0 68                        	ldr	r0, [r4, #8]
;         if channel_is_busy {
 801c186: 00 07                        	lsls	r0, r0, #28
 801c188: 07 d4                        	bmi	#14 <_ZN4core3ptr13drop_in_place17hdbd857f0b5eba22bE+0x5a>
;             send_free_buf();
 801c18a: ff f7 8e ff                  	bl	#-228
 801c18e: 4f f4 00 20                  	mov.w	r0, #524288
;     intrinsics::volatile_store(dst, src);
 801c192: 60 60                        	str	r0, [r4, #4]
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
 801c194: 5d f8 04 bb                  	ldr	r11, [sp], #4
 801c198: f0 bd                        	pop	{r4, r5, r6, r7, pc}
;     intrinsics::volatile_load(src)
 801c19a: 20 68                        	ldr	r0, [r4]
;         self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
 801c19c: 20 f4 00 20                  	bic	r0, r0, #524288
;     intrinsics::volatile_store(dst, src);
 801c1a0: 20 60                        	str	r0, [r4]
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
 801c1a2: 5d f8 04 bb                  	ldr	r11, [sp], #4
 801c1a6: f0 bd                        	pop	{r4, r5, r6, r7, pc}

0801c1a8 _$LT$stm32wb_hal..tl_mbox..evt..EvtBox$u20$as$u20$core..fmt..Debug$GT$::fmt::h6cde5c26d2ff06d7:
; #[derive(Debug)]
 801c1a8: b0 b5                        	push	{r4, r5, r7, lr}
 801c1aa: 02 af                        	add	r7, sp, #8
 801c1ac: 84 b0                        	sub	sp, #16
 801c1ae: 0c 46                        	mov	r4, r1
 801c1b0: 05 46                        	mov	r5, r0
 801c1b2: d1 e9 06 01                  	ldrd	r0, r1, [r1, #24]
 801c1b6: 06 22                        	movs	r2, #6
 801c1b8: cb 68                        	ldr	r3, [r1, #12]
 801c1ba: 40 f6 ac 21                  	movw	r1, #2732
 801c1be: c0 f6 02 01                  	movt	r1, #2050
 801c1c2: 98 47                        	blx	r3
 801c1c4: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 801c1c8: 40 f6 b8 20                  	movw	r0, #2744
 801c1cc: 00 21                        	movs	r1, #0
 801c1ce: c0 f6 02 00                  	movt	r0, #2050
 801c1d2: 8d f8 09 10                  	strb.w	r1, [sp, #9]
 801c1d6: 40 f6 b2 21                  	movw	r1, #2738
 801c1da: 00 90                        	str	r0, [sp]
 801c1dc: 01 a8                        	add	r0, sp, #4
 801c1de: 03 ab                        	add	r3, sp, #12
 801c1e0: c0 f6 02 01                  	movt	r1, #2050
 801c1e4: 03 22                        	movs	r2, #3
 801c1e6: 01 94                        	str	r4, [sp, #4]
;     ptr: *mut EvtPacket,
 801c1e8: 03 95                        	str	r5, [sp, #12]
; #[derive(Debug)]
 801c1ea: fa f7 a1 fa                  	bl	#-23230
 801c1ee: 9d f8 09 10                  	ldrb.w	r1, [sp, #9]
 801c1f2: 9d f8 08 00                  	ldrb.w	r0, [sp, #8]
 801c1f6: b9 b1                        	cbz	r1, #46
 801c1f8: 08 b1                        	cbz	r0, #2
 801c1fa: 01 20                        	movs	r0, #1
 801c1fc: 12 e0                        	b	#36 <_ZN70_$LT$stm32wb_hal..tl_mbox..evt..EvtBox$u20$as$u20$core..fmt..Debug$GT$3fmt17h6cde5c26d2ff06d7E+0x80>
 801c1fe: 01 99                        	ldr	r1, [sp, #4]
 801c200: d1 e9 06 02                  	ldrd	r0, r2, [r1, #24]
 801c204: 09 78                        	ldrb	r1, [r1]
 801c206: d3 68                        	ldr	r3, [r2, #12]
 801c208: 49 07                        	lsls	r1, r1, #29
 801c20a: 05 d4                        	bmi	#10 <_ZN70_$LT$stm32wb_hal..tl_mbox..evt..EvtBox$u20$as$u20$core..fmt..Debug$GT$3fmt17h6cde5c26d2ff06d7E+0x74>
 801c20c: 4e f6 1c 41                  	movw	r1, #60444
 801c210: 02 22                        	movs	r2, #2
 801c212: c0 f6 01 01                  	movt	r1, #2049
 801c216: 04 e0                        	b	#8 <_ZN70_$LT$stm32wb_hal..tl_mbox..evt..EvtBox$u20$as$u20$core..fmt..Debug$GT$3fmt17h6cde5c26d2ff06d7E+0x7e>
 801c218: 4e f6 d6 41                  	movw	r1, #60630
 801c21c: 01 22                        	movs	r2, #1
 801c21e: c0 f6 01 01                  	movt	r1, #2049
 801c222: 98 47                        	blx	r3
 801c224: 8d f8 08 00                  	strb.w	r0, [sp, #8]
 801c228: 00 28                        	cmp	r0, #0
 801c22a: 18 bf                        	it	ne
 801c22c: 01 20                        	movne	r0, #1
 801c22e: 04 b0                        	add	sp, #16
 801c230: b0 bd                        	pop	{r4, r5, r7, pc}

0801c232 _$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$::fmt::hede1c5595b8c1caa:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801c232: f0 b5                        	push	{r4, r5, r6, r7, lr}
 801c234: 03 af                        	add	r7, sp, #12
 801c236: 4d f8 04 8d                  	str	r8, [sp, #-4]!
 801c23a: 00 68                        	ldr	r0, [r0]
 801c23c: 0c 46                        	mov	r4, r1
;         let old_flags = f.flags;
 801c23e: 0d 68                        	ldr	r5, [r1]
;         let old_width = f.width;
 801c240: d1 e9 02 68                  	ldrd	r6, r8, [r1, #8]
;         Pointer::fmt(&(*self as *const T), f)
 801c244: 00 68                        	ldr	r0, [r0]
;         if f.alternate() {
 801c246: 69 07                        	lsls	r1, r5, #29
;         f.flags |= 1 << (FlagV1::Alternate as u32);
 801c248: 29 46                        	mov	r1, r5
;         if f.alternate() {
 801c24a: 08 d5                        	bpl	#16 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hede1c5595b8c1caaE+0x30>
;             f.flags |= 1 << (FlagV1::SignAwareZeroPad as u32);
 801c24c: 45 f0 08 01                  	orr	r1, r5, #8
 801c250: 21 60                        	str	r1, [r4]
;             if f.width.is_none() {
 801c252: 00 2e                        	cmp	r6, #0
 801c254: 02 bf                        	ittt	eq
 801c256: 0a 22                        	moveq	r2, #10
 801c258: 01 23                        	moveq	r3, #1
;                 f.width = Some(((mem::size_of::<usize>() * 8) / 4) + 2);
 801c25a: c4 e9 02 32                  	strdeq	r3, r2, [r4, #8]
;         f.flags |= 1 << (FlagV1::Alternate as u32);
 801c25e: 41 f0 04 01                  	orr	r1, r1, #4
 801c262: 21 60                        	str	r1, [r4]
;         let ret = LowerHex::fmt(&(*self as *const () as usize), f);
 801c264: 21 46                        	mov	r1, r4
 801c266: fa f7 ed fe                  	bl	#-21030
;         f.width = old_width;
 801c26a: c4 e9 02 68                  	strd	r6, r8, [r4, #8]
;         f.flags = old_flags;
 801c26e: 25 60                        	str	r5, [r4]
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 801c270: 5d f8 04 8b                  	ldr	r8, [sp], #4
 801c274: f0 bd                        	pop	{r4, r5, r6, r7, pc}

0801c276 __cpsid:
 801c276: 72 b6                        	cpsid i
 801c278: 70 47                        	bx	lr

0801c27a __cpsie:
 801c27a: 62 b6                        	cpsie i
 801c27c: 70 47                        	bx	lr

0801c27e __dsb:
 801c27e: bf f3 4f 8f                  	dsb	sy
 801c282: 70 47                        	bx	lr

0801c284 __nop:
 801c284: 70 47                        	bx	lr

0801c286 __primask:
 801c286: ef f3 10 80                  	mrs	r0, primask
 801c28a: 70 47                        	bx	lr

0801c28c __wfi:
 801c28c: 30 bf                        	wfi
 801c28e: 70 47                        	bx	lr

0801c290 __basepri_w:
 801c290: 80 f3 11 88                  	msr	basepri, r0
 801c294: 70 47                        	bx	lr

0801c296 memcmp:
 801c296: f0 b5                        	push	{r4, r5, r6, r7, lr}
 801c298: 03 af                        	add	r7, sp, #12
 801c29a: 2d e9 00 0b                  	push.w	{r8, r9, r11}
 801c29e: 4a b3                        	cbz	r2, #82
 801c2a0: a2 f1 01 0e                  	sub.w	lr, r2, #1
 801c2a4: c2 f1 00 0c                  	rsb.w	r12, r2, #0
 801c2a8: 00 23                        	movs	r3, #0
 801c2aa: cc 5c                        	ldrb	r4, [r1, r3]
 801c2ac: c5 5c                        	ldrb	r5, [r0, r3]
 801c2ae: a5 42                        	cmp	r5, r4
 801c2b0: 24 d1                        	bne	#72 <memcmp+0x6a>
 801c2b2: 9e 45                        	cmp	lr, r3
 801c2b4: 1e d0                        	beq	#60 <memcmp+0x62>
 801c2b6: 00 eb 03 08                  	add.w	r8, r0, r3
 801c2ba: 01 eb 03 09                  	add.w	r9, r1, r3
 801c2be: 99 f8 01 40                  	ldrb.w	r4, [r9, #1]
 801c2c2: 98 f8 01 50                  	ldrb.w	r5, [r8, #1]
 801c2c6: a5 42                        	cmp	r5, r4
 801c2c8: 18 d1                        	bne	#48 <memcmp+0x6a>
 801c2ca: 0c eb 03 06                  	add.w	r6, r12, r3
 801c2ce: b4 1c                        	adds	r4, r6, #2
 801c2d0: 10 d0                        	beq	#32 <memcmp+0x62>
 801c2d2: 99 f8 02 40                  	ldrb.w	r4, [r9, #2]
 801c2d6: 98 f8 02 50                  	ldrb.w	r5, [r8, #2]
 801c2da: a5 42                        	cmp	r5, r4
 801c2dc: 0e d1                        	bne	#28 <memcmp+0x6a>
 801c2de: f4 1c                        	adds	r4, r6, #3
 801c2e0: 08 d0                        	beq	#16 <memcmp+0x62>
 801c2e2: 99 f8 03 40                  	ldrb.w	r4, [r9, #3]
 801c2e6: 98 f8 03 50                  	ldrb.w	r5, [r8, #3]
 801c2ea: a5 42                        	cmp	r5, r4
 801c2ec: 06 d1                        	bne	#12 <memcmp+0x6a>
 801c2ee: 04 33                        	adds	r3, #4
 801c2f0: 9a 42                        	cmp	r2, r3
 801c2f2: da d1                        	bne	#-76 <memcmp+0x18>
 801c2f4: 00 20                        	movs	r0, #0
 801c2f6: bd e8 00 0b                  	pop.w	{r8, r9, r11}
 801c2fa: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 801c2fc: 28 1b                        	subs	r0, r5, r4
 801c2fe: bd e8 00 0b                  	pop.w	{r8, r9, r11}
 801c302: f0 bd                        	pop	{r4, r5, r6, r7, pc}

0801c304 __aeabi_uldivmod:
 801c304: 10 b5                        	push	{r4, lr}
 801c306: 84 b0                        	sub	sp, #16
 801c308: 02 ac                        	add	r4, sp, #8
 801c30a: 00 94                        	str	r4, [sp]
 801c30c: 00 f0 7d f9                  	bl	#762
 801c310: 02 9a                        	ldr	r2, [sp, #8]
 801c312: 03 9b                        	ldr	r3, [sp, #12]
 801c314: 04 b0                        	add	sp, #16
 801c316: 10 bd                        	pop	{r4, pc}
 801c318: fe de                        	trap

0801c31a __aeabi_memcpy:
 801c31a: f0 b5                        	push	{r4, r5, r6, r7, lr}
 801c31c: 03 af                        	add	r7, sp, #12
 801c31e: 4d f8 04 8d                  	str	r8, [sp, #-4]!
 801c322: 42 b1                        	cbz	r2, #16
 801c324: 53 1e                        	subs	r3, r2, #1
 801c326: 02 f0 03 0c                  	and	r12, r2, #3
 801c32a: 03 2b                        	cmp	r3, #3
 801c32c: 06 d2                        	bhs	#12 <__aeabi_memcpy+0x26>
 801c32e: 00 22                        	movs	r2, #0
 801c330: bc f1 00 0f                  	cmp.w	r12, #0
 801c334: 1d d1                        	bne	#58 <__aeabi_memcpy+0x5c>
 801c336: 5d f8 04 8b                  	ldr	r8, [sp], #4
 801c33a: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 801c33c: ac eb 02 0e                  	sub.w	lr, r12, r2
 801c340: 01 f1 01 08                  	add.w	r8, r1, #1
 801c344: 44 1c                        	adds	r4, r0, #1
 801c346: 6f f0 03 02                  	mvn	r2, #3
 801c34a: 08 eb 02 05                  	add.w	r5, r8, r2
 801c34e: a3 18                        	adds	r3, r4, r2
 801c350: 04 32                        	adds	r2, #4
 801c352: ee 78                        	ldrb	r6, [r5, #3]
 801c354: de 70                        	strb	r6, [r3, #3]
 801c356: 2e 79                        	ldrb	r6, [r5, #4]
 801c358: 1e 71                        	strb	r6, [r3, #4]
 801c35a: 6e 79                        	ldrb	r6, [r5, #5]
 801c35c: 5e 71                        	strb	r6, [r3, #5]
 801c35e: ad 79                        	ldrb	r5, [r5, #6]
 801c360: 9d 71                        	strb	r5, [r3, #6]
 801c362: 0e eb 02 03                  	add.w	r3, lr, r2
 801c366: 04 33                        	adds	r3, #4
 801c368: ef d1                        	bne	#-34 <__aeabi_memcpy+0x34>
 801c36a: 04 32                        	adds	r2, #4
 801c36c: bc f1 00 0f                  	cmp.w	r12, #0
 801c370: e1 d0                        	beq	#-62 <__aeabi_memcpy+0x20>
 801c372: 8b 5c                        	ldrb	r3, [r1, r2]
 801c374: bc f1 01 0f                  	cmp.w	r12, #1
 801c378: 83 54                        	strb	r3, [r0, r2]
 801c37a: dc d0                        	beq	#-72 <__aeabi_memcpy+0x20>
 801c37c: 53 1c                        	adds	r3, r2, #1
 801c37e: bc f1 02 0f                  	cmp.w	r12, #2
 801c382: ce 5c                        	ldrb	r6, [r1, r3]
 801c384: c6 54                        	strb	r6, [r0, r3]
 801c386: d6 d0                        	beq	#-84 <__aeabi_memcpy+0x20>
 801c388: 02 32                        	adds	r2, #2
 801c38a: 89 5c                        	ldrb	r1, [r1, r2]
 801c38c: 81 54                        	strb	r1, [r0, r2]
 801c38e: 5d f8 04 8b                  	ldr	r8, [sp], #4
 801c392: f0 bd                        	pop	{r4, r5, r6, r7, pc}

0801c394 __aeabi_memcpy4:
 801c394: 04 2a                        	cmp	r2, #4
 801c396: 38 bf                        	it	lo
 801c398: ff f7 bf bf                  	blo.w	#-130 <__aeabi_memcpy+0x4>
 801c39c: b0 b5                        	push	{r4, r5, r7, lr}
 801c39e: 02 af                        	add	r7, sp, #8
 801c3a0: a2 f1 04 0c                  	sub.w	r12, r2, #4
 801c3a4: 01 23                        	movs	r3, #1
 801c3a6: 03 eb 9c 03                  	add.w	r3, r3, r12, lsr #2
 801c3aa: 13 f0 03 03                  	ands	r3, r3, #3
 801c3ae: 0e d0                        	beq	#28 <__aeabi_memcpy4+0x3e>
 801c3b0: 8e 46                        	mov	lr, r1
 801c3b2: 04 46                        	mov	r4, r0
 801c3b4: 5e f8 04 5b                  	ldr	r5, [lr], #4
 801c3b8: 01 2b                        	cmp	r3, #1
 801c3ba: 44 f8 04 5b                  	str	r5, [r4], #4
 801c3be: 0b d1                        	bne	#22 <__aeabi_memcpy4+0x48>
 801c3c0: 63 46                        	mov	r3, r12
 801c3c2: 20 46                        	mov	r0, r4
 801c3c4: 71 46                        	mov	r1, lr
 801c3c6: bc f1 0c 0f                  	cmp.w	r12, #12
 801c3ca: 1a d2                        	bhs	#52 <__aeabi_memcpy4+0x72>
 801c3cc: 28 e0                        	b	#80 <__aeabi_memcpy4+0x90>
 801c3ce: 13 46                        	mov	r3, r2
 801c3d0: bc f1 0c 0f                  	cmp.w	r12, #12
 801c3d4: 15 d2                        	bhs	#42 <__aeabi_memcpy4+0x72>
 801c3d6: 23 e0                        	b	#70 <__aeabi_memcpy4+0x90>
 801c3d8: 4d 68                        	ldr	r5, [r1, #4]
 801c3da: 02 2b                        	cmp	r3, #2
 801c3dc: 45 60                        	str	r5, [r0, #4]
 801c3de: 07 d1                        	bne	#14 <__aeabi_memcpy4+0x60>
 801c3e0: a2 f1 08 03                  	sub.w	r3, r2, #8
 801c3e4: 08 31                        	adds	r1, #8
 801c3e6: 08 30                        	adds	r0, #8
 801c3e8: bc f1 0c 0f                  	cmp.w	r12, #12
 801c3ec: 09 d2                        	bhs	#18 <__aeabi_memcpy4+0x72>
 801c3ee: 17 e0                        	b	#46 <__aeabi_memcpy4+0x90>
 801c3f0: 8b 68                        	ldr	r3, [r1, #8]
 801c3f2: 0c 31                        	adds	r1, #12
 801c3f4: 83 60                        	str	r3, [r0, #8]
 801c3f6: a2 f1 0c 03                  	sub.w	r3, r2, #12
 801c3fa: 0c 30                        	adds	r0, #12
 801c3fc: bc f1 0c 0f                  	cmp.w	r12, #12
 801c400: 0e d3                        	blo	#28 <__aeabi_memcpy4+0x90>
 801c402: 0d 68                        	ldr	r5, [r1]
 801c404: 10 3b                        	subs	r3, #16
 801c406: 05 60                        	str	r5, [r0]
 801c408: 03 2b                        	cmp	r3, #3
 801c40a: 4d 68                        	ldr	r5, [r1, #4]
 801c40c: 45 60                        	str	r5, [r0, #4]
 801c40e: 8d 68                        	ldr	r5, [r1, #8]
 801c410: 85 60                        	str	r5, [r0, #8]
 801c412: cd 68                        	ldr	r5, [r1, #12]
 801c414: 01 f1 10 01                  	add.w	r1, r1, #16
 801c418: c5 60                        	str	r5, [r0, #12]
 801c41a: 00 f1 10 00                  	add.w	r0, r0, #16
 801c41e: f0 d8                        	bhi	#-32 <__aeabi_memcpy4+0x72>
 801c420: 02 f0 03 02                  	and	r2, r2, #3
 801c424: bd e8 b0 40                  	pop.w	{r4, r5, r7, lr}
 801c428: ff f7 77 bf                  	b.w	#-274 <__aeabi_memcpy+0x4>

0801c42c __aeabi_memcpy8:
 801c42c: ff f7 b2 bf                  	b.w	#-156 <__aeabi_memcpy4+0x4>

0801c430 __aeabi_memmove:
 801c430: f0 b5                        	push	{r4, r5, r6, r7, lr}
 801c432: 03 af                        	add	r7, sp, #12
 801c434: 4d f8 04 8d                  	str	r8, [sp, #-4]!
 801c438: 81 42                        	cmp	r1, r0
 801c43a: 16 d2                        	bhs	#44 <__aeabi_memmove+0x3e>
 801c43c: 00 2a                        	cmp	r2, #0
 801c43e: 63 d0                        	beq	#198 <__aeabi_memmove+0xdc>
 801c440: 12 f0 03 04                  	ands	r4, r2, #3
 801c444: a2 f1 01 0c                  	sub.w	r12, r2, #1
 801c448: 47 d0                        	beq	#142 <__aeabi_memmove+0xae>
 801c44a: 11 f8 0c 30                  	ldrb.w	r3, [r1, r12]
 801c44e: 01 2c                        	cmp	r4, #1
 801c450: 00 f8 0c 30                  	strb.w	r3, [r0, r12]
 801c454: 63 46                        	mov	r3, r12
 801c456: 41 d0                        	beq	#130 <__aeabi_memmove+0xb0>
 801c458: 93 1e                        	subs	r3, r2, #2
 801c45a: 02 2c                        	cmp	r4, #2
 801c45c: ce 5c                        	ldrb	r6, [r1, r3]
 801c45e: c6 54                        	strb	r6, [r0, r3]
 801c460: 3c d0                        	beq	#120 <__aeabi_memmove+0xb0>
 801c462: d3 1e                        	subs	r3, r2, #3
 801c464: ca 5c                        	ldrb	r2, [r1, r3]
 801c466: c2 54                        	strb	r2, [r0, r3]
 801c468: 38 e0                        	b	#112 <__aeabi_memmove+0xb0>
 801c46a: 00 2a                        	cmp	r2, #0
 801c46c: 4c d0                        	beq	#152 <__aeabi_memmove+0xdc>
 801c46e: 53 1e                        	subs	r3, r2, #1
 801c470: 02 f0 03 0c                  	and	r12, r2, #3
 801c474: 03 2b                        	cmp	r3, #3
 801c476: 04 d2                        	bhs	#8 <__aeabi_memmove+0x56>
 801c478: 00 22                        	movs	r2, #0
 801c47a: bc f1 00 0f                  	cmp.w	r12, #0
 801c47e: 1b d1                        	bne	#54 <__aeabi_memmove+0x8c>
 801c480: 42 e0                        	b	#132 <__aeabi_memmove+0xdc>
 801c482: ac eb 02 0e                  	sub.w	lr, r12, r2
 801c486: 01 f1 01 08                  	add.w	r8, r1, #1
 801c48a: 44 1c                        	adds	r4, r0, #1
 801c48c: 6f f0 03 02                  	mvn	r2, #3
 801c490: 08 eb 02 05                  	add.w	r5, r8, r2
 801c494: a3 18                        	adds	r3, r4, r2
 801c496: 04 32                        	adds	r2, #4
 801c498: ee 78                        	ldrb	r6, [r5, #3]
 801c49a: de 70                        	strb	r6, [r3, #3]
 801c49c: 2e 79                        	ldrb	r6, [r5, #4]
 801c49e: 1e 71                        	strb	r6, [r3, #4]
 801c4a0: 6e 79                        	ldrb	r6, [r5, #5]
 801c4a2: 5e 71                        	strb	r6, [r3, #5]
 801c4a4: ad 79                        	ldrb	r5, [r5, #6]
 801c4a6: 9d 71                        	strb	r5, [r3, #6]
 801c4a8: 0e eb 02 03                  	add.w	r3, lr, r2
 801c4ac: 04 33                        	adds	r3, #4
 801c4ae: ef d1                        	bne	#-34 <__aeabi_memmove+0x64>
 801c4b0: 04 32                        	adds	r2, #4
 801c4b2: bc f1 00 0f                  	cmp.w	r12, #0
 801c4b6: 27 d0                        	beq	#78 <__aeabi_memmove+0xdc>
 801c4b8: 8b 5c                        	ldrb	r3, [r1, r2]
 801c4ba: bc f1 01 0f                  	cmp.w	r12, #1
 801c4be: 83 54                        	strb	r3, [r0, r2]
 801c4c0: 22 d0                        	beq	#68 <__aeabi_memmove+0xdc>
 801c4c2: 53 1c                        	adds	r3, r2, #1
 801c4c4: bc f1 02 0f                  	cmp.w	r12, #2
 801c4c8: ce 5c                        	ldrb	r6, [r1, r3]
 801c4ca: c6 54                        	strb	r6, [r0, r3]
 801c4cc: 1c d0                        	beq	#56 <__aeabi_memmove+0xdc>
 801c4ce: 02 32                        	adds	r2, #2
 801c4d0: 89 5c                        	ldrb	r1, [r1, r2]
 801c4d2: 81 54                        	strb	r1, [r0, r2]
 801c4d4: 5d f8 04 8b                  	ldr	r8, [sp], #4
 801c4d8: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 801c4da: 13 46                        	mov	r3, r2
 801c4dc: bc f1 03 0f                  	cmp.w	r12, #3
 801c4e0: 12 d3                        	blo	#36 <__aeabi_memmove+0xdc>
 801c4e2: a1 f1 04 0c                  	sub.w	r12, r1, #4
 801c4e6: 02 38                        	subs	r0, #2
 801c4e8: 0c eb 03 02                  	add.w	r2, r12, r3
 801c4ec: c1 18                        	adds	r1, r0, r3
 801c4ee: d4 78                        	ldrb	r4, [r2, #3]
 801c4f0: 4c 70                        	strb	r4, [r1, #1]
 801c4f2: 94 78                        	ldrb	r4, [r2, #2]
 801c4f4: c4 54                        	strb	r4, [r0, r3]
 801c4f6: 52 78                        	ldrb	r2, [r2, #1]
 801c4f8: 01 f8 01 2c                  	strb	r2, [r1, #-1]
 801c4fc: 1c f8 03 20                  	ldrb.w	r2, [r12, r3]
 801c500: 04 3b                        	subs	r3, #4
 801c502: 01 f8 02 2c                  	strb	r2, [r1, #-2]
 801c506: ef d1                        	bne	#-34 <__aeabi_memmove+0xbc>
 801c508: 5d f8 04 8b                  	ldr	r8, [sp], #4
 801c50c: f0 bd                        	pop	{r4, r5, r6, r7, pc}

0801c50e __aeabi_memset:
 801c50e: d0 b5                        	push	{r4, r6, r7, lr}
 801c510: 02 af                        	add	r7, sp, #8
 801c512: e9 b1                        	cbz	r1, #58
 801c514: 4b 1e                        	subs	r3, r1, #1
 801c516: 01 f0 03 0c                  	and	r12, r1, #3
 801c51a: 03 2b                        	cmp	r3, #3
 801c51c: 01 d2                        	bhs	#2 <__aeabi_memset+0x18>
 801c51e: 00 21                        	movs	r1, #0
 801c520: 0f e0                        	b	#30 <__aeabi_memset+0x38>
 801c522: ac eb 01 0e                  	sub.w	lr, r12, r1
 801c526: 41 1c                        	adds	r1, r0, #1
 801c528: 6f f0 03 03                  	mvn	r3, #3
 801c52c: cc 18                        	adds	r4, r1, r3
 801c52e: 04 33                        	adds	r3, #4
 801c530: a2 71                        	strb	r2, [r4, #6]
 801c532: 62 71                        	strb	r2, [r4, #5]
 801c534: 22 71                        	strb	r2, [r4, #4]
 801c536: e2 70                        	strb	r2, [r4, #3]
 801c538: 0e eb 03 04                  	add.w	r4, lr, r3
 801c53c: 04 34                        	adds	r4, #4
 801c53e: f5 d1                        	bne	#-22 <__aeabi_memset+0x22>
 801c540: 19 1d                        	adds	r1, r3, #4
 801c542: bc f1 00 0f                  	cmp.w	r12, #0
 801c546: 1c bf                        	itt	ne
 801c548: 42 54                        	strbne	r2, [r0, r1]
 801c54a: bc f1 01 0f                  	cmpne.w	r12, #1
 801c54e: 00 d1                        	bne	#0 <__aeabi_memset+0x48>
 801c550: d0 bd                        	pop	{r4, r6, r7, pc}
 801c552: 08 44                        	add	r0, r1
 801c554: bc f1 02 0f                  	cmp.w	r12, #2
 801c558: 42 70                        	strb	r2, [r0, #1]
 801c55a: 18 bf                        	it	ne
 801c55c: 82 70                        	strbne	r2, [r0, #2]
 801c55e: d0 bd                        	pop	{r4, r6, r7, pc}

0801c560 __aeabi_memset4:
 801c560: 13 46                        	mov	r3, r2
 801c562: d2 b2                        	uxtb	r2, r2
 801c564: 04 29                        	cmp	r1, #4
 801c566: 38 bf                        	it	lo
 801c568: ff f7 d1 bf                  	blo.w	#-94 <__aeabi_memset+0x4>
 801c56c: d0 b5                        	push	{r4, r6, r7, lr}
 801c56e: 02 af                        	add	r7, sp, #8
 801c570: a1 f1 04 0e                  	sub.w	lr, r1, #4
 801c574: 42 ea 03 63                  	orr.w	r3, r2, r3, lsl #24
 801c578: 01 24                        	movs	r4, #1
 801c57a: 43 ea 02 43                  	orr.w	r3, r3, r2, lsl #16
 801c57e: 04 eb 9e 04                  	add.w	r4, r4, lr, lsr #2
 801c582: 43 ea 02 23                  	orr.w	r3, r3, r2, lsl #8
 801c586: 14 f0 03 04                  	ands	r4, r4, #3
 801c58a: 0a d0                        	beq	#20 <__aeabi_memset4+0x46>
 801c58c: 84 46                        	mov	r12, r0
 801c58e: 01 2c                        	cmp	r4, #1
 801c590: 4c f8 04 3b                  	str	r3, [r12], #4
 801c594: 0a d1                        	bne	#20 <__aeabi_memset4+0x50>
 801c596: 74 46                        	mov	r4, lr
 801c598: 60 46                        	mov	r0, r12
 801c59a: be f1 0c 0f                  	cmp.w	lr, #12
 801c59e: 1e d2                        	bhs	#60 <__aeabi_memset4+0x82>
 801c5a0: 0e e0                        	b	#28 <__aeabi_memset4+0x64>
 801c5a2: 0c 46                        	mov	r4, r1
 801c5a4: be f1 0c 0f                  	cmp.w	lr, #12
 801c5a8: 19 d2                        	bhs	#50 <__aeabi_memset4+0x82>
 801c5aa: 09 e0                        	b	#18 <__aeabi_memset4+0x64>
 801c5ac: 02 2c                        	cmp	r4, #2
 801c5ae: 43 60                        	str	r3, [r0, #4]
 801c5b0: 0d d1                        	bne	#26 <__aeabi_memset4+0x72>
 801c5b2: 08 30                        	adds	r0, #8
 801c5b4: a1 f1 08 04                  	sub.w	r4, r1, #8
 801c5b8: 84 46                        	mov	r12, r0
 801c5ba: be f1 0c 0f                  	cmp.w	lr, #12
 801c5be: 0e d2                        	bhs	#28 <__aeabi_memset4+0x82>
 801c5c0: 01 f0 03 01                  	and	r1, r1, #3
 801c5c4: bd e8 d0 40                  	pop.w	{r4, r6, r7, lr}
 801c5c8: 60 46                        	mov	r0, r12
 801c5ca: ff f7 a0 bf                  	b.w	#-192 <__aeabi_memset+0x4>
 801c5ce: 83 60                        	str	r3, [r0, #8]
 801c5d0: 0c 30                        	adds	r0, #12
 801c5d2: a1 f1 0c 04                  	sub.w	r4, r1, #12
 801c5d6: 84 46                        	mov	r12, r0
 801c5d8: be f1 0c 0f                  	cmp.w	lr, #12
 801c5dc: f0 d3                        	blo	#-32 <__aeabi_memset4+0x64>
 801c5de: c0 e9 00 33                  	strd	r3, r3, [r0]
 801c5e2: 10 3c                        	subs	r4, #16
 801c5e4: c0 e9 02 33                  	strd	r3, r3, [r0, #8]
 801c5e8: 10 30                        	adds	r0, #16
 801c5ea: 03 2c                        	cmp	r4, #3
 801c5ec: f7 d8                        	bhi	#-18 <__aeabi_memset4+0x82>
 801c5ee: 84 46                        	mov	r12, r0
 801c5f0: 01 f0 03 01                  	and	r1, r1, #3
 801c5f4: bd e8 d0 40                  	pop.w	{r4, r6, r7, lr}
 801c5f8: 60 46                        	mov	r0, r12
 801c5fa: ff f7 88 bf                  	b.w	#-240 <__aeabi_memset+0x4>

0801c5fe __aeabi_memclr:
 801c5fe: 00 22                        	movs	r2, #0
 801c600: ff f7 85 bf                  	b.w	#-246 <__aeabi_memset+0x4>

0801c604 __aeabi_memclr8:
 801c604: 00 22                        	movs	r2, #0
 801c606: ff f7 ab bf                  	b.w	#-170 <__aeabi_memset4+0x4>

0801c60a __udivmoddi4:
 801c60a: 00 f0 00 b8                  	b.w	#0 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hdfa817896527efdcE+0x4>

0801c60e compiler_builtins::int::udiv::__udivmoddi4::hdfa817896527efdc:
 801c60e: f0 b5                        	push	{r4, r5, r6, r7, lr}
 801c610: 03 af                        	add	r7, sp, #12
 801c612: 2d e9 00 0f                  	push.w	{r8, r9, r10, r11}
 801c616: 87 b0                        	sub	sp, #28
 801c618: d7 f8 08 b0                  	ldr.w	r11, [r7, #8]
 801c61c: 59 b1                        	cbz	r1, #22
 801c61e: e2 b1                        	cbz	r2, #56
 801c620: 00 2b                        	cmp	r3, #0
 801c622: 48 d0                        	beq	#144 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hdfa817896527efdcE+0xac>
 801c624: b1 fa 81 f6                  	clz	r6, r1
 801c628: b3 fa 83 f5                  	clz	r5, r3
 801c62c: ae 1b                        	subs	r6, r5, r6
 801c62e: 1f 2e                        	cmp	r6, #31
 801c630: 00 f2 9c 80                  	bhi.w	#312 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hdfa817896527efdcE+0x162>
 801c634: a5 e0                        	b	#330 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hdfa817896527efdcE+0x178>
 801c636: 00 2b                        	cmp	r3, #0
 801c638: 40 f0 98 80                  	bne.w	#304 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hdfa817896527efdcE+0x162>
 801c63c: bb f1 00 0f                  	cmp.w	r11, #0
 801c640: 00 f0 9f 81                  	beq.w	#830 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hdfa817896527efdcE+0x378>
 801c644: 00 2a                        	cmp	r2, #0
 801c646: 00 f0 fb 81                  	beq.w	#1014 <HardFaultTrampoline>
 801c64a: b0 fb f2 f1                  	udiv	r1, r0, r2
 801c64e: 00 23                        	movs	r3, #0
 801c650: 01 fb 12 01                  	mls	r1, r1, r2, r0
 801c654: cb e9 00 13                  	strd	r1, r3, [r11]
 801c658: 95 e1                        	b	#810 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hdfa817896527efdcE+0x37c>
 801c65a: 00 2b                        	cmp	r3, #0
 801c65c: 00 f0 f0 81                  	beq.w	#992 <HardFaultTrampoline>
 801c660: 00 28                        	cmp	r0, #0
 801c662: 60 d0                        	beq	#192 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hdfa817896527efdcE+0x11c>
 801c664: 4f f0 55 36                  	mov.w	r6, #1431655765
 801c668: 4f f0 33 35                  	mov.w	r5, #858993459
 801c66c: 06 ea 53 06                  	and.w	r6, r6, r3, lsr #1
 801c670: 9e 1b                        	subs	r6, r3, r6
 801c672: 05 ea 96 05                  	and.w	r5, r5, r6, lsr #2
 801c676: 26 f0 cc 36                  	bic	r6, r6, #3435973836
 801c67a: 2e 44                        	add	r6, r5
 801c67c: 4f f0 01 35                  	mov.w	r5, #16843009
 801c680: 06 eb 16 16                  	add.w	r6, r6, r6, lsr #4
 801c684: 26 f0 f0 36                  	bic	r6, r6, #4042322160
 801c688: 6e 43                        	muls	r6, r5, r6
 801c68a: 01 25                        	movs	r5, #1
 801c68c: b5 eb 16 6f                  	cmp.w	r5, r6, lsr #24
 801c690: 65 d1                        	bne	#202 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hdfa817896527efdcE+0x154>
 801c692: bb f1 00 0f                  	cmp.w	r11, #0
 801c696: 1e bf                        	ittt	ne
 801c698: 5a 1e                        	subne	r2, r3, #1
 801c69a: 0a 40                        	andne	r2, r1
 801c69c: cb e9 00 02                  	strdne	r0, r2, [r11]
 801c6a0: 93 fa a3 f0                  	rbit	r0, r3
 801c6a4: b0 fa 80 f0                  	clz	r0, r0
 801c6a8: 21 fa 00 f0                  	lsr.w	r0, r1, r0
 801c6ac: 00 21                        	movs	r1, #0
 801c6ae: 07 b0                        	add	sp, #28
 801c6b0: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 801c6b4: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 801c6b6: 4f f0 55 36                  	mov.w	r6, #1431655765
 801c6ba: 4f f0 33 35                  	mov.w	r5, #858993459
 801c6be: 06 ea 52 06                  	and.w	r6, r6, r2, lsr #1
 801c6c2: 96 1b                        	subs	r6, r2, r6
 801c6c4: 05 ea 96 05                  	and.w	r5, r5, r6, lsr #2
 801c6c8: 26 f0 cc 36                  	bic	r6, r6, #3435973836
 801c6cc: 2e 44                        	add	r6, r5
 801c6ce: 4f f0 01 35                  	mov.w	r5, #16843009
 801c6d2: 06 eb 16 16                  	add.w	r6, r6, r6, lsr #4
 801c6d6: 26 f0 f0 36                  	bic	r6, r6, #4042322160
 801c6da: 6e 43                        	muls	r6, r5, r6
 801c6dc: 01 25                        	movs	r5, #1
 801c6de: b5 eb 16 6f                  	cmp.w	r5, r6, lsr #24
 801c6e2: 31 d1                        	bne	#98 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hdfa817896527efdcE+0x13e>
 801c6e4: bb f1 00 0f                  	cmp.w	r11, #0
 801c6e8: 1f bf                        	itttt	ne
 801c6ea: 00 23                        	movne	r3, #0
 801c6ec: 56 1e                        	subne	r6, r2, #1
 801c6ee: 06 40                        	andne	r6, r0
 801c6f0: cb e9 00 63                  	strdne	r6, r3, [r11]
 801c6f4: 01 2a                        	cmp	r2, #1
 801c6f6: 12 d0                        	beq	#36 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hdfa817896527efdcE+0x114>
 801c6f8: 92 fa a2 f2                  	rbit	r2, r2
 801c6fc: b2 fa 82 f2                  	clz	r2, r2
 801c700: c2 f1 20 03                  	rsb.w	r3, r2, #32
 801c704: d0 40                        	lsrs	r0, r2
 801c706: 01 fa 03 f3                  	lsl.w	r3, r1, r3
 801c70a: 18 43                        	orrs	r0, r3
 801c70c: b2 f1 20 03                  	subs.w	r3, r2, #32
 801c710: 58 bf                        	it	pl
 801c712: 21 fa 03 f0                  	lsrpl.w	r0, r1, r3
 801c716: 21 fa 02 f1                  	lsr.w	r1, r1, r2
 801c71a: 58 bf                        	it	pl
 801c71c: 00 21                        	movpl	r1, #0
 801c71e: 07 b0                        	add	sp, #28
 801c720: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 801c724: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 801c726: bb f1 00 0f                  	cmp.w	r11, #0
 801c72a: 1f bf                        	itttt	ne
 801c72c: b1 fb f3 f0                  	udivne	r0, r1, r3
 801c730: 00 fb 13 10                  	mlsne	r0, r0, r3, r1
 801c734: 00 22                        	movne	r2, #0
 801c736: cb e9 00 20                  	strdne	r2, r0, [r11]
 801c73a: b1 fb f3 f0                  	udiv	r0, r1, r3
 801c73e: 00 21                        	movs	r1, #0
 801c740: 07 b0                        	add	sp, #28
 801c742: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 801c746: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 801c748: b1 fa 81 f6                  	clz	r6, r1
 801c74c: b2 fa 82 f5                  	clz	r5, r2
 801c750: ae 1b                        	subs	r6, r5, r6
 801c752: 6f f0 20 05                  	mvn	r5, #32
 801c756: ad 1b                        	subs	r5, r5, r6
 801c758: 06 f1 21 0c                  	add.w	r12, r6, #33
 801c75c: 15 e0                        	b	#42 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hdfa817896527efdcE+0x180>
 801c75e: b1 fa 81 f6                  	clz	r6, r1
 801c762: b3 fa 83 f5                  	clz	r5, r3
 801c766: ae 1b                        	subs	r6, r5, r6
 801c768: 1e 2e                        	cmp	r6, #30
 801c76a: 0a d9                        	bls	#20 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hdfa817896527efdcE+0x178>
 801c76c: bb f1 00 0f                  	cmp.w	r11, #0
 801c770: 18 bf                        	it	ne
 801c772: cb e9 00 01                  	strdne	r0, r1, [r11]
 801c776: 00 20                        	movs	r0, #0
 801c778: 00 21                        	movs	r1, #0
 801c77a: 07 b0                        	add	sp, #28
 801c77c: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 801c780: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 801c782: c6 f1 3f 05                  	rsb.w	r5, r6, #63
 801c786: 06 f1 01 0c                  	add.w	r12, r6, #1
 801c78a: 05 f0 3f 04                  	and	r4, r5, #63
 801c78e: c4 f1 20 06                  	rsb.w	r6, r4, #32
 801c792: b4 f1 20 08                  	subs.w	r8, r4, #32
 801c796: 01 fa 04 f5                  	lsl.w	r5, r1, r4
 801c79a: 20 fa 06 f6                  	lsr.w	r6, r0, r6
 801c79e: 46 ea 05 0e                  	orr.w	lr, r6, r5
 801c7a2: 0c f0 3f 06                  	and	r6, r12, #63
 801c7a6: 58 bf                        	it	pl
 801c7a8: 00 fa 08 fe                  	lslpl.w	lr, r0, r8
 801c7ac: c6 f1 20 05                  	rsb.w	r5, r6, #32
 801c7b0: b6 f1 20 0a                  	subs.w	r10, r6, #32
 801c7b4: 01 fa 05 f9                  	lsl.w	r9, r1, r5
 801c7b8: 20 fa 06 f5                  	lsr.w	r5, r0, r6
 801c7bc: 49 ea 05 09                  	orr.w	r9, r9, r5
 801c7c0: 00 fa 04 f5                  	lsl.w	r5, r0, r4
 801c7c4: 58 bf                        	it	pl
 801c7c6: 21 fa 0a f9                  	lsrpl.w	r9, r1, r10
 801c7ca: b8 f1 00 0f                  	cmp.w	r8, #0
 801c7ce: 58 bf                        	it	pl
 801c7d0: 00 25                        	movpl	r5, #0
 801c7d2: 21 fa 06 f6                  	lsr.w	r6, r1, r6
 801c7d6: ba f1 00 0f                  	cmp.w	r10, #0
 801c7da: 58 bf                        	it	pl
 801c7dc: 00 26                        	movpl	r6, #0
 801c7de: bc f1 00 0f                  	cmp.w	r12, #0
 801c7e2: 0c d0                        	beq	#24 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hdfa817896527efdcE+0x1f4>
 801c7e4: 0c f0 03 01                  	and	r1, r12, #3
 801c7e8: ac f1 01 00                  	sub.w	r0, r12, #1
 801c7ec: 03 28                        	cmp	r0, #3
 801c7ee: cd e9 01 32                  	strd	r3, r2, [sp, #4]
 801c7f2: 00 91                        	str	r1, [sp]
 801c7f4: 07 d2                        	bhs	#14 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hdfa817896527efdcE+0x1fc>
 801c7f6: 00 24                        	movs	r4, #0
 801c7f8: 00 22                        	movs	r2, #0
 801c7fa: f2 46                        	mov	r10, lr
 801c7fc: 8c e0                        	b	#280 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hdfa817896527efdcE+0x30e>
 801c7fe: 00 24                        	movs	r4, #0
 801c800: 00 22                        	movs	r2, #0
 801c802: f2 46                        	mov	r10, lr
 801c804: 0c e1                        	b	#536 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hdfa817896527efdcE+0x416>
 801c806: dd e9 01 38                  	ldrd	r3, r8, [sp, #4]
 801c80a: a1 eb 0c 00                  	sub.w	r0, r1, r12
 801c80e: 00 21                        	movs	r1, #0
 801c810: 00 22                        	movs	r2, #0
 801c812: f2 46                        	mov	r10, lr
 801c814: cd e9 04 50                  	strd	r5, r0, [sp, #16]
 801c818: 4f ea da 75                  	lsr.w	r5, r10, #31
 801c81c: 45 ea 49 05                  	orr.w	r5, r5, r9, lsl #1
 801c820: 76 00                        	lsls	r6, r6, #1
 801c822: 46 ea d9 76                  	orr.w	r6, r6, r9, lsr #31
 801c826: 06 92                        	str	r2, [sp, #24]
 801c828: e8 43                        	mvns	r0, r5
 801c82a: 0a 46                        	mov	r2, r1
 801c82c: 10 eb 08 00                  	adds.w	r0, r0, r8
 801c830: 6f ea 06 04                  	mvn.w	r4, r6
 801c834: 44 eb 03 0c                  	adc.w	r12, r4, r3
 801c838: 08 ea ec 70                  	and.w	r0, r8, r12, asr #31
 801c83c: 03 ea ec 74                  	and.w	r4, r3, r12, asr #31
 801c840: 28 1a                        	subs	r0, r5, r0
 801c842: ca f3 80 75                  	ubfx	r5, r10, #30, #1
 801c846: 66 eb 04 04                  	sbc.w	r4, r6, r4
 801c84a: 64 00                        	lsls	r4, r4, #1
 801c84c: 44 ea d0 74                  	orr.w	r4, r4, r0, lsr #31
 801c850: 45 ea 40 00                  	orr.w	r0, r5, r0, lsl #1
 801c854: c5 43                        	mvns	r5, r0
 801c856: 15 eb 08 05                  	adds.w	r5, r5, r8
 801c85a: 6f ea 04 05                  	mvn.w	r5, r4
 801c85e: 45 eb 03 0e                  	adc.w	lr, r5, r3
 801c862: 08 ea ee 75                  	and.w	r5, r8, lr, asr #31
 801c866: 40 1b                        	subs	r0, r0, r5
 801c868: 03 ea ee 75                  	and.w	r5, r3, lr, asr #31
 801c86c: ac 41                        	sbcs	r4, r5
 801c86e: ca f3 40 75                  	ubfx	r5, r10, #29, #1
 801c872: 64 00                        	lsls	r4, r4, #1
 801c874: 44 ea d0 74                  	orr.w	r4, r4, r0, lsr #31
 801c878: 45 ea 40 00                  	orr.w	r0, r5, r0, lsl #1
 801c87c: c5 43                        	mvns	r5, r0
 801c87e: 15 eb 08 05                  	adds.w	r5, r5, r8
 801c882: 6f ea 04 05                  	mvn.w	r5, r4
 801c886: 45 eb 03 0b                  	adc.w	r11, r5, r3
 801c88a: 08 ea eb 75                  	and.w	r5, r8, r11, asr #31
 801c88e: 40 1b                        	subs	r0, r0, r5
 801c890: 03 ea eb 75                  	and.w	r5, r3, r11, asr #31
 801c894: ac 41                        	sbcs	r4, r5
 801c896: ca f3 00 75                  	ubfx	r5, r10, #28, #1
 801c89a: 64 00                        	lsls	r4, r4, #1
 801c89c: 44 ea d0 74                  	orr.w	r4, r4, r0, lsr #31
 801c8a0: 45 ea 40 00                  	orr.w	r0, r5, r0, lsl #1
 801c8a4: c5 43                        	mvns	r5, r0
 801c8a6: 15 eb 08 05                  	adds.w	r5, r5, r8
 801c8aa: 6f ea 04 05                  	mvn.w	r5, r4
 801c8ae: 5d 41                        	adcs	r5, r3
 801c8b0: 08 ea e5 71                  	and.w	r1, r8, r5, asr #31
 801c8b4: 03 ea e5 76                  	and.w	r6, r3, r5, asr #31
 801c8b8: 40 1a                        	subs	r0, r0, r1
 801c8ba: 03 90                        	str	r0, [sp, #12]
 801c8bc: 4f f0 01 00                  	mov.w	r0, #1
 801c8c0: 64 eb 06 09                  	sbc.w	r9, r4, r6
 801c8c4: 00 ea e5 74                  	and.w	r4, r0, r5, asr #31
 801c8c8: 06 98                        	ldr	r0, [sp, #24]
 801c8ca: 04 9d                        	ldr	r5, [sp, #16]
 801c8cc: 4f ea 8a 01                  	lsl.w	r1, r10, #2
 801c8d0: 02 26                        	movs	r6, #2
 801c8d2: 40 00                        	lsls	r0, r0, #1
 801c8d4: 40 ea d2 70                  	orr.w	r0, r0, r2, lsr #31
 801c8d8: 41 ea 95 71                  	orr.w	r1, r1, r5, lsr #30
 801c8dc: 08 43                        	orrs	r0, r1
 801c8de: a9 00                        	lsls	r1, r5, #2
 801c8e0: 41 ea 42 01                  	orr.w	r1, r1, r2, lsl #1
 801c8e4: 4f ea ee 75                  	asr.w	r5, lr, #31
 801c8e8: b1 eb ec 71                  	subs.w	r1, r1, r12, asr #31
 801c8ec: 06 ea 45 05                  	and.w	r5, r6, r5, lsl #1
 801c8f0: 60 eb ec 70                  	sbc.w	r0, r0, r12, asr #31
 801c8f4: 4e 46                        	mov	r6, r9
 801c8f6: dd f8 0c 90                  	ldr.w	r9, [sp, #12]
 801c8fa: 00 22                        	movs	r2, #0
 801c8fc: 80 00                        	lsls	r0, r0, #2
 801c8fe: 40 ea 91 70                  	orr.w	r0, r0, r1, lsr #30
 801c902: 45 ea 81 01                  	orr.w	r1, r5, r1, lsl #2
 801c906: b1 eb eb 75                  	subs.w	r5, r1, r11, asr #31
 801c90a: 21 46                        	mov	r1, r4
 801c90c: 60 eb eb 7a                  	sbc.w	r10, r0, r11, asr #31
 801c910: 05 98                        	ldr	r0, [sp, #20]
 801c912: 04 30                        	adds	r0, #4
 801c914: 7f f4 7e af                  	bne.w	#-260 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hdfa817896527efdcE+0x20a>
 801c918: dd f8 00 c0                  	ldr.w	r12, [sp]
 801c91c: d7 f8 08 b0                  	ldr.w	r11, [r7, #8]
 801c920: bc f1 00 0f                  	cmp.w	r12, #0
 801c924: 7c d0                        	beq	#248 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hdfa817896527efdcE+0x416>
 801c926: 4f ea da 71                  	lsr.w	r1, r10, #31
 801c92a: 70 00                        	lsls	r0, r6, #1
 801c92c: 41 ea 49 01                  	orr.w	r1, r1, r9, lsl #1
 801c930: 40 ea d9 76                  	orr.w	r6, r0, r9, lsr #31
 801c934: dd f8 08 80                  	ldr.w	r8, [sp, #8]
 801c938: ae 46                        	mov	lr, r5
 801c93a: cd 43                        	mvns	r5, r1
 801c93c: 01 9b                        	ldr	r3, [sp, #4]
 801c93e: f0 43                        	mvns	r0, r6
 801c940: 15 eb 08 05                  	adds.w	r5, r5, r8
 801c944: 58 41                        	adcs	r0, r3
 801c946: 06 92                        	str	r2, [sp, #24]
 801c948: 08 ea e0 75                  	and.w	r5, r8, r0, asr #31
 801c94c: 03 ea e0 72                  	and.w	r2, r3, r0, asr #31
 801c950: b1 eb 05 09                  	subs.w	r9, r1, r5
 801c954: 4f f0 01 01                  	mov.w	r1, #1
 801c958: 01 ea e0 70                  	and.w	r0, r1, r0, asr #31
 801c95c: 96 41                        	sbcs	r6, r2
 801c95e: 05 90                        	str	r0, [sp, #20]
 801c960: 4f ea 4a 00                  	lsl.w	r0, r10, #1
 801c964: 06 9a                        	ldr	r2, [sp, #24]
 801c966: 40 ea de 70                  	orr.w	r0, r0, lr, lsr #31
 801c96a: 44 ea 4e 01                  	orr.w	r1, r4, lr, lsl #1
 801c96e: bc f1 01 0f                  	cmp.w	r12, #1
 801c972: 40 ea 02 0e                  	orr.w	lr, r0, r2
 801c976: 0d d1                        	bne	#26 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hdfa817896527efdcE+0x38a>
 801c978: 05 9c                        	ldr	r4, [sp, #20]
 801c97a: 00 22                        	movs	r2, #0
 801c97c: 0d 46                        	mov	r5, r1
 801c97e: f2 46                        	mov	r10, lr
 801c980: 4e e0                        	b	#156 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hdfa817896527efdcE+0x416>
 801c982: 00 2a                        	cmp	r2, #0
 801c984: 5c d0                        	beq	#184 <HardFaultTrampoline>
 801c986: b0 fb f2 f0                  	udiv	r0, r0, r2
 801c98a: 00 21                        	movs	r1, #0
 801c98c: 07 b0                        	add	sp, #28
 801c98e: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 801c992: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 801c994: 74 00                        	lsls	r4, r6, #1
 801c996: ca f3 80 76                  	ubfx	r6, r10, #30, #1
 801c99a: 46 ea 49 06                  	orr.w	r6, r6, r9, lsl #1
 801c99e: 44 ea d9 74                  	orr.w	r4, r4, r9, lsr #31
 801c9a2: 62 46                        	mov	r2, r12
 801c9a4: f5 43                        	mvns	r5, r6
 801c9a6: e0 43                        	mvns	r0, r4
 801c9a8: 15 eb 08 05                  	adds.w	r5, r5, r8
 801c9ac: 40 eb 03 05                  	adc.w	r5, r0, r3
 801c9b0: 08 ea e5 70                  	and.w	r0, r8, r5, asr #31
 801c9b4: 03 ea e5 7c                  	and.w	r12, r3, r5, asr #31
 801c9b8: b6 eb 00 09                  	subs.w	r9, r6, r0
 801c9bc: 4f f0 01 00                  	mov.w	r0, #1
 801c9c0: 64 eb 0c 06                  	sbc.w	r6, r4, r12
 801c9c4: 00 ea e5 74                  	and.w	r4, r0, r5, asr #31
 801c9c8: 05 98                        	ldr	r0, [sp, #20]
 801c9ca: 02 2a                        	cmp	r2, #2
 801c9cc: 40 ea 41 05                  	orr.w	r5, r0, r1, lsl #1
 801c9d0: 4f ea 4e 00                  	lsl.w	r0, lr, #1
 801c9d4: 40 ea d1 7c                  	orr.w	r12, r0, r1, lsr #31
 801c9d8: 02 d1                        	bne	#4 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hdfa817896527efdcE+0x3d6>
 801c9da: e2 46                        	mov	r10, r12
 801c9dc: 00 22                        	movs	r2, #0
 801c9de: 1f e0                        	b	#62 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hdfa817896527efdcE+0x416>
 801c9e0: ae 46                        	mov	lr, r5
 801c9e2: ca f3 40 75                  	ubfx	r5, r10, #29, #1
 801c9e6: 71 00                        	lsls	r1, r6, #1
 801c9e8: 45 ea 49 05                  	orr.w	r5, r5, r9, lsl #1
 801c9ec: 41 ea d9 71                  	orr.w	r1, r1, r9, lsr #31
 801c9f0: ee 43                        	mvns	r6, r5
 801c9f2: c8 43                        	mvns	r0, r1
 801c9f4: 16 eb 08 06                  	adds.w	r6, r6, r8
 801c9f8: 58 41                        	adcs	r0, r3
 801c9fa: 08 ea e0 72                  	and.w	r2, r8, r0, asr #31
 801c9fe: 03 ea e0 73                  	and.w	r3, r3, r0, asr #31
 801ca02: b5 eb 02 09                  	subs.w	r9, r5, r2
 801ca06: 4f ea 4c 02                  	lsl.w	r2, r12, #1
 801ca0a: 61 eb 03 06                  	sbc.w	r6, r1, r3
 801ca0e: 01 21                        	movs	r1, #1
 801ca10: 01 ea e0 70                  	and.w	r0, r1, r0, asr #31
 801ca14: 44 ea 4e 05                  	orr.w	r5, r4, lr, lsl #1
 801ca18: 42 ea de 7a                  	orr.w	r10, r2, lr, lsr #31
 801ca1c: 00 22                        	movs	r2, #0
 801ca1e: 04 46                        	mov	r4, r0
 801ca20: 4f ea 4a 01                  	lsl.w	r1, r10, #1
 801ca24: bb f1 00 0f                  	cmp.w	r11, #0
 801ca28: 41 ea d5 71                  	orr.w	r1, r1, r5, lsr #31
 801ca2c: 18 bf                        	it	ne
 801ca2e: cb e9 00 96                  	strdne	r9, r6, [r11]
 801ca32: 44 ea 45 00                  	orr.w	r0, r4, r5, lsl #1
 801ca36: 11 43                        	orrs	r1, r2
 801ca38: 07 b0                        	add	sp, #28
 801ca3a: bd e8 00 0f                  	pop.w	{r8, r9, r10, r11}
 801ca3e: f0 bd                        	pop	{r4, r5, r6, r7, pc}
 801ca40: fe de                        	trap
 801ca42: fe de                        	trap

0801ca44 HardFaultTrampoline:
 801ca44: 70 46                        	mov	r0, lr
 801ca46: 04 21                        	movs	r1, #4
 801ca48: 08 42                        	tst	r0, r1
 801ca4a: 02 d1                        	bne	#4 <HardFaultTrampoline+0x12>
 801ca4c: ef f3 08 80                  	mrs	r0, msp
 801ca50: 02 e0                        	b	#4 <.L__unnamed_112>
 801ca52: ef f3 09 80                  	mrs	r0, psp
 801ca56: ff e7                        	b	#-2 <.L__unnamed_112>

0801ca58 HardFault_:
;     loop {
 801ca58: fe e7                        	b	#-4 <.L__unnamed_112>
 801ca5a: 00 00                        	movs	r0, r0
